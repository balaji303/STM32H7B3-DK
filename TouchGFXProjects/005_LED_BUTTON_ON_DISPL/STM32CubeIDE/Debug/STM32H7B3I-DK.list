
STM32H7B3I-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002897c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e78  08028c2c  08028c2c  00038c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000028  0802caa4  0802caa4  0003caa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802cacc  0802cacc  0041c444  2**0
                  CONTENTS
  5 .ARM          00000000  0802cacc  0802cacc  0041c444  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802cacc  0802cacc  0041c444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802cacc  0802cacc  0003cacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000000c  0802cae8  0802cae8  0003cae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000128  24000000  0802caf4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00005a00  24000128  0802cc1c  00040128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000209c0  24005b28  0803261c  00045b28  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  240264e8  0803261c  000464e8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0041c444  2**0
                  CONTENTS, READONLY
 14 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  ALLOC
 15 FontFlashSection 0000090c  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000058  9000090c  9000090c  0005090c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 003cbae0  90000964  90000964  00050964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 Video_RGB_Buffer 0005fa00  d0000000  d0000000  00420000  2**2
                  ALLOC
 19 .debug_line   00052694  00000000  00000000  0041c472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_info   000a5ff9  00000000  00000000  0046eb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00011bc1  00000000  00000000  00514aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 00004370  00000000  00000000  005266c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017d210  00000000  00000000  0052aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00003e20  00000000  00000000  006a7c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00042c36  00000000  00000000  006aba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000cf  00000000  00000000  006ee696  2**0
                  CONTENTS, READONLY
 27 .debug_frame  000125c4  00000000  00000000  006ee768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24005b28 	.word	0x24005b28
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08028c14 	.word	0x08028c14

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24005b2c 	.word	0x24005b2c
 80002ec:	08028c14 	.word	0x08028c14

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
  ldr  r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ba:	f00b fdd7 	bl	800bf6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f027 fbaf 	bl	8027b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f005 fd61 	bl	8005e88 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003cc:	0802caf4 	.word	0x0802caf4
  ldr  r0, =_sdata
 80003d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003d4:	24000128 	.word	0x24000128
  ldr  r2, =_sbss
 80003d8:	24005b28 	.word	0x24005b28
  ldr  r3, = _ebss
 80003dc:	240264e8 	.word	0x240264e8

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>

080003e2 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8000402:	f003 f9d3 	bl	80037ac <touchgfx_components_init>
  touchgfx_init();
 8000406:	f003 f9a7 	bl	8003758 <touchgfx_init>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}

0800040e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8000416:	f003 f9d1 	bl	80037bc <touchgfx_taskEntry>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>:

    /** Initialize. */
    virtual void init() = 0;

    /** Finalizes an instance of the MCUInstrumentation class. */
    virtual ~MCUInstrumentation()
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    {
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	601a      	str	r2, [r3, #0]
    }
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4618      	mov	r0, r3
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	0802ae84 	.word	0x0802ae84

08000444 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
    virtual ~MCUInstrumentation()
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    }
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ffe9 	bl	8000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8000452:	210c      	movs	r1, #12
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f027 faea 	bl	8027a2e <_ZdlPvj>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
    /**
     * Sets MCU activity high.
     *
     * @param  active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	460b      	mov	r3, r1
 800046e:	70fb      	strb	r3, [r7, #3]
    {
        if (active) // Idle task sched out
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d011      	beq.n	800049a <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3310      	adds	r3, #16
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	4798      	blx	r3
 8000482:	4602      	mov	r2, r0
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	441a      	add	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	605a      	str	r2, [r3, #4]
        }
        else // Idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8000498:	e008      	b.n	80004ac <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3310      	adds	r3, #16
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	4798      	blx	r3
 80004a6:	4602      	mov	r2, r0
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	609a      	str	r2, [r3, #8]
    }
 80004ac:	bf00      	nop
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
    /**
     * Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
    }
 80004c0:	4618      	mov	r0, r3
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
    /**
     * Sets number of consumed clock cycles.
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	605a      	str	r2, [r3, #4]
    }
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void CortexMMCUInstrumentation::init()
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 80004f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fa:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4908      	ldr	r1, [pc, #32]	; (8000524 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x40>)
 8000504:	4313      	orrs	r3, r2
 8000506:	600b      	str	r3, [r1, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000edfc 	.word	0xe000edfc
 8000524:	e0001fb0 	.word	0xe0001fb0
 8000528:	c5acce55 	.word	0xc5acce55
 800052c:	e0001000 	.word	0xe0001000

08000530 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	1ad2      	subs	r2, r2, r3
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	085b      	lsrs	r3, r3, #1
 8000548:	441a      	add	r2, r3
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    return *((volatile unsigned int*)0xE0001004);
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x18>)
 8000566:	681b      	ldr	r3, [r3, #0]
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e0001004 	.word	0xe0001004

08000578 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d011      	beq.n	80005ae <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x36>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3310      	adds	r3, #16
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	4798      	blx	r3
 8000596:	4602      	mov	r2, r0
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	60fb      	str	r3, [r7, #12]
        cc_consumed += cc_temp;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	441a      	add	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80005ac:	e008      	b.n	80005c0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x48>
        cc_in = getCPUCycles();
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3310      	adds	r3, #16
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	4798      	blx	r3
 80005ba:	4602      	mov	r2, r0
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	609a      	str	r2, [r3, #8]
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev+0x20>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff23 	bl	8000424 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	0802ae5c 	.word	0x0802ae5c

080005ec <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ffe7 	bl	80005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 80005fa:	210c      	movs	r1, #12
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f027 fa16 	bl	8027a2e <_ZdlPvj>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    {
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	601a      	str	r2, [r3, #0]
    }
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	0802aec4 	.word	0x0802aec4

0800062c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    }
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ffe9 	bl	800060c <_ZN8touchgfx15TouchControllerD1Ev>
 800063a:	2104      	movs	r1, #4
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f027 f9f6 	bl	8027a2e <_ZdlPvj>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 8000654:	2308      	movs	r3, #8
 8000656:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <_ZN20STM32TouchController4initEv+0x30>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <_ZN20STM32TouchController4initEv+0x34>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4619      	mov	r1, r3
 800066e:	2000      	movs	r0, #0
 8000670:	f00b fa5e 	bl	800bb30 <BSP_TS_Init>
}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2402625e 	.word	0x2402625e
 8000680:	24026260 	.word	0x24026260

08000684 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	2000      	movs	r0, #0
 80006a4:	f00b faea 	bl	800bc7c <BSP_TS_GetState>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2301      	movne	r3, #1
 80006b0:	2300      	moveq	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00a      	beq.n	80006ce <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006bc:	f383 8811 	msr	BASEPRI, r3
 80006c0:	f3bf 8f6f 	isb	sy
 80006c4:	f3bf 8f4f 	dsb	sy
 80006c8:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006ca:	bf00      	nop
    {
        configASSERT(0);
 80006cc:	e7fe      	b.n	80006cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d009      	beq.n	80006e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]

        return true;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e000      	b.n	80006ea <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff81 	bl	800060c <_ZN8touchgfx15TouchControllerD1Ev>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	0802aeac 	.word	0x0802aeac

08000718 <_ZN20STM32TouchControllerD0Ev>:
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ffe7 	bl	80006f4 <_ZN20STM32TouchControllerD1Ev>
 8000726:	2104      	movs	r1, #4
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f027 f980 	bl	8027a2e <_ZdlPvj>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
    for (int id = 0; id <= 4; id++)
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b04      	cmp	r3, #4
 8000746:	dc16      	bgt.n	8000776 <_ZN8touchgfx4GPIO4initEv+0x3e>
    {
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f909 	bl	8000964 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <_ZN8touchgfx4GPIO4initEv+0x36>
        {
            if (GPIO_InvertedLevels[id] != 1)
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <_ZN8touchgfx4GPIO4initEv+0x48>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d004      	beq.n	800076e <_ZN8touchgfx4GPIO4initEv+0x36>
            {
                GPIO_InvertedLevels[id] = 1;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <_ZN8touchgfx4GPIO4initEv+0x48>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2101      	movs	r1, #1
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int id = 0; id <= 4; id++)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	e7e5      	b.n	8000742 <_ZN8touchgfx4GPIO4initEv+0xa>
            }
        }
    }
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	24005b44 	.word	0x24005b44

08000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b03      	cmp	r3, #3
 8000792:	d84b      	bhi.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	080007cd 	.word	0x080007cd
 80007a4:	080007ed 	.word	0x080007ed
 80007a8:	0800080d 	.word	0x0800080d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf0c      	ite	eq
 80007b8:	2301      	moveq	r3, #1
 80007ba:	2300      	movne	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 80007c6:	f00c fc27 	bl	800d018 <HAL_GPIO_WritePin>
#endif
        break;
 80007ca:	e02f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf0c      	ite	eq
 80007d8:	2301      	moveq	r3, #1
 80007da:	2300      	movne	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	4814      	ldr	r0, [pc, #80]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 80007e6:	f00c fc17 	bl	800d018 <HAL_GPIO_WritePin>
#endif
        break;
 80007ea:	e01f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4a11      	ldr	r2, [pc, #68]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80007f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb8>)
 8000806:	f00c fc07 	bl	800d018 <HAL_GPIO_WritePin>
#endif
        break;
 800080a:	e00f      	b.n	800082c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8000826:	f00c fbf7 	bl	800d018 <HAL_GPIO_WritePin>
#endif
        break;
 800082a:	bf00      	nop
    }
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	24005b44 	.word	0x24005b44
 8000838:	58021c00 	.word	0x58021c00
 800083c:	58022000 	.word	0x58022000

08000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d84b      	bhi.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
 8000850:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8000852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000856:	bf00      	nop
 8000858:	08000869 	.word	0x08000869
 800085c:	08000889 	.word	0x08000889
 8000860:	080008a9 	.word	0x080008a9
 8000864:	080008c9 	.word	0x080008c9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 800086c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 8000874:	2301      	movs	r3, #1
 8000876:	e000      	b.n	800087a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 8000878:	2300      	movs	r3, #0
 800087a:	461a      	mov	r2, r3
 800087c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8000882:	f00c fbc9 	bl	800d018 <HAL_GPIO_WritePin>
#endif
        break;
 8000886:	e02f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 800088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 8000894:	2301      	movs	r3, #1
 8000896:	e000      	b.n	800089a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5a>
 8000898:	2300      	movs	r3, #0
 800089a:	461a      	mov	r2, r3
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 80008a2:	f00c fbb9 	bl	800d018 <HAL_GPIO_WritePin>
#endif
        break;
 80008a6:	e01f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 80008ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>
 80008b4:	2301      	movs	r3, #1
 80008b6:	e000      	b.n	80008ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7a>
 80008b8:	2300      	movs	r3, #0
 80008ba:	461a      	mov	r2, r3
 80008bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb8>)
 80008c2:	f00c fba9 	bl	800d018 <HAL_GPIO_WritePin>
#endif
        break;
 80008c6:	e00f      	b.n	80008e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 80008cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x98>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x9a>
 80008d8:	2300      	movs	r3, #0
 80008da:	461a      	mov	r2, r3
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 80008e2:	f00c fb99 	bl	800d018 <HAL_GPIO_WritePin>
#endif
        break;
 80008e6:	bf00      	nop
    }
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	24005b44 	.word	0x24005b44
 80008f4:	58021c00 	.word	0x58021c00
 80008f8:	58022000 	.word	0x58022000

080008fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d823      	bhi.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 800090c:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	08000925 	.word	0x08000925
 8000918:	08000931 	.word	0x08000931
 800091c:	0800093d 	.word	0x0800093d
 8000920:	08000949 	.word	0x08000949
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800092a:	f00c fb8e 	bl	800d04a <HAL_GPIO_TogglePin>
#endif
        break;
 800092e:	e011      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8000936:	f00c fb88 	bl	800d04a <HAL_GPIO_TogglePin>
#endif
        break;
 800093a:	e00b      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8000942:	f00c fb82 	bl	800d04a <HAL_GPIO_TogglePin>
#endif
        break;
 8000946:	e005      	b.n	8000954 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800094e:	f00c fb7c 	bl	800d04a <HAL_GPIO_TogglePin>
#endif
        break;
 8000952:	bf00      	nop
    }
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58021c00 	.word	0x58021c00
 8000960:	58022000 	.word	0x58022000

08000964 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
    switch (id)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b03      	cmp	r3, #3
 8000976:	d82b      	bhi.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	08000991 	.word	0x08000991
 8000984:	080009a1 	.word	0x080009a1
 8000988:	080009b1 	.word	0x080009b1
 800098c:	080009c1 	.word	0x080009c1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 8000996:	f00c fb27 	bl	800cfe8 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 800099e:	e017      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 80009a6:	f00c fb1f 	bl	800cfe8 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009ae:	e00f      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x84>)
 80009b6:	f00c fb17 	bl	800cfe8 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009be:	e007      	b.n	80009d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80009c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c4:	4807      	ldr	r0, [pc, #28]	; (80009e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 80009c6:	f00c fb0f 	bl	800cfe8 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80009ce:	bf00      	nop
    }
    return (bitstatus == GPIO_PIN_SET);
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	bf0c      	ite	eq
 80009d6:	2301      	moveq	r3, #1
 80009d8:	2300      	movne	r3, #0
 80009da:	b2db      	uxtb	r3, r3
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58021c00 	.word	0x58021c00
 80009e8:	58022000 	.word	0x58022000

080009ec <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    {
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
    }
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	0802c194 	.word	0x0802c194

08000a0c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    }
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffe9 	bl	80009ec <_ZN8touchgfx3HALD1Ev>
 8000a1a:	217c      	movs	r1, #124	; 0x7c
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f027 f806 	bl	8027a2e <_ZdlPvj>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
    {
        return instance;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
    }
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	24026264 	.word	0x24026264

08000a44 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	78fa      	ldrb	r2, [r7, #3]
 8000a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	887a      	ldrh	r2, [r7, #2]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d304      	bcc.n	8000a90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	883a      	ldrh	r2, [r7, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d205      	bcs.n	8000a9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8000a94:	219e      	movs	r1, #158	; 0x9e
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8000a98:	f026 fff8 	bl	8027a8c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8000aa4:	883b      	ldrh	r3, [r7, #0]
 8000aa6:	8013      	strh	r3, [r2, #0]
    }
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	24026258 	.word	0x24026258
 8000ab4:	2402625a 	.word	0x2402625a
 8000ab8:	08028c2c 	.word	0x08028c2c
 8000abc:	08028c90 	.word	0x08028c90
 8000ac0:	08028cd4 	.word	0x08028cd4
 8000ac4:	2402625e 	.word	0x2402625e
 8000ac8:	24026260 	.word	0x24026260

08000acc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d009      	beq.n	8000af2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4610      	mov	r0, r2
 8000aec:	4798      	blx	r3
 8000aee:	4603      	mov	r3, r0
 8000af0:	e000      	b.n	8000af4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8000af2:	2300      	movs	r3, #0
    }
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f019 fb45 	bl	801a194 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	33ac      	adds	r3, #172	; 0xac
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
    }
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8000b28:	2300      	movs	r3, #0
    }
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8000b50:	f240 21d2 	movw	r1, #722	; 0x2d2
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8000b56:	f026 ff99 	bl	8027a8c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf14      	ite	ne
 8000b6c:	2301      	movne	r3, #1
 8000b6e:	2300      	moveq	r3, #0
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8000b74:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	338c      	adds	r3, #140	; 0x8c
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6839      	ldr	r1, [r7, #0]
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	4798      	blx	r3
    }
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08028d1c 	.word	0x08028d1c
 8000b90:	08028d54 	.word	0x08028d54
 8000b94:	08028cd4 	.word	0x08028cd4
 8000b98:	24026262 	.word	0x24026262

08000b9c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2301      	movne	r3, #1
 8000bb4:	2300      	moveq	r3, #0
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8000bba:	701a      	strb	r2, [r3, #0]
    }
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	24026263 	.word	0x24026263

08000bcc <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
    /**
     * Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	611a      	str	r2, [r3, #16]
    }
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     * This method sets a flag that determines if generic HAL should calculate MCU load
     * based on concrete MCU instrumentation.
     *
     * @param  enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8000c10:	2300      	movs	r3, #0
    }
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4798      	blx	r3
        }
    }
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8000c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3318      	adds	r3, #24
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4610      	mov	r0, r2
 8000c74:	4798      	blx	r3
 8000c76:	4603      	mov	r3, r0
    }
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d011      	beq.n	8000cbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d11e      	bne.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cac:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000cb0:	89bb      	ldrh	r3, [r7, #12]
 8000cb2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8000cba:	e010      	b.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00c      	beq.n	8000cde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000cd0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000cd4:	89fb      	ldrh	r3, [r7, #14]
 8000cd6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
    }
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	2402625c 	.word	0x2402625c
 8000cf0:	2402625a 	.word	0x2402625a
 8000cf4:	24026258 	.word	0x24026258

08000cf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f018 fcaa 	bl	801965c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe63 	bl	80009ec <_ZN8touchgfx3HALD1Ev>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	0802b3b4 	.word	0x0802b3b4

08000d34 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ffe7 	bl	8000d10 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000d42:	217c      	movs	r1, #124	; 0x7c
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f026 fe72 	bl	8027a2e <_ZdlPvj>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffca 	bl	8000cf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fa1c 	bl	80041b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    instrumentation.init();
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	337c      	adds	r3, #124	; 0x7c
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbb1 	bl	80004e8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
    setMCUInstrumentation(&instrumentation);
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	337c      	adds	r3, #124	; 0x7c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f7ff ff1c 	bl	8000bcc <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    enableMCULoadCalculation(true);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2101      	movs	r1, #1
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff25 	bl	8000be8 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3380      	adds	r3, #128	; 0x80
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
    enableInterrupts();
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3378      	adds	r3, #120	; 0x78
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8000dc8:	f001 fadc 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3370      	adds	r3, #112	; 0x70
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8000de0:	f00c f91a 	bl	800d018 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2104      	movs	r1, #4
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000dea:	f00c f915 	bl	800d018 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2102      	movs	r1, #2
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000df4:	f00c f910 	bl	800d018 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000df8:	f001 fac4 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3370      	adds	r3, #112	; 0x70
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4610      	mov	r0, r2
 8000e08:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8000e0a:	e7f5      	b.n	8000df8 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8000e0c:	58022800 	.word	0x58022800
 8000e10:	58020000 	.word	0x58020000

08000e14 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fa88 	bl	8004334 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fa87 	bl	8004350 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 fa8e 	bl	800437c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e68:	f3bf 8f4f 	dsb	sy
}
 8000e6c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e74:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	0b5b      	lsrs	r3, r3, #13
 8000e7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e7e:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e88:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	015a      	lsls	r2, r3, #5
 8000e8e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e92:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e98:	4912      	ldr	r1, [pc, #72]	; (8000ee4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	60fa      	str	r2, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	bf14      	ite	ne
 8000eaa:	2301      	movne	r3, #1
 8000eac:	2300      	moveq	r3, #0
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d000      	beq.n	8000eb6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8000eb4:	e7e9      	b.n	8000e8a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	613a      	str	r2, [r7, #16]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf14      	ite	ne
 8000ec0:	2301      	movne	r3, #1
 8000ec2:	2300      	moveq	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d000      	beq.n	8000ecc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8000eca:	e7d9      	b.n	8000e80 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ecc:	f3bf 8f4f 	dsb	sy
}
 8000ed0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ed2:	f3bf 8f6f 	isb	sy
}
 8000ed6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000ed8:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 f99a 	bl	800422c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 f99e 	bl	800424c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f9a0 	bl	8004268 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 f9a2 	bl	8004284 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <IdleTaskHook>:

/* USER CODE BEGIN extern C functions */
extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
        if ((int)p) //idle task sched out
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <IdleTaskHook+0x1e>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8000f56:	f7ff fd69 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f019 f932 	bl	801a1c8 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8000f64:	e006      	b.n	8000f74 <IdleTaskHook+0x2c>
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8000f66:	f7ff fd61 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f019 f92a 	bl	801a1c8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
 8000f74:	2301      	movs	r3, #1
    }
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <_ZN11TouchGFXHALD1Ev+0x2c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	337c      	adds	r3, #124	; 0x7c
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb18 	bl	80005c8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff feb8 	bl	8000d10 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	0802aedc 	.word	0x0802aedc

08000fb0 <_ZN11TouchGFXHALD0Ev>:
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe1 	bl	8000f80 <_ZN11TouchGFXHALD1Ev>
 8000fbe:	2188      	movs	r1, #136	; 0x88
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f026 fd34 	bl	8027a2e <_ZdlPvj>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    {
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <_ZN12MJPEGDecoderD1Ev+0x1c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]
    }
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	0802aff8 	.word	0x0802aff8

08000ff0 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    }
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffe9 	bl	8000fd0 <_ZN12MJPEGDecoderD1Ev>
 8000ffe:	2104      	movs	r1, #4
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f026 fd14 	bl	8027a2e <_ZdlPvj>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    {
        return frameNumber;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
    }
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    void setAVIFileBuffer(uint8_t* buffer, uint32_t size)
    {
        aviBuffer = buffer, aviBufferLength = size;
    }

    virtual AVIErrors getLastError()
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    {
        return lastError;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    }
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	0802aff8 	.word	0x0802aff8

08001064 <_ZN20HardwareMJPEGDecoderC1Ev>:
    uint32_t LastLineHeight;
    uint32_t MCU_pr_line;
    uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ffe8 	bl	8001044 <_ZN12MJPEGDecoderC1Ev>
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 80010dc:	f004 fd30 	bl	8005b40 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2001      	movs	r0, #1
 80010e6:	f013 fee6 	bl	8014eb6 <osSemaphoreNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0802afb4 	.word	0x0802afb4
 8001100:	24005b8c 	.word	0x24005b8c

08001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	1acb      	subs	r3, r1, r3
 8001126:	4413      	add	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e004      	b.n	8001136 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f027 f960 	bl	8028400 <strncmp>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3301      	adds	r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	ea41 0203 	orr.w	r2, r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3302      	adds	r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3303      	adds	r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	061b      	lsls	r3, r3, #24
 80011a2:	4313      	orrs	r3, r2
 80011a4:	e016      	b.n	80011d4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	431a      	orrs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3302      	adds	r3, #2
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	431a      	orrs	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3303      	adds	r3, #3
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	4313      	orrs	r3, r2
    }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d013      	beq.n	800121a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3301      	adds	r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	430b      	orrs	r3, r1
 8001218:	e00c      	b.n	8001234 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	4413      	add	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	4313      	orrs	r3, r2
    }
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	2b00      	cmp	r3, #0
 8001252:	d033      	beq.n	80012bc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d909      	bls.n	8001272 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2209      	movs	r2, #9
 8001262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 800126a:	21a7      	movs	r1, #167	; 0xa7
 800126c:	4819      	ldr	r0, [pc, #100]	; (80012d4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 800126e:	f026 fc0d 	bl	8027a8c <__assert_func>
        }

        reader->seek(offset);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	330c      	adds	r3, #12
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	4610      	mov	r0, r2
 8001284:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3310      	adds	r3, #16
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4798      	blx	r3
 800129c:	4603      	mov	r3, r0
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	220d      	movs	r2, #13
 80012ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ba:	e003      	b.n	80012c4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4413      	add	r3, r2
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	08028da4 	.word	0x08028da4
 80012d0:	08028db8 	.word	0x08028db8
 80012d4:	08028dfc 	.word	0x08028dfc

080012d8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af04      	add	r7, sp, #16
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	460b      	mov	r3, r1
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	4613      	mov	r3, r2
 80012ec:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 80012f6:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 80012f8:	4a4e      	ldr	r2, [pc, #312]	; (8001434 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 80012fa:	21b9      	movs	r1, #185	; 0xb9
 80012fc:	484e      	ldr	r0, [pc, #312]	; (8001438 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 80012fe:	f026 fbc5 	bl	8027a8c <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2208      	movs	r2, #8
 8001308:	4619      	mov	r1, r3
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff ff98 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4619      	mov	r1, r3
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff ff62 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800131c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	3302      	adds	r3, #2
 8001324:	4619      	mov	r1, r3
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f7ff ff5a 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800132c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	3304      	adds	r3, #4
 8001334:	4619      	mov	r1, r3
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7ff ff07 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800133c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 800133e:	f243 0330 	movw	r3, #12336	; 0x3030
 8001342:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8001344:	f246 3364 	movw	r3, #25444	; 0x6364
 8001348:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4413      	add	r3, r2
 8001352:	f103 0208 	add.w	r2, r3, #8
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	429a      	cmp	r2, r3
 800135c:	d255      	bcs.n	800140a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	f243 0230 	movw	r2, #12336	; 0x3030
 8001364:	4293      	cmp	r3, r2
 8001366:	d126      	bne.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f246 3264 	movw	r2, #25444	; 0x6364
 800136e:	4293      	cmp	r3, r2
 8001370:	d121      	bne.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01e      	beq.n	80013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f103 0208 	add.w	r2, r3, #8
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4619      	mov	r1, r3
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff ff57 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001392:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	6939      	ldr	r1, [r7, #16]
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 fa8e 	bl	80018c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	441a      	add	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
            currentMovieOffset += 8;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f103 0208 	add.w	r2, r3, #8
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	3301      	adds	r3, #1
 80013e0:	f023 0201 	bic.w	r2, r3, #1
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	699a      	ldr	r2, [r3, #24]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d114      	bne.n	800141e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001408:	e009      	b.n	800141e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8001418:	2301      	movs	r3, #1
 800141a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 800141e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	08028e70 	.word	0x08028e70
 8001434:	08028ebc 	.word	0x08028ebc
 8001438:	08028dfc 	.word	0x08028dfc

0800143c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 800144c:	4b37      	ldr	r3, [pc, #220]	; (800152c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 800144e:	4a38      	ldr	r2, [pc, #224]	; (8001530 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8001450:	21ed      	movs	r1, #237	; 0xed
 8001452:	4838      	ldr	r0, [pc, #224]	; (8001534 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8001454:	f026 fb1a 	bl	8027a8c <__assert_func>

    readData(currentMovieOffset, 8);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2208      	movs	r2, #8
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff feed 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	3304      	adds	r3, #4
 800146c:	4619      	mov	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe6b 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001474:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	4413      	add	r3, r2
 800147e:	f103 0208 	add.w	r2, r3, #8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	429a      	cmp	r2, r3
 8001488:	d243      	bcs.n	8001512 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4413      	add	r3, r2
 8001492:	f103 0208 	add.w	r2, r3, #8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	3301      	adds	r3, #1
 80014a0:	f023 0201 	bic.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
        frameNumber++;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2208      	movs	r2, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fec0 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fe8a 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80014cc:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	3302      	adds	r3, #2
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fe82 	bl	80011e0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80014dc:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	3304      	adds	r3, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fe2f 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80014ec:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 80014ee:	f243 0330 	movw	r3, #12336	; 0x3030
 80014f2:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 80014f4:	f246 3364 	movw	r3, #25444	; 0x6364
 80014f8:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f243 0230 	movw	r2, #12336	; 0x3030
 8001500:	4293      	cmp	r3, r2
 8001502:	d1b8      	bne.n	8001476 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f246 3264 	movw	r2, #25444	; 0x6364
 800150a:	4293      	cmp	r3, r2
 800150c:	d1b3      	bne.n	8001476 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 800150e:	2301      	movs	r3, #1
 8001510:	e007      	b.n	8001522 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
    return false;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	08028e70 	.word	0x08028e70
 8001530:	08028f18 	.word	0x08028f18
 8001534:	08028dfc 	.word	0x08028dfc

08001538 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f834 	bl	80015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3308      	adds	r3, #8
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	4798      	blx	r3
 8001586:	4602      	mov	r2, r0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f819 	bl	80015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 80015da:	2248      	movs	r2, #72	; 0x48
 80015dc:	2100      	movs	r1, #0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fe2e 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6999      	ldr	r1, [r3, #24]
 80015e8:	2304      	movs	r3, #4
 80015ea:	4aa5      	ldr	r2, [pc, #660]	; (8001880 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fd89 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf14      	ite	ne
 80015f8:	2301      	movne	r3, #1
 80015fa:	2300      	moveq	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00a      	beq.n	8001618 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 800160a:	4b9e      	ldr	r3, [pc, #632]	; (8001884 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 800160c:	4a9e      	ldr	r2, [pc, #632]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800160e:	f240 1135 	movw	r1, #309	; 0x135
 8001612:	489e      	ldr	r0, [pc, #632]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001614:	f026 fa3a 	bl	8027a8c <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f103 0208 	add.w	r2, r3, #8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6999      	ldr	r1, [r3, #24]
 8001628:	2304      	movs	r3, #4
 800162a:	4a99      	ldr	r2, [pc, #612]	; (8001890 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fd69 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2204      	movs	r2, #4
 8001646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 800164a:	4b92      	ldr	r3, [pc, #584]	; (8001894 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 800164c:	4a8e      	ldr	r2, [pc, #568]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800164e:	f240 113d 	movw	r1, #317	; 0x13d
 8001652:	488e      	ldr	r0, [pc, #568]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001654:	f026 fa1a 	bl	8027a8c <__assert_func>
    }

    currentMovieOffset += 4;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	1d1a      	adds	r2, r3, #4
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6999      	ldr	r1, [r3, #24]
 8001666:	2304      	movs	r3, #4
 8001668:	4a8b      	ldr	r2, [pc, #556]	; (8001898 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fd4a 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2205      	movs	r2, #5
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 8001688:	4b84      	ldr	r3, [pc, #528]	; (800189c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 800168a:	4a7f      	ldr	r2, [pc, #508]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800168c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001690:	487e      	ldr	r0, [pc, #504]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001692:	f026 f9fb 	bl	8027a8c <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	3304      	adds	r3, #4
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd53 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80016a4:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 80016b2:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 80016b4:	4a74      	ldr	r2, [pc, #464]	; (8001888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80016b6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80016ba:	4874      	ldr	r0, [pc, #464]	; (800188c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80016bc:	f026 f9e6 	bl	8027a8c <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	3308      	adds	r3, #8
 80016cc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 80016ce:	2304      	movs	r3, #4
 80016d0:	4a74      	ldr	r2, [pc, #464]	; (80018a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 80016d2:	6979      	ldr	r1, [r7, #20]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fd15 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2206      	movs	r2, #6
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3304      	adds	r3, #4
 80016fc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 80016fe:	2304      	movs	r3, #4
 8001700:	4a69      	ldr	r2, [pc, #420]	; (80018a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8001702:	6979      	ldr	r1, [r7, #20]
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fcfd 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2207      	movs	r2, #7
 800171e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8001728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800172c:	2b00      	cmp	r3, #0
 800172e:	d028      	beq.n	8001782 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3308      	adds	r3, #8
 8001734:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fd06 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800173e:	4603      	mov	r3, r0
 8001740:	4a5a      	ldr	r2, [pc, #360]	; (80018ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	099a      	lsrs	r2, r3, #6
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3310      	adds	r3, #16
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fcf9 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001758:	4602      	mov	r2, r0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3320      	adds	r3, #32
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fcf0 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800176a:	4602      	mov	r2, r0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3324      	adds	r3, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fce7 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800177c:	4602      	mov	r2, r0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	3308      	adds	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 800178c:	220c      	movs	r2, #12
 800178e:	6a39      	ldr	r1, [r7, #32]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fd55 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f103 0108 	add.w	r1, r3, #8
 800179c:	2304      	movs	r3, #4
 800179e:	4a44      	ldr	r2, [pc, #272]	; (80018b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fcaf 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00b      	beq.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	6a3a      	ldr	r2, [r7, #32]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d201      	bcs.n	80017c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d012      	beq.n	80017f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	3304      	adds	r3, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fcba 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80017d6:	4603      	mov	r3, r0
 80017d8:	3308      	adds	r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 80017e4:	220c      	movs	r2, #12
 80017e6:	6a39      	ldr	r1, [r7, #32]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fd29 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80017ee:	e7d2      	b.n	8001796 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	220a      	movs	r2, #10
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8001802:	e05e      	b.n	80018c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f103 020c 	add.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	3304      	adds	r3, #4
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fc98 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800181a:	4602      	mov	r2, r0
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	4413      	add	r3, r2
 8001820:	f103 0208 	add.w	r2, r3, #8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	3304      	adds	r3, #4
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fc8b 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001834:	4603      	mov	r3, r0
 8001836:	3308      	adds	r3, #8
 8001838:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 800183a:	6a3a      	ldr	r2, [r7, #32]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4413      	add	r3, r2
 8001840:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8001842:	2204      	movs	r2, #4
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fcfa 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800184c:	2304      	movs	r3, #4
 800184e:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fc56 	bl	8001104 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d027      	beq.n	80018b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a3a      	ldr	r2, [r7, #32]
 800186c:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699a      	ldr	r2, [r3, #24]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	621a      	str	r2, [r3, #32]
 800187c:	e021      	b.n	80018c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 800187e:	bf00      	nop
 8001880:	08028f4c 	.word	0x08028f4c
 8001884:	08028f54 	.word	0x08028f54
 8001888:	08028f70 	.word	0x08028f70
 800188c:	08028dfc 	.word	0x08028dfc
 8001890:	08028fa0 	.word	0x08028fa0
 8001894:	08028fa8 	.word	0x08028fa8
 8001898:	08028fc0 	.word	0x08028fc0
 800189c:	08028fc8 	.word	0x08028fc8
 80018a0:	08028fe0 	.word	0x08028fe0
 80018a4:	08028fec 	.word	0x08028fec
 80018a8:	08028ff4 	.word	0x08028ff4
 80018ac:	10624dd3 	.word	0x10624dd3
 80018b0:	08028ffc 	.word	0x08028ffc
 80018b4:	08029004 	.word	0x08029004
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	220b      	movs	r2, #11
 80018bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 80018c0:	bf00      	nop
}
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
    if (length == 0)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d05f      	beq.n	800199c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd4>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d05d      	beq.n	800199e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
    {
        // Update JPEG conversion parameters
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018e4:	2203      	movs	r2, #3
 80018e6:	611a      	str	r2, [r3, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a2d      	ldr	r2, [pc, #180]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018ee:	6013      	str	r3, [r2, #0]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
        {
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	3310      	adds	r3, #16
 8001906:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001908:	6013      	str	r3, [r2, #0]
        }
        JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	015b      	lsls	r3, r3, #5
 8001916:	461a      	mov	r2, r3
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800191a:	605a      	str	r2, [r3, #4]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001924:	60d3      	str	r3, [r2, #12]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	f1c3 0310 	rsb	r3, r3, #16
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001934:	6093      	str	r3, [r2, #8]

        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	481a      	ldr	r0, [pc, #104]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800193e:	f000 f901 	bl	8001b44 <JPEG_Decode_DMA>
        do
        {
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4619      	mov	r1, r3
 8001948:	4817      	ldr	r0, [pc, #92]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800194a:	f000 fab5 	bl	8001eb8 <JPEG_OutputHandler>
 800194e:	4603      	mov	r3, r0
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001952:	6013      	str	r3, [r2, #0]

            //If nothing to do, allow other tasks
            if (JpegProcessing_End == 2)
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xac>
            {
                SEM_WAIT(semDecodingDone);
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f04f 31ff 	mov.w	r1, #4294967295
 800196e:	4618      	mov	r0, r3
 8001970:	f013 fb2a 	bl	8014fc8 <osSemaphoreAcquire>
            }
        } while (JpegProcessing_End != 1);
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d000      	beq.n	8001988 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>
        do
 8001986:	e7dc      	b.n	8001942 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7a>

        // reset job queue and flags after frame is decoded
        external_queue.reset();
 8001988:	480a      	ldr	r0, [pc, #40]	; (80019b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xec>)
 800198a:	f000 fc07 	bl	800219c <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>
        Jpeg_HWDecodingEnd = 0;
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf0>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
        DMA2D_CopyBufferEnd = 0;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf4>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e000      	b.n	800199e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
        return;
 800199c:	bf00      	nop
    }
}
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	24005bb0 	.word	0x24005bb0
 80019a8:	2400af88 	.word	0x2400af88
 80019ac:	24005b7c 	.word	0x24005b7c
 80019b0:	24005b8c 	.word	0x24005b8c
 80019b4:	24005b90 	.word	0x24005b90
 80019b8:	24005b64 	.word	0x24005b64
 80019bc:	24005b74 	.word	0x24005b74

080019c0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
    // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2208      	movs	r2, #8
 80019d4:	4619      	mov	r1, r3
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fc32 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	3304      	adds	r3, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fbb0 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80019ea:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	3308      	adds	r3, #8
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fc22 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80019fc:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d018      	beq.n	8001a36 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
    {
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	6939      	ldr	r1, [r7, #16]
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8001a0c:	f000 f89a 	bl	8001b44 <JPEG_Decode_DMA>

        do
        {
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	4619      	mov	r1, r3
 8001a16:	480a      	ldr	r0, [pc, #40]	; (8001a40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8001a18:	f000 fa4e 	bl	8001eb8 <JPEG_OutputHandler>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8001a20:	6013      	str	r3, [r2, #0]
        } while (JpegProcessing_End == 0);
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d000      	beq.n	8001a36 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
        do
 8001a34:	e7ec      	b.n	8001a10 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2400af88 	.word	0x2400af88
 8001a44:	24005b7c 	.word	0x24005b7c

08001a48 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	807b      	strh	r3, [r7, #2]
    assert(0);
 8001a56:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8001a5a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 8001a60:	f026 f814 	bl	8027a8c <__assert_func>
 8001a64:	0802900c 	.word	0x0802900c
 8001a68:	08029010 	.word	0x08029010
 8001a6c:	08028dfc 	.word	0x08028dfc

08001a70 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    if (frameNumber == 0)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	332c      	adds	r3, #44	; 0x2c
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
 8001a90:	4602      	mov	r2, r0
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	4293      	cmp	r3, r2
 8001a96:	bf8c      	ite	hi
 8001a98:	2301      	movhi	r3, #1
 8001a9a:	2300      	movls	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	332c      	adds	r3, #44	; 0x2c
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
 8001aae:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	3308      	adds	r3, #8
 8001abe:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fbbb 	bl	8001240 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3308      	adds	r3, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fb3a 	bl	800114a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4413      	add	r3, r2
 8001ade:	1f1a      	subs	r2, r3, #4
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	615a      	str	r2, [r3, #20]
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]

}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 8001b22:	b490      	push	{r4, r7}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4614      	mov	r4, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc90      	pop	{r4, r7}
 8001b42:	4770      	bx	lr

08001b44 <JPEG_Decode_DMA>:
      * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
      * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
      * @retval None
      */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
        FrameBufferAddress = output;
 8001b52:	4a2a      	ldr	r2, [pc, #168]	; (8001bfc <JPEG_Decode_DMA+0xb8>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6013      	str	r3, [r2, #0]
        Output_Is_Paused = 0;
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <JPEG_Decode_DMA+0xbc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <JPEG_Decode_DMA+0xc0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
        JPEG_OUT_Write_BufferIndex = 0;
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <JPEG_Decode_DMA+0xc4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
        JPEG_InputImageIndex = 0;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <JPEG_Decode_DMA+0xc8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <JPEG_Decode_DMA+0xcc>)
 8001b74:	6013      	str	r3, [r2, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8001b76:	4a27      	ldr	r2, [pc, #156]	; (8001c14 <JPEG_Decode_DMA+0xd0>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6013      	str	r3, [r2, #0]
        MCU_BlockIndex = 0;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <JPEG_Decode_DMA+0xd4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
        DMA2D_output_Is_Paused = 1;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <JPEG_Decode_DMA+0xd8>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

        //Init buffers
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d816      	bhi.n	8001bc0 <JPEG_Decode_DMA+0x7c>
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001b92:	4923      	ldr	r1, [pc, #140]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001ba4:	491e      	ldr	r1, [pc, #120]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e7e5      	b.n	8001b8c <JPEG_Decode_DMA+0x48>
        }

        //Do not return from this function until done with decoding all chunks.
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <JPEG_Decode_DMA+0xc4>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4916      	ldr	r1, [pc, #88]	; (8001c20 <JPEG_Decode_DMA+0xdc>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <JPEG_Decode_DMA+0xe0>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	01db      	lsls	r3, r3, #7
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	460b      	mov	r3, r1
 8001be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f00c f9db 	bl	800dfa6 <HAL_JPEG_Decode_DMA>

        return 0;
 8001bf0:	2300      	movs	r3, #0
    }
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	24005b54 	.word	0x24005b54
 8001c00:	24005b70 	.word	0x24005b70
 8001c04:	24005b68 	.word	0x24005b68
 8001c08:	24005b6c 	.word	0x24005b6c
 8001c0c:	24005b58 	.word	0x24005b58
 8001c10:	24005b60 	.word	0x24005b60
 8001c14:	24005b5c 	.word	0x24005b5c
 8001c18:	24005b88 	.word	0x24005b88
 8001c1c:	24005b78 	.word	0x24005b78
 8001c20:	24000004 	.word	0x24000004
 8001c24:	24005bb0 	.word	0x24005bb0

08001c28 <HAL_JPEG_InfoReadyCallback>:
      * @param hjpeg: JPEG handle pointer
      * @param pInfo: JPEG Info Struct pointer
      * @retval None
      */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d12f      	bne.n	8001c9a <HAL_JPEG_InfoReadyCallback+0x72>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_JPEG_InfoReadyCallback+0x2e>
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f023 030f 	bic.w	r3, r3, #15
 8001c4e:	f103 0210 	add.w	r2, r3, #16
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	60da      	str	r2, [r3, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_JPEG_InfoReadyCallback+0x4a>
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f023 030f 	bic.w	r3, r3, #15
 8001c6a:	f103 0210 	add.w	r2, r3, #16
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	609a      	str	r2, [r3, #8]
            }

            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_JPEG_InfoReadyCallback+0x124>)
 8001c74:	4936      	ldr	r1, [pc, #216]	; (8001d50 <HAL_JPEG_InfoReadyCallback+0x128>)
 8001c76:	6838      	ldr	r0, [r7, #0]
 8001c78:	f003 fe08 	bl	800588c <TGFX_JPEG_GetDecodeColorConvertFunc>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73bb      	strb	r3, [r7, #14]
            if (status != HAL_OK)
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d05d      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
            {
                assert(status == HAL_OK);
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d05a      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8001c8e:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <HAL_JPEG_InfoReadyCallback+0x130>)
 8001c90:	f240 2131 	movw	r1, #561	; 0x231
 8001c94:	4831      	ldr	r0, [pc, #196]	; (8001d5c <HAL_JPEG_InfoReadyCallback+0x134>)
 8001c96:	f025 fef9 	bl	8027a8c <__assert_func>
            }
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d11b      	bne.n	8001cda <HAL_JPEG_InfoReadyCallback+0xb2>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_JPEG_InfoReadyCallback+0x96>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f023 030f 	bic.w	r3, r3, #15
 8001cb6:	f103 0210 	add.w	r2, r3, #16
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	60da      	str	r2, [r3, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_JPEG_InfoReadyCallback+0xb2>
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	f103 0208 	add.w	r2, r3, #8
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	609a      	str	r2, [r3, #8]
                }
            }

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d11b      	bne.n	8001d1a <HAL_JPEG_InfoReadyCallback+0xf2>
            {
                if ((pInfo->ImageWidth % 8) != 0)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_JPEG_InfoReadyCallback+0xd6>
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f023 0307 	bic.w	r3, r3, #7
 8001cf6:	f103 0208 	add.w	r2, r3, #8
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	60da      	str	r2, [r3, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_JPEG_InfoReadyCallback+0xf2>
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	f103 0208 	add.w	r2, r3, #8
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	609a      	str	r2, [r3, #8]
                }
            }

            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_JPEG_InfoReadyCallback+0x124>)
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <HAL_JPEG_InfoReadyCallback+0x128>)
 8001d1e:	6838      	ldr	r0, [r7, #0]
 8001d20:	f017 f8c8 	bl	8018eb4 <JPEG_GetDecodeColorConvertFunc>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]
            if (status != HAL_OK)
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
            {
                assert(status == HAL_OK);
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_JPEG_InfoReadyCallback+0x11a>
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_JPEG_InfoReadyCallback+0x130>)
 8001d38:	f240 2153 	movw	r1, #595	; 0x253
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <HAL_JPEG_InfoReadyCallback+0x134>)
 8001d3e:	f025 fea5 	bl	8027a8c <__assert_func>
            }
        }
    }
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	24005b80 	.word	0x24005b80
 8001d50:	24005b84 	.word	0x24005b84
 8001d54:	0802906c 	.word	0x0802906c
 8001d58:	08029080 	.word	0x08029080
 8001d5c:	08028dfc 	.word	0x08028dfc

08001d60 <HAL_JPEG_GetDataCallback>:
      * @param hjpeg: JPEG handle pointer
      * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
      * @retval None
      */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
        //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
        JPEG_InputImageIndex += NbDecodedData;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d74:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_JPEG_GetDataCallback+0x60>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d218      	bcs.n	8001db4 <HAL_JPEG_GetDataCallback+0x54>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d8c:	6013      	str	r3, [r2, #0]
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_JPEG_GetDataCallback+0x60>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_JPEG_GetDataCallback+0x5c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	60fb      	str	r3, [r7, #12]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_JPEG_GetDataCallback+0x64>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da6:	bf28      	it	cs
 8001da8:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8001dac:	461a      	mov	r2, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f00c fa9f 	bl	800e2f2 <HAL_JPEG_ConfigInputBuffer>
        }
    }
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	24005b58 	.word	0x24005b58
 8001dc0:	24005b5c 	.word	0x24005b5c
 8001dc4:	24005b60 	.word	0x24005b60

08001dc8 <HAL_JPEG_DataReadyCallback>:
      * @param pDataOut: pointer to the output data buffer
      * @param OutDataLength: length of output buffer in bytes
      * @retval None
      */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4927      	ldr	r1, [pc, #156]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4922      	ldr	r1, [pc, #136]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	3308      	adds	r3, #8
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e06:	6013      	str	r3, [r2, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d902      	bls.n	8001e16 <HAL_JPEG_DataReadyCallback+0x4e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
        }

        //if the other buffer is full, then ui thread might be converting it
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4917      	ldr	r1, [pc, #92]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_JPEG_DataReadyCallback+0x72>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f00c f91c 	bl	800e06c <HAL_JPEG_Pause>
            Output_Is_Paused = 1;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_JPEG_DataReadyCallback+0xb4>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_JPEG_DataReadyCallback+0xac>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <HAL_JPEG_DataReadyCallback+0xb0>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_JPEG_DataReadyCallback+0xb8>)
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	01db      	lsls	r3, r3, #7
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f00c fa5a 	bl	800e316 <HAL_JPEG_ConfigOutputBuffer>

        // Signal Hardware Decoding to wake up
        SEM_POST(semDecodingDone);
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_JPEG_DataReadyCallback+0xbc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f013 f900 	bl	801506c <osSemaphoreRelease>
    }
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	24005b6c 	.word	0x24005b6c
 8001e78:	24000004 	.word	0x24000004
 8001e7c:	24005b70 	.word	0x24005b70
 8001e80:	24005bb0 	.word	0x24005bb0
 8001e84:	24005b8c 	.word	0x24005b8c

08001e88 <HAL_JPEG_ErrorCallback>:
      * @brief  JPEG Error callback
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
        __disable_irq();
        while (1)
 8001e94:	e7fe      	b.n	8001e94 <HAL_JPEG_ErrorCallback+0xc>
	...

08001e98 <HAL_JPEG_DecodeCpltCallback>:
      * @brief  JPEG Decode complete callback
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
        Jpeg_HWDecodingEnd = 1;
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
    }
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	24005b64 	.word	0x24005b64

08001eb8 <JPEG_OutputHandler>:
  * @param hjpeg: JPEG handle pointer
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg, touchgfx::DMA_Interface& dma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <JPEG_OutputHandler+0x120>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <JPEG_OutputHandler+0x1e>
 8001eca:	4b44      	ldr	r3, [pc, #272]	; (8001fdc <JPEG_OutputHandler+0x124>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <JPEG_OutputHandler+0x1e>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <JPEG_OutputHandler+0x20>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <JPEG_OutputHandler+0x28>
    {
        return 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e077      	b.n	8001fd0 <JPEG_OutputHandler+0x118>
    }

    // Add job to DMA2D if ready and JPEG buffer is full
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	493f      	ldr	r1, [pc, #252]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <JPEG_OutputHandler+0x4a>
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <JPEG_OutputHandler+0x4a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <JPEG_OutputHandler+0x4c>
 8001f02:	2300      	movs	r3, #0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02d      	beq.n	8001f64 <JPEG_OutputHandler+0xac>
    {
        External_DMA2D_JobTypeDef new_job =
        {
            MCU_BlockIndex,
            &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
        };
 8001f08:	4b38      	ldr	r3, [pc, #224]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60bb      	str	r3, [r7, #8]
            &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
 8001f0e:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f1c:	4413      	add	r3, r2
        };
 8001f1e:	60fb      	str	r3, [r7, #12]

        external_queue.push(new_job);
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4619      	mov	r1, r3
 8001f26:	4832      	ldr	r0, [pc, #200]	; (8001ff0 <JPEG_OutputHandler+0x138>)
 8001f28:	f000 f94d 	bl	80021c6 <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <JPEG_OutputHandler+0x13c>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a2d      	ldr	r2, [pc, #180]	; (8001fec <JPEG_OutputHandler+0x134>)
 8001f38:	6013      	str	r3, [r2, #0]

        JPEG_OUT_Read_BufferIndex++;
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f42:	6013      	str	r3, [r2, #0]
        if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001f44:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d902      	bls.n	8001f52 <JPEG_OutputHandler+0x9a>
        {
            JPEG_OUT_Read_BufferIndex = 0;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
        }

        DMA2D_output_Is_Paused = 0;
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        // Try to start DMA2D
        dma.start();
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3310      	adds	r3, #16
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	4798      	blx	r3
    }

    // Start JPEG IP if paused and next buffer is empty
    if ((Output_Is_Paused == 1) && \
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001f66:	681b      	ldr	r3, [r3, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d117      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <JPEG_OutputHandler+0x144>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	491c      	ldr	r1, [pc, #112]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	781b      	ldrb	r3, [r3, #0]
    if ((Output_Is_Paused == 1) && \
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <JPEG_OutputHandler+0x128>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <JPEG_OutputHandler+0x12c>)
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	781b      	ldrb	r3, [r3, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <JPEG_OutputHandler+0xe4>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <JPEG_OutputHandler+0xe6>
 8001f9c:	2300      	movs	r3, #0
    if ((Output_Is_Paused == 1) && \
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <JPEG_OutputHandler+0xf8>
    {
        Output_Is_Paused = 0;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001fa8:	2102      	movs	r1, #2
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f00c f8b6 	bl	800e11c <HAL_JPEG_Resume>
    }

    if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <JPEG_OutputHandler+0x140>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <JPEG_OutputHandler+0x10c>
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <JPEG_OutputHandler+0x130>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <JPEG_OutputHandler+0x10c>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <JPEG_OutputHandler+0x10e>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <JPEG_OutputHandler+0x116>
    {
        return 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e000      	b.n	8001fd0 <JPEG_OutputHandler+0x118>
    }

    return 0;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24005b64 	.word	0x24005b64
 8001fdc:	24005b74 	.word	0x24005b74
 8001fe0:	24005b68 	.word	0x24005b68
 8001fe4:	24000004 	.word	0x24000004
 8001fe8:	24005b78 	.word	0x24005b78
 8001fec:	24005b88 	.word	0x24005b88
 8001ff0:	24005b90 	.word	0x24005b90
 8001ff4:	24005bb0 	.word	0x24005bb0
 8001ff8:	24005b70 	.word	0x24005b70
 8001ffc:	24005b6c 	.word	0x24005b6c

08002000 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    uint32_t xRef, yRef, refline;

    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	011a      	lsls	r2, r3, #4
 800200e:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	617b      	str	r3, [r7, #20]
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	fbb3 f1f2 	udiv	r1, r3, r2
 8002028:	fb01 f202 	mul.w	r2, r1, r2
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	fb03 f202 	mul.w	r2, r3, r2
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	6939      	ldr	r1, [r7, #16]
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800204a:	2201      	movs	r2, #1
 800204c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <DMA2D_CopyBuffer+0xd0>)
 8002054:	6819      	ldr	r1, [r3, #0]
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	1acb      	subs	r3, r1, r3
 800205c:	429a      	cmp	r2, r3
 800205e:	d309      	bcc.n	8002074 <DMA2D_CopyBuffer+0x74>
    {
        WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	4917      	ldr	r1, [pc, #92]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	644b      	str	r3, [r1, #68]	; 0x44
 8002072:	e007      	b.n	8002084 <DMA2D_CopyBuffer+0x84>
    }
    else
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	6453      	str	r3, [r2, #68]	; 0x44
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <DMA2D_CopyBuffer+0xd4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	440b      	add	r3, r1
 8002090:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <DMA2D_CopyBuffer+0xc8>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f1c3 031e 	rsb	r3, r3, #30
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	6413      	str	r3, [r2, #64]	; 0x40

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, 0);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <DMA2D_CopyBuffer+0xd8>)
 80020aa:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020b4:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <DMA2D_CopyBuffer+0xcc>)
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <DMA2D_CopyBuffer+0xdc>)
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	24005bb0 	.word	0x24005bb0
 80020cc:	52001000 	.word	0x52001000
 80020d0:	24005b80 	.word	0x24005b80
 80020d4:	24005b54 	.word	0x24005b54
 80020d8:	ff09000b 	.word	0xff09000b
 80020dc:	00010201 	.word	0x00010201

080020e0 <DMA2D_ExternalJobCompleted>:
  * @brief  External DMA2D job complete callback
  * @param job: External job reference
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    // Mark ycbcr empty
    job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
    job.jpeg_buffer->DataBufferSize = 0;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]

    // Mark dma paused if queue is empty
    if (external_queue.is_empty())
 80020f8:	480e      	ldr	r0, [pc, #56]	; (8002134 <DMA2D_ExternalJobCompleted+0x54>)
 80020fa:	f000 f827 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <DMA2D_ExternalJobCompleted+0x2a>
    {
        DMA2D_output_Is_Paused = 1;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <DMA2D_ExternalJobCompleted+0x58>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
    }

    // Check if last line
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <DMA2D_ExternalJobCompleted+0x5c>)
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <DMA2D_ExternalJobCompleted+0x60>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	1acb      	subs	r3, r1, r3
 8002118:	429a      	cmp	r2, r3
 800211a:	d302      	bcc.n	8002122 <DMA2D_ExternalJobCompleted+0x42>
    {
        DMA2D_CopyBufferEnd = 1;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <DMA2D_ExternalJobCompleted+0x64>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    }

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <DMA2D_ExternalJobCompleted+0x68>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f012 ffa0 	bl	801506c <osSemaphoreRelease>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	24005b90 	.word	0x24005b90
 8002138:	24005b78 	.word	0x24005b78
 800213c:	24005b80 	.word	0x24005b80
 8002140:	24005bb0 	.word	0x24005bb0
 8002144:	24005b74 	.word	0x24005b74
 8002148:	24005b8c 	.word	0x24005b8c

0800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>:
    }
    External_DMA2D_JobTypeDef& front()
    {
        return buffer_[head_];
    }
    bool is_empty()
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    {
        return count_ == 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
    }
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>:
    ExternalDMAJob_Queue()
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
        : max_size_(Size), head_(0), tail_(0), count_(0)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
    {}
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>:
    bool is_full()
    {
        return count_ == max_size_;
    }
    void reset()
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    {
        head_ = tail_ = count_ = 0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	605a      	str	r2, [r3, #4]
    }
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>:
    void push(const External_DMA2D_JobTypeDef& job)
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
        buffer_[tail_] = job;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	3302      	adds	r3, #2
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	460a      	mov	r2, r1
 80021e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e4:	e883 0003 	stmia.w	r3, {r0, r1}
        tail_ = (tail_ + 1) % max_size_;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	3301      	adds	r3, #1
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80021f6:	fb01 f202 	mul.w	r2, r1, r2
 80021fa:	1a9a      	subs	r2, r3, r2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
        count_++;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60da      	str	r2, [r3, #12]
    }
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fed1 	bl	8000fd0 <_ZN12MJPEGDecoderD1Ev>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	0802afb4 	.word	0x0802afb4

0800223c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffe7 	bl	8002218 <_ZN20HardwareMJPEGDecoderD1Ev>
 800224a:	2148      	movs	r1, #72	; 0x48
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f025 fbee 	bl	8027a2e <_ZdlPvj>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_Z41__static_initialization_and_destruction_0ii>:
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002272:	4293      	cmp	r3, r2
 8002274:	d102      	bne.n	800227c <_Z41__static_initialization_and_destruction_0ii+0x20>
ExternalDMAJob_Queue<EXT_DMA2D_QUEUE_SIZE> external_queue;
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002278:	f7ff ff79 	bl	800216e <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	24005b90 	.word	0x24005b90

08002288 <_GLOBAL__sub_I_FrameBufferAddress>:
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
 800228c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff ffe3 	bl	800225c <_Z41__static_initialization_and_destruction_0ii>
 8002296:	bd80      	pop	{r7, pc}

08002298 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800229c:	2200      	movs	r2, #0
 800229e:	2101      	movs	r1, #1
 80022a0:	2001      	movs	r0, #1
 80022a2:	f012 fe08 	bl	8014eb6 <osSemaphoreNew>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80022aa:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80022b8:	2128      	movs	r1, #40	; 0x28
 80022ba:	480e      	ldr	r0, [pc, #56]	; (80022f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80022bc:	f025 fbe6 	bl	8027a8c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2104      	movs	r1, #4
 80022c4:	2001      	movs	r0, #1
 80022c6:	f012 ff15 	bl	80150f4 <osMessageQueueNew>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80022ce:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80022e0:	f025 fbd4 	bl	8027a8c <__assert_func>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	24005bc4 	.word	0x24005bc4
 80022ec:	080290c8 	.word	0x080290c8
 80022f0:	08029114 	.word	0x08029114
 80022f4:	08029144 	.word	0x08029144
 80022f8:	24005bc8 	.word	0x24005bc8
 80022fc:	080291b0 	.word	0x080291b0

08002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	4618      	mov	r0, r3
 800230e:	f012 fe5b 	bl	8014fc8 <osSemaphoreAcquire>
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	24005bc4 	.word	0x24005bc4

0800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f012 fea1 	bl	801506c <osSemaphoreRelease>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	24005bc4 	.word	0x24005bc4

08002334 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f012 fe42 	bl	8014fc8 <osSemaphoreAcquire>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	24005bc4 	.word	0x24005bc4

0800234c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f012 fe89 	bl	801506c <osSemaphoreRelease>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	24005bc4 	.word	0x24005bc4

08002364 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	2300      	movs	r3, #0
 800236e:	2200      	movs	r2, #0
 8002370:	4903      	ldr	r1, [pc, #12]	; (8002380 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8002372:	f012 ff33 	bl	80151dc <osMessageQueuePut>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	24005bc8 	.word	0x24005bc8
 8002380:	2400001c 	.word	0x2400001c

08002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	1d39      	adds	r1, r7, #4
 8002390:	2300      	movs	r3, #0
 8002392:	2200      	movs	r2, #0
 8002394:	f012 ff82 	bl	801529c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	1d39      	adds	r1, r7, #4
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	2200      	movs	r2, #0
 80023a4:	f012 ff7a 	bl	801529c <osMessageQueueGet>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	24005bc8 	.word	0x24005bc8

080023b4 <__NVIC_EnableIRQ>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_DisableIRQ>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db12      	blt.n	8002428 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	490a      	ldr	r1, [pc, #40]	; (8002434 <__NVIC_DisableIRQ+0x44>)
 800240a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	3320      	adds	r3, #32
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800241c:	f3bf 8f4f 	dsb	sy
}
 8002420:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002422:	f3bf 8f6f 	isb	sy
}
 8002426:	bf00      	nop
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100

08002438 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
        : color(0)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    {
    }
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    {
        return color;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
    }
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    {
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	601a      	str	r2, [r3, #0]
    }
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	0802b088 	.word	0x0802b088

0800248c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    }
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe9 	bl	800246c <_ZN8touchgfx9DMA_QueueD1Ev>
 800249a:	2104      	movs	r1, #4
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f025 fac6 	bl	8027a2e <_ZdlPvj>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3344      	adds	r3, #68	; 0x44
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
    }
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
    {
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
    }
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	0802c26c 	.word	0x0802c26c

080024e8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    }
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffe9 	bl	80024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80024f6:	210c      	movs	r1, #12
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f025 fa98 	bl	8027a2e <_ZdlPvj>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	721a      	strb	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	725a      	strb	r2, [r3, #9]
    {
    }
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	0802c26c 	.word	0x0802c26c

0800253c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002544:	2301      	movs	r3, #1
    }
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    {
        if (started_by_external_job)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3da0 	ldrb.w	r3, [r3, #3488]	; 0xda0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
        {
            externalJobCompleted();
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f88a 	bl	8002680 <_ZN8STM32DMA20externalJobCompletedEv>
            {
                started_by_external_job = true;
                externalJobExecute();
            }
        }
    }
 800256c:	e022      	b.n	80025b4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
            executeCompleted();
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3328      	adds	r3, #40	; 0x28
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4610      	mov	r0, r2
 800257a:	4798      	blx	r3
            if (!external_queue.is_empty() && !isRunning)
 800257c:	480f      	ldr	r0, [pc, #60]	; (80025bc <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
 800257e:	f7ff fde5 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8002582:	4603      	mov	r3, r0
 8002584:	f083 0301 	eor.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7a1b      	ldrb	r3, [r3, #8]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <_ZN8STM32DMA18signalDMAInterruptEv+0x4e>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
                started_by_external_job = true;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
                externalJobExecute();
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f890 	bl	80026d4 <_ZN8STM32DMA18externalJobExecuteEv>
    }
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	24005b90 	.word	0x24005b90

080025c0 <_ZN8STM32DMA5startEv>:

    virtual void start()
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    {
        MUTEX_LOCK(mutexIsRunning);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 80025ce:	f04f 31ff 	mov.w	r1, #4294967295
 80025d2:	4618      	mov	r0, r3
 80025d4:	f012 fbe7 	bl	8014da6 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4610      	mov	r0, r2
 80025e6:	4798      	blx	r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7a5b      	ldrb	r3, [r3, #9]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7a1b      	ldrb	r3, [r3, #8]
 8002602:	f083 0301 	eor.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <_ZN8STM32DMA5startEv+0x50>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <_ZN8STM32DMA5startEv+0x52>
 8002610:	2300      	movs	r3, #0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <_ZN8STM32DMA5startEv+0x6e>
        {
            started_by_external_job = false;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            execute();
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3324      	adds	r3, #36	; 0x24
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4610      	mov	r0, r2
 800262a:	4798      	blx	r3
 800262c:	e01b      	b.n	8002666 <_ZN8STM32DMA5startEv+0xa6>
        }
        else if (!external_queue.is_empty() && !isRunning)
 800262e:	4813      	ldr	r0, [pc, #76]	; (800267c <_ZN8STM32DMA5startEv+0xbc>)
 8002630:	f7ff fd8c 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8002634:	4603      	mov	r3, r0
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <_ZN8STM32DMA5startEv+0x92>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7a1b      	ldrb	r3, [r3, #8]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <_ZN8STM32DMA5startEv+0x92>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <_ZN8STM32DMA5startEv+0x94>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <_ZN8STM32DMA5startEv+0xa6>
        {
            started_by_external_job = true;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            externalJobExecute();
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f837 	bl	80026d4 <_ZN8STM32DMA18externalJobExecuteEv>
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 800266c:	4618      	mov	r0, r3
 800266e:	f012 fbe5 	bl	8014e3c <osMutexRelease>
    }
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24005b90 	.word	0x24005b90

08002680 <_ZN8STM32DMA20externalJobCompletedEv>:
     *
     * @brief Handle DMA2D when an external job has been executed
     *
     * @param None
     */
    void externalJobCompleted()
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    {
        if (!external_queue.is_empty() && isRunning)
 8002688:	4811      	ldr	r0, [pc, #68]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 800268a:	f7ff fd5f 	bl	800214c <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 800268e:	4603      	mov	r3, r0
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7a1b      	ldrb	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <_ZN8STM32DMA20externalJobCompletedEv+0x28>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00c      	beq.n	80026c6 <_ZN8STM32DMA20externalJobCompletedEv+0x46>
        {
            isRunning = false;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	721a      	strb	r2, [r3, #8]
            External_DMA2D_JobTypeDef& completed_job = external_queue.front();
 80026b2:	4807      	ldr	r0, [pc, #28]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 80026b4:	f000 fb4c 	bl	8002d50 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 80026b8:	60f8      	str	r0, [r7, #12]
            external_queue.pop();
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 80026bc:	f000 fb58 	bl	8002d70 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>
            DMA2D_ExternalJobCompleted(completed_job);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff fd0d 	bl	80020e0 <DMA2D_ExternalJobCompleted>
        }
    }
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	24005b90 	.word	0x24005b90

080026d4 <_ZN8STM32DMA18externalJobExecuteEv>:
     *
     * @brief Executes an external DMA2D job
     *
     * @param None
     */
    void externalJobExecute()
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    {
        isRunning = true;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	721a      	strb	r2, [r3, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <_ZN8STM32DMA18externalJobExecuteEv+0x24>)
 80026e4:	f000 fb34 	bl	8002d50 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 80026e8:	60f8      	str	r0, [r7, #12]
        DMA2D_CopyBuffer(job);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff fc88 	bl	8002000 <DMA2D_CopyBuffer>
    }
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	24005b90 	.word	0x24005b90

080026fc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3314      	adds	r3, #20
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4610      	mov	r0, r2
 8002714:	4798      	blx	r3
    }
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002726:	f7fe f981 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800272a:	4603      	mov	r3, r0
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ffe5 	bl	80026fc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	330c      	adds	r3, #12
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fe76 	bl	8002438 <_ZN8touchgfx9colortypeC1Ev>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	330c      	adds	r3, #12
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f7ff fecd 	bl	8002508 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800276e:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <_ZN8STM32DMAC1Ev+0x70>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 000c 	add.w	r0, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3320      	adds	r3, #32
 800277e:	2260      	movs	r2, #96	; 0x60
 8002780:	4619      	mov	r1, r3
 8002782:	f017 fe59 	bl	801a438 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3320      	adds	r3, #32
 800278a:	245f      	movs	r4, #95	; 0x5f
 800278c:	461d      	mov	r5, r3
 800278e:	2c00      	cmp	r4, #0
 8002790:	db05      	blt.n	800279e <_ZN8STM32DMAC1Ev+0x46>
 8002792:	4628      	mov	r0, r5
 8002794:	f7ff ffd1 	bl	800273a <_ZN8touchgfx6BlitOpC1Ev>
 8002798:	3524      	adds	r5, #36	; 0x24
 800279a:	3c01      	subs	r4, #1
 800279c:	e7f7      	b.n	800278e <_ZN8STM32DMAC1Ev+0x36>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
{
    mutexIsRunning = MUTEX_CREATE();
 80027ae:	2000      	movs	r0, #0
 80027b0:	f012 fa73 	bl	8014c9a <osMutexNew>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
}
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bdb0      	pop	{r4, r5, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	0802b038 	.word	0x0802b038

080027cc <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	4a09      	ldr	r2, [pc, #36]	; (80027fc <_ZN8STM32DMAD1Ev+0x30>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80027da:	205a      	movs	r0, #90	; 0x5a
 80027dc:	f7ff fe08 	bl	80023f0 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	330c      	adds	r3, #12
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fadf 	bl	8002da8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe6b 	bl	80024c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	0802b038 	.word	0x0802b038

08002800 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
}
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ffdf 	bl	80027cc <_ZN8STM32DMAD1Ev>
 800280e:	f640 51a8 	movw	r1, #3496	; 0xda8
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f025 f90b 	bl	8027a2e <_ZdlPvj>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800282e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800283e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002850:	f043 0310 	orr.w	r3, r3, #16
 8002854:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 8002858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <_ZN8STM32DMA10initializeEv+0x54>)
 800285c:	f023 0310 	bic.w	r3, r3, #16
 8002860:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <_ZN8STM32DMA10initializeEv+0x58>)
 8002864:	4a06      	ldr	r2, [pc, #24]	; (8002880 <_ZN8STM32DMA10initializeEv+0x5c>)
 8002866:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002868:	205a      	movs	r0, #90	; 0x5a
 800286a:	f7ff fda3 	bl	80023b4 <__NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	58024400 	.word	0x58024400
 800287c:	2400aecc 	.word	0x2400aecc
 8002880:	0800271f 	.word	0x0800271f

08002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	2b0b      	cmp	r3, #11
 8002898:	d826      	bhi.n	80028e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800289a:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	080028dd 	.word	0x080028dd
 80028a4:	080028d7 	.word	0x080028d7
 80028a8:	080028d1 	.word	0x080028d1
 80028ac:	080028e9 	.word	0x080028e9
 80028b0:	080028e9 	.word	0x080028e9
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	080028e9 	.word	0x080028e9
 80028bc:	080028e3 	.word	0x080028e3
 80028c0:	080028e3 	.word	0x080028e3
 80028c4:	080028e3 	.word	0x080028e3
 80028c8:	080028e3 	.word	0x080028e3
 80028cc:	080028e3 	.word	0x080028e3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
        break;
 80028d4:	e00e      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80028d6:	2301      	movs	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
        break;
 80028da:	e00b      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80028dc:	2302      	movs	r3, #2
 80028de:	60fb      	str	r3, [r7, #12]
        break;
 80028e0:	e008      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80028e2:	2305      	movs	r3, #5
 80028e4:	60fb      	str	r3, [r7, #12]
        break;
 80028e6:	e005      	b.n	80028f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80028ea:	4a06      	ldr	r2, [pc, #24]	; (8002904 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80028ec:	2167      	movs	r1, #103	; 0x67
 80028ee:	4806      	ldr	r0, [pc, #24]	; (8002908 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80028f0:	f025 f8cc 	bl	8027a8c <__assert_func>
        break;
    }

    return dma2dColorMode;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	080291f4 	.word	0x080291f4
 8002904:	08029210 	.word	0x08029210
 8002908:	0802925c 	.word	0x0802925c

0800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	2b0a      	cmp	r3, #10
 8002920:	d821      	bhi.n	8002966 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	08002961 	.word	0x08002961
 800292c:	0800295b 	.word	0x0800295b
 8002930:	08002955 	.word	0x08002955
 8002934:	08002967 	.word	0x08002967
 8002938:	08002967 	.word	0x08002967
 800293c:	08002967 	.word	0x08002967
 8002940:	08002967 	.word	0x08002967
 8002944:	0800295b 	.word	0x0800295b
 8002948:	0800295b 	.word	0x0800295b
 800294c:	0800295b 	.word	0x0800295b
 8002950:	0800295b 	.word	0x0800295b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
        break;
 8002958:	e00b      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800295a:	2301      	movs	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
        break;
 800295e:	e008      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002960:	2302      	movs	r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
        break;
 8002964:	e005      	b.n	8002972 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800296a:	2188      	movs	r1, #136	; 0x88
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800296e:	f025 f88d 	bl	8027a8c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	080291f4 	.word	0x080291f4
 8002980:	080292c4 	.word	0x080292c4
 8002984:	0802925c 	.word	0x0802925c

08002988 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002990:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	7f5b      	ldrb	r3, [r3, #29]
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff67 	bl	8002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029b6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	7f9b      	ldrb	r3, [r3, #30]
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ff60 	bl	8002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029c4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7f9b      	ldrb	r3, [r3, #30]
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff9d 	bl	800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80029d2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	8b5b      	ldrh	r3, [r3, #26]
 80029d8:	461a      	mov	r2, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	8a9b      	ldrh	r3, [r3, #20]
 80029de:	1ad2      	subs	r2, r2, r3
 80029e0:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	8b5b      	ldrh	r3, [r3, #26]
 80029e8:	461a      	mov	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	8a9b      	ldrh	r3, [r3, #20]
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	4b8e      	ldr	r3, [pc, #568]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80029f2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	8b1b      	ldrh	r3, [r3, #24]
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	8a9b      	ldrh	r3, [r3, #20]
 80029fe:	1ad2      	subs	r2, r2, r3
 8002a00:	4b8a      	ldr	r3, [pc, #552]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a02:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002a04:	4a89      	ldr	r2, [pc, #548]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	8adb      	ldrh	r3, [r3, #22]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	8a9b      	ldrh	r3, [r3, #20]
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	4b84      	ldr	r3, [pc, #528]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	4b82      	ldr	r3, [pc, #520]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4b80      	ldr	r3, [pc, #512]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a2a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a34:	d037      	beq.n	8002aa6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3a:	f200 80e3 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a42:	d015      	beq.n	8002a70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a48:	f200 80dc 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a4c:	2b80      	cmp	r3, #128	; 0x80
 8002a4e:	d045      	beq.n	8002adc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	f200 80d7 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	f000 80bf 	beq.w	8002bda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	f200 80d1 	bhi.w	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	f000 80a4 	beq.w	8002bb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f000 80b6 	beq.w	8002bda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002a6e:	e0c9      	b.n	8002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	7f1b      	ldrb	r3, [r3, #28]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	4619      	mov	r1, r3
 8002a78:	4a6c      	ldr	r2, [pc, #432]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a7a:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	4c69      	ldr	r4, [pc, #420]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fce4 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002a90:	4a66      	ldr	r2, [pc, #408]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002a9c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002a9e:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002aa0:	4a64      	ldr	r2, [pc, #400]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002aa2:	601a      	str	r2, [r3, #0]
        break;
 8002aa4:	e0d9      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	7f1b      	ldrb	r3, [r3, #28]
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	4619      	mov	r1, r3
 8002aae:	4a5f      	ldr	r2, [pc, #380]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ab0:	4b61      	ldr	r3, [pc, #388]	; (8002c38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	4c5c      	ldr	r4, [pc, #368]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fcc9 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ac6:	4a59      	ldr	r2, [pc, #356]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	4b56      	ldr	r3, [pc, #344]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ad2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002ad4:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ad6:	4a57      	ldr	r2, [pc, #348]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002ad8:	601a      	str	r2, [r3, #0]
        break;
 8002ada:	e0be      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	461a      	mov	r2, r3
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	4a4e      	ldr	r2, [pc, #312]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002afa:	4a4c      	ldr	r2, [pc, #304]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b06:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1d1a      	adds	r2, r3, #4
 8002b0c:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d00d      	beq.n	8002b3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8002b1e:	e020      	b.n	8002b62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002b20:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	4b45      	ldr	r3, [pc, #276]	; (8002c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	8852      	ldrh	r2, [r2, #2]
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	0212      	lsls	r2, r2, #8
 8002b30:	4611      	mov	r1, r2
 8002b32:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b34:	430b      	orrs	r3, r1
 8002b36:	61d3      	str	r3, [r2, #28]
                break;
 8002b38:	e01a      	b.n	8002b70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7f1b      	ldrb	r3, [r3, #28]
 8002b3e:	2bff      	cmp	r3, #255	; 0xff
 8002b40:	d101      	bne.n	8002b46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 8002b42:	2300      	movs	r3, #0
 8002b44:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002b46:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	8852      	ldrh	r2, [r2, #2]
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0212      	lsls	r2, r2, #8
 8002b56:	4313      	orrs	r3, r2
 8002b58:	4a34      	ldr	r2, [pc, #208]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	61d3      	str	r3, [r2, #28]
                break;
 8002b60:	e006      	b.n	8002b70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b64:	4a37      	ldr	r2, [pc, #220]	; (8002c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002b66:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002b6a:	4837      	ldr	r0, [pc, #220]	; (8002c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002b6c:	f024 ff8e 	bl	8027a8c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002b70:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d000      	beq.n	8002b94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 8002b92:	e7f3      	b.n	8002b7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002b96:	2210      	movs	r2, #16
 8002b98:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ba2:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002ba4:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8002ba6:	e058      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002ba8:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002baa:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002bac:	601a      	str	r2, [r3, #0]
        break;
 8002bae:	e054      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	7f1b      	ldrb	r3, [r3, #28]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bd0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002bd6:	601a      	str	r2, [r3, #0]
        break;
 8002bd8:	e03f      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	7f1b      	ldrb	r3, [r3, #28]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	461a      	mov	r2, r3
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bfa:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002c00:	601a      	str	r2, [r3, #0]
        break;
 8002c02:	e02a      	b.n	8002c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	7f1b      	ldrb	r3, [r3, #28]
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	4a06      	ldr	r2, [pc, #24]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c16:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	7f5a      	ldrb	r2, [r3, #29]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7f9b      	ldrb	r3, [r3, #30]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d015      	beq.n	8002c50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002c24:	4b01      	ldr	r3, [pc, #4]	; (8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002c28:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8002c2a:	e015      	b.n	8002c58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8002c2c:	52001000 	.word	0x52001000
 8002c30:	0002000a 	.word	0x0002000a
 8002c34:	00020201 	.word	0x00020201
 8002c38:	00020009 	.word	0x00020009
 8002c3c:	ffff00ef 	.word	0xffff00ef
 8002c40:	08029310 	.word	0x08029310
 8002c44:	0802932c 	.word	0x0802932c
 8002c48:	0802925c 	.word	0x0802925c
 8002c4c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8002c52:	f240 2201 	movw	r2, #513	; 0x201
 8002c56:	601a      	str	r2, [r3, #0]
        break;
 8002c58:	bf00      	nop
    }
}
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	52001000 	.word	0x52001000

08002c68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	7f9b      	ldrb	r3, [r3, #30]
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fe47 	bl	800290c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002c7e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c80:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	8adb      	ldrh	r3, [r3, #22]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	8a9b      	ldrh	r3, [r3, #20]
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002c9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	8b5b      	ldrh	r3, [r3, #26]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	8a9b      	ldrh	r3, [r3, #20]
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d12e      	bne.n	8002d16 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	8b5b      	ldrh	r3, [r3, #26]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	8a9b      	ldrh	r3, [r3, #20]
 8002cc2:	1ad2      	subs	r2, r2, r3
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cc6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	8b5b      	ldrh	r3, [r3, #26]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	8a9b      	ldrh	r3, [r3, #20]
 8002cd2:	1ad2      	subs	r2, r2, r3
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cd6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cd8:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	7f1b      	ldrb	r3, [r3, #28]
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8002cea:	430b      	orrs	r3, r1
 8002cec:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	4c13      	ldr	r4, [pc, #76]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fbad 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d04:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d0c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d10:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8002d12:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8002d14:	e010      	b.n	8002d38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	4c06      	ldr	r4, [pc, #24]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fb93 	bl	8002454 <_ZNK8touchgfx9colortypecvmEv>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002d32:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002d34:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8002d36:	601a      	str	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	52001000 	.word	0x52001000
 8002d44:	00010009 	.word	0x00010009
 8002d48:	00020201 	.word	0x00020201
 8002d4c:	00030201 	.word	0x00030201

08002d50 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>:
    External_DMA2D_JobTypeDef& front()
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
        return buffer_[head_];
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
    }
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>:
    void pop()
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
        head_ = (head_ + 1) % max_size_;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d86:	fb01 f202 	mul.w	r2, r1, r2
 8002d8a:	1a9a      	subs	r2, r3, r2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	605a      	str	r2, [r3, #4]
        count_--;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	1e5a      	subs	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60da      	str	r2, [r3, #12]
    }
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fb57 	bl	800246c <_ZN8touchgfx9DMA_QueueD1Ev>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	0802c2bc 	.word	0x0802c2bc

08002dcc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ffe7 	bl	8002da8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002dda:	2114      	movs	r1, #20
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f024 fe26 	bl	8027a2e <_ZdlPvj>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	801a      	strh	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	805a      	strh	r2, [r3, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	809a      	strh	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	80da      	strh	r2, [r3, #6]
    {
    }
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6013      	str	r3, [r2, #0]
    }
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	240262c0 	.word	0x240262c0

08002e3c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    {
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	601a      	str	r2, [r3, #0]
    }
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	0802b2bc 	.word	0x0802b2bc

08002e5c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    }
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ffe9 	bl	8002e3c <_ZN8touchgfx12FontProviderD1Ev>
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f024 fdde 	bl	8027a2e <_ZdlPvj>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	611a      	str	r2, [r3, #16]
    {
    }
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	0802b2ac 	.word	0x0802b2ac

08002ebc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
    {
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	601a      	str	r2, [r3, #0]
    }
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	0802b2ac 	.word	0x0802b2ac

08002edc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    }
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ffe9 	bl	8002ebc <_ZN8touchgfx7MVPHeapD1Ev>
 8002eea:	2114      	movs	r1, #20
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f024 fd9e 	bl	8027a2e <_ZdlPvj>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
    {
    }
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
    {
    }
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
    {
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	601a      	str	r2, [r3, #0]
    }
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	0802b284 	.word	0x0802b284

08002fa0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    }
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ffe9 	bl	8002f80 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002fae:	2104      	movs	r1, #4
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f024 fd3c 	bl	8027a2e <_ZdlPvj>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    {
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
    }
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	0802c610 	.word	0x0802c610

08002fe0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    }
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ffe9 	bl	8002fc0 <_ZN8touchgfx3LCDD1Ev>
 8002fee:	2108      	movs	r1, #8
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f024 fd1c 	bl	8027a2e <_ZdlPvj>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    {
    }
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800303e:	6810      	ldr	r0, [r2, #0]
 8003040:	6851      	ldr	r1, [r2, #4]
 8003042:	c303      	stmia	r3!, {r0, r1}
    }
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    {
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
    }
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	0802b26c 	.word	0x0802b26c

08003070 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
    }
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ffe9 	bl	8003050 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800307e:	2104      	movs	r1, #4
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f024 fcd4 	bl	8027a2e <_ZdlPvj>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
    MCUInstrumentation()
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
          cc_in(0)
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
    }
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	0802ae84 	.word	0x0802ae84

080030bc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	805a      	strh	r2, [r3, #2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	809a      	strh	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	80da      	strh	r2, [r3, #6]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	811a      	strh	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	815a      	strh	r2, [r3, #10]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	819a      	strh	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	739a      	strb	r2, [r3, #14]
        {
        }
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ffd5 	bl	80030bc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	829a      	strh	r2, [r3, #20]
    {
    }
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8003136:	4a55      	ldr	r2, [pc, #340]	; (800328c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	615a      	str	r2, [r3, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	331c      	adds	r3, #28
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ffcc 	bl	8003102 <_ZN8touchgfx8GesturesC1Ev>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3350      	adds	r3, #80	; 0x50
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fe19 	bl	8002dec <_ZN8touchgfx4RectC1Ev>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	659a      	str	r2, [r3, #88]	; 0x58
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	671a      	str	r2, [r3, #112]	; 0x70
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8003242:	4a13      	ldr	r2, [pc, #76]	; (8003290 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8003248:	4a12      	ldr	r2, [pc, #72]	; (8003294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800324a:	8b3b      	ldrh	r3, [r7, #24]
 800324c:	8013      	strh	r3, [r2, #0]
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003254:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8003256:	4a11      	ldr	r2, [pc, #68]	; (800329c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8003258:	8bbb      	ldrh	r3, [r7, #28]
 800325a:	8013      	strh	r3, [r2, #0]
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8003262:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800326a:	8b3a      	ldrh	r2, [r7, #24]
 800326c:	8bbb      	ldrh	r3, [r7, #28]
 800326e:	429a      	cmp	r2, r3
 8003270:	bf34      	ite	cc
 8003272:	2301      	movcc	r3, #1
 8003274:	2300      	movcs	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	0802c194 	.word	0x0802c194
 8003290:	24026264 	.word	0x24026264
 8003294:	24026258 	.word	0x24026258
 8003298:	2402625e 	.word	0x2402625e
 800329c:	2402625a 	.word	0x2402625a
 80032a0:	24026260 	.word	0x24026260
 80032a4:	2402625c 	.word	0x2402625c

080032a8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fe61 	bl	8002f80 <_ZN8touchgfx15UIEventListenerD1Ev>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	0802c668 	.word	0x0802c668

080032cc <_ZN8touchgfx11ApplicationD0Ev>:
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ffe7 	bl	80032a8 <_ZN8touchgfx11ApplicationD1Ev>
 80032da:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f024 fba5 	bl	8027a2e <_ZdlPvj>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f804 	bl	8003304 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00f      	beq.n	8003336 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	330c      	adds	r3, #12
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4610      	mov	r0, r2
 800332a:	4798      	blx	r3
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3308      	adds	r3, #8
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4610      	mov	r0, r2
 8003350:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	4a05      	ldr	r2, [pc, #20]	; (8003384 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff97 	bl	80032a8 <_ZN8touchgfx11ApplicationD1Ev>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	0802b220 	.word	0x0802b220

08003388 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ffe7 	bl	8003364 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003396:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f024 fb47 	bl	8027a2e <_ZdlPvj>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fb33 	bl	8003a2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ffcb 	bl	8003364 <_ZN8touchgfx14MVPApplicationD1Ev>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	0802b1bc 	.word	0x0802b1bc

080033dc <_ZN23FrontendApplicationBaseD0Ev>:
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ffe1 	bl	80033ac <_ZN23FrontendApplicationBaseD1Ev>
 80033ea:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f024 fb1d 	bl	8027a2e <_ZdlPvj>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
    {
        gotoAppScreenScreenNoTransition();
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f005 f916 	bl	8008638 <_ZN23FrontendApplicationBase31gotoAppScreenScreenNoTransitionEv>
    }
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4a05      	ldr	r2, [pc, #20]	; (8003434 <_ZN19FrontendApplicationD1Ev+0x20>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ffc1 	bl	80033ac <_ZN23FrontendApplicationBaseD1Ev>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	0802b170 	.word	0x0802b170

08003438 <_ZN19FrontendApplicationD0Ev>:
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ffe7 	bl	8003414 <_ZN19FrontendApplicationD1Ev>
 8003446:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f024 faef 	bl	8027a2e <_ZdlPvj>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003468:	4618      	mov	r0, r3
 800346a:	f006 f883 	bl	8009574 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	f019 fcdb 	bl	801ce2c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
    {
        app.gotoAppScreenScreenNoTransition();
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f005 f8d4 	bl	8008638 <_ZN23FrontendApplicationBase31gotoAppScreenScreenNoTransitionEv>
    }
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	f7ff fce3 	bl	8002e7c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]
    {

    }
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	0802b15c 	.word	0x0802b15c

080034cc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4801      	ldr	r0, [pc, #4]	; (80034d8 <__tcf_0+0xc>)
 80034d2:	f000 f97d 	bl	80037d0 <_ZN12FrontendHeapD1Ev>
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	24005bcc 	.word	0x24005bcc

080034dc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	f3bf 8f5b 	dmb	ish
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80034fc:	480b      	ldr	r0, [pc, #44]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80034fe:	f024 fa98 	bl	8027a32 <__cxa_guard_acquire>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003512:	4807      	ldr	r0, [pc, #28]	; (8003530 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003514:	f000 f868 	bl	80035e8 <_ZN12FrontendHeapC1Ev>
 8003518:	4806      	ldr	r0, [pc, #24]	; (8003534 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800351a:	f024 fad5 	bl	8027ac8 <atexit>
 800351e:	4803      	ldr	r0, [pc, #12]	; (800352c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003520:	f024 fa93 	bl	8027a4a <__cxa_guard_release>
        return instance;
 8003524:	4b02      	ldr	r3, [pc, #8]	; (8003530 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8003526:	4618      	mov	r0, r3
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	24005f3c 	.word	0x24005f3c
 8003530:	24005bcc 	.word	0x24005bcc
 8003534:	080034cd 	.word	0x080034cd

08003538 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	4a05      	ldr	r2, [pc, #20]	; (8003558 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fcb7 	bl	8002ebc <_ZN8touchgfx7MVPHeapD1Ev>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	0802b15c 	.word	0x0802b15c

0800355c <_ZN16FrontendHeapBaseD0Ev>:
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffe7 	bl	8003538 <_ZN16FrontendHeapBaseD1Ev>
 800356a:	2114      	movs	r1, #20
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f024 fa5e 	bl	8027a2e <_ZdlPvj>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	f015 fdc6 	bl	8019118 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800358c:	4a03      	ldr	r2, [pc, #12]	; (800359c <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	0802b128 	.word	0x0802b128

080035a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f015 fdb4 	bl	8019118 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80035b0:	4a03      	ldr	r2, [pc, #12]	; (80035c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	0802b0f4 	.word	0x0802b0f4

080035c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f015 fda2 	bl	8019118 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80035d4:	4a03      	ldr	r2, [pc, #12]	; (80035e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	0802b0c0 	.word	0x0802b0c0

080035e8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f103 0114 	add.w	r1, r3, #20
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 74fe 	add.w	r4, r3, #508	; 0x1fc
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 7305 	add.w	r3, r3, #532	; 0x214
                     app(model, *this)
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4623      	mov	r3, r4
 800360e:	f7ff ff43 	bl	8003498 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003612:	4a18      	ldr	r2, [pc, #96]	; (8003674 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3314      	adds	r3, #20
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ffad 	bl	800357c <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	332c      	adds	r3, #44	; 0x2c
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ffba 	bl	80035a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ffc6 	bl	80035c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800363e:	4618      	mov	r0, r3
 8003640:	f005 ff8a 	bl	8009558 <_ZN5ModelC1Ev>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 7005 	add.w	r0, r3, #532	; 0x214
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4619      	mov	r1, r3
 8003654:	f005 ff6a 	bl	800952c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f7ff ff0b 	bl	800347e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	0802b0ac 	.word	0x0802b0ac

08003678 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	8bbb      	ldrh	r3, [r7, #28]
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	8b3b      	ldrh	r3, [r7, #24]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	f7ff fd47 	bl	8003128 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800369a:	4a04      	ldr	r2, [pc, #16]	; (80036ac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]
    }
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	0802b3b4 	.word	0x0802b3b4

080036b0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>:
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fce8 	bl	8003090 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 80036c0:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev+0x20>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	0802ae5c 	.word	0x0802ae5c

080036d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	8bbb      	ldrh	r3, [r7, #28]
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	8b3b      	ldrh	r3, [r7, #24]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	f7ff ffc1 	bl	8003678 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80036f6:	4a06      	ldr	r2, [pc, #24]	; (8003710 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x3c>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	337c      	adds	r3, #124	; 0x7c
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ffd5 	bl	80036b0 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>
    }
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	0802aedc 	.word	0x0802aedc

08003714 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	0802aec4 	.word	0x0802aec4

08003734 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ffe8 	bl	8003714 <_ZN8touchgfx15TouchControllerC1Ev>
 8003744:	4a03      	ldr	r2, [pc, #12]	; (8003754 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	0802aeac 	.word	0x0802aeac

08003758 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b085      	sub	sp, #20
 800375c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800375e:	f004 fd57 	bl	8008210 <_ZN14BitmapDatabase11getInstanceEv>
 8003762:	4604      	mov	r4, r0
 8003764:	f004 fd5e 	bl	8008224 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003768:	4603      	mov	r3, r0
 800376a:	4619      	mov	r1, r3
 800376c:	2300      	movs	r3, #0
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2300      	movs	r3, #0
 8003772:	2200      	movs	r2, #0
 8003774:	4620      	mov	r0, r4
 8003776:	f01c f83d 	bl	801f7f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800377a:	4809      	ldr	r0, [pc, #36]	; (80037a0 <touchgfx_init+0x48>)
 800377c:	f7ff fb4e 	bl	8002e1c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003780:	2000      	movs	r0, #0
 8003782:	f005 fc85 	bl	8009090 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003786:	4807      	ldr	r0, [pc, #28]	; (80037a4 <touchgfx_init+0x4c>)
 8003788:	f01b feec 	bl	801f564 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800378c:	f7ff fea6 	bl	80034dc <_ZN12FrontendHeap11getInstanceEv>
 8003790:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003792:	4805      	ldr	r0, [pc, #20]	; (80037a8 <touchgfx_init+0x50>)
 8003794:	f7fd faea 	bl	8000d6c <_ZN11TouchGFXHAL10initializeEv>
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}
 80037a0:	24006d44 	.word	0x24006d44
 80037a4:	24000020 	.word	0x24000020
 80037a8:	24006d48 	.word	0x24006d48

080037ac <touchgfx_components_init>:

void touchgfx_components_init()
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <touchgfx_taskEntry+0x10>)
 80037c2:	f7fd faf1 	bl	8000da8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	24006d48 	.word	0x24006d48

080037d0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	4a10      	ldr	r2, [pc, #64]	; (800381c <_ZN12FrontendHeapD1Ev+0x4c>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fe15 	bl	8003414 <_ZN19FrontendApplicationD1Ev>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 f827 	bl	8003844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	332c      	adds	r3, #44	; 0x2c
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f844 	bl	8003888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3314      	adds	r3, #20
 8003804:	4618      	mov	r0, r3
 8003806:	f000 f863 	bl	80038d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe93 	bl	8003538 <_ZN16FrontendHeapBaseD1Ev>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	0802b0ac 	.word	0x0802b0ac

08003820 <_ZN12FrontendHeapD0Ev>:
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ffd1 	bl	80037d0 <_ZN12FrontendHeapD1Ev>
 800382e:	f44f 715c 	mov.w	r1, #880	; 0x370
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f024 f8fb 	bl	8027a2e <_ZdlPvj>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	4a05      	ldr	r2, [pc, #20]	; (8003864 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	f015 fc5e 	bl	8019116 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	0802b0c0 	.word	0x0802b0c0

08003868 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ffe7 	bl	8003844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003876:	2114      	movs	r1, #20
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f024 f8d8 	bl	8027a2e <_ZdlPvj>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	f015 fc3c 	bl	8019116 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	0802b0f4 	.word	0x0802b0f4

080038ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ffe7 	bl	8003888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80038ba:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f024 f8b5 	bl	8027a2e <_ZdlPvj>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f015 fc18 	bl	8019116 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	0802b128 	.word	0x0802b128

080038f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ffe7 	bl	80038d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003902:	2118      	movs	r1, #24
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f024 f892 	bl	8027a2e <_ZdlPvj>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	4a05      	ldr	r2, [pc, #20]	; (8003934 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fa89 	bl	8002e3c <_ZN8touchgfx12FontProviderD1Ev>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	0802b8a4 	.word	0x0802b8a4

08003938 <_ZN23ApplicationFontProviderD0Ev>:
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ffe7 	bl	8003914 <_ZN23ApplicationFontProviderD1Ev>
 8003946:	2104      	movs	r1, #4
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f024 f870 	bl	8027a2e <_ZdlPvj>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	4a05      	ldr	r2, [pc, #20]	; (8003978 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fb29 	bl	8002fc0 <_ZN8touchgfx3LCDD1Ev>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	0802c97c 	.word	0x0802c97c

0800397c <_ZN8touchgfx8LCD24bppD0Ev>:
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ffe7 	bl	8003958 <_ZN8touchgfx8LCD24bppD1Ev>
 800398a:	2158      	movs	r1, #88	; 0x58
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f024 f84e 	bl	8027a2e <_ZdlPvj>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <_Z41__static_initialization_and_destruction_0ii>:
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d119      	bne.n	80039e0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d114      	bne.n	80039e0 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80039b6:	4818      	ldr	r0, [pc, #96]	; (8003a18 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80039b8:	f7ff febc 	bl	8003734 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80039bc:	4817      	ldr	r0, [pc, #92]	; (8003a1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80039be:	f7fe fecb 	bl	8002758 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80039c2:	4817      	ldr	r0, [pc, #92]	; (8003a20 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80039c4:	f01e f95e 	bl	8021c84 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80039c8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80039d8:	4910      	ldr	r1, [pc, #64]	; (8003a1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80039da:	4812      	ldr	r0, [pc, #72]	; (8003a24 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80039dc:	f7ff fe7a 	bl	80036d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d113      	bne.n	8003a0e <_Z41__static_initialization_and_destruction_0ii+0x72>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d10e      	bne.n	8003a0e <_Z41__static_initialization_and_destruction_0ii+0x72>
 80039f0:	480c      	ldr	r0, [pc, #48]	; (8003a24 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80039f2:	f7fd fac5 	bl	8000f80 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80039f6:	480c      	ldr	r0, [pc, #48]	; (8003a28 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80039f8:	f7ff ff8c 	bl	8003914 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80039fc:	4808      	ldr	r0, [pc, #32]	; (8003a20 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80039fe:	f7ff ffab 	bl	8003958 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 8003a02:	4806      	ldr	r0, [pc, #24]	; (8003a1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003a04:	f7fe fee2 	bl	80027cc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003a08:	4803      	ldr	r0, [pc, #12]	; (8003a18 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003a0a:	f7fc fe73 	bl	80006f4 <_ZN20STM32TouchControllerD1Ev>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	24005f40 	.word	0x24005f40
 8003a1c:	24005f44 	.word	0x24005f44
 8003a20:	24006cec 	.word	0x24006cec
 8003a24:	24006d48 	.word	0x24006d48
 8003a28:	24000020 	.word	0x24000020

08003a2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fb07 	bl	8003050 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	0802b208 	.word	0x0802b208

08003a50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ffe7 	bl	8003a2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003a5e:	2110      	movs	r1, #16
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f023 ffe4 	bl	8027a2e <_ZdlPvj>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003a78:	2301      	movs	r3, #1
    }
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003a8e:	230c      	movs	r3, #12
    }
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003aa8:	887a      	ldrh	r2, [r7, #2]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4413      	add	r3, r2
    }
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	3308      	adds	r3, #8
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
    }
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003af4:	2301      	movs	r3, #1
    }
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003b0a:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    }
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	3308      	adds	r3, #8
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4413      	add	r3, r2
    }
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003b4e:	887b      	ldrh	r3, [r7, #2]
 8003b50:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	3308      	adds	r3, #8
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4413      	add	r3, r2
    }
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003b72:	2301      	movs	r3, #1
    }
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003b88:	2310      	movs	r3, #16
    }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	4413      	add	r3, r2
    }
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	3308      	adds	r3, #8
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
    }
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68d2      	ldr	r2, [r2, #12]
 8003bea:	1052      	asrs	r2, r2, #1
 8003bec:	1899      	adds	r1, r3, r2
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d102      	bne.n	8003c00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	e00a      	b.n	8003c16 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68d2      	ldr	r2, [r2, #12]
 8003c08:	1052      	asrs	r2, r2, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6892      	ldr	r2, [r2, #8]
 8003c12:	4413      	add	r3, r2
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4608      	mov	r0, r1
 8003c18:	4798      	blx	r3
    }
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d001      	beq.n	8003c54 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003c54:	2300      	movs	r3, #0
    }
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_GLOBAL__sub_I_touchgfx_init>:
 8003c62:	b580      	push	{r7, lr}
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f7ff fe96 	bl	800399c <_Z41__static_initialization_and_destruction_0ii>
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_GLOBAL__sub_D_touchgfx_init>:
 8003c72:	b580      	push	{r7, lr}
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7ff fe8e 	bl	800399c <_Z41__static_initialization_and_destruction_0ii>
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
        : color(col)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	601a      	str	r2, [r3, #0]
    }
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	4608      	mov	r0, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	461a      	mov	r2, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	817b      	strh	r3, [r7, #10]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	813b      	strh	r3, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	897a      	ldrh	r2, [r7, #10]
 8003cbe:	801a      	strh	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	893a      	ldrh	r2, [r7, #8]
 8003cc4:	805a      	strh	r2, [r3, #2]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	809a      	strh	r2, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8b3a      	ldrh	r2, [r7, #24]
 8003cd0:	80da      	strh	r2, [r3, #6]
    {
    }
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
    {
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
    }
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	0802c6b4 	.word	0x0802c6b4

08003d00 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
    }
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ffe9 	bl	8003ce0 <_ZN8touchgfx8DrawableD1Ev>
 8003d0e:	2128      	movs	r1, #40	; 0x28
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f023 fe8c 	bl	8027a2e <_ZdlPvj>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3314      	adds	r3, #20
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
        }
    }
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003d4e:	2300      	movs	r3, #0
    }
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	809a      	strh	r2, [r3, #4]
    }
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	460b      	mov	r3, r1
 8003d84:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	887a      	ldrh	r2, [r7, #2]
 8003d8a:	80da      	strh	r2, [r3, #6]
    }
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	811a      	strh	r2, [r3, #8]
    }
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	887a      	ldrh	r2, [r7, #2]
 8003dc6:	815a      	strh	r2, [r3, #10]
    }
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    {
    }
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
    {
    }
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	807b      	strh	r3, [r7, #2]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3354      	adds	r3, #84	; 0x54
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	8879      	ldrh	r1, [r7, #2]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003e92:	b292      	uxth	r2, r2
 8003e94:	1a8a      	subs	r2, r1, r2
 8003e96:	b292      	uxth	r2, r2
 8003e98:	b210      	sxth	r0, r2
 8003e9a:	8839      	ldrh	r1, [r7, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003ea2:	b292      	uxth	r2, r2
 8003ea4:	1a8a      	subs	r2, r1, r2
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	b212      	sxth	r2, r2
 8003eaa:	4601      	mov	r1, r0
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
    }
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ec6:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ece:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ed6:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7ff ffe1 	bl	8003eb8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]
    }
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3320      	adds	r3, #32
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
    }
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f48:	e002      	b.n	8003f50 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
    }
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	24026264 	.word	0x24026264

08003f60 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003f88:	3301      	adds	r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	607b      	str	r3, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	817b      	strh	r3, [r7, #10]
 8003fac:	4613      	mov	r3, r2
 8003fae:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff43 	bl	8003e3e <_ZNK8touchgfx8Drawable9isVisibleEv>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ff49 	bl	8003e58 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	601a      	str	r2, [r3, #0]
        }
    }
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	4a05      	ldr	r2, [pc, #20]	; (8004004 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fe73 	bl	8003ce0 <_ZN8touchgfx8DrawableD1Ev>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	0802b34c 	.word	0x0802b34c

08004008 <_ZN8touchgfx6WidgetD0Ev>:
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ffe7 	bl	8003fe4 <_ZN8touchgfx6WidgetD1Ev>
 8004016:	2128      	movs	r1, #40	; 0x28
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f023 fd08 	bl	8027a2e <_ZdlPvj>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
    {
 8004030:	4a04      	ldr	r2, [pc, #16]	; (8004044 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
    }
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	0802b310 	.word	0x0802b310

08004048 <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
    }
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ffe9 	bl	8004028 <_ZN8touchgfx15VideoControllerD1Ev>
 8004056:	2104      	movs	r1, #4
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f023 fce8 	bl	8027a2e <_ZdlPvj>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>:
    void addDMA(touchgfx::DMA_Interface& dma)
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
    {
        pDma = &dma;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	72fb      	strb	r3, [r7, #11]
 80040b2:	460b      	mov	r3, r1
 80040b4:	813b      	strh	r3, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	7afa      	ldrb	r2, [r7, #11]
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	893a      	ldrh	r2, [r7, #8]
 80040c6:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <__NVIC_EnableIRQ>:
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	db0b      	blt.n	8004106 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4907      	ldr	r1, [pc, #28]	; (8004114 <__NVIC_EnableIRQ+0x38>)
 80040f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2001      	movs	r0, #1
 80040fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000e100 	.word	0xe000e100

08004118 <__NVIC_DisableIRQ>:
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004126:	2b00      	cmp	r3, #0
 8004128:	db12      	blt.n	8004150 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	490a      	ldr	r1, [pc, #40]	; (800415c <__NVIC_DisableIRQ+0x44>)
 8004132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2001      	movs	r0, #1
 800413a:	fa00 f202 	lsl.w	r2, r0, r2
 800413e:	3320      	adds	r3, #32
 8004140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004144:	f3bf 8f4f 	dsb	sy
}
 8004148:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800414a:	f3bf 8f6f 	isb	sy
}
 800414e:	bf00      	nop
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	e000e100 	.word	0xe000e100

08004160 <__NVIC_SetPriority>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	6039      	str	r1, [r7, #0]
 800416a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800416c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004170:	2b00      	cmp	r3, #0
 8004172:	db0a      	blt.n	800418a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	490c      	ldr	r1, [pc, #48]	; (80041ac <__NVIC_SetPriority+0x4c>)
 800417a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800417e:	0112      	lsls	r2, r2, #4
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	440b      	add	r3, r1
 8004184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004188:	e00a      	b.n	80041a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	4908      	ldr	r1, [pc, #32]	; (80041b0 <__NVIC_SetPriority+0x50>)
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	3b04      	subs	r3, #4
 8004198:	0112      	lsls	r2, r2, #4
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	440b      	add	r3, r1
 800419e:	761a      	strb	r2, [r3, #24]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000e100 	.word	0xe000e100
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80041b4:	b5b0      	push	{r4, r5, r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4618      	mov	r0, r3
 80041c0:	f015 faa1 	bl	8019706 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80041c4:	687d      	ldr	r5, [r7, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3364      	adds	r3, #100	; 0x64
 80041cc:	681c      	ldr	r4, [r3, #0]
 80041ce:	f018 fdab 	bl	801cd28 <_ZN8touchgfx11Application11getInstanceEv>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4619      	mov	r1, r3
 80041d6:	4628      	mov	r0, r5
 80041d8:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3388      	adds	r3, #136	; 0x88
 80041e2:	681c      	ldr	r4, [r3, #0]
 80041e4:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80041e6:	2300      	movs	r3, #0
 80041e8:	490b      	ldr	r1, [pc, #44]	; (8004218 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 80041ea:	47a0      	blx	r4

    /*
     * Add DMA2D to hardware decoder
     */
    mjpegdecoder1.addDMA(dma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4619      	mov	r1, r3
 80041f2:	480a      	ldr	r0, [pc, #40]	; (800421c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80041f4:	f7ff ff38 	bl	8004068 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>

    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 80041f8:	2200      	movs	r2, #0
 80041fa:	4908      	ldr	r1, [pc, #32]	; (800421c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80041fc:	4808      	ldr	r0, [pc, #32]	; (8004220 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 80041fe:	f000 fa45 	bl	800468c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 8004202:	4a08      	ldr	r2, [pc, #32]	; (8004224 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 8004204:	4908      	ldr	r1, [pc, #32]	; (8004228 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 8004206:	4806      	ldr	r0, [pc, #24]	; (8004220 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 8004208:	f000 fa60 	bl	80046cc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bdb0      	pop	{r4, r5, r7, pc}
 8004214:	2409fa00 	.word	0x2409fa00
 8004218:	24040000 	.word	0x24040000
 800421c:	24006dd0 	.word	0x24006dd0
 8004220:	24006e18 	.word	0x24006e18
 8004224:	0005fa00 	.word	0x0005fa00
 8004228:	d0000000 	.word	0xd0000000

0800422c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8004234:	2109      	movs	r1, #9
 8004236:	205a      	movs	r0, #90	; 0x5a
 8004238:	f7ff ff92 	bl	8004160 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800423c:	2109      	movs	r1, #9
 800423e:	2058      	movs	r0, #88	; 0x58
 8004240:	f7ff ff8e 	bl	8004160 <__NVIC_SetPriority>
}
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8004254:	205a      	movs	r0, #90	; 0x5a
 8004256:	f7ff ff41 	bl	80040dc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800425a:	2058      	movs	r0, #88	; 0x58
 800425c:	f7ff ff3e 	bl	80040dc <__NVIC_EnableIRQ>
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8004270:	205a      	movs	r0, #90	; 0x5a
 8004272:	f7ff ff51 	bl	8004118 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8004276:	2058      	movs	r0, #88	; 0x58
 8004278:	f7ff ff4e 	bl	8004118 <__NVIC_DisableIRQ>
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800429e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80042b2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80042b4:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80042b6:	881a      	ldrh	r2, [r3, #0]
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6353      	str	r3, [r2, #52]	; 0x34
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	50001000 	.word	0x50001000
 80042d8:	24006e62 	.word	0x24006e62
 80042dc:	24006e64 	.word	0x24006e64

080042e0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f015 f9f2 	bl	80196d4 <_ZN8touchgfx3HAL10beginFrameEv>
 80042f0:	4603      	mov	r3, r0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4618      	mov	r0, r3
 8004318:	f015 f9e8 	bl	80196ec <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 800431c:	4804      	ldr	r0, [pc, #16]	; (8004330 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 800431e:	f000 f9eb 	bl	80046f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	24006e60 	.word	0x24006e60
 8004330:	24006e18 	.word	0x24006e18

08004334 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	50001084 	.word	0x50001084

08004350 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800435a:	4a06      	ldr	r2, [pc, #24]	; (8004374 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8004362:	2201      	movs	r2, #1
 8004364:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	50001084 	.word	0x50001084
 8004378:	50001000 	.word	0x50001000

0800437c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f015 f96c 	bl	8019668 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	f015 fac6 	bl	801993e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80043b2:	4603      	mov	r3, r0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80043c4:	4b26      	ldr	r3, [pc, #152]	; (8004460 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d03c      	beq.n	8004454 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80043da:	4b21      	ldr	r3, [pc, #132]	; (8004460 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80043e2:	f3bf 8f4f 	dsb	sy
}
 80043e6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80043ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ee:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	0b5b      	lsrs	r3, r3, #13
 80043f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80043f8:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	08db      	lsrs	r3, r3, #3
 80043fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004402:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800440c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004412:	4913      	ldr	r1, [pc, #76]	; (8004460 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	60fa      	str	r2, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d000      	beq.n	8004430 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 800442e:	e7e9      	b.n	8004404 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1e5a      	subs	r2, r3, #1
 8004434:	613a      	str	r2, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	bf14      	ite	ne
 800443a:	2301      	movne	r3, #1
 800443c:	2300      	moveq	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d000      	beq.n	8004446 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8004444:	e7d9      	b.n	80043fa <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004446:	f3bf 8f4f 	dsb	sy
}
 800444a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800444c:	f3bf 8f6f 	isb	sy
}
 8004450:	bf00      	nop
}
 8004452:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800446c:	4b26      	ldr	r3, [pc, #152]	; (8004508 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d03c      	beq.n	80044fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004482:	4b21      	ldr	r3, [pc, #132]	; (8004508 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004484:	2200      	movs	r2, #0
 8004486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800448a:	f3bf 8f4f 	dsb	sy
}
 800448e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004490:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004496:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	0b5b      	lsrs	r3, r3, #13
 800449c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80044a0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	08db      	lsrs	r3, r3, #3
 80044a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044aa:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80044b4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80044ba:	4913      	ldr	r1, [pc, #76]	; (8004508 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1e5a      	subs	r2, r3, #1
 80044c6:	60fa      	str	r2, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bf14      	ite	ne
 80044cc:	2301      	movne	r3, #1
 80044ce:	2300      	moveq	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d000      	beq.n	80044d8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 80044d6:	e7e9      	b.n	80044ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1e5a      	subs	r2, r3, #1
 80044dc:	613a      	str	r2, [r7, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bf14      	ite	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	2300      	moveq	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d000      	beq.n	80044ee <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 80044ec:	e7d9      	b.n	80044a2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80044ee:	f3bf 8f4f 	dsb	sy
}
 80044f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044f4:	f3bf 8f6f 	isb	sy
}
 80044f8:	bf00      	nop
}
 80044fa:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80044fc:	bf00      	nop
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <videoTaskFunc>:

extern "C" void videoTaskFunc(void* argument)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
    videoController.decoderTaskEntry();
 8004514:	4803      	ldr	r0, [pc, #12]	; (8004524 <videoTaskFunc+0x18>)
 8004516:	f000 f934 	bl	8004782 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	24006e18 	.word	0x24006e18

08004528 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8004530:	f7fc fa7c 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf0c      	ite	eq
 800453a:	2301      	moveq	r3, #1
 800453c:	2300      	movne	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d132      	bne.n	80045aa <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <HAL_LTDC_LineEventCallback+0x8c>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_LTDC_LineEventCallback+0x90>)
 800454a:	8812      	ldrh	r2, [r2, #0]
 800454c:	4293      	cmp	r3, r2
 800454e:	bf0c      	ite	eq
 8004550:	2301      	moveq	r3, #1
 8004552:	2300      	movne	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d017      	beq.n	800458a <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <HAL_LTDC_LineEventCallback+0x94>)
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f00b fd3f 	bl	800ffe4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8004566:	f7fc fa61 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800456a:	4603      	mov	r3, r0
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fd04 	bl	8003f7a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8004572:	f7fd fef7 	bl	8002364 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8004576:	f7fc fa59 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800457a:	4603      	mov	r3, r0
 800457c:	4618      	mov	r0, r3
 800457e:	f015 fe09 	bl	801a194 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8004582:	2000      	movs	r0, #0
 8004584:	f7fc f8fe 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8004588:	e010      	b.n	80045ac <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_LTDC_LineEventCallback+0x90>)
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f00b fd27 	bl	800ffe4 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8004596:	f7fc fa49 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 800459a:	4603      	mov	r3, r0
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fcb5 	bl	8003f0c <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80045a2:	2000      	movs	r0, #0
 80045a4:	f7fc f94c 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80045a8:	e000      	b.n	80045ac <HAL_LTDC_LineEventCallback+0x84>
            return;
 80045aa:	bf00      	nop
        }
    }
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	50001000 	.word	0x50001000
 80045b8:	24006e62 	.word	0x24006e62
 80045bc:	24006e64 	.word	0x24006e64

080045c0 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	4a04      	ldr	r2, [pc, #16]	; (80045dc <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	0802b310 	.word	0x0802b310

080045e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 80045e0:	b5b0      	push	{r4, r5, r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ffe8 	bl	80045c0 <_ZN8touchgfx15VideoControllerC1Ev>
 80045f0:	4a25      	ldr	r2, [pc, #148]	; (8004688 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0xa8>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	330c      	adds	r3, #12
 80045fa:	2400      	movs	r4, #0
 80045fc:	461d      	mov	r5, r3
 80045fe:	2c00      	cmp	r4, #0
 8004600:	db05      	blt.n	800460e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x2e>
 8004602:	4628      	mov	r0, r5
 8004604:	f000 f971 	bl	80048ea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 8004608:	3524      	adds	r5, #36	; 0x24
 800460a:	3c01      	subs	r4, #1
 800460c:	e7f7      	b.n	80045fe <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x1e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	635a      	str	r2, [r3, #52]	; 0x34
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	639a      	str	r2, [r3, #56]	; 0x38
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3308      	adds	r3, #8
 8004648:	2204      	movs	r2, #4
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f023 faad 	bl	8027bac <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3304      	adds	r3, #4
 8004656:	2204      	movs	r2, #4
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f023 faa6 	bl	8027bac <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8004660:	2200      	movs	r2, #0
 8004662:	2100      	movs	r1, #0
 8004664:	2001      	movs	r0, #1
 8004666:	f010 fc26 	bl	8014eb6 <osSemaphoreNew>
 800466a:	4602      	mov	r2, r0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8004670:	2000      	movs	r0, #0
 8004672:	f010 fb12 	bl	8014c9a <osMutexNew>
 8004676:	4602      	mov	r2, r0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bdb0      	pop	{r4, r5, r7, pc}
 8004686:	bf00      	nop
 8004688:	0802b2d0 	.word	0x0802b2d0

0800468c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d006      	beq.n	80046ac <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x20>
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x34>)
 80046a0:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x38>)
 80046a2:	f240 1103 	movw	r1, #259	; 0x103
 80046a6:	4808      	ldr	r0, [pc, #32]	; (80046c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x3c>)
 80046a8:	f023 f9f0 	bl	8027a8c <__assert_func>
        mjpegDecoders[index] = &decoder;
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	605a      	str	r2, [r3, #4]
    }
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	080295e4 	.word	0x080295e4
 80046c4:	080295f8 	.word	0x080295f8
 80046c8:	08029760 	.word	0x08029760

080046cc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>:

    void endFrame()
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d120      	bne.n	800474c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	3308      	adds	r3, #8
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4413      	add	r3, r2
 800471a:	3304      	adds	r3, #4
 800471c:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	7f5b      	ldrb	r3, [r3, #29]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x36>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	7f9b      	ldrb	r3, [r3, #30]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f912 	bl	800495a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	e7db      	b.n	8004704 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	4618      	mov	r0, r3
 800475a:	f010 fc87 	bl	801506c <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476c:	4618      	mov	r0, r3
 800476e:	f010 fb65 	bl	8014e3c <osMutexRelease>
            uiHasMutex = false;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:

    void decoderTaskEntry()
 8004782:	b590      	push	{r4, r7, lr}
 8004784:	b08b      	sub	sp, #44	; 0x2c
 8004786:	af02      	add	r7, sp, #8
 8004788:	6078      	str	r0, [r7, #4]
        // Running in Decoder thread!!

        while (1)
        {
            // Wait for synchronisation signal from UI thread
            SEM_WAIT(semDecode);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f04f 31ff 	mov.w	r1, #4294967295
 8004792:	4618      	mov	r0, r3
 8004794:	f010 fc18 	bl	8014fc8 <osSemaphoreAcquire>

            // Lock out the UI by taking the mutex
            MUTEX_LOCK(mutexBuffers);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479c:	f04f 31ff 	mov.w	r1, #4294967295
 80047a0:	4618      	mov	r0, r3
 80047a2:	f010 fb00 	bl	8014da6 <osMutexAcquire>

            // Update stream flags
            for (uint32_t i = 0; i < no_streams; i++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d115      	bne.n	80047dc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5a>
            {
                Stream& stream = streams[i];
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	4613      	mov	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	3308      	adds	r3, #8
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	3304      	adds	r3, #4
 80047c2:	617b      	str	r3, [r7, #20]
                if (stream.doDecode)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x52>
                {
                    stream.doInvalidateOnNextTick = true;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2201      	movs	r2, #1
 80047d2:	77da      	strb	r2, [r3, #31]
            for (uint32_t i = 0; i < no_streams; i++)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	3301      	adds	r3, #1
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e7e6      	b.n	80047aa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x28>
                }
            }

            // Now decode all streams marked for invalidation in next tick
            for (uint32_t i = 0; i < no_streams; i++)
 80047dc:	2300      	movs	r3, #0
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d17b      	bne.n	80048de <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x15c>
            {
                Stream& stream = streams[i];
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	3308      	adds	r3, #8
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	3304      	adds	r3, #4
 80047f8:	613b      	str	r3, [r7, #16]
                if (stream.doDecode)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004800:	2b00      	cmp	r3, #0
 8004802:	d068      	beq.n	80048d6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x154>
                {
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	60fb      	str	r3, [r7, #12]
                    // Seek or increment video frame
                    if (stream.seek_to_frame > 0)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00c      	beq.n	8004832 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xb0>
                    {
                        decoder->gotoFrame(stream.seek_to_frame);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3324      	adds	r3, #36	; 0x24
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	6952      	ldr	r2, [r2, #20]
 8004824:	4611      	mov	r1, r2
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
 8004830:	e01e      	b.n	8004870 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                    }
                    else
                    {
                        if (stream.skip_frames > 0)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01a      	beq.n	8004870 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                        {
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3324      	adds	r3, #36	; 0x24
 8004840:	681c      	ldr	r4, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3328      	adds	r3, #40	; 0x28
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	4798      	blx	r3
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	4413      	add	r3, r2
 8004856:	4619      	mov	r1, r3
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	47a0      	blx	r4
                            stream.frameCount += stream.skip_frames;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	441a      	add	r2, r3
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	605a      	str	r2, [r3, #4]
                            stream.skip_frames = 0;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2200      	movs	r2, #0
 800486e:	619a      	str	r2, [r3, #24]
                        }
                    }

                    // Decode frame
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3314      	adds	r3, #20
 8004876:	681c      	ldr	r4, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	3202      	adds	r2, #2
 800487e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004882:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	f44f 7388 	mov.w	r3, #272	; 0x110
 800488c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	47a0      	blx	r4
 8004894:	4603      	mov	r3, r0
 8004896:	461a      	mov	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f883 2020 	strb.w	r2, [r3, #32]
                    stream.frameCount++;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]

                    // Update frame number
                    if (stream.hasMoreFrames)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x146>
                    {
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3328      	adds	r3, #40	; 0x28
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	4798      	blx	r3
 80048be:	4603      	mov	r3, r0
 80048c0:	1e5a      	subs	r2, r3, #1
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e002      	b.n	80048ce <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x14c>
                    }
                    else
                    {
                        stream.frameNumber = 1;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
                    }
                    stream.doDecode = false;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            for (uint32_t i = 0; i < no_streams; i++)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	3301      	adds	r3, #1
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	e780      	b.n	80047e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5e>
                }
            }

            // Release the stream and decode buffer and let UI continue
            MUTEX_UNLOCK(mutexBuffers);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	4618      	mov	r0, r3
 80048e4:	f010 faaa 	bl	8014e3c <osMutexRelease>
        while (1)
 80048e8:	e74f      	b.n	800478a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x8>

080048ea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
            seek_to_frame(0), skip_frames(0),
            isActive(false), isPlaying(false), isShowingOneFrame(false),
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	611a      	str	r2, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	615a      	str	r2, [r3, #20]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	619a      	str	r2, [r3, #24]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	771a      	strb	r2, [r3, #28]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	775a      	strb	r2, [r3, #29]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	779a      	strb	r2, [r3, #30]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	77da      	strb	r2, [r3, #31]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2020 	strb.w	r2, [r3, #32]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	68d2      	ldr	r2, [r2, #12]
 800496c:	fb03 f202 	mul.w	r2, r3, r2
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	6839      	ldr	r1, [r7, #0]
 8004976:	6849      	ldr	r1, [r1, #4]
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	429a      	cmp	r2, r3
 800497e:	d322      	bcc.n	80049c6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01b      	beq.n	80049c2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	68d2      	ldr	r2, [r2, #12]
 8004992:	fb03 f202 	mul.w	r2, r3, r2
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	6839      	ldr	r1, [r7, #0]
 800499c:	6849      	ldr	r1, [r1, #4]
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	1ad2      	subs	r2, r2, r3
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	1e5a      	subs	r2, r3, #1
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 80049c6:	2300      	movs	r3, #0
    }
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	4a05      	ldr	r2, [pc, #20]	; (80049f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev+0x20>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fb1f 	bl	8004028 <_ZN8touchgfx15VideoControllerD1Ev>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	0802b2d0 	.word	0x0802b2d0

080049f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ffe7 	bl	80049d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
 8004a06:	2148      	movs	r1, #72	; 0x48
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f023 f810 	bl	8027a2e <_ZdlPvj>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d10a      	bne.n	8004a3e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d105      	bne.n	8004a3e <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 8004a32:	480c      	ldr	r0, [pc, #48]	; (8004a64 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004a34:	f7fc fb16 	bl	8001064 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 480, 272, 480 * 3U, Bitmap::RGB888> videoController;
 8004a38:	480b      	ldr	r0, [pc, #44]	; (8004a68 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004a3a:	f7ff fdd1 	bl	80045e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d105      	bne.n	8004a5a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004a4e:	4806      	ldr	r0, [pc, #24]	; (8004a68 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004a50:	f7ff ffc0 	bl	80049d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8004a54:	4803      	ldr	r0, [pc, #12]	; (8004a64 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004a56:	f7fd fbdf 	bl	8002218 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	24006dd0 	.word	0x24006dd0
 8004a68:	24006e18 	.word	0x24006e18

08004a6c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 8004a76:	4b1f      	ldr	r3, [pc, #124]	; (8004af4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004a78:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa82 	bl	8004f84 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>
 8004a80:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	3328      	adds	r3, #40	; 0x28
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9a:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004a9c:	4413      	add	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aa6:	440a      	add	r2, r1
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d905      	bls.n	8004ab8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4c>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8004aac:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 8004aae:	4a13      	ldr	r2, [pc, #76]	; (8004afc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 8004ab0:	2152      	movs	r1, #82	; 0x52
 8004ab2:	4813      	ldr	r0, [pc, #76]	; (8004b00 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x94>)
 8004ab4:	f022 ffea 	bl	8027a8c <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	3202      	adds	r2, #2
 8004ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8004acc:	4413      	add	r3, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6393      	str	r3, [r2, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8004ad2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004ad6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004ada:	2101      	movs	r1, #1
 8004adc:	6838      	ldr	r0, [r7, #0]
 8004ade:	f7ff fadf 	bl	80040a0 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	6838      	ldr	r0, [r7, #0]
 8004ae6:	f7ff facd 	bl	8004084 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 8004aea:	68bb      	ldr	r3, [r7, #8]
    }
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	0005fa00 	.word	0x0005fa00
 8004af8:	080297a4 	.word	0x080297a4
 8004afc:	080297e0 	.word	0x080297e0
 8004b00:	08029760 	.word	0x08029760

08004b04 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f04f 31ff 	mov.w	r1, #4294967295
 8004b16:	4618      	mov	r0, r3
 8004b18:	f010 f945 	bl	8014da6 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b20:	4618      	mov	r0, r3
 8004b22:	f010 f98b 	bl	8014e3c <osMutexRelease>
        streams[handle].isActive = false;
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	3328      	adds	r3, #40	; 0x28
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d114      	bne.n	8004b72 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	3328      	adds	r3, #40	; 0x28
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	e7e7      	b.n	8004b42 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x54>)
 8004b9e:	4a10      	ldr	r2, [pc, #64]	; (8004be0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x58>)
 8004ba0:	2182      	movs	r1, #130	; 0x82
 8004ba2:	4810      	ldr	r0, [pc, #64]	; (8004be4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x5c>)
 8004ba4:	f022 ff72 	bl	8027a8c <__assert_func>
        Stream& stream = streams[handle];
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3304      	adds	r3, #4
 8004bba:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	60da      	str	r2, [r3, #12]
    }
 8004bd4:	bf00      	nop
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	08029984 	.word	0x08029984
 8004be0:	08029998 	.word	0x08029998
 8004be4:	08029760 	.word	0x08029760

08004be8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8004bfa:	4b29      	ldr	r3, [pc, #164]	; (8004ca0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8004bfc:	4a29      	ldr	r2, [pc, #164]	; (8004ca4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 8004bfe:	21d0      	movs	r1, #208	; 0xd0
 8004c00:	4829      	ldr	r0, [pc, #164]	; (8004ca8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8004c02:	f022 ff43 	bl	8027a8c <__assert_func>
        Stream& stream = streams[handle];
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	3308      	adds	r3, #8
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	3304      	adds	r3, #4
 8004c18:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	7f5b      	ldrb	r3, [r3, #29]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8004c22:	f7fb ff03 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff f999 	bl	8003f60 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	441a      	add	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	7fdb      	ldrb	r3, [r3, #31]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d029      	beq.n	8004c96 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	3202      	adds	r2, #2
 8004c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fa18 	bl	8004084 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c6e:	f083 0301 	eor.w	r3, r3, #1
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c7e:	f083 0301 	eor.w	r3, r3, #1
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c94:	e000      	b.n	8004c98 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 8004c96:	2301      	movs	r3, #1
    }
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	08029984 	.word	0x08029984
 8004ca4:	08029b54 	.word	0x08029b54
 8004ca8:	08029760 	.word	0x08029760

08004cac <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f010 f86a 	bl	8014da6 <osMutexAcquire>
            firstDrawThisFrame = false;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x20>
 8004d00:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x64>)
 8004d02:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x68>)
 8004d04:	2190      	movs	r1, #144	; 0x90
 8004d06:	4814      	ldr	r0, [pc, #80]	; (8004d58 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x6c>)
 8004d08:	f022 fec0 	bl	8027a8c <__assert_func>
        Stream& stream = streams[handle];
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	3308      	adds	r3, #8
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	6858      	ldr	r0, [r3, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4798      	blx	r3
    }
 8004d46:	bf00      	nop
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	08029984 	.word	0x08029984
 8004d54:	08029cf8 	.word	0x08029cf8
 8004d58:	08029760 	.word	0x08029760

08004d5c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	6858      	ldr	r0, [r3, #4]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	330c      	adds	r3, #12
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4798      	blx	r3
    }
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 8004da6:	4b3a      	ldr	r3, [pc, #232]	; (8004e90 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8004da8:	4a3a      	ldr	r2, [pc, #232]	; (8004e94 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8004daa:	21a2      	movs	r1, #162	; 0xa2
 8004dac:	483a      	ldr	r0, [pc, #232]	; (8004e98 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8004dae:	f022 fe6d 	bl	8027a8c <__assert_func>
        Stream& stream = streams[handle];
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	617b      	str	r3, [r7, #20]
        switch (cmd)
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d85c      	bhi.n	8004e86 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8004dcc:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004ded 	.word	0x08004ded
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004e35 	.word	0x08004e35
 8004de0:	08004e49 	.word	0x08004e49
 8004de4:	08004e63 	.word	0x08004e63
 8004de8:	08004e71 	.word	0x08004e71
            if (mjpegDecoders[handle]->hasVideo())
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	6859      	ldr	r1, [r3, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3310      	adds	r3, #16
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4608      	mov	r0, r1
 8004e08:	4798      	blx	r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d039      	beq.n	8004e84 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2201      	movs	r2, #1
 8004e14:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
            break;
 8004e2a:	e02b      	b.n	8004e84 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	775a      	strb	r2, [r3, #29]
            break;
 8004e32:	e028      	b.n	8004e86 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2200      	movs	r2, #0
 8004e44:	609a      	str	r2, [r3, #8]
            break;
 8004e46:	e01e      	b.n	8004e86 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2201      	movs	r2, #1
 8004e52:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2200      	movs	r2, #0
 8004e58:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	609a      	str	r2, [r3, #8]
            break;
 8004e60:	e011      	b.n	8004e86 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2200      	movs	r2, #0
 8004e66:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	615a      	str	r2, [r3, #20]
            break;
 8004e6e:	e00a      	b.n	8004e86 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bf14      	ite	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	2300      	moveq	r3, #0
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8004e82:	e000      	b.n	8004e86 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 8004e84:	bf00      	nop
    }
 8004e86:	bf00      	nop
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	08029984 	.word	0x08029984
 8004e94:	08029ed4 	.word	0x08029ed4
 8004e98:	08029760 	.word	0x08029760

08004e9c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x3c>)
 8004eae:	4a0b      	ldr	r2, [pc, #44]	; (8004edc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x40>)
 8004eb0:	2179      	movs	r1, #121	; 0x79
 8004eb2:	480b      	ldr	r0, [pc, #44]	; (8004ee0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x44>)
 8004eb4:	f022 fdea 	bl	8027a8c <__assert_func>
        const Stream& stream = streams[handle];
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3304      	adds	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
    }
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	08029984 	.word	0x08029984
 8004edc:	0802a0a8 	.word	0x0802a0a8
 8004ee0:	08029760 	.word	0x08029760

08004ee4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d006      	beq.n	8004f04 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8004ef8:	4a0d      	ldr	r2, [pc, #52]	; (8004f30 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8004efa:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8004efe:	480d      	ldr	r0, [pc, #52]	; (8004f34 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 8004f00:	f022 fdc4 	bl	8027a8c <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	6858      	ldr	r0, [r3, #4]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3330      	adds	r3, #48	; 0x30
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4798      	blx	r3
    }
 8004f22:	bf00      	nop
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	08029984 	.word	0x08029984
 8004f30:	0802a260 	.word	0x0802a260
 8004f34:	08029760 	.word	0x08029760

08004f38 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d006      	beq.n	8004f56 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1e>
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x40>)
 8004f4a:	4a0c      	ldr	r2, [pc, #48]	; (8004f7c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x44>)
 8004f4c:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8004f50:	480b      	ldr	r0, [pc, #44]	; (8004f80 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x48>)
 8004f52:	f022 fd9b 	bl	8027a8c <__assert_func>
        Stream& stream = streams[handle];
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	3308      	adds	r3, #8
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	4413      	add	r3, r2
 8004f66:	3304      	adds	r3, #4
 8004f68:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	7f5b      	ldrb	r3, [r3, #29]
    }
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	08029984 	.word	0x08029984
 8004f7c:	0802a410 	.word	0x0802a410
 8004f80:	08029760 	.word	0x08029760

08004f84 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>:

    Handle getFreeHandle()
 8004f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f86:	b08d      	sub	sp, #52	; 0x34
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d135      	bne.n	8005002 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3328      	adds	r3, #40	; 0x28
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d126      	bne.n	8004ffa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8004fac:	f107 0308 	add.w	r3, r7, #8
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fc9a 	bl	80048ea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 8004fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb8:	4613      	mov	r3, r2
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	f107 0408 	add.w	r4, r7, #8
 8004fcc:	469c      	mov	ip, r3
 8004fce:	f104 0e20 	add.w	lr, r4, #32
 8004fd2:	4665      	mov	r5, ip
 8004fd4:	4626      	mov	r6, r4
 8004fd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004fd8:	6028      	str	r0, [r5, #0]
 8004fda:	6069      	str	r1, [r5, #4]
 8004fdc:	60aa      	str	r2, [r5, #8]
 8004fde:	60eb      	str	r3, [r5, #12]
 8004fe0:	3410      	adds	r4, #16
 8004fe2:	f10c 0c10 	add.w	ip, ip, #16
 8004fe6:	4574      	cmp	r4, lr
 8004fe8:	d1f3      	bne.n	8004fd2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x4e>
 8004fea:	4663      	mov	r3, ip
 8004fec:	4622      	mov	r2, r4
 8004fee:	8811      	ldrh	r1, [r2, #0]
 8004ff0:	7892      	ldrb	r2, [r2, #2]
 8004ff2:	8019      	strh	r1, [r3, #0]
 8004ff4:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	e00a      	b.n	8005010 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005000:	e7c6      	b.n	8004f90 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x94>)
 8005004:	4a05      	ldr	r2, [pc, #20]	; (800501c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x98>)
 8005006:	f240 11c5 	movw	r1, #453	; 0x1c5
 800500a:	4805      	ldr	r0, [pc, #20]	; (8005020 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x9c>)
 800500c:	f022 fd3e 	bl	8027a8c <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 8005010:	4618      	mov	r0, r3
 8005012:	3734      	adds	r7, #52	; 0x34
 8005014:	46bd      	mov	sp, r7
 8005016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005018:	0802a59c 	.word	0x0802a59c
 800501c:	0802a5cc 	.word	0x0802a5cc
 8005020:	08029760 	.word	0x08029760

08005024 <_GLOBAL__sub_I_mjpegdecoder1>:
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
 8005028:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800502c:	2001      	movs	r0, #1
 800502e:	f7ff fcf3 	bl	8004a18 <_Z41__static_initialization_and_destruction_0ii>
 8005032:	bd80      	pop	{r7, pc}

08005034 <_GLOBAL__sub_D_mjpegdecoder1>:
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
 8005038:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800503c:	2000      	movs	r0, #0
 800503e:	f7ff fceb 	bl	8004a18 <_Z41__static_initialization_and_destruction_0ii>
 8005042:	bd80      	pop	{r7, pc}

08005044 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005044:	b480      	push	{r7}
 8005046:	b097      	sub	sp, #92	; 0x5c
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	4a9e      	ldr	r2, [pc, #632]	; (80052d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 8005062:	e127      	b.n	80052b4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x270>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8005064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005066:	011a      	lsls	r2, r3, #4
 8005068:	4b9a      	ldr	r3, [pc, #616]	; (80052d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8005074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	4a96      	ldr	r2, [pc, #600]	; (80052d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800507a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800507c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005080:	fb01 f202 	mul.w	r2, r1, r2
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28

    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 3;
 8005088:	4b92      	ldr	r3, [pc, #584]	; (80052d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800508a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800508e:	629a      	str	r2, [r3, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005090:	4b90      	ldr	r3, [pc, #576]	; (80052d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005096:	fb02 f103 	mul.w	r1, r2, r3
 800509a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	440b      	add	r3, r1
 80050a4:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80050a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a8:	3301      	adds	r3, #1
 80050aa:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  16; i+=2)
 80050b8:	2300      	movs	r3, #0
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
 80050bc:	e0f2      	b.n	80052a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x260>
    {
      if(i == 8)
 80050be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d102      	bne.n	80050ca <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
      {
        pLum = pInBuffer + 128;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3380      	adds	r3, #128	; 0x80
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 272)
 80050ca:	4b82      	ldr	r3, [pc, #520]	; (80052d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80050cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ce:	4613      	mov	r3, r2
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	4413      	add	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	461a      	mov	r2, r3
 80050d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050da:	4293      	cmp	r3, r2
 80050dc:	f080 80df 	bcs.w	800529e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25a>
      {
        pOutAddr = pOutBuffer + refline;
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e4:	4413      	add	r3, r2
 80050e6:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80050e8:	4b7a      	ldr	r3, [pc, #488]	; (80052d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ee:	4413      	add	r3, r2
 80050f0:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(k= 0; k<2; k++)
 80050f2:	2300      	movs	r3, #0
 80050f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f6:	e0c5      	b.n	8005284 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x240>
        {
          for(j=0; j < 8; j+=2)
 80050f8:	2300      	movs	r3, #0
 80050fa:	653b      	str	r3, [r7, #80]	; 0x50
 80050fc:	e0b8      	b.n	8005270 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22c>
          {
            cbcomp = (int32_t)(*(pChrom));
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4a73      	ldr	r2, [pc, #460]	; (80052d8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 800510a:	4413      	add	r3, r2
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8005110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005112:	3340      	adds	r3, #64	; 0x40
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4a6f      	ldr	r2, [pc, #444]	; (80052dc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x298>)
 800511e:	4413      	add	r3, r2
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4a6d      	ldr	r2, [pc, #436]	; (80052e0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>)
 800512a:	4413      	add	r3, r2
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	496c      	ldr	r1, [pc, #432]	; (80052e4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a0>)
 8005134:	440b      	add	r3, r1
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4413      	add	r3, r2
 800513a:	141b      	asrs	r3, r3, #16
 800513c:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 800513e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005142:	4413      	add	r3, r2
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4413      	add	r3, r2
 800514e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005154:	3302      	adds	r3, #2
 8005156:	4964      	ldr	r1, [pc, #400]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005158:	5c8a      	ldrb	r2, [r1, r2]
 800515a:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	4413      	add	r3, r2
 8005162:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005168:	3301      	adds	r3, #1
 800516a:	495f      	ldr	r1, [pc, #380]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800516c:	5c8a      	ldrb	r2, [r1, r2]
 800516e:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	4413      	add	r3, r2
 8005176:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800517a:	4a5b      	ldr	r2, [pc, #364]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800517c:	5cd2      	ldrb	r2, [r2, r3]
 800517e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005180:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8005182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005184:	3301      	adds	r3, #1
 8005186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005188:	4413      	add	r3, r2
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	4413      	add	r3, r2
 8005194:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519a:	3305      	adds	r3, #5
 800519c:	4952      	ldr	r1, [pc, #328]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800519e:	5c8a      	ldrb	r2, [r1, r2]
 80051a0:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ae:	3304      	adds	r3, #4
 80051b0:	494d      	ldr	r1, [pc, #308]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051b2:	5c8a      	ldrb	r2, [r1, r2]
 80051b4:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c2:	3303      	adds	r3, #3
 80051c4:	4948      	ldr	r1, [pc, #288]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051c6:	5c8a      	ldrb	r2, [r1, r2]
 80051c8:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 80051ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051cc:	3308      	adds	r3, #8
 80051ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d0:	4413      	add	r3, r2
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	3302      	adds	r3, #2
 80051e4:	4940      	ldr	r1, [pc, #256]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051e6:	5c8a      	ldrb	r2, [r1, r2]
 80051e8:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80051f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f6:	3301      	adds	r3, #1
 80051f8:	493b      	ldr	r1, [pc, #236]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80051fa:	5c8a      	ldrb	r2, [r1, r2]
 80051fc:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	4413      	add	r3, r2
 8005204:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005208:	4a37      	ldr	r2, [pc, #220]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800520a:	5cd2      	ldrb	r2, [r2, r3]
 800520c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520e:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8005210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005212:	3309      	adds	r3, #9
 8005214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005216:	4413      	add	r3, r2
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	613b      	str	r3, [r7, #16]

            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	4413      	add	r3, r2
 8005222:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005228:	3305      	adds	r3, #5
 800522a:	492f      	ldr	r1, [pc, #188]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 800522c:	5c8a      	ldrb	r2, [r1, r2]
 800522e:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	4413      	add	r3, r2
 8005236:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523c:	3304      	adds	r3, #4
 800523e:	492a      	ldr	r1, [pc, #168]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005240:	5c8a      	ldrb	r2, [r1, r2]
 8005242:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	4413      	add	r3, r2
 800524a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800524e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005250:	3303      	adds	r3, #3
 8005252:	4925      	ldr	r1, [pc, #148]	; (80052e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005254:	5c8a      	ldrb	r2, [r1, r2]
 8005256:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8005258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525a:	3306      	adds	r3, #6
 800525c:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800525e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005260:	3306      	adds	r3, #6
 8005262:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	3301      	adds	r3, #1
 8005268:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 800526a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526c:	3302      	adds	r3, #2
 800526e:	653b      	str	r3, [r7, #80]	; 0x50
 8005270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005272:	2b07      	cmp	r3, #7
 8005274:	f67f af43 	bls.w	80050fe <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xba>
          }
          pLum += 64;
 8005278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527a:	3340      	adds	r3, #64	; 0x40
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 800527e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005280:	3301      	adds	r3, #1
 8005282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005286:	2b01      	cmp	r3, #1
 8005288:	f67f af36 	bls.w	80050f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb4>
        }

        pLum = pLum - 128 + 16;
 800528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528e:	3b70      	subs	r3, #112	; 0x70
 8005290:	637b      	str	r3, [r7, #52]	; 0x34

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800529a:	4413      	add	r3, r2
 800529c:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 800529e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a0:	3302      	adds	r3, #2
 80052a2:	657b      	str	r3, [r7, #84]	; 0x54
 80052a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	f67f af09 	bls.w	80050be <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80052b2:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80052b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052bc:	429a      	cmp	r2, r3
 80052be:	f4ff aed1 	bcc.w	8005064 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	375c      	adds	r7, #92	; 0x5c
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	aaaaaaab 	.word	0xaaaaaaab
 80052d4:	24006e68 	.word	0x24006e68
 80052d8:	240072a8 	.word	0x240072a8
 80052dc:	24006ea8 	.word	0x24006ea8
 80052e0:	240076a8 	.word	0x240076a8
 80052e4:	24007aa8 	.word	0x24007aa8
 80052e8:	0802b484 	.word	0x0802b484

080052ec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b097      	sub	sp, #92	; 0x5c
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	0a1b      	lsrs	r3, r3, #8
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 8005304:	e0c5      	b.n	8005492 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8005306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005308:	011a      	lsls	r2, r3, #4
 800530a:	4b69      	ldr	r3, [pc, #420]	; (80054b0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	633b      	str	r3, [r7, #48]	; 0x30

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8005316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	4a65      	ldr	r2, [pc, #404]	; (80054b0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 800531c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800531e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005322:	fb01 f202 	mul.w	r2, r1, r2
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800532a:	4b61      	ldr	r3, [pc, #388]	; (80054b0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005330:	fb02 f103 	mul.w	r1, r2, r3
 8005334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	440b      	add	r3, r1
 800533e:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8005340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005342:	3301      	adds	r3, #1
 8005344:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3380      	adds	r3, #128	; 0x80
 800534a:	63fb      	str	r3, [r7, #60]	; 0x3c

    pLum = pInBuffer;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38

    for(i= 0; i <  8; i++)
 8005350:	2300      	movs	r3, #0
 8005352:	657b      	str	r3, [r7, #84]	; 0x54
 8005354:	e095      	b.n	8005482 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005356:	4b56      	ldr	r3, [pc, #344]	; (80054b0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800535c:	429a      	cmp	r2, r3
 800535e:	f080 808d 	bcs.w	800547c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005366:	4413      	add	r3, r2
 8005368:	643b      	str	r3, [r7, #64]	; 0x40

        for(k= 0; k<2; k++)
 800536a:	2300      	movs	r3, #0
 800536c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800536e:	e07a      	b.n	8005466 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 8005370:	2300      	movs	r3, #0
 8005372:	653b      	str	r3, [r7, #80]	; 0x50
 8005374:	e06e      	b.n	8005454 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {
            cbcomp = (int32_t)(*(pChrom));
 8005376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4a4c      	ldr	r2, [pc, #304]	; (80054b4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 8005382:	4413      	add	r3, r2
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	627b      	str	r3, [r7, #36]	; 0x24

            crcomp = (int32_t)(*(pChrom + 64));
 8005388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538a:	3340      	adds	r3, #64	; 0x40
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4a48      	ldr	r2, [pc, #288]	; (80054b8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 8005396:	4413      	add	r3, r2
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	61fb      	str	r3, [r7, #28]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4a46      	ldr	r2, [pc, #280]	; (80054bc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 80053a2:	4413      	add	r3, r2
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4945      	ldr	r1, [pc, #276]	; (80054c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 80053ac:	440b      	add	r3, r1
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	141b      	asrs	r3, r3, #16
 80053b4:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 80053b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ba:	4413      	add	r3, r2
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	617b      	str	r3, [r7, #20]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053cc:	3302      	adds	r3, #2
 80053ce:	493d      	ldr	r1, [pc, #244]	; (80054c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053d0:	5c8a      	ldrb	r2, [r1, r2]
 80053d2:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80053de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e0:	3301      	adds	r3, #1
 80053e2:	4938      	ldr	r1, [pc, #224]	; (80054c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053e4:	5c8a      	ldrb	r2, [r1, r2]
 80053e6:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053f2:	4a34      	ldr	r2, [pc, #208]	; (80054c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80053f4:	5cd2      	ldrb	r2, [r2, r3]
 80053f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f8:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80053fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053fc:	3301      	adds	r3, #1
 80053fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005400:	4413      	add	r3, r2
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005412:	3305      	adds	r3, #5
 8005414:	492b      	ldr	r1, [pc, #172]	; (80054c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8005416:	5c8a      	ldrb	r2, [r1, r2]
 8005418:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	4413      	add	r3, r2
 8005420:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005426:	3304      	adds	r3, #4
 8005428:	4926      	ldr	r1, [pc, #152]	; (80054c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 800542a:	5c8a      	ldrb	r2, [r1, r2]
 800542c:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	4413      	add	r3, r2
 8005434:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800543a:	3303      	adds	r3, #3
 800543c:	4921      	ldr	r1, [pc, #132]	; (80054c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 800543e:	5c8a      	ldrb	r2, [r1, r2]
 8005440:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT*/

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8005442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005444:	3306      	adds	r3, #6
 8005446:	643b      	str	r3, [r7, #64]	; 0x40

            pChrom++;
 8005448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544a:	3301      	adds	r3, #1
 800544c:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 800544e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005450:	3302      	adds	r3, #2
 8005452:	653b      	str	r3, [r7, #80]	; 0x50
 8005454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005456:	2b07      	cmp	r3, #7
 8005458:	d98d      	bls.n	8005376 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	3340      	adds	r3, #64	; 0x40
 800545e:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8005460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005462:	3301      	adds	r3, #1
 8005464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d981      	bls.n	8005370 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }

        pLum = pLum - 128 + 8;
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	3b78      	subs	r3, #120	; 0x78
 8005470:	63bb      	str	r3, [r7, #56]	; 0x38

        refline += JPEG_ConvertorParams.ScaledWidth;
 8005472:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005478:	4413      	add	r3, r2
 800547a:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 800547c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547e:	3301      	adds	r3, #1
 8005480:	657b      	str	r3, [r7, #84]	; 0x54
 8005482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005484:	2b07      	cmp	r3, #7
 8005486:	f67f af66 	bls.w	8005356 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005490:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4413      	add	r3, r2
 8005498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800549a:	429a      	cmp	r2, r3
 800549c:	f4ff af33 	bcc.w	8005306 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80054a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	375c      	adds	r7, #92	; 0x5c
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	24006e68 	.word	0x24006e68
 80054b4:	240072a8 	.word	0x240072a8
 80054b8:	24006ea8 	.word	0x24006ea8
 80054bc:	240076a8 	.word	0x240076a8
 80054c0:	24007aa8 	.word	0x24007aa8
 80054c4:	0802b484 	.word	0x0802b484

080054c8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b095      	sub	sp, #84	; 0x54
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	4a54      	ldr	r2, [pc, #336]	; (800562c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	09db      	lsrs	r3, r3, #7
 80054e0:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	647b      	str	r3, [r7, #68]	; 0x44

  while(currentMCU < (numberMCU + BlockIndex))
 80054e6:	e092      	b.n	800560e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80054e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ea:	00da      	lsls	r2, r3, #3
 80054ec:	4b50      	ldr	r3, [pc, #320]	; (8005630 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80054f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4a4c      	ldr	r2, [pc, #304]	; (8005630 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80054fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005500:	fbb3 f1f2 	udiv	r1, r3, r2
 8005504:	fb01 f202 	mul.w	r2, r1, r2
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800550c:	4b48      	ldr	r3, [pc, #288]	; (8005630 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005512:	fb02 f103 	mul.w	r1, r2, r3
 8005516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005518:	4613      	mov	r3, r2
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	4413      	add	r3, r2
 800551e:	440b      	add	r3, r1
 8005520:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;
 8005522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005524:	3301      	adds	r3, #1
 8005526:	647b      	str	r3, [r7, #68]	; 0x44

    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3340      	adds	r3, #64	; 0x40
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  8; i++)
 8005532:	2300      	movs	r3, #0
 8005534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005536:	e064      	b.n	8005602 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005538:	4b3d      	ldr	r3, [pc, #244]	; (8005630 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800553e:	429a      	cmp	r2, r3
 8005540:	d25c      	bcs.n	80055fc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005546:	4413      	add	r3, r2
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c

          for(j=0; j < 8; j++)
 800554a:	2300      	movs	r3, #0
 800554c:	64bb      	str	r3, [r7, #72]	; 0x48
 800554e:	e04a      	b.n	80055e6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {
            cbcomp = (int32_t)(*pChrom);
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4a36      	ldr	r2, [pc, #216]	; (8005634 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 800555c:	4413      	add	r3, r2
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	3340      	adds	r3, #64	; 0x40
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4a32      	ldr	r2, [pc, #200]	; (8005638 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 8005570:	4413      	add	r3, r2
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4a30      	ldr	r2, [pc, #192]	; (800563c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 800557c:	4413      	add	r3, r2
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	492e      	ldr	r1, [pc, #184]	; (8005640 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8005586:	440b      	add	r3, r1
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4413      	add	r3, r2
 800558c:	141b      	asrs	r3, r3, #16
 800558e:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

            ycomp = (int32_t)(*(pLum +j));
 8005590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005594:	4413      	add	r3, r2
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80055a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a6:	3302      	adds	r3, #2
 80055a8:	4926      	ldr	r1, [pc, #152]	; (8005644 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80055aa:	5c8a      	ldrb	r2, [r1, r2]
 80055ac:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	3301      	adds	r3, #1
 80055bc:	4921      	ldr	r1, [pc, #132]	; (8005644 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80055be:	5c8a      	ldrb	r2, [r1, r2]
 80055c0:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80055cc:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80055ce:	5cd2      	ldrb	r2, [r2, r3]
 80055d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d2:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80055d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d6:	3303      	adds	r3, #3
 80055d8:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	3301      	adds	r3, #1
 80055de:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 80055e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e2:	3301      	adds	r3, #1
 80055e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e8:	2b07      	cmp	r3, #7
 80055ea:	d9b1      	bls.n	8005550 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 80055ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ee:	3308      	adds	r3, #8
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;
 80055f2:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055f8:	4413      	add	r3, r2
 80055fa:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 80055fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fe:	3301      	adds	r3, #1
 8005600:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005604:	2b07      	cmp	r3, #7
 8005606:	d997      	bls.n	8005538 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	33c0      	adds	r3, #192	; 0xc0
 800560c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800560e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4413      	add	r3, r2
 8005614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005616:	429a      	cmp	r2, r3
 8005618:	f4ff af66 	bcc.w	80054e8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800561e:	4618      	mov	r0, r3
 8005620:	3754      	adds	r7, #84	; 0x54
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	aaaaaaab 	.word	0xaaaaaaab
 8005630:	24006e68 	.word	0x24006e68
 8005634:	240072a8 	.word	0x240072a8
 8005638:	24006ea8 	.word	0x24006ea8
 800563c:	240076a8 	.word	0x240076a8
 8005640:	24007aa8 	.word	0x24007aa8
 8005644:	0802b484 	.word	0x0802b484

08005648 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005648:	b480      	push	{r7}
 800564a:	b08f      	sub	sp, #60	; 0x3c
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	099b      	lsrs	r3, r3, #6
 800565a:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	637b      	str	r3, [r7, #52]	; 0x34

  while(currentMCU < (numberMCU + BlockIndex))
 8005660:	e05b      	b.n	800571a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	00da      	lsls	r2, r3, #3
 8005666:	4b33      	ldr	r3, [pc, #204]	; (8005734 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	61bb      	str	r3, [r7, #24]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4a2f      	ldr	r2, [pc, #188]	; (8005734 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800567a:	fbb3 f1f2 	udiv	r1, r3, r2
 800567e:	fb01 f202 	mul.w	r2, r1, r2
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	617b      	str	r3, [r7, #20]

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005686:	4b2b      	ldr	r3, [pc, #172]	; (8005734 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	fb02 f103 	mul.w	r1, r2, r3
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4613      	mov	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	4413      	add	r3, r2
 8005698:	440b      	add	r3, r1
 800569a:	633b      	str	r3, [r7, #48]	; 0x30

    currentMCU++;
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	3301      	adds	r3, #1
 80056a0:	637b      	str	r3, [r7, #52]	; 0x34

    pLum = pInBuffer;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	623b      	str	r3, [r7, #32]

    for(i= 0; i <  8; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056aa:	e030      	b.n	800570e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    {
      pOutAddr = pOutBuffer + refline;
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	4413      	add	r3, r2
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80056b4:	4b1f      	ldr	r3, [pc, #124]	; (8005734 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d224      	bcs.n	8005708 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {
        for(j=0; j < 8; j++)
 80056be:	2300      	movs	r3, #0
 80056c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c2:	e019      	b.n	80056f8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        {
          ySample =   (uint32_t)(*pLum);
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	613b      	str	r3, [r7, #16]

          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[0] =  ySample;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	3301      	adds	r3, #1
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	3302      	adds	r3, #2
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]

          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);

#endif /* JPEG_RGB_FORMAT */

          pOutAddr += JPEG_BYTES_PER_PIXEL;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	3303      	adds	r3, #3
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	3301      	adds	r3, #1
 80056f0:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	3301      	adds	r3, #1
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	2b07      	cmp	r3, #7
 80056fc:	d9e2      	bls.n	80056c4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;
 80056fe:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005704:	4413      	add	r3, r2
 8005706:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	3301      	adds	r3, #1
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	2b07      	cmp	r3, #7
 8005712:	d9cb      	bls.n	80056ac <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3340      	adds	r3, #64	; 0x40
 8005718:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4413      	add	r3, r2
 8005720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005722:	429a      	cmp	r2, r3
 8005724:	d39d      	bcc.n	8005662 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8005726:	69fb      	ldr	r3, [r7, #28]
}
 8005728:	4618      	mov	r0, r3
 800572a:	373c      	adds	r7, #60	; 0x3c
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	24006e68 	.word	0x24006e68

08005738 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005738:	b480      	push	{r7}
 800573a:	b093      	sub	sp, #76	; 0x4c
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c

  while(currentMCU < (numberMCU + BlockIndex))
 8005750:	e089      	b.n	8005866 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8005752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005754:	00da      	lsls	r2, r3, #3
 8005756:	4b4b      	ldr	r3, [pc, #300]	; (8005884 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	fbb2 f3f3 	udiv	r3, r2, r3
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8005762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4a47      	ldr	r2, [pc, #284]	; (8005884 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800576a:	fbb3 f1f2 	udiv	r1, r3, r2
 800576e:	fb01 f202 	mul.w	r2, r1, r2
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	627b      	str	r3, [r7, #36]	; 0x24

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005776:	4b43      	ldr	r3, [pc, #268]	; (8005884 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800577c:	fb02 f103 	mul.w	r1, r2, r3
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	4613      	mov	r3, r2
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	4413      	add	r3, r2
 8005788:	440b      	add	r3, r1
 800578a:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	3301      	adds	r3, #1
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c

    pChrom = pInBuffer;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	633b      	str	r3, [r7, #48]	; 0x30

    for(i= 0; i <  8; i++)
 8005796:	2300      	movs	r3, #0
 8005798:	647b      	str	r3, [r7, #68]	; 0x44
 800579a:	e05d      	b.n	8005858 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800579c:	4b39      	ldr	r3, [pc, #228]	; (8005884 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d255      	bcs.n	8005852 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	4413      	add	r3, r2
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	643b      	str	r3, [r7, #64]	; 0x40
 80057b2:	e046      	b.n	8005842 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {
            color_k = (int32_t)(*(pChrom + 192));
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	33c0      	adds	r3, #192	; 0xc0
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	4a2f      	ldr	r2, [pc, #188]	; (8005888 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80057ca:	fb82 1203 	smull	r1, r2, r2, r3
 80057ce:	441a      	add	r2, r3
 80057d0:	11d2      	asrs	r2, r2, #7
 80057d2:	17db      	asrs	r3, r3, #31
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	61fb      	str	r3, [r7, #28]

            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	3340      	adds	r3, #64	; 0x40
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	4a28      	ldr	r2, [pc, #160]	; (8005888 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80057e8:	fb82 1203 	smull	r1, r2, r2, r3
 80057ec:	441a      	add	r2, r3
 80057ee:	11d2      	asrs	r2, r2, #7
 80057f0:	17db      	asrs	r3, r3, #31
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	61bb      	str	r3, [r7, #24]

            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	3380      	adds	r3, #128	; 0x80
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	fb02 f303 	mul.w	r3, r2, r3
 8005804:	4a20      	ldr	r2, [pc, #128]	; (8005888 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8005806:	fb82 1203 	smull	r1, r2, r2, r3
 800580a:	441a      	add	r2, r3
 800580c:	11d2      	asrs	r2, r2, #7
 800580e:	17db      	asrs	r3, r3, #31
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005816:	3302      	adds	r3, #2
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	3301      	adds	r3, #1
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	b2da      	uxtb	r2, r3
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	3303      	adds	r3, #3
 8005834:	637b      	str	r3, [r7, #52]	; 0x34

            pChrom++;
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	3301      	adds	r3, #1
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 800583c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583e:	3301      	adds	r3, #1
 8005840:	643b      	str	r3, [r7, #64]	; 0x40
 8005842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005844:	2b07      	cmp	r3, #7
 8005846:	d9b5      	bls.n	80057b4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8005848:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800584e:	4413      	add	r3, r2
 8005850:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 8005852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005854:	3301      	adds	r3, #1
 8005856:	647b      	str	r3, [r7, #68]	; 0x44
 8005858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800585a:	2b07      	cmp	r3, #7
 800585c:	d99e      	bls.n	800579c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005864:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800586e:	429a      	cmp	r2, r3
 8005870:	f4ff af6f 	bcc.w	8005752 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8005874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005876:	4618      	mov	r0, r3
 8005878:	374c      	adds	r7, #76	; 0x4c
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	24006e68 	.word	0x24006e68
 8005888:	80808081 	.word	0x80808081

0800588c <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a7c      	ldr	r2, [pc, #496]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800589e:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4a7a      	ldr	r2, [pc, #488]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058a6:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4a78      	ldr	r2, [pc, #480]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ae:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	6892      	ldr	r2, [r2, #8]
 80058b8:	fb03 f202 	mul.w	r2, r3, r2
 80058bc:	4613      	mov	r3, r2
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	4413      	add	r3, r2
 80058c2:	4a73      	ldr	r2, [pc, #460]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058c4:	6113      	str	r3, [r2, #16]

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4a71      	ldr	r2, [pc, #452]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058cc:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80058ce:	4b70      	ldr	r3, [pc, #448]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b10      	cmp	r3, #16
 80058d4:	d155      	bne.n	8005982 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80058d6:	4b6e      	ldr	r3, [pc, #440]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d119      	bne.n	8005912 <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4a6c      	ldr	r2, [pc, #432]	; (8005a94 <TGFX_JPEG_GetDecodeColorConvertFunc+0x208>)
 80058e2:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80058e4:	4b6a      	ldr	r3, [pc, #424]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	4a68      	ldr	r2, [pc, #416]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058ee:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 80058f0:	4b67      	ldr	r3, [pc, #412]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <TGFX_JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 80058f8:	4b65      	ldr	r3, [pc, #404]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f1c3 0310 	rsb	r3, r3, #16
 8005900:	4a63      	ldr	r2, [pc, #396]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005902:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8005904:	4b62      	ldr	r3, [pc, #392]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005906:	2210      	movs	r2, #16
 8005908:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 800590a:	4b61      	ldr	r3, [pc, #388]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800590c:	2210      	movs	r2, #16
 800590e:	621a      	str	r2, [r3, #32]
 8005910:	e075      	b.n	80059fe <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8005912:	4b5f      	ldr	r3, [pc, #380]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d119      	bne.n	800594e <TGFX_JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4a5e      	ldr	r2, [pc, #376]	; (8005a98 <TGFX_JPEG_GetDecodeColorConvertFunc+0x20c>)
 800591e:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8005920:	4b5b      	ldr	r3, [pc, #364]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	4a59      	ldr	r2, [pc, #356]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800592a:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 800592c:	4b58      	ldr	r3, [pc, #352]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8005934:	4b56      	ldr	r3, [pc, #344]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f1c3 0310 	rsb	r3, r3, #16
 800593c:	4a54      	ldr	r2, [pc, #336]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800593e:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8005940:	4b53      	ldr	r3, [pc, #332]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005942:	2210      	movs	r2, #16
 8005944:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8005946:	4b52      	ldr	r3, [pc, #328]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005948:	2208      	movs	r2, #8
 800594a:	621a      	str	r2, [r3, #32]
 800594c:	e057      	b.n	80059fe <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4a52      	ldr	r2, [pc, #328]	; (8005a9c <TGFX_JPEG_GetDecodeColorConvertFunc+0x210>)
 8005952:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8005954:	4b4e      	ldr	r3, [pc, #312]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4a4c      	ldr	r2, [pc, #304]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800595e:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8005960:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8005968:	4b49      	ldr	r3, [pc, #292]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f1c3 0308 	rsb	r3, r3, #8
 8005970:	4a47      	ldr	r2, [pc, #284]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005972:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8005974:	4b46      	ldr	r3, [pc, #280]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005976:	2208      	movs	r2, #8
 8005978:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800597a:	4b45      	ldr	r3, [pc, #276]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800597c:	2208      	movs	r2, #8
 800597e:	621a      	str	r2, [r3, #32]
 8005980:	e03d      	b.n	80059fe <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8005982:	4b43      	ldr	r3, [pc, #268]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d119      	bne.n	80059be <TGFX_JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4a44      	ldr	r2, [pc, #272]	; (8005aa0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x214>)
 800598e:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8005990:	4b3f      	ldr	r3, [pc, #252]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800599a:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 800599c:	4b3c      	ldr	r3, [pc, #240]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 80059a4:	4b3a      	ldr	r3, [pc, #232]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f1c3 0308 	rsb	r3, r3, #8
 80059ac:	4a38      	ldr	r2, [pc, #224]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ae:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 80059b0:	4b37      	ldr	r3, [pc, #220]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059b2:	2208      	movs	r2, #8
 80059b4:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 80059b6:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059b8:	2208      	movs	r2, #8
 80059ba:	621a      	str	r2, [r3, #32]
 80059bc:	e01f      	b.n	80059fe <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 80059be:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b30      	cmp	r3, #48	; 0x30
 80059c4:	d119      	bne.n	80059fa <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	4a36      	ldr	r2, [pc, #216]	; (8005aa4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x218>)
 80059ca:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80059cc:	4b30      	ldr	r3, [pc, #192]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4a2e      	ldr	r2, [pc, #184]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059d6:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 80059d8:	4b2d      	ldr	r3, [pc, #180]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <TGFX_JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 80059e0:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f1c3 0308 	rsb	r3, r3, #8
 80059e8:	4a29      	ldr	r2, [pc, #164]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ea:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 80059ec:	4b28      	ldr	r3, [pc, #160]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059ee:	2208      	movs	r2, #8
 80059f0:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 80059f2:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80059f4:	2208      	movs	r2, #8
 80059f6:	621a      	str	r2, [r3, #32]
 80059f8:	e001      	b.n	80059fe <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
 80059fa:	2301      	movs	r3, #1
 80059fc:	e042      	b.n	8005a84 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1f8>
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	4413      	add	r3, r2
 8005a08:	4a21      	ldr	r2, [pc, #132]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a0a:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8005a0c:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	4613      	mov	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4413      	add	r3, r2
 8005a16:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a18:	6293      	str	r3, [r2, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	4b1c      	ldr	r3, [pc, #112]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8005a28:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a2e:	69d2      	ldr	r2, [r2, #28]
 8005a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a34:	fb01 f202 	mul.w	r2, r1, r2
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	3301      	adds	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8005a44:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a50:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8005a52:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	4a0e      	ldr	r2, [pc, #56]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a58:	6a12      	ldr	r2, [r2, #32]
 8005a5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a5e:	fb01 f202 	mul.w	r2, r1, r2
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <TGFX_JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	4a06      	ldr	r2, [pc, #24]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a78:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8005a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	24006e68 	.word	0x24006e68
 8005a94:	08005045 	.word	0x08005045
 8005a98:	080052ed 	.word	0x080052ed
 8005a9c:	080054c9 	.word	0x080054c9
 8005aa0:	08005649 	.word	0x08005649
 8005aa4:	08005739 	.word	0x08005739

08005aa8 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8005aae:	2300      	movs	r3, #0
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	e02e      	b.n	8005b12 <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3b80      	subs	r3, #128	; 0x80
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	f24b 3274 	movw	r2, #45940	; 0xb374
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005aca:	141a      	asrs	r2, r3, #16
 8005acc:	4916      	ldr	r1, [pc, #88]	; (8005b28 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005ae2:	141a      	asrs	r2, r3, #16
 8005ae4:	4911      	ldr	r1, [pc, #68]	; (8005b2c <TGFX_JPEG_InitPostProcColorTables+0x84>)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	4a10      	ldr	r2, [pc, #64]	; (8005b30 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8005af0:	fb03 f202 	mul.w	r2, r3, r2
 8005af4:	490f      	ldr	r1, [pc, #60]	; (8005b34 <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4a0e      	ldr	r2, [pc, #56]	; (8005b38 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8005b00:	fb03 f202 	mul.w	r2, r3, r2
 8005b04:	490d      	ldr	r1, [pc, #52]	; (8005b3c <TGFX_JPEG_InitPostProcColorTables+0x94>)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	607b      	str	r3, [r7, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2bff      	cmp	r3, #255	; 0xff
 8005b16:	ddcd      	ble.n	8005ab4 <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	24006ea8 	.word	0x24006ea8
 8005b2c:	240072a8 	.word	0x240072a8
 8005b30:	ffffa498 	.word	0xffffa498
 8005b34:	240076a8 	.word	0x240076a8
 8005b38:	ffffd3f4 	.word	0xffffd3f4
 8005b3c:	24007aa8 	.word	0x24007aa8

08005b40 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8005b44:	f000 f806 	bl	8005b54 <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8005b48:	f000 f888 	bl	8005c5c <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8005b4c:	f7ff ffac 	bl	8005aa8 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8005b50:	bf00      	nop
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	607b      	str	r3, [r7, #4]
 8005b5e:	e05a      	b.n	8005c16 <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b6e:	141a      	asrs	r2, r3, #16
 8005b70:	492e      	ldr	r1, [pc, #184]	; (8005c2c <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f249 6245 	movw	r2, #38469	; 0x9645
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b86:	141a      	asrs	r2, r3, #16
 8005b88:	4929      	ldr	r1, [pc, #164]	; (8005c30 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b9e:	141a      	asrs	r2, r3, #16
 8005ba0:	4924      	ldr	r1, [pc, #144]	; (8005c34 <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a23      	ldr	r2, [pc, #140]	; (8005c38 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8005bac:	fb02 f303 	mul.w	r3, r2, r3
 8005bb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bb4:	141a      	asrs	r2, r3, #16
 8005bb6:	4921      	ldr	r1, [pc, #132]	; (8005c3c <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1f      	ldr	r2, [pc, #124]	; (8005c40 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bca:	141a      	asrs	r2, r3, #16
 8005bcc:	491d      	ldr	r1, [pc, #116]	; (8005c44 <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	03db      	lsls	r3, r3, #15
 8005bda:	141a      	asrs	r2, r3, #16
 8005bdc:	491a      	ldr	r1, [pc, #104]	; (8005c48 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a19      	ldr	r2, [pc, #100]	; (8005c4c <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8005be8:	fb02 f303 	mul.w	r3, r2, r3
 8005bec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bf0:	141a      	asrs	r2, r3, #16
 8005bf2:	4917      	ldr	r1, [pc, #92]	; (8005c50 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a15      	ldr	r2, [pc, #84]	; (8005c54 <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005c06:	141a      	asrs	r2, r3, #16
 8005c08:	4913      	ldr	r1, [pc, #76]	; (8005c58 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3301      	adds	r3, #1
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2bff      	cmp	r3, #255	; 0xff
 8005c1a:	dda1      	ble.n	8005b60 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	24007ea8 	.word	0x24007ea8
 8005c30:	24008aa8 	.word	0x24008aa8
 8005c34:	240096a8 	.word	0x240096a8
 8005c38:	ffffd4d1 	.word	0xffffd4d1
 8005c3c:	240082a8 	.word	0x240082a8
 8005c40:	ffffab30 	.word	0xffffab30
 8005c44:	240092a8 	.word	0x240092a8
 8005c48:	240086a8 	.word	0x240086a8
 8005c4c:	ffff94d1 	.word	0xffff94d1
 8005c50:	24008ea8 	.word	0x24008ea8
 8005c54:	ffffeb30 	.word	0xffffeb30
 8005c58:	24009aa8 	.word	0x24009aa8

08005c5c <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e036      	b.n	8005cd6 <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60bb      	str	r3, [r7, #8]
 8005c6c:	e02d      	b.n	8005cca <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	4413      	add	r3, r2
 8005c76:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b07      	cmp	r3, #7
 8005c7c:	d906      	bls.n	8005c8c <TGFX_JPEG_Init_MCU_LUT+0x30>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b07      	cmp	r3, #7
 8005c82:	d903      	bls.n	8005c8c <TGFX_JPEG_Init_MCU_LUT+0x30>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3378      	adds	r3, #120	; 0x78
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	e012      	b.n	8005cb2 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b07      	cmp	r3, #7
 8005c90:	d906      	bls.n	8005ca0 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b07      	cmp	r3, #7
 8005c96:	d803      	bhi.n	8005ca0 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3338      	adds	r3, #56	; 0x38
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	e008      	b.n	8005cb2 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b07      	cmp	r3, #7
 8005ca4:	d805      	bhi.n	8005cb2 <TGFX_JPEG_Init_MCU_LUT+0x56>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b07      	cmp	r3, #7
 8005caa:	d902      	bls.n	8005cb2 <TGFX_JPEG_Init_MCU_LUT+0x56>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3340      	adds	r3, #64	; 0x40
 8005cb0:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	011a      	lsls	r2, r3, #4
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4413      	add	r3, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	b291      	uxth	r1, r2
 8005cbe:	4a62      	ldr	r2, [pc, #392]	; (8005e48 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8005cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b0f      	cmp	r3, #15
 8005cce:	d9ce      	bls.n	8005c6e <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b0f      	cmp	r3, #15
 8005cda:	d9c5      	bls.n	8005c68 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e072      	b.n	8005dc8 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	e069      	b.n	8005dbc <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	4413      	add	r3, r2
 8005cf0:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	4413      	add	r3, r2
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d0a:	b299      	uxth	r1, r3
 8005d0c:	4a4f      	ldr	r2, [pc, #316]	; (8005e4c <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4413      	add	r3, r2
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3380      	adds	r3, #128	; 0x80
 8005d28:	b299      	uxth	r1, r3
 8005d2a:	4a49      	ldr	r2, [pc, #292]	; (8005e50 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d4a:	b299      	uxth	r1, r3
 8005d4c:	4a41      	ldr	r2, [pc, #260]	; (8005e54 <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	4413      	add	r3, r2
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	33c0      	adds	r3, #192	; 0xc0
 8005d68:	b299      	uxth	r1, r3
 8005d6a:	4a3b      	ldr	r2, [pc, #236]	; (8005e58 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005d8a:	b299      	uxth	r1, r3
 8005d8c:	4a33      	ldr	r2, [pc, #204]	; (8005e5c <TGFX_JPEG_Init_MCU_LUT+0x200>)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005dac:	b299      	uxth	r1, r3
 8005dae:	4a2c      	ldr	r2, [pc, #176]	; (8005e60 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	3301      	adds	r3, #1
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b0f      	cmp	r3, #15
 8005dc0:	d992      	bls.n	8005ce8 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b0f      	cmp	r3, #15
 8005dcc:	d989      	bls.n	8005ce2 <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	e02e      	b.n	8005e32 <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	e025      	b.n	8005e26 <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	4413      	add	r3, r2
 8005de2:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	b299      	uxth	r1, r3
 8005de8:	4a1e      	ldr	r2, [pc, #120]	; (8005e64 <TGFX_JPEG_Init_MCU_LUT+0x208>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3340      	adds	r3, #64	; 0x40
 8005df6:	b299      	uxth	r1, r3
 8005df8:	4a1b      	ldr	r2, [pc, #108]	; (8005e68 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3380      	adds	r3, #128	; 0x80
 8005e06:	b299      	uxth	r1, r3
 8005e08:	4a18      	ldr	r2, [pc, #96]	; (8005e6c <TGFX_JPEG_Init_MCU_LUT+0x210>)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	33c0      	adds	r3, #192	; 0xc0
 8005e16:	b299      	uxth	r1, r3
 8005e18:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	3301      	adds	r3, #1
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b07      	cmp	r3, #7
 8005e2a:	d9d6      	bls.n	8005dda <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b07      	cmp	r3, #7
 8005e36:	d9cd      	bls.n	8005dd4 <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	24009ea8 	.word	0x24009ea8
 8005e4c:	2400a128 	.word	0x2400a128
 8005e50:	2400a328 	.word	0x2400a328
 8005e54:	2400a5a8 	.word	0x2400a5a8
 8005e58:	2400a7a8 	.word	0x2400a7a8
 8005e5c:	2400aa28 	.word	0x2400aa28
 8005e60:	2400ac28 	.word	0x2400ac28
 8005e64:	2400a0a8 	.word	0x2400a0a8
 8005e68:	2400a528 	.word	0x2400a528
 8005e6c:	2400a9a8 	.word	0x2400a9a8
 8005e70:	2400ae28 	.word	0x2400ae28

08005e74 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
    vTaskDelete() API function (as this demo application does) then it is also
    important that vApplicationIdleHook() is permitted to return to its calling
    function, because it is the responsibility of the idle task to clean up
    memory allocated by the kernel to any task that has since been deleted. */

    vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8005e78:	4902      	ldr	r1, [pc, #8]	; (8005e84 <vApplicationIdleHook+0x10>)
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	f011 fc0c 	bl	8017698 <vTaskSetApplicationTaskTag>
}
 8005e80:	bf00      	nop
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	08000f49 	.word	0x08000f49

08005e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8005e8e:	f000 fcb1 	bl	80067f4 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005e92:	4b52      	ldr	r3, [pc, #328]	; (8005fdc <main+0x154>)
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11b      	bne.n	8005ed6 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e9e:	f3bf 8f4f 	dsb	sy
}
 8005ea2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ea4:	f3bf 8f6f 	isb	sy
}
 8005ea8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005eaa:	4b4c      	ldr	r3, [pc, #304]	; (8005fdc <main+0x154>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005eb2:	f3bf 8f4f 	dsb	sy
}
 8005eb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005eb8:	f3bf 8f6f 	isb	sy
}
 8005ebc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005ebe:	4b47      	ldr	r3, [pc, #284]	; (8005fdc <main+0x154>)
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	4a46      	ldr	r2, [pc, #280]	; (8005fdc <main+0x154>)
 8005ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005eca:	f3bf 8f4f 	dsb	sy
}
 8005ece:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ed0:	f3bf 8f6f 	isb	sy
}
 8005ed4:	e000      	b.n	8005ed8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005ed6:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005ed8:	4b40      	ldr	r3, [pc, #256]	; (8005fdc <main+0x154>)
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d138      	bne.n	8005f56 <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005ee4:	4b3d      	ldr	r3, [pc, #244]	; (8005fdc <main+0x154>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005eec:	f3bf 8f4f 	dsb	sy
}
 8005ef0:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8005ef2:	4b3a      	ldr	r3, [pc, #232]	; (8005fdc <main+0x154>)
 8005ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef8:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	0b5b      	lsrs	r3, r3, #13
 8005efe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005f02:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	08db      	lsrs	r3, r3, #3
 8005f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f0c:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005f16:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f1c:	492f      	ldr	r1, [pc, #188]	; (8005fdc <main+0x154>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	1e5a      	subs	r2, r3, #1
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1ef      	bne.n	8005f0e <main+0x86>
    } while(sets-- != 0U);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	60ba      	str	r2, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e5      	bne.n	8005f04 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8005f38:	f3bf 8f4f 	dsb	sy
}
 8005f3c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005f3e:	4b27      	ldr	r3, [pc, #156]	; (8005fdc <main+0x154>)
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <main+0x154>)
 8005f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f48:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f4a:	f3bf 8f4f 	dsb	sy
}
 8005f4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f50:	f3bf 8f6f 	isb	sy
}
 8005f54:	e000      	b.n	8005f58 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005f56:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f58:	f006 f86a 	bl	800c030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f5c:	f000 f858 	bl	8006010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f60:	f000 facc 	bl	80064fc <MX_GPIO_Init>
  MX_MDMA_Init();
 8005f64:	f000 fa58 	bl	8006418 <MX_MDMA_Init>
  MX_DMA2D_Init();
 8005f68:	f000 f8e8 	bl	800613c <MX_DMA2D_Init>
  MX_LTDC_Init();
 8005f6c:	f000 f974 	bl	8006258 <MX_LTDC_Init>
  MX_I2C4_Init();
 8005f70:	f000 f91e 	bl	80061b0 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8005f74:	f000 f9f2 	bl	800635c <MX_OCTOSPI1_Init>
  MX_FMC_Init();
 8005f78:	f000 fa6e 	bl	8006458 <MX_FMC_Init>
  MX_CRC_Init();
 8005f7c:	f000 f8bc 	bl	80060f8 <MX_CRC_Init>
  MX_JPEG_Init();
 8005f80:	f000 f956 	bl	8006230 <MX_JPEG_Init>
  MX_LIBJPEG_Init();
 8005f84:	f7fa fa2d 	bl	80003e2 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 8005f88:	f7fa fa39 	bl	80003fe <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8005f8c:	f7fa fa30 	bl	80003f0 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 8005f90:	4913      	ldr	r1, [pc, #76]	; (8005fe0 <main+0x158>)
 8005f92:	4814      	ldr	r0, [pc, #80]	; (8005fe4 <main+0x15c>)
 8005f94:	f000 fbc8 	bl	8006728 <SDRAM_Initialization_Sequence>
  
  *(__IO uint32_t*)(0xD0000000) = 0x11111122;
 8005f98:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8005f9c:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <main+0x160>)
 8005f9e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005fa0:	f00e fd84 	bl	8014aac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005fa4:	4a11      	ldr	r2, [pc, #68]	; (8005fec <main+0x164>)
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4811      	ldr	r0, [pc, #68]	; (8005ff0 <main+0x168>)
 8005faa:	f00e fdc9 	bl	8014b40 <osThreadNew>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	4a10      	ldr	r2, [pc, #64]	; (8005ff4 <main+0x16c>)
 8005fb2:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8005fb4:	4a10      	ldr	r2, [pc, #64]	; (8005ff8 <main+0x170>)
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4810      	ldr	r0, [pc, #64]	; (8005ffc <main+0x174>)
 8005fba:	f00e fdc1 	bl	8014b40 <osThreadNew>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4a0f      	ldr	r2, [pc, #60]	; (8006000 <main+0x178>)
 8005fc2:	6013      	str	r3, [r2, #0]

  /* creation of videoTask */
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8005fc4:	4a0f      	ldr	r2, [pc, #60]	; (8006004 <main+0x17c>)
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	480f      	ldr	r0, [pc, #60]	; (8006008 <main+0x180>)
 8005fca:	f00e fdb9 	bl	8014b40 <osThreadNew>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4a0e      	ldr	r2, [pc, #56]	; (800600c <main+0x184>)
 8005fd2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8005fd4:	f00e fd8e 	bl	8014af4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005fd8:	e7fe      	b.n	8005fd8 <main+0x150>
 8005fda:	bf00      	nop
 8005fdc:	e000ed00 	.word	0xe000ed00
 8005fe0:	2400b1fc 	.word	0x2400b1fc
 8005fe4:	2400b1bc 	.word	0x2400b1bc
 8005fe8:	11111122 	.word	0x11111122
 8005fec:	0802b784 	.word	0x0802b784
 8005ff0:	080067e5 	.word	0x080067e5
 8005ff4:	2400b1f0 	.word	0x2400b1f0
 8005ff8:	0802b7a8 	.word	0x0802b7a8
 8005ffc:	0800040f 	.word	0x0800040f
 8006000:	2400b1f4 	.word	0x2400b1f4
 8006004:	0802b7cc 	.word	0x0802b7cc
 8006008:	0800450d 	.word	0x0800450d
 800600c:	2400b1f8 	.word	0x2400b1f8

08006010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b09c      	sub	sp, #112	; 0x70
 8006014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800601a:	224c      	movs	r2, #76	; 0x4c
 800601c:	2100      	movs	r1, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f021 fdc4 	bl	8027bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	2220      	movs	r2, #32
 8006028:	2100      	movs	r1, #0
 800602a:	4618      	mov	r0, r3
 800602c:	f021 fdbe 	bl	8027bac <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8006030:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <SystemClock_Config+0xe0>)
 8006032:	f04f 32ff 	mov.w	r2, #4294967295
 8006036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800603a:	2004      	movs	r0, #4
 800603c:	f00b fd02 	bl	8011a44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006040:	2300      	movs	r3, #0
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <SystemClock_Config+0xe4>)
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <SystemClock_Config+0xe4>)
 800604a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800604e:	6193      	str	r3, [r2, #24]
 8006050:	4b28      	ldr	r3, [pc, #160]	; (80060f4 <SystemClock_Config+0xe4>)
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006058:	603b      	str	r3, [r7, #0]
 800605a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800605c:	bf00      	nop
 800605e:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <SystemClock_Config+0xe4>)
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800606a:	d1f8      	bne.n	800605e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800606c:	2301      	movs	r3, #1
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006070:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006076:	2302      	movs	r3, #2
 8006078:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800607a:	2302      	movs	r3, #2
 800607c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800607e:	230c      	movs	r3, #12
 8006080:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8006082:	f44f 738c 	mov.w	r3, #280	; 0x118
 8006086:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006088:	2302      	movs	r3, #2
 800608a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800608c:	2302      	movs	r3, #2
 800608e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006090:	2302      	movs	r3, #2
 8006092:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8006094:	2304      	movs	r3, #4
 8006096:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006098:	2300      	movs	r3, #0
 800609a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80060a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060a4:	4618      	mov	r0, r3
 80060a6:	f00b fd27 	bl	8011af8 <HAL_RCC_OscConfig>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80060b0:	f000 fc00 	bl	80068b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80060b4:	233f      	movs	r3, #63	; 0x3f
 80060b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060b8:	2303      	movs	r3, #3
 80060ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80060c0:	2308      	movs	r3, #8
 80060c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80060d0:	2300      	movs	r3, #0
 80060d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	2103      	movs	r1, #3
 80060d8:	4618      	mov	r0, r3
 80060da:	f00c f93f 	bl	801235c <HAL_RCC_ClockConfig>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80060e4:	f000 fbe6 	bl	80068b4 <Error_Handler>
  }
}
 80060e8:	bf00      	nop
 80060ea:	3770      	adds	r7, #112	; 0x70
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	58024400 	.word	0x58024400
 80060f4:	58024800 	.word	0x58024800

080060f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80060fc:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <MX_CRC_Init+0x3c>)
 80060fe:	4a0e      	ldr	r2, [pc, #56]	; (8006138 <MX_CRC_Init+0x40>)
 8006100:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <MX_CRC_Init+0x3c>)
 8006104:	2200      	movs	r2, #0
 8006106:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <MX_CRC_Init+0x3c>)
 800610a:	2200      	movs	r2, #0
 800610c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <MX_CRC_Init+0x3c>)
 8006110:	2200      	movs	r2, #0
 8006112:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <MX_CRC_Init+0x3c>)
 8006116:	2200      	movs	r2, #0
 8006118:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <MX_CRC_Init+0x3c>)
 800611c:	2201      	movs	r2, #1
 800611e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006120:	4804      	ldr	r0, [pc, #16]	; (8006134 <MX_CRC_Init+0x3c>)
 8006122:	f006 f993 	bl	800c44c <HAL_CRC_Init>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800612c:	f000 fbc2 	bl	80068b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8006130:	bf00      	nop
 8006132:	bd80      	pop	{r7, pc}
 8006134:	2400aea8 	.word	0x2400aea8
 8006138:	40023000 	.word	0x40023000

0800613c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8006140:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 8006142:	4a1a      	ldr	r2, [pc, #104]	; (80061ac <MX_DMA2D_Init+0x70>)
 8006144:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8006146:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 8006148:	2200      	movs	r2, #0
 800614a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800614c:	4b16      	ldr	r3, [pc, #88]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 800614e:	2202      	movs	r2, #2
 8006150:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8006152:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 8006154:	2200      	movs	r2, #0
 8006156:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 800615a:	2200      	movs	r2, #0
 800615c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800615e:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 8006160:	2202      	movs	r2, #2
 8006162:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006164:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 8006166:	2200      	movs	r2, #0
 8006168:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 800616c:	2200      	movs	r2, #0
 800616e:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8006170:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 8006172:	2200      	movs	r2, #0
 8006174:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 8006178:	2200      	movs	r2, #0
 800617a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 800617e:	2200      	movs	r2, #0
 8006180:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006182:	4809      	ldr	r0, [pc, #36]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 8006184:	f006 fa54 	bl	800c630 <HAL_DMA2D_Init>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800618e:	f000 fb91 	bl	80068b4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006192:	2101      	movs	r1, #1
 8006194:	4804      	ldr	r0, [pc, #16]	; (80061a8 <MX_DMA2D_Init+0x6c>)
 8006196:	f006 fbbf 	bl	800c918 <HAL_DMA2D_ConfigLayer>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80061a0:	f000 fb88 	bl	80068b4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80061a4:	bf00      	nop
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	2400aecc 	.word	0x2400aecc
 80061ac:	52001000 	.word	0x52001000

080061b0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80061b4:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <MX_I2C4_Init+0x74>)
 80061b6:	4a1c      	ldr	r2, [pc, #112]	; (8006228 <MX_I2C4_Init+0x78>)
 80061b8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 80061ba:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <MX_I2C4_Init+0x74>)
 80061bc:	4a1b      	ldr	r2, [pc, #108]	; (800622c <MX_I2C4_Init+0x7c>)
 80061be:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80061c0:	4b18      	ldr	r3, [pc, #96]	; (8006224 <MX_I2C4_Init+0x74>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80061c6:	4b17      	ldr	r3, [pc, #92]	; (8006224 <MX_I2C4_Init+0x74>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061cc:	4b15      	ldr	r3, [pc, #84]	; (8006224 <MX_I2C4_Init+0x74>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <MX_I2C4_Init+0x74>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80061d8:	4b12      	ldr	r3, [pc, #72]	; (8006224 <MX_I2C4_Init+0x74>)
 80061da:	2200      	movs	r2, #0
 80061dc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061de:	4b11      	ldr	r3, [pc, #68]	; (8006224 <MX_I2C4_Init+0x74>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <MX_I2C4_Init+0x74>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80061ea:	480e      	ldr	r0, [pc, #56]	; (8006224 <MX_I2C4_Init+0x74>)
 80061ec:	f006 ff6c 	bl	800d0c8 <HAL_I2C_Init>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80061f6:	f000 fb5d 	bl	80068b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80061fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061fe:	4809      	ldr	r0, [pc, #36]	; (8006224 <MX_I2C4_Init+0x74>)
 8006200:	f007 fd22 	bl	800dc48 <HAL_I2CEx_ConfigAnalogFilter>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 800620a:	f000 fb53 	bl	80068b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800620e:	2100      	movs	r1, #0
 8006210:	4804      	ldr	r0, [pc, #16]	; (8006224 <MX_I2C4_Init+0x74>)
 8006212:	f007 fd64 	bl	800dcde <HAL_I2CEx_ConfigDigitalFilter>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 800621c:	f000 fb4a 	bl	80068b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8006220:	bf00      	nop
 8006222:	bd80      	pop	{r7, pc}
 8006224:	2400af34 	.word	0x2400af34
 8006228:	58001c00 	.word	0x58001c00
 800622c:	30808bd0 	.word	0x30808bd0

08006230 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8006234:	4b06      	ldr	r3, [pc, #24]	; (8006250 <MX_JPEG_Init+0x20>)
 8006236:	4a07      	ldr	r2, [pc, #28]	; (8006254 <MX_JPEG_Init+0x24>)
 8006238:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800623a:	4805      	ldr	r0, [pc, #20]	; (8006250 <MX_JPEG_Init+0x20>)
 800623c:	f007 fd9c 	bl	800dd78 <HAL_JPEG_Init>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8006246:	f000 fb35 	bl	80068b4 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800624a:	bf00      	nop
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	2400af88 	.word	0x2400af88
 8006254:	52003000 	.word	0x52003000

08006258 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08e      	sub	sp, #56	; 0x38
 800625c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800625e:	1d3b      	adds	r3, r7, #4
 8006260:	2234      	movs	r2, #52	; 0x34
 8006262:	2100      	movs	r1, #0
 8006264:	4618      	mov	r0, r3
 8006266:	f021 fca1 	bl	8027bac <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800626a:	4b3a      	ldr	r3, [pc, #232]	; (8006354 <MX_LTDC_Init+0xfc>)
 800626c:	4a3a      	ldr	r2, [pc, #232]	; (8006358 <MX_LTDC_Init+0x100>)
 800626e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006270:	4b38      	ldr	r3, [pc, #224]	; (8006354 <MX_LTDC_Init+0xfc>)
 8006272:	2200      	movs	r2, #0
 8006274:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006276:	4b37      	ldr	r3, [pc, #220]	; (8006354 <MX_LTDC_Init+0xfc>)
 8006278:	2200      	movs	r2, #0
 800627a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800627c:	4b35      	ldr	r3, [pc, #212]	; (8006354 <MX_LTDC_Init+0xfc>)
 800627e:	2200      	movs	r2, #0
 8006280:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006282:	4b34      	ldr	r3, [pc, #208]	; (8006354 <MX_LTDC_Init+0xfc>)
 8006284:	2200      	movs	r2, #0
 8006286:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8006288:	4b32      	ldr	r3, [pc, #200]	; (8006354 <MX_LTDC_Init+0xfc>)
 800628a:	2228      	movs	r2, #40	; 0x28
 800628c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800628e:	4b31      	ldr	r3, [pc, #196]	; (8006354 <MX_LTDC_Init+0xfc>)
 8006290:	2209      	movs	r2, #9
 8006292:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8006294:	4b2f      	ldr	r3, [pc, #188]	; (8006354 <MX_LTDC_Init+0xfc>)
 8006296:	222a      	movs	r2, #42	; 0x2a
 8006298:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800629a:	4b2e      	ldr	r3, [pc, #184]	; (8006354 <MX_LTDC_Init+0xfc>)
 800629c:	220b      	movs	r2, #11
 800629e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80062a0:	4b2c      	ldr	r3, [pc, #176]	; (8006354 <MX_LTDC_Init+0xfc>)
 80062a2:	f240 220a 	movw	r2, #522	; 0x20a
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80062a8:	4b2a      	ldr	r3, [pc, #168]	; (8006354 <MX_LTDC_Init+0xfc>)
 80062aa:	f240 121b 	movw	r2, #283	; 0x11b
 80062ae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 80062b0:	4b28      	ldr	r3, [pc, #160]	; (8006354 <MX_LTDC_Init+0xfc>)
 80062b2:	f240 222a 	movw	r2, #554	; 0x22a
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80062b8:	4b26      	ldr	r3, [pc, #152]	; (8006354 <MX_LTDC_Init+0xfc>)
 80062ba:	f240 121d 	movw	r2, #285	; 0x11d
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80062c0:	4b24      	ldr	r3, [pc, #144]	; (8006354 <MX_LTDC_Init+0xfc>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80062c8:	4b22      	ldr	r3, [pc, #136]	; (8006354 <MX_LTDC_Init+0xfc>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80062d0:	4b20      	ldr	r3, [pc, #128]	; (8006354 <MX_LTDC_Init+0xfc>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80062d8:	481e      	ldr	r0, [pc, #120]	; (8006354 <MX_LTDC_Init+0xfc>)
 80062da:	f009 fcbd 	bl	800fc58 <HAL_LTDC_Init>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80062e4:	f000 fae6 	bl	80068b4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80062ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80062f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80062f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062fa:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80062fc:	2301      	movs	r3, #1
 80062fe:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8006300:	23ff      	movs	r3, #255	; 0xff
 8006302:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800630c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800630e:	2305      	movs	r3, #5
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8006312:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8006318:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800631e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006322:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8006324:	23ff      	movs	r3, #255	; 0xff
 8006326:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006336:	1d3b      	adds	r3, r7, #4
 8006338:	2200      	movs	r2, #0
 800633a:	4619      	mov	r1, r3
 800633c:	4805      	ldr	r0, [pc, #20]	; (8006354 <MX_LTDC_Init+0xfc>)
 800633e:	f009 fe13 	bl	800ff68 <HAL_LTDC_ConfigLayer>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8006348:	f000 fab4 	bl	80068b4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800634c:	bf00      	nop
 800634e:	3738      	adds	r7, #56	; 0x38
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	2400b0b8 	.word	0x2400b0b8
 8006358:	50001000 	.word	0x50001000

0800635c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8006362:	4b2b      	ldr	r3, [pc, #172]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 8006364:	4a2b      	ldr	r2, [pc, #172]	; (8006414 <MX_OCTOSPI1_Init+0xb8>)
 8006366:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8006368:	4b29      	ldr	r3, [pc, #164]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 800636a:	2201      	movs	r2, #1
 800636c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800636e:	4b28      	ldr	r3, [pc, #160]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 8006370:	2200      	movs	r2, #0
 8006372:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8006374:	4b26      	ldr	r3, [pc, #152]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 8006376:	2200      	movs	r2, #0
 8006378:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 800637a:	4b25      	ldr	r3, [pc, #148]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 800637c:	221a      	movs	r2, #26
 800637e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8006380:	4b23      	ldr	r3, [pc, #140]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 8006382:	2202      	movs	r2, #2
 8006384:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8006386:	4b22      	ldr	r3, [pc, #136]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 8006388:	2200      	movs	r2, #0
 800638a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800638c:	4b20      	ldr	r3, [pc, #128]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 800638e:	2200      	movs	r2, #0
 8006390:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8006392:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 8006394:	2200      	movs	r2, #0
 8006396:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8006398:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 800639a:	2203      	movs	r2, #3
 800639c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800639e:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80063a4:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80063aa:	4b19      	ldr	r3, [pc, #100]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80063b0:	4b17      	ldr	r3, [pc, #92]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 80063b2:	2208      	movs	r2, #8
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 80063b6:	4b16      	ldr	r3, [pc, #88]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 80063bc:	4b14      	ldr	r3, [pc, #80]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 80063be:	2200      	movs	r2, #0
 80063c0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80063c2:	4813      	ldr	r0, [pc, #76]	; (8006410 <MX_OCTOSPI1_Init+0xb4>)
 80063c4:	f00a fbde 	bl	8010b84 <HAL_OSPI_Init>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 80063ce:	f000 fa71 	bl	80068b4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 80063d6:	2301      	movs	r3, #1
 80063d8:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 80063da:	2000      	movs	r0, #0
 80063dc:	f004 fdb4 	bl	800af48 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 80063e0:	463b      	mov	r3, r7
 80063e2:	4619      	mov	r1, r3
 80063e4:	2000      	movs	r0, #0
 80063e6:	f004 fd25 	bl	800ae34 <BSP_OSPI_NOR_Init>
 80063ea:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80063f2:	f000 fa5f 	bl	80068b4 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 80063f6:	2000      	movs	r0, #0
 80063f8:	f004 fe42 	bl	800b080 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 80063fc:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 8006404:	f000 fa56 	bl	80068b4 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	2400b160 	.word	0x2400b160
 8006414:	52005000 	.word	0x52005000

08006418 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800641e:	4b0d      	ldr	r3, [pc, #52]	; (8006454 <MX_MDMA_Init+0x3c>)
 8006420:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006424:	4a0b      	ldr	r2, [pc, #44]	; (8006454 <MX_MDMA_Init+0x3c>)
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <MX_MDMA_Init+0x3c>)
 8006430:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	607b      	str	r3, [r7, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 800643c:	2200      	movs	r2, #0
 800643e:	2105      	movs	r1, #5
 8006440:	207a      	movs	r0, #122	; 0x7a
 8006442:	f005 ff51 	bl	800c2e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8006446:	207a      	movs	r0, #122	; 0x7a
 8006448:	f005 ff68 	bl	800c31c <HAL_NVIC_EnableIRQ>

}
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	58024400 	.word	0x58024400

08006458 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	609a      	str	r2, [r3, #8]
 8006468:	60da      	str	r2, [r3, #12]
 800646a:	611a      	str	r2, [r3, #16]
 800646c:	615a      	str	r2, [r3, #20]
 800646e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006470:	4b20      	ldr	r3, [pc, #128]	; (80064f4 <MX_FMC_Init+0x9c>)
 8006472:	4a21      	ldr	r2, [pc, #132]	; (80064f8 <MX_FMC_Init+0xa0>)
 8006474:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006476:	4b1f      	ldr	r3, [pc, #124]	; (80064f4 <MX_FMC_Init+0x9c>)
 8006478:	2201      	movs	r2, #1
 800647a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800647c:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <MX_FMC_Init+0x9c>)
 800647e:	2201      	movs	r2, #1
 8006480:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006482:	4b1c      	ldr	r3, [pc, #112]	; (80064f4 <MX_FMC_Init+0x9c>)
 8006484:	2204      	movs	r2, #4
 8006486:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006488:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <MX_FMC_Init+0x9c>)
 800648a:	2210      	movs	r2, #16
 800648c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800648e:	4b19      	ldr	r3, [pc, #100]	; (80064f4 <MX_FMC_Init+0x9c>)
 8006490:	2240      	movs	r2, #64	; 0x40
 8006492:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8006494:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <MX_FMC_Init+0x9c>)
 8006496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800649a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800649c:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <MX_FMC_Init+0x9c>)
 800649e:	2200      	movs	r2, #0
 80064a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80064a2:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <MX_FMC_Init+0x9c>)
 80064a4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80064a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <MX_FMC_Init+0x9c>)
 80064ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 80064b2:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <MX_FMC_Init+0x9c>)
 80064b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064b8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80064ba:	2302      	movs	r3, #2
 80064bc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80064be:	2307      	movs	r3, #7
 80064c0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80064c2:	2304      	movs	r3, #4
 80064c4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80064c6:	2307      	movs	r3, #7
 80064c8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80064ca:	2303      	movs	r3, #3
 80064cc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80064ce:	2302      	movs	r3, #2
 80064d0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80064d2:	2302      	movs	r3, #2
 80064d4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80064d6:	1d3b      	adds	r3, r7, #4
 80064d8:	4619      	mov	r1, r3
 80064da:	4806      	ldr	r0, [pc, #24]	; (80064f4 <MX_FMC_Init+0x9c>)
 80064dc:	f00d fe2e 	bl	801413c <HAL_SDRAM_Init>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80064e6:	f000 f9e5 	bl	80068b4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80064ea:	bf00      	nop
 80064ec:	3720      	adds	r7, #32
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	2400b1bc 	.word	0x2400b1bc
 80064f8:	52004140 	.word	0x52004140

080064fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08e      	sub	sp, #56	; 0x38
 8006500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	605a      	str	r2, [r3, #4]
 800650c:	609a      	str	r2, [r3, #8]
 800650e:	60da      	str	r2, [r3, #12]
 8006510:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006512:	4b80      	ldr	r3, [pc, #512]	; (8006714 <MX_GPIO_Init+0x218>)
 8006514:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006518:	4a7e      	ldr	r2, [pc, #504]	; (8006714 <MX_GPIO_Init+0x218>)
 800651a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006522:	4b7c      	ldr	r3, [pc, #496]	; (8006714 <MX_GPIO_Init+0x218>)
 8006524:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	623b      	str	r3, [r7, #32]
 800652e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006530:	4b78      	ldr	r3, [pc, #480]	; (8006714 <MX_GPIO_Init+0x218>)
 8006532:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006536:	4a77      	ldr	r2, [pc, #476]	; (8006714 <MX_GPIO_Init+0x218>)
 8006538:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800653c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006540:	4b74      	ldr	r3, [pc, #464]	; (8006714 <MX_GPIO_Init+0x218>)
 8006542:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800654a:	61fb      	str	r3, [r7, #28]
 800654c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800654e:	4b71      	ldr	r3, [pc, #452]	; (8006714 <MX_GPIO_Init+0x218>)
 8006550:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006554:	4a6f      	ldr	r2, [pc, #444]	; (8006714 <MX_GPIO_Init+0x218>)
 8006556:	f043 0308 	orr.w	r3, r3, #8
 800655a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800655e:	4b6d      	ldr	r3, [pc, #436]	; (8006714 <MX_GPIO_Init+0x218>)
 8006560:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800656c:	4b69      	ldr	r3, [pc, #420]	; (8006714 <MX_GPIO_Init+0x218>)
 800656e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006572:	4a68      	ldr	r2, [pc, #416]	; (8006714 <MX_GPIO_Init+0x218>)
 8006574:	f043 0310 	orr.w	r3, r3, #16
 8006578:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800657c:	4b65      	ldr	r3, [pc, #404]	; (8006714 <MX_GPIO_Init+0x218>)
 800657e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800658a:	4b62      	ldr	r3, [pc, #392]	; (8006714 <MX_GPIO_Init+0x218>)
 800658c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006590:	4a60      	ldr	r2, [pc, #384]	; (8006714 <MX_GPIO_Init+0x218>)
 8006592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006596:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800659a:	4b5e      	ldr	r3, [pc, #376]	; (8006714 <MX_GPIO_Init+0x218>)
 800659c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80065a8:	4b5a      	ldr	r3, [pc, #360]	; (8006714 <MX_GPIO_Init+0x218>)
 80065aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065ae:	4a59      	ldr	r2, [pc, #356]	; (8006714 <MX_GPIO_Init+0x218>)
 80065b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065b8:	4b56      	ldr	r3, [pc, #344]	; (8006714 <MX_GPIO_Init+0x218>)
 80065ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80065c6:	4b53      	ldr	r3, [pc, #332]	; (8006714 <MX_GPIO_Init+0x218>)
 80065c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065cc:	4a51      	ldr	r2, [pc, #324]	; (8006714 <MX_GPIO_Init+0x218>)
 80065ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065d6:	4b4f      	ldr	r3, [pc, #316]	; (8006714 <MX_GPIO_Init+0x218>)
 80065d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80065e4:	4b4b      	ldr	r3, [pc, #300]	; (8006714 <MX_GPIO_Init+0x218>)
 80065e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065ea:	4a4a      	ldr	r2, [pc, #296]	; (8006714 <MX_GPIO_Init+0x218>)
 80065ec:	f043 0320 	orr.w	r3, r3, #32
 80065f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80065f4:	4b47      	ldr	r3, [pc, #284]	; (8006714 <MX_GPIO_Init+0x218>)
 80065f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	607b      	str	r3, [r7, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006602:	4b44      	ldr	r3, [pc, #272]	; (8006714 <MX_GPIO_Init+0x218>)
 8006604:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006608:	4a42      	ldr	r2, [pc, #264]	; (8006714 <MX_GPIO_Init+0x218>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006612:	4b40      	ldr	r3, [pc, #256]	; (8006714 <MX_GPIO_Init+0x218>)
 8006614:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 8006620:	2201      	movs	r2, #1
 8006622:	f640 0104 	movw	r1, #2052	; 0x804
 8006626:	483c      	ldr	r0, [pc, #240]	; (8006718 <MX_GPIO_Init+0x21c>)
 8006628:	f006 fcf6 	bl	800d018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800662c:	2200      	movs	r2, #0
 800662e:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8006632:	483a      	ldr	r0, [pc, #232]	; (800671c <MX_GPIO_Init+0x220>)
 8006634:	f006 fcf0 	bl	800d018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8006638:	2200      	movs	r2, #0
 800663a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800663e:	4838      	ldr	r0, [pc, #224]	; (8006720 <MX_GPIO_Init+0x224>)
 8006640:	f006 fcea 	bl	800d018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8006644:	2200      	movs	r2, #0
 8006646:	2106      	movs	r1, #6
 8006648:	4836      	ldr	r0, [pc, #216]	; (8006724 <MX_GPIO_Init+0x228>)
 800664a:	f006 fce5 	bl	800d018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800664e:	f640 0304 	movw	r3, #2052	; 0x804
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006654:	2301      	movs	r3, #1
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006658:	2300      	movs	r3, #0
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800665c:	2300      	movs	r3, #0
 800665e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006664:	4619      	mov	r1, r3
 8006666:	482c      	ldr	r0, [pc, #176]	; (8006718 <MX_GPIO_Init+0x21c>)
 8006668:	f006 fa04 	bl	800ca74 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 800666c:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006672:	2301      	movs	r3, #1
 8006674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006676:	2300      	movs	r3, #0
 8006678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800667a:	2303      	movs	r3, #3
 800667c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800667e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006682:	4619      	mov	r1, r3
 8006684:	4825      	ldr	r0, [pc, #148]	; (800671c <MX_GPIO_Init+0x220>)
 8006686:	f006 f9f5 	bl	800ca74 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 800668a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006690:	2301      	movs	r3, #1
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006694:	2300      	movs	r3, #0
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006698:	2303      	movs	r3, #3
 800669a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 800669c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a0:	4619      	mov	r1, r3
 80066a2:	481f      	ldr	r0, [pc, #124]	; (8006720 <MX_GPIO_Init+0x224>)
 80066a4:	f006 f9e6 	bl	800ca74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80066a8:	2304      	movs	r3, #4
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066b2:	2301      	movs	r3, #1
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80066b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ba:	4619      	mov	r1, r3
 80066bc:	4817      	ldr	r0, [pc, #92]	; (800671c <MX_GPIO_Init+0x220>)
 80066be:	f006 f9d9 	bl	800ca74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80066c2:	2302      	movs	r3, #2
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066c6:	2301      	movs	r3, #1
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ce:	2300      	movs	r3, #0
 80066d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80066d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d6:	4619      	mov	r1, r3
 80066d8:	4812      	ldr	r0, [pc, #72]	; (8006724 <MX_GPIO_Init+0x228>)
 80066da:	f006 f9cb 	bl	800ca74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 80066de:	2304      	movs	r3, #4
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066e2:	2301      	movs	r3, #1
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066e6:	2301      	movs	r3, #1
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ea:	2300      	movs	r3, #0
 80066ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 80066ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f2:	4619      	mov	r1, r3
 80066f4:	480b      	ldr	r0, [pc, #44]	; (8006724 <MX_GPIO_Init+0x228>)
 80066f6:	f006 f9bd 	bl	800ca74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80066fa:	2200      	movs	r2, #0
 80066fc:	2105      	movs	r1, #5
 80066fe:	2008      	movs	r0, #8
 8006700:	f005 fdf2 	bl	800c2e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006704:	2008      	movs	r0, #8
 8006706:	f005 fe09 	bl	800c31c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800670a:	bf00      	nop
 800670c:	3738      	adds	r7, #56	; 0x38
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	58024400 	.word	0x58024400
 8006718:	58021800 	.word	0x58021800
 800671c:	58021c00 	.word	0x58021c00
 8006720:	58022000 	.word	0x58022000
 8006724:	58020000 	.word	0x58020000

08006728 <SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2201      	movs	r2, #1
 800673a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2208      	movs	r2, #8
 8006740:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2200      	movs	r2, #0
 800674c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800674e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f00d fd2d 	bl	80141b4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800675a:	2001      	movs	r0, #1
 800675c:	f005 fcc4 	bl	800c0e8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2202      	movs	r2, #2
 8006764:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2208      	movs	r2, #8
 800676a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2201      	movs	r2, #1
 8006770:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f00d fd18 	bl	80141b4 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2203      	movs	r2, #3
 8006788:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2208      	movs	r2, #8
 800678e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2208      	movs	r2, #8
 8006794:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2200      	movs	r2, #0
 800679a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800679c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f00d fd06 	bl	80141b4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80067a8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80067ac:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2204      	movs	r2, #4
 80067b2:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2208      	movs	r2, #8
 80067b8:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2201      	movs	r2, #1
 80067be:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80067c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f00d fcf1 	bl	80141b4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT); 
 80067d2:	f240 6103 	movw	r1, #1539	; 0x603
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f00d fd21 	bl	801421e <HAL_SDRAM_ProgramRefreshRate>

}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80067ec:	2064      	movs	r0, #100	; 0x64
 80067ee:	f00e fa39 	bl	8014c64 <osDelay>
 80067f2:	e7fb      	b.n	80067ec <StartDefaultTask+0x8>

080067f4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80067fa:	463b      	mov	r3, r7
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	605a      	str	r2, [r3, #4]
 8006802:	609a      	str	r2, [r3, #8]
 8006804:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8006806:	f005 fda5 	bl	800c354 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800680a:	2301      	movs	r3, #1
 800680c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800680e:	2300      	movs	r3, #0
 8006810:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8006812:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8006816:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8006818:	231b      	movs	r3, #27
 800681a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800681c:	2300      	movs	r3, #0
 800681e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8006820:	2300      	movs	r3, #0
 8006822:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8006824:	2300      	movs	r3, #0
 8006826:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8006828:	2301      	movs	r3, #1
 800682a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800682c:	2300      	movs	r3, #0
 800682e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8006830:	2300      	movs	r3, #0
 8006832:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006838:	463b      	mov	r3, r7
 800683a:	4618      	mov	r0, r3
 800683c:	f005 fdc2 	bl	800c3c4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8006840:	2301      	movs	r3, #1
 8006842:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8006844:	2319      	movs	r3, #25
 8006846:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8006848:	2303      	movs	r3, #3
 800684a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800684c:	2301      	movs	r3, #1
 800684e:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006850:	463b      	mov	r3, r7
 8006852:	4618      	mov	r0, r3
 8006854:	f005 fdb6 	bl	800c3c4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8006858:	2302      	movs	r3, #2
 800685a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800685c:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8006860:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8006862:	2313      	movs	r3, #19
 8006864:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006866:	463b      	mov	r3, r7
 8006868:	4618      	mov	r0, r3
 800686a:	f005 fdab 	bl	800c3c4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800686e:	2303      	movs	r3, #3
 8006870:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8006872:	2311      	movs	r3, #17
 8006874:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8006876:	2301      	movs	r3, #1
 8006878:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800687a:	463b      	mov	r3, r7
 800687c:	4618      	mov	r0, r3
 800687e:	f005 fda1 	bl	800c3c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8006882:	2004      	movs	r0, #4
 8006884:	f005 fd7e 	bl	800c384 <HAL_MPU_Enable>

}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a04      	ldr	r2, [pc, #16]	; (80068b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d101      	bne.n	80068a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80068a2:	f005 fc01 	bl	800c0a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40001000 	.word	0x40001000

080068b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
	...

080068c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068ca:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <HAL_MspInit+0x38>)
 80068cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80068d0:	4a0a      	ldr	r2, [pc, #40]	; (80068fc <HAL_MspInit+0x38>)
 80068d2:	f043 0302 	orr.w	r3, r3, #2
 80068d6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80068da:	4b08      	ldr	r3, [pc, #32]	; (80068fc <HAL_MspInit+0x38>)
 80068dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	607b      	str	r3, [r7, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80068e8:	2200      	movs	r2, #0
 80068ea:	210f      	movs	r1, #15
 80068ec:	f06f 0001 	mvn.w	r0, #1
 80068f0:	f005 fcfa 	bl	800c2e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	58024400 	.word	0x58024400

08006900 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a0b      	ldr	r2, [pc, #44]	; (800693c <HAL_CRC_MspInit+0x3c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d10e      	bne.n	8006930 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006912:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <HAL_CRC_MspInit+0x40>)
 8006914:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <HAL_CRC_MspInit+0x40>)
 800691a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800691e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8006922:	4b07      	ldr	r3, [pc, #28]	; (8006940 <HAL_CRC_MspInit+0x40>)
 8006924:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006930:	bf00      	nop
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	40023000 	.word	0x40023000
 8006940:	58024400 	.word	0x58024400

08006944 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a0e      	ldr	r2, [pc, #56]	; (800698c <HAL_DMA2D_MspInit+0x48>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d116      	bne.n	8006984 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006956:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <HAL_DMA2D_MspInit+0x4c>)
 8006958:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800695c:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <HAL_DMA2D_MspInit+0x4c>)
 800695e:	f043 0310 	orr.w	r3, r3, #16
 8006962:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006966:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <HAL_DMA2D_MspInit+0x4c>)
 8006968:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800696c:	f003 0310 	and.w	r3, r3, #16
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8006974:	2200      	movs	r2, #0
 8006976:	2105      	movs	r1, #5
 8006978:	205a      	movs	r0, #90	; 0x5a
 800697a:	f005 fcb5 	bl	800c2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800697e:	205a      	movs	r0, #90	; 0x5a
 8006980:	f005 fccc 	bl	800c31c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	52001000 	.word	0x52001000
 8006990:	58024400 	.word	0x58024400

08006994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b0ba      	sub	sp, #232	; 0xe8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800699c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	605a      	str	r2, [r3, #4]
 80069a6:	609a      	str	r2, [r3, #8]
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80069ac:	f107 0310 	add.w	r3, r7, #16
 80069b0:	22c0      	movs	r2, #192	; 0xc0
 80069b2:	2100      	movs	r1, #0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f021 f8f9 	bl	8027bac <memset>
  if(hi2c->Instance==I2C4)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a27      	ldr	r2, [pc, #156]	; (8006a5c <HAL_I2C_MspInit+0xc8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d146      	bne.n	8006a52 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80069c4:	f04f 0210 	mov.w	r2, #16
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80069d0:	2300      	movs	r3, #0
 80069d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069d6:	f107 0310 	add.w	r3, r7, #16
 80069da:	4618      	mov	r0, r3
 80069dc:	f00c f88c 	bl	8012af8 <HAL_RCCEx_PeriphCLKConfig>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80069e6:	f7ff ff65 	bl	80068b4 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <HAL_I2C_MspInit+0xcc>)
 80069ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80069f0:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <HAL_I2C_MspInit+0xcc>)
 80069f2:	f043 0308 	orr.w	r3, r3, #8
 80069f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80069fa:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <HAL_I2C_MspInit+0xcc>)
 80069fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8006a08:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a10:	2312      	movs	r3, #18
 8006a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006a22:	2304      	movs	r3, #4
 8006a24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	480d      	ldr	r0, [pc, #52]	; (8006a64 <HAL_I2C_MspInit+0xd0>)
 8006a30:	f006 f820 	bl	800ca74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006a34:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <HAL_I2C_MspInit+0xcc>)
 8006a36:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006a3a:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <HAL_I2C_MspInit+0xcc>)
 8006a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a40:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006a44:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <HAL_I2C_MspInit+0xcc>)
 8006a46:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4e:	60bb      	str	r3, [r7, #8]
 8006a50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006a52:	bf00      	nop
 8006a54:	37e8      	adds	r7, #232	; 0xe8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	58001c00 	.word	0x58001c00
 8006a60:	58024400 	.word	0x58024400
 8006a64:	58020c00 	.word	0x58020c00

08006a68 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a0c      	ldr	r2, [pc, #48]	; (8006aa8 <HAL_I2C_MspDeInit+0x40>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d111      	bne.n	8006a9e <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8006a7a:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <HAL_I2C_MspDeInit+0x44>)
 8006a7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <HAL_I2C_MspDeInit+0x44>)
 8006a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a86:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8006a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a8e:	4808      	ldr	r0, [pc, #32]	; (8006ab0 <HAL_I2C_MspDeInit+0x48>)
 8006a90:	f006 f9a0 	bl	800cdd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8006a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a98:	4805      	ldr	r0, [pc, #20]	; (8006ab0 <HAL_I2C_MspDeInit+0x48>)
 8006a9a:	f006 f99b 	bl	800cdd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8006a9e:	bf00      	nop
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	58001c00 	.word	0x58001c00
 8006aac:	58024400 	.word	0x58024400
 8006ab0:	58020c00 	.word	0x58020c00

08006ab4 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a57      	ldr	r2, [pc, #348]	; (8006c20 <HAL_JPEG_MspInit+0x16c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	f040 80a7 	bne.w	8006c16 <HAL_JPEG_MspInit+0x162>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8006ac8:	4b56      	ldr	r3, [pc, #344]	; (8006c24 <HAL_JPEG_MspInit+0x170>)
 8006aca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006ace:	4a55      	ldr	r2, [pc, #340]	; (8006c24 <HAL_JPEG_MspInit+0x170>)
 8006ad0:	f043 0320 	orr.w	r3, r3, #32
 8006ad4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006ad8:	4b52      	ldr	r3, [pc, #328]	; (8006c24 <HAL_JPEG_MspInit+0x170>)
 8006ada:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8006ae6:	4b50      	ldr	r3, [pc, #320]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006ae8:	4a50      	ldr	r2, [pc, #320]	; (8006c2c <HAL_JPEG_MspInit+0x178>)
 8006aea:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8006aec:	4b4e      	ldr	r3, [pc, #312]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006aee:	2211      	movs	r2, #17
 8006af0:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8006af2:	4b4d      	ldr	r3, [pc, #308]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8006af8:	4b4b      	ldr	r3, [pc, #300]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006afa:	2280      	movs	r2, #128	; 0x80
 8006afc:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006afe:	4b4a      	ldr	r3, [pc, #296]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8006b04:	4b48      	ldr	r3, [pc, #288]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b06:	2202      	movs	r2, #2
 8006b08:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8006b0a:	4b47      	ldr	r3, [pc, #284]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8006b10:	4b45      	ldr	r3, [pc, #276]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8006b16:	4b44      	ldr	r3, [pc, #272]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b18:	2280      	movs	r2, #128	; 0x80
 8006b1a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8006b1c:	4b42      	ldr	r3, [pc, #264]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8006b24:	4b40      	ldr	r3, [pc, #256]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b26:	2220      	movs	r2, #32
 8006b28:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 8006b2a:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b2c:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8006b30:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8006b32:	4b3d      	ldr	r3, [pc, #244]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b38:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8006b3a:	4b3b      	ldr	r3, [pc, #236]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8006b40:	4b39      	ldr	r3, [pc, #228]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8006b46:	4838      	ldr	r0, [pc, #224]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b48:	f009 fc1e 	bl	8010388 <HAL_MDMA_Init>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_JPEG_MspInit+0xa2>
    {
      Error_Handler();
 8006b52:	f7ff feaf 	bl	80068b4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8006b56:	2200      	movs	r2, #0
 8006b58:	2100      	movs	r1, #0
 8006b5a:	4833      	ldr	r0, [pc, #204]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b5c:	f009 fc60 	bl	8010420 <HAL_MDMA_ConfigPostRequestMask>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <HAL_JPEG_MspInit+0xb6>
    {
      Error_Handler();
 8006b66:	f7ff fea5 	bl	80068b4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a2e      	ldr	r2, [pc, #184]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b70:	4a2d      	ldr	r2, [pc, #180]	; (8006c28 <HAL_JPEG_MspInit+0x174>)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 8006b76:	4b2e      	ldr	r3, [pc, #184]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006b78:	4a2e      	ldr	r2, [pc, #184]	; (8006c34 <HAL_JPEG_MspInit+0x180>)
 8006b7a:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8006b7c:	4b2c      	ldr	r3, [pc, #176]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006b7e:	2213      	movs	r2, #19
 8006b80:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8006b82:	4b2b      	ldr	r3, [pc, #172]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8006b88:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006b8a:	22c0      	movs	r2, #192	; 0xc0
 8006b8c:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006b8e:	4b28      	ldr	r3, [pc, #160]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8006b94:	4b26      	ldr	r3, [pc, #152]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8006b9a:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8006ba0:	4b23      	ldr	r3, [pc, #140]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8006ba6:	4b22      	ldr	r3, [pc, #136]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8006bac:	4b20      	ldr	r3, [pc, #128]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006bae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8006bb4:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 8006bba:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006bbc:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8006bc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006bc4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
 8006bca:	4b19      	ldr	r3, [pc, #100]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8006bd0:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8006bd6:	4816      	ldr	r0, [pc, #88]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006bd8:	f009 fbd6 	bl	8010388 <HAL_MDMA_Init>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <HAL_JPEG_MspInit+0x132>
    {
      Error_Handler();
 8006be2:	f7ff fe67 	bl	80068b4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8006be6:	2200      	movs	r2, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	4811      	ldr	r0, [pc, #68]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006bec:	f009 fc18 	bl	8010420 <HAL_MDMA_ConfigPostRequestMask>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_JPEG_MspInit+0x146>
    {
      Error_Handler();
 8006bf6:	f7ff fe5d 	bl	80068b4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006bfe:	635a      	str	r2, [r3, #52]	; 0x34
 8006c00:	4a0b      	ldr	r2, [pc, #44]	; (8006c30 <HAL_JPEG_MspInit+0x17c>)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8006c06:	2200      	movs	r2, #0
 8006c08:	2105      	movs	r1, #5
 8006c0a:	2079      	movs	r0, #121	; 0x79
 8006c0c:	f005 fb6c 	bl	800c2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8006c10:	2079      	movs	r0, #121	; 0x79
 8006c12:	f005 fb83 	bl	800c31c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8006c16:	bf00      	nop
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	52003000 	.word	0x52003000
 8006c24:	58024400 	.word	0x58024400
 8006c28:	2400afe0 	.word	0x2400afe0
 8006c2c:	52000200 	.word	0x52000200
 8006c30:	2400b04c 	.word	0x2400b04c
 8006c34:	520001c0 	.word	0x520001c0

08006c38 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b0bc      	sub	sp, #240	; 0xf0
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	609a      	str	r2, [r3, #8]
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c50:	f107 0318 	add.w	r3, r7, #24
 8006c54:	22c0      	movs	r2, #192	; 0xc0
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f020 ffa7 	bl	8027bac <memset>
  if(hltdc->Instance==LTDC)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a57      	ldr	r2, [pc, #348]	; (8006dc0 <HAL_LTDC_MspInit+0x188>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	f040 80a6 	bne.w	8006db6 <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006c6a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8006c76:	2318      	movs	r3, #24
 8006c78:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8006c7a:	23c9      	movs	r3, #201	; 0xc9
 8006c7c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8006c7e:	2302      	movs	r3, #2
 8006c80:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8006c82:	2302      	movs	r3, #2
 8006c84:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8006c86:	2315      	movs	r3, #21
 8006c88:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8006c92:	f241 5356 	movw	r3, #5462	; 0x1556
 8006c96:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c98:	f107 0318 	add.w	r3, r7, #24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f00b ff2b 	bl	8012af8 <HAL_RCCEx_PeriphCLKConfig>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8006ca8:	f7ff fe04 	bl	80068b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006cac:	4b45      	ldr	r3, [pc, #276]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006cae:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006cb2:	4a44      	ldr	r2, [pc, #272]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006cb4:	f043 0308 	orr.w	r3, r3, #8
 8006cb8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8006cbc:	4b41      	ldr	r3, [pc, #260]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006cbe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8006cca:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006ccc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006cd0:	4a3c      	ldr	r2, [pc, #240]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cd6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006cda:	4b3a      	ldr	r3, [pc, #232]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006cdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006ce8:	4b36      	ldr	r3, [pc, #216]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006cea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006cee:	4a35      	ldr	r2, [pc, #212]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cf4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006cf8:	4b32      	ldr	r3, [pc, #200]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006cfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006d06:	4b2f      	ldr	r3, [pc, #188]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006d08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d0c:	4a2d      	ldr	r2, [pc, #180]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d12:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006d16:	4b2b      	ldr	r3, [pc, #172]	; (8006dc4 <HAL_LTDC_MspInit+0x18c>)
 8006d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d20:	60bb      	str	r3, [r7, #8]
 8006d22:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8006d24:	23ff      	movs	r3, #255	; 0xff
 8006d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d3c:	230e      	movs	r3, #14
 8006d3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8006d42:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006d46:	4619      	mov	r1, r3
 8006d48:	481f      	ldr	r0, [pc, #124]	; (8006dc8 <HAL_LTDC_MspInit+0x190>)
 8006d4a:	f005 fe93 	bl	800ca74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8006d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d56:	2302      	movs	r3, #2
 8006d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d62:	2300      	movs	r3, #0
 8006d64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d68:	230e      	movs	r3, #14
 8006d6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8006d6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006d72:	4619      	mov	r1, r3
 8006d74:	4815      	ldr	r0, [pc, #84]	; (8006dcc <HAL_LTDC_MspInit+0x194>)
 8006d76:	f005 fe7d 	bl	800ca74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8006d7a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d82:	2302      	movs	r3, #2
 8006d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d94:	230e      	movs	r3, #14
 8006d96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006d9a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006d9e:	4619      	mov	r1, r3
 8006da0:	480b      	ldr	r0, [pc, #44]	; (8006dd0 <HAL_LTDC_MspInit+0x198>)
 8006da2:	f005 fe67 	bl	800ca74 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8006da6:	2200      	movs	r2, #0
 8006da8:	2105      	movs	r1, #5
 8006daa:	2058      	movs	r0, #88	; 0x58
 8006dac:	f005 fa9c 	bl	800c2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006db0:	2058      	movs	r0, #88	; 0x58
 8006db2:	f005 fab3 	bl	800c31c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006db6:	bf00      	nop
 8006db8:	37f0      	adds	r7, #240	; 0xf0
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	50001000 	.word	0x50001000
 8006dc4:	58024400 	.word	0x58024400
 8006dc8:	58022800 	.word	0x58022800
 8006dcc:	58022400 	.word	0x58022400
 8006dd0:	58022000 	.word	0x58022000

08006dd4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b0b4      	sub	sp, #208	; 0xd0
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006ddc:	f107 0310 	add.w	r3, r7, #16
 8006de0:	22c0      	movs	r2, #192	; 0xc0
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f020 fee1 	bl	8027bac <memset>
  if(hospi->Instance==OCTOSPI1)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a28      	ldr	r2, [pc, #160]	; (8006e90 <HAL_OSPI_MspInit+0xbc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d148      	bne.n	8006e86 <HAL_OSPI_MspInit+0xb2>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8006df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006df8:	f04f 0300 	mov.w	r3, #0
 8006dfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8006e00:	2318      	movs	r3, #24
 8006e02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 8006e04:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8006e08:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006e12:	2302      	movs	r3, #2
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8006e22:	2320      	movs	r3, #32
 8006e24:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006e26:	f107 0310 	add.w	r3, r7, #16
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f00b fe64 	bl	8012af8 <HAL_RCCEx_PeriphCLKConfig>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <HAL_OSPI_MspInit+0x66>
    {
      Error_Handler();
 8006e36:	f7ff fd3d 	bl	80068b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8006e3a:	4b16      	ldr	r3, [pc, #88]	; (8006e94 <HAL_OSPI_MspInit+0xc0>)
 8006e3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e40:	4a14      	ldr	r2, [pc, #80]	; (8006e94 <HAL_OSPI_MspInit+0xc0>)
 8006e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e46:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006e4a:	4b12      	ldr	r3, [pc, #72]	; (8006e94 <HAL_OSPI_MspInit+0xc0>)
 8006e4c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8006e58:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <HAL_OSPI_MspInit+0xc0>)
 8006e5a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e5e:	4a0d      	ldr	r2, [pc, #52]	; (8006e94 <HAL_OSPI_MspInit+0xc0>)
 8006e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e64:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006e68:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <HAL_OSPI_MspInit+0xc0>)
 8006e6a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e72:	60bb      	str	r3, [r7, #8]
 8006e74:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8006e76:	2200      	movs	r2, #0
 8006e78:	2105      	movs	r1, #5
 8006e7a:	205c      	movs	r0, #92	; 0x5c
 8006e7c:	f005 fa34 	bl	800c2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8006e80:	205c      	movs	r0, #92	; 0x5c
 8006e82:	f005 fa4b 	bl	800c31c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8006e86:	bf00      	nop
 8006e88:	37d0      	adds	r7, #208	; 0xd0
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	52005000 	.word	0x52005000
 8006e94:	58024400 	.word	0x58024400

08006e98 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a0c      	ldr	r2, [pc, #48]	; (8006ed8 <HAL_OSPI_MspDeInit+0x40>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d112      	bne.n	8006ed0 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <HAL_OSPI_MspDeInit+0x44>)
 8006eac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006eb0:	4a0a      	ldr	r2, [pc, #40]	; (8006edc <HAL_OSPI_MspDeInit+0x44>)
 8006eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006eb6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8006eba:	4b08      	ldr	r3, [pc, #32]	; (8006edc <HAL_OSPI_MspDeInit+0x44>)
 8006ebc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006ec0:	4a06      	ldr	r2, [pc, #24]	; (8006edc <HAL_OSPI_MspDeInit+0x44>)
 8006ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ec6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8006eca:	205c      	movs	r0, #92	; 0x5c
 8006ecc:	f005 fa34 	bl	800c338 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	52005000 	.word	0x52005000
 8006edc:	58024400 	.word	0x58024400

08006ee0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b0b8      	sub	sp, #224	; 0xe0
 8006ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006ee6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	605a      	str	r2, [r3, #4]
 8006ef0:	609a      	str	r2, [r3, #8]
 8006ef2:	60da      	str	r2, [r3, #12]
 8006ef4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006ef6:	4b51      	ldr	r3, [pc, #324]	; (800703c <HAL_FMC_MspInit+0x15c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 8099 	bne.w	8007032 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8006f00:	4b4e      	ldr	r3, [pc, #312]	; (800703c <HAL_FMC_MspInit+0x15c>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f06:	f107 0308 	add.w	r3, r7, #8
 8006f0a:	22c0      	movs	r2, #192	; 0xc0
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f020 fe4c 	bl	8027bac <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8006f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f24:	f107 0308 	add.w	r3, r7, #8
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f00b fde5 	bl	8012af8 <HAL_RCCEx_PeriphCLKConfig>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8006f34:	f7ff fcbe 	bl	80068b4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006f38:	4b41      	ldr	r3, [pc, #260]	; (8007040 <HAL_FMC_MspInit+0x160>)
 8006f3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006f3e:	4a40      	ldr	r2, [pc, #256]	; (8007040 <HAL_FMC_MspInit+0x160>)
 8006f40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f44:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006f48:	4b3d      	ldr	r3, [pc, #244]	; (8007040 <HAL_FMC_MspInit+0x160>)
 8006f4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f52:	607b      	str	r3, [r7, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8006f56:	f248 1333 	movw	r3, #33075	; 0x8133
 8006f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f70:	230c      	movs	r3, #12
 8006f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f76:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4831      	ldr	r0, [pc, #196]	; (8007044 <HAL_FMC_MspInit+0x164>)
 8006f7e:	f005 fd79 	bl	800ca74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 8006f82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006f86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f96:	2303      	movs	r3, #3
 8006f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f9c:	230c      	movs	r3, #12
 8006f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fa2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4827      	ldr	r0, [pc, #156]	; (8007048 <HAL_FMC_MspInit+0x168>)
 8006faa:	f005 fd63 	bl	800ca74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_7
 8006fae:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006fb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006fc8:	230c      	movs	r3, #12
 8006fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	481d      	ldr	r0, [pc, #116]	; (800704c <HAL_FMC_MspInit+0x16c>)
 8006fd6:	f005 fd4d 	bl	800ca74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8006fda:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006fde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006ff4:	230c      	movs	r3, #12
 8006ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006ffa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006ffe:	4619      	mov	r1, r3
 8007000:	4813      	ldr	r0, [pc, #76]	; (8007050 <HAL_FMC_MspInit+0x170>)
 8007002:	f005 fd37 	bl	800ca74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8007006:	23e0      	movs	r3, #224	; 0xe0
 8007008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800700c:	2302      	movs	r3, #2
 800700e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007012:	2300      	movs	r3, #0
 8007014:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007018:	2303      	movs	r3, #3
 800701a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800701e:	230c      	movs	r3, #12
 8007020:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007024:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007028:	4619      	mov	r1, r3
 800702a:	480a      	ldr	r0, [pc, #40]	; (8007054 <HAL_FMC_MspInit+0x174>)
 800702c:	f005 fd22 	bl	800ca74 <HAL_GPIO_Init>
 8007030:	e000      	b.n	8007034 <HAL_FMC_MspInit+0x154>
    return;
 8007032:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007034:	37e0      	adds	r7, #224	; 0xe0
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	2400b20c 	.word	0x2400b20c
 8007040:	58024400 	.word	0x58024400
 8007044:	58021800 	.word	0x58021800
 8007048:	58020c00 	.word	0x58020c00
 800704c:	58021000 	.word	0x58021000
 8007050:	58021400 	.word	0x58021400
 8007054:	58021c00 	.word	0x58021c00

08007058 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007060:	f7ff ff3e 	bl	8006ee0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007064:	bf00      	nop
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b090      	sub	sp, #64	; 0x40
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b0f      	cmp	r3, #15
 8007078:	d827      	bhi.n	80070ca <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800707a:	2200      	movs	r2, #0
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	2036      	movs	r0, #54	; 0x36
 8007080:	f005 f932 	bl	800c2e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007084:	2036      	movs	r0, #54	; 0x36
 8007086:	f005 f949 	bl	800c31c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800708a:	4a29      	ldr	r2, [pc, #164]	; (8007130 <HAL_InitTick+0xc4>)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007090:	4b28      	ldr	r3, [pc, #160]	; (8007134 <HAL_InitTick+0xc8>)
 8007092:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007096:	4a27      	ldr	r2, [pc, #156]	; (8007134 <HAL_InitTick+0xc8>)
 8007098:	f043 0310 	orr.w	r3, r3, #16
 800709c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80070a0:	4b24      	ldr	r3, [pc, #144]	; (8007134 <HAL_InitTick+0xc8>)
 80070a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80070a6:	f003 0310 	and.w	r3, r3, #16
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80070ae:	f107 0210 	add.w	r2, r7, #16
 80070b2:	f107 0314 	add.w	r3, r7, #20
 80070b6:	4611      	mov	r1, r2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f00b fcdb 	bl	8012a74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <HAL_InitTick+0x6a>
 80070c8:	e001      	b.n	80070ce <HAL_InitTick+0x62>
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e02b      	b.n	8007126 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80070ce:	f00b fca5 	bl	8012a1c <HAL_RCC_GetPCLK1Freq>
 80070d2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80070d4:	e004      	b.n	80070e0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80070d6:	f00b fca1 	bl	8012a1c <HAL_RCC_GetPCLK1Freq>
 80070da:	4603      	mov	r3, r0
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80070e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e2:	4a15      	ldr	r2, [pc, #84]	; (8007138 <HAL_InitTick+0xcc>)
 80070e4:	fba2 2303 	umull	r2, r3, r2, r3
 80070e8:	0c9b      	lsrs	r3, r3, #18
 80070ea:	3b01      	subs	r3, #1
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <HAL_InitTick+0xd0>)
 80070f0:	4a13      	ldr	r2, [pc, #76]	; (8007140 <HAL_InitTick+0xd4>)
 80070f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80070f4:	4b11      	ldr	r3, [pc, #68]	; (800713c <HAL_InitTick+0xd0>)
 80070f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80070fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80070fc:	4a0f      	ldr	r2, [pc, #60]	; (800713c <HAL_InitTick+0xd0>)
 80070fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007100:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007102:	4b0e      	ldr	r3, [pc, #56]	; (800713c <HAL_InitTick+0xd0>)
 8007104:	2200      	movs	r2, #0
 8007106:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007108:	4b0c      	ldr	r3, [pc, #48]	; (800713c <HAL_InitTick+0xd0>)
 800710a:	2200      	movs	r2, #0
 800710c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800710e:	480b      	ldr	r0, [pc, #44]	; (800713c <HAL_InitTick+0xd0>)
 8007110:	f00d f8ad 	bl	801426e <HAL_TIM_Base_Init>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800711a:	4808      	ldr	r0, [pc, #32]	; (800713c <HAL_InitTick+0xd0>)
 800711c:	f00d f908 	bl	8014330 <HAL_TIM_Base_Start_IT>
 8007120:	4603      	mov	r3, r0
 8007122:	e000      	b.n	8007126 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
}
 8007126:	4618      	mov	r0, r3
 8007128:	3740      	adds	r7, #64	; 0x40
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	2400005c 	.word	0x2400005c
 8007134:	58024400 	.word	0x58024400
 8007138:	431bde83 	.word	0x431bde83
 800713c:	2400b210 	.word	0x2400b210
 8007140:	40001000 	.word	0x40001000

08007144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007148:	bf00      	nop
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007152:	b480      	push	{r7}
 8007154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007156:	e7fe      	b.n	8007156 <HardFault_Handler+0x4>

08007158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800715c:	e7fe      	b.n	800715c <MemManage_Handler+0x4>

0800715e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800715e:	b480      	push	{r7}
 8007160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007162:	e7fe      	b.n	8007162 <BusFault_Handler+0x4>

08007164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007168:	e7fe      	b.n	8007168 <UsageFault_Handler+0x4>

0800716a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800716a:	b480      	push	{r7}
 800716c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800716e:	bf00      	nop
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 800717c:	2004      	movs	r0, #4
 800717e:	f005 ff7e 	bl	800d07e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007182:	bf00      	nop
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800718c:	4802      	ldr	r0, [pc, #8]	; (8007198 <TIM6_DAC_IRQHandler+0x10>)
 800718e:	f00d f947 	bl	8014420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007192:	bf00      	nop
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	2400b210 	.word	0x2400b210

0800719c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80071a0:	4802      	ldr	r0, [pc, #8]	; (80071ac <LTDC_IRQHandler+0x10>)
 80071a2:	f008 fe29 	bl	800fdf8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80071a6:	bf00      	nop
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	2400b0b8 	.word	0x2400b0b8

080071b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80071b4:	4802      	ldr	r0, [pc, #8]	; (80071c0 <DMA2D_IRQHandler+0x10>)
 80071b6:	f005 fa9f 	bl	800c6f8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80071ba:	bf00      	nop
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	2400aecc 	.word	0x2400aecc

080071c4 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80071c8:	4802      	ldr	r0, [pc, #8]	; (80071d4 <OCTOSPI1_IRQHandler+0x10>)
 80071ca:	f009 fdbf 	bl	8010d4c <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80071ce:	bf00      	nop
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	2400b160 	.word	0x2400b160

080071d8 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80071dc:	4802      	ldr	r0, [pc, #8]	; (80071e8 <JPEG_IRQHandler+0x10>)
 80071de:	f007 f8b6 	bl	800e34e <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 80071e2:	bf00      	nop
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	2400af88 	.word	0x2400af88

080071ec <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80071f0:	4803      	ldr	r0, [pc, #12]	; (8007200 <MDMA_IRQHandler+0x14>)
 80071f2:	f009 fa6b 	bl	80106cc <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80071f6:	4803      	ldr	r0, [pc, #12]	; (8007204 <MDMA_IRQHandler+0x18>)
 80071f8:	f009 fa68 	bl	80106cc <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80071fc:	bf00      	nop
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	2400b04c 	.word	0x2400b04c
 8007204:	2400afe0 	.word	0x2400afe0

08007208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
	return 1;
 800720c:	2301      	movs	r3, #1
}
 800720e:	4618      	mov	r0, r3
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <_kill>:

int _kill(int pid, int sig)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007222:	f020 fc65 	bl	8027af0 <__errno>
 8007226:	4603      	mov	r3, r0
 8007228:	2216      	movs	r2, #22
 800722a:	601a      	str	r2, [r3, #0]
	return -1;
 800722c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <_exit>:

void _exit (int status)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007240:	f04f 31ff 	mov.w	r1, #4294967295
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ffe7 	bl	8007218 <_kill>
	while (1) {}		/* Make sure we hang here */
 800724a:	e7fe      	b.n	800724a <_exit+0x12>

0800724c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	e00a      	b.n	8007274 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800725e:	f3af 8000 	nop.w
 8007262:	4601      	mov	r1, r0
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	60ba      	str	r2, [r7, #8]
 800726a:	b2ca      	uxtb	r2, r1
 800726c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	3301      	adds	r3, #1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	429a      	cmp	r2, r3
 800727a:	dbf0      	blt.n	800725e <_read+0x12>
	}

return len;
 800727c:	687b      	ldr	r3, [r7, #4]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007292:	2300      	movs	r3, #0
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	e009      	b.n	80072ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	60ba      	str	r2, [r7, #8]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	3301      	adds	r3, #1
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	dbf1      	blt.n	8007298 <_write+0x12>
	}
	return len;
 80072b4:	687b      	ldr	r3, [r7, #4]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <_close>:

int _close(int file)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
	return -1;
 80072c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072e6:	605a      	str	r2, [r3, #4]
	return 0;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <_isatty>:

int _isatty(int file)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
	return 1;
 80072fe:	2301      	movs	r3, #1
}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
	return 0;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
	...

08007328 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007330:	4b11      	ldr	r3, [pc, #68]	; (8007378 <_sbrk+0x50>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d102      	bne.n	800733e <_sbrk+0x16>
		heap_end = &end;
 8007338:	4b0f      	ldr	r3, [pc, #60]	; (8007378 <_sbrk+0x50>)
 800733a:	4a10      	ldr	r2, [pc, #64]	; (800737c <_sbrk+0x54>)
 800733c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800733e:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <_sbrk+0x50>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007344:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <_sbrk+0x50>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4413      	add	r3, r2
 800734c:	466a      	mov	r2, sp
 800734e:	4293      	cmp	r3, r2
 8007350:	d907      	bls.n	8007362 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007352:	f020 fbcd 	bl	8027af0 <__errno>
 8007356:	4603      	mov	r3, r0
 8007358:	220c      	movs	r2, #12
 800735a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800735c:	f04f 33ff 	mov.w	r3, #4294967295
 8007360:	e006      	b.n	8007370 <_sbrk+0x48>
	}

	heap_end += incr;
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <_sbrk+0x50>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4413      	add	r3, r2
 800736a:	4a03      	ldr	r2, [pc, #12]	; (8007378 <_sbrk+0x50>)
 800736c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800736e:	68fb      	ldr	r3, [r7, #12]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	2400b25c 	.word	0x2400b25c
 800737c:	240264e8 	.word	0x240264e8

08007380 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	887a      	ldrh	r2, [r7, #2]
 8007390:	801a      	strh	r2, [r3, #0]
    {
    }
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4618      	mov	r0, r3
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
          visible(true)
 80073a8:	4a14      	ldr	r2, [pc, #80]	; (80073fc <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fb fd1a 	bl	8002dec <_ZN8touchgfx4RectC1Ev>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	330c      	adds	r3, #12
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fb fd15 	bl	8002dec <_ZN8touchgfx4RectC1Ev>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	615a      	str	r2, [r3, #20]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	619a      	str	r2, [r3, #24]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	61da      	str	r2, [r3, #28]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	841a      	strh	r2, [r3, #32]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	845a      	strh	r2, [r3, #34]	; 0x22
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	0802c6b4 	.word	0x0802c6b4

08007400 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	4608      	mov	r0, r1
 800740a:	4611      	mov	r1, r2
 800740c:	461a      	mov	r2, r3
 800740e:	4603      	mov	r3, r0
 8007410:	817b      	strh	r3, [r7, #10]
 8007412:	460b      	mov	r3, r1
 8007414:	813b      	strh	r3, [r7, #8]
 8007416:	4613      	mov	r3, r2
 8007418:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 800741a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800741e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007422:	4619      	mov	r1, r3
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 f80c 	bl	8007442 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800742a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800742e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007432:	4619      	mov	r1, r3
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f822 	bl	800747e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	807b      	strh	r3, [r7, #2]
 800744e:	4613      	mov	r3, r2
 8007450:	803b      	strh	r3, [r7, #0]
        setX(x);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3330      	adds	r3, #48	; 0x30
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800745e:	4611      	mov	r1, r2
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	4798      	blx	r3
        setY(y);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3334      	adds	r3, #52	; 0x34
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007470:	4611      	mov	r1, r2
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
    }
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	807b      	strh	r3, [r7, #2]
 800748a:	4613      	mov	r3, r2
 800748c:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3338      	adds	r3, #56	; 0x38
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800749a:	4611      	mov	r1, r2
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
        setHeight(height);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	333c      	adds	r3, #60	; 0x3c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80074ac:	4611      	mov	r1, r2
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	4798      	blx	r3
    }
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
	...

080074fc <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
    {
 8007504:	4a06      	ldr	r2, [pc, #24]	; (8007520 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3304      	adds	r3, #4
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fd42 	bl	8007f98 <_ZN8touchgfx9ContainerD1Ev>
    }
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	0802c7b8 	.word	0x0802c7b8

08007524 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
    }
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff ffe5 	bl	80074fc <_ZN8touchgfx6ScreenD1Ev>
 8007532:	213c      	movs	r1, #60	; 0x3c
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f020 fa7a 	bl	8027a2e <_ZdlPvj>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
    {
    }
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
    {
    }
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
    {
    }
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
    {
    }
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3304      	adds	r3, #4
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f011 fdbf 	bl	8019140 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <_ZN8touchgfx6WidgetC1Ev>:
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fee2 	bl	80073a0 <_ZN8touchgfx8DrawableC1Ev>
 80075dc:	4a03      	ldr	r2, [pc, #12]	; (80075ec <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	0802b34c 	.word	0x0802b34c

080075f0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4618      	mov	r0, r3
 80075fc:	2326      	movs	r3, #38	; 0x26
 80075fe:	461a      	mov	r2, r3
 8007600:	2100      	movs	r1, #0
 8007602:	f020 fad3 	bl	8027bac <memset>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff ffdf 	bl	80075cc <_ZN8touchgfx6WidgetC1Ev>
 800760e:	4a09      	ldr	r2, [pc, #36]	; (8007634 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	22ff      	movs	r2, #255	; 0xff
 8007618:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3328      	adds	r3, #40	; 0x28
 8007620:	2100      	movs	r1, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f7fc fb2d 	bl	8003c82 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	0802c4c8 	.word	0x0802c4c8

08007638 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4618      	mov	r0, r3
 8007662:	2326      	movs	r3, #38	; 0x26
 8007664:	461a      	mov	r2, r3
 8007666:	2100      	movs	r1, #0
 8007668:	f020 faa0 	bl	8027bac <memset>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff ffac 	bl	80075cc <_ZN8touchgfx6WidgetC1Ev>
 8007674:	4a09      	ldr	r2, [pc, #36]	; (800769c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	8812      	ldrh	r2, [r2, #0]
 8007680:	84da      	strh	r2, [r3, #38]	; 0x26
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	22ff      	movs	r2, #255	; 0xff
 8007686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f013 fe1d 	bl	801b2cc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	0802c5a4 	.word	0x0802c5a4

080076a0 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4618      	mov	r0, r3
 80076ac:	2326      	movs	r3, #38	; 0x26
 80076ae:	461a      	mov	r2, r3
 80076b0:	2100      	movs	r1, #0
 80076b2:	f020 fa7b 	bl	8027bac <memset>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff ff87 	bl	80075cc <_ZN8touchgfx6WidgetC1Ev>
 80076be:	4a0a      	ldr	r2, [pc, #40]	; (80076e8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	629a      	str	r2, [r3, #40]	; 0x28
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2101      	movs	r1, #1
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff feff 	bl	80074da <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	0802c2e0 	.word	0x0802c2e0

080076ec <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	4a05      	ldr	r2, [pc, #20]	; (8007728 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4618      	mov	r0, r3
 800771a:	f7fc fc63 	bl	8003fe4 <_ZN8touchgfx6WidgetD1Ev>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	0802c2e0 	.word	0x0802c2e0

0800772c <_ZN8touchgfx14AbstractButtonD0Ev>:
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff ffe7 	bl	8007708 <_ZN8touchgfx14AbstractButtonD1Ev>
 800773a:	2130      	movs	r1, #48	; 0x30
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f020 f976 	bl	8027a2e <_ZdlPvj>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff ffa2 	bl	80076a0 <_ZN8touchgfx14AbstractButtonC1Ev>
 800775c:	4a0c      	ldr	r2, [pc, #48]	; (8007790 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	332e      	adds	r3, #46	; 0x2e
 8007766:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fe08 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3330      	adds	r3, #48	; 0x30
 8007774:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff fe01 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	22ff      	movs	r2, #255	; 0xff
 8007782:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	0802c530 	.word	0x0802c530

08007794 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	8812      	ldrh	r2, [r2, #0]
 80077a6:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f013 fce2 	bl	801b178 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 80077b4:	bf00      	nop
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80077c8:	4a06      	ldr	r2, [pc, #24]	; (80077e4 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	887a      	ldrh	r2, [r7, #2]
 80077d2:	809a      	strh	r2, [r3, #4]
    }
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	0802b87c 	.word	0x0802b87c

080077e8 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
    {
 80077f0:	4a04      	ldr	r2, [pc, #16]	; (8007804 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]
    }
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	0802b87c 	.word	0x0802b87c

08007808 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
    }
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff ffe9 	bl	80077e8 <_ZN8touchgfx9TypedTextD1Ev>
 8007816:	2108      	movs	r1, #8
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f020 f908 	bl	8027a2e <_ZdlPvj>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4618      	mov	r0, r3
 8007834:	2326      	movs	r3, #38	; 0x26
 8007836:	461a      	mov	r2, r3
 8007838:	2100      	movs	r1, #0
 800783a:	f020 f9b7 	bl	8027bac <memset>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff fec3 	bl	80075cc <_ZN8touchgfx6WidgetC1Ev>
 8007846:	4a16      	ldr	r2, [pc, #88]	; (80078a0 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3328      	adds	r3, #40	; 0x28
 8007850:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff ffb1 	bl	80077bc <_ZN8touchgfx9TypedTextC1Et>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3330      	adds	r3, #48	; 0x30
 800785e:	2100      	movs	r1, #0
 8007860:	4618      	mov	r0, r3
 8007862:	f7fc fa0e 	bl	8003c82 <_ZN8touchgfx9colortypeC1Em>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	869a      	strh	r2, [r3, #52]	; 0x34
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	22ff      	movs	r2, #255	; 0xff
 8007870:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	333c      	adds	r3, #60	; 0x3c
 8007890:	4618      	mov	r0, r3
 8007892:	f000 f807 	bl	80078a4 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	0802c438 	.word	0x0802c438

080078a4 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f04f 33ff 	mov.w	r3, #4294967295
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	f04f 33ff 	mov.w	r3, #4294967295
 80078b8:	2200      	movs	r2, #0
 80078ba:	2100      	movs	r1, #0
 80078bc:	f7fc f9f0 	bl	8003ca0 <_ZN8touchgfx4RectC1Essss>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	609a      	str	r2, [r3, #8]
        {
        }
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <_ZN17AppScreenViewBase20ButtonToggleFunctionEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ButtonToggleFunction()
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in AppScreen
    }
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <_ZN8touchgfx4ViewI18AppScreenPresenterED1Ev>:
 * @see Screen
 *
 * @note All views in the application must be a subclass of this type.
 */
template <class T>
class View : public Screen
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	4a05      	ldr	r2, [pc, #20]	; (8007904 <_ZN8touchgfx4ViewI18AppScreenPresenterED1Ev+0x20>)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff fe01 	bl	80074fc <_ZN8touchgfx6ScreenD1Ev>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	0802b848 	.word	0x0802b848

08007908 <_ZN8touchgfx4ViewI18AppScreenPresenterED0Ev>:
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff ffe7 	bl	80078e4 <_ZN8touchgfx4ViewI18AppScreenPresenterED1Ev>
 8007916:	2140      	movs	r1, #64	; 0x40
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f020 f888 	bl	8027a2e <_ZdlPvj>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	4a05      	ldr	r2, [pc, #20]	; (8007948 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff fee5 	bl	8007708 <_ZN8touchgfx14AbstractButtonD1Ev>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	0802c530 	.word	0x0802c530

0800794c <_ZN8touchgfx6ButtonD0Ev>:
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff ffe7 	bl	8007928 <_ZN8touchgfx6ButtonD1Ev>
 800795a:	2134      	movs	r1, #52	; 0x34
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f020 f866 	bl	8027a2e <_ZdlPvj>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff fee8 	bl	800774c <_ZN8touchgfx6ButtonC1Ev>
 800797c:	4a07      	ldr	r2, [pc, #28]	; (800799c <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3334      	adds	r3, #52	; 0x34
 8007986:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff fcf8 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	0802c350 	.word	0x0802c350

080079a0 <_ZN17AppScreenViewBaseC1Ev>:
#include <gui_generated/appscreen_screen/AppScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

AppScreenViewBase::AppScreenViewBase() :
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b0a5      	sub	sp, #148	; 0x94
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	6178      	str	r0, [r7, #20]
    buttonCallback(this, &AppScreenViewBase::buttonCallbackHandler)
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fa6c 	bl	8007e88 <_ZN8touchgfx4ViewI18AppScreenPresenterEC1Ev>
 80079b0:	4ada      	ldr	r2, [pc, #872]	; (8007d1c <_ZN17AppScreenViewBaseC1Ev+0x37c>)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	3340      	adds	r3, #64	; 0x40
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7ff fe18 	bl	80075f0 <_ZN8touchgfx3BoxC1Ev>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80079c6:	f107 0320 	add.w	r3, r7, #32
 80079ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff fcd6 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 80079d4:	f107 0320 	add.w	r3, r7, #32
 80079d8:	4619      	mov	r1, r3
 80079da:	4620      	mov	r0, r4
 80079dc:	f012 fdbc 	bl	801a558 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	3398      	adds	r3, #152	; 0x98
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff ffc1 	bl	800796c <_ZN8touchgfx12ToggleButtonC1Ev>
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 80079f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7ff fcc1 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 80079fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a02:	4619      	mov	r1, r3
 8007a04:	4620      	mov	r0, r4
 8007a06:	f7ff fe25 	bl	8007654 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 8007a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff fcb1 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 8007a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a22:	4619      	mov	r1, r3
 8007a24:	4620      	mov	r0, r4
 8007a26:	f7ff fe15 	bl	8007654 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff fef9 	bl	8007828 <_ZN8touchgfx8TextAreaC1Ev>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff fef3 	bl	8007828 <_ZN8touchgfx8TextAreaC1Ev>
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 8007a48:	4bb5      	ldr	r3, [pc, #724]	; (8007d20 <_ZN17AppScreenViewBaseC1Ev+0x380>)
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a54:	cb0c      	ldmia	r3, {r2, r3}
 8007a56:	6979      	ldr	r1, [r7, #20]
 8007a58:	f000 fa3c 	bl	8007ed4 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007a62:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2100      	movs	r1, #0
 8007a70:	f7ff fcc6 	bl	8007400 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8007a80:	2300      	movs	r3, #0
 8007a82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007a86:	2300      	movs	r3, #0
 8007a88:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007a8c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8007a90:	041b      	lsls	r3, r3, #16
 8007a92:	461a      	mov	r2, r3
 8007a94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007aa6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fc f8e8 	bl	8003c82 <_ZN8touchgfx9colortypeC1Em>
 8007ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f7ff fdbe 	bl	8007638 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	3340      	adds	r3, #64	; 0x40
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	f7ff fd71 	bl	80075ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    BG_Image.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_1024X600_SHATTERED_RAIN_LIGHT_ID));
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8007ad0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fc52 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 8007adc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f013 fbf2 	bl	801b2cc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    BG_Image.setPosition(0, 0, 480, 272);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8007aee:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007af8:	2200      	movs	r2, #0
 8007afa:	2100      	movs	r1, #0
 8007afc:	f7ff fc80 	bl	8007400 <_ZN8touchgfx8Drawable11setPositionEssss>
    BG_Image.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	336c      	adds	r3, #108	; 0x6c
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f012 fcf5 	bl	801a4f6 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    add(BG_Image);
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	336c      	adds	r3, #108	; 0x6c
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f7ff fd49 	bl	80075ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    toggleButton1.setXY(155, 136);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	3398      	adds	r3, #152	; 0x98
 8007b1e:	2288      	movs	r2, #136	; 0x88
 8007b20:	219b      	movs	r1, #155	; 0x9b
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff fc8d 	bl	8007442 <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_LARGE_ROUND_TEXT_OFF_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_LARGE_ROUND_TEXT_ON_ACTIVE_ID));
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8007b2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b32:	2103      	movs	r1, #3
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff fc23 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 8007b3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b3e:	2104      	movs	r1, #4
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fc1d 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 8007b46:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007b4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4620      	mov	r0, r4
 8007b52:	f7ff fe1f 	bl	8007794 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1.setAction(buttonCallback);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b62:	4619      	mov	r1, r3
 8007b64:	4610      	mov	r0, r2
 8007b66:	f7ff fdc1 	bl	80076ec <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(toggleButton1);
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	3398      	adds	r3, #152	; 0x98
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f7ff fd1a 	bl	80075ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    OFF_LED.setXY(222, 75);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	33d0      	adds	r3, #208	; 0xd0
 8007b7c:	224b      	movs	r2, #75	; 0x4b
 8007b7e:	21de      	movs	r1, #222	; 0xde
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fc5e 	bl	8007442 <_ZN8touchgfx8Drawable5setXYEss>
    OFF_LED.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_OUTLINE_DISABLED_ID));
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8007b8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b90:	2102      	movs	r1, #2
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff fbf4 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 8007b98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f013 fb94 	bl	801b2cc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(OFF_LED);
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	33d0      	adds	r3, #208	; 0xd0
 8007baa:	4619      	mov	r1, r3
 8007bac:	4610      	mov	r0, r2
 8007bae:	f7ff fcfd 	bl	80075ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    ON_LED.setXY(222, 75);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	33fc      	adds	r3, #252	; 0xfc
 8007bb6:	224b      	movs	r2, #75	; 0x4b
 8007bb8:	21de      	movs	r1, #222	; 0xde
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff fc41 	bl	8007442 <_ZN8touchgfx8Drawable5setXYEss>
    ON_LED.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_ACTIVE_ID));
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 8007bc6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007bca:	2101      	movs	r1, #1
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff fbd7 	bl	8007380 <_ZN8touchgfx6BitmapC1Et>
 8007bd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f013 fb77 	bl	801b2cc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    ON_LED.setVisible(false);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	33fc      	adds	r3, #252	; 0xfc
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff fc68 	bl	80074ba <_ZN8touchgfx8Drawable10setVisibleEb>
    add(ON_LED);
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	33fc      	adds	r3, #252	; 0xfc
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	f7ff fcda 	bl	80075ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setXY(87, 20);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007bfe:	2214      	movs	r2, #20
 8007c00:	2157      	movs	r1, #87	; 0x57
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff fc1d 	bl	8007442 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(250, 233, 102));
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8007c0e:	23fa      	movs	r3, #250	; 0xfa
 8007c10:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8007c14:	23e9      	movs	r3, #233	; 0xe9
 8007c16:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8007c1a:	2366      	movs	r3, #102	; 0x66
 8007c1c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8007c20:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007c24:	041b      	lsls	r3, r3, #16
 8007c26:	461a      	mov	r2, r3
 8007c28:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007c3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fc f81e 	bl	8003c82 <_ZN8touchgfx9colortypeC1Em>
 8007c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c48:	66fc      	str	r4, [r7, #108]	; 0x6c
 8007c4a:	61fb      	str	r3, [r7, #28]
        color = newColor;
 8007c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4e:	69fa      	ldr	r2, [r7, #28]
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007c52:	bf00      	nop
    textArea1.setLinespacing(0);
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c5a:	677b      	str	r3, [r7, #116]	; 0x74
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        linespace = space;
 8007c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c64:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8007c68:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8007c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3384      	adds	r3, #132	; 0x84
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8007c74:	463a      	mov	r2, r7
 8007c76:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
 8007c7c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8007c80:	463a      	mov	r2, r7
 8007c82:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8007c88:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_26ZK));
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8007c90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007c94:	2101      	movs	r1, #1
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff fd90 	bl	80077bc <_ZN8touchgfx9TypedTextC1Et>
 8007c9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f013 fa16 	bl	801b0d4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007ca8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7ff fd9b 	bl	80077e8 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	f7ff fc75 	bl	80075ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1_1.setXY(193, 218);
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8007cc8:	22da      	movs	r2, #218	; 0xda
 8007cca:	21c1      	movs	r1, #193	; 0xc1
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7ff fbb8 	bl	8007442 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_1.setColor(touchgfx::Color::getColorFromRGB(100, 245, 10));
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 8007cd8:	2364      	movs	r3, #100	; 0x64
 8007cda:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007cde:	23f5      	movs	r3, #245	; 0xf5
 8007ce0:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8007ce4:	230a      	movs	r3, #10
 8007ce6:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8007cea:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007cee:	041b      	lsls	r3, r3, #16
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007d04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fb ffb9 	bl	8003c82 <_ZN8touchgfx9colortypeC1Em>
 8007d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d12:	67fc      	str	r4, [r7, #124]	; 0x7c
 8007d14:	61bb      	str	r3, [r7, #24]
        color = newColor;
 8007d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d18:	e004      	b.n	8007d24 <_ZN17AppScreenViewBaseC1Ev+0x384>
 8007d1a:	bf00      	nop
 8007d1c:	0802b7f8 	.word	0x0802b7f8
 8007d20:	08007e5f 	.word	0x08007e5f
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007d28:	bf00      	nop
    textArea1_1.setLinespacing(0);
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8007d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d34:	2300      	movs	r3, #0
 8007d36:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        linespace = space;
 8007d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d3e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8007d42:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8007d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3384      	adds	r3, #132	; 0x84
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8007d52:	463a      	mov	r2, r7
 8007d54:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8007d60:	463a      	mov	r2, r7
 8007d62:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8007d68:	bf00      	nop
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HA2U));
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 8007d70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d74:	2100      	movs	r1, #0
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fd20 	bl	80077bc <_ZN8touchgfx9TypedTextC1Et>
 8007d7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d80:	4619      	mov	r1, r3
 8007d82:	4620      	mov	r0, r4
 8007d84:	f013 f9a6 	bl	801b0d4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007d88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff fd2b 	bl	80077e8 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1_1);
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	f7ff fc05 	bl	80075ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	4618      	mov	r0, r3
 8007da6:	378c      	adds	r7, #140	; 0x8c
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd90      	pop	{r4, r7, pc}

08007dac <_ZN17AppScreenViewBaseD1Ev>:

AppScreenViewBase::~AppScreenViewBase()
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	4a1b      	ldr	r2, [pc, #108]	; (8007e24 <_ZN17AppScreenViewBaseD1Ev+0x78>)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 f8c7 	bl	8007f54 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 f98d 	bl	80080ec <_ZN8touchgfx8TextAreaD1Ev>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 f987 	bl	80080ec <_ZN8touchgfx8TextAreaD1Ev>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	33fc      	adds	r3, #252	; 0xfc
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f91c 	bl	8008020 <_ZN8touchgfx5ImageD1Ev>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	33d0      	adds	r3, #208	; 0xd0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 f917 	bl	8008020 <_ZN8touchgfx5ImageD1Ev>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3398      	adds	r3, #152	; 0x98
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 f956 	bl	80080a8 <_ZN8touchgfx12ToggleButtonD1Ev>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	336c      	adds	r3, #108	; 0x6c
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 f92f 	bl	8008064 <_ZN8touchgfx13ScalableImageD1Ev>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3340      	adds	r3, #64	; 0x40
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f8e6 	bl	8007fdc <_ZN8touchgfx3BoxD1Ev>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff fd66 	bl	80078e4 <_ZN8touchgfx4ViewI18AppScreenPresenterED1Ev>
{

}
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	0802b7f8 	.word	0x0802b7f8

08007e28 <_ZN17AppScreenViewBaseD0Ev>:
AppScreenViewBase::~AppScreenViewBase()
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
}
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff ffbb 	bl	8007dac <_ZN17AppScreenViewBaseD1Ev>
 8007e36:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f01f fdf7 	bl	8027a2e <_ZdlPvj>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <_ZN17AppScreenViewBase11setupScreenEv>:

void AppScreenViewBase::setupScreen()
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]

}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <_ZN17AppScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void AppScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
    if (&src == &toggleButton1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3398      	adds	r3, #152	; 0x98
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d105      	bne.n	8007e7e <_ZN17AppScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //Interaction1
        //When toggleButton1 clicked call virtual function
        //Call ButtonToggleFunction
        ButtonToggleFunction();
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	332c      	adds	r3, #44	; 0x2c
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
    }
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <_ZN8touchgfx4ViewI18AppScreenPresenterEC1Ev>:
{
public:
    View()
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f016 fa4e 	bl	801e334 <_ZN8touchgfx6ScreenC1Ev>
 8007e98:	4a05      	ldr	r2, [pc, #20]	; (8007eb0 <_ZN8touchgfx4ViewI18AppScreenPresenterEC1Ev+0x28>)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	0802b848 	.word	0x0802b848

08007eb4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	4a04      	ldr	r2, [pc, #16]	; (8007ed0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	0802b88c 	.word	0x0802b88c

08007ed4 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4639      	mov	r1, r7
 8007ee0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff ffe4 	bl	8007eb4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8007eec:	4a08      	ldr	r2, [pc, #32]	; (8007f10 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	605a      	str	r2, [r3, #4]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	3308      	adds	r3, #8
 8007efc:	463a      	mov	r2, r7
 8007efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f02:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	0802b830 	.word	0x0802b830

08007f14 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
    }
 8007f1c:	4a04      	ldr	r2, [pc, #16]	; (8007f30 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	0802b88c 	.word	0x0802b88c

08007f34 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
    }
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff ffe9 	bl	8007f14 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8007f42:	2104      	movs	r1, #4
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f01f fd72 	bl	8027a2e <_ZdlPvj>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	4a05      	ldr	r2, [pc, #20]	; (8007f74 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff ffd5 	bl	8007f14 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	0802b830 	.word	0x0802b830

08007f78 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff ffe7 	bl	8007f54 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8007f86:	2110      	movs	r1, #16
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f01f fd50 	bl	8027a2e <_ZdlPvj>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	4a05      	ldr	r2, [pc, #20]	; (8007fb8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fb fe99 	bl	8003ce0 <_ZN8touchgfx8DrawableD1Ev>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	0802c0f8 	.word	0x0802c0f8

08007fbc <_ZN8touchgfx9ContainerD0Ev>:
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7ff ffe7 	bl	8007f98 <_ZN8touchgfx9ContainerD1Ev>
 8007fca:	212c      	movs	r1, #44	; 0x2c
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f01f fd2e 	bl	8027a2e <_ZdlPvj>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	4a05      	ldr	r2, [pc, #20]	; (8007ffc <_ZN8touchgfx3BoxD1Ev+0x20>)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fb fff9 	bl	8003fe4 <_ZN8touchgfx6WidgetD1Ev>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	0802c4c8 	.word	0x0802c4c8

08008000 <_ZN8touchgfx3BoxD0Ev>:
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff ffe7 	bl	8007fdc <_ZN8touchgfx3BoxD1Ev>
 800800e:	212c      	movs	r1, #44	; 0x2c
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f01f fd0c 	bl	8027a2e <_ZdlPvj>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	4a05      	ldr	r2, [pc, #20]	; (8008040 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4618      	mov	r0, r3
 8008032:	f7fb ffd7 	bl	8003fe4 <_ZN8touchgfx6WidgetD1Ev>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	0802c5a4 	.word	0x0802c5a4

08008044 <_ZN8touchgfx5ImageD0Ev>:
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff ffe7 	bl	8008020 <_ZN8touchgfx5ImageD1Ev>
 8008052:	212c      	movs	r1, #44	; 0x2c
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f01f fcea 	bl	8027a2e <_ZdlPvj>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <_ZN8touchgfx13ScalableImageD1Ev>:
 * algorithm used. The rendering algorithm can be changed dynamically. Please note that
 * scaling images is done at runtime and may require a lot of calculations.
 *
 * @note Note that this widget does not support 1 bit per pixel color depth.
 */
class ScalableImage : public Image
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	4a05      	ldr	r2, [pc, #20]	; (8008084 <_ZN8touchgfx13ScalableImageD1Ev+0x20>)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff ffd3 	bl	8008020 <_ZN8touchgfx5ImageD1Ev>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	0802c3c4 	.word	0x0802c3c4

08008088 <_ZN8touchgfx13ScalableImageD0Ev>:
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff ffe7 	bl	8008064 <_ZN8touchgfx13ScalableImageD1Ev>
 8008096:	212c      	movs	r1, #44	; 0x2c
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f01f fcc8 	bl	8027a2e <_ZdlPvj>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <_ZN8touchgfx12ToggleButtonD1Ev>:
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	4a05      	ldr	r2, [pc, #20]	; (80080c8 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7ff fc35 	bl	8007928 <_ZN8touchgfx6ButtonD1Ev>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	0802c350 	.word	0x0802c350

080080cc <_ZN8touchgfx12ToggleButtonD0Ev>:
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff ffe7 	bl	80080a8 <_ZN8touchgfx12ToggleButtonD1Ev>
 80080da:	2138      	movs	r1, #56	; 0x38
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f01f fca6 	bl	8027a2e <_ZdlPvj>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	4a08      	ldr	r2, [pc, #32]	; (8008118 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3328      	adds	r3, #40	; 0x28
 80080fe:	4618      	mov	r0, r3
 8008100:	f7ff fb72 	bl	80077e8 <_ZN8touchgfx9TypedTextD1Ev>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4618      	mov	r0, r3
 8008108:	f7fb ff6c 	bl	8003fe4 <_ZN8touchgfx6WidgetD1Ev>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	0802c438 	.word	0x0802c438

0800811c <_ZN8touchgfx8TextAreaD0Ev>:
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff ffe1 	bl	80080ec <_ZN8touchgfx8TextAreaD1Ev>
 800812a:	2148      	movs	r1, #72	; 0x48
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f01f fc7e 	bl	8027a2e <_ZdlPvj>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	68d2      	ldr	r2, [r2, #12]
 800814e:	1052      	asrs	r2, r2, #1
 8008150:	1898      	adds	r0, r3, r2
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d102      	bne.n	8008164 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	e00a      	b.n	800817a <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	68d2      	ldr	r2, [r2, #12]
 800816c:	1052      	asrs	r2, r2, #1
 800816e:	4413      	add	r3, r2
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6892      	ldr	r2, [r2, #8]
 8008176:	4413      	add	r3, r2
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	4798      	blx	r3
    }
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d010      	beq.n	80081b8 <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d107      	bne.n	80081ae <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80081ae:	2300      	movs	r3, #0
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d001      	beq.n	80081b8 <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80081b8:	2300      	movs	r3, #0
    }
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	460b      	mov	r3, r1
 80081d0:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80081d2:	887b      	ldrh	r3, [r7, #2]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d010      	beq.n	80081fa <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80081d8:	2b02      	cmp	r3, #2
 80081da:	dc13      	bgt.n	8008204 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d005      	beq.n	80081f0 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 80081e4:	e00e      	b.n	8008204 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80081e6:	f000 ffcb 	bl	8009180 <_ZN17TypedTextDatabase8getFontsEv>
 80081ea:	4603      	mov	r3, r0
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	e00a      	b.n	8008206 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80081f0:	f000 ffc6 	bl	8009180 <_ZN17TypedTextDatabase8getFontsEv>
 80081f4:	4603      	mov	r3, r0
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	e005      	b.n	8008206 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80081fa:	f000 ffc1 	bl	8009180 <_ZN17TypedTextDatabase8getFontsEv>
 80081fe:	4603      	mov	r3, r0
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	e000      	b.n	8008206 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8008204:	2300      	movs	r3, #0
    }
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
    return bitmap_database;
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8008216:	4618      	mov	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	0802b8b0 	.word	0x0802b8b0

08008224 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8008228:	2307      	movs	r3, #7
}
 800822a:	4618      	mov	r0, r3
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
    {
 800823c:	4a04      	ldr	r2, [pc, #16]	; (8008250 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	601a      	str	r2, [r3, #0]
    }
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4618      	mov	r0, r3
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	0802b9ec 	.word	0x0802b9ec

08008254 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
    }
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff ffe9 	bl	8008234 <_ZN8touchgfx4FontD1Ev>
 8008262:	2114      	movs	r1, #20
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f01f fbe2 	bl	8027a2e <_ZdlPvj>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8008274:	b590      	push	{r4, r7, lr}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8008280:	887b      	ldrh	r3, [r7, #2]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8008286:	2300      	movs	r3, #0
 8008288:	e010      	b.n	80082ac <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	681c      	ldr	r4, [r3, #0]
 800829a:	f107 030f 	add.w	r3, r7, #15
 800829e:	f107 0210 	add.w	r2, r7, #16
 80082a2:	8879      	ldrh	r1, [r7, #2]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	47a0      	blx	r4
 80082a8:	6178      	str	r0, [r7, #20]
        return glyph;
 80082aa:	697b      	ldr	r3, [r7, #20]
    }
 80082ac:	4618      	mov	r0, r3
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd90      	pop	{r4, r7, pc}

080082b4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	89db      	ldrh	r3, [r3, #14]
    }
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	8a1b      	ldrh	r3, [r3, #16]
    }
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	88db      	ldrh	r3, [r3, #6]
    }
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	889b      	ldrh	r3, [r3, #4]
    }
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7a9b      	ldrb	r3, [r3, #10]
 8008320:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008324:	b2db      	uxtb	r3, r3
    }
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	7a9b      	ldrb	r3, [r3, #10]
 800833e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008342:	b2db      	uxtb	r3, r3
    }
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	4a05      	ldr	r2, [pc, #20]	; (8008370 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff ff67 	bl	8008234 <_ZN8touchgfx4FontD1Ev>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	0802c71c 	.word	0x0802c71c

08008374 <_ZN8touchgfx9ConstFontD0Ev>:
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff ffe7 	bl	8008350 <_ZN8touchgfx9ConstFontD1Ev>
 8008382:	211c      	movs	r1, #28
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f01f fb52 	bl	8027a2e <_ZdlPvj>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	4a05      	ldr	r2, [pc, #20]	; (80083b4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff ffd3 	bl	8008350 <_ZN8touchgfx9ConstFontD1Ev>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	0802b98c 	.word	0x0802b98c

080083b8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff ffe7 	bl	8008394 <_ZN8touchgfx13GeneratedFontD1Ev>
 80083c6:	212c      	movs	r1, #44	; 0x2c
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f01f fb30 	bl	8027a2e <_ZdlPvj>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4618      	mov	r0, r3
 80083fe:	f014 fcb8 	bl	801cd72 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8008414:	4a07      	ldr	r2, [pc, #28]	; (8008434 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	605a      	str	r2, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	721a      	strb	r2, [r3, #8]
    {
    }
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	0802b968 	.word	0x0802b968

08008438 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
    {
 8008440:	4a04      	ldr	r2, [pc, #16]	; (8008454 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	601a      	str	r2, [r3, #0]
    }
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4618      	mov	r0, r3
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	0802b968 	.word	0x0802b968

08008458 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
    }
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff ffe9 	bl	8008438 <_ZN8touchgfx10TransitionD1Ev>
 8008466:	210c      	movs	r1, #12
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f01f fae0 	bl	8027a2e <_ZdlPvj>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
    {
    }
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
    {
    }
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
    {
    }
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 80084bc:	f014 fc34 	bl	801cd28 <_ZN8touchgfx11Application11getInstanceEv>
 80084c0:	4603      	mov	r3, r0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f015 f87a 	bl	801d5bc <_ZN8touchgfx11Application10invalidateEv>
    }
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	605a      	str	r2, [r3, #4]
    }
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f014 fcdc 	bl	801ceb4 <_ZN8touchgfx11ApplicationC1Ev>
 80084fc:	4a09      	ldr	r2, [pc, #36]	; (8008524 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a04      	ldr	r2, [pc, #16]	; (8008528 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8008516:	6013      	str	r3, [r2, #0]
    }
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	0802b220 	.word	0x0802b220
 8008528:	240262b0 	.word	0x240262b0

0800852c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	601a      	str	r2, [r3, #0]
    }
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	721a      	strb	r2, [r3, #8]
    }
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	605a      	str	r2, [r3, #4]
    }
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
	...

08008580 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/appscreen_screen/AppScreenView.hpp>
#include <gui/appscreen_screen/AppScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff ffac 	bl	80084ec <_ZN8touchgfx14MVPApplicationC1Ev>
 8008594:	4a13      	ldr	r2, [pc, #76]	; (80085e4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 f89f 	bl	80086e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80085b6:	f7f8 fa39 	bl	8000a2c <_ZN8touchgfx3HAL11getInstanceEv>
 80085ba:	4603      	mov	r3, r0
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	3208      	adds	r2, #8
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	2100      	movs	r1, #0
 80085c4:	4618      	mov	r0, r3
 80085c6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80085c8:	2000      	movs	r0, #0
 80085ca:	f000 fd61 	bl	8009090 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80085ce:	f7fb fcab 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 80085d2:	4603      	mov	r3, r0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f01a fc06 	bl	8022de6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	0802b1bc 	.word	0x0802b1bc

080085e8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	4611      	mov	r1, r2
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff ffe9 	bl	80085e8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	605a      	str	r2, [r3, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	3308      	adds	r3, #8
 8008624:	3208      	adds	r2, #8
 8008626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800862a:	e883 0003 	stmia.w	r3, {r0, r1}
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4618      	mov	r0, r3
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <_ZN23FrontendApplicationBase31gotoAppScreenScreenNoTransitionEv>:
 */

// AppScreen

void FrontendApplicationBase::gotoAppScreenScreenNoTransition()
{
 8008638:	b590      	push	{r4, r7, lr}
 800863a:	b089      	sub	sp, #36	; 0x24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoAppScreenScreenNoTransitionImpl);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8008646:	4b10      	ldr	r3, [pc, #64]	; (8008688 <_ZN23FrontendApplicationBase31gotoAppScreenScreenNoTransitionEv+0x50>)
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
 800864e:	f107 0008 	add.w	r0, r7, #8
 8008652:	f107 0318 	add.w	r3, r7, #24
 8008656:	cb0c      	ldmia	r3, {r2, r3}
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	f000 f85f 	bl	800871c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	4619      	mov	r1, r3
 8008664:	4620      	mov	r0, r4
 8008666:	f7ff ffcb 	bl	8008600 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800866a:	f107 0308 	add.w	r3, r7, #8
 800866e:	4618      	mov	r0, r3
 8008670:	f7fb f9dc 	bl	8003a2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8008680:	bf00      	nop
 8008682:	3724      	adds	r7, #36	; 0x24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd90      	pop	{r4, r7, pc}
 8008688:	0800868d 	.word	0x0800868d

0800868c <_ZN23FrontendApplicationBase35gotoAppScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoAppScreenScreenNoTransitionImpl()
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af02      	add	r7, sp, #8
 8008692:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<AppScreenView, AppScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80086a0:	461a      	mov	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	4b04      	ldr	r3, [pc, #16]	; (80086bc <_ZN23FrontendApplicationBase35gotoAppScreenScreenNoTransitionImplEv+0x30>)
 80086ac:	4804      	ldr	r0, [pc, #16]	; (80086c0 <_ZN23FrontendApplicationBase35gotoAppScreenScreenNoTransitionImplEv+0x34>)
 80086ae:	f000 f867 	bl	8008780 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	240262a4 	.word	0x240262a4
 80086c0:	240262a0 	.word	0x240262a0

080086c4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	4a04      	ldr	r2, [pc, #16]	; (80086e0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	0802b26c 	.word	0x0802b26c

080086e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff ffe8 	bl	80086c4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80086f4:	4a08      	ldr	r2, [pc, #32]	; (8008718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	605a      	str	r2, [r3, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	609a      	str	r2, [r3, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	60da      	str	r2, [r3, #12]
    }
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	0802b208 	.word	0x0802b208

0800871c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4639      	mov	r1, r7
 8008728:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff ffc8 	bl	80086c4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008734:	4a08      	ldr	r2, [pc, #32]	; (8008758 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	605a      	str	r2, [r3, #4]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3308      	adds	r3, #8
 8008744:	463a      	mov	r2, r7
 8008746:	e892 0003 	ldmia.w	r2, {r0, r1}
 800874a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	0802b208 	.word	0x0802b208

0800875c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fe50 	bl	800840c <_ZN8touchgfx10TransitionC1Ev>
 800876c:	4a03      	ldr	r2, [pc, #12]	; (800877c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	0802b944 	.word	0x0802b944

08008780 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8008780:	b590      	push	{r4, r7, lr}
 8008782:	b08f      	sub	sp, #60	; 0x3c
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3320      	adds	r3, #32
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4610      	mov	r0, r2
 800879e:	4798      	blx	r3
 80087a0:	4603      	mov	r3, r0
 80087a2:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 80087a6:	d205      	bcs.n	80087b4 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80087a8:	4b7e      	ldr	r3, [pc, #504]	; (80089a4 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80087aa:	4a7f      	ldr	r2, [pc, #508]	; (80089a8 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80087ac:	21a3      	movs	r1, #163	; 0xa3
 80087ae:	487f      	ldr	r0, [pc, #508]	; (80089ac <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80087b0:	f01f f96c 	bl	8027a8c <__assert_func>
 80087b4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3320      	adds	r3, #32
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4610      	mov	r0, r2
 80087c6:	4798      	blx	r3
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b0f      	cmp	r3, #15
 80087cc:	d805      	bhi.n	80087da <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80087ce:	4b78      	ldr	r3, [pc, #480]	; (80089b0 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80087d0:	4a75      	ldr	r2, [pc, #468]	; (80089a8 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80087d2:	21a4      	movs	r1, #164	; 0xa4
 80087d4:	4875      	ldr	r0, [pc, #468]	; (80089ac <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80087d6:	f01f f959 	bl	8027a8c <__assert_func>
 80087da:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68da      	ldr	r2, [r3, #12]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3320      	adds	r3, #32
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4610      	mov	r0, r2
 80087ec:	4798      	blx	r3
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b0b      	cmp	r3, #11
 80087f2:	d805      	bhi.n	8008800 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80087f4:	4b6f      	ldr	r3, [pc, #444]	; (80089b4 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80087f6:	4a6c      	ldr	r2, [pc, #432]	; (80089a8 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80087f8:	21a5      	movs	r1, #165	; 0xa5
 80087fa:	486c      	ldr	r0, [pc, #432]	; (80089ac <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80087fc:	f01f f946 	bl	8027a8c <__assert_func>
 8008800:	bf00      	nop
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	62bb      	str	r3, [r7, #40]	; 0x28
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800880e:	f014 fa8b 	bl	801cd28 <_ZN8touchgfx11Application11getInstanceEv>
 8008812:	4603      	mov	r3, r0
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff fdeb 	bl	80083f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d008      	beq.n	8008834 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4610      	mov	r0, r2
 8008832:	4798      	blx	r3
    if (*currentTrans)
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d007      	beq.n	800884c <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
    if (*currentScreen)
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8008854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3314      	adds	r3, #20
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4610      	mov	r0, r2
 8008864:	4798      	blx	r3
    if (*currentPresenter)
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d008      	beq.n	8008880 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3304      	adds	r3, #4
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
    if (*currentScreen)
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d007      	beq.n	8008898 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4610      	mov	r0, r2
 8008896:	4798      	blx	r3
    if (*currentPresenter)
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3308      	adds	r3, #8
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4610      	mov	r0, r2
 80088b0:	4798      	blx	r3
}
 80088b2:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	2100      	movs	r1, #0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 f87c 	bl	80089b8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80088c0:	4603      	mov	r3, r0
 80088c2:	4619      	mov	r1, r3
 80088c4:	200c      	movs	r0, #12
 80088c6:	f7ff fd87 	bl	80083d8 <_ZnwjPv>
 80088ca:	4604      	mov	r4, r0
 80088cc:	4620      	mov	r0, r4
 80088ce:	f7ff ff45 	bl	800875c <_ZN8touchgfx12NoTransitionC1Ev>
 80088d2:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f87f 	bl	80089de <_ZN8touchgfx17AbstractPartition2atI13AppScreenViewEERT_t>
 80088e0:	4603      	mov	r3, r0
 80088e2:	4619      	mov	r1, r3
 80088e4:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
 80088e8:	f7ff fd76 	bl	80083d8 <_ZnwjPv>
 80088ec:	4604      	mov	r4, r0
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 fdb4 	bl	800945c <_ZN13AppScreenViewC1Ev>
 80088f4:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2100      	movs	r1, #0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f881 	bl	8008a04 <_ZN8touchgfx17AbstractPartition2atI18AppScreenPresenterEERT_t>
 8008902:	4603      	mov	r3, r0
 8008904:	4619      	mov	r1, r3
 8008906:	2010      	movs	r0, #16
 8008908:	f7ff fd66 	bl	80083d8 <_ZnwjPv>
 800890c:	4604      	mov	r4, r0
 800890e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008910:	4620      	mov	r0, r4
 8008912:	f000 fd15 	bl	8009340 <_ZN18AppScreenPresenterC1ER13AppScreenView>
 8008916:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800891c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008922:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008928:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800892a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	3304      	adds	r3, #4
 8008934:	e000      	b.n	8008938 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8008936:	2300      	movs	r3, #0
 8008938:	4619      	mov	r1, r3
 800893a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800893c:	f7ff fdf6 	bl	800852c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	3304      	adds	r3, #4
 8008944:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff fe0b 	bl	8008562 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008950:	4618      	mov	r0, r3
 8008952:	f000 f86a 	bl	8008a2a <_ZN8touchgfx4ViewI18AppScreenPresenterE4bindERS1_>
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	61bb      	str	r3, [r7, #24]
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	330c      	adds	r3, #12
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69f8      	ldr	r0, [r7, #28]
 800896c:	4798      	blx	r3
    newPresenter->activate();
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	69b8      	ldr	r0, [r7, #24]
 8008976:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8008978:	6979      	ldr	r1, [r7, #20]
 800897a:	69f8      	ldr	r0, [r7, #28]
 800897c:	f015 fe86 	bl	801e68c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3310      	adds	r3, #16
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6978      	ldr	r0, [r7, #20]
 800898a:	4798      	blx	r3
    newTransition->invalidate();
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3314      	adds	r3, #20
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6978      	ldr	r0, [r7, #20]
 8008996:	4798      	blx	r3
}
 8008998:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800899c:	4618      	mov	r0, r3
 800899e:	373c      	adds	r7, #60	; 0x3c
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd90      	pop	{r4, r7, pc}
 80089a4:	0802a778 	.word	0x0802a778
 80089a8:	0802a808 	.word	0x0802a808
 80089ac:	0802a910 	.word	0x0802a910
 80089b0:	0802a958 	.word	0x0802a958
 80089b4:	0802a9fc 	.word	0x0802a9fc

080089b8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3324      	adds	r3, #36	; 0x24
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	887a      	ldrh	r2, [r7, #2]
 80089ce:	4611      	mov	r1, r2
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	4798      	blx	r3
 80089d4:	4603      	mov	r3, r0
    }
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <_ZN8touchgfx17AbstractPartition2atI13AppScreenViewEERT_t>:
    T& at(const uint16_t index)
 80089de:	b580      	push	{r7, lr}
 80089e0:	b082      	sub	sp, #8
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3324      	adds	r3, #36	; 0x24
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	887a      	ldrh	r2, [r7, #2]
 80089f4:	4611      	mov	r1, r2
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	4798      	blx	r3
 80089fa:	4603      	mov	r3, r0
    }
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <_ZN8touchgfx17AbstractPartition2atI18AppScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3324      	adds	r3, #36	; 0x24
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	887a      	ldrh	r2, [r7, #2]
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
 8008a20:	4603      	mov	r3, r0
    }
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <_ZN8touchgfx4ViewI18AppScreenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008a3a:	bf00      	nop
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
	...

08008a48 <_ZN8touchgfx12NoTransitionD1Ev>:
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	4a05      	ldr	r2, [pc, #20]	; (8008a68 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff fced 	bl	8008438 <_ZN8touchgfx10TransitionD1Ev>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	0802b944 	.word	0x0802b944

08008a6c <_ZN8touchgfx12NoTransitionD0Ev>:
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff ffe7 	bl	8008a48 <_ZN8touchgfx12NoTransitionD1Ev>
 8008a7a:	210c      	movs	r1, #12
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f01e ffd6 	bl	8027a2e <_ZdlPvj>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08e      	sub	sp, #56	; 0x38
 8008ac0:	af0a      	add	r7, sp, #40	; 0x28
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	461a      	mov	r2, r3
 8008aca:	460b      	mov	r3, r1
 8008acc:	80fb      	strh	r3, [r7, #6]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	88b9      	ldrh	r1, [r7, #4]
 8008ad6:	88fa      	ldrh	r2, [r7, #6]
 8008ad8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008adc:	9308      	str	r3, [sp, #32]
 8008ade:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008ae0:	9307      	str	r3, [sp, #28]
 8008ae2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008ae6:	9306      	str	r3, [sp, #24]
 8008ae8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008af2:	9304      	str	r3, [sp, #16]
 8008af4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008af8:	9303      	str	r3, [sp, #12]
 8008afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008afe:	9302      	str	r3, [sp, #8]
 8008b00:	7f3b      	ldrb	r3, [r7, #28]
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	8b3b      	ldrh	r3, [r7, #24]
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	f015 f9fe 	bl	801df0c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8008b10:	4a09      	ldr	r2, [pc, #36]	; (8008b38 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b1a:	61da      	str	r2, [r3, #28]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b20:	621a      	str	r2, [r3, #32]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b26:	625a      	str	r2, [r3, #36]	; 0x24
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b2c:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	0802b98c 	.word	0x0802b98c

08008b3c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	889b      	ldrh	r3, [r3, #4]
 8008b50:	0adb      	lsrs	r3, r3, #11
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	4413      	add	r3, r2
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4413      	add	r3, r2
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b089      	sub	sp, #36	; 0x24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	460b      	mov	r3, r1
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	7b1b      	ldrb	r3, [r3, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e030      	b.n	8008bf0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a1a      	ldr	r2, [r3, #32]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	7b5b      	ldrb	r3, [r3, #13]
 8008b9a:	021b      	lsls	r3, r3, #8
 8008b9c:	b21b      	sxth	r3, r3
 8008b9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ba2:	b219      	sxth	r1, r3
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	7adb      	ldrb	r3, [r3, #11]
 8008ba8:	b21b      	sxth	r3, r3
 8008baa:	430b      	orrs	r3, r1
 8008bac:	b21b      	sxth	r3, r3
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	7b1b      	ldrb	r3, [r3, #12]
 8008bba:	837b      	strh	r3, [r7, #26]
 8008bbc:	8b7b      	ldrh	r3, [r7, #26]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d015      	beq.n	8008bee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	897a      	ldrh	r2, [r7, #10]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d103      	bne.n	8008bd4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008bd2:	e00d      	b.n	8008bf0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	897a      	ldrh	r2, [r7, #10]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d306      	bcc.n	8008bec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008bde:	8b7b      	ldrh	r3, [r7, #26]
 8008be0:	3b01      	subs	r3, #1
 8008be2:	837b      	strh	r3, [r7, #26]
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	3304      	adds	r3, #4
 8008be8:	61fb      	str	r3, [r7, #28]
 8008bea:	e7e7      	b.n	8008bbc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8008bec:	bf00      	nop
        }
    }
    return 0;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3724      	adds	r7, #36	; 0x24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	4801      	ldr	r0, [pc, #4]	; (8008c08 <__tcf_0+0xc>)
 8008c02:	f7ff fbc7 	bl	8008394 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	2400b260 	.word	0x2400b260

08008c0c <_Z23getFont_verdana_10_4bppv>:
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08e      	sub	sp, #56	; 0x38
 8008c10:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008c12:	4b21      	ldr	r3, [pc, #132]	; (8008c98 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	f3bf 8f5b 	dmb	ish
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bf0c      	ite	eq
 8008c24:	2301      	moveq	r3, #1
 8008c26:	2300      	movne	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d030      	beq.n	8008c90 <_Z23getFont_verdana_10_4bppv+0x84>
 8008c2e:	481a      	ldr	r0, [pc, #104]	; (8008c98 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008c30:	f01e feff 	bl	8027a32 <__cxa_guard_acquire>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bf14      	ite	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	2300      	moveq	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d025      	beq.n	8008c90 <_Z23getFont_verdana_10_4bppv+0x84>
 8008c44:	2300      	movs	r3, #0
 8008c46:	930c      	str	r3, [sp, #48]	; 0x30
 8008c48:	2300      	movs	r3, #0
 8008c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c50:	233f      	movs	r3, #63	; 0x3f
 8008c52:	9309      	str	r3, [sp, #36]	; 0x24
 8008c54:	4b11      	ldr	r3, [pc, #68]	; (8008c9c <_Z23getFont_verdana_10_4bppv+0x90>)
 8008c56:	9308      	str	r3, [sp, #32]
 8008c58:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <_Z23getFont_verdana_10_4bppv+0x94>)
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9306      	str	r3, [sp, #24]
 8008c60:	2300      	movs	r3, #0
 8008c62:	9305      	str	r3, [sp, #20]
 8008c64:	2301      	movs	r3, #1
 8008c66:	9304      	str	r3, [sp, #16]
 8008c68:	2304      	movs	r3, #4
 8008c6a:	9303      	str	r3, [sp, #12]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9302      	str	r3, [sp, #8]
 8008c70:	2300      	movs	r3, #0
 8008c72:	9301      	str	r3, [sp, #4]
 8008c74:	230a      	movs	r3, #10
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	230a      	movs	r3, #10
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	4909      	ldr	r1, [pc, #36]	; (8008ca4 <_Z23getFont_verdana_10_4bppv+0x98>)
 8008c7e:	480a      	ldr	r0, [pc, #40]	; (8008ca8 <_Z23getFont_verdana_10_4bppv+0x9c>)
 8008c80:	f7ff ff1c 	bl	8008abc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008c84:	4809      	ldr	r0, [pc, #36]	; (8008cac <_Z23getFont_verdana_10_4bppv+0xa0>)
 8008c86:	f01e ff1f 	bl	8027ac8 <atexit>
 8008c8a:	4803      	ldr	r0, [pc, #12]	; (8008c98 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008c8c:	f01e fedd 	bl	8027a4a <__cxa_guard_release>
    return verdana_10_4bpp;
 8008c90:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	2400b28c 	.word	0x2400b28c
 8008c9c:	0802caa4 	.word	0x0802caa4
 8008ca0:	0802cac0 	.word	0x0802cac0
 8008ca4:	900007c4 	.word	0x900007c4
 8008ca8:	2400b260 	.word	0x2400b260
 8008cac:	08008bfd 	.word	0x08008bfd

08008cb0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <__tcf_0+0xc>)
 8008cb6:	f7ff fb6d 	bl	8008394 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	2400b290 	.word	0x2400b290

08008cc0 <_Z23getFont_verdana_20_4bppv>:
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08e      	sub	sp, #56	; 0x38
 8008cc4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008cc6:	4b21      	ldr	r3, [pc, #132]	; (8008d4c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	f3bf 8f5b 	dmb	ish
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bf0c      	ite	eq
 8008cd8:	2301      	moveq	r3, #1
 8008cda:	2300      	movne	r3, #0
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d030      	beq.n	8008d44 <_Z23getFont_verdana_20_4bppv+0x84>
 8008ce2:	481a      	ldr	r0, [pc, #104]	; (8008d4c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008ce4:	f01e fea5 	bl	8027a32 <__cxa_guard_acquire>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bf14      	ite	ne
 8008cee:	2301      	movne	r3, #1
 8008cf0:	2300      	moveq	r3, #0
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d025      	beq.n	8008d44 <_Z23getFont_verdana_20_4bppv+0x84>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d00:	2300      	movs	r3, #0
 8008d02:	930a      	str	r3, [sp, #40]	; 0x28
 8008d04:	233f      	movs	r3, #63	; 0x3f
 8008d06:	9309      	str	r3, [sp, #36]	; 0x24
 8008d08:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <_Z23getFont_verdana_20_4bppv+0x90>)
 8008d0a:	9308      	str	r3, [sp, #32]
 8008d0c:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <_Z23getFont_verdana_20_4bppv+0x94>)
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	2301      	movs	r3, #1
 8008d12:	9306      	str	r3, [sp, #24]
 8008d14:	2301      	movs	r3, #1
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	2301      	movs	r3, #1
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	9303      	str	r3, [sp, #12]
 8008d20:	2300      	movs	r3, #0
 8008d22:	9302      	str	r3, [sp, #8]
 8008d24:	2300      	movs	r3, #0
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	2314      	movs	r3, #20
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2318      	movs	r3, #24
 8008d2e:	2215      	movs	r2, #21
 8008d30:	4909      	ldr	r1, [pc, #36]	; (8008d58 <_Z23getFont_verdana_20_4bppv+0x98>)
 8008d32:	480a      	ldr	r0, [pc, #40]	; (8008d5c <_Z23getFont_verdana_20_4bppv+0x9c>)
 8008d34:	f7ff fec2 	bl	8008abc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008d38:	4809      	ldr	r0, [pc, #36]	; (8008d60 <_Z23getFont_verdana_20_4bppv+0xa0>)
 8008d3a:	f01e fec5 	bl	8027ac8 <atexit>
 8008d3e:	4803      	ldr	r0, [pc, #12]	; (8008d4c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008d40:	f01e fe83 	bl	8027a4a <__cxa_guard_release>
    return verdana_20_4bpp;
 8008d44:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	2400b2bc 	.word	0x2400b2bc
 8008d50:	0802caa8 	.word	0x0802caa8
 8008d54:	0802cac4 	.word	0x0802cac4
 8008d58:	900007d4 	.word	0x900007d4
 8008d5c:	2400b290 	.word	0x2400b290
 8008d60:	08008cb1 	.word	0x08008cb1

08008d64 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	4801      	ldr	r0, [pc, #4]	; (8008d70 <__tcf_0+0xc>)
 8008d6a:	f7ff fb13 	bl	8008394 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	2400b2c0 	.word	0x2400b2c0

08008d74 <_Z23getFont_verdana_40_4bppv>:
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08e      	sub	sp, #56	; 0x38
 8008d78:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008d7a:	4b21      	ldr	r3, [pc, #132]	; (8008e00 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	f3bf 8f5b 	dmb	ish
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	f003 0301 	and.w	r3, r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2301      	moveq	r3, #1
 8008d8e:	2300      	movne	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d030      	beq.n	8008df8 <_Z23getFont_verdana_40_4bppv+0x84>
 8008d96:	481a      	ldr	r0, [pc, #104]	; (8008e00 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008d98:	f01e fe4b 	bl	8027a32 <__cxa_guard_acquire>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bf14      	ite	ne
 8008da2:	2301      	movne	r3, #1
 8008da4:	2300      	moveq	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d025      	beq.n	8008df8 <_Z23getFont_verdana_40_4bppv+0x84>
 8008dac:	2300      	movs	r3, #0
 8008dae:	930c      	str	r3, [sp, #48]	; 0x30
 8008db0:	2300      	movs	r3, #0
 8008db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db4:	2300      	movs	r3, #0
 8008db6:	930a      	str	r3, [sp, #40]	; 0x28
 8008db8:	233f      	movs	r3, #63	; 0x3f
 8008dba:	9309      	str	r3, [sp, #36]	; 0x24
 8008dbc:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <_Z23getFont_verdana_40_4bppv+0x90>)
 8008dbe:	9308      	str	r3, [sp, #32]
 8008dc0:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <_Z23getFont_verdana_40_4bppv+0x94>)
 8008dc2:	9307      	str	r3, [sp, #28]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9306      	str	r3, [sp, #24]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	9305      	str	r3, [sp, #20]
 8008dcc:	2301      	movs	r3, #1
 8008dce:	9304      	str	r3, [sp, #16]
 8008dd0:	2304      	movs	r3, #4
 8008dd2:	9303      	str	r3, [sp, #12]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9302      	str	r3, [sp, #8]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9301      	str	r3, [sp, #4]
 8008ddc:	2328      	movs	r3, #40	; 0x28
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	2328      	movs	r3, #40	; 0x28
 8008de2:	2201      	movs	r2, #1
 8008de4:	4909      	ldr	r1, [pc, #36]	; (8008e0c <_Z23getFont_verdana_40_4bppv+0x98>)
 8008de6:	480a      	ldr	r0, [pc, #40]	; (8008e10 <_Z23getFont_verdana_40_4bppv+0x9c>)
 8008de8:	f7ff fe68 	bl	8008abc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008dec:	4809      	ldr	r0, [pc, #36]	; (8008e14 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8008dee:	f01e fe6b 	bl	8027ac8 <atexit>
 8008df2:	4803      	ldr	r0, [pc, #12]	; (8008e00 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008df4:	f01e fe29 	bl	8027a4a <__cxa_guard_release>
    return verdana_40_4bpp;
 8008df8:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	2400b2ec 	.word	0x2400b2ec
 8008e04:	0802cabc 	.word	0x0802cabc
 8008e08:	0802cac8 	.word	0x0802cac8
 8008e0c:	900008fc 	.word	0x900008fc
 8008e10:	2400b2c0 	.word	0x2400b2c0
 8008e14:	08008d65 	.word	0x08008d65

08008e18 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	460b      	mov	r3, r1
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8008e26:	2300      	movs	r3, #0
    }
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008e3c:	2300      	movs	r3, #0
    }
 8008e3e:	4618      	mov	r0, r3
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008e52:	2300      	movs	r3, #0
    }
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8008e6e:	4a07      	ldr	r2, [pc, #28]	; (8008e8c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6013      	str	r3, [r2, #0]
        fonts = f;
 8008e74:	4a06      	ldr	r2, [pc, #24]	; (8008e90 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8008e7a:	4a06      	ldr	r2, [pc, #24]	; (8008e94 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	8013      	strh	r3, [r2, #0]
    }
 8008e80:	bf00      	nop
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	240262b4 	.word	0x240262b4
 8008e90:	240262bc 	.word	0x240262bc
 8008e94:	240262b8 	.word	0x240262b8

08008e98 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008e98:	b40e      	push	{r1, r2, r3}
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8008ea2:	f107 0320 	add.w	r3, r7, #32
 8008ea6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	69fa      	ldr	r2, [r7, #28]
 8008eac:	2100      	movs	r1, #0
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f014 fe54 	bl	801db5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008eb8:	89fb      	ldrh	r3, [r7, #14]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ec4:	b003      	add	sp, #12
 8008ec6:	4770      	bx	lr

08008ec8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008ec8:	b40c      	push	{r2, r3}
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8008ed6:	f107 031c 	add.w	r3, r7, #28
 8008eda:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008edc:	78f9      	ldrb	r1, [r7, #3]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f014 fe3a 	bl	801db5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008eec:	89fb      	ldrh	r3, [r7, #14]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ef8:	b002      	add	sp, #8
 8008efa:	4770      	bx	lr

08008efc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d016      	beq.n	8008f3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3322      	adds	r3, #34	; 0x22
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	8adb      	ldrh	r3, [r3, #22]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d105      	bne.n	8008f2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8008f1e:	4b43      	ldr	r3, [pc, #268]	; (800902c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008f20:	4a43      	ldr	r2, [pc, #268]	; (8009030 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008f22:	21c5      	movs	r1, #197	; 0xc5
 8008f24:	4843      	ldr	r0, [pc, #268]	; (8009034 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008f26:	f01e fdb1 	bl	8027a8c <__assert_func>
            return buffer[pos];
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	8a9b      	ldrh	r3, [r3, #20]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e000      	b.n	8008f40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d06a      	beq.n	800901a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f016 f8d1 	bl	801f0ec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3322      	adds	r3, #34	; 0x22
 8008f4e:	623b      	str	r3, [r7, #32]
 8008f50:	2301      	movs	r3, #1
 8008f52:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	8adb      	ldrh	r3, [r3, #22]
 8008f58:	8bfa      	ldrh	r2, [r7, #30]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d305      	bcc.n	8008f6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8008f5e:	4b36      	ldr	r3, [pc, #216]	; (8009038 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8008f60:	4a36      	ldr	r2, [pc, #216]	; (800903c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8008f62:	21cb      	movs	r1, #203	; 0xcb
 8008f64:	4833      	ldr	r0, [pc, #204]	; (8009034 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008f66:	f01e fd91 	bl	8027a8c <__assert_func>
            const uint16_t index = pos + offset;
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	8a9a      	ldrh	r2, [r3, #20]
 8008f6e:	8bfb      	ldrh	r3, [r7, #30]
 8008f70:	4413      	add	r3, r2
 8008f72:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8008f74:	8bbb      	ldrh	r3, [r7, #28]
 8008f76:	2b09      	cmp	r3, #9
 8008f78:	d801      	bhi.n	8008f7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8008f7a:	8bbb      	ldrh	r3, [r7, #28]
 8008f7c:	e001      	b.n	8008f82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008f7e:	8bbb      	ldrh	r3, [r7, #28]
 8008f80:	3b0a      	subs	r3, #10
 8008f82:	6a3a      	ldr	r2, [r7, #32]
 8008f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f88:	f640 123f 	movw	r2, #2367	; 0x93f
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	bf0c      	ite	eq
 8008f90:	2301      	moveq	r3, #1
 8008f92:	2300      	movne	r3, #0
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d03f      	beq.n	800901a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3322      	adds	r3, #34	; 0x22
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	3222      	adds	r2, #34	; 0x22
 8008fa2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	8ad2      	ldrh	r2, [r2, #22]
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	d105      	bne.n	8008fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008fac:	4b1f      	ldr	r3, [pc, #124]	; (800902c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008fae:	4a20      	ldr	r2, [pc, #128]	; (8009030 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008fb0:	21c5      	movs	r1, #197	; 0xc5
 8008fb2:	4820      	ldr	r0, [pc, #128]	; (8009034 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008fb4:	f01e fd6a 	bl	8027a8c <__assert_func>
            return buffer[pos];
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	8a92      	ldrh	r2, [r2, #20]
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008fc4:	613b      	str	r3, [r7, #16]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	8adb      	ldrh	r3, [r3, #22]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d806      	bhi.n	8008fe0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8008fd2:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008fd4:	4a1b      	ldr	r2, [pc, #108]	; (8009044 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008fd6:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8008fda:	4816      	ldr	r0, [pc, #88]	; (8009034 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008fdc:	f01e fd56 	bl	8027a8c <__assert_func>
            const uint16_t index = pos + 1;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	8a9b      	ldrh	r3, [r3, #20]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008fe8:	89bb      	ldrh	r3, [r7, #12]
 8008fea:	2b09      	cmp	r3, #9
 8008fec:	d801      	bhi.n	8008ff2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008fee:	89bb      	ldrh	r3, [r7, #12]
 8008ff0:	e000      	b.n	8008ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	89f9      	ldrh	r1, [r7, #14]
 8008ff8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008ffc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3322      	adds	r3, #34	; 0x22
 8009002:	61bb      	str	r3, [r7, #24]
 8009004:	f640 133f 	movw	r3, #2367	; 0x93f
 8009008:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	8a9b      	ldrh	r3, [r3, #20]
 800900e:	4619      	mov	r1, r3
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	8afa      	ldrh	r2, [r7, #22]
 8009014:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009018:	bf00      	nop
        }
    }
    return getNextChar();
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f015 ff68 	bl	801eef0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009020:	4603      	mov	r3, r0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3728      	adds	r7, #40	; 0x28
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	0802aaa0 	.word	0x0802aaa0
 8009030:	0802aaac 	.word	0x0802aaac
 8009034:	0802ab58 	.word	0x0802ab58
 8009038:	0802aba4 	.word	0x0802aba4
 800903c:	0802abb4 	.word	0x0802abb4
 8009040:	0802ac88 	.word	0x0802ac88
 8009044:	0802ac94 	.word	0x0802ac94

08009048 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f015 ff16 	bl	801ee82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009056:	bf00      	nop
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b088      	sub	sp, #32
 8009062:	af02      	add	r7, sp, #8
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	1d38      	adds	r0, r7, #4
 8009068:	e880 0006 	stmia.w	r0, {r1, r2}
 800906c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800906e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009072:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8009074:	1d39      	adds	r1, r7, #4
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f013 f9fc 	bl	801c480 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8009088:	bf00      	nop
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8009090:	b590      	push	{r4, r7, lr}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800909e:	88fb      	ldrh	r3, [r7, #6]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d127      	bne.n	80090f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	4a1e      	ldr	r2, [pc, #120]	; (8009120 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80090a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d016      	beq.n	80090de <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	4a1b      	ldr	r2, [pc, #108]	; (8009120 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80090b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090b8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	4413      	add	r3, r2
 80090c2:	4a18      	ldr	r2, [pc, #96]	; (8009124 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80090c4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	4a16      	ldr	r2, [pc, #88]	; (8009128 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80090d0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	4413      	add	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	e00a      	b.n	80090f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80090de:	4b11      	ldr	r3, [pc, #68]	; (8009124 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80090e0:	4a12      	ldr	r2, [pc, #72]	; (800912c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80090e2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80090e4:	4a12      	ldr	r2, [pc, #72]	; (8009130 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80090e6:	4b10      	ldr	r3, [pc, #64]	; (8009128 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80090e8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80090ea:	88fb      	ldrh	r3, [r7, #6]
 80090ec:	4a11      	ldr	r2, [pc, #68]	; (8009134 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80090ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090f2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00d      	beq.n	8009116 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80090fa:	4a0f      	ldr	r2, [pc, #60]	; (8009138 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009100:	f000 f83e 	bl	8009180 <_ZN17TypedTextDatabase8getFontsEv>
 8009104:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8009106:	f000 f833 	bl	8009170 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800910a:	4603      	mov	r3, r0
 800910c:	461a      	mov	r2, r3
 800910e:	4621      	mov	r1, r4
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f7ff fea5 	bl	8008e60 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	bd90      	pop	{r4, r7, pc}
 800911e:	bf00      	nop
 8009120:	2400b2f0 	.word	0x2400b2f0
 8009124:	2400b2f8 	.word	0x2400b2f8
 8009128:	2400b2fc 	.word	0x2400b2fc
 800912c:	90000914 	.word	0x90000914
 8009130:	9000090c 	.word	0x9000090c
 8009134:	90000960 	.word	0x90000960
 8009138:	2400b2f4 	.word	0x2400b2f4

0800913c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8009148:	4b07      	ldr	r3, [pc, #28]	; (8009168 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	4b07      	ldr	r3, [pc, #28]	; (800916c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800914e:	6819      	ldr	r1, [r3, #0]
 8009150:	887b      	ldrh	r3, [r7, #2]
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	440b      	add	r3, r1
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	4413      	add	r3, r2
}
 800915c:	4618      	mov	r0, r3
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	2400b2f8 	.word	0x2400b2f8
 800916c:	2400b2fc 	.word	0x2400b2fc

08009170 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8009174:	2302      	movs	r3, #2
}
 8009176:	4618      	mov	r0, r3
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8009180:	b480      	push	{r7}
 8009182:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8009184:	4b02      	ldr	r3, [pc, #8]	; (8009190 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8009186:	4618      	mov	r0, r3
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	2400b300 	.word	0x2400b300

08009194 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d113      	bne.n	80091cc <_Z41__static_initialization_and_destruction_0ii+0x38>
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d10e      	bne.n	80091cc <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80091ae:	f7ff fd87 	bl	8008cc0 <_Z23getFont_verdana_20_4bppv>
 80091b2:	4603      	mov	r3, r0
};
 80091b4:	4a07      	ldr	r2, [pc, #28]	; (80091d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80091b6:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80091b8:	f7ff fddc 	bl	8008d74 <_Z23getFont_verdana_40_4bppv>
 80091bc:	4603      	mov	r3, r0
};
 80091be:	4a05      	ldr	r2, [pc, #20]	; (80091d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80091c0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80091c2:	f7ff fd23 	bl	8008c0c <_Z23getFont_verdana_10_4bppv>
 80091c6:	4603      	mov	r3, r0
};
 80091c8:	4a02      	ldr	r2, [pc, #8]	; (80091d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80091ca:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80091cc:	bf00      	nop
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	2400b300 	.word	0x2400b300

080091d8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
 80091dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80091e0:	2001      	movs	r0, #1
 80091e2:	f7ff ffd7 	bl	8009194 <_Z41__static_initialization_and_destruction_0ii>
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
    {
    }
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
    {
    }
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
    {
 8009218:	4a04      	ldr	r2, [pc, #16]	; (800922c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]
    }
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	0802ba80 	.word	0x0802ba80

08009230 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
    }
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7ff ffe9 	bl	8009210 <_ZN8touchgfx9PresenterD1Ev>
 800923e:	2104      	movs	r1, #4
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f01e fbf4 	bl	8027a2e <_ZdlPvj>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
    {
 8009258:	4a04      	ldr	r2, [pc, #16]	; (800926c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	601a      	str	r2, [r3, #0]
    }
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4618      	mov	r0, r3
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	0802ba80 	.word	0x0802ba80

08009270 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	4a06      	ldr	r2, [pc, #24]	; (8009294 <_ZN13ModelListenerC1Ev+0x24>)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	605a      	str	r2, [r3, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	0802ba70 	.word	0x0802ba70

08009298 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	4a04      	ldr	r2, [pc, #16]	; (80092b4 <_ZN13ModelListenerD1Ev+0x1c>)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	0802ba70 	.word	0x0802ba70

080092b8 <_ZN13ModelListenerD0Ev>:
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff ffe9 	bl	8009298 <_ZN13ModelListenerD1Ev>
 80092c6:	2108      	movs	r1, #8
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f01e fbb0 	bl	8027a2e <_ZdlPvj>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <_ZN18AppScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~AppScreenPresenter() {};
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	4a09      	ldr	r2, [pc, #36]	; (8009308 <_ZN18AppScreenPresenterD1Ev+0x30>)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	4a09      	ldr	r2, [pc, #36]	; (800930c <_ZN18AppScreenPresenterD1Ev+0x34>)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	605a      	str	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3304      	adds	r3, #4
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff ffd1 	bl	8009298 <_ZN13ModelListenerD1Ev>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff ff89 	bl	8009210 <_ZN8touchgfx9PresenterD1Ev>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	0802ba48 	.word	0x0802ba48
 800930c:	0802ba60 	.word	0x0802ba60

08009310 <_ZThn4_N18AppScreenPresenterD1Ev>:
 8009310:	f1a0 0004 	sub.w	r0, r0, #4
 8009314:	e7e0      	b.n	80092d8 <_ZN18AppScreenPresenterD1Ev>
 8009316:	bf00      	nop

08009318 <_ZN18AppScreenPresenterD0Ev>:
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff ffd9 	bl	80092d8 <_ZN18AppScreenPresenterD1Ev>
 8009326:	2110      	movs	r1, #16
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f01e fb80 	bl	8027a2e <_ZdlPvj>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <_ZThn4_N18AppScreenPresenterD0Ev>:
 8009338:	f1a0 0004 	sub.w	r0, r0, #4
 800933c:	e7ec      	b.n	8009318 <_ZN18AppScreenPresenterD0Ev>
	...

08009340 <_ZN18AppScreenPresenterC1ER13AppScreenView>:
#include <gui/appscreen_screen/AppScreenView.hpp>
#include <gui/appscreen_screen/AppScreenPresenter.hpp>

AppScreenPresenter::AppScreenPresenter(AppScreenView& v)
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
    : view(v)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff ff7f 	bl	8009250 <_ZN8touchgfx9PresenterC1Ev>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3304      	adds	r3, #4
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff ff8a 	bl	8009270 <_ZN13ModelListenerC1Ev>
 800935c:	4a06      	ldr	r2, [pc, #24]	; (8009378 <_ZN18AppScreenPresenterC1ER13AppScreenView+0x38>)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	4a06      	ldr	r2, [pc, #24]	; (800937c <_ZN18AppScreenPresenterC1ER13AppScreenView+0x3c>)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	605a      	str	r2, [r3, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	60da      	str	r2, [r3, #12]
{

}
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	0802ba48 	.word	0x0802ba48
 800937c:	0802ba60 	.word	0x0802ba60

08009380 <_ZN18AppScreenPresenter8activateEv>:

void AppScreenPresenter::activate()
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]

}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <_ZN18AppScreenPresenter10deactivateEv>:

void AppScreenPresenter::deactivate()
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]

}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 80093b0:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d105      	bne.n	80093c4 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 80093b8:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 80093ba:	4a07      	ldr	r2, [pc, #28]	; (80093d8 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 80093bc:	2187      	movs	r1, #135	; 0x87
 80093be:	4807      	ldr	r0, [pc, #28]	; (80093dc <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 80093c0:	f01e fb64 	bl	8027a8c <__assert_func>
        return bitmapId;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	881b      	ldrh	r3, [r3, #0]
    }
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	240262ec 	.word	0x240262ec
 80093d4:	0802ad48 	.word	0x0802ad48
 80093d8:	0802ad84 	.word	0x0802ad84
 80093dc:	0802adb8 	.word	0x0802adb8

080093e0 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 80093e0:	b590      	push	{r4, r7, lr}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	332e      	adds	r3, #46	; 0x2e
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff ffdb 	bl	80093a8 <_ZNK8touchgfx6Bitmap5getIdEv>
 80093f2:	4603      	mov	r3, r0
 80093f4:	461c      	mov	r4, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3334      	adds	r3, #52	; 0x34
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff ffd4 	bl	80093a8 <_ZNK8touchgfx6Bitmap5getIdEv>
 8009400:	4603      	mov	r3, r0
 8009402:	429c      	cmp	r4, r3
 8009404:	bf0c      	ite	eq
 8009406:	2301      	moveq	r3, #1
 8009408:	2300      	movne	r3, #0
 800940a:	b2db      	uxtb	r3, r3
    }
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	bd90      	pop	{r4, r7, pc}

08009414 <_ZN13AppScreenViewD1Ev>:

class AppScreenView : public AppScreenViewBase
{
public:
    AppScreenView();
    virtual ~AppScreenView() {}
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	4a05      	ldr	r2, [pc, #20]	; (8009434 <_ZN13AppScreenViewD1Ev+0x20>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe fcc1 	bl	8007dac <_ZN17AppScreenViewBaseD1Ev>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	0802ba98 	.word	0x0802ba98

08009438 <_ZN13AppScreenViewD0Ev>:
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff ffe7 	bl	8009414 <_ZN13AppScreenViewD1Ev>
 8009446:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f01e faef 	bl	8027a2e <_ZdlPvj>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <_ZN13AppScreenViewC1Ev>:
#include <gui/appscreen_screen/AppScreenView.hpp>

AppScreenView::AppScreenView()
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe fa9a 	bl	80079a0 <_ZN17AppScreenViewBaseC1Ev>
 800946c:	4a03      	ldr	r2, [pc, #12]	; (800947c <_ZN13AppScreenViewC1Ev+0x20>)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	601a      	str	r2, [r3, #0]
{

}
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	0802ba98 	.word	0x0802ba98

08009480 <_ZN13AppScreenView11setupScreenEv>:

void AppScreenView::setupScreen()
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
    AppScreenViewBase::setupScreen();
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe fcdd 	bl	8007e4a <_ZN17AppScreenViewBase11setupScreenEv>
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <_ZN13AppScreenView14tearDownScreenEv>:

void AppScreenView::tearDownScreen()
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
    AppScreenViewBase::tearDownScreen();
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fe f862 	bl	800756c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <_ZN13AppScreenView20ButtonToggleFunctionEv>:

/*@Balaji303 Modified start*/
void AppScreenView::ButtonToggleFunction()
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
	if(toggleButton1.getState())
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3398      	adds	r3, #152	; 0x98
 80094bc:	4618      	mov	r0, r3
 80094be:	f7ff ff8f 	bl	80093e0 <_ZNK8touchgfx12ToggleButton8getStateEv>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d016      	beq.n	80094f6 <_ZN13AppScreenView20ButtonToggleFunctionEv+0x46>
	{
		//When toggleButton1 clicked hide OFF_LED
		//Hide OFF_LED
		OFF_LED.setVisible(false);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	33d0      	adds	r3, #208	; 0xd0
 80094cc:	2100      	movs	r1, #0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fd fff3 	bl	80074ba <_ZN8touchgfx8Drawable10setVisibleEb>
		OFF_LED.invalidate();
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	33d0      	adds	r3, #208	; 0xd0
 80094d8:	4618      	mov	r0, r3
 80094da:	f014 fc6a 	bl	801ddb2 <_ZNK8touchgfx8Drawable10invalidateEv>

		//Interaction2
		//When toggleButton1 clicked show ON_LED
		//Show ON_LED
		ON_LED.setVisible(true);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	33fc      	adds	r3, #252	; 0xfc
 80094e2:	2101      	movs	r1, #1
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fd ffe8 	bl	80074ba <_ZN8touchgfx8Drawable10setVisibleEb>
		ON_LED.invalidate();
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	33fc      	adds	r3, #252	; 0xfc
 80094ee:	4618      	mov	r0, r3
 80094f0:	f014 fc5f 	bl	801ddb2 <_ZNK8touchgfx8Drawable10invalidateEv>
		//When toggleButton1 clicked show ON_LED
		//Hide ON_LED
		ON_LED.setVisible(false);
		ON_LED.invalidate();
	}
}
 80094f4:	e015      	b.n	8009522 <_ZN13AppScreenView20ButtonToggleFunctionEv+0x72>
		OFF_LED.setVisible(true);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	33d0      	adds	r3, #208	; 0xd0
 80094fa:	2101      	movs	r1, #1
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fd ffdc 	bl	80074ba <_ZN8touchgfx8Drawable10setVisibleEb>
		OFF_LED.invalidate();
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	33d0      	adds	r3, #208	; 0xd0
 8009506:	4618      	mov	r0, r3
 8009508:	f014 fc53 	bl	801ddb2 <_ZNK8touchgfx8Drawable10invalidateEv>
		ON_LED.setVisible(false);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	33fc      	adds	r3, #252	; 0xfc
 8009510:	2100      	movs	r1, #0
 8009512:	4618      	mov	r0, r3
 8009514:	f7fd ffd1 	bl	80074ba <_ZN8touchgfx8Drawable10setVisibleEb>
		ON_LED.invalidate();
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	33fc      	adds	r3, #252	; 0xfc
 800951c:	4618      	mov	r0, r3
 800951e:	f014 fc48 	bl	801ddb2 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8009522:	bf00      	nop
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	68b9      	ldr	r1, [r7, #8]
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff f81e 	bl	8008580 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009544:	4a03      	ldr	r2, [pc, #12]	; (8009554 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	601a      	str	r2, [r3, #0]
{

}
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	0802b170 	.word	0x0802b170

08009558 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
{

}
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <_ZN5Model4tickEv>:

void Model::tick()
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]

}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d103      	bne.n	80095a0 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8009598:	f04f 33ff 	mov.w	r3, #4294967295
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	e02c      	b.n	80095fa <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	891a      	ldrh	r2, [r3, #8]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	695a      	ldr	r2, [r3, #20]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a0c      	ldr	r2, [pc, #48]	; (8009604 <FT5336_RegisterBusIO+0x7c>)
 80095d4:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a0b      	ldr	r2, [pc, #44]	; (8009608 <FT5336_RegisterBusIO+0x80>)
 80095da:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d004      	beq.n	80095f4 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4798      	blx	r3
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	e002      	b.n	80095fa <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80095f4:	f04f 33ff 	mov.w	r3, #4294967295
 80095f8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80095fa:	68fb      	ldr	r3, [r7, #12]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	08009a01 	.word	0x08009a01
 8009608:	08009a35 	.word	0x08009a35

0800960c <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2201      	movs	r2, #1
 800961a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	2201      	movs	r2, #1
 8009620:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2205      	movs	r2, #5
 8009626:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800962e:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	f44f 7288 	mov.w	r2, #272	; 0x110
 8009636:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10d      	bne.n	8009678 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f987 	bl	8009976 <FT5336_DisableIT>
 8009668:	4602      	mov	r2, r0
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4413      	add	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800967e:	f04f 33ff 	mov.w	r3, #4294967295
 8009682:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009684:	68fb      	ldr	r3, [r7, #12]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800968e:	b480      	push	{r7}
 8009690:	b085      	sub	sp, #20
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d103      	bne.n	80096ac <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 80096ac:	68fb      	ldr	r3, [r7, #12]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f103 0218 	add.w	r2, r3, #24
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f000 fa25 	bl	8009b22 <ft5336_radian_value>
 80096d8:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f103 0218 	add.w	r2, r3, #24
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f000 fa2b 	bl	8009b44 <ft5336_offset_left_right>
 80096ee:	4602      	mov	r2, r0
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f103 0218 	add.w	r2, r3, #24
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	4619      	mov	r1, r3
 8009704:	4610      	mov	r0, r2
 8009706:	f000 fa2e 	bl	8009b66 <ft5336_offset_up_down>
 800970a:	4602      	mov	r2, r0
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4413      	add	r3, r2
 8009710:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f103 0218 	add.w	r2, r3, #24
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f000 fa31 	bl	8009b88 <ft5336_disatnce_left_right>
 8009726:	4602      	mov	r2, r0
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4413      	add	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f103 0218 	add.w	r2, r3, #24
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	b2db      	uxtb	r3, r3
 800973a:	4619      	mov	r1, r3
 800973c:	4610      	mov	r0, r2
 800973e:	f000 fa34 	bl	8009baa <ft5336_distance_up_down>
 8009742:	4602      	mov	r2, r0
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4413      	add	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f103 0218 	add.w	r2, r3, #24
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	4619      	mov	r1, r3
 8009758:	4610      	mov	r0, r2
 800975a:	f000 fa37 	bl	8009bcc <ft5336_distance_zoom>
 800975e:	4602      	mov	r2, r0
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4413      	add	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800976c:	f04f 33ff 	mov.w	r3, #4294967295
 8009770:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009772:	68fb      	ldr	r3, [r7, #12]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	3318      	adds	r3, #24
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fa3f 	bl	8009c10 <ft5336_chip_id>
 8009792:	4603      	mov	r3, r0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f908 	bl	80099c0 <FT5336_DetectTouch>
 80097b0:	4603      	mov	r3, r0
 80097b2:	461a      	mov	r2, r3
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f103 0018 	add.w	r0, r3, #24
 80097be:	f107 0208 	add.w	r2, r7, #8
 80097c2:	2304      	movs	r3, #4
 80097c4:	2103      	movs	r1, #3
 80097c6:	f000 f94f 	bl	8009a68 <ft5336_read_reg>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	e00f      	b.n	80097f8 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80097d8:	7a3b      	ldrb	r3, [r7, #8]
 80097da:	021b      	lsls	r3, r3, #8
 80097dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80097e0:	7a7a      	ldrb	r2, [r7, #9]
 80097e2:	431a      	orrs	r2, r3
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80097e8:	7abb      	ldrb	r3, [r7, #10]
 80097ea:	021b      	lsls	r3, r3, #8
 80097ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80097f0:	7afa      	ldrb	r2, [r7, #11]
 80097f2:	431a      	orrs	r2, r3
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097f8:	68fb      	ldr	r3, [r7, #12]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b08c      	sub	sp, #48	; 0x30
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f8d5 	bl	80099c0 <FT5336_DetectTouch>
 8009816:	4603      	mov	r3, r0
 8009818:	461a      	mov	r2, r3
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f103 0018 	add.w	r0, r3, #24
 8009824:	f107 0208 	add.w	r2, r7, #8
 8009828:	231e      	movs	r3, #30
 800982a:	2103      	movs	r1, #3
 800982c:	f000 f91c 	bl	8009a68 <ft5336_read_reg>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 8009836:	f04f 33ff 	mov.w	r3, #4294967295
 800983a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800983c:	e077      	b.n	800992e <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800983e:	2300      	movs	r3, #0
 8009840:	62bb      	str	r3, [r7, #40]	; 0x28
 8009842:	e071      	b.n	8009928 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8009844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009846:	4613      	mov	r3, r2
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	4413      	add	r3, r2
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	3330      	adds	r3, #48	; 0x30
 8009850:	443b      	add	r3, r7
 8009852:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009856:	021b      	lsls	r3, r3, #8
 8009858:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800985c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800985e:	4613      	mov	r3, r2
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	4413      	add	r3, r2
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	3301      	adds	r3, #1
 8009868:	3330      	adds	r3, #48	; 0x30
 800986a:	443b      	add	r3, r7
 800986c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009870:	ea41 0203 	orr.w	r2, r1, r3
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	440b      	add	r3, r1
 800987c:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800987e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009880:	4613      	mov	r3, r2
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	4413      	add	r3, r2
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	3302      	adds	r3, #2
 800988a:	3330      	adds	r3, #48	; 0x30
 800988c:	443b      	add	r3, r7
 800988e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009892:	021b      	lsls	r3, r3, #8
 8009894:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8009898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800989a:	4613      	mov	r3, r2
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	4413      	add	r3, r2
 80098a0:	005b      	lsls	r3, r3, #1
 80098a2:	3303      	adds	r3, #3
 80098a4:	3330      	adds	r3, #48	; 0x30
 80098a6:	443b      	add	r3, r7
 80098a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80098ac:	4319      	orrs	r1, r3
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098b2:	3206      	adds	r2, #6
 80098b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80098b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ba:	4613      	mov	r3, r2
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	4413      	add	r3, r2
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	3330      	adds	r3, #48	; 0x30
 80098c4:	443b      	add	r3, r7
 80098c6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80098ca:	099b      	lsrs	r3, r3, #6
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	4619      	mov	r1, r3
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098d4:	3210      	adds	r2, #16
 80098d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80098da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098dc:	4613      	mov	r3, r2
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4413      	add	r3, r2
 80098e2:	005b      	lsls	r3, r3, #1
 80098e4:	3304      	adds	r3, #4
 80098e6:	3330      	adds	r3, #48	; 0x30
 80098e8:	443b      	add	r3, r7
 80098ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80098ee:	4619      	mov	r1, r3
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	330a      	adds	r3, #10
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80098fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098fe:	4613      	mov	r3, r2
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4413      	add	r3, r2
 8009904:	005b      	lsls	r3, r3, #1
 8009906:	3305      	adds	r3, #5
 8009908:	3330      	adds	r3, #48	; 0x30
 800990a:	443b      	add	r3, r7
 800990c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009910:	091b      	lsrs	r3, r3, #4
 8009912:	b2db      	uxtb	r3, r3
 8009914:	4619      	mov	r1, r3
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	3314      	adds	r3, #20
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4413      	add	r3, r2
 8009920:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	3301      	adds	r3, #1
 8009926:	62bb      	str	r3, [r7, #40]	; 0x28
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	2b04      	cmp	r3, #4
 800992c:	d98a      	bls.n	8009844 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009930:	4618      	mov	r0, r3
 8009932:	3730      	adds	r7, #48	; 0x30
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3318      	adds	r3, #24
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	4618      	mov	r0, r3
 800994a:	f000 f8bb 	bl	8009ac4 <ft5336_gest_id>
 800994e:	4603      	mov	r3, r0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3318      	adds	r3, #24
 8009964:	2101      	movs	r1, #1
 8009966:	4618      	mov	r0, r3
 8009968:	f000 f941 	bl	8009bee <ft5336_g_mode>
 800996c:	4603      	mov	r3, r0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3318      	adds	r3, #24
 8009982:	2100      	movs	r1, #0
 8009984:	4618      	mov	r0, r3
 8009986:	f000 f932 	bl	8009bee <ft5336_g_mode>
 800998a:	4603      	mov	r3, r0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3318      	adds	r3, #24
 80099cc:	f107 020b 	add.w	r2, r7, #11
 80099d0:	4611      	mov	r1, r2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 f886 	bl	8009ae4 <ft5336_td_status>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 80099de:	f04f 33ff 	mov.w	r3, #4294967295
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	e007      	b.n	80099f6 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80099e6:	7afb      	ldrb	r3, [r7, #11]
 80099e8:	2b05      	cmp	r3, #5
 80099ea:	d902      	bls.n	80099f2 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	e001      	b.n	80099f6 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80099f2:	7afb      	ldrb	r3, [r7, #11]
 80099f4:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80099f6:	68fb      	ldr	r3, [r7, #12]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8009a00:	b590      	push	{r4, r7, lr}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	607a      	str	r2, [r7, #4]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	72fb      	strb	r3, [r7, #11]
 8009a10:	4613      	mov	r3, r2
 8009a12:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	691c      	ldr	r4, [r3, #16]
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	8918      	ldrh	r0, [r3, #8]
 8009a20:	7afb      	ldrb	r3, [r7, #11]
 8009a22:	b299      	uxth	r1, r3
 8009a24:	893b      	ldrh	r3, [r7, #8]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	47a0      	blx	r4
 8009a2a:	4603      	mov	r3, r0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	371c      	adds	r7, #28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd90      	pop	{r4, r7, pc}

08009a34 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	460b      	mov	r3, r1
 8009a42:	72fb      	strb	r3, [r7, #11]
 8009a44:	4613      	mov	r3, r2
 8009a46:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	68dc      	ldr	r4, [r3, #12]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	8918      	ldrh	r0, [r3, #8]
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	b299      	uxth	r1, r3
 8009a58:	893b      	ldrh	r3, [r7, #8]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	47a0      	blx	r4
 8009a5e:	4603      	mov	r3, r0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	371c      	adds	r7, #28
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd90      	pop	{r4, r7, pc}

08009a68 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8009a68:	b590      	push	{r4, r7, lr}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	607a      	str	r2, [r7, #4]
 8009a72:	461a      	mov	r2, r3
 8009a74:	460b      	mov	r3, r1
 8009a76:	72fb      	strb	r3, [r7, #11]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	685c      	ldr	r4, [r3, #4]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6898      	ldr	r0, [r3, #8]
 8009a84:	893b      	ldrh	r3, [r7, #8]
 8009a86:	7af9      	ldrb	r1, [r7, #11]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	47a0      	blx	r4
 8009a8c:	4603      	mov	r3, r0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd90      	pop	{r4, r7, pc}

08009a96 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8009a96:	b590      	push	{r4, r7, lr}
 8009a98:	b085      	sub	sp, #20
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	72fb      	strb	r3, [r7, #11]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681c      	ldr	r4, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6898      	ldr	r0, [r3, #8]
 8009ab2:	893b      	ldrh	r3, [r7, #8]
 8009ab4:	7af9      	ldrb	r1, [r7, #11]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	47a0      	blx	r4
 8009aba:	4603      	mov	r3, r0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd90      	pop	{r4, r7, pc}

08009ac4 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8009ace:	2301      	movs	r3, #1
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff ffc7 	bl	8009a68 <ft5336_read_reg>
 8009ada:	4603      	mov	r3, r0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8009aee:	2301      	movs	r3, #1
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	2102      	movs	r1, #2
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7ff ffb7 	bl	8009a68 <ft5336_read_reg>
 8009afa:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	f003 030f 	and.w	r3, r3, #15
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8009b18:	68fb      	ldr	r3, [r7, #12]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b082      	sub	sp, #8
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8009b2e:	1cfa      	adds	r2, r7, #3
 8009b30:	2301      	movs	r3, #1
 8009b32:	2191      	movs	r1, #145	; 0x91
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff ffae 	bl	8009a96 <ft5336_write_reg>
 8009b3a:	4603      	mov	r3, r0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8009b50:	1cfa      	adds	r2, r7, #3
 8009b52:	2301      	movs	r3, #1
 8009b54:	2192      	movs	r1, #146	; 0x92
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff ff9d 	bl	8009a96 <ft5336_write_reg>
 8009b5c:	4603      	mov	r3, r0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8009b72:	1cfa      	adds	r2, r7, #3
 8009b74:	2301      	movs	r3, #1
 8009b76:	2193      	movs	r1, #147	; 0x93
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff ff8c 	bl	8009a96 <ft5336_write_reg>
 8009b7e:	4603      	mov	r3, r0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8009b94:	1cfa      	adds	r2, r7, #3
 8009b96:	2301      	movs	r3, #1
 8009b98:	2194      	movs	r1, #148	; 0x94
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff ff7b 	bl	8009a96 <ft5336_write_reg>
 8009ba0:	4603      	mov	r3, r0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8009bb6:	1cfa      	adds	r2, r7, #3
 8009bb8:	2301      	movs	r3, #1
 8009bba:	2195      	movs	r1, #149	; 0x95
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff ff6a 	bl	8009a96 <ft5336_write_reg>
 8009bc2:	4603      	mov	r3, r0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8009bd8:	1cfa      	adds	r2, r7, #3
 8009bda:	2301      	movs	r3, #1
 8009bdc:	2196      	movs	r1, #150	; 0x96
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff ff59 	bl	8009a96 <ft5336_write_reg>
 8009be4:	4603      	mov	r3, r0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8009bfa:	1cfa      	adds	r2, r7, #3
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	21a4      	movs	r1, #164	; 0xa4
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7ff ff48 	bl	8009a96 <ft5336_write_reg>
 8009c06:	4603      	mov	r3, r0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	683a      	ldr	r2, [r7, #0]
 8009c1e:	21a8      	movs	r1, #168	; 0xa8
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff ff21 	bl	8009a68 <ft5336_read_reg>
 8009c26:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d107      	bne.n	8009c3e <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	781a      	ldrb	r2, [r3, #0]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009c56:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009c5e:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c66:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c6e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c76:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c7e:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c86:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c8e:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009c96:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8009c98:	2300      	movs	r3, #0
};
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b09c      	sub	sp, #112	; 0x70
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	460b      	mov	r3, r1
 8009cb0:	70fb      	strb	r3, [r7, #3]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 8009cb6:	f107 0320 	add.w	r3, r7, #32
 8009cba:	2250      	movs	r2, #80	; 0x50
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f01d ff74 	bl	8027bac <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8009cc4:	f107 030c 	add.w	r3, r7, #12
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	605a      	str	r2, [r3, #4]
 8009cce:	609a      	str	r2, [r3, #8]
 8009cd0:	60da      	str	r2, [r3, #12]
 8009cd2:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009cd4:	78fb      	ldrb	r3, [r7, #3]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <MX25LM51245G_AutoPollingMemReady+0x40>
 8009cda:	78bb      	ldrb	r3, [r7, #2]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d102      	bne.n	8009ce6 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8009ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce4:	e088      	b.n	8009df8 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009cea:	2300      	movs	r3, #0
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009cee:	78fb      	ldrb	r3, [r7, #3]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <MX25LM51245G_AutoPollingMemReady+0x52>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <MX25LM51245G_AutoPollingMemReady+0x54>
 8009cf8:	2304      	movs	r3, #4
 8009cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009cfc:	78bb      	ldrb	r3, [r7, #2]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d101      	bne.n	8009d06 <MX25LM51245G_AutoPollingMemReady+0x60>
 8009d02:	2308      	movs	r3, #8
 8009d04:	e000      	b.n	8009d08 <MX25LM51245G_AutoPollingMemReady+0x62>
 8009d06:	2300      	movs	r3, #0
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <MX25LM51245G_AutoPollingMemReady+0x6e>
 8009d10:	2300      	movs	r3, #0
 8009d12:	e000      	b.n	8009d16 <MX25LM51245G_AutoPollingMemReady+0x70>
 8009d14:	2310      	movs	r3, #16
 8009d16:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <MX25LM51245G_AutoPollingMemReady+0x7c>
 8009d1e:	2305      	movs	r3, #5
 8009d20:	e001      	b.n	8009d26 <MX25LM51245G_AutoPollingMemReady+0x80>
 8009d22:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8009d26:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <MX25LM51245G_AutoPollingMemReady+0x8c>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e001      	b.n	8009d36 <MX25LM51245G_AutoPollingMemReady+0x90>
 8009d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009d38:	78bb      	ldrb	r3, [r7, #2]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d102      	bne.n	8009d44 <MX25LM51245G_AutoPollingMemReady+0x9e>
 8009d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d42:	e000      	b.n	8009d46 <MX25LM51245G_AutoPollingMemReady+0xa0>
 8009d44:	2300      	movs	r3, #0
 8009d46:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009d48:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009d4c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009d56:	78fb      	ldrb	r3, [r7, #3]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8009d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d60:	e001      	b.n	8009d66 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8009d62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009d66:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009d68:	78bb      	ldrb	r3, [r7, #2]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d102      	bne.n	8009d74 <MX25LM51245G_AutoPollingMemReady+0xce>
 8009d6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d72:	e000      	b.n	8009d76 <MX25LM51245G_AutoPollingMemReady+0xd0>
 8009d74:	2300      	movs	r3, #0
 8009d76:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d101      	bne.n	8009d82 <MX25LM51245G_AutoPollingMemReady+0xdc>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e000      	b.n	8009d84 <MX25LM51245G_AutoPollingMemReady+0xde>
 8009d82:	2305      	movs	r3, #5
 8009d84:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009d86:	78bb      	ldrb	r3, [r7, #2]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d101      	bne.n	8009d90 <MX25LM51245G_AutoPollingMemReady+0xea>
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	e000      	b.n	8009d92 <MX25LM51245G_AutoPollingMemReady+0xec>
 8009d90:	2301      	movs	r3, #1
 8009d92:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009d94:	78bb      	ldrb	r3, [r7, #2]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d102      	bne.n	8009da0 <MX25LM51245G_AutoPollingMemReady+0xfa>
 8009d9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009d9e:	e000      	b.n	8009da2 <MX25LM51245G_AutoPollingMemReady+0xfc>
 8009da0:	2300      	movs	r3, #0
 8009da2:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009da4:	2300      	movs	r3, #0
 8009da6:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8009dac:	2301      	movs	r3, #1
 8009dae:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8009db0:	2300      	movs	r3, #0
 8009db2:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8009db4:	2310      	movs	r3, #16
 8009db6:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009db8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009dbc:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009dbe:	f107 0320 	add.w	r3, r7, #32
 8009dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f007 f901 	bl	8010fd0 <HAL_OSPI_Command>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 8009dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd8:	e00e      	b.n	8009df8 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009dda:	f107 030c 	add.w	r3, r7, #12
 8009dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f007 fa96 	bl	8011316 <HAL_OSPI_AutoPolling>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 8009df0:	f04f 33ff 	mov.w	r3, #4294967295
 8009df4:	e000      	b.n	8009df8 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3770      	adds	r7, #112	; 0x70
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b098      	sub	sp, #96	; 0x60
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8009e10:	f107 0310 	add.w	r3, r7, #16
 8009e14:	2250      	movs	r2, #80	; 0x50
 8009e16:	2100      	movs	r1, #0
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f01d fec7 	bl	8027bac <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8009e1e:	f107 0308 	add.w	r3, r7, #8
 8009e22:	2200      	movs	r2, #0
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8009e28:	78fb      	ldrb	r3, [r7, #3]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d105      	bne.n	8009e3a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8009e2e:	78bb      	ldrb	r3, [r7, #2]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 8009e34:	f04f 33ff 	mov.w	r3, #4294967295
 8009e38:	e088      	b.n	8009f4c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e000      	b.n	8009e4e <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 8009e4c:	2304      	movs	r3, #4
 8009e4e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009e50:	2300      	movs	r3, #0
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	e000      	b.n	8009e60 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 8009e5e:	2310      	movs	r3, #16
 8009e60:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8009e62:	78fb      	ldrb	r3, [r7, #3]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d106      	bne.n	8009e76 <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 8009e68:	78bb      	ldrb	r3, [r7, #2]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 8009e6e:	230b      	movs	r3, #11
 8009e70:	e003      	b.n	8009e7a <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8009e72:	230c      	movs	r3, #12
 8009e74:	e001      	b.n	8009e7a <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8009e76:	f64e 4313 	movw	r3, #60435	; 0xec13
 8009e7a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009e7c:	78fb      	ldrb	r3, [r7, #3]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d102      	bne.n	8009e88 <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 8009e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e86:	e001      	b.n	8009e8c <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8009e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8009e92:	78bb      	ldrb	r3, [r7, #2]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d102      	bne.n	8009e9e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 8009e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e9c:	e001      	b.n	8009ea2 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 8009e9e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009ea2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009ea8:	78fb      	ldrb	r3, [r7, #3]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d102      	bne.n	8009eb4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 8009eae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009eb2:	e001      	b.n	8009eb8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 8009eb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8009ebe:	78fb      	ldrb	r3, [r7, #3]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 8009ec4:	2308      	movs	r3, #8
 8009ec6:	e000      	b.n	8009eca <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 8009ec8:	2306      	movs	r3, #6
 8009eca:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ed4:	f107 0310 	add.w	r3, r7, #16
 8009ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009edc:	4619      	mov	r1, r3
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f007 f876 	bl	8010fd0 <HAL_OSPI_Command>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 8009eea:	f04f 33ff 	mov.w	r3, #4294967295
 8009eee:	e02d      	b.n	8009f4c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8009ef4:	78fb      	ldrb	r3, [r7, #3]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d106      	bne.n	8009f08 <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 8009efa:	78bb      	ldrb	r3, [r7, #2]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 8009f00:	2302      	movs	r3, #2
 8009f02:	e003      	b.n	8009f0c <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8009f04:	2312      	movs	r3, #18
 8009f06:	e001      	b.n	8009f0c <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8009f08:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8009f0c:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009f12:	f107 0310 	add.w	r3, r7, #16
 8009f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f007 f857 	bl	8010fd0 <HAL_OSPI_Command>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 8009f28:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2c:	e00e      	b.n	8009f4c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8009f32:	f107 0308 	add.w	r3, r7, #8
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f007 fa73 	bl	8011424 <HAL_OSPI_MemoryMapped>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 8009f44:	f04f 33ff 	mov.w	r3, #4294967295
 8009f48:	e000      	b.n	8009f4c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3760      	adds	r7, #96	; 0x60
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b098      	sub	sp, #96	; 0x60
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8009f60:	f107 0310 	add.w	r3, r7, #16
 8009f64:	2250      	movs	r2, #80	; 0x50
 8009f66:	2100      	movs	r1, #0
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f01d fe1f 	bl	8027bac <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8009f6e:	f107 0308 	add.w	r3, r7, #8
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
 8009f76:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8009f80:	2304      	movs	r3, #4
 8009f82:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8009f84:	2308      	movs	r3, #8
 8009f86:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8009f88:	2310      	movs	r3, #16
 8009f8a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8009f8c:	f64e 6311 	movw	r3, #60945	; 0xee11
 8009f90:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8009f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8009f98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f9c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009f9e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009fa2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8009fa8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009fac:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8009fae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009fb2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8009fb4:	2306      	movs	r3, #6
 8009fb6:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8009fb8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009fbc:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009fc2:	f107 0310 	add.w	r3, r7, #16
 8009fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f006 ffff 	bl	8010fd0 <HAL_OSPI_Command>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8009fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fdc:	e025      	b.n	800a02a <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8009fe2:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8009fe6:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ff0:	f107 0310 	add.w	r3, r7, #16
 8009ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f006 ffe8 	bl	8010fd0 <HAL_OSPI_Command>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d002      	beq.n	800a00c <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 800a006:	f04f 33ff 	mov.w	r3, #4294967295
 800a00a:	e00e      	b.n	800a02a <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800a00c:	2300      	movs	r3, #0
 800a00e:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800a010:	f107 0308 	add.w	r3, r7, #8
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f007 fa04 	bl	8011424 <HAL_OSPI_MemoryMapped>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 800a022:	f04f 33ff 	mov.w	r3, #4294967295
 800a026:	e000      	b.n	800a02a <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3760      	adds	r7, #96	; 0x60
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b09c      	sub	sp, #112	; 0x70
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
 800a03e:	4613      	mov	r3, r2
 800a040:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 800a042:	f107 0320 	add.w	r3, r7, #32
 800a046:	2250      	movs	r2, #80	; 0x50
 800a048:	2100      	movs	r1, #0
 800a04a:	4618      	mov	r0, r3
 800a04c:	f01d fdae 	bl	8027bac <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800a050:	f107 030c 	add.w	r3, r7, #12
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]
 800a058:	605a      	str	r2, [r3, #4]
 800a05a:	609a      	str	r2, [r3, #8]
 800a05c:	60da      	str	r2, [r3, #12]
 800a05e:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d105      	bne.n	800a072 <MX25LM51245G_WriteEnable+0x40>
 800a066:	78bb      	ldrb	r3, [r7, #2]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d102      	bne.n	800a072 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 800a06c:	f04f 33ff 	mov.w	r3, #4294967295
 800a070:	e0a6      	b.n	800a1c0 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a072:	2300      	movs	r3, #0
 800a074:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a076:	2300      	movs	r3, #0
 800a078:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <MX25LM51245G_WriteEnable+0x52>
 800a080:	2301      	movs	r3, #1
 800a082:	e000      	b.n	800a086 <MX25LM51245G_WriteEnable+0x54>
 800a084:	2304      	movs	r3, #4
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a088:	78bb      	ldrb	r3, [r7, #2]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d101      	bne.n	800a092 <MX25LM51245G_WriteEnable+0x60>
 800a08e:	2308      	movs	r3, #8
 800a090:	e000      	b.n	800a094 <MX25LM51245G_WriteEnable+0x62>
 800a092:	2300      	movs	r3, #0
 800a094:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <MX25LM51245G_WriteEnable+0x6e>
 800a09c:	2300      	movs	r3, #0
 800a09e:	e000      	b.n	800a0a2 <MX25LM51245G_WriteEnable+0x70>
 800a0a0:	2310      	movs	r3, #16
 800a0a2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <MX25LM51245G_WriteEnable+0x7c>
 800a0aa:	2306      	movs	r3, #6
 800a0ac:	e001      	b.n	800a0b2 <MX25LM51245G_WriteEnable+0x80>
 800a0ae:	f240 63f9 	movw	r3, #1785	; 0x6f9
 800a0b2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a0cc:	f107 0320 	add.w	r3, r7, #32
 800a0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f006 ff7a 	bl	8010fd0 <HAL_OSPI_Command>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 800a0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e6:	e06b      	b.n	800a1c0 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800a0e8:	78fb      	ldrb	r3, [r7, #3]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <MX25LM51245G_WriteEnable+0xc0>
 800a0ee:	2305      	movs	r3, #5
 800a0f0:	e001      	b.n	800a0f6 <MX25LM51245G_WriteEnable+0xc4>
 800a0f2:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800a0f6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <MX25LM51245G_WriteEnable+0xd0>
 800a0fe:	2300      	movs	r3, #0
 800a100:	e001      	b.n	800a106 <MX25LM51245G_WriteEnable+0xd4>
 800a102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a106:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800a108:	78bb      	ldrb	r3, [r7, #2]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d102      	bne.n	800a114 <MX25LM51245G_WriteEnable+0xe2>
 800a10e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a112:	e000      	b.n	800a116 <MX25LM51245G_WriteEnable+0xe4>
 800a114:	2300      	movs	r3, #0
 800a116:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800a118:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a11c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 800a11e:	2300      	movs	r3, #0
 800a120:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800a122:	78fb      	ldrb	r3, [r7, #3]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d102      	bne.n	800a12e <MX25LM51245G_WriteEnable+0xfc>
 800a128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a12c:	e001      	b.n	800a132 <MX25LM51245G_WriteEnable+0x100>
 800a12e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a132:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800a134:	78bb      	ldrb	r3, [r7, #2]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d102      	bne.n	800a140 <MX25LM51245G_WriteEnable+0x10e>
 800a13a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a13e:	e000      	b.n	800a142 <MX25LM51245G_WriteEnable+0x110>
 800a140:	2300      	movs	r3, #0
 800a142:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <MX25LM51245G_WriteEnable+0x11c>
 800a14a:	2300      	movs	r3, #0
 800a14c:	e000      	b.n	800a150 <MX25LM51245G_WriteEnable+0x11e>
 800a14e:	2305      	movs	r3, #5
 800a150:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800a152:	78bb      	ldrb	r3, [r7, #2]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d101      	bne.n	800a15c <MX25LM51245G_WriteEnable+0x12a>
 800a158:	2302      	movs	r3, #2
 800a15a:	e000      	b.n	800a15e <MX25LM51245G_WriteEnable+0x12c>
 800a15c:	2301      	movs	r3, #1
 800a15e:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800a160:	78bb      	ldrb	r3, [r7, #2]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d102      	bne.n	800a16c <MX25LM51245G_WriteEnable+0x13a>
 800a166:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a16a:	e000      	b.n	800a16e <MX25LM51245G_WriteEnable+0x13c>
 800a16c:	2300      	movs	r3, #0
 800a16e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a170:	f107 0320 	add.w	r3, r7, #32
 800a174:	f241 3288 	movw	r2, #5000	; 0x1388
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f006 ff28 	bl	8010fd0 <HAL_OSPI_Command>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 800a186:	f04f 33ff 	mov.w	r3, #4294967295
 800a18a:	e019      	b.n	800a1c0 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 800a18c:	2302      	movs	r3, #2
 800a18e:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 800a190:	2302      	movs	r3, #2
 800a192:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800a194:	2300      	movs	r3, #0
 800a196:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800a198:	2310      	movs	r3, #16
 800a19a:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800a19c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a1a0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a1a2:	f107 030c 	add.w	r3, r7, #12
 800a1a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f007 f8b2 	bl	8011316 <HAL_OSPI_AutoPolling>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 800a1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1bc:	e000      	b.n	800a1c0 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3770      	adds	r7, #112	; 0x70
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b098      	sub	sp, #96	; 0x60
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	607b      	str	r3, [r7, #4]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	72fb      	strb	r3, [r7, #11]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800a1da:	f107 0310 	add.w	r3, r7, #16
 800a1de:	2250      	movs	r2, #80	; 0x50
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f01d fce2 	bl	8027bac <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800a1e8:	7afb      	ldrb	r3, [r7, #11]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d105      	bne.n	800a1fa <MX25LM51245G_WriteCfg2Register+0x32>
 800a1ee:	7abb      	ldrb	r3, [r7, #10]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d102      	bne.n	800a1fa <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800a1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f8:	e077      	b.n	800a2ea <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a1fe:	2300      	movs	r3, #0
 800a200:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800a202:	7afb      	ldrb	r3, [r7, #11]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <MX25LM51245G_WriteCfg2Register+0x44>
 800a208:	2301      	movs	r3, #1
 800a20a:	e000      	b.n	800a20e <MX25LM51245G_WriteCfg2Register+0x46>
 800a20c:	2304      	movs	r3, #4
 800a20e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a210:	7abb      	ldrb	r3, [r7, #10]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d101      	bne.n	800a21a <MX25LM51245G_WriteCfg2Register+0x52>
 800a216:	2308      	movs	r3, #8
 800a218:	e000      	b.n	800a21c <MX25LM51245G_WriteCfg2Register+0x54>
 800a21a:	2300      	movs	r3, #0
 800a21c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800a21e:	7afb      	ldrb	r3, [r7, #11]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <MX25LM51245G_WriteCfg2Register+0x60>
 800a224:	2300      	movs	r3, #0
 800a226:	e000      	b.n	800a22a <MX25LM51245G_WriteCfg2Register+0x62>
 800a228:	2310      	movs	r3, #16
 800a22a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800a22c:	7afb      	ldrb	r3, [r7, #11]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <MX25LM51245G_WriteCfg2Register+0x6e>
 800a232:	2372      	movs	r3, #114	; 0x72
 800a234:	e001      	b.n	800a23a <MX25LM51245G_WriteCfg2Register+0x72>
 800a236:	f247 238d 	movw	r3, #29325	; 0x728d
 800a23a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800a23c:	7afb      	ldrb	r3, [r7, #11]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d102      	bne.n	800a248 <MX25LM51245G_WriteCfg2Register+0x80>
 800a242:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a246:	e001      	b.n	800a24c <MX25LM51245G_WriteCfg2Register+0x84>
 800a248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a24c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800a24e:	7abb      	ldrb	r3, [r7, #10]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d102      	bne.n	800a25a <MX25LM51245G_WriteCfg2Register+0x92>
 800a254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a258:	e000      	b.n	800a25c <MX25LM51245G_WriteCfg2Register+0x94>
 800a25a:	2300      	movs	r3, #0
 800a25c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800a25e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a262:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a268:	2300      	movs	r3, #0
 800a26a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800a26c:	7afb      	ldrb	r3, [r7, #11]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d102      	bne.n	800a278 <MX25LM51245G_WriteCfg2Register+0xb0>
 800a272:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a276:	e001      	b.n	800a27c <MX25LM51245G_WriteCfg2Register+0xb4>
 800a278:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a27c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800a27e:	7abb      	ldrb	r3, [r7, #10]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d102      	bne.n	800a28a <MX25LM51245G_WriteCfg2Register+0xc2>
 800a284:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a288:	e000      	b.n	800a28c <MX25LM51245G_WriteCfg2Register+0xc4>
 800a28a:	2300      	movs	r3, #0
 800a28c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800a292:	7afb      	ldrb	r3, [r7, #11]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d006      	beq.n	800a2a6 <MX25LM51245G_WriteCfg2Register+0xde>
 800a298:	7abb      	ldrb	r3, [r7, #10]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d101      	bne.n	800a2a2 <MX25LM51245G_WriteCfg2Register+0xda>
 800a29e:	2302      	movs	r3, #2
 800a2a0:	e002      	b.n	800a2a8 <MX25LM51245G_WriteCfg2Register+0xe0>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e000      	b.n	800a2a8 <MX25LM51245G_WriteCfg2Register+0xe0>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a2b2:	f107 0310 	add.w	r3, r7, #16
 800a2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f006 fe87 	bl	8010fd0 <HAL_OSPI_Command>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 800a2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2cc:	e00d      	b.n	800a2ea <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a2ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2d2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f006 ff07 	bl	80110ea <HAL_OSPI_Transmit>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 800a2e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e6:	e000      	b.n	800a2ea <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3760      	adds	r7, #96	; 0x60
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b098      	sub	sp, #96	; 0x60
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	607b      	str	r3, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	72fb      	strb	r3, [r7, #11]
 800a300:	4613      	mov	r3, r2
 800a302:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800a304:	f107 0310 	add.w	r3, r7, #16
 800a308:	2250      	movs	r2, #80	; 0x50
 800a30a:	2100      	movs	r1, #0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f01d fc4d 	bl	8027bac <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800a312:	7afb      	ldrb	r3, [r7, #11]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d105      	bne.n	800a324 <MX25LM51245G_ReadCfg2Register+0x32>
 800a318:	7abb      	ldrb	r3, [r7, #10]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d102      	bne.n	800a324 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800a31e:	f04f 33ff 	mov.w	r3, #4294967295
 800a322:	e07c      	b.n	800a41e <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a324:	2300      	movs	r3, #0
 800a326:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a328:	2300      	movs	r3, #0
 800a32a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800a32c:	7afb      	ldrb	r3, [r7, #11]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <MX25LM51245G_ReadCfg2Register+0x44>
 800a332:	2301      	movs	r3, #1
 800a334:	e000      	b.n	800a338 <MX25LM51245G_ReadCfg2Register+0x46>
 800a336:	2304      	movs	r3, #4
 800a338:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a33a:	7abb      	ldrb	r3, [r7, #10]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <MX25LM51245G_ReadCfg2Register+0x52>
 800a340:	2308      	movs	r3, #8
 800a342:	e000      	b.n	800a346 <MX25LM51245G_ReadCfg2Register+0x54>
 800a344:	2300      	movs	r3, #0
 800a346:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800a348:	7afb      	ldrb	r3, [r7, #11]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <MX25LM51245G_ReadCfg2Register+0x60>
 800a34e:	2300      	movs	r3, #0
 800a350:	e000      	b.n	800a354 <MX25LM51245G_ReadCfg2Register+0x62>
 800a352:	2310      	movs	r3, #16
 800a354:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800a356:	7afb      	ldrb	r3, [r7, #11]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d101      	bne.n	800a360 <MX25LM51245G_ReadCfg2Register+0x6e>
 800a35c:	2371      	movs	r3, #113	; 0x71
 800a35e:	e001      	b.n	800a364 <MX25LM51245G_ReadCfg2Register+0x72>
 800a360:	f247 138e 	movw	r3, #29070	; 0x718e
 800a364:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800a366:	7afb      	ldrb	r3, [r7, #11]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d102      	bne.n	800a372 <MX25LM51245G_ReadCfg2Register+0x80>
 800a36c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a370:	e001      	b.n	800a376 <MX25LM51245G_ReadCfg2Register+0x84>
 800a372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a376:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800a378:	7abb      	ldrb	r3, [r7, #10]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d102      	bne.n	800a384 <MX25LM51245G_ReadCfg2Register+0x92>
 800a37e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a382:	e000      	b.n	800a386 <MX25LM51245G_ReadCfg2Register+0x94>
 800a384:	2300      	movs	r3, #0
 800a386:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800a388:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a38c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a392:	2300      	movs	r3, #0
 800a394:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800a396:	7afb      	ldrb	r3, [r7, #11]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d102      	bne.n	800a3a2 <MX25LM51245G_ReadCfg2Register+0xb0>
 800a39c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3a0:	e001      	b.n	800a3a6 <MX25LM51245G_ReadCfg2Register+0xb4>
 800a3a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a3a6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800a3a8:	7abb      	ldrb	r3, [r7, #10]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d102      	bne.n	800a3b4 <MX25LM51245G_ReadCfg2Register+0xc2>
 800a3ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a3b2:	e000      	b.n	800a3b6 <MX25LM51245G_ReadCfg2Register+0xc4>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800a3b8:	7afb      	ldrb	r3, [r7, #11]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <MX25LM51245G_ReadCfg2Register+0xd0>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	e000      	b.n	800a3c4 <MX25LM51245G_ReadCfg2Register+0xd2>
 800a3c2:	2305      	movs	r3, #5
 800a3c4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800a3c6:	7abb      	ldrb	r3, [r7, #10]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d101      	bne.n	800a3d0 <MX25LM51245G_ReadCfg2Register+0xde>
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	e000      	b.n	800a3d2 <MX25LM51245G_ReadCfg2Register+0xe0>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800a3d4:	7abb      	ldrb	r3, [r7, #10]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d102      	bne.n	800a3e0 <MX25LM51245G_ReadCfg2Register+0xee>
 800a3da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a3de:	e000      	b.n	800a3e2 <MX25LM51245G_ReadCfg2Register+0xf0>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a3e8:	f107 0310 	add.w	r3, r7, #16
 800a3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f006 fdec 	bl	8010fd0 <HAL_OSPI_Command>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 800a3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a402:	e00c      	b.n	800a41e <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a404:	f241 3288 	movw	r2, #5000	; 0x1388
 800a408:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f006 fee0 	bl	80111d0 <HAL_OSPI_Receive>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 800a416:	f04f 33ff 	mov.w	r3, #4294967295
 800a41a:	e000      	b.n	800a41e <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3760      	adds	r7, #96	; 0x60
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b096      	sub	sp, #88	; 0x58
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	460b      	mov	r3, r1
 800a430:	70fb      	strb	r3, [r7, #3]
 800a432:	4613      	mov	r3, r2
 800a434:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800a436:	f107 0308 	add.w	r3, r7, #8
 800a43a:	2250      	movs	r2, #80	; 0x50
 800a43c:	2100      	movs	r1, #0
 800a43e:	4618      	mov	r0, r3
 800a440:	f01d fbb4 	bl	8027bac <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d105      	bne.n	800a456 <MX25LM51245G_ResetEnable+0x30>
 800a44a:	78bb      	ldrb	r3, [r7, #2]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d102      	bne.n	800a456 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 800a450:	f04f 33ff 	mov.w	r3, #4294967295
 800a454:	e03b      	b.n	800a4ce <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a456:	2300      	movs	r3, #0
 800a458:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <MX25LM51245G_ResetEnable+0x42>
 800a464:	2301      	movs	r3, #1
 800a466:	e000      	b.n	800a46a <MX25LM51245G_ResetEnable+0x44>
 800a468:	2304      	movs	r3, #4
 800a46a:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a46c:	78bb      	ldrb	r3, [r7, #2]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d101      	bne.n	800a476 <MX25LM51245G_ResetEnable+0x50>
 800a472:	2308      	movs	r3, #8
 800a474:	e000      	b.n	800a478 <MX25LM51245G_ResetEnable+0x52>
 800a476:	2300      	movs	r3, #0
 800a478:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800a47a:	78fb      	ldrb	r3, [r7, #3]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <MX25LM51245G_ResetEnable+0x5e>
 800a480:	2300      	movs	r3, #0
 800a482:	e000      	b.n	800a486 <MX25LM51245G_ResetEnable+0x60>
 800a484:	2310      	movs	r3, #16
 800a486:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800a488:	78fb      	ldrb	r3, [r7, #3]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d101      	bne.n	800a492 <MX25LM51245G_ResetEnable+0x6c>
 800a48e:	2366      	movs	r3, #102	; 0x66
 800a490:	e001      	b.n	800a496 <MX25LM51245G_ResetEnable+0x70>
 800a492:	f246 6399 	movw	r3, #26265	; 0x6699
 800a496:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800a498:	2300      	movs	r3, #0
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a49c:	2300      	movs	r3, #0
 800a49e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a4b0:	f107 0308 	add.w	r3, r7, #8
 800a4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f006 fd88 	bl	8010fd0 <HAL_OSPI_Command>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 800a4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ca:	e000      	b.n	800a4ce <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3758      	adds	r7, #88	; 0x58
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b096      	sub	sp, #88	; 0x58
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	70fb      	strb	r3, [r7, #3]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800a4e6:	f107 0308 	add.w	r3, r7, #8
 800a4ea:	2250      	movs	r2, #80	; 0x50
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f01d fb5c 	bl	8027bac <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d105      	bne.n	800a506 <MX25LM51245G_ResetMemory+0x30>
 800a4fa:	78bb      	ldrb	r3, [r7, #2]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d102      	bne.n	800a506 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 800a500:	f04f 33ff 	mov.w	r3, #4294967295
 800a504:	e03b      	b.n	800a57e <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a506:	2300      	movs	r3, #0
 800a508:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a50a:	2300      	movs	r3, #0
 800a50c:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800a50e:	78fb      	ldrb	r3, [r7, #3]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <MX25LM51245G_ResetMemory+0x42>
 800a514:	2301      	movs	r3, #1
 800a516:	e000      	b.n	800a51a <MX25LM51245G_ResetMemory+0x44>
 800a518:	2304      	movs	r3, #4
 800a51a:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a51c:	78bb      	ldrb	r3, [r7, #2]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d101      	bne.n	800a526 <MX25LM51245G_ResetMemory+0x50>
 800a522:	2308      	movs	r3, #8
 800a524:	e000      	b.n	800a528 <MX25LM51245G_ResetMemory+0x52>
 800a526:	2300      	movs	r3, #0
 800a528:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800a52a:	78fb      	ldrb	r3, [r7, #3]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <MX25LM51245G_ResetMemory+0x5e>
 800a530:	2300      	movs	r3, #0
 800a532:	e000      	b.n	800a536 <MX25LM51245G_ResetMemory+0x60>
 800a534:	2310      	movs	r3, #16
 800a536:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800a538:	78fb      	ldrb	r3, [r7, #3]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <MX25LM51245G_ResetMemory+0x6c>
 800a53e:	2399      	movs	r3, #153	; 0x99
 800a540:	e001      	b.n	800a546 <MX25LM51245G_ResetMemory+0x70>
 800a542:	f649 1366 	movw	r3, #39270	; 0x9966
 800a546:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800a548:	2300      	movs	r3, #0
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a54c:	2300      	movs	r3, #0
 800a54e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800a550:	2300      	movs	r3, #0
 800a552:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a558:	2300      	movs	r3, #0
 800a55a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a55c:	2300      	movs	r3, #0
 800a55e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a560:	f107 0308 	add.w	r3, r7, #8
 800a564:	f241 3288 	movw	r2, #5000	; 0x1388
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f006 fd30 	bl	8010fd0 <HAL_OSPI_Command>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d002      	beq.n	800a57c <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 800a576:	f04f 33ff 	mov.w	r3, #4294967295
 800a57a:	e000      	b.n	800a57e <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3758      	adds	r7, #88	; 0x58
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800a58e:	2300      	movs	r3, #0
 800a590:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800a592:	4b16      	ldr	r3, [pc, #88]	; (800a5ec <BSP_I2C4_Init+0x64>)
 800a594:	4a16      	ldr	r2, [pc, #88]	; (800a5f0 <BSP_I2C4_Init+0x68>)
 800a596:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800a598:	4b16      	ldr	r3, [pc, #88]	; (800a5f4 <BSP_I2C4_Init+0x6c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d11f      	bne.n	800a5e0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800a5a0:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <BSP_I2C4_Init+0x6c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	4a13      	ldr	r2, [pc, #76]	; (800a5f4 <BSP_I2C4_Init+0x6c>)
 800a5a8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800a5aa:	4810      	ldr	r0, [pc, #64]	; (800a5ec <BSP_I2C4_Init+0x64>)
 800a5ac:	f003 f87a 	bl	800d6a4 <HAL_I2C_GetState>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d114      	bne.n	800a5e0 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800a5b6:	480d      	ldr	r0, [pc, #52]	; (800a5ec <BSP_I2C4_Init+0x64>)
 800a5b8:	f000 fb60 	bl	800ac7c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a5bc:	f008 fa44 	bl	8012a48 <HAL_RCC_GetPCLK2Freq>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	490d      	ldr	r1, [pc, #52]	; (800a5f8 <BSP_I2C4_Init+0x70>)
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 f8e3 	bl	800a790 <I2C_GetTiming>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4807      	ldr	r0, [pc, #28]	; (800a5ec <BSP_I2C4_Init+0x64>)
 800a5d0:	f000 f838 	bl	800a644 <MX_I2C4_Init>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d002      	beq.n	800a5e0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800a5da:	f06f 0307 	mvn.w	r3, #7
 800a5de:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800a5e0:	687b      	ldr	r3, [r7, #4]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	2400bd14 	.word	0x2400bd14
 800a5f0:	58001c00 	.word	0x58001c00
 800a5f4:	2400b30c 	.word	0x2400b30c
 800a5f8:	00061a80 	.word	0x00061a80

0800a5fc <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800a602:	2300      	movs	r3, #0
 800a604:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800a606:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <BSP_I2C4_DeInit+0x40>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	4a0b      	ldr	r2, [pc, #44]	; (800a63c <BSP_I2C4_DeInit+0x40>)
 800a60e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800a610:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <BSP_I2C4_DeInit+0x40>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10b      	bne.n	800a630 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800a618:	4809      	ldr	r0, [pc, #36]	; (800a640 <BSP_I2C4_DeInit+0x44>)
 800a61a:	f000 fb9b 	bl	800ad54 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a61e:	4808      	ldr	r0, [pc, #32]	; (800a640 <BSP_I2C4_DeInit+0x44>)
 800a620:	f002 fde2 	bl	800d1e8 <HAL_I2C_DeInit>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800a62a:	f06f 0307 	mvn.w	r3, #7
 800a62e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800a630:	687b      	ldr	r3, [r7, #4]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	2400b30c 	.word	0x2400b30c
 800a640:	2400bd14 	.word	0x2400bd14

0800a644 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f002 fd20 	bl	800d0c8 <HAL_I2C_Init>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	73fb      	strb	r3, [r7, #15]
 800a692:	e014      	b.n	800a6be <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800a694:	2300      	movs	r3, #0
 800a696:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f003 fad4 	bl	800dc48 <HAL_I2CEx_ConfigAnalogFilter>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	73fb      	strb	r3, [r7, #15]
 800a6aa:	e008      	b.n	800a6be <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f003 fb15 	bl	800dcde <HAL_I2CEx_ConfigDigitalFilter>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b088      	sub	sp, #32
 800a6cc:	af02      	add	r7, sp, #8
 800a6ce:	60ba      	str	r2, [r7, #8]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	81fb      	strh	r3, [r7, #14]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	81bb      	strh	r3, [r7, #12]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800a6de:	89b9      	ldrh	r1, [r7, #12]
 800a6e0:	89f8      	ldrh	r0, [r7, #14]
 800a6e2:	88fb      	ldrh	r3, [r7, #6]
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f000 fb57 	bl	800ad9c <I2C4_WriteReg>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	617b      	str	r3, [r7, #20]
 800a6f8:	e00c      	b.n	800a714 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a6fa:	4809      	ldr	r0, [pc, #36]	; (800a720 <BSP_I2C4_WriteReg+0x58>)
 800a6fc:	f002 ffe0 	bl	800d6c0 <HAL_I2C_GetError>
 800a700:	4603      	mov	r3, r0
 800a702:	2b04      	cmp	r3, #4
 800a704:	d103      	bne.n	800a70e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a706:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800a70a:	617b      	str	r3, [r7, #20]
 800a70c:	e002      	b.n	800a714 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a70e:	f06f 0303 	mvn.w	r3, #3
 800a712:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a714:	697b      	ldr	r3, [r7, #20]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	2400bd14 	.word	0x2400bd14

0800a724 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af02      	add	r7, sp, #8
 800a72a:	60ba      	str	r2, [r7, #8]
 800a72c:	461a      	mov	r2, r3
 800a72e:	4603      	mov	r3, r0
 800a730:	81fb      	strh	r3, [r7, #14]
 800a732:	460b      	mov	r3, r1
 800a734:	81bb      	strh	r3, [r7, #12]
 800a736:	4613      	mov	r3, r2
 800a738:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800a73a:	89b9      	ldrh	r1, [r7, #12]
 800a73c:	89f8      	ldrh	r0, [r7, #14]
 800a73e:	88fb      	ldrh	r3, [r7, #6]
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	2201      	movs	r2, #1
 800a746:	f000 fb4f 	bl	800ade8 <I2C4_ReadReg>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d102      	bne.n	800a756 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800a750:	2300      	movs	r3, #0
 800a752:	617b      	str	r3, [r7, #20]
 800a754:	e00c      	b.n	800a770 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a756:	4809      	ldr	r0, [pc, #36]	; (800a77c <BSP_I2C4_ReadReg+0x58>)
 800a758:	f002 ffb2 	bl	800d6c0 <HAL_I2C_GetError>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d103      	bne.n	800a76a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a762:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800a766:	617b      	str	r3, [r7, #20]
 800a768:	e002      	b.n	800a770 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a76a:	f06f 0303 	mvn.w	r3, #3
 800a76e:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a770:	697b      	ldr	r3, [r7, #20]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	2400bd14 	.word	0x2400bd14

0800a780 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800a784:	f001 fca4 	bl	800c0d0 <HAL_GetTick>
 800a788:	4603      	mov	r3, r0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d06b      	beq.n	800a87c <I2C_GetTiming+0xec>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d068      	beq.n	800a87c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	e060      	b.n	800a872 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800a7b0:	4a35      	ldr	r2, [pc, #212]	; (800a888 <I2C_GetTiming+0xf8>)
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	212c      	movs	r1, #44	; 0x2c
 800a7b6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ba:	4413      	add	r3, r2
 800a7bc:	3304      	adds	r3, #4
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d352      	bcc.n	800a86c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800a7c6:	4a30      	ldr	r2, [pc, #192]	; (800a888 <I2C_GetTiming+0xf8>)
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	212c      	movs	r1, #44	; 0x2c
 800a7cc:	fb01 f303 	mul.w	r3, r1, r3
 800a7d0:	4413      	add	r3, r2
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d847      	bhi.n	800a86c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800a7dc:	6939      	ldr	r1, [r7, #16]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f856 	bl	800a890 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800a7e4:	6939      	ldr	r1, [r7, #16]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f940 	bl	800aa6c <I2C_Compute_SCLL_SCLH>
 800a7ec:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b7f      	cmp	r3, #127	; 0x7f
 800a7f2:	d842      	bhi.n	800a87a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a7f4:	4925      	ldr	r1, [pc, #148]	; (800a88c <I2C_GetTiming+0xfc>)
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	440b      	add	r3, r1
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a806:	4821      	ldr	r0, [pc, #132]	; (800a88c <I2C_GetTiming+0xfc>)
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4403      	add	r3, r0
 800a814:	3304      	adds	r3, #4
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	051b      	lsls	r3, r3, #20
 800a81a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a81e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a820:	481a      	ldr	r0, [pc, #104]	; (800a88c <I2C_GetTiming+0xfc>)
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4403      	add	r3, r0
 800a82e:	3308      	adds	r3, #8
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	041b      	lsls	r3, r3, #16
 800a834:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a838:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800a83a:	4814      	ldr	r0, [pc, #80]	; (800a88c <I2C_GetTiming+0xfc>)
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	4613      	mov	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	4403      	add	r3, r0
 800a848:	330c      	adds	r3, #12
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	021b      	lsls	r3, r3, #8
 800a84e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a850:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800a852:	480e      	ldr	r0, [pc, #56]	; (800a88c <I2C_GetTiming+0xfc>)
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	4613      	mov	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4403      	add	r3, r0
 800a860:	3310      	adds	r3, #16
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a866:	430b      	orrs	r3, r1
 800a868:	617b      	str	r3, [r7, #20]
        }
        break;
 800a86a:	e006      	b.n	800a87a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	3301      	adds	r3, #1
 800a870:	613b      	str	r3, [r7, #16]
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b02      	cmp	r3, #2
 800a876:	d99b      	bls.n	800a7b0 <I2C_GetTiming+0x20>
 800a878:	e000      	b.n	800a87c <I2C_GetTiming+0xec>
        break;
 800a87a:	bf00      	nop
      }
    }
  }

  return ret;
 800a87c:	697b      	ldr	r3, [r7, #20]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	0802bac8 	.word	0x0802bac8
 800a88c:	2400b310 	.word	0x2400b310

0800a890 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800a890:	b480      	push	{r7}
 800a892:	b08f      	sub	sp, #60	; 0x3c
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800a89a:	2310      	movs	r3, #16
 800a89c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	085a      	lsrs	r2, r3, #1
 800a8a2:	4b6e      	ldr	r3, [pc, #440]	; (800aa5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800a8a4:	4413      	add	r3, r2
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8ac:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800a8ae:	2332      	movs	r3, #50	; 0x32
 800a8b0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800a8b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a8b6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a8b8:	4a69      	ldr	r2, [pc, #420]	; (800aa60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	212c      	movs	r1, #44	; 0x2c
 800a8be:	fb01 f303 	mul.w	r3, r1, r3
 800a8c2:	4413      	add	r3, r2
 800a8c4:	3324      	adds	r3, #36	; 0x24
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	4a65      	ldr	r2, [pc, #404]	; (800aa60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	212c      	movs	r1, #44	; 0x2c
 800a8d0:	fb01 f303 	mul.w	r3, r1, r3
 800a8d4:	4413      	add	r3, r2
 800a8d6:	330c      	adds	r3, #12
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a8dc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a8de:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a8e0:	495f      	ldr	r1, [pc, #380]	; (800aa60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	202c      	movs	r0, #44	; 0x2c
 800a8e6:	fb00 f303 	mul.w	r3, r0, r3
 800a8ea:	440b      	add	r3, r1
 800a8ec:	3328      	adds	r3, #40	; 0x28
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3303      	adds	r3, #3
 800a8f2:	69f9      	ldr	r1, [r7, #28]
 800a8f4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a8fc:	4a58      	ldr	r2, [pc, #352]	; (800aa60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	212c      	movs	r1, #44	; 0x2c
 800a902:	fb01 f303 	mul.w	r3, r1, r3
 800a906:	4413      	add	r3, r2
 800a908:	3310      	adds	r3, #16
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4618      	mov	r0, r3
 800a90e:	4a54      	ldr	r2, [pc, #336]	; (800aa60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	212c      	movs	r1, #44	; 0x2c
 800a914:	fb01 f303 	mul.w	r3, r1, r3
 800a918:	4413      	add	r3, r2
 800a91a:	3320      	adds	r3, #32
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a920:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a922:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a924:	494e      	ldr	r1, [pc, #312]	; (800aa60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	202c      	movs	r0, #44	; 0x2c
 800a92a:	fb00 f303 	mul.w	r3, r0, r3
 800a92e:	440b      	add	r3, r1
 800a930:	3328      	adds	r3, #40	; 0x28
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3304      	adds	r3, #4
 800a936:	69f9      	ldr	r1, [r7, #28]
 800a938:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800a940:	4a47      	ldr	r2, [pc, #284]	; (800aa60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	212c      	movs	r1, #44	; 0x2c
 800a946:	fb01 f303 	mul.w	r3, r1, r3
 800a94a:	4413      	add	r3, r2
 800a94c:	3320      	adds	r3, #32
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4618      	mov	r0, r3
 800a952:	4a43      	ldr	r2, [pc, #268]	; (800aa60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	212c      	movs	r1, #44	; 0x2c
 800a958:	fb01 f303 	mul.w	r3, r1, r3
 800a95c:	4413      	add	r3, r2
 800a95e:	3314      	adds	r3, #20
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4403      	add	r3, r0
 800a964:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	2b00      	cmp	r3, #0
 800a96a:	dc01      	bgt.n	800a970 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	2b00      	cmp	r3, #0
 800a974:	dc01      	bgt.n	800a97a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a97a:	2300      	movs	r3, #0
 800a97c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a97e:	e062      	b.n	800aa46 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a980:	2300      	movs	r3, #0
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
 800a984:	e059      	b.n	800aa3a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	3301      	adds	r3, #1
 800a98a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a98c:	3201      	adds	r2, #1
 800a98e:	fb03 f202 	mul.w	r2, r3, r2
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	fb02 f303 	mul.w	r3, r2, r3
 800a998:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d348      	bcc.n	800aa34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	623b      	str	r3, [r7, #32]
 800a9a6:	e042      	b.n	800aa2e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	6a3a      	ldr	r2, [r7, #32]
 800a9ae:	fb03 f202 	mul.w	r2, r3, r2
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	fb02 f303 	mul.w	r3, r2, r3
 800a9b8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d332      	bcc.n	800aa28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d82e      	bhi.n	800aa28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800a9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d02a      	beq.n	800aa28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a9d2:	4b24      	ldr	r3, [pc, #144]	; (800aa64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	4924      	ldr	r1, [pc, #144]	; (800aa68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a9d8:	4613      	mov	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	440b      	add	r3, r1
 800a9e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9e4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a9e6:	4b1f      	ldr	r3, [pc, #124]	; (800aa64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	491f      	ldr	r1, [pc, #124]	; (800aa68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	440b      	add	r3, r1
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9fa:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a9fc:	4b19      	ldr	r3, [pc, #100]	; (800aa64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	4919      	ldr	r1, [pc, #100]	; (800aa68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800aa02:	4613      	mov	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	440b      	add	r3, r1
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	6a3a      	ldr	r2, [r7, #32]
 800aa10:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800aa16:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	4a11      	ldr	r2, [pc, #68]	; (800aa64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800aa1e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800aa20:	4b10      	ldr	r3, [pc, #64]	; (800aa64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b7f      	cmp	r3, #127	; 0x7f
 800aa26:	d812      	bhi.n	800aa4e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	623b      	str	r3, [r7, #32]
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	2b0f      	cmp	r3, #15
 800aa32:	d9b9      	bls.n	800a9a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	3301      	adds	r3, #1
 800aa38:	627b      	str	r3, [r7, #36]	; 0x24
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	2b0f      	cmp	r3, #15
 800aa3e:	d9a2      	bls.n	800a986 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	3301      	adds	r3, #1
 800aa44:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	2b0f      	cmp	r3, #15
 800aa4a:	d999      	bls.n	800a980 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800aa4c:	e000      	b.n	800aa50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800aa4e:	bf00      	nop
          }
        }
      }
    }
  }
}
 800aa50:	373c      	adds	r7, #60	; 0x3c
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	3b9aca00 	.word	0x3b9aca00
 800aa60:	0802bac8 	.word	0x0802bac8
 800aa64:	2400bd10 	.word	0x2400bd10
 800aa68:	2400b310 	.word	0x2400b310

0800aa6c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b093      	sub	sp, #76	; 0x4c
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800aa76:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	085a      	lsrs	r2, r3, #1
 800aa80:	4b7a      	ldr	r3, [pc, #488]	; (800ac6c <I2C_Compute_SCLL_SCLH+0x200>)
 800aa82:	4413      	add	r3, r2
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800aa8c:	4a78      	ldr	r2, [pc, #480]	; (800ac70 <I2C_Compute_SCLL_SCLH+0x204>)
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	212c      	movs	r1, #44	; 0x2c
 800aa92:	fb01 f303 	mul.w	r3, r1, r3
 800aa96:	4413      	add	r3, r2
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	085a      	lsrs	r2, r3, #1
 800aa9c:	4b73      	ldr	r3, [pc, #460]	; (800ac6c <I2C_Compute_SCLL_SCLH+0x200>)
 800aa9e:	4413      	add	r3, r2
 800aaa0:	4973      	ldr	r1, [pc, #460]	; (800ac70 <I2C_Compute_SCLL_SCLH+0x204>)
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	202c      	movs	r0, #44	; 0x2c
 800aaa6:	fb00 f202 	mul.w	r2, r0, r2
 800aaaa:	440a      	add	r2, r1
 800aaac:	6812      	ldr	r2, [r2, #0]
 800aaae:	fbb3 f3f2 	udiv	r3, r3, r2
 800aab2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800aab4:	2332      	movs	r3, #50	; 0x32
 800aab6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800aab8:	4a6d      	ldr	r2, [pc, #436]	; (800ac70 <I2C_Compute_SCLL_SCLH+0x204>)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	212c      	movs	r1, #44	; 0x2c
 800aabe:	fb01 f303 	mul.w	r3, r1, r3
 800aac2:	4413      	add	r3, r2
 800aac4:	3328      	adds	r3, #40	; 0x28
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	fb02 f303 	mul.w	r3, r2, r3
 800aace:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800aad0:	4a67      	ldr	r2, [pc, #412]	; (800ac70 <I2C_Compute_SCLL_SCLH+0x204>)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	212c      	movs	r1, #44	; 0x2c
 800aad6:	fb01 f303 	mul.w	r3, r1, r3
 800aada:	4413      	add	r3, r2
 800aadc:	3304      	adds	r3, #4
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a62      	ldr	r2, [pc, #392]	; (800ac6c <I2C_Compute_SCLL_SCLH+0x200>)
 800aae2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800aae8:	4a61      	ldr	r2, [pc, #388]	; (800ac70 <I2C_Compute_SCLL_SCLH+0x204>)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	212c      	movs	r1, #44	; 0x2c
 800aaee:	fb01 f303 	mul.w	r3, r1, r3
 800aaf2:	4413      	add	r3, r2
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a5c      	ldr	r2, [pc, #368]	; (800ac6c <I2C_Compute_SCLL_SCLH+0x200>)
 800aafa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aafe:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab02:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ab04:	2300      	movs	r3, #0
 800ab06:	637b      	str	r3, [r7, #52]	; 0x34
 800ab08:	e0a3      	b.n	800ac52 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800ab0a:	495a      	ldr	r1, [pc, #360]	; (800ac74 <I2C_Compute_SCLL_SCLH+0x208>)
 800ab0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab0e:	4613      	mov	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4413      	add	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	440b      	add	r3, r1
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1e:	fb02 f303 	mul.w	r3, r2, r3
 800ab22:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800ab24:	2300      	movs	r3, #0
 800ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab28:	e08c      	b.n	800ac44 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800ab2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab2c:	6a3b      	ldr	r3, [r7, #32]
 800ab2e:	441a      	add	r2, r3
 800ab30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab32:	3301      	adds	r3, #1
 800ab34:	6979      	ldr	r1, [r7, #20]
 800ab36:	fb03 f101 	mul.w	r1, r3, r1
 800ab3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	440b      	add	r3, r1
 800ab40:	4413      	add	r3, r2
 800ab42:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800ab44:	4a4a      	ldr	r2, [pc, #296]	; (800ac70 <I2C_Compute_SCLL_SCLH+0x204>)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	212c      	movs	r1, #44	; 0x2c
 800ab4a:	fb01 f303 	mul.w	r3, r1, r3
 800ab4e:	4413      	add	r3, r2
 800ab50:	3318      	adds	r3, #24
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d971      	bls.n	800ac3e <I2C_Compute_SCLL_SCLH+0x1d2>
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	1ad2      	subs	r2, r2, r3
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	089b      	lsrs	r3, r3, #2
 800ab66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d268      	bcs.n	800ac3e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab70:	e062      	b.n	800ac38 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800ab72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	441a      	add	r2, r3
 800ab78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	6979      	ldr	r1, [r7, #20]
 800ab7e:	fb03 f101 	mul.w	r1, r3, r1
 800ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	440b      	add	r3, r1
 800ab88:	4413      	add	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	441a      	add	r2, r3
 800ab92:	4937      	ldr	r1, [pc, #220]	; (800ac70 <I2C_Compute_SCLL_SCLH+0x204>)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	202c      	movs	r0, #44	; 0x2c
 800ab98:	fb00 f303 	mul.w	r3, r0, r3
 800ab9c:	440b      	add	r3, r1
 800ab9e:	3320      	adds	r3, #32
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	441a      	add	r2, r3
 800aba4:	4932      	ldr	r1, [pc, #200]	; (800ac70 <I2C_Compute_SCLL_SCLH+0x204>)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	202c      	movs	r0, #44	; 0x2c
 800abaa:	fb00 f303 	mul.w	r3, r0, r3
 800abae:	440b      	add	r3, r1
 800abb0:	3324      	adds	r3, #36	; 0x24
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4413      	add	r3, r2
 800abb6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d338      	bcc.n	800ac32 <I2C_Compute_SCLL_SCLH+0x1c6>
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d834      	bhi.n	800ac32 <I2C_Compute_SCLL_SCLH+0x1c6>
 800abc8:	4a29      	ldr	r2, [pc, #164]	; (800ac70 <I2C_Compute_SCLL_SCLH+0x204>)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	212c      	movs	r1, #44	; 0x2c
 800abce:	fb01 f303 	mul.w	r3, r1, r3
 800abd2:	4413      	add	r3, r2
 800abd4:	331c      	adds	r3, #28
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d329      	bcc.n	800ac32 <I2C_Compute_SCLL_SCLH+0x1c6>
 800abde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d225      	bcs.n	800ac32 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	da02      	bge.n	800abfa <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800abf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf6:	425b      	negs	r3, r3
 800abf8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d917      	bls.n	800ac32 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800ac06:	491b      	ldr	r1, [pc, #108]	; (800ac74 <I2C_Compute_SCLL_SCLH+0x208>)
 800ac08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	440b      	add	r3, r1
 800ac14:	3310      	adds	r3, #16
 800ac16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac18:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800ac1a:	4916      	ldr	r1, [pc, #88]	; (800ac74 <I2C_Compute_SCLL_SCLH+0x208>)
 800ac1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	440b      	add	r3, r1
 800ac28:	330c      	adds	r3, #12
 800ac2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac2c:	601a      	str	r2, [r3, #0]
              ret = count;
 800ac2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac30:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800ac32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac34:	3301      	adds	r3, #1
 800ac36:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3a:	2bff      	cmp	r3, #255	; 0xff
 800ac3c:	d999      	bls.n	800ab72 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800ac3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac40:	3301      	adds	r3, #1
 800ac42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac46:	2bff      	cmp	r3, #255	; 0xff
 800ac48:	f67f af6f 	bls.w	800ab2a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ac4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4e:	3301      	adds	r3, #1
 800ac50:	637b      	str	r3, [r7, #52]	; 0x34
 800ac52:	4b09      	ldr	r3, [pc, #36]	; (800ac78 <I2C_Compute_SCLL_SCLH+0x20c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	f4ff af56 	bcc.w	800ab0a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800ac5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	374c      	adds	r7, #76	; 0x4c
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	3b9aca00 	.word	0x3b9aca00
 800ac70:	0802bac8 	.word	0x0802bac8
 800ac74:	2400b310 	.word	0x2400b310
 800ac78:	2400bd10 	.word	0x2400bd10

0800ac7c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08a      	sub	sp, #40	; 0x28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800ac84:	4b31      	ldr	r3, [pc, #196]	; (800ad4c <I2C4_MspInit+0xd0>)
 800ac86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ac8a:	4a30      	ldr	r2, [pc, #192]	; (800ad4c <I2C4_MspInit+0xd0>)
 800ac8c:	f043 0308 	orr.w	r3, r3, #8
 800ac90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ac94:	4b2d      	ldr	r3, [pc, #180]	; (800ad4c <I2C4_MspInit+0xd0>)
 800ac96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ac9a:	f003 0308 	and.w	r3, r3, #8
 800ac9e:	613b      	str	r3, [r7, #16]
 800aca0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800aca2:	4b2a      	ldr	r3, [pc, #168]	; (800ad4c <I2C4_MspInit+0xd0>)
 800aca4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800aca8:	4a28      	ldr	r2, [pc, #160]	; (800ad4c <I2C4_MspInit+0xd0>)
 800acaa:	f043 0308 	orr.w	r3, r3, #8
 800acae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800acb2:	4b26      	ldr	r3, [pc, #152]	; (800ad4c <I2C4_MspInit+0xd0>)
 800acb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800acb8:	f003 0308 	and.w	r3, r3, #8
 800acbc:	60fb      	str	r3, [r7, #12]
 800acbe:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800acc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acc4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800acc6:	2312      	movs	r3, #18
 800acc8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800acca:	2300      	movs	r3, #0
 800accc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800acce:	2302      	movs	r3, #2
 800acd0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800acd2:	2304      	movs	r3, #4
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800acd6:	f107 0314 	add.w	r3, r7, #20
 800acda:	4619      	mov	r1, r3
 800acdc:	481c      	ldr	r0, [pc, #112]	; (800ad50 <I2C4_MspInit+0xd4>)
 800acde:	f001 fec9 	bl	800ca74 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800ace2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ace6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800ace8:	2312      	movs	r3, #18
 800acea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800acec:	2300      	movs	r3, #0
 800acee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800acf0:	2302      	movs	r3, #2
 800acf2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800acf4:	2304      	movs	r3, #4
 800acf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800acf8:	f107 0314 	add.w	r3, r7, #20
 800acfc:	4619      	mov	r1, r3
 800acfe:	4814      	ldr	r0, [pc, #80]	; (800ad50 <I2C4_MspInit+0xd4>)
 800ad00:	f001 feb8 	bl	800ca74 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800ad04:	4b11      	ldr	r3, [pc, #68]	; (800ad4c <I2C4_MspInit+0xd0>)
 800ad06:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ad0a:	4a10      	ldr	r2, [pc, #64]	; (800ad4c <I2C4_MspInit+0xd0>)
 800ad0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad10:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800ad14:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <I2C4_MspInit+0xd0>)
 800ad16:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ad1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad1e:	60bb      	str	r3, [r7, #8]
 800ad20:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800ad22:	4b0a      	ldr	r3, [pc, #40]	; (800ad4c <I2C4_MspInit+0xd0>)
 800ad24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad28:	4a08      	ldr	r2, [pc, #32]	; (800ad4c <I2C4_MspInit+0xd0>)
 800ad2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800ad32:	4b06      	ldr	r3, [pc, #24]	; (800ad4c <I2C4_MspInit+0xd0>)
 800ad34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad38:	4a04      	ldr	r2, [pc, #16]	; (800ad4c <I2C4_MspInit+0xd0>)
 800ad3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800ad42:	bf00      	nop
 800ad44:	3728      	adds	r7, #40	; 0x28
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	58024400 	.word	0x58024400
 800ad50:	58020c00 	.word	0x58020c00

0800ad54 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800ad5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad60:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	4619      	mov	r1, r3
 800ad66:	480b      	ldr	r0, [pc, #44]	; (800ad94 <I2C4_MspDeInit+0x40>)
 800ad68:	f002 f834 	bl	800cdd4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800ad6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad70:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	4619      	mov	r1, r3
 800ad76:	4807      	ldr	r0, [pc, #28]	; (800ad94 <I2C4_MspDeInit+0x40>)
 800ad78:	f002 f82c 	bl	800cdd4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800ad7c:	4b06      	ldr	r3, [pc, #24]	; (800ad98 <I2C4_MspDeInit+0x44>)
 800ad7e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ad82:	4a05      	ldr	r2, [pc, #20]	; (800ad98 <I2C4_MspDeInit+0x44>)
 800ad84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad88:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800ad8c:	bf00      	nop
 800ad8e:	3720      	adds	r7, #32
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	58020c00 	.word	0x58020c00
 800ad98:	58024400 	.word	0x58024400

0800ad9c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af04      	add	r7, sp, #16
 800ada2:	607b      	str	r3, [r7, #4]
 800ada4:	4603      	mov	r3, r0
 800ada6:	81fb      	strh	r3, [r7, #14]
 800ada8:	460b      	mov	r3, r1
 800adaa:	81bb      	strh	r3, [r7, #12]
 800adac:	4613      	mov	r3, r2
 800adae:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800adb0:	8978      	ldrh	r0, [r7, #10]
 800adb2:	89ba      	ldrh	r2, [r7, #12]
 800adb4:	89f9      	ldrh	r1, [r7, #14]
 800adb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800adba:	9302      	str	r3, [sp, #8]
 800adbc:	8b3b      	ldrh	r3, [r7, #24]
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	4603      	mov	r3, r0
 800adc6:	4807      	ldr	r0, [pc, #28]	; (800ade4 <I2C4_WriteReg+0x48>)
 800adc8:	f002 fa3e 	bl	800d248 <HAL_I2C_Mem_Write>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800add2:	2300      	movs	r3, #0
 800add4:	e001      	b.n	800adda <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800add6:	f06f 0307 	mvn.w	r3, #7
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	2400bd14 	.word	0x2400bd14

0800ade8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af04      	add	r7, sp, #16
 800adee:	607b      	str	r3, [r7, #4]
 800adf0:	4603      	mov	r3, r0
 800adf2:	81fb      	strh	r3, [r7, #14]
 800adf4:	460b      	mov	r3, r1
 800adf6:	81bb      	strh	r3, [r7, #12]
 800adf8:	4613      	mov	r3, r2
 800adfa:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800adfc:	8978      	ldrh	r0, [r7, #10]
 800adfe:	89ba      	ldrh	r2, [r7, #12]
 800ae00:	89f9      	ldrh	r1, [r7, #14]
 800ae02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae06:	9302      	str	r3, [sp, #8]
 800ae08:	8b3b      	ldrh	r3, [r7, #24]
 800ae0a:	9301      	str	r3, [sp, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	4603      	mov	r3, r0
 800ae12:	4807      	ldr	r0, [pc, #28]	; (800ae30 <I2C4_ReadReg+0x48>)
 800ae14:	f002 fb2c 	bl	800d470 <HAL_I2C_Mem_Read>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e001      	b.n	800ae26 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800ae22:	f06f 0307 	mvn.w	r3, #7
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	2400bd14 	.word	0x2400bd14

0800ae34 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b094      	sub	sp, #80	; 0x50
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d003      	beq.n	800ae50 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ae48:	f06f 0301 	mvn.w	r3, #1
 800ae4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae4e:	e071      	b.n	800af34 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800ae50:	4a3b      	ldr	r2, [pc, #236]	; (800af40 <BSP_OSPI_NOR_Init+0x10c>)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d16b      	bne.n	800af34 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	225c      	movs	r2, #92	; 0x5c
 800ae60:	fb02 f303 	mul.w	r3, r2, r3
 800ae64:	4a37      	ldr	r2, [pc, #220]	; (800af44 <BSP_OSPI_NOR_Init+0x110>)
 800ae66:	4413      	add	r3, r2
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 fa09 	bl	800b280 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800ae6e:	f107 031c 	add.w	r3, r7, #28
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe fee8 	bl	8009c48 <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae82:	fa93 f3a3 	rbit	r3, r3
 800ae86:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ae88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae8a:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ae8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d101      	bne.n	800ae96 <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 800ae92:	2320      	movs	r3, #32
 800ae94:	e003      	b.n	800ae9e <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 800ae96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae98:	fab3 f383 	clz	r3, r3
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800aea0:	2300      	movs	r3, #0
 800aea2:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	785b      	ldrb	r3, [r3, #1]
 800aea8:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	225c      	movs	r2, #92	; 0x5c
 800aeae:	fb02 f303 	mul.w	r3, r2, r3
 800aeb2:	4a24      	ldr	r2, [pc, #144]	; (800af44 <BSP_OSPI_NOR_Init+0x110>)
 800aeb4:	4413      	add	r3, r2
 800aeb6:	f107 020c 	add.w	r2, r7, #12
 800aeba:	4611      	mov	r1, r2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 f895 	bl	800afec <MX_OSPI_NOR_Init>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d003      	beq.n	800aed0 <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800aec8:	f06f 0303 	mvn.w	r3, #3
 800aecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aece:	e031      	b.n	800af34 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fb7f 	bl	800b5d4 <OSPI_NOR_ResetMemory>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d003      	beq.n	800aee4 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800aedc:	f06f 0304 	mvn.w	r3, #4
 800aee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aee2:	e027      	b.n	800af34 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	225c      	movs	r2, #92	; 0x5c
 800aee8:	fb02 f303 	mul.w	r3, r2, r3
 800aeec:	4a15      	ldr	r2, [pc, #84]	; (800af44 <BSP_OSPI_NOR_Init+0x110>)
 800aeee:	1898      	adds	r0, r3, r2
 800aef0:	4a13      	ldr	r2, [pc, #76]	; (800af40 <BSP_OSPI_NOR_Init+0x10c>)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	4413      	add	r3, r2
 800aef8:	7859      	ldrb	r1, [r3, #1]
 800aefa:	4a11      	ldr	r2, [pc, #68]	; (800af40 <BSP_OSPI_NOR_Init+0x10c>)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	4413      	add	r3, r2
 800af02:	789b      	ldrb	r3, [r3, #2]
 800af04:	461a      	mov	r2, r3
 800af06:	f7fe fece 	bl	8009ca6 <MX25LM51245G_AutoPollingMemReady>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d003      	beq.n	800af18 <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800af10:	f06f 0304 	mvn.w	r3, #4
 800af14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af16:	e00d      	b.n	800af34 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	7819      	ldrb	r1, [r3, #0]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	785b      	ldrb	r3, [r3, #1]
 800af20:	461a      	mov	r2, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f936 	bl	800b194 <BSP_OSPI_NOR_ConfigFlash>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800af2e:	f06f 0304 	mvn.w	r3, #4
 800af32:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 800af34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800af36:	4618      	mov	r0, r3
 800af38:	3750      	adds	r7, #80	; 0x50
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	2400bdc4 	.word	0x2400bdc4
 800af44:	2400bd68 	.word	0x2400bd68

0800af48 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800af50:	2300      	movs	r3, #0
 800af52:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800af5a:	f06f 0301 	mvn.w	r3, #1
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	e03a      	b.n	800afd8 <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800af62:	4a20      	ldr	r2, [pc, #128]	; (800afe4 <BSP_OSPI_NOR_DeInit+0x9c>)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d108      	bne.n	800af80 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f8da 	bl	800b128 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d002      	beq.n	800af80 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af7a:	f06f 0304 	mvn.w	r3, #4
 800af7e:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d128      	bne.n	800afd8 <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800af86:	4a17      	ldr	r2, [pc, #92]	; (800afe4 <BSP_OSPI_NOR_DeInit+0x9c>)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2100      	movs	r1, #0
 800af8c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800af90:	4a14      	ldr	r2, [pc, #80]	; (800afe4 <BSP_OSPI_NOR_DeInit+0x9c>)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	00db      	lsls	r3, r3, #3
 800af96:	4413      	add	r3, r2
 800af98:	2200      	movs	r2, #0
 800af9a:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800af9c:	4a11      	ldr	r2, [pc, #68]	; (800afe4 <BSP_OSPI_NOR_DeInit+0x9c>)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	00db      	lsls	r3, r3, #3
 800afa2:	4413      	add	r3, r2
 800afa4:	2200      	movs	r2, #0
 800afa6:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	225c      	movs	r2, #92	; 0x5c
 800afac:	fb02 f303 	mul.w	r3, r2, r3
 800afb0:	4a0d      	ldr	r2, [pc, #52]	; (800afe8 <BSP_OSPI_NOR_DeInit+0xa0>)
 800afb2:	4413      	add	r3, r2
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 fab3 	bl	800b520 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	225c      	movs	r2, #92	; 0x5c
 800afbe:	fb02 f303 	mul.w	r3, r2, r3
 800afc2:	4a09      	ldr	r2, [pc, #36]	; (800afe8 <BSP_OSPI_NOR_DeInit+0xa0>)
 800afc4:	4413      	add	r3, r2
 800afc6:	4618      	mov	r0, r3
 800afc8:	f005 fe98 	bl	8010cfc <HAL_OSPI_DeInit>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800afd2:	f06f 0303 	mvn.w	r3, #3
 800afd6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800afd8:	68fb      	ldr	r3, [r7, #12]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	2400bdc4 	.word	0x2400bdc4
 800afe8:	2400bd68 	.word	0x2400bd68

0800afec <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a20      	ldr	r2, [pc, #128]	; (800b07c <MX_OSPI_NOR_Init+0x90>)
 800affa:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2204      	movs	r2, #4
 800b000:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2202      	movs	r2, #2
 800b014:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	689a      	ldr	r2, [r3, #8]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2208      	movs	r2, #8
 800b042:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d108      	bne.n	800b05e <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b052:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b05a:	62da      	str	r2, [r3, #44]	; 0x2c
 800b05c:	e005      	b.n	800b06a <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f005 fd8a 	bl	8010b84 <HAL_OSPI_Init>
 800b070:	4603      	mov	r3, r0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	52005000 	.word	0x52005000

0800b080 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b088:	2300      	movs	r3, #0
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d003      	beq.n	800b09a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b092:	f06f 0301 	mvn.w	r3, #1
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	e03d      	b.n	800b116 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800b09a:	4a21      	ldr	r2, [pc, #132]	; (800b120 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	4413      	add	r3, r2
 800b0a2:	789b      	ldrb	r3, [r3, #2]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d11b      	bne.n	800b0e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	225c      	movs	r2, #92	; 0x5c
 800b0ac:	fb02 f303 	mul.w	r3, r2, r3
 800b0b0:	4a1c      	ldr	r2, [pc, #112]	; (800b124 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800b0b2:	1898      	adds	r0, r3, r2
 800b0b4:	4a1a      	ldr	r2, [pc, #104]	; (800b120 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	00db      	lsls	r3, r3, #3
 800b0ba:	4413      	add	r3, r2
 800b0bc:	785b      	ldrb	r3, [r3, #1]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f7fe fe9d 	bl	8009e00 <MX25LM51245G_EnableMemoryMappedModeSTR>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d003      	beq.n	800b0d4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0cc:	f06f 0304 	mvn.w	r3, #4
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	e020      	b.n	800b116 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800b0d4:	4a12      	ldr	r2, [pc, #72]	; (800b120 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2102      	movs	r1, #2
 800b0da:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800b0de:	e01a      	b.n	800b116 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	225c      	movs	r2, #92	; 0x5c
 800b0e4:	fb02 f303 	mul.w	r3, r2, r3
 800b0e8:	4a0e      	ldr	r2, [pc, #56]	; (800b124 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800b0ea:	441a      	add	r2, r3
 800b0ec:	490c      	ldr	r1, [pc, #48]	; (800b120 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	00db      	lsls	r3, r3, #3
 800b0f2:	440b      	add	r3, r1
 800b0f4:	785b      	ldrb	r3, [r3, #1]
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	f7fe ff2b 	bl	8009f54 <MX25LM51245G_EnableMemoryMappedModeDTR>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d003      	beq.n	800b10c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b104:	f06f 0304 	mvn.w	r3, #4
 800b108:	60fb      	str	r3, [r7, #12]
 800b10a:	e004      	b.n	800b116 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800b10c:	4a04      	ldr	r2, [pc, #16]	; (800b120 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2102      	movs	r1, #2
 800b112:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800b116:	68fb      	ldr	r3, [r7, #12]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	2400bdc4 	.word	0x2400bdc4
 800b124:	2400bd68 	.word	0x2400bd68

0800b128 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b130:	2300      	movs	r3, #0
 800b132:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b13a:	f06f 0301 	mvn.w	r3, #1
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	e01e      	b.n	800b180 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800b142:	4a12      	ldr	r2, [pc, #72]	; (800b18c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d003      	beq.n	800b156 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800b14e:	f06f 031a 	mvn.w	r3, #26
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e014      	b.n	800b180 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	225c      	movs	r2, #92	; 0x5c
 800b15a:	fb02 f303 	mul.w	r3, r2, r3
 800b15e:	4a0c      	ldr	r2, [pc, #48]	; (800b190 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 800b160:	4413      	add	r3, r2
 800b162:	4618      	mov	r0, r3
 800b164:	f006 f9fc 	bl	8011560 <HAL_OSPI_Abort>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d003      	beq.n	800b176 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800b16e:	f06f 0303 	mvn.w	r3, #3
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	e004      	b.n	800b180 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800b176:	4a05      	ldr	r2, [pc, #20]	; (800b18c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2101      	movs	r1, #1
 800b17c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 800b180:	68fb      	ldr	r3, [r7, #12]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	2400bdc4 	.word	0x2400bdc4
 800b190:	2400bd68 	.word	0x2400bd68

0800b194 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	460b      	mov	r3, r1
 800b19e:	70fb      	strb	r3, [r7, #3]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b1ae:	f06f 0301 	mvn.w	r3, #1
 800b1b2:	60fb      	str	r3, [r7, #12]
 800b1b4:	e05d      	b.n	800b272 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800b1b6:	4a31      	ldr	r2, [pc, #196]	; (800b27c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d103      	bne.n	800b1ca <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800b1c2:	f06f 0319 	mvn.w	r3, #25
 800b1c6:	60fb      	str	r3, [r7, #12]
 800b1c8:	e053      	b.n	800b272 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800b1ca:	4a2c      	ldr	r2, [pc, #176]	; (800b27c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	4413      	add	r3, r2
 800b1d2:	785b      	ldrb	r3, [r3, #1]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d125      	bne.n	800b224 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800b1d8:	78fb      	ldrb	r3, [r7, #3]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d107      	bne.n	800b1ee <BSP_OSPI_NOR_ConfigFlash+0x5a>
 800b1de:	4a27      	ldr	r2, [pc, #156]	; (800b27c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	00db      	lsls	r3, r3, #3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	789b      	ldrb	r3, [r3, #2]
 800b1e8:	78ba      	ldrb	r2, [r7, #2]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d02a      	beq.n	800b244 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fbfc 	bl	800b9ec <OSPI_NOR_ExitOPIMode>
 800b1f4:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d123      	bne.n	800b244 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 800b1fc:	78fb      	ldrb	r3, [r7, #3]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d120      	bne.n	800b244 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800b202:	4a1e      	ldr	r2, [pc, #120]	; (800b27c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	00db      	lsls	r3, r3, #3
 800b208:	4413      	add	r3, r2
 800b20a:	789b      	ldrb	r3, [r3, #2]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d104      	bne.n	800b21a <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fa6f 	bl	800b6f4 <OSPI_NOR_EnterDOPIMode>
 800b216:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800b218:	e014      	b.n	800b244 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fb3a 	bl	800b894 <OSPI_NOR_EnterSOPIMode>
 800b220:	60f8      	str	r0, [r7, #12]
      break;
 800b222:	e00f      	b.n	800b244 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800b224:	78fb      	ldrb	r3, [r7, #3]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d10e      	bne.n	800b248 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800b22a:	78bb      	ldrb	r3, [r7, #2]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d104      	bne.n	800b23a <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fb2f 	bl	800b894 <OSPI_NOR_EnterSOPIMode>
 800b236:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 800b238:	e006      	b.n	800b248 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fa5a 	bl	800b6f4 <OSPI_NOR_EnterDOPIMode>
 800b240:	60f8      	str	r0, [r7, #12]
      break;
 800b242:	e001      	b.n	800b248 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 800b244:	bf00      	nop
 800b246:	e000      	b.n	800b24a <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 800b248:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d110      	bne.n	800b272 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800b250:	4a0a      	ldr	r2, [pc, #40]	; (800b27c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2101      	movs	r1, #1
 800b256:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800b25a:	4a08      	ldr	r2, [pc, #32]	; (800b27c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	00db      	lsls	r3, r3, #3
 800b260:	4413      	add	r3, r2
 800b262:	78fa      	ldrb	r2, [r7, #3]
 800b264:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800b266:	4a05      	ldr	r2, [pc, #20]	; (800b27c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	00db      	lsls	r3, r3, #3
 800b26c:	4413      	add	r3, r2
 800b26e:	78ba      	ldrb	r2, [r7, #2]
 800b270:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 800b272:	68fb      	ldr	r3, [r7, #12]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	2400bdc4 	.word	0x2400bdc4

0800b280 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b094      	sub	sp, #80	; 0x50
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800b288:	4b9e      	ldr	r3, [pc, #632]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b28a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800b28e:	4a9d      	ldr	r2, [pc, #628]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b294:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800b298:	4b9a      	ldr	r3, [pc, #616]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b29a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800b29e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800b2a6:	4b97      	ldr	r3, [pc, #604]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2aa:	4a96      	ldr	r2, [pc, #600]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b2b0:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800b2b2:	4b94      	ldr	r3, [pc, #592]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2b6:	4a93      	ldr	r2, [pc, #588]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2bc:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 800b2be:	4b91      	ldr	r3, [pc, #580]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b2c4:	4a8f      	ldr	r2, [pc, #572]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2c6:	f043 0302 	orr.w	r3, r3, #2
 800b2ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b2ce:	4b8d      	ldr	r3, [pc, #564]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b2d4:	f003 0302 	and.w	r3, r3, #2
 800b2d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 800b2dc:	4b89      	ldr	r3, [pc, #548]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b2e2:	4a88      	ldr	r2, [pc, #544]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2e4:	f043 0304 	orr.w	r3, r3, #4
 800b2e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b2ec:	4b85      	ldr	r3, [pc, #532]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b2f2:	f003 0304 	and.w	r3, r3, #4
 800b2f6:	633b      	str	r3, [r7, #48]	; 0x30
 800b2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800b2fa:	4b82      	ldr	r3, [pc, #520]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b2fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b300:	4a80      	ldr	r2, [pc, #512]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b306:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b30a:	4b7e      	ldr	r3, [pc, #504]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b30c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b314:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800b318:	4b7a      	ldr	r3, [pc, #488]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b31a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b31e:	4a79      	ldr	r2, [pc, #484]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b320:	f043 0308 	orr.w	r3, r3, #8
 800b324:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b328:	4b76      	ldr	r3, [pc, #472]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b32a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b32e:	f003 0308 	and.w	r3, r3, #8
 800b332:	62bb      	str	r3, [r7, #40]	; 0x28
 800b334:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 800b336:	4b73      	ldr	r3, [pc, #460]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b338:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b33c:	4a71      	ldr	r2, [pc, #452]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b33e:	f043 0320 	orr.w	r3, r3, #32
 800b342:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b346:	4b6f      	ldr	r3, [pc, #444]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b348:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b34c:	f003 0320 	and.w	r3, r3, #32
 800b350:	627b      	str	r3, [r7, #36]	; 0x24
 800b352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 800b354:	4b6b      	ldr	r3, [pc, #428]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b356:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b35a:	4a6a      	ldr	r2, [pc, #424]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b35c:	f043 0320 	orr.w	r3, r3, #32
 800b360:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b364:	4b67      	ldr	r3, [pc, #412]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b366:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b36a:	f003 0320 	and.w	r3, r3, #32
 800b36e:	623b      	str	r3, [r7, #32]
 800b370:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 800b372:	4b64      	ldr	r3, [pc, #400]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b374:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b378:	4a62      	ldr	r2, [pc, #392]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b37a:	f043 0320 	orr.w	r3, r3, #32
 800b37e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b382:	4b60      	ldr	r3, [pc, #384]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b384:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b388:	f003 0320 	and.w	r3, r3, #32
 800b38c:	61fb      	str	r3, [r7, #28]
 800b38e:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 800b390:	4b5c      	ldr	r3, [pc, #368]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b392:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b396:	4a5b      	ldr	r2, [pc, #364]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b398:	f043 0304 	orr.w	r3, r3, #4
 800b39c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b3a0:	4b58      	ldr	r3, [pc, #352]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b3a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b3a6:	f003 0304 	and.w	r3, r3, #4
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 800b3ae:	4b55      	ldr	r3, [pc, #340]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b3b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b3b4:	4a53      	ldr	r2, [pc, #332]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b3b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b3be:	4b51      	ldr	r3, [pc, #324]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b3c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3c8:	617b      	str	r3, [r7, #20]
 800b3ca:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 800b3cc:	4b4d      	ldr	r3, [pc, #308]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b3ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b3d2:	4a4c      	ldr	r2, [pc, #304]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b3dc:	4b49      	ldr	r3, [pc, #292]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b3de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e6:	613b      	str	r3, [r7, #16]
 800b3e8:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 800b3ea:	4b46      	ldr	r3, [pc, #280]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b3ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b3f0:	4a44      	ldr	r2, [pc, #272]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b3f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b3fa:	4b42      	ldr	r3, [pc, #264]	; (800b504 <OSPI_NOR_MspInit+0x284>)
 800b3fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b404:	60fb      	str	r3, [r7, #12]
 800b406:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800b408:	2340      	movs	r3, #64	; 0x40
 800b40a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800b40c:	2302      	movs	r3, #2
 800b40e:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800b410:	2301      	movs	r3, #1
 800b412:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800b414:	2303      	movs	r3, #3
 800b416:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800b418:	230a      	movs	r3, #10
 800b41a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800b41c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b420:	4619      	mov	r1, r3
 800b422:	4839      	ldr	r0, [pc, #228]	; (800b508 <OSPI_NOR_MspInit+0x288>)
 800b424:	f001 fb26 	bl	800ca74 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 800b428:	2320      	movs	r3, #32
 800b42a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 800b42c:	230a      	movs	r3, #10
 800b42e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 800b430:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b434:	4619      	mov	r1, r3
 800b436:	4835      	ldr	r0, [pc, #212]	; (800b50c <OSPI_NOR_MspInit+0x28c>)
 800b438:	f001 fb1c 	bl	800ca74 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 800b43c:	2304      	movs	r3, #4
 800b43e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800b440:	2300      	movs	r3, #0
 800b442:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800b444:	2309      	movs	r3, #9
 800b446:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800b448:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b44c:	4619      	mov	r1, r3
 800b44e:	4830      	ldr	r0, [pc, #192]	; (800b510 <OSPI_NOR_MspInit+0x290>)
 800b450:	f001 fb10 	bl	800ca74 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 800b454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b458:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800b45a:	2309      	movs	r3, #9
 800b45c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800b45e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b462:	4619      	mov	r1, r3
 800b464:	482b      	ldr	r0, [pc, #172]	; (800b514 <OSPI_NOR_MspInit+0x294>)
 800b466:	f001 fb05 	bl	800ca74 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800b46a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b46e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800b470:	230a      	movs	r3, #10
 800b472:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800b474:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b478:	4619      	mov	r1, r3
 800b47a:	4827      	ldr	r0, [pc, #156]	; (800b518 <OSPI_NOR_MspInit+0x298>)
 800b47c:	f001 fafa 	bl	800ca74 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800b480:	2380      	movs	r3, #128	; 0x80
 800b482:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800b484:	230a      	movs	r3, #10
 800b486:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800b488:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b48c:	4619      	mov	r1, r3
 800b48e:	4822      	ldr	r0, [pc, #136]	; (800b518 <OSPI_NOR_MspInit+0x298>)
 800b490:	f001 faf0 	bl	800ca74 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800b494:	2340      	movs	r3, #64	; 0x40
 800b496:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800b498:	230a      	movs	r3, #10
 800b49a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800b49c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	481d      	ldr	r0, [pc, #116]	; (800b518 <OSPI_NOR_MspInit+0x298>)
 800b4a4:	f001 fae6 	bl	800ca74 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800b4ac:	230a      	movs	r3, #10
 800b4ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800b4b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4815      	ldr	r0, [pc, #84]	; (800b50c <OSPI_NOR_MspInit+0x28c>)
 800b4b8:	f001 fadc 	bl	800ca74 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800b4bc:	2308      	movs	r3, #8
 800b4be:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800b4c0:	2309      	movs	r3, #9
 800b4c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800b4c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	4814      	ldr	r0, [pc, #80]	; (800b51c <OSPI_NOR_MspInit+0x29c>)
 800b4cc:	f001 fad2 	bl	800ca74 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800b4d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800b4d6:	2309      	movs	r3, #9
 800b4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800b4da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4de:	4619      	mov	r1, r3
 800b4e0:	4809      	ldr	r0, [pc, #36]	; (800b508 <OSPI_NOR_MspInit+0x288>)
 800b4e2:	f001 fac7 	bl	800ca74 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800b4e6:	2380      	movs	r3, #128	; 0x80
 800b4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800b4ea:	230a      	movs	r3, #10
 800b4ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800b4ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4807      	ldr	r0, [pc, #28]	; (800b514 <OSPI_NOR_MspInit+0x294>)
 800b4f6:	f001 fabd 	bl	800ca74 <HAL_GPIO_Init>
}
 800b4fa:	bf00      	nop
 800b4fc:	3750      	adds	r7, #80	; 0x50
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	58024400 	.word	0x58024400
 800b508:	58021800 	.word	0x58021800
 800b50c:	58020800 	.word	0x58020800
 800b510:	58020400 	.word	0x58020400
 800b514:	58020c00 	.word	0x58020c00
 800b518:	58021400 	.word	0x58021400
 800b51c:	58021c00 	.word	0x58021c00

0800b520 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800b528:	2104      	movs	r1, #4
 800b52a:	4823      	ldr	r0, [pc, #140]	; (800b5b8 <OSPI_NOR_MspDeInit+0x98>)
 800b52c:	f001 fc52 	bl	800cdd4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800b530:	2120      	movs	r1, #32
 800b532:	4822      	ldr	r0, [pc, #136]	; (800b5bc <OSPI_NOR_MspDeInit+0x9c>)
 800b534:	f001 fc4e 	bl	800cdd4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 800b538:	2140      	movs	r1, #64	; 0x40
 800b53a:	4821      	ldr	r0, [pc, #132]	; (800b5c0 <OSPI_NOR_MspDeInit+0xa0>)
 800b53c:	f001 fc4a 	bl	800cdd4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800b540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b544:	481f      	ldr	r0, [pc, #124]	; (800b5c4 <OSPI_NOR_MspDeInit+0xa4>)
 800b546:	f001 fc45 	bl	800cdd4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800b54a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b54e:	481e      	ldr	r0, [pc, #120]	; (800b5c8 <OSPI_NOR_MspDeInit+0xa8>)
 800b550:	f001 fc40 	bl	800cdd4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800b554:	2180      	movs	r1, #128	; 0x80
 800b556:	481c      	ldr	r0, [pc, #112]	; (800b5c8 <OSPI_NOR_MspDeInit+0xa8>)
 800b558:	f001 fc3c 	bl	800cdd4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800b55c:	2140      	movs	r1, #64	; 0x40
 800b55e:	481a      	ldr	r0, [pc, #104]	; (800b5c8 <OSPI_NOR_MspDeInit+0xa8>)
 800b560:	f001 fc38 	bl	800cdd4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800b564:	2102      	movs	r1, #2
 800b566:	4815      	ldr	r0, [pc, #84]	; (800b5bc <OSPI_NOR_MspDeInit+0x9c>)
 800b568:	f001 fc34 	bl	800cdd4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800b56c:	2108      	movs	r1, #8
 800b56e:	4817      	ldr	r0, [pc, #92]	; (800b5cc <OSPI_NOR_MspDeInit+0xac>)
 800b570:	f001 fc30 	bl	800cdd4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800b574:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b578:	4811      	ldr	r0, [pc, #68]	; (800b5c0 <OSPI_NOR_MspDeInit+0xa0>)
 800b57a:	f001 fc2b 	bl	800cdd4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800b57e:	2180      	movs	r1, #128	; 0x80
 800b580:	4810      	ldr	r0, [pc, #64]	; (800b5c4 <OSPI_NOR_MspDeInit+0xa4>)
 800b582:	f001 fc27 	bl	800cdd4 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800b586:	4b12      	ldr	r3, [pc, #72]	; (800b5d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b58a:	4a11      	ldr	r2, [pc, #68]	; (800b5d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b58c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b590:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800b592:	4b0f      	ldr	r3, [pc, #60]	; (800b5d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b596:	4a0e      	ldr	r2, [pc, #56]	; (800b5d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b59c:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 800b59e:	4b0c      	ldr	r3, [pc, #48]	; (800b5d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b5a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800b5a4:	4a0a      	ldr	r2, [pc, #40]	; (800b5d0 <OSPI_NOR_MspDeInit+0xb0>)
 800b5a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5aa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 800b5ae:	bf00      	nop
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	58020400 	.word	0x58020400
 800b5bc:	58020800 	.word	0x58020800
 800b5c0:	58021800 	.word	0x58021800
 800b5c4:	58020c00 	.word	0x58020c00
 800b5c8:	58021400 	.word	0x58021400
 800b5cc:	58021c00 	.word	0x58021c00
 800b5d0:	58024400 	.word	0x58024400

0800b5d4 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	225c      	movs	r2, #92	; 0x5c
 800b5e4:	fb02 f303 	mul.w	r3, r2, r3
 800b5e8:	4a40      	ldr	r2, [pc, #256]	; (800b6ec <OSPI_NOR_ResetMemory+0x118>)
 800b5ea:	4413      	add	r3, r2
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe ff18 	bl	800a426 <MX25LM51245G_ResetEnable>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5fc:	f06f 0304 	mvn.w	r3, #4
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	e06d      	b.n	800b6e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	225c      	movs	r2, #92	; 0x5c
 800b608:	fb02 f303 	mul.w	r3, r2, r3
 800b60c:	4a37      	ldr	r2, [pc, #220]	; (800b6ec <OSPI_NOR_ResetMemory+0x118>)
 800b60e:	4413      	add	r3, r2
 800b610:	2200      	movs	r2, #0
 800b612:	2100      	movs	r1, #0
 800b614:	4618      	mov	r0, r3
 800b616:	f7fe ff5e 	bl	800a4d6 <MX25LM51245G_ResetMemory>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d003      	beq.n	800b628 <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b620:	f06f 0304 	mvn.w	r3, #4
 800b624:	60fb      	str	r3, [r7, #12]
 800b626:	e05b      	b.n	800b6e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	225c      	movs	r2, #92	; 0x5c
 800b62c:	fb02 f303 	mul.w	r3, r2, r3
 800b630:	4a2e      	ldr	r2, [pc, #184]	; (800b6ec <OSPI_NOR_ResetMemory+0x118>)
 800b632:	4413      	add	r3, r2
 800b634:	2200      	movs	r2, #0
 800b636:	2101      	movs	r1, #1
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fe fef4 	bl	800a426 <MX25LM51245G_ResetEnable>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d003      	beq.n	800b64c <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b644:	f06f 0304 	mvn.w	r3, #4
 800b648:	60fb      	str	r3, [r7, #12]
 800b64a:	e049      	b.n	800b6e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	225c      	movs	r2, #92	; 0x5c
 800b650:	fb02 f303 	mul.w	r3, r2, r3
 800b654:	4a25      	ldr	r2, [pc, #148]	; (800b6ec <OSPI_NOR_ResetMemory+0x118>)
 800b656:	4413      	add	r3, r2
 800b658:	2200      	movs	r2, #0
 800b65a:	2101      	movs	r1, #1
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe ff3a 	bl	800a4d6 <MX25LM51245G_ResetMemory>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b668:	f06f 0304 	mvn.w	r3, #4
 800b66c:	60fb      	str	r3, [r7, #12]
 800b66e:	e037      	b.n	800b6e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	225c      	movs	r2, #92	; 0x5c
 800b674:	fb02 f303 	mul.w	r3, r2, r3
 800b678:	4a1c      	ldr	r2, [pc, #112]	; (800b6ec <OSPI_NOR_ResetMemory+0x118>)
 800b67a:	4413      	add	r3, r2
 800b67c:	2201      	movs	r2, #1
 800b67e:	2101      	movs	r1, #1
 800b680:	4618      	mov	r0, r3
 800b682:	f7fe fed0 	bl	800a426 <MX25LM51245G_ResetEnable>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d003      	beq.n	800b694 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b68c:	f06f 0304 	mvn.w	r3, #4
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	e025      	b.n	800b6e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	225c      	movs	r2, #92	; 0x5c
 800b698:	fb02 f303 	mul.w	r3, r2, r3
 800b69c:	4a13      	ldr	r2, [pc, #76]	; (800b6ec <OSPI_NOR_ResetMemory+0x118>)
 800b69e:	4413      	add	r3, r2
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	2101      	movs	r1, #1
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fe ff16 	bl	800a4d6 <MX25LM51245G_ResetMemory>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d003      	beq.n	800b6b8 <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6b0:	f06f 0304 	mvn.w	r3, #4
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	e013      	b.n	800b6e0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800b6b8:	4a0d      	ldr	r2, [pc, #52]	; (800b6f0 <OSPI_NOR_ResetMemory+0x11c>)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2101      	movs	r1, #1
 800b6be:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800b6c2:	4a0b      	ldr	r2, [pc, #44]	; (800b6f0 <OSPI_NOR_ResetMemory+0x11c>)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	00db      	lsls	r3, r3, #3
 800b6c8:	4413      	add	r3, r2
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800b6ce:	4a08      	ldr	r2, [pc, #32]	; (800b6f0 <OSPI_NOR_ResetMemory+0x11c>)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	00db      	lsls	r3, r3, #3
 800b6d4:	4413      	add	r3, r2
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800b6da:	2064      	movs	r0, #100	; 0x64
 800b6dc:	f000 fd04 	bl	800c0e8 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	2400bd68 	.word	0x2400bd68
 800b6f0:	2400bdc4 	.word	0x2400bdc4

0800b6f4 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	225c      	movs	r2, #92	; 0x5c
 800b704:	fb02 f303 	mul.w	r3, r2, r3
 800b708:	4a60      	ldr	r2, [pc, #384]	; (800b88c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b70a:	1898      	adds	r0, r3, r2
 800b70c:	4a60      	ldr	r2, [pc, #384]	; (800b890 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	00db      	lsls	r3, r3, #3
 800b712:	4413      	add	r3, r2
 800b714:	7859      	ldrb	r1, [r3, #1]
 800b716:	4a5e      	ldr	r2, [pc, #376]	; (800b890 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	00db      	lsls	r3, r3, #3
 800b71c:	4413      	add	r3, r2
 800b71e:	789b      	ldrb	r3, [r3, #2]
 800b720:	461a      	mov	r2, r3
 800b722:	f7fe fc86 	bl	800a032 <MX25LM51245G_WriteEnable>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d003      	beq.n	800b734 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b72c:	f06f 0304 	mvn.w	r3, #4
 800b730:	60fb      	str	r3, [r7, #12]
 800b732:	e0a6      	b.n	800b882 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	225c      	movs	r2, #92	; 0x5c
 800b738:	fb02 f303 	mul.w	r3, r2, r3
 800b73c:	4a53      	ldr	r2, [pc, #332]	; (800b88c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b73e:	1898      	adds	r0, r3, r2
 800b740:	4a53      	ldr	r2, [pc, #332]	; (800b890 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	00db      	lsls	r3, r3, #3
 800b746:	4413      	add	r3, r2
 800b748:	7859      	ldrb	r1, [r3, #1]
 800b74a:	4a51      	ldr	r2, [pc, #324]	; (800b890 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	00db      	lsls	r3, r3, #3
 800b750:	4413      	add	r3, r2
 800b752:	789a      	ldrb	r2, [r3, #2]
 800b754:	2307      	movs	r3, #7
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b75c:	f7fe fd34 	bl	800a1c8 <MX25LM51245G_WriteCfg2Register>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b766:	f06f 0304 	mvn.w	r3, #4
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	e089      	b.n	800b882 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	225c      	movs	r2, #92	; 0x5c
 800b772:	fb02 f303 	mul.w	r3, r2, r3
 800b776:	4a45      	ldr	r2, [pc, #276]	; (800b88c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b778:	1898      	adds	r0, r3, r2
 800b77a:	4a45      	ldr	r2, [pc, #276]	; (800b890 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	00db      	lsls	r3, r3, #3
 800b780:	4413      	add	r3, r2
 800b782:	7859      	ldrb	r1, [r3, #1]
 800b784:	4a42      	ldr	r2, [pc, #264]	; (800b890 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	00db      	lsls	r3, r3, #3
 800b78a:	4413      	add	r3, r2
 800b78c:	789b      	ldrb	r3, [r3, #2]
 800b78e:	461a      	mov	r2, r3
 800b790:	f7fe fc4f 	bl	800a032 <MX25LM51245G_WriteEnable>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d003      	beq.n	800b7a2 <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b79a:	f06f 0304 	mvn.w	r3, #4
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e06f      	b.n	800b882 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	225c      	movs	r2, #92	; 0x5c
 800b7a6:	fb02 f303 	mul.w	r3, r2, r3
 800b7aa:	4a38      	ldr	r2, [pc, #224]	; (800b88c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b7ac:	1898      	adds	r0, r3, r2
 800b7ae:	4a38      	ldr	r2, [pc, #224]	; (800b890 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	00db      	lsls	r3, r3, #3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	7859      	ldrb	r1, [r3, #1]
 800b7b8:	4a35      	ldr	r2, [pc, #212]	; (800b890 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	00db      	lsls	r3, r3, #3
 800b7be:	4413      	add	r3, r2
 800b7c0:	789a      	ldrb	r2, [r3, #2]
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f7fe fcfe 	bl	800a1c8 <MX25LM51245G_WriteCfg2Register>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7d2:	f06f 0304 	mvn.w	r3, #4
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e053      	b.n	800b882 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800b7da:	2028      	movs	r0, #40	; 0x28
 800b7dc:	f000 fc84 	bl	800c0e8 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800b7e0:	4a2a      	ldr	r2, [pc, #168]	; (800b88c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	215c      	movs	r1, #92	; 0x5c
 800b7e6:	fb01 f303 	mul.w	r3, r1, r3
 800b7ea:	4413      	add	r3, r2
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7f2:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800b7f4:	4a25      	ldr	r2, [pc, #148]	; (800b88c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	215c      	movs	r1, #92	; 0x5c
 800b7fa:	fb01 f303 	mul.w	r3, r1, r3
 800b7fe:	4413      	add	r3, r2
 800b800:	332c      	adds	r3, #44	; 0x2c
 800b802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b806:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	225c      	movs	r2, #92	; 0x5c
 800b80c:	fb02 f303 	mul.w	r3, r2, r3
 800b810:	4a1e      	ldr	r2, [pc, #120]	; (800b88c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b812:	4413      	add	r3, r2
 800b814:	4618      	mov	r0, r3
 800b816:	f005 f9b5 	bl	8010b84 <HAL_OSPI_Init>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b820:	f06f 0303 	mvn.w	r3, #3
 800b824:	60fb      	str	r3, [r7, #12]
 800b826:	e02c      	b.n	800b882 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	225c      	movs	r2, #92	; 0x5c
 800b82c:	fb02 f303 	mul.w	r3, r2, r3
 800b830:	4a16      	ldr	r2, [pc, #88]	; (800b88c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b832:	4413      	add	r3, r2
 800b834:	2201      	movs	r2, #1
 800b836:	2101      	movs	r1, #1
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fe fa34 	bl	8009ca6 <MX25LM51245G_AutoPollingMemReady>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d003      	beq.n	800b84c <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b844:	f06f 0304 	mvn.w	r3, #4
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	e01a      	b.n	800b882 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	225c      	movs	r2, #92	; 0x5c
 800b850:	fb02 f303 	mul.w	r3, r2, r3
 800b854:	4a0d      	ldr	r2, [pc, #52]	; (800b88c <OSPI_NOR_EnterDOPIMode+0x198>)
 800b856:	1898      	adds	r0, r3, r2
 800b858:	f107 0308 	add.w	r3, r7, #8
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	2300      	movs	r3, #0
 800b860:	2201      	movs	r2, #1
 800b862:	2101      	movs	r1, #1
 800b864:	f7fe fd45 	bl	800a2f2 <MX25LM51245G_ReadCfg2Register>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d003      	beq.n	800b876 <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b86e:	f06f 0304 	mvn.w	r3, #4
 800b872:	60fb      	str	r3, [r7, #12]
 800b874:	e005      	b.n	800b882 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800b876:	7a3b      	ldrb	r3, [r7, #8]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d002      	beq.n	800b882 <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b87c:	f06f 0304 	mvn.w	r3, #4
 800b880:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800b882:	68fb      	ldr	r3, [r7, #12]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	2400bd68 	.word	0x2400bd68
 800b890:	2400bdc4 	.word	0x2400bdc4

0800b894 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af02      	add	r7, sp, #8
 800b89a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	225c      	movs	r2, #92	; 0x5c
 800b8a4:	fb02 f303 	mul.w	r3, r2, r3
 800b8a8:	4a4e      	ldr	r2, [pc, #312]	; (800b9e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b8aa:	1898      	adds	r0, r3, r2
 800b8ac:	4a4e      	ldr	r2, [pc, #312]	; (800b9e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	00db      	lsls	r3, r3, #3
 800b8b2:	4413      	add	r3, r2
 800b8b4:	7859      	ldrb	r1, [r3, #1]
 800b8b6:	4a4c      	ldr	r2, [pc, #304]	; (800b9e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	4413      	add	r3, r2
 800b8be:	789b      	ldrb	r3, [r3, #2]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	f7fe fbb6 	bl	800a032 <MX25LM51245G_WriteEnable>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d003      	beq.n	800b8d4 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b8cc:	f06f 0304 	mvn.w	r3, #4
 800b8d0:	60fb      	str	r3, [r7, #12]
 800b8d2:	e082      	b.n	800b9da <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	225c      	movs	r2, #92	; 0x5c
 800b8d8:	fb02 f303 	mul.w	r3, r2, r3
 800b8dc:	4a41      	ldr	r2, [pc, #260]	; (800b9e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b8de:	1898      	adds	r0, r3, r2
 800b8e0:	4a41      	ldr	r2, [pc, #260]	; (800b9e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	00db      	lsls	r3, r3, #3
 800b8e6:	4413      	add	r3, r2
 800b8e8:	7859      	ldrb	r1, [r3, #1]
 800b8ea:	4a3f      	ldr	r2, [pc, #252]	; (800b9e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	00db      	lsls	r3, r3, #3
 800b8f0:	4413      	add	r3, r2
 800b8f2:	789a      	ldrb	r2, [r3, #2]
 800b8f4:	2307      	movs	r3, #7
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b8fc:	f7fe fc64 	bl	800a1c8 <MX25LM51245G_WriteCfg2Register>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d003      	beq.n	800b90e <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b906:	f06f 0304 	mvn.w	r3, #4
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	e065      	b.n	800b9da <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	225c      	movs	r2, #92	; 0x5c
 800b912:	fb02 f303 	mul.w	r3, r2, r3
 800b916:	4a33      	ldr	r2, [pc, #204]	; (800b9e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b918:	1898      	adds	r0, r3, r2
 800b91a:	4a33      	ldr	r2, [pc, #204]	; (800b9e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	00db      	lsls	r3, r3, #3
 800b920:	4413      	add	r3, r2
 800b922:	7859      	ldrb	r1, [r3, #1]
 800b924:	4a30      	ldr	r2, [pc, #192]	; (800b9e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	00db      	lsls	r3, r3, #3
 800b92a:	4413      	add	r3, r2
 800b92c:	789b      	ldrb	r3, [r3, #2]
 800b92e:	461a      	mov	r2, r3
 800b930:	f7fe fb7f 	bl	800a032 <MX25LM51245G_WriteEnable>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b93a:	f06f 0304 	mvn.w	r3, #4
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e04b      	b.n	800b9da <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	225c      	movs	r2, #92	; 0x5c
 800b946:	fb02 f303 	mul.w	r3, r2, r3
 800b94a:	4a26      	ldr	r2, [pc, #152]	; (800b9e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b94c:	1898      	adds	r0, r3, r2
 800b94e:	4a26      	ldr	r2, [pc, #152]	; (800b9e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	00db      	lsls	r3, r3, #3
 800b954:	4413      	add	r3, r2
 800b956:	7859      	ldrb	r1, [r3, #1]
 800b958:	4a23      	ldr	r2, [pc, #140]	; (800b9e8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	00db      	lsls	r3, r3, #3
 800b95e:	4413      	add	r3, r2
 800b960:	789a      	ldrb	r2, [r3, #2]
 800b962:	2301      	movs	r3, #1
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	2300      	movs	r3, #0
 800b968:	f7fe fc2e 	bl	800a1c8 <MX25LM51245G_WriteCfg2Register>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d003      	beq.n	800b97a <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b972:	f06f 0304 	mvn.w	r3, #4
 800b976:	60fb      	str	r3, [r7, #12]
 800b978:	e02f      	b.n	800b9da <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800b97a:	2028      	movs	r0, #40	; 0x28
 800b97c:	f000 fbb4 	bl	800c0e8 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	225c      	movs	r2, #92	; 0x5c
 800b984:	fb02 f303 	mul.w	r3, r2, r3
 800b988:	4a16      	ldr	r2, [pc, #88]	; (800b9e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b98a:	4413      	add	r3, r2
 800b98c:	2200      	movs	r2, #0
 800b98e:	2101      	movs	r1, #1
 800b990:	4618      	mov	r0, r3
 800b992:	f7fe f988 	bl	8009ca6 <MX25LM51245G_AutoPollingMemReady>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b99c:	f06f 0304 	mvn.w	r3, #4
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	e01a      	b.n	800b9da <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	225c      	movs	r2, #92	; 0x5c
 800b9a8:	fb02 f303 	mul.w	r3, r2, r3
 800b9ac:	4a0d      	ldr	r2, [pc, #52]	; (800b9e4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800b9ae:	1898      	adds	r0, r3, r2
 800b9b0:	f107 0308 	add.w	r3, r7, #8
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	f7fe fc99 	bl	800a2f2 <MX25LM51245G_ReadCfg2Register>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9c6:	f06f 0304 	mvn.w	r3, #4
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	e005      	b.n	800b9da <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800b9ce:	7a3b      	ldrb	r3, [r7, #8]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d002      	beq.n	800b9da <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9d4:	f06f 0304 	mvn.w	r3, #4
 800b9d8:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800b9da:	68fb      	ldr	r3, [r7, #12]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	2400bd68 	.word	0x2400bd68
 800b9e8:	2400bdc4 	.word	0x2400bdc4

0800b9ec <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af02      	add	r7, sp, #8
 800b9f2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	225c      	movs	r2, #92	; 0x5c
 800b9fc:	fb02 f303 	mul.w	r3, r2, r3
 800ba00:	4a49      	ldr	r2, [pc, #292]	; (800bb28 <OSPI_NOR_ExitOPIMode+0x13c>)
 800ba02:	1898      	adds	r0, r3, r2
 800ba04:	4a49      	ldr	r2, [pc, #292]	; (800bb2c <OSPI_NOR_ExitOPIMode+0x140>)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	00db      	lsls	r3, r3, #3
 800ba0a:	4413      	add	r3, r2
 800ba0c:	7859      	ldrb	r1, [r3, #1]
 800ba0e:	4a47      	ldr	r2, [pc, #284]	; (800bb2c <OSPI_NOR_ExitOPIMode+0x140>)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	00db      	lsls	r3, r3, #3
 800ba14:	4413      	add	r3, r2
 800ba16:	789b      	ldrb	r3, [r3, #2]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	f7fe fb0a 	bl	800a032 <MX25LM51245G_WriteEnable>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d003      	beq.n	800ba2c <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba24:	f06f 0304 	mvn.w	r3, #4
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	e077      	b.n	800bb1c <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	225c      	movs	r2, #92	; 0x5c
 800ba38:	fb02 f303 	mul.w	r3, r2, r3
 800ba3c:	4a3a      	ldr	r2, [pc, #232]	; (800bb28 <OSPI_NOR_ExitOPIMode+0x13c>)
 800ba3e:	1898      	adds	r0, r3, r2
 800ba40:	4a3a      	ldr	r2, [pc, #232]	; (800bb2c <OSPI_NOR_ExitOPIMode+0x140>)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	00db      	lsls	r3, r3, #3
 800ba46:	4413      	add	r3, r2
 800ba48:	7859      	ldrb	r1, [r3, #1]
 800ba4a:	4a38      	ldr	r2, [pc, #224]	; (800bb2c <OSPI_NOR_ExitOPIMode+0x140>)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	4413      	add	r3, r2
 800ba52:	789a      	ldrb	r2, [r3, #2]
 800ba54:	7a3b      	ldrb	r3, [r7, #8]
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f7fe fbb5 	bl	800a1c8 <MX25LM51245G_WriteCfg2Register>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d003      	beq.n	800ba6c <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba64:	f06f 0304 	mvn.w	r3, #4
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	e057      	b.n	800bb1c <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800ba6c:	2028      	movs	r0, #40	; 0x28
 800ba6e:	f000 fb3b 	bl	800c0e8 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800ba72:	4a2e      	ldr	r2, [pc, #184]	; (800bb2c <OSPI_NOR_ExitOPIMode+0x140>)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	4413      	add	r3, r2
 800ba7a:	789b      	ldrb	r3, [r3, #2]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d120      	bne.n	800bac2 <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800ba80:	4a29      	ldr	r2, [pc, #164]	; (800bb28 <OSPI_NOR_ExitOPIMode+0x13c>)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	215c      	movs	r1, #92	; 0x5c
 800ba86:	fb01 f303 	mul.w	r3, r1, r3
 800ba8a:	4413      	add	r3, r2
 800ba8c:	330c      	adds	r3, #12
 800ba8e:	2200      	movs	r2, #0
 800ba90:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800ba92:	4a25      	ldr	r2, [pc, #148]	; (800bb28 <OSPI_NOR_ExitOPIMode+0x13c>)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	215c      	movs	r1, #92	; 0x5c
 800ba98:	fb01 f303 	mul.w	r3, r1, r3
 800ba9c:	4413      	add	r3, r2
 800ba9e:	332c      	adds	r3, #44	; 0x2c
 800baa0:	2200      	movs	r2, #0
 800baa2:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	225c      	movs	r2, #92	; 0x5c
 800baa8:	fb02 f303 	mul.w	r3, r2, r3
 800baac:	4a1e      	ldr	r2, [pc, #120]	; (800bb28 <OSPI_NOR_ExitOPIMode+0x13c>)
 800baae:	4413      	add	r3, r2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f005 f867 	bl	8010b84 <HAL_OSPI_Init>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800babc:	f06f 0303 	mvn.w	r3, #3
 800bac0:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	225c      	movs	r2, #92	; 0x5c
 800bac6:	fb02 f303 	mul.w	r3, r2, r3
 800baca:	4a17      	ldr	r2, [pc, #92]	; (800bb28 <OSPI_NOR_ExitOPIMode+0x13c>)
 800bacc:	4413      	add	r3, r2
 800bace:	2200      	movs	r2, #0
 800bad0:	2100      	movs	r1, #0
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe f8e7 	bl	8009ca6 <MX25LM51245G_AutoPollingMemReady>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bade:	f06f 0304 	mvn.w	r3, #4
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	e01a      	b.n	800bb1c <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	225c      	movs	r2, #92	; 0x5c
 800baea:	fb02 f303 	mul.w	r3, r2, r3
 800baee:	4a0e      	ldr	r2, [pc, #56]	; (800bb28 <OSPI_NOR_ExitOPIMode+0x13c>)
 800baf0:	1898      	adds	r0, r3, r2
 800baf2:	f107 0308 	add.w	r3, r7, #8
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	2300      	movs	r3, #0
 800bafa:	2200      	movs	r2, #0
 800bafc:	2100      	movs	r1, #0
 800bafe:	f7fe fbf8 	bl	800a2f2 <MX25LM51245G_ReadCfg2Register>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb08:	f06f 0304 	mvn.w	r3, #4
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	e005      	b.n	800bb1c <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 800bb10:	7a3b      	ldrb	r3, [r7, #8]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb16:	f06f 0304 	mvn.w	r3, #4
 800bb1a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	2400bd68 	.word	0x2400bd68
 800bb2c:	2400bdc4 	.word	0x2400bdc4

0800bb30 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d11c      	bne.n	800bb7e <BSP_TS_Init+0x4e>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d018      	beq.n	800bb7e <BSP_TS_Init+0x4e>
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800bb54:	d813      	bhi.n	800bb7e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00f      	beq.n	800bb7e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800bb66:	d80a      	bhi.n	800bb7e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	68da      	ldr	r2, [r3, #12]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	6819      	ldr	r1, [r3, #0]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	428b      	cmp	r3, r1
 800bb76:	bf28      	it	cs
 800bb78:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d903      	bls.n	800bb86 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bb7e:	f06f 0301 	mvn.w	r3, #1
 800bb82:	61fb      	str	r3, [r7, #28]
 800bb84:	e06e      	b.n	800bc64 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f98c 	bl	800bea4 <FT5336_Probe>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d003      	beq.n	800bb9a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800bb92:	f04f 33ff 	mov.w	r3, #4294967295
 800bb96:	61fb      	str	r3, [r7, #28]
 800bb98:	e064      	b.n	800bc64 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	4934      	ldr	r1, [pc, #208]	; (800bc70 <BSP_TS_Init+0x140>)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	015b      	lsls	r3, r3, #5
 800bba4:	440b      	add	r3, r1
 800bba6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	4930      	ldr	r1, [pc, #192]	; (800bc70 <BSP_TS_Init+0x140>)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	015b      	lsls	r3, r3, #5
 800bbb2:	440b      	add	r3, r1
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	689a      	ldr	r2, [r3, #8]
 800bbbc:	492c      	ldr	r1, [pc, #176]	; (800bc70 <BSP_TS_Init+0x140>)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	015b      	lsls	r3, r3, #5
 800bbc2:	440b      	add	r3, r1
 800bbc4:	3308      	adds	r3, #8
 800bbc6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	68da      	ldr	r2, [r3, #12]
 800bbcc:	4928      	ldr	r1, [pc, #160]	; (800bc70 <BSP_TS_Init+0x140>)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	015b      	lsls	r3, r3, #5
 800bbd2:	440b      	add	r3, r1
 800bbd4:	330c      	adds	r3, #12
 800bbd6:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800bbd8:	4b26      	ldr	r3, [pc, #152]	; (800bc74 <BSP_TS_Init+0x144>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	4926      	ldr	r1, [pc, #152]	; (800bc78 <BSP_TS_Init+0x148>)
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bbe6:	f107 010c 	add.w	r1, r7, #12
 800bbea:	4610      	mov	r0, r2
 800bbec:	4798      	blx	r3
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	da03      	bge.n	800bbfc <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bbf4:	f06f 0304 	mvn.w	r3, #4
 800bbf8:	61fb      	str	r3, [r7, #28]
 800bbfa:	e033      	b.n	800bc64 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	491c      	ldr	r1, [pc, #112]	; (800bc70 <BSP_TS_Init+0x140>)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	015b      	lsls	r3, r3, #5
 800bc04:	440b      	add	r3, r1
 800bc06:	3310      	adds	r3, #16
 800bc08:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	4918      	ldr	r1, [pc, #96]	; (800bc70 <BSP_TS_Init+0x140>)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	015b      	lsls	r3, r3, #5
 800bc12:	440b      	add	r3, r1
 800bc14:	3314      	adds	r3, #20
 800bc16:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800bc18:	2300      	movs	r3, #0
 800bc1a:	61bb      	str	r3, [r7, #24]
 800bc1c:	e01f      	b.n	800bc5e <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	4413      	add	r3, r2
 800bc28:	1c5a      	adds	r2, r3, #1
 800bc2a:	4811      	ldr	r0, [pc, #68]	; (800bc70 <BSP_TS_Init+0x140>)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	00d9      	lsls	r1, r3, #3
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	440b      	add	r3, r1
 800bc34:	3306      	adds	r3, #6
 800bc36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	4413      	add	r3, r2
 800bc44:	1c5a      	adds	r2, r3, #1
 800bc46:	480a      	ldr	r0, [pc, #40]	; (800bc70 <BSP_TS_Init+0x140>)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	00d9      	lsls	r1, r3, #3
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	440b      	add	r3, r1
 800bc50:	3306      	adds	r3, #6
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4403      	add	r3, r0
 800bc56:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	61bb      	str	r3, [r7, #24]
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0dc      	beq.n	800bc1e <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800bc64:	69fb      	ldr	r3, [r7, #28]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3720      	adds	r7, #32
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	2400bdd4 	.word	0x2400bdd4
 800bc74:	2400bdcc 	.word	0x2400bdcc
 800bc78:	2400bdd0 	.word	0x2400bdd0

0800bc7c <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b08a      	sub	sp, #40	; 0x28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800bc86:	2300      	movs	r3, #0
 800bc88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d003      	beq.n	800bc98 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bc90:	f06f 0301 	mvn.w	r3, #1
 800bc94:	627b      	str	r3, [r7, #36]	; 0x24
 800bc96:	e0f9      	b.n	800be8c <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800bc98:	4b7f      	ldr	r3, [pc, #508]	; (800be98 <BSP_TS_GetState+0x21c>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	497f      	ldr	r1, [pc, #508]	; (800be9c <BSP_TS_GetState+0x220>)
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bca6:	f107 0108 	add.w	r1, r7, #8
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4798      	blx	r3
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	da03      	bge.n	800bcbc <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcb4:	f06f 0304 	mvn.w	r3, #4
 800bcb8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcba:	e0e7      	b.n	800be8c <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 80d1 	beq.w	800be66 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800bccc:	4a74      	ldr	r2, [pc, #464]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	015b      	lsls	r3, r3, #5
 800bcd2:	4413      	add	r3, r2
 800bcd4:	3308      	adds	r3, #8
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0308 	and.w	r3, r3, #8
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d003      	beq.n	800bce8 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800bce8:	4a6d      	ldr	r2, [pc, #436]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	015b      	lsls	r3, r3, #5
 800bcee:	4413      	add	r3, r2
 800bcf0:	3308      	adds	r3, #8
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f003 0302 	and.w	r3, r3, #2
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d009      	beq.n	800bd10 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800bcfc:	4a68      	ldr	r2, [pc, #416]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	015b      	lsls	r3, r3, #5
 800bd02:	4413      	add	r3, r2
 800bd04:	3310      	adds	r3, #16
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800bd10:	4a63      	ldr	r2, [pc, #396]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	015b      	lsls	r3, r3, #5
 800bd16:	4413      	add	r3, r2
 800bd18:	3308      	adds	r3, #8
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0304 	and.w	r3, r3, #4
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d008      	beq.n	800bd36 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800bd24:	4a5e      	ldr	r2, [pc, #376]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	015b      	lsls	r3, r3, #5
 800bd2a:	4413      	add	r3, r2
 800bd2c:	3314      	adds	r3, #20
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800bd36:	4a5a      	ldr	r2, [pc, #360]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	015b      	lsls	r3, r3, #5
 800bd3c:	4413      	add	r3, r2
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6a3a      	ldr	r2, [r7, #32]
 800bd42:	fb03 f202 	mul.w	r2, r3, r2
 800bd46:	4956      	ldr	r1, [pc, #344]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	015b      	lsls	r3, r3, #5
 800bd4c:	440b      	add	r3, r1
 800bd4e:	3310      	adds	r3, #16
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800bd5a:	4a51      	ldr	r2, [pc, #324]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	015b      	lsls	r3, r3, #5
 800bd60:	4413      	add	r3, r2
 800bd62:	3304      	adds	r3, #4
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	69fa      	ldr	r2, [r7, #28]
 800bd68:	fb03 f202 	mul.w	r2, r3, r2
 800bd6c:	494c      	ldr	r1, [pc, #304]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	015b      	lsls	r3, r3, #5
 800bd72:	440b      	add	r3, r1
 800bd74:	3314      	adds	r3, #20
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	685a      	ldr	r2, [r3, #4]
 800bd8a:	4945      	ldr	r1, [pc, #276]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	015b      	lsls	r3, r3, #5
 800bd90:	440b      	add	r3, r1
 800bd92:	3318      	adds	r3, #24
 800bd94:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d909      	bls.n	800bdae <BSP_TS_GetState+0x132>
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	4940      	ldr	r1, [pc, #256]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	015b      	lsls	r3, r3, #5
 800bda4:	440b      	add	r3, r1
 800bda6:	3318      	adds	r3, #24
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	e008      	b.n	800bdc0 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800bdae:	4a3c      	ldr	r2, [pc, #240]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	015b      	lsls	r3, r3, #5
 800bdb4:	4413      	add	r3, r2
 800bdb6:	3318      	adds	r3, #24
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800bdbe:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800bdc0:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	689a      	ldr	r2, [r3, #8]
 800bdc6:	4936      	ldr	r1, [pc, #216]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	015b      	lsls	r3, r3, #5
 800bdcc:	440b      	add	r3, r1
 800bdce:	331c      	adds	r3, #28
 800bdd0:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d909      	bls.n	800bdea <BSP_TS_GetState+0x16e>
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	4931      	ldr	r1, [pc, #196]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	015b      	lsls	r3, r3, #5
 800bde0:	440b      	add	r3, r1
 800bde2:	331c      	adds	r3, #28
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	e008      	b.n	800bdfc <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800bdea:	4a2d      	ldr	r2, [pc, #180]	; (800bea0 <BSP_TS_GetState+0x224>)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	015b      	lsls	r3, r3, #5
 800bdf0:	4413      	add	r3, r2
 800bdf2:	331c      	adds	r3, #28
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800bdfa:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800bdfc:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800bdfe:	4a28      	ldr	r2, [pc, #160]	; (800bea0 <BSP_TS_GetState+0x224>)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	015b      	lsls	r3, r3, #5
 800be04:	4413      	add	r3, r2
 800be06:	330c      	adds	r3, #12
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	69ba      	ldr	r2, [r7, #24]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d808      	bhi.n	800be22 <BSP_TS_GetState+0x1a6>
 800be10:	4a23      	ldr	r2, [pc, #140]	; (800bea0 <BSP_TS_GetState+0x224>)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	015b      	lsls	r3, r3, #5
 800be16:	4413      	add	r3, r2
 800be18:	330c      	adds	r3, #12
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d910      	bls.n	800be44 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	491e      	ldr	r1, [pc, #120]	; (800bea0 <BSP_TS_GetState+0x224>)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	015b      	lsls	r3, r3, #5
 800be2c:	440b      	add	r3, r1
 800be2e:	3318      	adds	r3, #24
 800be30:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	689a      	ldr	r2, [r3, #8]
 800be36:	491a      	ldr	r1, [pc, #104]	; (800bea0 <BSP_TS_GetState+0x224>)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	015b      	lsls	r3, r3, #5
 800be3c:	440b      	add	r3, r1
 800be3e:	331c      	adds	r3, #28
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	e023      	b.n	800be8c <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800be44:	4a16      	ldr	r2, [pc, #88]	; (800bea0 <BSP_TS_GetState+0x224>)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	015b      	lsls	r3, r3, #5
 800be4a:	4413      	add	r3, r2
 800be4c:	3318      	adds	r3, #24
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800be54:	4a12      	ldr	r2, [pc, #72]	; (800bea0 <BSP_TS_GetState+0x224>)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	015b      	lsls	r3, r3, #5
 800be5a:	4413      	add	r3, r2
 800be5c:	331c      	adds	r3, #28
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	609a      	str	r2, [r3, #8]
 800be64:	e012      	b.n	800be8c <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2200      	movs	r2, #0
 800be6a:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800be6c:	4a0c      	ldr	r2, [pc, #48]	; (800bea0 <BSP_TS_GetState+0x224>)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	015b      	lsls	r3, r3, #5
 800be72:	4413      	add	r3, r2
 800be74:	3318      	adds	r3, #24
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800be7c:	4a08      	ldr	r2, [pc, #32]	; (800bea0 <BSP_TS_GetState+0x224>)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	015b      	lsls	r3, r3, #5
 800be82:	4413      	add	r3, r2
 800be84:	331c      	adds	r3, #28
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 800be8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3728      	adds	r7, #40	; 0x28
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	2400bdcc 	.word	0x2400bdcc
 800be9c:	2400bdd0 	.word	0x2400bdd0
 800bea0:	2400bdd4 	.word	0x2400bdd4

0800bea4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b08a      	sub	sp, #40	; 0x28
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 800beac:	2300      	movs	r3, #0
 800beae:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800beb4:	2370      	movs	r3, #112	; 0x70
 800beb6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800beb8:	4b23      	ldr	r3, [pc, #140]	; (800bf48 <FT5336_Probe+0xa4>)
 800beba:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800bebc:	4b23      	ldr	r3, [pc, #140]	; (800bf4c <FT5336_Probe+0xa8>)
 800bebe:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800bec0:	4b23      	ldr	r3, [pc, #140]	; (800bf50 <FT5336_Probe+0xac>)
 800bec2:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800bec4:	4b23      	ldr	r3, [pc, #140]	; (800bf54 <FT5336_Probe+0xb0>)
 800bec6:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800bec8:	4b23      	ldr	r3, [pc, #140]	; (800bf58 <FT5336_Probe+0xb4>)
 800beca:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800becc:	f107 030c 	add.w	r3, r7, #12
 800bed0:	4619      	mov	r1, r3
 800bed2:	4822      	ldr	r0, [pc, #136]	; (800bf5c <FT5336_Probe+0xb8>)
 800bed4:	f7fd fb58 	bl	8009588 <FT5336_RegisterBusIO>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d003      	beq.n	800bee6 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800bede:	f06f 0307 	mvn.w	r3, #7
 800bee2:	627b      	str	r3, [r7, #36]	; 0x24
 800bee4:	e02a      	b.n	800bf3c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800bee6:	f107 0308 	add.w	r3, r7, #8
 800beea:	4619      	mov	r1, r3
 800beec:	481b      	ldr	r0, [pc, #108]	; (800bf5c <FT5336_Probe+0xb8>)
 800beee:	f7fd fc45 	bl	800977c <FT5336_ReadID>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d003      	beq.n	800bf00 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bef8:	f06f 0304 	mvn.w	r3, #4
 800befc:	627b      	str	r3, [r7, #36]	; 0x24
 800befe:	e01d      	b.n	800bf3c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b51      	cmp	r3, #81	; 0x51
 800bf04:	d003      	beq.n	800bf0e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bf06:	f06f 0306 	mvn.w	r3, #6
 800bf0a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf0c:	e016      	b.n	800bf3c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800bf0e:	4a14      	ldr	r2, [pc, #80]	; (800bf60 <FT5336_Probe+0xbc>)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4912      	ldr	r1, [pc, #72]	; (800bf5c <FT5336_Probe+0xb8>)
 800bf14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800bf18:	4b12      	ldr	r3, [pc, #72]	; (800bf64 <FT5336_Probe+0xc0>)
 800bf1a:	4a13      	ldr	r2, [pc, #76]	; (800bf68 <FT5336_Probe+0xc4>)
 800bf1c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800bf1e:	4b11      	ldr	r3, [pc, #68]	; (800bf64 <FT5336_Probe+0xc0>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	490e      	ldr	r1, [pc, #56]	; (800bf60 <FT5336_Probe+0xbc>)
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	4798      	blx	r3
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d002      	beq.n	800bf3c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf36:	f06f 0304 	mvn.w	r3, #4
 800bf3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3728      	adds	r7, #40	; 0x28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	0800a589 	.word	0x0800a589
 800bf4c:	0800a5fd 	.word	0x0800a5fd
 800bf50:	0800a725 	.word	0x0800a725
 800bf54:	0800a6c9 	.word	0x0800a6c9
 800bf58:	0800a781 	.word	0x0800a781
 800bf5c:	2400bdf4 	.word	0x2400bdf4
 800bf60:	2400bdd0 	.word	0x2400bdd0
 800bf64:	2400bdcc 	.word	0x2400bdcc
 800bf68:	24000024 	.word	0x24000024

0800bf6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800bf70:	4b29      	ldr	r3, [pc, #164]	; (800c018 <SystemInit+0xac>)
 800bf72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf76:	4a28      	ldr	r2, [pc, #160]	; (800c018 <SystemInit+0xac>)
 800bf78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800bf80:	4b26      	ldr	r3, [pc, #152]	; (800c01c <SystemInit+0xb0>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a25      	ldr	r2, [pc, #148]	; (800c01c <SystemInit+0xb0>)
 800bf86:	f043 0301 	orr.w	r3, r3, #1
 800bf8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bf8c:	4b23      	ldr	r3, [pc, #140]	; (800c01c <SystemInit+0xb0>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800bf92:	4b22      	ldr	r3, [pc, #136]	; (800c01c <SystemInit+0xb0>)
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	4921      	ldr	r1, [pc, #132]	; (800c01c <SystemInit+0xb0>)
 800bf98:	4b21      	ldr	r3, [pc, #132]	; (800c020 <SystemInit+0xb4>)
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	600b      	str	r3, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800bf9e:	4b1f      	ldr	r3, [pc, #124]	; (800c01c <SystemInit+0xb0>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800bfa4:	4b1d      	ldr	r3, [pc, #116]	; (800c01c <SystemInit+0xb0>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800bfaa:	4b1c      	ldr	r3, [pc, #112]	; (800c01c <SystemInit+0xb0>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800bfb0:	4b1a      	ldr	r3, [pc, #104]	; (800c01c <SystemInit+0xb0>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800bfb6:	4b19      	ldr	r3, [pc, #100]	; (800c01c <SystemInit+0xb0>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800bfbc:	4b17      	ldr	r3, [pc, #92]	; (800c01c <SystemInit+0xb0>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800bfc2:	4b16      	ldr	r3, [pc, #88]	; (800c01c <SystemInit+0xb0>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800bfc8:	4b14      	ldr	r3, [pc, #80]	; (800c01c <SystemInit+0xb0>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800bfce:	4b13      	ldr	r3, [pc, #76]	; (800c01c <SystemInit+0xb0>)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800bfd4:	4b11      	ldr	r3, [pc, #68]	; (800c01c <SystemInit+0xb0>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800bfda:	4b10      	ldr	r3, [pc, #64]	; (800c01c <SystemInit+0xb0>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bfe0:	4b0e      	ldr	r3, [pc, #56]	; (800c01c <SystemInit+0xb0>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a0d      	ldr	r2, [pc, #52]	; (800c01c <SystemInit+0xb0>)
 800bfe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bfea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bfec:	4b0b      	ldr	r3, [pc, #44]	; (800c01c <SystemInit+0xb0>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800bff2:	4b0c      	ldr	r3, [pc, #48]	; (800c024 <SystemInit+0xb8>)
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	4b0c      	ldr	r3, [pc, #48]	; (800c028 <SystemInit+0xbc>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bffe:	d202      	bcs.n	800c006 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800c000:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <SystemInit+0xc0>)
 800c002:	2201      	movs	r2, #1
 800c004:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c006:	4b04      	ldr	r3, [pc, #16]	; (800c018 <SystemInit+0xac>)
 800c008:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c00c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800c00e:	bf00      	nop
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	e000ed00 	.word	0xe000ed00
 800c01c:	58024400 	.word	0x58024400
 800c020:	eaf6ed7f 	.word	0xeaf6ed7f
 800c024:	5c001000 	.word	0x5c001000
 800c028:	ffff0000 	.word	0xffff0000
 800c02c:	51008108 	.word	0x51008108

0800c030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c036:	2003      	movs	r0, #3
 800c038:	f000 f94b 	bl	800c2d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800c03c:	f006 fb44 	bl	80126c8 <HAL_RCC_GetSysClockFreq>
 800c040:	4602      	mov	r2, r0
 800c042:	4b15      	ldr	r3, [pc, #84]	; (800c098 <HAL_Init+0x68>)
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	0a1b      	lsrs	r3, r3, #8
 800c048:	f003 030f 	and.w	r3, r3, #15
 800c04c:	4913      	ldr	r1, [pc, #76]	; (800c09c <HAL_Init+0x6c>)
 800c04e:	5ccb      	ldrb	r3, [r1, r3]
 800c050:	f003 031f 	and.w	r3, r3, #31
 800c054:	fa22 f303 	lsr.w	r3, r2, r3
 800c058:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c05a:	4b0f      	ldr	r3, [pc, #60]	; (800c098 <HAL_Init+0x68>)
 800c05c:	699b      	ldr	r3, [r3, #24]
 800c05e:	f003 030f 	and.w	r3, r3, #15
 800c062:	4a0e      	ldr	r2, [pc, #56]	; (800c09c <HAL_Init+0x6c>)
 800c064:	5cd3      	ldrb	r3, [r2, r3]
 800c066:	f003 031f 	and.w	r3, r3, #31
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	fa22 f303 	lsr.w	r3, r2, r3
 800c070:	4a0b      	ldr	r2, [pc, #44]	; (800c0a0 <HAL_Init+0x70>)
 800c072:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c074:	4a0b      	ldr	r2, [pc, #44]	; (800c0a4 <HAL_Init+0x74>)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c07a:	2000      	movs	r0, #0
 800c07c:	f7fa fff6 	bl	800706c <HAL_InitTick>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e002      	b.n	800c090 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800c08a:	f7fa fc1b 	bl	80068c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	58024400 	.word	0x58024400
 800c09c:	0802bb4c 	.word	0x0802bb4c
 800c0a0:	24000058 	.word	0x24000058
 800c0a4:	24000054 	.word	0x24000054

0800c0a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800c0ac:	4b06      	ldr	r3, [pc, #24]	; (800c0c8 <HAL_IncTick+0x20>)
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <HAL_IncTick+0x24>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	4a04      	ldr	r2, [pc, #16]	; (800c0cc <HAL_IncTick+0x24>)
 800c0ba:	6013      	str	r3, [r2, #0]
}
 800c0bc:	bf00      	nop
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	24000060 	.word	0x24000060
 800c0cc:	2400be1c 	.word	0x2400be1c

0800c0d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	af00      	add	r7, sp, #0
  return uwTick;
 800c0d4:	4b03      	ldr	r3, [pc, #12]	; (800c0e4 <HAL_GetTick+0x14>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	2400be1c 	.word	0x2400be1c

0800c0e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c0f0:	f7ff ffee 	bl	800c0d0 <HAL_GetTick>
 800c0f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c100:	d005      	beq.n	800c10e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c102:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <HAL_Delay+0x44>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	461a      	mov	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4413      	add	r3, r2
 800c10c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c10e:	bf00      	nop
 800c110:	f7ff ffde 	bl	800c0d0 <HAL_GetTick>
 800c114:	4602      	mov	r2, r0
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d8f7      	bhi.n	800c110 <HAL_Delay+0x28>
  {
  }
}
 800c120:	bf00      	nop
 800c122:	bf00      	nop
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	24000060 	.word	0x24000060

0800c130 <__NVIC_SetPriorityGrouping>:
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f003 0307 	and.w	r3, r3, #7
 800c13e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c140:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <__NVIC_SetPriorityGrouping+0x40>)
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c14c:	4013      	ands	r3, r2
 800c14e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c158:	4b06      	ldr	r3, [pc, #24]	; (800c174 <__NVIC_SetPriorityGrouping+0x44>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c15e:	4a04      	ldr	r2, [pc, #16]	; (800c170 <__NVIC_SetPriorityGrouping+0x40>)
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	60d3      	str	r3, [r2, #12]
}
 800c164:	bf00      	nop
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	e000ed00 	.word	0xe000ed00
 800c174:	05fa0000 	.word	0x05fa0000

0800c178 <__NVIC_GetPriorityGrouping>:
{
 800c178:	b480      	push	{r7}
 800c17a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c17c:	4b04      	ldr	r3, [pc, #16]	; (800c190 <__NVIC_GetPriorityGrouping+0x18>)
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	0a1b      	lsrs	r3, r3, #8
 800c182:	f003 0307 	and.w	r3, r3, #7
}
 800c186:	4618      	mov	r0, r3
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr
 800c190:	e000ed00 	.word	0xe000ed00

0800c194 <__NVIC_EnableIRQ>:
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	4603      	mov	r3, r0
 800c19c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c19e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	db0b      	blt.n	800c1be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c1a6:	88fb      	ldrh	r3, [r7, #6]
 800c1a8:	f003 021f 	and.w	r2, r3, #31
 800c1ac:	4907      	ldr	r1, [pc, #28]	; (800c1cc <__NVIC_EnableIRQ+0x38>)
 800c1ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1b2:	095b      	lsrs	r3, r3, #5
 800c1b4:	2001      	movs	r0, #1
 800c1b6:	fa00 f202 	lsl.w	r2, r0, r2
 800c1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c1be:	bf00      	nop
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	e000e100 	.word	0xe000e100

0800c1d0 <__NVIC_DisableIRQ>:
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c1da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	db12      	blt.n	800c208 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c1e2:	88fb      	ldrh	r3, [r7, #6]
 800c1e4:	f003 021f 	and.w	r2, r3, #31
 800c1e8:	490a      	ldr	r1, [pc, #40]	; (800c214 <__NVIC_DisableIRQ+0x44>)
 800c1ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1ee:	095b      	lsrs	r3, r3, #5
 800c1f0:	2001      	movs	r0, #1
 800c1f2:	fa00 f202 	lsl.w	r2, r0, r2
 800c1f6:	3320      	adds	r3, #32
 800c1f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c1fc:	f3bf 8f4f 	dsb	sy
}
 800c200:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c202:	f3bf 8f6f 	isb	sy
}
 800c206:	bf00      	nop
}
 800c208:	bf00      	nop
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	e000e100 	.word	0xe000e100

0800c218 <__NVIC_SetPriority>:
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	6039      	str	r1, [r7, #0]
 800c222:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	db0a      	blt.n	800c242 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	490c      	ldr	r1, [pc, #48]	; (800c264 <__NVIC_SetPriority+0x4c>)
 800c232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c236:	0112      	lsls	r2, r2, #4
 800c238:	b2d2      	uxtb	r2, r2
 800c23a:	440b      	add	r3, r1
 800c23c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c240:	e00a      	b.n	800c258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	b2da      	uxtb	r2, r3
 800c246:	4908      	ldr	r1, [pc, #32]	; (800c268 <__NVIC_SetPriority+0x50>)
 800c248:	88fb      	ldrh	r3, [r7, #6]
 800c24a:	f003 030f 	and.w	r3, r3, #15
 800c24e:	3b04      	subs	r3, #4
 800c250:	0112      	lsls	r2, r2, #4
 800c252:	b2d2      	uxtb	r2, r2
 800c254:	440b      	add	r3, r1
 800c256:	761a      	strb	r2, [r3, #24]
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	e000e100 	.word	0xe000e100
 800c268:	e000ed00 	.word	0xe000ed00

0800c26c <NVIC_EncodePriority>:
{
 800c26c:	b480      	push	{r7}
 800c26e:	b089      	sub	sp, #36	; 0x24
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f003 0307 	and.w	r3, r3, #7
 800c27e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	f1c3 0307 	rsb	r3, r3, #7
 800c286:	2b04      	cmp	r3, #4
 800c288:	bf28      	it	cs
 800c28a:	2304      	movcs	r3, #4
 800c28c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	3304      	adds	r3, #4
 800c292:	2b06      	cmp	r3, #6
 800c294:	d902      	bls.n	800c29c <NVIC_EncodePriority+0x30>
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	3b03      	subs	r3, #3
 800c29a:	e000      	b.n	800c29e <NVIC_EncodePriority+0x32>
 800c29c:	2300      	movs	r3, #0
 800c29e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2aa:	43da      	mvns	r2, r3
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	401a      	ands	r2, r3
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c2b4:	f04f 31ff 	mov.w	r1, #4294967295
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c2be:	43d9      	mvns	r1, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c2c4:	4313      	orrs	r3, r2
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3724      	adds	r7, #36	; 0x24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b082      	sub	sp, #8
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7ff ff28 	bl	800c130 <__NVIC_SetPriorityGrouping>
}
 800c2e0:	bf00      	nop
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
 800c2f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c2f6:	f7ff ff3f 	bl	800c178 <__NVIC_GetPriorityGrouping>
 800c2fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	68b9      	ldr	r1, [r7, #8]
 800c300:	6978      	ldr	r0, [r7, #20]
 800c302:	f7ff ffb3 	bl	800c26c <NVIC_EncodePriority>
 800c306:	4602      	mov	r2, r0
 800c308:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c30c:	4611      	mov	r1, r2
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff ff82 	bl	800c218 <__NVIC_SetPriority>
}
 800c314:	bf00      	nop
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	4603      	mov	r3, r0
 800c324:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7ff ff32 	bl	800c194 <__NVIC_EnableIRQ>
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	4603      	mov	r3, r0
 800c340:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c346:	4618      	mov	r0, r3
 800c348:	f7ff ff42 	bl	800c1d0 <__NVIC_DisableIRQ>
}
 800c34c:	bf00      	nop
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800c354:	b480      	push	{r7}
 800c356:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800c358:	f3bf 8f5f 	dmb	sy
}
 800c35c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800c35e:	4b07      	ldr	r3, [pc, #28]	; (800c37c <HAL_MPU_Disable+0x28>)
 800c360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c362:	4a06      	ldr	r2, [pc, #24]	; (800c37c <HAL_MPU_Disable+0x28>)
 800c364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c368:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800c36a:	4b05      	ldr	r3, [pc, #20]	; (800c380 <HAL_MPU_Disable+0x2c>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	605a      	str	r2, [r3, #4]
}
 800c370:	bf00      	nop
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	e000ed00 	.word	0xe000ed00
 800c380:	e000ed90 	.word	0xe000ed90

0800c384 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800c38c:	4a0b      	ldr	r2, [pc, #44]	; (800c3bc <HAL_MPU_Enable+0x38>)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f043 0301 	orr.w	r3, r3, #1
 800c394:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800c396:	4b0a      	ldr	r3, [pc, #40]	; (800c3c0 <HAL_MPU_Enable+0x3c>)
 800c398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39a:	4a09      	ldr	r2, [pc, #36]	; (800c3c0 <HAL_MPU_Enable+0x3c>)
 800c39c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3a0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800c3a2:	f3bf 8f4f 	dsb	sy
}
 800c3a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c3a8:	f3bf 8f6f 	isb	sy
}
 800c3ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800c3ae:	bf00      	nop
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	e000ed90 	.word	0xe000ed90
 800c3c0:	e000ed00 	.word	0xe000ed00

0800c3c4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	785a      	ldrb	r2, [r3, #1]
 800c3d0:	4b1d      	ldr	r3, [pc, #116]	; (800c448 <HAL_MPU_ConfigRegion+0x84>)
 800c3d2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d029      	beq.n	800c430 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800c3dc:	4a1a      	ldr	r2, [pc, #104]	; (800c448 <HAL_MPU_ConfigRegion+0x84>)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	7b1b      	ldrb	r3, [r3, #12]
 800c3e8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	7adb      	ldrb	r3, [r3, #11]
 800c3ee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800c3f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	7a9b      	ldrb	r3, [r3, #10]
 800c3f6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800c3f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	7b5b      	ldrb	r3, [r3, #13]
 800c3fe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800c400:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	7b9b      	ldrb	r3, [r3, #14]
 800c406:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800c408:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	7bdb      	ldrb	r3, [r3, #15]
 800c40e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800c410:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	7a5b      	ldrb	r3, [r3, #9]
 800c416:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800c418:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	7a1b      	ldrb	r3, [r3, #8]
 800c41e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800c420:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	7812      	ldrb	r2, [r2, #0]
 800c426:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800c428:	4a07      	ldr	r2, [pc, #28]	; (800c448 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800c42a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800c42c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800c42e:	e005      	b.n	800c43c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800c430:	4b05      	ldr	r3, [pc, #20]	; (800c448 <HAL_MPU_ConfigRegion+0x84>)
 800c432:	2200      	movs	r2, #0
 800c434:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800c436:	4b04      	ldr	r3, [pc, #16]	; (800c448 <HAL_MPU_ConfigRegion+0x84>)
 800c438:	2200      	movs	r2, #0
 800c43a:	611a      	str	r2, [r3, #16]
}
 800c43c:	bf00      	nop
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr
 800c448:	e000ed90 	.word	0xe000ed90

0800c44c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	e054      	b.n	800c508 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	7f5b      	ldrb	r3, [r3, #29]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d105      	bne.n	800c474 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7fa fa46 	bl	8006900 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2202      	movs	r2, #2
 800c478:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	791b      	ldrb	r3, [r3, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10c      	bne.n	800c49c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a22      	ldr	r2, [pc, #136]	; (800c510 <HAL_CRC_Init+0xc4>)
 800c488:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	689a      	ldr	r2, [r3, #8]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f022 0218 	bic.w	r2, r2, #24
 800c498:	609a      	str	r2, [r3, #8]
 800c49a:	e00c      	b.n	800c4b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6899      	ldr	r1, [r3, #8]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f834 	bl	800c514 <HAL_CRCEx_Polynomial_Set>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e028      	b.n	800c508 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	795b      	ldrb	r3, [r3, #5]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d105      	bne.n	800c4ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c6:	611a      	str	r2, [r3, #16]
 800c4c8:	e004      	b.n	800c4d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	6912      	ldr	r2, [r2, #16]
 800c4d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	695a      	ldr	r2, [r3, #20]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	699a      	ldr	r2, [r3, #24]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	430a      	orrs	r2, r1
 800c4fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	04c11db7 	.word	0x04c11db7

0800c514 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c514:	b480      	push	{r7}
 800c516:	b087      	sub	sp, #28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c524:	231f      	movs	r3, #31
 800c526:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f003 0301 	and.w	r3, r3, #1
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d102      	bne.n	800c538 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	75fb      	strb	r3, [r7, #23]
 800c536:	e063      	b.n	800c600 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c538:	bf00      	nop
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	1e5a      	subs	r2, r3, #1
 800c53e:	613a      	str	r2, [r7, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d009      	beq.n	800c558 <HAL_CRCEx_Polynomial_Set+0x44>
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	f003 031f 	and.w	r3, r3, #31
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	fa22 f303 	lsr.w	r3, r2, r3
 800c550:	f003 0301 	and.w	r3, r3, #1
 800c554:	2b00      	cmp	r3, #0
 800c556:	d0f0      	beq.n	800c53a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b18      	cmp	r3, #24
 800c55c:	d846      	bhi.n	800c5ec <HAL_CRCEx_Polynomial_Set+0xd8>
 800c55e:	a201      	add	r2, pc, #4	; (adr r2, 800c564 <HAL_CRCEx_Polynomial_Set+0x50>)
 800c560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c564:	0800c5f3 	.word	0x0800c5f3
 800c568:	0800c5ed 	.word	0x0800c5ed
 800c56c:	0800c5ed 	.word	0x0800c5ed
 800c570:	0800c5ed 	.word	0x0800c5ed
 800c574:	0800c5ed 	.word	0x0800c5ed
 800c578:	0800c5ed 	.word	0x0800c5ed
 800c57c:	0800c5ed 	.word	0x0800c5ed
 800c580:	0800c5ed 	.word	0x0800c5ed
 800c584:	0800c5e1 	.word	0x0800c5e1
 800c588:	0800c5ed 	.word	0x0800c5ed
 800c58c:	0800c5ed 	.word	0x0800c5ed
 800c590:	0800c5ed 	.word	0x0800c5ed
 800c594:	0800c5ed 	.word	0x0800c5ed
 800c598:	0800c5ed 	.word	0x0800c5ed
 800c59c:	0800c5ed 	.word	0x0800c5ed
 800c5a0:	0800c5ed 	.word	0x0800c5ed
 800c5a4:	0800c5d5 	.word	0x0800c5d5
 800c5a8:	0800c5ed 	.word	0x0800c5ed
 800c5ac:	0800c5ed 	.word	0x0800c5ed
 800c5b0:	0800c5ed 	.word	0x0800c5ed
 800c5b4:	0800c5ed 	.word	0x0800c5ed
 800c5b8:	0800c5ed 	.word	0x0800c5ed
 800c5bc:	0800c5ed 	.word	0x0800c5ed
 800c5c0:	0800c5ed 	.word	0x0800c5ed
 800c5c4:	0800c5c9 	.word	0x0800c5c9
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	2b06      	cmp	r3, #6
 800c5cc:	d913      	bls.n	800c5f6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c5d2:	e010      	b.n	800c5f6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	2b07      	cmp	r3, #7
 800c5d8:	d90f      	bls.n	800c5fa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c5de:	e00c      	b.n	800c5fa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	2b0f      	cmp	r3, #15
 800c5e4:	d90b      	bls.n	800c5fe <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c5ea:	e008      	b.n	800c5fe <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	75fb      	strb	r3, [r7, #23]
        break;
 800c5f0:	e006      	b.n	800c600 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c5f2:	bf00      	nop
 800c5f4:	e004      	b.n	800c600 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c5f6:	bf00      	nop
 800c5f8:	e002      	b.n	800c600 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c5fa:	bf00      	nop
 800c5fc:	e000      	b.n	800c600 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c5fe:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800c600:	7dfb      	ldrb	r3, [r7, #23]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d10d      	bne.n	800c622 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	f023 0118 	bic.w	r1, r3, #24
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	430a      	orrs	r2, r1
 800c620:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c622:	7dfb      	ldrb	r3, [r7, #23]
}
 800c624:	4618      	mov	r0, r3
 800c626:	371c      	adds	r7, #28
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	e04f      	b.n	800c6e2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d106      	bne.n	800c65c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7fa f974 	bl	8006944 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2202      	movs	r2, #2
 800c660:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	4b20      	ldr	r3, [pc, #128]	; (800c6ec <HAL_DMA2D_Init+0xbc>)
 800c66c:	4013      	ands	r3, r2
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	6851      	ldr	r1, [r2, #4]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	69d2      	ldr	r2, [r2, #28]
 800c676:	4311      	orrs	r1, r2
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	6812      	ldr	r2, [r2, #0]
 800c67c:	430b      	orrs	r3, r1
 800c67e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c686:	4b1a      	ldr	r3, [pc, #104]	; (800c6f0 <HAL_DMA2D_Init+0xc0>)
 800c688:	4013      	ands	r3, r2
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	6891      	ldr	r1, [r2, #8]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	6992      	ldr	r2, [r2, #24]
 800c692:	4311      	orrs	r1, r2
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	6812      	ldr	r2, [r2, #0]
 800c698:	430b      	orrs	r3, r1
 800c69a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6a2:	4b14      	ldr	r3, [pc, #80]	; (800c6f4 <HAL_DMA2D_Init+0xc4>)
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	68d1      	ldr	r1, [r2, #12]
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	6812      	ldr	r2, [r2, #0]
 800c6ae:	430b      	orrs	r3, r1
 800c6b0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	051a      	lsls	r2, r3, #20
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	055b      	lsls	r3, r3, #21
 800c6c8:	431a      	orrs	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	430a      	orrs	r2, r1
 800c6d0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	fff8ffbf 	.word	0xfff8ffbf
 800c6f0:	fffffef8 	.word	0xfffffef8
 800c6f4:	ffff0000 	.word	0xffff0000

0800c6f8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	d026      	beq.n	800c768 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c720:	2b00      	cmp	r3, #0
 800c722:	d021      	beq.n	800c768 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c732:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c738:	f043 0201 	orr.w	r2, r3, #1
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2201      	movs	r2, #1
 800c746:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2204      	movs	r2, #4
 800c74c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d003      	beq.n	800c768 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f003 0320 	and.w	r3, r3, #32
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d026      	beq.n	800c7c0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d021      	beq.n	800c7c0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c78a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2220      	movs	r2, #32
 800c792:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c798:	f043 0202 	orr.w	r2, r3, #2
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2204      	movs	r2, #4
 800c7a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d003      	beq.n	800c7c0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f003 0308 	and.w	r3, r3, #8
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d026      	beq.n	800c818 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d021      	beq.n	800c818 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7e2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2208      	movs	r2, #8
 800c7ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7f0:	f043 0204 	orr.w	r2, r3, #4
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2204      	movs	r2, #4
 800c7fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d003      	beq.n	800c818 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f003 0304 	and.w	r3, r3, #4
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d013      	beq.n	800c84a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00e      	beq.n	800c84a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c83a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2204      	movs	r2, #4
 800c842:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f853 	bl	800c8f0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d024      	beq.n	800c89e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d01f      	beq.n	800c89e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c86c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2202      	movs	r2, #2
 800c874:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a1b      	ldr	r3, [r3, #32]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a1b      	ldr	r3, [r3, #32]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f003 0310 	and.w	r3, r3, #16
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d01f      	beq.n	800c8e8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d01a      	beq.n	800c8e8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c8c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2210      	movs	r2, #16
 800c8c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f80e 	bl	800c904 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800c8e8:	bf00      	nop
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800c918:	b480      	push	{r7}
 800c91a:	b087      	sub	sp, #28
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c934:	2b01      	cmp	r3, #1
 800c936:	d101      	bne.n	800c93c <HAL_DMA2D_ConfigLayer+0x24>
 800c938:	2302      	movs	r3, #2
 800c93a:	e092      	b.n	800ca62 <HAL_DMA2D_ConfigLayer+0x14a>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2201      	movs	r2, #1
 800c940:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2202      	movs	r2, #2
 800c948:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800c94c:	683a      	ldr	r2, [r7, #0]
 800c94e:	4613      	mov	r3, r2
 800c950:	00db      	lsls	r3, r3, #3
 800c952:	1a9b      	subs	r3, r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	3328      	adds	r3, #40	; 0x28
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	4413      	add	r3, r2
 800c95c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	041b      	lsls	r3, r3, #16
 800c968:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c970:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	695b      	ldr	r3, [r3, #20]
 800c976:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c978:	4313      	orrs	r3, r2
 800c97a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800c97c:	4b3c      	ldr	r3, [pc, #240]	; (800ca70 <HAL_DMA2D_ConfigLayer+0x158>)
 800c97e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	2b0a      	cmp	r3, #10
 800c986:	d003      	beq.n	800c990 <HAL_DMA2D_ConfigLayer+0x78>
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	2b09      	cmp	r3, #9
 800c98e:	d107      	bne.n	800c9a0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	613b      	str	r3, [r7, #16]
 800c99e:	e005      	b.n	800c9ac <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	061b      	lsls	r3, r3, #24
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d120      	bne.n	800c9f4 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	43db      	mvns	r3, r3
 800c9bc:	ea02 0103 	and.w	r1, r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	693a      	ldr	r2, [r7, #16]
 800c9c6:	430a      	orrs	r2, r1
 800c9c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	6812      	ldr	r2, [r2, #0]
 800c9d2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	2b0a      	cmp	r3, #10
 800c9da:	d003      	beq.n	800c9e4 <HAL_DMA2D_ConfigLayer+0xcc>
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	2b09      	cmp	r3, #9
 800c9e2:	d135      	bne.n	800ca50 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	68da      	ldr	r2, [r3, #12]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c9f0:	629a      	str	r2, [r3, #40]	; 0x28
 800c9f2:	e02d      	b.n	800ca50 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	2b0b      	cmp	r3, #11
 800c9fa:	d109      	bne.n	800ca10 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	049b      	lsls	r3, r3, #18
 800ca02:	693a      	ldr	r2, [r7, #16]
 800ca04:	4313      	orrs	r3, r2
 800ca06:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800ca0e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	69da      	ldr	r2, [r3, #28]
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	43db      	mvns	r3, r3
 800ca1a:	ea02 0103 	and.w	r1, r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	430a      	orrs	r2, r1
 800ca26:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	6812      	ldr	r2, [r2, #0]
 800ca30:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	2b0a      	cmp	r3, #10
 800ca38:	d003      	beq.n	800ca42 <HAL_DMA2D_ConfigLayer+0x12a>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	2b09      	cmp	r3, #9
 800ca40:	d106      	bne.n	800ca50 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	68da      	ldr	r2, [r3, #12]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ca4e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	371c      	adds	r7, #28
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	ff33000f 	.word	0xff33000f

0800ca74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b089      	sub	sp, #36	; 0x24
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ca82:	4b89      	ldr	r3, [pc, #548]	; (800cca8 <HAL_GPIO_Init+0x234>)
 800ca84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ca86:	e194      	b.n	800cdb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	fa01 f303 	lsl.w	r3, r1, r3
 800ca94:	4013      	ands	r3, r2
 800ca96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 8186 	beq.w	800cdac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	f003 0303 	and.w	r3, r3, #3
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d005      	beq.n	800cab8 <HAL_GPIO_Init+0x44>
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	f003 0303 	and.w	r3, r3, #3
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d130      	bne.n	800cb1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	005b      	lsls	r3, r3, #1
 800cac2:	2203      	movs	r2, #3
 800cac4:	fa02 f303 	lsl.w	r3, r2, r3
 800cac8:	43db      	mvns	r3, r3
 800caca:	69ba      	ldr	r2, [r7, #24]
 800cacc:	4013      	ands	r3, r2
 800cace:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	68da      	ldr	r2, [r3, #12]
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	fa02 f303 	lsl.w	r3, r2, r3
 800cadc:	69ba      	ldr	r2, [r7, #24]
 800cade:	4313      	orrs	r3, r2
 800cae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	69ba      	ldr	r2, [r7, #24]
 800cae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800caee:	2201      	movs	r2, #1
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	fa02 f303 	lsl.w	r3, r2, r3
 800caf6:	43db      	mvns	r3, r3
 800caf8:	69ba      	ldr	r2, [r7, #24]
 800cafa:	4013      	ands	r3, r2
 800cafc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	091b      	lsrs	r3, r3, #4
 800cb04:	f003 0201 	and.w	r2, r3, #1
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb0e:	69ba      	ldr	r2, [r7, #24]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	69ba      	ldr	r2, [r7, #24]
 800cb18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f003 0303 	and.w	r3, r3, #3
 800cb22:	2b03      	cmp	r3, #3
 800cb24:	d017      	beq.n	800cb56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	2203      	movs	r2, #3
 800cb32:	fa02 f303 	lsl.w	r3, r2, r3
 800cb36:	43db      	mvns	r3, r3
 800cb38:	69ba      	ldr	r2, [r7, #24]
 800cb3a:	4013      	ands	r3, r2
 800cb3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	689a      	ldr	r2, [r3, #8]
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	005b      	lsls	r3, r3, #1
 800cb46:	fa02 f303 	lsl.w	r3, r2, r3
 800cb4a:	69ba      	ldr	r2, [r7, #24]
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	69ba      	ldr	r2, [r7, #24]
 800cb54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	f003 0303 	and.w	r3, r3, #3
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d123      	bne.n	800cbaa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	08da      	lsrs	r2, r3, #3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	3208      	adds	r2, #8
 800cb6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	f003 0307 	and.w	r3, r3, #7
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	220f      	movs	r2, #15
 800cb7a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb7e:	43db      	mvns	r3, r3
 800cb80:	69ba      	ldr	r2, [r7, #24]
 800cb82:	4013      	ands	r3, r2
 800cb84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	691a      	ldr	r2, [r3, #16]
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	f003 0307 	and.w	r3, r3, #7
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	fa02 f303 	lsl.w	r3, r2, r3
 800cb96:	69ba      	ldr	r2, [r7, #24]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	08da      	lsrs	r2, r3, #3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3208      	adds	r2, #8
 800cba4:	69b9      	ldr	r1, [r7, #24]
 800cba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	005b      	lsls	r3, r3, #1
 800cbb4:	2203      	movs	r2, #3
 800cbb6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbba:	43db      	mvns	r3, r3
 800cbbc:	69ba      	ldr	r2, [r7, #24]
 800cbbe:	4013      	ands	r3, r2
 800cbc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f003 0203 	and.w	r2, r3, #3
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd2:	69ba      	ldr	r2, [r7, #24]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	69ba      	ldr	r2, [r7, #24]
 800cbdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f000 80e0 	beq.w	800cdac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cbec:	4b2f      	ldr	r3, [pc, #188]	; (800ccac <HAL_GPIO_Init+0x238>)
 800cbee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cbf2:	4a2e      	ldr	r2, [pc, #184]	; (800ccac <HAL_GPIO_Init+0x238>)
 800cbf4:	f043 0302 	orr.w	r3, r3, #2
 800cbf8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800cbfc:	4b2b      	ldr	r3, [pc, #172]	; (800ccac <HAL_GPIO_Init+0x238>)
 800cbfe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cc0a:	4a29      	ldr	r2, [pc, #164]	; (800ccb0 <HAL_GPIO_Init+0x23c>)
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	089b      	lsrs	r3, r3, #2
 800cc10:	3302      	adds	r3, #2
 800cc12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	f003 0303 	and.w	r3, r3, #3
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	220f      	movs	r2, #15
 800cc22:	fa02 f303 	lsl.w	r3, r2, r3
 800cc26:	43db      	mvns	r3, r3
 800cc28:	69ba      	ldr	r2, [r7, #24]
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4a20      	ldr	r2, [pc, #128]	; (800ccb4 <HAL_GPIO_Init+0x240>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d052      	beq.n	800ccdc <HAL_GPIO_Init+0x268>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4a1f      	ldr	r2, [pc, #124]	; (800ccb8 <HAL_GPIO_Init+0x244>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d031      	beq.n	800cca2 <HAL_GPIO_Init+0x22e>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a1e      	ldr	r2, [pc, #120]	; (800ccbc <HAL_GPIO_Init+0x248>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d02b      	beq.n	800cc9e <HAL_GPIO_Init+0x22a>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4a1d      	ldr	r2, [pc, #116]	; (800ccc0 <HAL_GPIO_Init+0x24c>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d025      	beq.n	800cc9a <HAL_GPIO_Init+0x226>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a1c      	ldr	r2, [pc, #112]	; (800ccc4 <HAL_GPIO_Init+0x250>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d01f      	beq.n	800cc96 <HAL_GPIO_Init+0x222>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a1b      	ldr	r2, [pc, #108]	; (800ccc8 <HAL_GPIO_Init+0x254>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d019      	beq.n	800cc92 <HAL_GPIO_Init+0x21e>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a1a      	ldr	r2, [pc, #104]	; (800cccc <HAL_GPIO_Init+0x258>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d013      	beq.n	800cc8e <HAL_GPIO_Init+0x21a>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a19      	ldr	r2, [pc, #100]	; (800ccd0 <HAL_GPIO_Init+0x25c>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d00d      	beq.n	800cc8a <HAL_GPIO_Init+0x216>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a18      	ldr	r2, [pc, #96]	; (800ccd4 <HAL_GPIO_Init+0x260>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d007      	beq.n	800cc86 <HAL_GPIO_Init+0x212>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4a17      	ldr	r2, [pc, #92]	; (800ccd8 <HAL_GPIO_Init+0x264>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d101      	bne.n	800cc82 <HAL_GPIO_Init+0x20e>
 800cc7e:	2309      	movs	r3, #9
 800cc80:	e02d      	b.n	800ccde <HAL_GPIO_Init+0x26a>
 800cc82:	230a      	movs	r3, #10
 800cc84:	e02b      	b.n	800ccde <HAL_GPIO_Init+0x26a>
 800cc86:	2308      	movs	r3, #8
 800cc88:	e029      	b.n	800ccde <HAL_GPIO_Init+0x26a>
 800cc8a:	2307      	movs	r3, #7
 800cc8c:	e027      	b.n	800ccde <HAL_GPIO_Init+0x26a>
 800cc8e:	2306      	movs	r3, #6
 800cc90:	e025      	b.n	800ccde <HAL_GPIO_Init+0x26a>
 800cc92:	2305      	movs	r3, #5
 800cc94:	e023      	b.n	800ccde <HAL_GPIO_Init+0x26a>
 800cc96:	2304      	movs	r3, #4
 800cc98:	e021      	b.n	800ccde <HAL_GPIO_Init+0x26a>
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e01f      	b.n	800ccde <HAL_GPIO_Init+0x26a>
 800cc9e:	2302      	movs	r3, #2
 800cca0:	e01d      	b.n	800ccde <HAL_GPIO_Init+0x26a>
 800cca2:	2301      	movs	r3, #1
 800cca4:	e01b      	b.n	800ccde <HAL_GPIO_Init+0x26a>
 800cca6:	bf00      	nop
 800cca8:	58000080 	.word	0x58000080
 800ccac:	58024400 	.word	0x58024400
 800ccb0:	58000400 	.word	0x58000400
 800ccb4:	58020000 	.word	0x58020000
 800ccb8:	58020400 	.word	0x58020400
 800ccbc:	58020800 	.word	0x58020800
 800ccc0:	58020c00 	.word	0x58020c00
 800ccc4:	58021000 	.word	0x58021000
 800ccc8:	58021400 	.word	0x58021400
 800cccc:	58021800 	.word	0x58021800
 800ccd0:	58021c00 	.word	0x58021c00
 800ccd4:	58022000 	.word	0x58022000
 800ccd8:	58022400 	.word	0x58022400
 800ccdc:	2300      	movs	r3, #0
 800ccde:	69fa      	ldr	r2, [r7, #28]
 800cce0:	f002 0203 	and.w	r2, r2, #3
 800cce4:	0092      	lsls	r2, r2, #2
 800cce6:	4093      	lsls	r3, r2
 800cce8:	69ba      	ldr	r2, [r7, #24]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ccee:	4938      	ldr	r1, [pc, #224]	; (800cdd0 <HAL_GPIO_Init+0x35c>)
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	089b      	lsrs	r3, r3, #2
 800ccf4:	3302      	adds	r3, #2
 800ccf6:	69ba      	ldr	r2, [r7, #24]
 800ccf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ccfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	43db      	mvns	r3, r3
 800cd08:	69ba      	ldr	r2, [r7, #24]
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d003      	beq.n	800cd22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800cd1a:	69ba      	ldr	r2, [r7, #24]
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800cd22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800cd2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	43db      	mvns	r3, r3
 800cd36:	69ba      	ldr	r2, [r7, #24]
 800cd38:	4013      	ands	r3, r2
 800cd3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d003      	beq.n	800cd50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800cd48:	69ba      	ldr	r2, [r7, #24]
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800cd50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	43db      	mvns	r3, r3
 800cd62:	69ba      	ldr	r2, [r7, #24]
 800cd64:	4013      	ands	r3, r2
 800cd66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d003      	beq.n	800cd7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	69ba      	ldr	r2, [r7, #24]
 800cd80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	43db      	mvns	r3, r3
 800cd8c:	69ba      	ldr	r2, [r7, #24]
 800cd8e:	4013      	ands	r3, r2
 800cd90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d003      	beq.n	800cda6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800cd9e:	69ba      	ldr	r2, [r7, #24]
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	69ba      	ldr	r2, [r7, #24]
 800cdaa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	fa22 f303 	lsr.w	r3, r2, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f47f ae63 	bne.w	800ca88 <HAL_GPIO_Init+0x14>
  }
}
 800cdc2:	bf00      	nop
 800cdc4:	bf00      	nop
 800cdc6:	3724      	adds	r7, #36	; 0x24
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr
 800cdd0:	58000400 	.word	0x58000400

0800cdd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b087      	sub	sp, #28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cdde:	2300      	movs	r3, #0
 800cde0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800cde2:	4b75      	ldr	r3, [pc, #468]	; (800cfb8 <HAL_GPIO_DeInit+0x1e4>)
 800cde4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800cde6:	e0d9      	b.n	800cf9c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800cde8:	2201      	movs	r2, #1
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	fa02 f303 	lsl.w	r3, r2, r3
 800cdf0:	683a      	ldr	r2, [r7, #0]
 800cdf2:	4013      	ands	r3, r2
 800cdf4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f000 80cc 	beq.w	800cf96 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800cdfe:	4a6f      	ldr	r2, [pc, #444]	; (800cfbc <HAL_GPIO_DeInit+0x1e8>)
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	089b      	lsrs	r3, r3, #2
 800ce04:	3302      	adds	r3, #2
 800ce06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce0a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	f003 0303 	and.w	r3, r3, #3
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	220f      	movs	r2, #15
 800ce16:	fa02 f303 	lsl.w	r3, r2, r3
 800ce1a:	68ba      	ldr	r2, [r7, #8]
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a67      	ldr	r2, [pc, #412]	; (800cfc0 <HAL_GPIO_DeInit+0x1ec>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d037      	beq.n	800ce98 <HAL_GPIO_DeInit+0xc4>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a66      	ldr	r2, [pc, #408]	; (800cfc4 <HAL_GPIO_DeInit+0x1f0>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d031      	beq.n	800ce94 <HAL_GPIO_DeInit+0xc0>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a65      	ldr	r2, [pc, #404]	; (800cfc8 <HAL_GPIO_DeInit+0x1f4>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d02b      	beq.n	800ce90 <HAL_GPIO_DeInit+0xbc>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4a64      	ldr	r2, [pc, #400]	; (800cfcc <HAL_GPIO_DeInit+0x1f8>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d025      	beq.n	800ce8c <HAL_GPIO_DeInit+0xb8>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a63      	ldr	r2, [pc, #396]	; (800cfd0 <HAL_GPIO_DeInit+0x1fc>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d01f      	beq.n	800ce88 <HAL_GPIO_DeInit+0xb4>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a62      	ldr	r2, [pc, #392]	; (800cfd4 <HAL_GPIO_DeInit+0x200>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d019      	beq.n	800ce84 <HAL_GPIO_DeInit+0xb0>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a61      	ldr	r2, [pc, #388]	; (800cfd8 <HAL_GPIO_DeInit+0x204>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d013      	beq.n	800ce80 <HAL_GPIO_DeInit+0xac>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a60      	ldr	r2, [pc, #384]	; (800cfdc <HAL_GPIO_DeInit+0x208>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d00d      	beq.n	800ce7c <HAL_GPIO_DeInit+0xa8>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4a5f      	ldr	r2, [pc, #380]	; (800cfe0 <HAL_GPIO_DeInit+0x20c>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d007      	beq.n	800ce78 <HAL_GPIO_DeInit+0xa4>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4a5e      	ldr	r2, [pc, #376]	; (800cfe4 <HAL_GPIO_DeInit+0x210>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d101      	bne.n	800ce74 <HAL_GPIO_DeInit+0xa0>
 800ce70:	2309      	movs	r3, #9
 800ce72:	e012      	b.n	800ce9a <HAL_GPIO_DeInit+0xc6>
 800ce74:	230a      	movs	r3, #10
 800ce76:	e010      	b.n	800ce9a <HAL_GPIO_DeInit+0xc6>
 800ce78:	2308      	movs	r3, #8
 800ce7a:	e00e      	b.n	800ce9a <HAL_GPIO_DeInit+0xc6>
 800ce7c:	2307      	movs	r3, #7
 800ce7e:	e00c      	b.n	800ce9a <HAL_GPIO_DeInit+0xc6>
 800ce80:	2306      	movs	r3, #6
 800ce82:	e00a      	b.n	800ce9a <HAL_GPIO_DeInit+0xc6>
 800ce84:	2305      	movs	r3, #5
 800ce86:	e008      	b.n	800ce9a <HAL_GPIO_DeInit+0xc6>
 800ce88:	2304      	movs	r3, #4
 800ce8a:	e006      	b.n	800ce9a <HAL_GPIO_DeInit+0xc6>
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e004      	b.n	800ce9a <HAL_GPIO_DeInit+0xc6>
 800ce90:	2302      	movs	r3, #2
 800ce92:	e002      	b.n	800ce9a <HAL_GPIO_DeInit+0xc6>
 800ce94:	2301      	movs	r3, #1
 800ce96:	e000      	b.n	800ce9a <HAL_GPIO_DeInit+0xc6>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	697a      	ldr	r2, [r7, #20]
 800ce9c:	f002 0203 	and.w	r2, r2, #3
 800cea0:	0092      	lsls	r2, r2, #2
 800cea2:	4093      	lsls	r3, r2
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d136      	bne.n	800cf18 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	43db      	mvns	r3, r3
 800ceb2:	401a      	ands	r2, r3
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	43db      	mvns	r3, r3
 800cec0:	401a      	ands	r2, r3
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800cec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	43db      	mvns	r3, r3
 800ced0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ced4:	4013      	ands	r3, r2
 800ced6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800ced8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	43db      	mvns	r3, r3
 800cee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cee6:	4013      	ands	r3, r2
 800cee8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	f003 0303 	and.w	r3, r3, #3
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	220f      	movs	r2, #15
 800cef4:	fa02 f303 	lsl.w	r3, r2, r3
 800cef8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800cefa:	4a30      	ldr	r2, [pc, #192]	; (800cfbc <HAL_GPIO_DeInit+0x1e8>)
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	089b      	lsrs	r3, r3, #2
 800cf00:	3302      	adds	r3, #2
 800cf02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	43da      	mvns	r2, r3
 800cf0a:	482c      	ldr	r0, [pc, #176]	; (800cfbc <HAL_GPIO_DeInit+0x1e8>)
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	089b      	lsrs	r3, r3, #2
 800cf10:	400a      	ands	r2, r1
 800cf12:	3302      	adds	r3, #2
 800cf14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	005b      	lsls	r3, r3, #1
 800cf20:	2103      	movs	r1, #3
 800cf22:	fa01 f303 	lsl.w	r3, r1, r3
 800cf26:	431a      	orrs	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	08da      	lsrs	r2, r3, #3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	3208      	adds	r2, #8
 800cf34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	f003 0307 	and.w	r3, r3, #7
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	220f      	movs	r2, #15
 800cf42:	fa02 f303 	lsl.w	r3, r2, r3
 800cf46:	43db      	mvns	r3, r3
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	08d2      	lsrs	r2, r2, #3
 800cf4c:	4019      	ands	r1, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	3208      	adds	r2, #8
 800cf52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	68da      	ldr	r2, [r3, #12]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	005b      	lsls	r3, r3, #1
 800cf5e:	2103      	movs	r1, #3
 800cf60:	fa01 f303 	lsl.w	r3, r1, r3
 800cf64:	43db      	mvns	r3, r3
 800cf66:	401a      	ands	r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685a      	ldr	r2, [r3, #4]
 800cf70:	2101      	movs	r1, #1
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	fa01 f303 	lsl.w	r3, r1, r3
 800cf78:	43db      	mvns	r3, r3
 800cf7a:	401a      	ands	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	689a      	ldr	r2, [r3, #8]
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	005b      	lsls	r3, r3, #1
 800cf88:	2103      	movs	r1, #3
 800cf8a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf8e:	43db      	mvns	r3, r3
 800cf90:	401a      	ands	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	609a      	str	r2, [r3, #8]
    }

    position++;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	fa22 f303 	lsr.w	r3, r2, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f47f af1f 	bne.w	800cde8 <HAL_GPIO_DeInit+0x14>
  }
}
 800cfaa:	bf00      	nop
 800cfac:	bf00      	nop
 800cfae:	371c      	adds	r7, #28
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	58000080 	.word	0x58000080
 800cfbc:	58000400 	.word	0x58000400
 800cfc0:	58020000 	.word	0x58020000
 800cfc4:	58020400 	.word	0x58020400
 800cfc8:	58020800 	.word	0x58020800
 800cfcc:	58020c00 	.word	0x58020c00
 800cfd0:	58021000 	.word	0x58021000
 800cfd4:	58021400 	.word	0x58021400
 800cfd8:	58021800 	.word	0x58021800
 800cfdc:	58021c00 	.word	0x58021c00
 800cfe0:	58022000 	.word	0x58022000
 800cfe4:	58022400 	.word	0x58022400

0800cfe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	460b      	mov	r3, r1
 800cff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	691a      	ldr	r2, [r3, #16]
 800cff8:	887b      	ldrh	r3, [r7, #2]
 800cffa:	4013      	ands	r3, r2
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d000:	2301      	movs	r3, #1
 800d002:	73fb      	strb	r3, [r7, #15]
 800d004:	e001      	b.n	800d00a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d006:	2300      	movs	r3, #0
 800d008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3714      	adds	r7, #20
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	460b      	mov	r3, r1
 800d022:	807b      	strh	r3, [r7, #2]
 800d024:	4613      	mov	r3, r2
 800d026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d028:	787b      	ldrb	r3, [r7, #1]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d003      	beq.n	800d036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d02e:	887a      	ldrh	r2, [r7, #2]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800d034:	e003      	b.n	800d03e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d036:	887b      	ldrh	r3, [r7, #2]
 800d038:	041a      	lsls	r2, r3, #16
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	619a      	str	r2, [r3, #24]
}
 800d03e:	bf00      	nop
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d04a:	b480      	push	{r7}
 800d04c:	b085      	sub	sp, #20
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	460b      	mov	r3, r1
 800d054:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	695b      	ldr	r3, [r3, #20]
 800d05a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d05c:	887a      	ldrh	r2, [r7, #2]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	4013      	ands	r3, r2
 800d062:	041a      	lsls	r2, r3, #16
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	43d9      	mvns	r1, r3
 800d068:	887b      	ldrh	r3, [r7, #2]
 800d06a:	400b      	ands	r3, r1
 800d06c:	431a      	orrs	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	619a      	str	r2, [r3, #24]
}
 800d072:	bf00      	nop
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr

0800d07e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b082      	sub	sp, #8
 800d082:	af00      	add	r7, sp, #0
 800d084:	4603      	mov	r3, r0
 800d086:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800d088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d08c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d090:	88fb      	ldrh	r3, [r7, #6]
 800d092:	4013      	ands	r3, r2
 800d094:	2b00      	cmp	r3, #0
 800d096:	d008      	beq.n	800d0aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d09c:	88fb      	ldrh	r3, [r7, #6]
 800d09e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d0a2:	88fb      	ldrh	r3, [r7, #6]
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f000 f804 	bl	800d0b2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800d0aa:	bf00      	nop
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d0b2:	b480      	push	{r7}
 800d0b4:	b083      	sub	sp, #12
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800d0bc:	bf00      	nop
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e07f      	b.n	800d1da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d106      	bne.n	800d0f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f7f9 fc50 	bl	8006994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2224      	movs	r2, #36	; 0x24
 800d0f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f022 0201 	bic.w	r2, r2, #1
 800d10a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d118:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	689a      	ldr	r2, [r3, #8]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d128:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d107      	bne.n	800d142 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	689a      	ldr	r2, [r3, #8]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d13e:	609a      	str	r2, [r3, #8]
 800d140:	e006      	b.n	800d150 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	689a      	ldr	r2, [r3, #8]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800d14e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	2b02      	cmp	r3, #2
 800d156:	d104      	bne.n	800d162 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	6859      	ldr	r1, [r3, #4]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	4b1d      	ldr	r3, [pc, #116]	; (800d1e4 <HAL_I2C_Init+0x11c>)
 800d16e:	430b      	orrs	r3, r1
 800d170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	68da      	ldr	r2, [r3, #12]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	691a      	ldr	r2, [r3, #16]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	695b      	ldr	r3, [r3, #20]
 800d18a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	699b      	ldr	r3, [r3, #24]
 800d192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	430a      	orrs	r2, r1
 800d19a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	69d9      	ldr	r1, [r3, #28]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6a1a      	ldr	r2, [r3, #32]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	430a      	orrs	r2, r1
 800d1aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f042 0201 	orr.w	r2, r2, #1
 800d1ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2220      	movs	r2, #32
 800d1c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	02008000 	.word	0x02008000

0800d1e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d101      	bne.n	800d1fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e021      	b.n	800d23e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2224      	movs	r2, #36	; 0x24
 800d1fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f022 0201 	bic.w	r2, r2, #1
 800d210:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7f9 fc28 	bl	8006a68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3708      	adds	r7, #8
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
	...

0800d248 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b088      	sub	sp, #32
 800d24c:	af02      	add	r7, sp, #8
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	4608      	mov	r0, r1
 800d252:	4611      	mov	r1, r2
 800d254:	461a      	mov	r2, r3
 800d256:	4603      	mov	r3, r0
 800d258:	817b      	strh	r3, [r7, #10]
 800d25a:	460b      	mov	r3, r1
 800d25c:	813b      	strh	r3, [r7, #8]
 800d25e:	4613      	mov	r3, r2
 800d260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b20      	cmp	r3, #32
 800d26c:	f040 80f9 	bne.w	800d462 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d002      	beq.n	800d27c <HAL_I2C_Mem_Write+0x34>
 800d276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d105      	bne.n	800d288 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d282:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	e0ed      	b.n	800d464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d101      	bne.n	800d296 <HAL_I2C_Mem_Write+0x4e>
 800d292:	2302      	movs	r3, #2
 800d294:	e0e6      	b.n	800d464 <HAL_I2C_Mem_Write+0x21c>
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d29e:	f7fe ff17 	bl	800c0d0 <HAL_GetTick>
 800d2a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	2319      	movs	r3, #25
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f000 fadd 	bl	800d870 <I2C_WaitOnFlagUntilTimeout>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e0d1      	b.n	800d464 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2221      	movs	r2, #33	; 0x21
 800d2c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2240      	movs	r2, #64	; 0x40
 800d2cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6a3a      	ldr	r2, [r7, #32]
 800d2da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d2e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d2e8:	88f8      	ldrh	r0, [r7, #6]
 800d2ea:	893a      	ldrh	r2, [r7, #8]
 800d2ec:	8979      	ldrh	r1, [r7, #10]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f000 f9ed 	bl	800d6d8 <I2C_RequestMemoryWrite>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d005      	beq.n	800d310 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2200      	movs	r2, #0
 800d308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d30c:	2301      	movs	r3, #1
 800d30e:	e0a9      	b.n	800d464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d314:	b29b      	uxth	r3, r3
 800d316:	2bff      	cmp	r3, #255	; 0xff
 800d318:	d90e      	bls.n	800d338 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	22ff      	movs	r2, #255	; 0xff
 800d31e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d324:	b2da      	uxtb	r2, r3
 800d326:	8979      	ldrh	r1, [r7, #10]
 800d328:	2300      	movs	r3, #0
 800d32a:	9300      	str	r3, [sp, #0]
 800d32c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f000 fc57 	bl	800dbe4 <I2C_TransferConfig>
 800d336:	e00f      	b.n	800d358 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d346:	b2da      	uxtb	r2, r3
 800d348:	8979      	ldrh	r1, [r7, #10]
 800d34a:	2300      	movs	r3, #0
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f000 fc46 	bl	800dbe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d358:	697a      	ldr	r2, [r7, #20]
 800d35a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	f000 fad6 	bl	800d90e <I2C_WaitOnTXISFlagUntilTimeout>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d001      	beq.n	800d36c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	e07b      	b.n	800d464 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d370:	781a      	ldrb	r2, [r3, #0]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37c:	1c5a      	adds	r2, r3, #1
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d386:	b29b      	uxth	r3, r3
 800d388:	3b01      	subs	r3, #1
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d394:	3b01      	subs	r3, #1
 800d396:	b29a      	uxth	r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d034      	beq.n	800d410 <HAL_I2C_Mem_Write+0x1c8>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d130      	bne.n	800d410 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	2180      	movs	r1, #128	; 0x80
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f000 fa59 	bl	800d870 <I2C_WaitOnFlagUntilTimeout>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e04d      	b.n	800d464 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	2bff      	cmp	r3, #255	; 0xff
 800d3d0:	d90e      	bls.n	800d3f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	22ff      	movs	r2, #255	; 0xff
 800d3d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	8979      	ldrh	r1, [r7, #10]
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f000 fbfb 	bl	800dbe4 <I2C_TransferConfig>
 800d3ee:	e00f      	b.n	800d410 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3fe:	b2da      	uxtb	r2, r3
 800d400:	8979      	ldrh	r1, [r7, #10]
 800d402:	2300      	movs	r3, #0
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d40a:	68f8      	ldr	r0, [r7, #12]
 800d40c:	f000 fbea 	bl	800dbe4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d414:	b29b      	uxth	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	d19e      	bne.n	800d358 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d41a:	697a      	ldr	r2, [r7, #20]
 800d41c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f000 fabc 	bl	800d99c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d001      	beq.n	800d42e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e01a      	b.n	800d464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2220      	movs	r2, #32
 800d434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	6859      	ldr	r1, [r3, #4]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	4b0a      	ldr	r3, [pc, #40]	; (800d46c <HAL_I2C_Mem_Write+0x224>)
 800d442:	400b      	ands	r3, r1
 800d444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2220      	movs	r2, #32
 800d44a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	e000      	b.n	800d464 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800d462:	2302      	movs	r3, #2
  }
}
 800d464:	4618      	mov	r0, r3
 800d466:	3718      	adds	r7, #24
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	fe00e800 	.word	0xfe00e800

0800d470 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af02      	add	r7, sp, #8
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	4608      	mov	r0, r1
 800d47a:	4611      	mov	r1, r2
 800d47c:	461a      	mov	r2, r3
 800d47e:	4603      	mov	r3, r0
 800d480:	817b      	strh	r3, [r7, #10]
 800d482:	460b      	mov	r3, r1
 800d484:	813b      	strh	r3, [r7, #8]
 800d486:	4613      	mov	r3, r2
 800d488:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d490:	b2db      	uxtb	r3, r3
 800d492:	2b20      	cmp	r3, #32
 800d494:	f040 80fd 	bne.w	800d692 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d002      	beq.n	800d4a4 <HAL_I2C_Mem_Read+0x34>
 800d49e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d105      	bne.n	800d4b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e0f1      	b.n	800d694 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d101      	bne.n	800d4be <HAL_I2C_Mem_Read+0x4e>
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	e0ea      	b.n	800d694 <HAL_I2C_Mem_Read+0x224>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d4c6:	f7fe fe03 	bl	800c0d0 <HAL_GetTick>
 800d4ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	2319      	movs	r3, #25
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f000 f9c9 	bl	800d870 <I2C_WaitOnFlagUntilTimeout>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d001      	beq.n	800d4e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e0d5      	b.n	800d694 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2222      	movs	r2, #34	; 0x22
 800d4ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2240      	movs	r2, #64	; 0x40
 800d4f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6a3a      	ldr	r2, [r7, #32]
 800d502:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d508:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2200      	movs	r2, #0
 800d50e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d510:	88f8      	ldrh	r0, [r7, #6]
 800d512:	893a      	ldrh	r2, [r7, #8]
 800d514:	8979      	ldrh	r1, [r7, #10]
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	9301      	str	r3, [sp, #4]
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	4603      	mov	r3, r0
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f000 f92d 	bl	800d780 <I2C_RequestMemoryRead>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d005      	beq.n	800d538 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d534:	2301      	movs	r3, #1
 800d536:	e0ad      	b.n	800d694 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	2bff      	cmp	r3, #255	; 0xff
 800d540:	d90e      	bls.n	800d560 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	22ff      	movs	r2, #255	; 0xff
 800d546:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	8979      	ldrh	r1, [r7, #10]
 800d550:	4b52      	ldr	r3, [pc, #328]	; (800d69c <HAL_I2C_Mem_Read+0x22c>)
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d558:	68f8      	ldr	r0, [r7, #12]
 800d55a:	f000 fb43 	bl	800dbe4 <I2C_TransferConfig>
 800d55e:	e00f      	b.n	800d580 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d564:	b29a      	uxth	r2, r3
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d56e:	b2da      	uxtb	r2, r3
 800d570:	8979      	ldrh	r1, [r7, #10]
 800d572:	4b4a      	ldr	r3, [pc, #296]	; (800d69c <HAL_I2C_Mem_Read+0x22c>)
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f000 fb32 	bl	800dbe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	9300      	str	r3, [sp, #0]
 800d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d586:	2200      	movs	r2, #0
 800d588:	2104      	movs	r1, #4
 800d58a:	68f8      	ldr	r0, [r7, #12]
 800d58c:	f000 f970 	bl	800d870 <I2C_WaitOnFlagUntilTimeout>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d001      	beq.n	800d59a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	e07c      	b.n	800d694 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a4:	b2d2      	uxtb	r2, r2
 800d5a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ac:	1c5a      	adds	r2, r3, #1
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	b29a      	uxth	r2, r3
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d034      	beq.n	800d640 <HAL_I2C_Mem_Read+0x1d0>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d130      	bne.n	800d640 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	2180      	movs	r1, #128	; 0x80
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f000 f941 	bl	800d870 <I2C_WaitOnFlagUntilTimeout>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e04d      	b.n	800d694 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	2bff      	cmp	r3, #255	; 0xff
 800d600:	d90e      	bls.n	800d620 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	22ff      	movs	r2, #255	; 0xff
 800d606:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	8979      	ldrh	r1, [r7, #10]
 800d610:	2300      	movs	r3, #0
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f000 fae3 	bl	800dbe4 <I2C_TransferConfig>
 800d61e:	e00f      	b.n	800d640 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d624:	b29a      	uxth	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	8979      	ldrh	r1, [r7, #10]
 800d632:	2300      	movs	r3, #0
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f000 fad2 	bl	800dbe4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d644:	b29b      	uxth	r3, r3
 800d646:	2b00      	cmp	r3, #0
 800d648:	d19a      	bne.n	800d580 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d64a:	697a      	ldr	r2, [r7, #20]
 800d64c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f000 f9a4 	bl	800d99c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	e01a      	b.n	800d694 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2220      	movs	r2, #32
 800d664:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	6859      	ldr	r1, [r3, #4]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	4b0b      	ldr	r3, [pc, #44]	; (800d6a0 <HAL_I2C_Mem_Read+0x230>)
 800d672:	400b      	ands	r3, r1
 800d674:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2220      	movs	r2, #32
 800d67a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2200      	movs	r2, #0
 800d682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	e000      	b.n	800d694 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d692:	2302      	movs	r3, #2
  }
}
 800d694:	4618      	mov	r0, r3
 800d696:	3718      	adds	r7, #24
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	80002400 	.word	0x80002400
 800d6a0:	fe00e800 	.word	0xfe00e800

0800d6a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6b2:	b2db      	uxtb	r3, r3
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b086      	sub	sp, #24
 800d6dc:	af02      	add	r7, sp, #8
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	4608      	mov	r0, r1
 800d6e2:	4611      	mov	r1, r2
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	817b      	strh	r3, [r7, #10]
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	813b      	strh	r3, [r7, #8]
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d6f2:	88fb      	ldrh	r3, [r7, #6]
 800d6f4:	b2da      	uxtb	r2, r3
 800d6f6:	8979      	ldrh	r1, [r7, #10]
 800d6f8:	4b20      	ldr	r3, [pc, #128]	; (800d77c <I2C_RequestMemoryWrite+0xa4>)
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f000 fa6f 	bl	800dbe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	69b9      	ldr	r1, [r7, #24]
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	f000 f8ff 	bl	800d90e <I2C_WaitOnTXISFlagUntilTimeout>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e02c      	b.n	800d774 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d71a:	88fb      	ldrh	r3, [r7, #6]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d105      	bne.n	800d72c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d720:	893b      	ldrh	r3, [r7, #8]
 800d722:	b2da      	uxtb	r2, r3
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	629a      	str	r2, [r3, #40]	; 0x28
 800d72a:	e015      	b.n	800d758 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d72c:	893b      	ldrh	r3, [r7, #8]
 800d72e:	0a1b      	lsrs	r3, r3, #8
 800d730:	b29b      	uxth	r3, r3
 800d732:	b2da      	uxtb	r2, r3
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d73a:	69fa      	ldr	r2, [r7, #28]
 800d73c:	69b9      	ldr	r1, [r7, #24]
 800d73e:	68f8      	ldr	r0, [r7, #12]
 800d740:	f000 f8e5 	bl	800d90e <I2C_WaitOnTXISFlagUntilTimeout>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d001      	beq.n	800d74e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d74a:	2301      	movs	r3, #1
 800d74c:	e012      	b.n	800d774 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d74e:	893b      	ldrh	r3, [r7, #8]
 800d750:	b2da      	uxtb	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	2200      	movs	r2, #0
 800d760:	2180      	movs	r1, #128	; 0x80
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f000 f884 	bl	800d870 <I2C_WaitOnFlagUntilTimeout>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	e000      	b.n	800d774 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d772:	2300      	movs	r3, #0
}
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	80002000 	.word	0x80002000

0800d780 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af02      	add	r7, sp, #8
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	4608      	mov	r0, r1
 800d78a:	4611      	mov	r1, r2
 800d78c:	461a      	mov	r2, r3
 800d78e:	4603      	mov	r3, r0
 800d790:	817b      	strh	r3, [r7, #10]
 800d792:	460b      	mov	r3, r1
 800d794:	813b      	strh	r3, [r7, #8]
 800d796:	4613      	mov	r3, r2
 800d798:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d79a:	88fb      	ldrh	r3, [r7, #6]
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	8979      	ldrh	r1, [r7, #10]
 800d7a0:	4b20      	ldr	r3, [pc, #128]	; (800d824 <I2C_RequestMemoryRead+0xa4>)
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f000 fa1c 	bl	800dbe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7ac:	69fa      	ldr	r2, [r7, #28]
 800d7ae:	69b9      	ldr	r1, [r7, #24]
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f000 f8ac 	bl	800d90e <I2C_WaitOnTXISFlagUntilTimeout>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d001      	beq.n	800d7c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	e02c      	b.n	800d81a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d7c0:	88fb      	ldrh	r3, [r7, #6]
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d105      	bne.n	800d7d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d7c6:	893b      	ldrh	r3, [r7, #8]
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	629a      	str	r2, [r3, #40]	; 0x28
 800d7d0:	e015      	b.n	800d7fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d7d2:	893b      	ldrh	r3, [r7, #8]
 800d7d4:	0a1b      	lsrs	r3, r3, #8
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7e0:	69fa      	ldr	r2, [r7, #28]
 800d7e2:	69b9      	ldr	r1, [r7, #24]
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f000 f892 	bl	800d90e <I2C_WaitOnTXISFlagUntilTimeout>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e012      	b.n	800d81a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d7f4:	893b      	ldrh	r3, [r7, #8]
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	9300      	str	r3, [sp, #0]
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	2200      	movs	r2, #0
 800d806:	2140      	movs	r1, #64	; 0x40
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f000 f831 	bl	800d870 <I2C_WaitOnFlagUntilTimeout>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d814:	2301      	movs	r3, #1
 800d816:	e000      	b.n	800d81a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	80002000 	.word	0x80002000

0800d828 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	699b      	ldr	r3, [r3, #24]
 800d836:	f003 0302 	and.w	r3, r3, #2
 800d83a:	2b02      	cmp	r3, #2
 800d83c:	d103      	bne.n	800d846 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2200      	movs	r2, #0
 800d844:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	699b      	ldr	r3, [r3, #24]
 800d84c:	f003 0301 	and.w	r3, r3, #1
 800d850:	2b01      	cmp	r3, #1
 800d852:	d007      	beq.n	800d864 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	699a      	ldr	r2, [r3, #24]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f042 0201 	orr.w	r2, r2, #1
 800d862:	619a      	str	r2, [r3, #24]
  }
}
 800d864:	bf00      	nop
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	603b      	str	r3, [r7, #0]
 800d87c:	4613      	mov	r3, r2
 800d87e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d880:	e031      	b.n	800d8e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d888:	d02d      	beq.n	800d8e6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d88a:	f7fe fc21 	bl	800c0d0 <HAL_GetTick>
 800d88e:	4602      	mov	r2, r0
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	683a      	ldr	r2, [r7, #0]
 800d896:	429a      	cmp	r2, r3
 800d898:	d302      	bcc.n	800d8a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d122      	bne.n	800d8e6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	699a      	ldr	r2, [r3, #24]
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	bf0c      	ite	eq
 800d8b0:	2301      	moveq	r3, #1
 800d8b2:	2300      	movne	r3, #0
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	79fb      	ldrb	r3, [r7, #7]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d113      	bne.n	800d8e6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8c2:	f043 0220 	orr.w	r2, r3, #32
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2220      	movs	r2, #32
 800d8ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e00f      	b.n	800d906 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	699a      	ldr	r2, [r3, #24]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	68ba      	ldr	r2, [r7, #8]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	bf0c      	ite	eq
 800d8f6:	2301      	moveq	r3, #1
 800d8f8:	2300      	movne	r3, #0
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	79fb      	ldrb	r3, [r7, #7]
 800d900:	429a      	cmp	r2, r3
 800d902:	d0be      	beq.n	800d882 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d904:	2300      	movs	r3, #0
}
 800d906:	4618      	mov	r0, r3
 800d908:	3710      	adds	r7, #16
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d90e:	b580      	push	{r7, lr}
 800d910:	b084      	sub	sp, #16
 800d912:	af00      	add	r7, sp, #0
 800d914:	60f8      	str	r0, [r7, #12]
 800d916:	60b9      	str	r1, [r7, #8]
 800d918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d91a:	e033      	b.n	800d984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	68b9      	ldr	r1, [r7, #8]
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f000 f87f 	bl	800da24 <I2C_IsErrorOccurred>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d92c:	2301      	movs	r3, #1
 800d92e:	e031      	b.n	800d994 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d936:	d025      	beq.n	800d984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d938:	f7fe fbca 	bl	800c0d0 <HAL_GetTick>
 800d93c:	4602      	mov	r2, r0
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	429a      	cmp	r2, r3
 800d946:	d302      	bcc.n	800d94e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d11a      	bne.n	800d984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	699b      	ldr	r3, [r3, #24]
 800d954:	f003 0302 	and.w	r3, r3, #2
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d013      	beq.n	800d984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d960:	f043 0220 	orr.w	r2, r3, #32
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2220      	movs	r2, #32
 800d96c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2200      	movs	r2, #0
 800d974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800d980:	2301      	movs	r3, #1
 800d982:	e007      	b.n	800d994 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	f003 0302 	and.w	r3, r3, #2
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d1c4      	bne.n	800d91c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3710      	adds	r7, #16
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d9a8:	e02f      	b.n	800da0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	68b9      	ldr	r1, [r7, #8]
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f000 f838 	bl	800da24 <I2C_IsErrorOccurred>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e02d      	b.n	800da1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9be:	f7fe fb87 	bl	800c0d0 <HAL_GetTick>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	1ad3      	subs	r3, r2, r3
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d302      	bcc.n	800d9d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d11a      	bne.n	800da0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	699b      	ldr	r3, [r3, #24]
 800d9da:	f003 0320 	and.w	r3, r3, #32
 800d9de:	2b20      	cmp	r3, #32
 800d9e0:	d013      	beq.n	800da0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9e6:	f043 0220 	orr.w	r2, r3, #32
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2220      	movs	r2, #32
 800d9f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800da06:	2301      	movs	r3, #1
 800da08:	e007      	b.n	800da1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	f003 0320 	and.w	r3, r3, #32
 800da14:	2b20      	cmp	r3, #32
 800da16:	d1c8      	bne.n	800d9aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b08a      	sub	sp, #40	; 0x28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da30:	2300      	movs	r3, #0
 800da32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	699b      	ldr	r3, [r3, #24]
 800da3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800da3e:	2300      	movs	r3, #0
 800da40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	f003 0310 	and.w	r3, r3, #16
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d068      	beq.n	800db22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2210      	movs	r2, #16
 800da56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800da58:	e049      	b.n	800daee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da60:	d045      	beq.n	800daee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800da62:	f7fe fb35 	bl	800c0d0 <HAL_GetTick>
 800da66:	4602      	mov	r2, r0
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	68ba      	ldr	r2, [r7, #8]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d302      	bcc.n	800da78 <I2C_IsErrorOccurred+0x54>
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d13a      	bne.n	800daee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	699b      	ldr	r3, [r3, #24]
 800da92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da9a:	d121      	bne.n	800dae0 <I2C_IsErrorOccurred+0xbc>
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800daa2:	d01d      	beq.n	800dae0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800daa4:	7cfb      	ldrb	r3, [r7, #19]
 800daa6:	2b20      	cmp	r3, #32
 800daa8:	d01a      	beq.n	800dae0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	685a      	ldr	r2, [r3, #4]
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dab8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800daba:	f7fe fb09 	bl	800c0d0 <HAL_GetTick>
 800dabe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dac0:	e00e      	b.n	800dae0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800dac2:	f7fe fb05 	bl	800c0d0 <HAL_GetTick>
 800dac6:	4602      	mov	r2, r0
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	2b19      	cmp	r3, #25
 800dace:	d907      	bls.n	800dae0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800dad0:	6a3b      	ldr	r3, [r7, #32]
 800dad2:	f043 0320 	orr.w	r3, r3, #32
 800dad6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800dad8:	2301      	movs	r3, #1
 800dada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800dade:	e006      	b.n	800daee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	699b      	ldr	r3, [r3, #24]
 800dae6:	f003 0320 	and.w	r3, r3, #32
 800daea:	2b20      	cmp	r3, #32
 800daec:	d1e9      	bne.n	800dac2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	699b      	ldr	r3, [r3, #24]
 800daf4:	f003 0320 	and.w	r3, r3, #32
 800daf8:	2b20      	cmp	r3, #32
 800dafa:	d003      	beq.n	800db04 <I2C_IsErrorOccurred+0xe0>
 800dafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db00:	2b00      	cmp	r3, #0
 800db02:	d0aa      	beq.n	800da5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800db04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d103      	bne.n	800db14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2220      	movs	r2, #32
 800db12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	f043 0304 	orr.w	r3, r3, #4
 800db1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800db1c:	2301      	movs	r3, #1
 800db1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db30:	2b00      	cmp	r3, #0
 800db32:	d00b      	beq.n	800db4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800db34:	6a3b      	ldr	r3, [r7, #32]
 800db36:	f043 0301 	orr.w	r3, r3, #1
 800db3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00b      	beq.n	800db6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800db56:	6a3b      	ldr	r3, [r7, #32]
 800db58:	f043 0308 	orr.w	r3, r3, #8
 800db5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800db68:	2301      	movs	r3, #1
 800db6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00b      	beq.n	800db90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800db78:	6a3b      	ldr	r3, [r7, #32]
 800db7a:	f043 0302 	orr.w	r3, r3, #2
 800db7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800db90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db94:	2b00      	cmp	r3, #0
 800db96:	d01c      	beq.n	800dbd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f7ff fe45 	bl	800d828 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	6859      	ldr	r1, [r3, #4]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	4b0d      	ldr	r3, [pc, #52]	; (800dbe0 <I2C_IsErrorOccurred+0x1bc>)
 800dbaa:	400b      	ands	r3, r1
 800dbac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbb2:	6a3b      	ldr	r3, [r7, #32]
 800dbb4:	431a      	orrs	r2, r3
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2220      	movs	r2, #32
 800dbbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800dbd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3728      	adds	r7, #40	; 0x28
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	fe00e800 	.word	0xfe00e800

0800dbe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b087      	sub	sp, #28
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	607b      	str	r3, [r7, #4]
 800dbee:	460b      	mov	r3, r1
 800dbf0:	817b      	strh	r3, [r7, #10]
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dbf6:	897b      	ldrh	r3, [r7, #10]
 800dbf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800dbfc:	7a7b      	ldrb	r3, [r7, #9]
 800dbfe:	041b      	lsls	r3, r3, #16
 800dc00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dc04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dc0a:	6a3b      	ldr	r3, [r7, #32]
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	685a      	ldr	r2, [r3, #4]
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	0d5b      	lsrs	r3, r3, #21
 800dc1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800dc22:	4b08      	ldr	r3, [pc, #32]	; (800dc44 <I2C_TransferConfig+0x60>)
 800dc24:	430b      	orrs	r3, r1
 800dc26:	43db      	mvns	r3, r3
 800dc28:	ea02 0103 	and.w	r1, r2, r3
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	430a      	orrs	r2, r1
 800dc34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800dc36:	bf00      	nop
 800dc38:	371c      	adds	r7, #28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	03ff63ff 	.word	0x03ff63ff

0800dc48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	2b20      	cmp	r3, #32
 800dc5c:	d138      	bne.n	800dcd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d101      	bne.n	800dc6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dc68:	2302      	movs	r3, #2
 800dc6a:	e032      	b.n	800dcd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2224      	movs	r2, #36	; 0x24
 800dc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f022 0201 	bic.w	r2, r2, #1
 800dc8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dc9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	6819      	ldr	r1, [r3, #0]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	430a      	orrs	r2, r1
 800dcaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f042 0201 	orr.w	r2, r2, #1
 800dcba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2220      	movs	r2, #32
 800dcc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	e000      	b.n	800dcd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dcd0:	2302      	movs	r3, #2
  }
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	370c      	adds	r7, #12
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr

0800dcde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800dcde:	b480      	push	{r7}
 800dce0:	b085      	sub	sp, #20
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	2b20      	cmp	r3, #32
 800dcf2:	d139      	bne.n	800dd68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d101      	bne.n	800dd02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800dcfe:	2302      	movs	r3, #2
 800dd00:	e033      	b.n	800dd6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2224      	movs	r2, #36	; 0x24
 800dd0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f022 0201 	bic.w	r2, r2, #1
 800dd20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800dd30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	021b      	lsls	r3, r3, #8
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f042 0201 	orr.w	r2, r2, #1
 800dd52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2220      	movs	r2, #32
 800dd58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dd64:	2300      	movs	r3, #0
 800dd66:	e000      	b.n	800dd6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800dd68:	2302      	movs	r3, #2
  }
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3714      	adds	r7, #20
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr
	...

0800dd78 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	e070      	b.n	800de6c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d106      	bne.n	800dda4 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7f8 fe88 	bl	8006ab4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2202      	movs	r2, #2
 800dda8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f042 0201 	orr.w	r2, r2, #1
 800ddba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f022 0201 	bic.w	r2, r2, #1
 800ddca:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800ddda:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ddea:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ddfa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800de0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a19      	ldr	r2, [pc, #100]	; (800de74 <HAL_JPEG_Init+0xfc>)
 800de10:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4a18      	ldr	r2, [pc, #96]	; (800de78 <HAL_JPEG_Init+0x100>)
 800de16:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2200      	movs	r2, #0
 800de22:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fdc7 	bl	800e9b8 <JPEG_Set_HuffEnc_Mem>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d004      	beq.n	800de3a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e018      	b.n	800de6c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	685a      	ldr	r2, [r3, #4]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de48:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2200      	movs	r2, #0
 800de4e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2200      	movs	r2, #0
 800de54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2200      	movs	r2, #0
 800de68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800de6a:	2300      	movs	r3, #0
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	0802bd3c 	.word	0x0802bd3c
 800de78:	0802bd7c 	.word	0x0802bd7c

0800de7c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b086      	sub	sp, #24
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d002      	beq.n	800de92 <HAL_JPEG_GetInfo+0x16>
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d101      	bne.n	800de96 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e083      	b.n	800df9e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	f003 0303 	and.w	r3, r3, #3
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d103      	bne.n	800deac <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	2210      	movs	r2, #16
 800dea8:	601a      	str	r2, [r3, #0]
 800deaa:	e017      	b.n	800dedc <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	f003 0303 	and.w	r3, r3, #3
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d103      	bne.n	800dec2 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2200      	movs	r2, #0
 800debe:	601a      	str	r2, [r3, #0]
 800dec0:	e00c      	b.n	800dedc <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	f003 0303 	and.w	r3, r3, #3
 800decc:	2b03      	cmp	r3, #3
 800dece:	d103      	bne.n	800ded8 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	2230      	movs	r2, #48	; 0x30
 800ded4:	601a      	str	r2, [r3, #0]
 800ded6:	e001      	b.n	800dedc <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800ded8:	2301      	movs	r3, #1
 800deda:	e060      	b.n	800df9e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	0c1b      	lsrs	r3, r3, #16
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	0c1b      	lsrs	r3, r3, #16
 800def2:	b29a      	uxth	r2, r3
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b10      	cmp	r3, #16
 800defe:	d003      	beq.n	800df08 <HAL_JPEG_GetInfo+0x8c>
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b30      	cmp	r3, #48	; 0x30
 800df06:	d140      	bne.n	800df8a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	691b      	ldr	r3, [r3, #16]
 800df0e:	091b      	lsrs	r3, r3, #4
 800df10:	f003 030f 	and.w	r3, r3, #15
 800df14:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	695b      	ldr	r3, [r3, #20]
 800df1c:	091b      	lsrs	r3, r3, #4
 800df1e:	f003 030f 	and.w	r3, r3, #15
 800df22:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	699b      	ldr	r3, [r3, #24]
 800df2a:	091b      	lsrs	r3, r3, #4
 800df2c:	f003 030f 	and.w	r3, r3, #15
 800df30:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d109      	bne.n	800df4c <HAL_JPEG_GetInfo+0xd0>
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d106      	bne.n	800df4c <HAL_JPEG_GetInfo+0xd0>
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d103      	bne.n	800df4c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	2202      	movs	r2, #2
 800df48:	605a      	str	r2, [r3, #4]
 800df4a:	e01d      	b.n	800df88 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d109      	bne.n	800df66 <HAL_JPEG_GetInfo+0xea>
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d106      	bne.n	800df66 <HAL_JPEG_GetInfo+0xea>
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d103      	bne.n	800df66 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	2200      	movs	r2, #0
 800df62:	605a      	str	r2, [r3, #4]
 800df64:	e010      	b.n	800df88 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	2b03      	cmp	r3, #3
 800df6a:	d109      	bne.n	800df80 <HAL_JPEG_GetInfo+0x104>
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d106      	bne.n	800df80 <HAL_JPEG_GetInfo+0x104>
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d103      	bne.n	800df80 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	2201      	movs	r2, #1
 800df7c:	605a      	str	r2, [r3, #4]
 800df7e:	e003      	b.n	800df88 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	2200      	movs	r2, #0
 800df84:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800df86:	e003      	b.n	800df90 <HAL_JPEG_GetInfo+0x114>
 800df88:	e002      	b.n	800df90 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2200      	movs	r2, #0
 800df8e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f001 fe03 	bl	800fb9c <JPEG_GetQuality>
 800df96:	4602      	mov	r2, r0
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800df9c:	2300      	movs	r3, #0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3718      	adds	r7, #24
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b084      	sub	sp, #16
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	60f8      	str	r0, [r7, #12]
 800dfae:	60b9      	str	r1, [r7, #8]
 800dfb0:	607a      	str	r2, [r7, #4]
 800dfb2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d005      	beq.n	800dfc6 <HAL_JPEG_Decode_DMA+0x20>
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <HAL_JPEG_Decode_DMA+0x20>
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d101      	bne.n	800dfca <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e04c      	b.n	800e064 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d101      	bne.n	800dfd8 <HAL_JPEG_Decode_DMA+0x32>
 800dfd4:	2302      	movs	r3, #2
 800dfd6:	e045      	b.n	800e064 <HAL_JPEG_Decode_DMA+0xbe>
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d134      	bne.n	800e056 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2204      	movs	r2, #4
 800dff0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dff8:	f023 020f 	bic.w	r2, r3, #15
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e004:	f043 020e 	orr.w	r2, r3, #14
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	68ba      	ldr	r2, [r7, #8]
 800e010:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	683a      	ldr	r2, [r7, #0]
 800e016:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	69ba      	ldr	r2, [r7, #24]
 800e022:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2200      	movs	r2, #0
 800e028:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2200      	movs	r2, #0
 800e02e:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f000 ff43 	bl	800eebc <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f001 fa64 	bl	800f504 <JPEG_DMA_StartProcess>
 800e03c:	4603      	mov	r3, r0
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d00f      	beq.n	800e062 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2206      	movs	r2, #6
 800e046:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	e006      	b.n	800e064 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2200      	movs	r2, #0
 800e05a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 800e05e:	2302      	movs	r3, #2
 800e060:	e000      	b.n	800e064 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800e076:	2300      	movs	r3, #0
 800e078:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e07e:	f003 030c 	and.w	r3, r3, #12
 800e082:	2b0c      	cmp	r3, #12
 800e084:	d116      	bne.n	800e0b4 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d005      	beq.n	800e09c <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e094:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	f003 0302 	and.w	r3, r3, #2
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d033      	beq.n	800e10e <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	655a      	str	r2, [r3, #84]	; 0x54
 800e0b2:	e02c      	b.n	800e10e <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0b8:	f003 030c 	and.w	r3, r3, #12
 800e0bc:	2b08      	cmp	r3, #8
 800e0be:	d126      	bne.n	800e10e <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	f003 0301 	and.w	r3, r3, #1
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d009      	beq.n	800e0de <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f043 0306 	orr.w	r3, r3, #6
 800e0dc:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	f003 0302 	and.w	r3, r3, #2
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d009      	beq.n	800e0fc <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800e0fa:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	43da      	mvns	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	400a      	ands	r2, r1
 800e10c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3714      	adds	r7, #20
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800e11c:	b590      	push	{r4, r7, lr}
 800e11e:	b087      	sub	sp, #28
 800e120:	af02      	add	r7, sp, #8
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800e126:	2300      	movs	r3, #0
 800e128:	60fb      	str	r3, [r7, #12]
  uint32_t xfrSize;

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e12e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e132:	2b00      	cmp	r3, #0
 800e134:	d101      	bne.n	800e13a <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800e136:	2301      	movs	r3, #1
 800e138:	e0d7      	b.n	800e2ea <HAL_JPEG_Resume+0x1ce>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e13e:	f003 030c 	and.w	r3, r3, #12
 800e142:	2b0c      	cmp	r3, #12
 800e144:	f040 80a4 	bne.w	800e290 <HAL_JPEG_Resume+0x174>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	f003 0301 	and.w	r3, r3, #1
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d049      	beq.n	800e1e6 <HAL_JPEG_Resume+0xca>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	655a      	str	r2, [r3, #84]	; 0x54
        then MDMA In buffer size is 32 bytes

        else (MDMA In is triggred with JPEG In FIFO not full flag)
        then MDMA In buffer size is 4 bytes
        */
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e164:	60bb      	str	r3, [r7, #8]

      if (xfrSize == 0UL)
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10b      	bne.n	800e184 <HAL_JPEG_Resume+0x68>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e170:	f043 0204 	orr.w	r2, r3, #4
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2206      	movs	r2, #6
 800e17c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        return HAL_ERROR;
 800e180:	2301      	movs	r3, #1
 800e182:	e0b2      	b.n	800e2ea <HAL_JPEG_Resume+0x1ce>
      }
      /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e18c:	68b9      	ldr	r1, [r7, #8]
 800e18e:	fbb3 f1f1 	udiv	r1, r3, r1
 800e192:	68b8      	ldr	r0, [r7, #8]
 800e194:	fb00 f101 	mul.w	r1, r0, r1
 800e198:	1a5b      	subs	r3, r3, r1
 800e19a:	1ad2      	subs	r2, r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	629a      	str	r2, [r3, #40]	; 0x28


      if (hjpeg->InDataLength > 0UL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d01e      	beq.n	800e1e6 <HAL_JPEG_Resume+0xca>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	699b      	ldr	r3, [r3, #24]
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	3340      	adds	r3, #64	; 0x40
 800e1b8:	461c      	mov	r4, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1be:	2201      	movs	r2, #1
 800e1c0:	9200      	str	r2, [sp, #0]
 800e1c2:	4622      	mov	r2, r4
 800e1c4:	f002 f97e 	bl	80104c4 <HAL_MDMA_Start_IT>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00b      	beq.n	800e1e6 <HAL_JPEG_Resume+0xca>
                              hjpeg->InDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1d2:	f043 0204 	orr.w	r2, r3, #4
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2206      	movs	r2, #6
 800e1de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e081      	b.n	800e2ea <HAL_JPEG_Resume+0x1ce>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	f003 0302 	and.w	r3, r3, #2
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d07b      	beq.n	800e2e8 <HAL_JPEG_Resume+0x1cc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e204:	2b00      	cmp	r3, #0
 800e206:	d003      	beq.n	800e210 <HAL_JPEG_Resume+0xf4>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f001 faf3 	bl	800f7f4 <JPEG_DMA_PollResidualData>
 800e20e:	e06b      	b.n	800e2e8 <HAL_JPEG_Resume+0x1cc>
        /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
          then MDMA out buffer size is 32 bytes
          else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
          then MDMA buffer size is 4 bytes
          */
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e216:	60bb      	str	r3, [r7, #8]

        if (xfrSize == 0UL)
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10b      	bne.n	800e236 <HAL_JPEG_Resume+0x11a>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e222:	f043 0204 	orr.w	r2, r3, #4
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2206      	movs	r2, #6
 800e22e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	e059      	b.n	800e2ea <HAL_JPEG_Resume+0x1ce>
        }
        /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23e:	68b9      	ldr	r1, [r7, #8]
 800e240:	fbb3 f1f1 	udiv	r1, r3, r1
 800e244:	68b8      	ldr	r0, [r7, #8]
 800e246:	fb00 f101 	mul.w	r1, r0, r1
 800e24a:	1a5b      	subs	r3, r3, r1
 800e24c:	1ad2      	subs	r2, r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Start DMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3344      	adds	r3, #68	; 0x44
 800e25c:	4619      	mov	r1, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	69db      	ldr	r3, [r3, #28]
 800e262:	461c      	mov	r4, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e268:	2201      	movs	r2, #1
 800e26a:	9200      	str	r2, [sp, #0]
 800e26c:	4622      	mov	r2, r4
 800e26e:	f002 f929 	bl	80104c4 <HAL_MDMA_Start_IT>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d037      	beq.n	800e2e8 <HAL_JPEG_Resume+0x1cc>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e27c:	f043 0204 	orr.w	r2, r3, #4
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2206      	movs	r2, #6
 800e288:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800e28c:	2301      	movs	r3, #1
 800e28e:	e02c      	b.n	800e2ea <HAL_JPEG_Resume+0x1ce>
      }

    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e294:	f003 030c 	and.w	r3, r3, #12
 800e298:	2b08      	cmp	r3, #8
 800e29a:	d125      	bne.n	800e2e8 <HAL_JPEG_Resume+0x1cc>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	f003 0301 	and.w	r3, r3, #1
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d009      	beq.n	800e2ba <HAL_JPEG_Resume+0x19e>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f043 0306 	orr.w	r3, r3, #6
 800e2b8:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	f003 0302 	and.w	r3, r3, #2
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d009      	beq.n	800e2d8 <HAL_JPEG_Resume+0x1bc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800e2d6:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	430a      	orrs	r2, r1
 800e2e6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd90      	pop	{r4, r7, pc}

0800e2f2 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 800e2f2:	b480      	push	{r7}
 800e2f4:	b085      	sub	sp, #20
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	60f8      	str	r0, [r7, #12]
 800e2fa:	60b9      	str	r1, [r7, #8]
 800e2fc:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e30a:	bf00      	nop
 800e30c:	3714      	adds	r7, #20
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr

0800e316 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800e316:	b480      	push	{r7}
 800e318:	b085      	sub	sp, #20
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	60f8      	str	r0, [r7, #12]
 800e31e:	60b9      	str	r1, [r7, #8]
 800e320:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	68ba      	ldr	r2, [r7, #8]
 800e326:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e32e:	bf00      	nop
 800e330:	3714      	adds	r7, #20
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr

0800e33a <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800e33a:	b480      	push	{r7}
 800e33c:	b083      	sub	sp, #12
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800e342:	bf00      	nop
 800e344:	370c      	adds	r7, #12
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr

0800e34e <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b082      	sub	sp, #8
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	3b03      	subs	r3, #3
 800e360:	2b01      	cmp	r3, #1
 800e362:	d813      	bhi.n	800e38c <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e368:	f003 030c 	and.w	r3, r3, #12
 800e36c:	2b08      	cmp	r3, #8
 800e36e:	d103      	bne.n	800e378 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 fe17 	bl	800efa4 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800e376:	e00b      	b.n	800e390 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e37c:	f003 030c 	and.w	r3, r3, #12
 800e380:	2b0c      	cmp	r3, #12
 800e382:	d105      	bne.n	800e390 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f001 f957 	bl	800f638 <JPEG_DMA_ContinueProcess>
      break;
 800e38a:	e001      	b.n	800e390 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800e38c:	bf00      	nop
 800e38e:	e000      	b.n	800e392 <HAL_JPEG_IRQHandler+0x44>
      break;
 800e390:	bf00      	nop
  }
}
 800e392:	bf00      	nop
 800e394:	3708      	adds	r7, #8
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800e39a:	b480      	push	{r7}
 800e39c:	b08b      	sub	sp, #44	; 0x2c
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	60f8      	str	r0, [r7, #12]
 800e3a2:	60b9      	str	r1, [r7, #8]
 800e3a4:	607a      	str	r2, [r7, #4]
 800e3a6:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	61fb      	str	r3, [r7, #28]
 800e3b0:	e020      	b.n	800e3f4 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800e3bc:	6a3a      	ldr	r2, [r7, #32]
 800e3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c0:	4413      	add	r3, r2
 800e3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3c6:	d90f      	bls.n	800e3e8 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	e055      	b.n	800e478 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	68b9      	ldr	r1, [r7, #8]
 800e3d2:	6a3b      	ldr	r3, [r7, #32]
 800e3d4:	440b      	add	r3, r1
 800e3d6:	3201      	adds	r2, #1
 800e3d8:	b2d2      	uxtb	r2, r2
 800e3da:	701a      	strb	r2, [r3, #0]
      p++;
 800e3dc:	6a3b      	ldr	r3, [r7, #32]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	623b      	str	r3, [r7, #32]
      i--;
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1ee      	bne.n	800e3cc <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	61fb      	str	r3, [r7, #28]
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	2b0f      	cmp	r3, #15
 800e3f8:	d9db      	bls.n	800e3b2 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800e3fa:	68ba      	ldr	r2, [r7, #8]
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	4413      	add	r3, r2
 800e400:	2200      	movs	r2, #0
 800e402:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	6a3a      	ldr	r2, [r7, #32]
 800e408:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	617b      	str	r3, [r7, #20]
  p = 0;
 800e414:	2300      	movs	r3, #0
 800e416:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800e418:	e027      	b.n	800e46a <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800e41a:	6a3b      	ldr	r3, [r7, #32]
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	4413      	add	r3, r2
 800e422:	69ba      	ldr	r2, [r7, #24]
 800e424:	601a      	str	r2, [r3, #0]
      p++;
 800e426:	6a3b      	ldr	r3, [r7, #32]
 800e428:	3301      	adds	r3, #1
 800e42a:	623b      	str	r3, [r7, #32]
      code++;
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	3301      	adds	r3, #1
 800e430:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	6a3b      	ldr	r3, [r7, #32]
 800e436:	4413      	add	r3, r2
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	461a      	mov	r2, r3
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	4293      	cmp	r3, r2
 800e440:	d0eb      	beq.n	800e41a <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	2b1f      	cmp	r3, #31
 800e446:	d901      	bls.n	800e44c <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	e015      	b.n	800e478 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800e44c:	2201      	movs	r2, #1
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	fa02 f303 	lsl.w	r3, r2, r3
 800e454:	69ba      	ldr	r2, [r7, #24]
 800e456:	429a      	cmp	r2, r3
 800e458:	d301      	bcc.n	800e45e <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800e45a:	2301      	movs	r3, #1
 800e45c:	e00c      	b.n	800e478 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	005b      	lsls	r3, r3, #1
 800e462:	61bb      	str	r3, [r7, #24]
    si++;
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	3301      	adds	r3, #1
 800e468:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800e46a:	68ba      	ldr	r2, [r7, #8]
 800e46c:	6a3b      	ldr	r3, [r7, #32]
 800e46e:	4413      	add	r3, r2
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d1dd      	bne.n	800e432 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	372c      	adds	r7, #44	; 0x2c
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr

0800e484 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e490:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800e494:	6018      	str	r0, [r3, #0]
 800e496:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e49a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800e49e:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800e4a0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e4a4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800e4a8:	6818      	ldr	r0, [r3, #0]
 800e4aa:	f107 0308 	add.w	r3, r7, #8
 800e4ae:	f107 020c 	add.w	r2, r7, #12
 800e4b2:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800e4b6:	f7ff ff70 	bl	800e39a <JPEG_Bits_To_SizeCodes>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 800e4c0:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d002      	beq.n	800e4ce <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800e4c8:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800e4cc:	e075      	b.n	800e5ba <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 800e4d4:	e067      	b.n	800e5a6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800e4d6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e4da:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800e4e4:	4413      	add	r3, r2
 800e4e6:	3310      	adds	r3, #16
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 800e4ee:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d103      	bne.n	800e4fe <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800e4f6:	23a0      	movs	r3, #160	; 0xa0
 800e4f8:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800e4fc:	e021      	b.n	800e542 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800e4fe:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e502:	2bf0      	cmp	r3, #240	; 0xf0
 800e504:	d103      	bne.n	800e50e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800e506:	23a1      	movs	r3, #161	; 0xa1
 800e508:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800e50c:	e019      	b.n	800e542 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800e50e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e512:	091b      	lsrs	r3, r3, #4
 800e514:	f003 030f 	and.w	r3, r3, #15
 800e518:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 800e51c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e520:	f003 030f 	and.w	r3, r3, #15
 800e524:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800e528:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800e52c:	4613      	mov	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4413      	add	r3, r2
 800e532:	005b      	lsls	r3, r3, #1
 800e534:	461a      	mov	r2, r3
 800e536:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e53a:	4413      	add	r3, r2
 800e53c:	3b01      	subs	r3, #1
 800e53e:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800e542:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e546:	2ba1      	cmp	r3, #161	; 0xa1
 800e548:	d901      	bls.n	800e54e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800e54a:	2301      	movs	r3, #1
 800e54c:	e035      	b.n	800e5ba <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800e54e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e552:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e556:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800e55a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e55e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e562:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800e566:	6819      	ldr	r1, [r3, #0]
 800e568:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e56c:	3328      	adds	r3, #40	; 0x28
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	440b      	add	r3, r1
 800e572:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800e574:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e578:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800e57c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800e580:	4413      	add	r3, r2
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	3b01      	subs	r3, #1
 800e586:	b2d9      	uxtb	r1, r3
 800e588:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e58c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800e596:	4413      	add	r3, r2
 800e598:	460a      	mov	r2, r1
 800e59a:	701a      	strb	r2, [r3, #0]
      k++;
 800e59c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 800e5a6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800e5aa:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d38e      	bcc.n	800e4d6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e5d0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e5d4:	6018      	str	r0, [r3, #0]
 800e5d6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e5da:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e5de:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800e5e0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e5e4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e5e8:	6818      	ldr	r0, [r3, #0]
 800e5ea:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800e5ee:	f107 0208 	add.w	r2, r7, #8
 800e5f2:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 800e5f6:	f7ff fed0 	bl	800e39a <JPEG_Bits_To_SizeCodes>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 800e600:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800e604:	2b00      	cmp	r3, #0
 800e606:	d002      	beq.n	800e60e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800e608:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800e60c:	e048      	b.n	800e6a0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800e60e:	2300      	movs	r3, #0
 800e610:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 800e614:	e03d      	b.n	800e692 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800e616:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e61a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800e624:	4413      	add	r3, r2
 800e626:	3310      	adds	r3, #16
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800e62e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e632:	2b0b      	cmp	r3, #11
 800e634:	d901      	bls.n	800e63a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800e636:	2301      	movs	r3, #1
 800e638:	e032      	b.n	800e6a0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800e63a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e63e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800e642:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800e646:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e64a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e64e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e652:	6819      	ldr	r1, [r3, #0]
 800e654:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e658:	3302      	adds	r3, #2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	440b      	add	r3, r1
 800e65e:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800e660:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e664:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800e668:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800e66c:	4413      	add	r3, r2
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	3b01      	subs	r3, #1
 800e672:	b2d9      	uxtb	r1, r3
 800e674:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800e678:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800e682:	4413      	add	r3, r2
 800e684:	460a      	mov	r2, r1
 800e686:	701a      	strb	r2, [r3, #0]
      k++;
 800e688:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800e68c:	3301      	adds	r3, #1
 800e68e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 800e692:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800e696:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d3bb      	bcc.n	800e616 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e69e:	2300      	movs	r3, #0
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b09a      	sub	sp, #104	; 0x68
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	60f8      	str	r0, [r7, #12]
 800e6b2:	60b9      	str	r1, [r7, #8]
 800e6b4:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d106      	bne.n	800e6d2 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800e6cc:	3318      	adds	r3, #24
 800e6ce:	663b      	str	r3, [r7, #96]	; 0x60
 800e6d0:	e00f      	b.n	800e6f2 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d106      	bne.n	800e6ee <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800e6e8:	3318      	adds	r3, #24
 800e6ea:	663b      	str	r3, [r7, #96]	; 0x60
 800e6ec:	e001      	b.n	800e6f2 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e059      	b.n	800e7a6 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d055      	beq.n	800e7a4 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800e6f8:	f107 0314 	add.w	r3, r7, #20
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	68b8      	ldr	r0, [r7, #8]
 800e700:	f7ff ff60 	bl	800e5c4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800e704:	4603      	mov	r3, r0
 800e706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 800e70a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d002      	beq.n	800e718 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800e712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e716:	e046      	b.n	800e7a6 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800e718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e71a:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800e71c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e71e:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800e722:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e726:	3304      	adds	r3, #4
 800e728:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800e72a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e72c:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800e730:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800e732:	230c      	movs	r3, #12
 800e734:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 800e736:	e032      	b.n	800e79e <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800e738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e73a:	3b01      	subs	r3, #1
 800e73c:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 800e73e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e740:	3b04      	subs	r3, #4
 800e742:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800e744:	f107 0214 	add.w	r2, r7, #20
 800e748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e74a:	4413      	add	r3, r2
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	021b      	lsls	r3, r3, #8
 800e750:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e756:	3302      	adds	r3, #2
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	3368      	adds	r3, #104	; 0x68
 800e75c:	443b      	add	r3, r7
 800e75e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e762:	b2db      	uxtb	r3, r3
 800e764:	4313      	orrs	r3, r2
 800e766:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 800e768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e76a:	3b01      	subs	r3, #1
 800e76c:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800e76e:	f107 0214 	add.w	r2, r7, #20
 800e772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e774:	4413      	add	r3, r2
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	021b      	lsls	r3, r3, #8
 800e77a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e77e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e780:	3302      	adds	r3, #2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	3368      	adds	r3, #104	; 0x68
 800e786:	443b      	add	r3, r7
 800e788:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	4313      	orrs	r3, r2
 800e790:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800e792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e794:	041a      	lsls	r2, r3, #16
 800e796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e798:	431a      	orrs	r2, r3
 800e79a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e79c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800e79e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d8c9      	bhi.n	800e738 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e7a4:	2300      	movs	r3, #0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3768      	adds	r7, #104	; 0x68
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
	...

0800e7b0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e7bc:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e7c0:	6018      	str	r0, [r3, #0]
 800e7c2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e7c6:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e7ca:	6019      	str	r1, [r3, #0]
 800e7cc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e7d0:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800e7d4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800e7d6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e7da:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7e6:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800e7ea:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800e7ee:	6812      	ldr	r2, [r2, #0]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d10c      	bne.n	800e80e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800e7f4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e7f8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e804:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e808:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800e80c:	e01d      	b.n	800e84a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800e80e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e812:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800e81e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800e822:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800e826:	6812      	ldr	r2, [r2, #0]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d10c      	bne.n	800e846 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800e82c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e830:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800e83c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e840:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800e844:	e001      	b.n	800e84a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	e0a8      	b.n	800e99c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800e84a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e84e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 80a0 	beq.w	800e99a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800e85a:	f107 0214 	add.w	r2, r7, #20
 800e85e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e862:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e866:	4611      	mov	r1, r2
 800e868:	6818      	ldr	r0, [r3, #0]
 800e86a:	f7ff fe0b 	bl	800e484 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800e86e:	4603      	mov	r3, r0
 800e870:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 800e874:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d002      	beq.n	800e882 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800e87c:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800e880:	e08c      	b.n	800e99c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800e882:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800e886:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800e88a:	2300      	movs	r3, #0
 800e88c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800e890:	e00e      	b.n	800e8b0 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800e892:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e896:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800e89a:	601a      	str	r2, [r3, #0]
      addressDef++;
 800e89c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e8a0:	3304      	adds	r3, #4
 800e8a2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800e8a6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800e8b0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d9ec      	bls.n	800e892 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800e8b8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e8bc:	4a3a      	ldr	r2, [pc, #232]	; (800e9a8 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800e8be:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e8c0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e8c4:	3304      	adds	r3, #4
 800e8c6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 800e8ca:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e8ce:	4a37      	ldr	r2, [pc, #220]	; (800e9ac <JPEG_Set_HuffAC_Mem+0x1fc>)
 800e8d0:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e8d2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 800e8dc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e8e0:	4a33      	ldr	r2, [pc, #204]	; (800e9b0 <JPEG_Set_HuffAC_Mem+0x200>)
 800e8e2:	601a      	str	r2, [r3, #0]
    addressDef++;
 800e8e4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 800e8ee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800e8f2:	4a30      	ldr	r2, [pc, #192]	; (800e9b4 <JPEG_Set_HuffAC_Mem+0x204>)
 800e8f4:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800e8f6:	23a2      	movs	r3, #162	; 0xa2
 800e8f8:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 800e8fc:	e049      	b.n	800e992 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800e8fe:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e902:	3b01      	subs	r3, #1
 800e904:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 800e908:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800e90c:	3b04      	subs	r3, #4
 800e90e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800e912:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e916:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800e91a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e91e:	4413      	add	r3, r2
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	021b      	lsls	r3, r3, #8
 800e924:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e928:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e92c:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800e930:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e934:	3328      	adds	r3, #40	; 0x28
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	440b      	add	r3, r1
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	4313      	orrs	r3, r2
 800e940:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 800e944:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e948:	3b01      	subs	r3, #1
 800e94a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800e94e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e952:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800e956:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e95a:	4413      	add	r3, r2
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	021b      	lsls	r3, r3, #8
 800e960:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e964:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e968:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800e96c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e970:	3328      	adds	r3, #40	; 0x28
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	440b      	add	r3, r1
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	4313      	orrs	r3, r2
 800e97c:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800e980:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800e984:	041a      	lsls	r2, r3, #16
 800e986:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800e98a:	431a      	orrs	r2, r3
 800e98c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800e990:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800e992:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800e996:	2b01      	cmp	r3, #1
 800e998:	d8b1      	bhi.n	800e8fe <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	0fd10fd0 	.word	0x0fd10fd0
 800e9ac:	0fd30fd2 	.word	0x0fd30fd2
 800e9b0:	0fd50fd4 	.word	0x0fd50fd4
 800e9b4:	0fd70fd6 	.word	0x0fd70fd6

0800e9b8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 f84d 	bl	800ea60 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	491f      	ldr	r1, [pc, #124]	; (800ea50 <JPEG_Set_HuffEnc_Mem+0x98>)
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f7ff feec 	bl	800e7b0 <JPEG_Set_HuffAC_Mem>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800e9dc:	7bfb      	ldrb	r3, [r7, #15]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d001      	beq.n	800e9e6 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800e9e2:	7bfb      	ldrb	r3, [r7, #15]
 800e9e4:	e030      	b.n	800ea48 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	4918      	ldr	r1, [pc, #96]	; (800ea54 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f7ff fedc 	bl	800e7b0 <JPEG_Set_HuffAC_Mem>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800e9fc:	7bfb      	ldrb	r3, [r7, #15]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d001      	beq.n	800ea06 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800ea02:	7bfb      	ldrb	r3, [r7, #15]
 800ea04:	e020      	b.n	800ea48 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800ea0e:	461a      	mov	r2, r3
 800ea10:	4911      	ldr	r1, [pc, #68]	; (800ea58 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f7ff fe49 	bl	800e6aa <JPEG_Set_HuffDC_Mem>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800ea1c:	7bfb      	ldrb	r3, [r7, #15]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800ea22:	7bfb      	ldrb	r3, [r7, #15]
 800ea24:	e010      	b.n	800ea48 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800ea2e:	461a      	mov	r2, r3
 800ea30:	490a      	ldr	r1, [pc, #40]	; (800ea5c <JPEG_Set_HuffEnc_Mem+0xa4>)
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7ff fe39 	bl	800e6aa <JPEG_Set_HuffDC_Mem>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800ea3c:	7bfb      	ldrb	r3, [r7, #15]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d001      	beq.n	800ea46 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
 800ea44:	e000      	b.n	800ea48 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800ea46:	2300      	movs	r3, #0
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3710      	adds	r7, #16
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	0802bb94 	.word	0x0802bb94
 800ea54:	0802bc48 	.word	0x0802bc48
 800ea58:	0802bb5c 	.word	0x0802bb5c
 800ea5c:	0802bb78 	.word	0x0802bb78

0800ea60 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b08b      	sub	sp, #44	; 0x2c
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800ea68:	4b80      	ldr	r3, [pc, #512]	; (800ec6c <JPEG_Set_Huff_DHTMem+0x20c>)
 800ea6a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800ea6c:	4b80      	ldr	r3, [pc, #512]	; (800ec70 <JPEG_Set_Huff_DHTMem+0x210>)
 800ea6e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800ea70:	4b80      	ldr	r3, [pc, #512]	; (800ec74 <JPEG_Set_Huff_DHTMem+0x214>)
 800ea72:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800ea74:	4b80      	ldr	r3, [pc, #512]	; (800ec78 <JPEG_Set_Huff_DHTMem+0x218>)
 800ea76:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ea80:	330c      	adds	r3, #12
 800ea82:	623b      	str	r3, [r7, #32]
  index = 16;
 800ea84:	2310      	movs	r3, #16
 800ea86:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800ea88:	e01d      	b.n	800eac6 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	697a      	ldr	r2, [r7, #20]
 800ea90:	5cd3      	ldrb	r3, [r2, r3]
 800ea92:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800ea94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea96:	3b02      	subs	r3, #2
 800ea98:	6979      	ldr	r1, [r7, #20]
 800ea9a:	5ccb      	ldrb	r3, [r1, r3]
 800ea9c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ea9e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	3b03      	subs	r3, #3
 800eaa4:	6979      	ldr	r1, [r7, #20]
 800eaa6:	5ccb      	ldrb	r3, [r1, r3]
 800eaa8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800eaaa:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800eaac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaae:	3a04      	subs	r2, #4
 800eab0:	6979      	ldr	r1, [r7, #20]
 800eab2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800eab4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800eab6:	6a3b      	ldr	r3, [r7, #32]
 800eab8:	601a      	str	r2, [r3, #0]
    address--;
 800eaba:	6a3b      	ldr	r3, [r7, #32]
 800eabc:	3b04      	subs	r3, #4
 800eabe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800eac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac2:	3b04      	subs	r3, #4
 800eac4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800eac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac8:	2b03      	cmp	r3, #3
 800eaca:	d8de      	bhi.n	800ea8a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ead4:	3318      	adds	r3, #24
 800ead6:	623b      	str	r3, [r7, #32]
  index = 12;
 800ead8:	230c      	movs	r3, #12
 800eada:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800eadc:	e021      	b.n	800eb22 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800eade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae0:	3b01      	subs	r3, #1
 800eae2:	697a      	ldr	r2, [r7, #20]
 800eae4:	4413      	add	r3, r2
 800eae6:	7c1b      	ldrb	r3, [r3, #16]
 800eae8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	3b02      	subs	r3, #2
 800eaee:	6979      	ldr	r1, [r7, #20]
 800eaf0:	440b      	add	r3, r1
 800eaf2:	7c1b      	ldrb	r3, [r3, #16]
 800eaf4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800eaf6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	3b03      	subs	r3, #3
 800eafc:	6979      	ldr	r1, [r7, #20]
 800eafe:	440b      	add	r3, r1
 800eb00:	7c1b      	ldrb	r3, [r3, #16]
 800eb02:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800eb04:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800eb06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb08:	3a04      	subs	r2, #4
 800eb0a:	6979      	ldr	r1, [r7, #20]
 800eb0c:	440a      	add	r2, r1
 800eb0e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800eb10:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800eb12:	6a3b      	ldr	r3, [r7, #32]
 800eb14:	601a      	str	r2, [r3, #0]
    address--;
 800eb16:	6a3b      	ldr	r3, [r7, #32]
 800eb18:	3b04      	subs	r3, #4
 800eb1a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1e:	3b04      	subs	r3, #4
 800eb20:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800eb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb24:	2b03      	cmp	r3, #3
 800eb26:	d8da      	bhi.n	800eade <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800eb30:	3328      	adds	r3, #40	; 0x28
 800eb32:	623b      	str	r3, [r7, #32]
  index = 16;
 800eb34:	2310      	movs	r3, #16
 800eb36:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800eb38:	e01d      	b.n	800eb76 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	69fa      	ldr	r2, [r7, #28]
 800eb40:	5cd3      	ldrb	r3, [r2, r3]
 800eb42:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800eb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb46:	3b02      	subs	r3, #2
 800eb48:	69f9      	ldr	r1, [r7, #28]
 800eb4a:	5ccb      	ldrb	r3, [r1, r3]
 800eb4c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800eb4e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb52:	3b03      	subs	r3, #3
 800eb54:	69f9      	ldr	r1, [r7, #28]
 800eb56:	5ccb      	ldrb	r3, [r1, r3]
 800eb58:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800eb5a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800eb5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb5e:	3a04      	subs	r2, #4
 800eb60:	69f9      	ldr	r1, [r7, #28]
 800eb62:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800eb64:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800eb66:	6a3b      	ldr	r3, [r7, #32]
 800eb68:	601a      	str	r2, [r3, #0]
    address--;
 800eb6a:	6a3b      	ldr	r3, [r7, #32]
 800eb6c:	3b04      	subs	r3, #4
 800eb6e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800eb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb72:	3b04      	subs	r3, #4
 800eb74:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800eb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb78:	2b03      	cmp	r3, #3
 800eb7a:	d8de      	bhi.n	800eb3a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800eb84:	33cc      	adds	r3, #204	; 0xcc
 800eb86:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800eb88:	6a3b      	ldr	r3, [r7, #32]
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	4b3b      	ldr	r3, [pc, #236]	; (800ec7c <JPEG_Set_Huff_DHTMem+0x21c>)
 800eb8e:	4013      	ands	r3, r2
 800eb90:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800eb92:	69fb      	ldr	r3, [r7, #28]
 800eb94:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eb98:	021a      	lsls	r2, r3, #8
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	69fa      	ldr	r2, [r7, #28]
 800eba0:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800eba4:	4313      	orrs	r3, r2
 800eba6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800eba8:	6a3b      	ldr	r3, [r7, #32]
 800ebaa:	68fa      	ldr	r2, [r7, #12]
 800ebac:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800ebae:	6a3b      	ldr	r3, [r7, #32]
 800ebb0:	3b04      	subs	r3, #4
 800ebb2:	623b      	str	r3, [r7, #32]
  index = 160;
 800ebb4:	23a0      	movs	r3, #160	; 0xa0
 800ebb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800ebb8:	e021      	b.n	800ebfe <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ebba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	69fa      	ldr	r2, [r7, #28]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	7c1b      	ldrb	r3, [r3, #16]
 800ebc4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc8:	3b02      	subs	r3, #2
 800ebca:	69f9      	ldr	r1, [r7, #28]
 800ebcc:	440b      	add	r3, r1
 800ebce:	7c1b      	ldrb	r3, [r3, #16]
 800ebd0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ebd2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd6:	3b03      	subs	r3, #3
 800ebd8:	69f9      	ldr	r1, [r7, #28]
 800ebda:	440b      	add	r3, r1
 800ebdc:	7c1b      	ldrb	r3, [r3, #16]
 800ebde:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800ebe0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800ebe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebe4:	3a04      	subs	r2, #4
 800ebe6:	69f9      	ldr	r1, [r7, #28]
 800ebe8:	440a      	add	r2, r1
 800ebea:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800ebec:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ebee:	6a3b      	ldr	r3, [r7, #32]
 800ebf0:	601a      	str	r2, [r3, #0]
    address--;
 800ebf2:	6a3b      	ldr	r3, [r7, #32]
 800ebf4:	3b04      	subs	r3, #4
 800ebf6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ebf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfa:	3b04      	subs	r3, #4
 800ebfc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800ebfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec00:	2b03      	cmp	r3, #3
 800ec02:	d8da      	bhi.n	800ebba <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ec0c:	33cc      	adds	r3, #204	; 0xcc
 800ec0e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800ec10:	6a3b      	ldr	r3, [r7, #32]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	785b      	ldrb	r3, [r3, #1]
 800ec1c:	061a      	lsls	r2, r3, #24
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	431a      	orrs	r2, r3
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	041b      	lsls	r3, r3, #16
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ec2c:	6a3b      	ldr	r3, [r7, #32]
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ec3a:	33dc      	adds	r3, #220	; 0xdc
 800ec3c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	4b0e      	ldr	r3, [pc, #56]	; (800ec7c <JPEG_Set_Huff_DHTMem+0x21c>)
 800ec44:	4013      	ands	r3, r2
 800ec46:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	7bdb      	ldrb	r3, [r3, #15]
 800ec4c:	021a      	lsls	r2, r3, #8
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	4313      	orrs	r3, r2
 800ec52:	693a      	ldr	r2, [r7, #16]
 800ec54:	7b92      	ldrb	r2, [r2, #14]
 800ec56:	4313      	orrs	r3, r2
 800ec58:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ec5a:	6a3b      	ldr	r3, [r7, #32]
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800ec60:	6a3b      	ldr	r3, [r7, #32]
 800ec62:	3b04      	subs	r3, #4
 800ec64:	623b      	str	r3, [r7, #32]
  index = 12;
 800ec66:	230c      	movs	r3, #12
 800ec68:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800ec6a:	e027      	b.n	800ecbc <JPEG_Set_Huff_DHTMem+0x25c>
 800ec6c:	0802bb94 	.word	0x0802bb94
 800ec70:	0802bc48 	.word	0x0802bc48
 800ec74:	0802bb5c 	.word	0x0802bb5c
 800ec78:	0802bb78 	.word	0x0802bb78
 800ec7c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ec80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec82:	3301      	adds	r3, #1
 800ec84:	693a      	ldr	r2, [r7, #16]
 800ec86:	5cd3      	ldrb	r3, [r2, r3]
 800ec88:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800ec8a:	6939      	ldr	r1, [r7, #16]
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	440b      	add	r3, r1
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ec94:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ec96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec98:	3b01      	subs	r3, #1
 800ec9a:	6939      	ldr	r1, [r7, #16]
 800ec9c:	5ccb      	ldrb	r3, [r1, r3]
 800ec9e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800eca0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800eca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eca4:	3a02      	subs	r2, #2
 800eca6:	6939      	ldr	r1, [r7, #16]
 800eca8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ecaa:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ecac:	6a3b      	ldr	r3, [r7, #32]
 800ecae:	601a      	str	r2, [r3, #0]
    address--;
 800ecb0:	6a3b      	ldr	r3, [r7, #32]
 800ecb2:	3b04      	subs	r3, #4
 800ecb4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ecb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb8:	3b04      	subs	r3, #4
 800ecba:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800ecbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbe:	2b03      	cmp	r3, #3
 800ecc0:	d8de      	bhi.n	800ec80 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ecca:	33dc      	adds	r3, #220	; 0xdc
 800eccc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800ecce:	6a3b      	ldr	r3, [r7, #32]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	7c5b      	ldrb	r3, [r3, #17]
 800ecda:	061a      	lsls	r2, r3, #24
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	431a      	orrs	r2, r3
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	7c1b      	ldrb	r3, [r3, #16]
 800ece4:	041b      	lsls	r3, r3, #16
 800ece6:	4313      	orrs	r3, r2
 800ece8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800ecea:	6a3b      	ldr	r3, [r7, #32]
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ecf8:	33e8      	adds	r3, #232	; 0xe8
 800ecfa:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800ecfc:	6a3b      	ldr	r3, [r7, #32]
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	4b6d      	ldr	r3, [pc, #436]	; (800eeb8 <JPEG_Set_Huff_DHTMem+0x458>)
 800ed02:	4013      	ands	r3, r2
 800ed04:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	7edb      	ldrb	r3, [r3, #27]
 800ed0a:	021a      	lsls	r2, r3, #8
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	693a      	ldr	r2, [r7, #16]
 800ed12:	7e92      	ldrb	r2, [r2, #26]
 800ed14:	4313      	orrs	r3, r2
 800ed16:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ed18:	6a3b      	ldr	r3, [r7, #32]
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800ed1e:	6a3b      	ldr	r3, [r7, #32]
 800ed20:	3b04      	subs	r3, #4
 800ed22:	623b      	str	r3, [r7, #32]
  index = 8;
 800ed24:	2308      	movs	r3, #8
 800ed26:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800ed28:	e021      	b.n	800ed6e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	693a      	ldr	r2, [r7, #16]
 800ed30:	4413      	add	r3, r2
 800ed32:	7c1b      	ldrb	r3, [r3, #16]
 800ed34:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800ed36:	6939      	ldr	r1, [r7, #16]
 800ed38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3a:	440b      	add	r3, r1
 800ed3c:	3310      	adds	r3, #16
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ed42:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ed44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed46:	3b01      	subs	r3, #1
 800ed48:	6939      	ldr	r1, [r7, #16]
 800ed4a:	440b      	add	r3, r1
 800ed4c:	7c1b      	ldrb	r3, [r3, #16]
 800ed4e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800ed50:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800ed52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed54:	3a02      	subs	r2, #2
 800ed56:	6939      	ldr	r1, [r7, #16]
 800ed58:	440a      	add	r2, r1
 800ed5a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ed5c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ed5e:	6a3b      	ldr	r3, [r7, #32]
 800ed60:	601a      	str	r2, [r3, #0]
    address--;
 800ed62:	6a3b      	ldr	r3, [r7, #32]
 800ed64:	3b04      	subs	r3, #4
 800ed66:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ed68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6a:	3b04      	subs	r3, #4
 800ed6c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800ed6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed70:	2b03      	cmp	r3, #3
 800ed72:	d8da      	bhi.n	800ed2a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ed7c:	33e8      	adds	r3, #232	; 0xe8
 800ed7e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800ed80:	6a3b      	ldr	r3, [r7, #32]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	785b      	ldrb	r3, [r3, #1]
 800ed8c:	061a      	lsls	r2, r3, #24
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	431a      	orrs	r2, r3
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	041b      	lsls	r3, r3, #16
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ed9c:	6a3b      	ldr	r3, [r7, #32]
 800ed9e:	68fa      	ldr	r2, [r7, #12]
 800eda0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800edaa:	33f8      	adds	r3, #248	; 0xf8
 800edac:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800edae:	6a3b      	ldr	r3, [r7, #32]
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	4b41      	ldr	r3, [pc, #260]	; (800eeb8 <JPEG_Set_Huff_DHTMem+0x458>)
 800edb4:	4013      	ands	r3, r2
 800edb6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	7bdb      	ldrb	r3, [r3, #15]
 800edbc:	021a      	lsls	r2, r3, #8
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	4313      	orrs	r3, r2
 800edc2:	69ba      	ldr	r2, [r7, #24]
 800edc4:	7b92      	ldrb	r2, [r2, #14]
 800edc6:	4313      	orrs	r3, r2
 800edc8:	60fb      	str	r3, [r7, #12]
  *address = value;
 800edca:	6a3b      	ldr	r3, [r7, #32]
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800edd0:	6a3b      	ldr	r3, [r7, #32]
 800edd2:	3b04      	subs	r3, #4
 800edd4:	623b      	str	r3, [r7, #32]
  index = 12;
 800edd6:	230c      	movs	r3, #12
 800edd8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800edda:	e01d      	b.n	800ee18 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	3301      	adds	r3, #1
 800ede0:	69ba      	ldr	r2, [r7, #24]
 800ede2:	5cd3      	ldrb	r3, [r2, r3]
 800ede4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800ede6:	69b9      	ldr	r1, [r7, #24]
 800ede8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edea:	440b      	add	r3, r1
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800edf0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	3b01      	subs	r3, #1
 800edf6:	69b9      	ldr	r1, [r7, #24]
 800edf8:	5ccb      	ldrb	r3, [r1, r3]
 800edfa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800edfc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800edfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee00:	3a02      	subs	r2, #2
 800ee02:	69b9      	ldr	r1, [r7, #24]
 800ee04:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ee06:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ee08:	6a3b      	ldr	r3, [r7, #32]
 800ee0a:	601a      	str	r2, [r3, #0]
    address--;
 800ee0c:	6a3b      	ldr	r3, [r7, #32]
 800ee0e:	3b04      	subs	r3, #4
 800ee10:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ee12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee14:	3b04      	subs	r3, #4
 800ee16:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800ee18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1a:	2b03      	cmp	r3, #3
 800ee1c:	d8de      	bhi.n	800eddc <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ee26:	33f8      	adds	r3, #248	; 0xf8
 800ee28:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800ee2a:	6a3b      	ldr	r3, [r7, #32]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	7c5b      	ldrb	r3, [r3, #17]
 800ee36:	061a      	lsls	r2, r3, #24
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	431a      	orrs	r2, r3
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	7c1b      	ldrb	r3, [r3, #16]
 800ee40:	041b      	lsls	r3, r3, #16
 800ee42:	4313      	orrs	r3, r2
 800ee44:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800ee46:	6a3b      	ldr	r3, [r7, #32]
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ee54:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800ee58:	623b      	str	r3, [r7, #32]
  index = 160;
 800ee5a:	23a0      	movs	r3, #160	; 0xa0
 800ee5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800ee5e:	e021      	b.n	800eea4 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	3301      	adds	r3, #1
 800ee64:	69ba      	ldr	r2, [r7, #24]
 800ee66:	4413      	add	r3, r2
 800ee68:	7c1b      	ldrb	r3, [r3, #16]
 800ee6a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ee6c:	69b9      	ldr	r1, [r7, #24]
 800ee6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee70:	440b      	add	r3, r1
 800ee72:	3310      	adds	r3, #16
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ee78:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ee7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	69b9      	ldr	r1, [r7, #24]
 800ee80:	440b      	add	r3, r1
 800ee82:	7c1b      	ldrb	r3, [r3, #16]
 800ee84:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ee86:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800ee88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee8a:	3a02      	subs	r2, #2
 800ee8c:	69b9      	ldr	r1, [r7, #24]
 800ee8e:	440a      	add	r2, r1
 800ee90:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ee92:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ee94:	6a3b      	ldr	r3, [r7, #32]
 800ee96:	601a      	str	r2, [r3, #0]
    address--;
 800ee98:	6a3b      	ldr	r3, [r7, #32]
 800ee9a:	3b04      	subs	r3, #4
 800ee9c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea0:	3b04      	subs	r3, #4
 800eea2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800eea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea6:	2b03      	cmp	r3, #3
 800eea8:	d8da      	bhi.n	800ee60 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800eeaa:	bf00      	nop
 800eeac:	bf00      	nop
 800eeae:	372c      	adds	r7, #44	; 0x2c
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr
 800eeb8:	ffff0000 	.word	0xffff0000

0800eebc <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eec8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eed4:	f003 0303 	and.w	r3, r3, #3
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d108      	bne.n	800eeee <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	685a      	ldr	r2, [r3, #4]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f042 0208 	orr.w	r2, r2, #8
 800eeea:	605a      	str	r2, [r3, #4]
 800eeec:	e007      	b.n	800eefe <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	685a      	ldr	r2, [r3, #4]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f022 0208 	bic.w	r2, r2, #8
 800eefc:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f022 0201 	bic.w	r2, r2, #1
 800ef0c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800ef1c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef2c:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ef3c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ef4c:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f042 0201 	orr.w	r2, r2, #1
 800ef5c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef62:	f003 030c 	and.w	r3, r3, #12
 800ef66:	2b08      	cmp	r3, #8
 800ef68:	d108      	bne.n	800ef7c <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 800ef78:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800ef7a:	e00d      	b.n	800ef98 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef80:	f003 030c 	and.w	r3, r3, #12
 800ef84:	2b0c      	cmp	r3, #12
 800ef86:	d107      	bne.n	800ef98 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ef96:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ef98:	bf00      	nop
 800ef9a:	370c      	adds	r7, #12
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efb0:	f003 0303 	and.w	r3, r3, #3
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	d125      	bne.n	800f004 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d01e      	beq.n	800f004 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	3304      	adds	r3, #4
 800efca:	4619      	mov	r1, r3
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7fe ff55 	bl	800de7c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	3304      	adds	r3, #4
 800efdc:	4619      	mov	r1, r3
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7f2 fe22 	bl	8001c28 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eff2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f002:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d116      	bne.n	800f03e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f016:	f003 0302 	and.w	r3, r3, #2
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d004      	beq.n	800f028 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800f01e:	2108      	movs	r1, #8
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 f988 	bl	800f336 <JPEG_ReadInputData>
 800f026:	e00a      	b.n	800f03e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f02e:	f003 0304 	and.w	r3, r3, #4
 800f032:	2b00      	cmp	r3, #0
 800f034:	d003      	beq.n	800f03e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800f036:	2101      	movs	r1, #1
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 f97c 	bl	800f336 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f046:	2b00      	cmp	r3, #0
 800f048:	d116      	bne.n	800f078 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f050:	f003 0308 	and.w	r3, r3, #8
 800f054:	2b00      	cmp	r3, #0
 800f056:	d004      	beq.n	800f062 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800f058:	2108      	movs	r1, #8
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f000 f864 	bl	800f128 <JPEG_StoreOutputData>
 800f060:	e00a      	b.n	800f078 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f068:	f003 0310 	and.w	r3, r3, #16
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800f070:	2101      	movs	r1, #1
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 f858 	bl	800f128 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f07e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f082:	2b20      	cmp	r3, #32
 800f084:	d14b      	bne.n	800f11e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f022 0201 	bic.w	r2, r2, #1
 800f094:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f09a:	f003 030c 	and.w	r3, r3, #12
 800f09e:	2b08      	cmp	r3, #8
 800f0a0:	d107      	bne.n	800f0b2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f0b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800f0c0:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00a      	beq.n	800f0e0 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	69d9      	ldr	r1, [r3, #28]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7f2 fe77 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0e4:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0ea:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f003 0303 	and.w	r3, r3, #3
 800f108:	2b02      	cmp	r3, #2
 800f10a:	d103      	bne.n	800f114 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f7f2 fec3 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
 800f112:	e002      	b.n	800f11a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7ff f910 	bl	800e33a <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800f11a:	2301      	movs	r3, #1
 800f11c:	e000      	b.n	800f120 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3710      	adds	r7, #16
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b086      	sub	sp, #24
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	009b      	lsls	r3, r3, #2
 800f13e:	440b      	add	r3, r1
 800f140:	429a      	cmp	r2, r3
 800f142:	d34b      	bcc.n	800f1dc <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800f144:	2300      	movs	r3, #0
 800f146:	617b      	str	r3, [r7, #20]
 800f148:	e031      	b.n	800f1ae <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f150:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	69da      	ldr	r2, [r3, #28]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f15a:	4413      	add	r3, r2
 800f15c:	68ba      	ldr	r2, [r7, #8]
 800f15e:	b2d2      	uxtb	r2, r2
 800f160:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	0a19      	lsrs	r1, r3, #8
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	69da      	ldr	r2, [r3, #28]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f16e:	3301      	adds	r3, #1
 800f170:	4413      	add	r3, r2
 800f172:	b2ca      	uxtb	r2, r1
 800f174:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	0c19      	lsrs	r1, r3, #16
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	69da      	ldr	r2, [r3, #28]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f182:	3302      	adds	r3, #2
 800f184:	4413      	add	r3, r2
 800f186:	b2ca      	uxtb	r2, r1
 800f188:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	0e19      	lsrs	r1, r3, #24
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	69da      	ldr	r2, [r3, #28]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f196:	3303      	adds	r3, #3
 800f198:	4413      	add	r3, r2
 800f19a:	b2ca      	uxtb	r2, r1
 800f19c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a2:	1d1a      	adds	r2, r3, #4
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	617b      	str	r3, [r7, #20]
 800f1ae:	697a      	ldr	r2, [r7, #20]
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d3c9      	bcc.n	800f14a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	f040 80b5 	bne.w	800f32e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	69d9      	ldr	r1, [r3, #28]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7f2 fdfa 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800f1da:	e0a8      	b.n	800f32e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	f240 80a2 	bls.w	800f32e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	089b      	lsrs	r3, r3, #2
 800f1f6:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	617b      	str	r3, [r7, #20]
 800f1fc:	e031      	b.n	800f262 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f204:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	69da      	ldr	r2, [r3, #28]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20e:	4413      	add	r3, r2
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	b2d2      	uxtb	r2, r2
 800f214:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	0a19      	lsrs	r1, r3, #8
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	69da      	ldr	r2, [r3, #28]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f222:	3301      	adds	r3, #1
 800f224:	4413      	add	r3, r2
 800f226:	b2ca      	uxtb	r2, r1
 800f228:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	0c19      	lsrs	r1, r3, #16
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	69da      	ldr	r2, [r3, #28]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f236:	3302      	adds	r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	b2ca      	uxtb	r2, r1
 800f23c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	0e19      	lsrs	r1, r3, #24
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	69da      	ldr	r2, [r3, #28]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24a:	3303      	adds	r3, #3
 800f24c:	4413      	add	r3, r2
 800f24e:	b2ca      	uxtb	r2, r1
 800f250:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f256:	1d1a      	adds	r2, r3, #4
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	3301      	adds	r3, #1
 800f260:	617b      	str	r3, [r7, #20]
 800f262:	697a      	ldr	r2, [r7, #20]
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	429a      	cmp	r2, r3
 800f268:	d3c9      	bcc.n	800f1fe <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f272:	429a      	cmp	r2, r3
 800f274:	d10b      	bne.n	800f28e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	69d9      	ldr	r1, [r3, #28]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27e:	461a      	mov	r2, r3
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f7f2 fda1 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f28c:	e04f      	b.n	800f32e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f296:	1ad3      	subs	r3, r2, r3
 800f298:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2a0:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	617b      	str	r3, [r7, #20]
 800f2a6:	e015      	b.n	800f2d4 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	f003 0303 	and.w	r3, r3, #3
 800f2ae:	00db      	lsls	r3, r3, #3
 800f2b0:	68ba      	ldr	r2, [r7, #8]
 800f2b2:	fa22 f103 	lsr.w	r1, r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	69da      	ldr	r2, [r3, #28]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2be:	4413      	add	r3, r2
 800f2c0:	b2ca      	uxtb	r2, r1
 800f2c2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	617b      	str	r3, [r7, #20]
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d3e5      	bcc.n	800f2a8 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	69d9      	ldr	r1, [r3, #28]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f7f2 fd6e 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	625a      	str	r2, [r3, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f1c3 0304 	rsb	r3, r3, #4
 800f2f8:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	617b      	str	r3, [r7, #20]
 800f2fe:	e013      	b.n	800f328 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	00db      	lsls	r3, r3, #3
 800f304:	68ba      	ldr	r2, [r7, #8]
 800f306:	fa22 f103 	lsr.w	r1, r2, r3
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	69da      	ldr	r2, [r3, #28]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f312:	4413      	add	r3, r2
 800f314:	b2ca      	uxtb	r2, r1
 800f316:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31c:	1c5a      	adds	r2, r3, #1
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	3301      	adds	r3, #1
 800f326:	617b      	str	r3, [r7, #20]
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	2b03      	cmp	r3, #3
 800f32c:	d9e8      	bls.n	800f300 <JPEG_StoreOutputData+0x1d8>
}
 800f32e:	bf00      	nop
 800f330:	3718      	adds	r7, #24
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}

0800f336 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800f336:	b580      	push	{r7, lr}
 800f338:	b088      	sub	sp, #32
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
 800f33e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800f340:	2300      	movs	r3, #0
 800f342:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d002      	beq.n	800f352 <JPEG_ReadInputData+0x1c>
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d104      	bne.n	800f35c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800f352:	2101      	movs	r1, #1
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7fe fe89 	bl	800e06c <HAL_JPEG_Pause>
 800f35a:	e028      	b.n	800f3ae <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6a1b      	ldr	r3, [r3, #32]
 800f364:	429a      	cmp	r2, r3
 800f366:	d906      	bls.n	800f376 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6a1b      	ldr	r3, [r3, #32]
 800f370:	1ad3      	subs	r3, r2, r3
 800f372:	61fb      	str	r3, [r7, #28]
 800f374:	e01b      	b.n	800f3ae <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6a1b      	ldr	r3, [r3, #32]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d115      	bne.n	800f3ae <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	4619      	mov	r1, r3
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7f2 fce9 	bl	8001d60 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f392:	2b04      	cmp	r3, #4
 800f394:	d905      	bls.n	800f3a2 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f39a:	f023 0203 	bic.w	r2, r3, #3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ac:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	f040 809f 	bne.w	800f4fa <JPEG_ReadInputData+0x1c4>
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f000 809b 	beq.w	800f4fa <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	089b      	lsrs	r3, r3, #2
 800f3c8:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800f3ca:	693a      	ldr	r2, [r7, #16]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d335      	bcc.n	800f43e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	61bb      	str	r3, [r7, #24]
 800f3d6:	e02d      	b.n	800f434 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6a1b      	ldr	r3, [r3, #32]
 800f3dc:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	699a      	ldr	r2, [r3, #24]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	699a      	ldr	r2, [r3, #24]
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	4413      	add	r3, r2
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800f3f8:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6999      	ldr	r1, [r3, #24]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	3302      	adds	r3, #2
 800f404:	440b      	add	r3, r1
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800f40a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	699a      	ldr	r2, [r3, #24]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	3303      	adds	r3, #3
 800f416:	4413      	add	r3, r2
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800f420:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800f422:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6a1b      	ldr	r3, [r3, #32]
 800f428:	1d1a      	adds	r2, r3, #4
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	3301      	adds	r3, #1
 800f432:	61bb      	str	r3, [r7, #24]
 800f434:	69ba      	ldr	r2, [r7, #24]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	429a      	cmp	r2, r3
 800f43a:	d3cd      	bcc.n	800f3d8 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800f43c:	e05d      	b.n	800f4fa <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d035      	beq.n	800f4b0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800f444:	2300      	movs	r3, #0
 800f446:	61bb      	str	r3, [r7, #24]
 800f448:	e02d      	b.n	800f4a6 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6a1b      	ldr	r3, [r3, #32]
 800f44e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	699a      	ldr	r2, [r3, #24]
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	4413      	add	r3, r2
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	699a      	ldr	r2, [r3, #24]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	3301      	adds	r3, #1
 800f464:	4413      	add	r3, r2
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800f46a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6999      	ldr	r1, [r3, #24]
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	3302      	adds	r3, #2
 800f476:	440b      	add	r3, r1
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800f47c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	699a      	ldr	r2, [r3, #24]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	3303      	adds	r3, #3
 800f488:	4413      	add	r3, r2
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800f492:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800f494:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6a1b      	ldr	r3, [r3, #32]
 800f49a:	1d1a      	adds	r2, r3, #4
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	61bb      	str	r3, [r7, #24]
 800f4a6:	69ba      	ldr	r2, [r7, #24]
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d3cd      	bcc.n	800f44a <JPEG_ReadInputData+0x114>
}
 800f4ae:	e024      	b.n	800f4fa <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	61bb      	str	r3, [r7, #24]
 800f4b8:	e017      	b.n	800f4ea <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	699a      	ldr	r2, [r3, #24]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6a1b      	ldr	r3, [r3, #32]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	f003 0303 	and.w	r3, r3, #3
 800f4ce:	00db      	lsls	r3, r3, #3
 800f4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f4d4:	697a      	ldr	r2, [r7, #20]
 800f4d6:	4313      	orrs	r3, r2
 800f4d8:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	1c5a      	adds	r2, r3, #1
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800f4e4:	69bb      	ldr	r3, [r7, #24]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	61bb      	str	r3, [r7, #24]
 800f4ea:	69ba      	ldr	r2, [r7, #24]
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d3e3      	bcc.n	800f4ba <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	697a      	ldr	r2, [r7, #20]
 800f4f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f4fa:	bf00      	nop
 800f4fc:	3720      	adds	r7, #32
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
	...

0800f504 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800f504:	b590      	push	{r4, r7, lr}
 800f506:	b087      	sub	sp, #28
 800f508:	af02      	add	r7, sp, #8
 800f50a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f512:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f51a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f520:	68fa      	ldr	r2, [r7, #12]
 800f522:	429a      	cmp	r2, r3
 800f524:	d804      	bhi.n	800f530 <JPEG_DMA_StartProcess+0x2c>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f52a:	68ba      	ldr	r2, [r7, #8]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d901      	bls.n	800f534 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800f530:	2301      	movs	r3, #1
 800f532:	e074      	b.n	800f61e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f538:	4a3b      	ldr	r2, [pc, #236]	; (800f628 <JPEG_DMA_StartProcess+0x124>)
 800f53a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f540:	4a3a      	ldr	r2, [pc, #232]	; (800f62c <JPEG_DMA_StartProcess+0x128>)
 800f542:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f548:	4a39      	ldr	r2, [pc, #228]	; (800f630 <JPEG_DMA_StartProcess+0x12c>)
 800f54a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f550:	4a36      	ldr	r2, [pc, #216]	; (800f62c <JPEG_DMA_StartProcess+0x128>)
 800f552:	655a      	str	r2, [r3, #84]	; 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f558:	4a36      	ldr	r2, [pc, #216]	; (800f634 <JPEG_DMA_StartProcess+0x130>)
 800f55a:	659a      	str	r2, [r3, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d002      	beq.n	800f568 <JPEG_DMA_StartProcess+0x64>
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d107      	bne.n	800f578 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f56c:	f043 0204 	orr.w	r2, r3, #4
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800f574:	2301      	movs	r3, #1
 800f576:	e052      	b.n	800f61e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f580:	68f9      	ldr	r1, [r7, #12]
 800f582:	fbb3 f1f1 	udiv	r1, r3, r1
 800f586:	68f8      	ldr	r0, [r7, #12]
 800f588:	fb00 f101 	mul.w	r1, r0, r1
 800f58c:	1a5b      	subs	r3, r3, r1
 800f58e:	1ad2      	subs	r2, r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	629a      	str	r2, [r3, #40]	; 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f59c:	68b9      	ldr	r1, [r7, #8]
 800f59e:	fbb3 f1f1 	udiv	r1, r3, r1
 800f5a2:	68b8      	ldr	r0, [r7, #8]
 800f5a4:	fb00 f101 	mul.w	r1, r0, r1
 800f5a8:	1a5b      	subs	r3, r3, r1
 800f5aa:	1ad2      	subs	r2, r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	62da      	str	r2, [r3, #44]	; 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	3344      	adds	r3, #68	; 0x44
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	69db      	ldr	r3, [r3, #28]
 800f5c0:	461c      	mov	r4, r3
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	9200      	str	r2, [sp, #0]
 800f5ca:	4622      	mov	r2, r4
 800f5cc:	f000 ff7a 	bl	80104c4 <HAL_MDMA_Start_IT>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d007      	beq.n	800f5e6 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5da:	f043 0204 	orr.w	r2, r3, #4
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	e01b      	b.n	800f61e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	699b      	ldr	r3, [r3, #24]
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	3340      	adds	r3, #64	; 0x40
 800f5f6:	461c      	mov	r4, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5fc:	2201      	movs	r2, #1
 800f5fe:	9200      	str	r2, [sp, #0]
 800f600:	4622      	mov	r2, r4
 800f602:	f000 ff5f 	bl	80104c4 <HAL_MDMA_Start_IT>
 800f606:	4603      	mov	r3, r0
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d007      	beq.n	800f61c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f610:	f043 0204 	orr.w	r2, r3, #4
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800f618:	2301      	movs	r3, #1
 800f61a:	e000      	b.n	800f61e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3714      	adds	r7, #20
 800f622:	46bd      	mov	sp, r7
 800f624:	bd90      	pop	{r4, r7, pc}
 800f626:	bf00      	nop
 800f628:	0800f937 	.word	0x0800f937
 800f62c:	0800fb25 	.word	0x0800fb25
 800f630:	0800fa63 	.word	0x0800fa63
 800f634:	0800fb75 	.word	0x0800fb75

0800f638 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f644:	f003 0303 	and.w	r3, r3, #3
 800f648:	2b02      	cmp	r3, #2
 800f64a:	d125      	bne.n	800f698 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f656:	2b00      	cmp	r3, #0
 800f658:	d01e      	beq.n	800f698 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	3304      	adds	r3, #4
 800f65e:	4619      	mov	r1, r3
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7fe fc0b 	bl	800de7c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2200      	movs	r2, #0
 800f66a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3304      	adds	r3, #4
 800f670:	4619      	mov	r1, r3
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7f2 fad8 	bl	8001c28 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f686:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f696:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f69e:	f003 0320 	and.w	r3, r3, #32
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d039      	beq.n	800f71a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6aa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	655a      	str	r2, [r3, #84]	; 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f022 0201 	bic.w	r2, r2, #1
 800f6c0:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f6d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800f6e0:	639a      	str	r2, [r3, #56]	; 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	2b02      	cmp	r3, #2
 800f6ee:	d104      	bne.n	800f6fa <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 ffc1 	bl	801067c <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b02      	cmp	r3, #2
 800f706:	d105      	bne.n	800f714 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f70c:	4618      	mov	r0, r3
 800f70e:	f000 ffb5 	bl	801067c <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800f712:	e002      	b.n	800f71a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f804 	bl	800f722 <JPEG_DMA_EndProcess>
}
 800f71a:	bf00      	nop
 800f71c:	3708      	adds	r7, #8
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b084      	sub	sp, #16
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	695b      	ldr	r3, [r3, #20]
 800f736:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800f73a:	1ad2      	subs	r2, r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f748:	429a      	cmp	r2, r3
 800f74a:	d10a      	bne.n	800f762 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	69d9      	ldr	r1, [r3, #28]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f754:	461a      	mov	r2, r3
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f7f2 fb36 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f768:	f003 0310 	and.w	r3, r3, #16
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d134      	bne.n	800f7da <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f774:	2b00      	cmp	r3, #0
 800f776:	d00a      	beq.n	800f78e <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	69d9      	ldr	r1, [r3, #28]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f780:	461a      	mov	r2, r3
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f7f2 fb20 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f022 0201 	bic.w	r2, r2, #1
 800f79c:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7a2:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7a8:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f003 0303 	and.w	r3, r3, #3
 800f7c6:	2b02      	cmp	r3, #2
 800f7c8:	d103      	bne.n	800f7d2 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f7f2 fb64 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800f7d0:	e00c      	b.n	800f7ec <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7fe fdb1 	bl	800e33a <HAL_JPEG_EncodeCpltCallback>
}
 800f7d8:	e008      	b.n	800f7ec <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d102      	bne.n	800f7ec <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f000 f804 	bl	800f7f4 <JPEG_DMA_PollResidualData>
}
 800f7ec:	bf00      	nop
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b086      	sub	sp, #24
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800f7fc:	2310      	movs	r3, #16
 800f7fe:	617b      	str	r3, [r7, #20]
 800f800:	e04f      	b.n	800f8a2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d146      	bne.n	800f89c <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f814:	f003 0310 	and.w	r3, r3, #16
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d03f      	beq.n	800f89c <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f822:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	69da      	ldr	r2, [r3, #28]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f82c:	4413      	add	r3, r2
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	b2d2      	uxtb	r2, r2
 800f832:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	0a19      	lsrs	r1, r3, #8
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	69da      	ldr	r2, [r3, #28]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f840:	3301      	adds	r3, #1
 800f842:	4413      	add	r3, r2
 800f844:	b2ca      	uxtb	r2, r1
 800f846:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	0c19      	lsrs	r1, r3, #16
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	69da      	ldr	r2, [r3, #28]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f854:	3302      	adds	r3, #2
 800f856:	4413      	add	r3, r2
 800f858:	b2ca      	uxtb	r2, r1
 800f85a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	0e19      	lsrs	r1, r3, #24
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	69da      	ldr	r2, [r3, #28]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f868:	3303      	adds	r3, #3
 800f86a:	4413      	add	r3, r2
 800f86c:	b2ca      	uxtb	r2, r1
 800f86e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f874:	1d1a      	adds	r2, r3, #4
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f882:	429a      	cmp	r2, r3
 800f884:	d10a      	bne.n	800f89c <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	69d9      	ldr	r1, [r3, #28]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88e:	461a      	mov	r2, r3
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7f2 fa99 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2200      	movs	r2, #0
 800f89a:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	3b01      	subs	r3, #1
 800f8a0:	617b      	str	r3, [r7, #20]
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1ac      	bne.n	800f802 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8ac:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8b4:	f003 0310 	and.w	r3, r3, #16
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d004      	beq.n	800f8c6 <JPEG_DMA_PollResidualData+0xd2>
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d133      	bne.n	800f92e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f022 0201 	bic.w	r2, r2, #1
 800f8d4:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d00a      	beq.n	800f8f4 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	69d9      	ldr	r1, [r3, #28]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7f2 fa6d 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8f8:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8fe:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2201      	movs	r2, #1
 800f912:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	f003 0303 	and.w	r3, r3, #3
 800f91c:	2b02      	cmp	r3, #2
 800f91e:	d103      	bne.n	800f928 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7f2 fab9 	bl	8001e98 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800f926:	e002      	b.n	800f92e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7fe fd06 	bl	800e33a <HAL_JPEG_EncodeCpltCallback>
}
 800f92e:	bf00      	nop
 800f930:	3718      	adds	r7, #24
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800f936:	b590      	push	{r4, r7, lr}
 800f938:	b087      	sub	sp, #28
 800f93a:	af02      	add	r7, sp, #8
 800f93c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f942:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f952:	631a      	str	r2, [r3, #48]	; 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f958:	f248 030c 	movw	r3, #32780	; 0x800c
 800f95c:	4013      	ands	r3, r2
 800f95e:	2b0c      	cmp	r3, #12
 800f960:	d17c      	bne.n	800fa5c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f968:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800f978:	1ad2      	subs	r2, r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	6a1b      	ldr	r3, [r3, #32]
 800f982:	4619      	mov	r1, r3
 800f984:	68f8      	ldr	r0, [r7, #12]
 800f986:	f7f2 f9eb 	bl	8001d60 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f98e:	68ba      	ldr	r2, [r7, #8]
 800f990:	429a      	cmp	r2, r3
 800f992:	d81f      	bhi.n	800f9d4 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d10d      	bne.n	800f9b6 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f99e:	f043 0204 	orr.w	r2, r3, #4
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2206      	movs	r2, #6
 800f9aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800f9ae:	68f8      	ldr	r0, [r7, #12]
 800f9b0:	f7f2 fa6a 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800f9b4:	e052      	b.n	800fa5c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9be:	68b9      	ldr	r1, [r7, #8]
 800f9c0:	fbb3 f1f1 	udiv	r1, r3, r1
 800f9c4:	68b8      	ldr	r0, [r7, #8]
 800f9c6:	fb00 f101 	mul.w	r1, r0, r1
 800f9ca:	1a5b      	subs	r3, r3, r1
 800f9cc:	1ad2      	subs	r2, r2, r3
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	629a      	str	r2, [r3, #40]	; 0x28
 800f9d2:	e010      	b.n	800f9f6 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00c      	beq.n	800f9f6 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9e0:	f003 0303 	and.w	r3, r3, #3
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d006      	beq.n	800f9f6 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ec:	089b      	lsrs	r3, r3, #2
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	009a      	lsls	r2, r3, #2
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	629a      	str	r2, [r3, #40]	; 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d124      	bne.n	800fa4c <JPEG_MDMAInCpltCallback+0x116>
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d020      	beq.n	800fa4c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	699b      	ldr	r3, [r3, #24]
 800fa12:	4619      	mov	r1, r3
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	3340      	adds	r3, #64	; 0x40
 800fa1a:	461c      	mov	r4, r3
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa20:	2201      	movs	r2, #1
 800fa22:	9200      	str	r2, [sp, #0]
 800fa24:	4622      	mov	r2, r4
 800fa26:	f000 fd4d 	bl	80104c4 <HAL_MDMA_Start_IT>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d00d      	beq.n	800fa4c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa34:	f043 0204 	orr.w	r2, r3, #4
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2206      	movs	r2, #6
 800fa40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f7f2 fa1f 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800fa4a:	e007      	b.n	800fa5c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fa5a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd90      	pop	{r4, r7, pc}

0800fa62 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800fa62:	b590      	push	{r4, r7, lr}
 800fa64:	b087      	sub	sp, #28
 800fa66:	af02      	add	r7, sp, #8
 800fa68:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa6e:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800fa7e:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa84:	f248 030c 	movw	r3, #32780	; 0x800c
 800fa88:	4013      	ands	r3, r2
 800fa8a:	2b0c      	cmp	r3, #12
 800fa8c:	d147      	bne.n	800fb1e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa94:	f003 0320 	and.w	r3, r3, #32
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d138      	bne.n	800fb0e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	695b      	ldr	r3, [r3, #20]
 800faa6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800faaa:	1ad2      	subs	r2, r2, r3
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	69d9      	ldr	r1, [r3, #28]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab8:	461a      	mov	r2, r3
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f7f2 f984 	bl	8001dc8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d120      	bne.n	800fb0e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	3344      	adds	r3, #68	; 0x44
 800fad6:	4619      	mov	r1, r3
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	69db      	ldr	r3, [r3, #28]
 800fadc:	461c      	mov	r4, r3
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fae2:	2201      	movs	r2, #1
 800fae4:	9200      	str	r2, [sp, #0]
 800fae6:	4622      	mov	r2, r4
 800fae8:	f000 fcec 	bl	80104c4 <HAL_MDMA_Start_IT>
 800faec:	4603      	mov	r3, r0
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d00d      	beq.n	800fb0e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faf6:	f043 0204 	orr.w	r2, r3, #4
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2206      	movs	r2, #6
 800fb02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800fb06:	68f8      	ldr	r0, [r7, #12]
 800fb08:	f7f2 f9be 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800fb0c:	e007      	b.n	800fb1e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fb1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

}
 800fb1e:	3714      	adds	r7, #20
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd90      	pop	{r4, r7, pc}

0800fb24 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb30:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f022 0201 	bic.w	r2, r2, #1
 800fb40:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800fb50:	631a      	str	r2, [r3, #48]	; 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2201      	movs	r2, #1
 800fb56:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb5e:	f043 0204 	orr.w	r2, r3, #4
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f7f2 f98e 	bl	8001e88 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800fb6c:	bf00      	nop
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb80:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d002      	beq.n	800fb94 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f7ff fdc7 	bl	800f722 <JPEG_DMA_EndProcess>
  }
}
 800fb94:	bf00      	nop
 800fb96:	3710      	adds	r7, #16
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b08b      	sub	sp, #44	; 0x2c
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800fba4:	2300      	movs	r3, #0
 800fba6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	3350      	adds	r3, #80	; 0x50
 800fbae:	61bb      	str	r3, [r7, #24]

  i = 0;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800fbb4:	e042      	b.n	800fc3c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800fbb6:	69bb      	ldr	r3, [r7, #24]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	61fb      	str	r3, [r7, #28]
 800fbc0:	e033      	b.n	800fc2a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	00db      	lsls	r3, r3, #3
 800fbc6:	697a      	ldr	r2, [r7, #20]
 800fbc8:	fa22 f303 	lsr.w	r3, r2, r3
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d103      	bne.n	800fbde <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800fbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd8:	3364      	adds	r3, #100	; 0x64
 800fbda:	627b      	str	r3, [r7, #36]	; 0x24
 800fbdc:	e022      	b.n	800fc24 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	2264      	movs	r2, #100	; 0x64
 800fbe2:	fb02 f303 	mul.w	r3, r2, r3
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800fbea:	6a38      	ldr	r0, [r7, #32]
 800fbec:	69f9      	ldr	r1, [r7, #28]
 800fbee:	4401      	add	r1, r0
 800fbf0:	4818      	ldr	r0, [pc, #96]	; (800fc54 <JPEG_GetQuality+0xb8>)
 800fbf2:	5c41      	ldrb	r1, [r0, r1]
 800fbf4:	440a      	add	r2, r1
 800fbf6:	7812      	ldrb	r2, [r2, #0]
 800fbf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbfc:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2b64      	cmp	r3, #100	; 0x64
 800fc02:	d807      	bhi.n	800fc14 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800fc0a:	085b      	lsrs	r3, r3, #1
 800fc0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc0e:	4413      	add	r3, r2
 800fc10:	627b      	str	r3, [r7, #36]	; 0x24
 800fc12:	e007      	b.n	800fc24 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800fc14:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc20:	4413      	add	r3, r2
 800fc22:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	3301      	adds	r3, #1
 800fc28:	61fb      	str	r3, [r7, #28]
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	2b03      	cmp	r3, #3
 800fc2e:	d9c8      	bls.n	800fbc2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800fc30:	6a3b      	ldr	r3, [r7, #32]
 800fc32:	3304      	adds	r3, #4
 800fc34:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800fc36:	69bb      	ldr	r3, [r7, #24]
 800fc38:	3304      	adds	r3, #4
 800fc3a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800fc3c:	6a3b      	ldr	r3, [r7, #32]
 800fc3e:	2b3c      	cmp	r3, #60	; 0x3c
 800fc40:	d9b9      	bls.n	800fbb6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800fc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc44:	099b      	lsrs	r3, r3, #6
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	372c      	adds	r7, #44	; 0x2c
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop
 800fc54:	0802bcfc 	.word	0x0802bcfc

0800fc58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d101      	bne.n	800fc6a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800fc66:	2301      	movs	r3, #1
 800fc68:	e0bf      	b.n	800fdea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d106      	bne.n	800fc84 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f7f6 ffda 	bl	8006c38 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2202      	movs	r2, #2
 800fc88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	699a      	ldr	r2, [r3, #24]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800fc9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	6999      	ldr	r1, [r3, #24]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	685a      	ldr	r2, [r3, #4]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800fcb0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	691b      	ldr	r3, [r3, #16]
 800fcb6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	430a      	orrs	r2, r1
 800fcbe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	6899      	ldr	r1, [r3, #8]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681a      	ldr	r2, [r3, #0]
 800fcca:	4b4a      	ldr	r3, [pc, #296]	; (800fdf4 <HAL_LTDC_Init+0x19c>)
 800fccc:	400b      	ands	r3, r1
 800fcce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	695b      	ldr	r3, [r3, #20]
 800fcd4:	041b      	lsls	r3, r3, #16
 800fcd6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	6899      	ldr	r1, [r3, #8]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	699a      	ldr	r2, [r3, #24]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	431a      	orrs	r2, r3
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	430a      	orrs	r2, r1
 800fcec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	68d9      	ldr	r1, [r3, #12]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	4b3e      	ldr	r3, [pc, #248]	; (800fdf4 <HAL_LTDC_Init+0x19c>)
 800fcfa:	400b      	ands	r3, r1
 800fcfc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	69db      	ldr	r3, [r3, #28]
 800fd02:	041b      	lsls	r3, r3, #16
 800fd04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	68d9      	ldr	r1, [r3, #12]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6a1a      	ldr	r2, [r3, #32]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	431a      	orrs	r2, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	430a      	orrs	r2, r1
 800fd1a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	6919      	ldr	r1, [r3, #16]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	4b33      	ldr	r3, [pc, #204]	; (800fdf4 <HAL_LTDC_Init+0x19c>)
 800fd28:	400b      	ands	r3, r1
 800fd2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd30:	041b      	lsls	r3, r3, #16
 800fd32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	6919      	ldr	r1, [r3, #16]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	431a      	orrs	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	430a      	orrs	r2, r1
 800fd48:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	6959      	ldr	r1, [r3, #20]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	4b27      	ldr	r3, [pc, #156]	; (800fdf4 <HAL_LTDC_Init+0x19c>)
 800fd56:	400b      	ands	r3, r1
 800fd58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd5e:	041b      	lsls	r3, r3, #16
 800fd60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	6959      	ldr	r1, [r3, #20]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	431a      	orrs	r2, r3
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	430a      	orrs	r2, r1
 800fd76:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fd7e:	021b      	lsls	r3, r3, #8
 800fd80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800fd88:	041b      	lsls	r3, r3, #16
 800fd8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800fd9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	4313      	orrs	r3, r2
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800fdae:	431a      	orrs	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	430a      	orrs	r2, r1
 800fdb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f042 0206 	orr.w	r2, r2, #6
 800fdc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	699a      	ldr	r2, [r3, #24]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f042 0201 	orr.w	r2, r2, #1
 800fdd6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2200      	movs	r2, #0
 800fddc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2201      	movs	r2, #1
 800fde4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800fde8:	2300      	movs	r3, #0
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3710      	adds	r7, #16
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	f000f800 	.word	0xf000f800

0800fdf8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe0e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f003 0304 	and.w	r3, r3, #4
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d023      	beq.n	800fe62 <HAL_LTDC_IRQHandler+0x6a>
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	f003 0304 	and.w	r3, r3, #4
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d01e      	beq.n	800fe62 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f022 0204 	bic.w	r2, r2, #4
 800fe32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2204      	movs	r2, #4
 800fe3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fe42:	f043 0201 	orr.w	r2, r3, #1
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2204      	movs	r2, #4
 800fe50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f86f 	bl	800ff40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f003 0302 	and.w	r3, r3, #2
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d023      	beq.n	800feb4 <HAL_LTDC_IRQHandler+0xbc>
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	f003 0302 	and.w	r3, r3, #2
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d01e      	beq.n	800feb4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f022 0202 	bic.w	r2, r2, #2
 800fe84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	2202      	movs	r2, #2
 800fe8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fe94:	f043 0202 	orr.w	r2, r3, #2
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2204      	movs	r2, #4
 800fea2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2200      	movs	r2, #0
 800feaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 f846 	bl	800ff40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f003 0301 	and.w	r3, r3, #1
 800feba:	2b00      	cmp	r3, #0
 800febc:	d01b      	beq.n	800fef6 <HAL_LTDC_IRQHandler+0xfe>
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	f003 0301 	and.w	r3, r3, #1
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d016      	beq.n	800fef6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f022 0201 	bic.w	r2, r2, #1
 800fed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	2201      	movs	r2, #1
 800fede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2201      	movs	r2, #1
 800fee4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f7f4 fb19 	bl	8004528 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f003 0308 	and.w	r3, r3, #8
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d01b      	beq.n	800ff38 <HAL_LTDC_IRQHandler+0x140>
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	f003 0308 	and.w	r3, r3, #8
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d016      	beq.n	800ff38 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f022 0208 	bic.w	r2, r2, #8
 800ff18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	2208      	movs	r2, #8
 800ff20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2201      	movs	r2, #1
 800ff26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 f80e 	bl	800ff54 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800ff38:	bf00      	nop
 800ff3a:	3710      	adds	r7, #16
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800ff5c:	bf00      	nop
 800ff5e:	370c      	adds	r7, #12
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ff68:	b5b0      	push	{r4, r5, r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d101      	bne.n	800ff82 <HAL_LTDC_ConfigLayer+0x1a>
 800ff7e:	2302      	movs	r3, #2
 800ff80:	e02c      	b.n	800ffdc <HAL_LTDC_ConfigLayer+0x74>
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2201      	movs	r2, #1
 800ff86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2202      	movs	r2, #2
 800ff8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ff92:	68fa      	ldr	r2, [r7, #12]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2134      	movs	r1, #52	; 0x34
 800ff98:	fb01 f303 	mul.w	r3, r1, r3
 800ff9c:	4413      	add	r3, r2
 800ff9e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	4614      	mov	r4, r2
 800ffa6:	461d      	mov	r5, r3
 800ffa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffb4:	682b      	ldr	r3, [r5, #0]
 800ffb6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	68b9      	ldr	r1, [r7, #8]
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f000 f849 	bl	8010054 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ffda:	2300      	movs	r3, #0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3710      	adds	r7, #16
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bdb0      	pop	{r4, r5, r7, pc}

0800ffe4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d101      	bne.n	800fffc <HAL_LTDC_ProgramLineEvent+0x18>
 800fff8:	2302      	movs	r3, #2
 800fffa:	e023      	b.n	8010044 <HAL_LTDC_ProgramLineEvent+0x60>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2201      	movs	r2, #1
 8010000:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2202      	movs	r2, #2
 8010008:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f022 0201 	bic.w	r2, r2, #1
 801001a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 801001c:	4a0c      	ldr	r2, [pc, #48]	; (8010050 <HAL_LTDC_ProgramLineEvent+0x6c>)
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f042 0201 	orr.w	r2, r2, #1
 8010030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2201      	movs	r2, #1
 8010036:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr
 8010050:	50001000 	.word	0x50001000

08010054 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8010054:	b480      	push	{r7}
 8010056:	b089      	sub	sp, #36	; 0x24
 8010058:	af00      	add	r7, sp, #0
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	685a      	ldr	r2, [r3, #4]
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	68db      	ldr	r3, [r3, #12]
 801006a:	0c1b      	lsrs	r3, r3, #16
 801006c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010070:	4413      	add	r3, r2
 8010072:	041b      	lsls	r3, r3, #16
 8010074:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	461a      	mov	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	01db      	lsls	r3, r3, #7
 8010080:	4413      	add	r3, r2
 8010082:	3384      	adds	r3, #132	; 0x84
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	68fa      	ldr	r2, [r7, #12]
 8010088:	6812      	ldr	r2, [r2, #0]
 801008a:	4611      	mov	r1, r2
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	01d2      	lsls	r2, r2, #7
 8010090:	440a      	add	r2, r1
 8010092:	3284      	adds	r2, #132	; 0x84
 8010094:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8010098:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	0c1b      	lsrs	r3, r3, #16
 80100a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80100aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80100ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	4619      	mov	r1, r3
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	01db      	lsls	r3, r3, #7
 80100b8:	440b      	add	r3, r1
 80100ba:	3384      	adds	r3, #132	; 0x84
 80100bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80100c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	68da      	ldr	r2, [r3, #12]
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100d2:	4413      	add	r3, r2
 80100d4:	041b      	lsls	r3, r3, #16
 80100d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	461a      	mov	r2, r3
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	01db      	lsls	r3, r3, #7
 80100e2:	4413      	add	r3, r2
 80100e4:	3384      	adds	r3, #132	; 0x84
 80100e6:	689b      	ldr	r3, [r3, #8]
 80100e8:	68fa      	ldr	r2, [r7, #12]
 80100ea:	6812      	ldr	r2, [r2, #0]
 80100ec:	4611      	mov	r1, r2
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	01d2      	lsls	r2, r2, #7
 80100f2:	440a      	add	r2, r1
 80100f4:	3284      	adds	r2, #132	; 0x84
 80100f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80100fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	689a      	ldr	r2, [r3, #8]
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801010a:	4413      	add	r3, r2
 801010c:	1c5a      	adds	r2, r3, #1
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4619      	mov	r1, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	01db      	lsls	r3, r3, #7
 8010118:	440b      	add	r3, r1
 801011a:	3384      	adds	r3, #132	; 0x84
 801011c:	4619      	mov	r1, r3
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	4313      	orrs	r3, r2
 8010122:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	461a      	mov	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	01db      	lsls	r3, r3, #7
 801012e:	4413      	add	r3, r2
 8010130:	3384      	adds	r3, #132	; 0x84
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	68fa      	ldr	r2, [r7, #12]
 8010136:	6812      	ldr	r2, [r2, #0]
 8010138:	4611      	mov	r1, r2
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	01d2      	lsls	r2, r2, #7
 801013e:	440a      	add	r2, r1
 8010140:	3284      	adds	r2, #132	; 0x84
 8010142:	f023 0307 	bic.w	r3, r3, #7
 8010146:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	461a      	mov	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	01db      	lsls	r3, r3, #7
 8010152:	4413      	add	r3, r2
 8010154:	3384      	adds	r3, #132	; 0x84
 8010156:	461a      	mov	r2, r3
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	691b      	ldr	r3, [r3, #16]
 801015c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010164:	021b      	lsls	r3, r3, #8
 8010166:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801016e:	041b      	lsls	r3, r3, #16
 8010170:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	699b      	ldr	r3, [r3, #24]
 8010176:	061b      	lsls	r3, r3, #24
 8010178:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	461a      	mov	r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	01db      	lsls	r3, r3, #7
 8010184:	4413      	add	r3, r2
 8010186:	3384      	adds	r3, #132	; 0x84
 8010188:	699b      	ldr	r3, [r3, #24]
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	461a      	mov	r2, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	01db      	lsls	r3, r3, #7
 8010194:	4413      	add	r3, r2
 8010196:	3384      	adds	r3, #132	; 0x84
 8010198:	461a      	mov	r2, r3
 801019a:	2300      	movs	r3, #0
 801019c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101a4:	461a      	mov	r2, r3
 80101a6:	69fb      	ldr	r3, [r7, #28]
 80101a8:	431a      	orrs	r2, r3
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	431a      	orrs	r2, r3
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	4619      	mov	r1, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	01db      	lsls	r3, r3, #7
 80101b8:	440b      	add	r3, r1
 80101ba:	3384      	adds	r3, #132	; 0x84
 80101bc:	4619      	mov	r1, r3
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	4313      	orrs	r3, r2
 80101c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	461a      	mov	r2, r3
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	01db      	lsls	r3, r3, #7
 80101ce:	4413      	add	r3, r2
 80101d0:	3384      	adds	r3, #132	; 0x84
 80101d2:	695b      	ldr	r3, [r3, #20]
 80101d4:	68fa      	ldr	r2, [r7, #12]
 80101d6:	6812      	ldr	r2, [r2, #0]
 80101d8:	4611      	mov	r1, r2
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	01d2      	lsls	r2, r2, #7
 80101de:	440a      	add	r2, r1
 80101e0:	3284      	adds	r2, #132	; 0x84
 80101e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80101e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	461a      	mov	r2, r3
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	01db      	lsls	r3, r3, #7
 80101f2:	4413      	add	r3, r2
 80101f4:	3384      	adds	r3, #132	; 0x84
 80101f6:	461a      	mov	r2, r3
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	695b      	ldr	r3, [r3, #20]
 80101fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	461a      	mov	r2, r3
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	01db      	lsls	r3, r3, #7
 8010208:	4413      	add	r3, r2
 801020a:	3384      	adds	r3, #132	; 0x84
 801020c:	69da      	ldr	r2, [r3, #28]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	4619      	mov	r1, r3
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	01db      	lsls	r3, r3, #7
 8010218:	440b      	add	r3, r1
 801021a:	3384      	adds	r3, #132	; 0x84
 801021c:	4619      	mov	r1, r3
 801021e:	4b58      	ldr	r3, [pc, #352]	; (8010380 <LTDC_SetConfig+0x32c>)
 8010220:	4013      	ands	r3, r2
 8010222:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	69da      	ldr	r2, [r3, #28]
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	6a1b      	ldr	r3, [r3, #32]
 801022c:	68f9      	ldr	r1, [r7, #12]
 801022e:	6809      	ldr	r1, [r1, #0]
 8010230:	4608      	mov	r0, r1
 8010232:	6879      	ldr	r1, [r7, #4]
 8010234:	01c9      	lsls	r1, r1, #7
 8010236:	4401      	add	r1, r0
 8010238:	3184      	adds	r1, #132	; 0x84
 801023a:	4313      	orrs	r3, r2
 801023c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	461a      	mov	r2, r3
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	01db      	lsls	r3, r3, #7
 8010248:	4413      	add	r3, r2
 801024a:	3384      	adds	r3, #132	; 0x84
 801024c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	461a      	mov	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	01db      	lsls	r3, r3, #7
 8010258:	4413      	add	r3, r2
 801025a:	3384      	adds	r3, #132	; 0x84
 801025c:	461a      	mov	r2, r3
 801025e:	2300      	movs	r3, #0
 8010260:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	461a      	mov	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	01db      	lsls	r3, r3, #7
 801026c:	4413      	add	r3, r2
 801026e:	3384      	adds	r3, #132	; 0x84
 8010270:	461a      	mov	r2, r3
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010276:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d102      	bne.n	8010286 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8010280:	2304      	movs	r3, #4
 8010282:	61fb      	str	r3, [r7, #28]
 8010284:	e01b      	b.n	80102be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	691b      	ldr	r3, [r3, #16]
 801028a:	2b01      	cmp	r3, #1
 801028c:	d102      	bne.n	8010294 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 801028e:	2303      	movs	r3, #3
 8010290:	61fb      	str	r3, [r7, #28]
 8010292:	e014      	b.n	80102be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	691b      	ldr	r3, [r3, #16]
 8010298:	2b04      	cmp	r3, #4
 801029a:	d00b      	beq.n	80102b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80102a0:	2b02      	cmp	r3, #2
 80102a2:	d007      	beq.n	80102b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80102a8:	2b03      	cmp	r3, #3
 80102aa:	d003      	beq.n	80102b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80102b0:	2b07      	cmp	r3, #7
 80102b2:	d102      	bne.n	80102ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80102b4:	2302      	movs	r3, #2
 80102b6:	61fb      	str	r3, [r7, #28]
 80102b8:	e001      	b.n	80102be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80102ba:	2301      	movs	r3, #1
 80102bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	461a      	mov	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	01db      	lsls	r3, r3, #7
 80102c8:	4413      	add	r3, r2
 80102ca:	3384      	adds	r3, #132	; 0x84
 80102cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ce:	68fa      	ldr	r2, [r7, #12]
 80102d0:	6812      	ldr	r2, [r2, #0]
 80102d2:	4611      	mov	r1, r2
 80102d4:	687a      	ldr	r2, [r7, #4]
 80102d6:	01d2      	lsls	r2, r2, #7
 80102d8:	440a      	add	r2, r1
 80102da:	3284      	adds	r2, #132	; 0x84
 80102dc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80102e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102e6:	69fa      	ldr	r2, [r7, #28]
 80102e8:	fb02 f303 	mul.w	r3, r2, r3
 80102ec:	041a      	lsls	r2, r3, #16
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	6859      	ldr	r1, [r3, #4]
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	1acb      	subs	r3, r1, r3
 80102f8:	69f9      	ldr	r1, [r7, #28]
 80102fa:	fb01 f303 	mul.w	r3, r1, r3
 80102fe:	3307      	adds	r3, #7
 8010300:	68f9      	ldr	r1, [r7, #12]
 8010302:	6809      	ldr	r1, [r1, #0]
 8010304:	4608      	mov	r0, r1
 8010306:	6879      	ldr	r1, [r7, #4]
 8010308:	01c9      	lsls	r1, r1, #7
 801030a:	4401      	add	r1, r0
 801030c:	3184      	adds	r1, #132	; 0x84
 801030e:	4313      	orrs	r3, r2
 8010310:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	461a      	mov	r2, r3
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	01db      	lsls	r3, r3, #7
 801031c:	4413      	add	r3, r2
 801031e:	3384      	adds	r3, #132	; 0x84
 8010320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4619      	mov	r1, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	01db      	lsls	r3, r3, #7
 801032c:	440b      	add	r3, r1
 801032e:	3384      	adds	r3, #132	; 0x84
 8010330:	4619      	mov	r1, r3
 8010332:	4b14      	ldr	r3, [pc, #80]	; (8010384 <LTDC_SetConfig+0x330>)
 8010334:	4013      	ands	r3, r2
 8010336:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	461a      	mov	r2, r3
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	01db      	lsls	r3, r3, #7
 8010342:	4413      	add	r3, r2
 8010344:	3384      	adds	r3, #132	; 0x84
 8010346:	461a      	mov	r2, r3
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	461a      	mov	r2, r3
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	01db      	lsls	r3, r3, #7
 8010358:	4413      	add	r3, r2
 801035a:	3384      	adds	r3, #132	; 0x84
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	68fa      	ldr	r2, [r7, #12]
 8010360:	6812      	ldr	r2, [r2, #0]
 8010362:	4611      	mov	r1, r2
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	01d2      	lsls	r2, r2, #7
 8010368:	440a      	add	r2, r1
 801036a:	3284      	adds	r2, #132	; 0x84
 801036c:	f043 0301 	orr.w	r3, r3, #1
 8010370:	6013      	str	r3, [r2, #0]
}
 8010372:	bf00      	nop
 8010374:	3724      	adds	r7, #36	; 0x24
 8010376:	46bd      	mov	sp, r7
 8010378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037c:	4770      	bx	lr
 801037e:	bf00      	nop
 8010380:	fffff8f8 	.word	0xfffff8f8
 8010384:	fffff800 	.word	0xfffff800

08010388 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010390:	f7fb fe9e 	bl	800c0d0 <HAL_GetTick>
 8010394:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d101      	bne.n	80103a0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 801039c:	2301      	movs	r3, #1
 801039e:	e03b      	b.n	8010418 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2200      	movs	r2, #0
 80103a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2202      	movs	r2, #2
 80103ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	68da      	ldr	r2, [r3, #12]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f022 0201 	bic.w	r2, r2, #1
 80103be:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80103c0:	e00f      	b.n	80103e2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80103c2:	f7fb fe85 	bl	800c0d0 <HAL_GetTick>
 80103c6:	4602      	mov	r2, r0
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	2b05      	cmp	r3, #5
 80103ce:	d908      	bls.n	80103e2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2240      	movs	r2, #64	; 0x40
 80103d4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2203      	movs	r2, #3
 80103da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80103de:	2301      	movs	r3, #1
 80103e0:	e01a      	b.n	8010418 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	f003 0301 	and.w	r3, r3, #1
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d1e8      	bne.n	80103c2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 fb2f 	bl	8010a54 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2200      	movs	r2, #0
 8010400:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2200      	movs	r2, #0
 8010406:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2201      	movs	r2, #1
 8010412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010416:	2300      	movs	r3, #0
}
 8010418:	4618      	mov	r0, r3
 801041a:	3710      	adds	r7, #16
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8010420:	b480      	push	{r7}
 8010422:	b087      	sub	sp, #28
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801042c:	2300      	movs	r3, #0
 801042e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d101      	bne.n	801043a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8010436:	2301      	movs	r3, #1
 8010438:	e03e      	b.n	80104b8 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010440:	2b01      	cmp	r3, #1
 8010442:	d101      	bne.n	8010448 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8010444:	2302      	movs	r3, #2
 8010446:	e037      	b.n	80104b8 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2201      	movs	r2, #1
 801044c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010456:	b2db      	uxtb	r3, r3
 8010458:	2b01      	cmp	r3, #1
 801045a:	d126      	bne.n	80104aa <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010466:	2b00      	cmp	r3, #0
 8010468:	d11c      	bne.n	80104a4 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	68ba      	ldr	r2, [r7, #8]
 8010470:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d108      	bne.n	8010492 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	691a      	ldr	r2, [r3, #16]
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801048e:	611a      	str	r2, [r3, #16]
 8010490:	e00d      	b.n	80104ae <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	691a      	ldr	r2, [r3, #16]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80104a0:	611a      	str	r2, [r3, #16]
 80104a2:	e004      	b.n	80104ae <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 80104a4:	2301      	movs	r3, #1
 80104a6:	75fb      	strb	r3, [r7, #23]
 80104a8:	e001      	b.n	80104ae <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80104aa:	2301      	movs	r3, #1
 80104ac:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2200      	movs	r2, #0
 80104b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80104b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	371c      	adds	r7, #28
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr

080104c4 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b086      	sub	sp, #24
 80104c8:	af02      	add	r7, sp, #8
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
 80104d0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d101      	bne.n	80104dc <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80104d8:	2301      	movs	r3, #1
 80104da:	e070      	b.n	80105be <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d101      	bne.n	80104ea <HAL_MDMA_Start_IT+0x26>
 80104e6:	2302      	movs	r3, #2
 80104e8:	e069      	b.n	80105be <HAL_MDMA_Start_IT+0xfa>
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2201      	movs	r2, #1
 80104ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104f8:	b2db      	uxtb	r3, r3
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d158      	bne.n	80105b0 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2202      	movs	r2, #2
 8010502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2200      	movs	r2, #0
 801050a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	68da      	ldr	r2, [r3, #12]
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f022 0201 	bic.w	r2, r2, #1
 801051a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 801051c:	69bb      	ldr	r3, [r7, #24]
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	687a      	ldr	r2, [r7, #4]
 8010524:	68b9      	ldr	r1, [r7, #8]
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f000 fa24 	bl	8010974 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	68da      	ldr	r2, [r3, #12]
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f042 0206 	orr.w	r2, r2, #6
 801053a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010540:	2b00      	cmp	r3, #0
 8010542:	d007      	beq.n	8010554 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	68da      	ldr	r2, [r3, #12]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f042 0210 	orr.w	r2, r2, #16
 8010552:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010558:	2b00      	cmp	r3, #0
 801055a:	d007      	beq.n	801056c <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	68da      	ldr	r2, [r3, #12]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f042 0208 	orr.w	r2, r2, #8
 801056a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010570:	2b00      	cmp	r3, #0
 8010572:	d007      	beq.n	8010584 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	68da      	ldr	r2, [r3, #12]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	f042 0220 	orr.w	r2, r2, #32
 8010582:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	68da      	ldr	r2, [r3, #12]
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	f042 0201 	orr.w	r2, r2, #1
 8010592:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801059c:	d10e      	bne.n	80105bc <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	68da      	ldr	r2, [r3, #12]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80105ac:	60da      	str	r2, [r3, #12]
 80105ae:	e005      	b.n	80105bc <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	2200      	movs	r2, #0
 80105b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 80105b8:	2302      	movs	r3, #2
 80105ba:	e000      	b.n	80105be <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 80105bc:	2300      	movs	r3, #0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3710      	adds	r7, #16
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b084      	sub	sp, #16
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 80105ce:	f7fb fd7f 	bl	800c0d0 <HAL_GetTick>
 80105d2:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d101      	bne.n	80105de <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 80105da:	2301      	movs	r3, #1
 80105dc:	e04a      	b.n	8010674 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	2b02      	cmp	r3, #2
 80105e8:	d008      	beq.n	80105fc <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2280      	movs	r2, #128	; 0x80
 80105ee:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2200      	movs	r2, #0
 80105f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80105f8:	2301      	movs	r3, #1
 80105fa:	e03b      	b.n	8010674 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	68da      	ldr	r2, [r3, #12]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 801060a:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	68da      	ldr	r2, [r3, #12]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f022 0201 	bic.w	r2, r2, #1
 801061a:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801061c:	e016      	b.n	801064c <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 801061e:	f7fb fd57 	bl	800c0d0 <HAL_GetTick>
 8010622:	4602      	mov	r2, r0
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	1ad3      	subs	r3, r2, r3
 8010628:	2b05      	cmp	r3, #5
 801062a:	d90f      	bls.n	801064c <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2203      	movs	r2, #3
 8010644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 8010648:	2301      	movs	r3, #1
 801064a:	e013      	b.n	8010674 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	68db      	ldr	r3, [r3, #12]
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	2b00      	cmp	r3, #0
 8010658:	d1e1      	bne.n	801061e <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	221f      	movs	r2, #31
 8010660:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2200      	movs	r2, #0
 8010666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2201      	movs	r2, #1
 801066e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 8010672:	2300      	movs	r3, #0
}
 8010674:	4618      	mov	r0, r3
 8010676:	3710      	adds	r7, #16
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d101      	bne.n	801068e <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801068a:	2301      	movs	r3, #1
 801068c:	e017      	b.n	80106be <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010694:	b2db      	uxtb	r3, r3
 8010696:	2b02      	cmp	r3, #2
 8010698:	d004      	beq.n	80106a4 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2280      	movs	r2, #128	; 0x80
 801069e:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80106a0:	2301      	movs	r3, #1
 80106a2:	e00c      	b.n	80106be <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2204      	movs	r2, #4
 80106a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	68da      	ldr	r2, [r3, #12]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	f022 0201 	bic.w	r2, r2, #1
 80106ba:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80106bc:	2300      	movs	r3, #0
}
 80106be:	4618      	mov	r0, r3
 80106c0:	370c      	adds	r7, #12
 80106c2:	46bd      	mov	sp, r7
 80106c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c8:	4770      	bx	lr
	...

080106cc <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b086      	sub	sp, #24
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80106d4:	2300      	movs	r3, #0
 80106d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80106d8:	4b91      	ldr	r3, [pc, #580]	; (8010920 <HAL_MDMA_IRQHandler+0x254>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	4a91      	ldr	r2, [pc, #580]	; (8010924 <HAL_MDMA_IRQHandler+0x258>)
 80106de:	fba2 2303 	umull	r2, r3, r2, r3
 80106e2:	0a9b      	lsrs	r3, r3, #10
 80106e4:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	461a      	mov	r2, r3
 80106ec:	4b8e      	ldr	r3, [pc, #568]	; (8010928 <HAL_MDMA_IRQHandler+0x25c>)
 80106ee:	4413      	add	r3, r2
 80106f0:	099b      	lsrs	r3, r3, #6
 80106f2:	f003 031f 	and.w	r3, r3, #31
 80106f6:	2201      	movs	r2, #1
 80106f8:	fa02 f303 	lsl.w	r3, r2, r3
 80106fc:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80106fe:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	4013      	ands	r3, r2
 8010708:	2b00      	cmp	r3, #0
 801070a:	f000 812d 	beq.w	8010968 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f003 0301 	and.w	r3, r3, #1
 8010718:	2b00      	cmp	r3, #0
 801071a:	d054      	beq.n	80107c6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	68db      	ldr	r3, [r3, #12]
 8010722:	f003 0302 	and.w	r3, r3, #2
 8010726:	2b00      	cmp	r3, #0
 8010728:	d04d      	beq.n	80107c6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	68da      	ldr	r2, [r3, #12]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f022 0202 	bic.w	r2, r2, #2
 8010738:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	689b      	ldr	r3, [r3, #8]
 8010740:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010748:	2b00      	cmp	r3, #0
 801074a:	d106      	bne.n	801075a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010750:	f043 0201 	orr.w	r2, r3, #1
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	669a      	str	r2, [r3, #104]	; 0x68
 8010758:	e005      	b.n	8010766 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801075e:	f043 0202 	orr.w	r2, r3, #2
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801076c:	2b00      	cmp	r3, #0
 801076e:	d005      	beq.n	801077c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010774:	f043 0204 	orr.w	r2, r3, #4
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010782:	2b00      	cmp	r3, #0
 8010784:	d005      	beq.n	8010792 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801078a:	f043 0208 	orr.w	r2, r3, #8
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010798:	2b00      	cmp	r3, #0
 801079a:	d005      	beq.n	80107a8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107a0:	f043 0210 	orr.w	r2, r3, #16
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d005      	beq.n	80107be <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107b6:	f043 0220 	orr.w	r2, r3, #32
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2201      	movs	r2, #1
 80107c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f003 0310 	and.w	r3, r3, #16
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d012      	beq.n	80107fa <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	f003 0320 	and.w	r3, r3, #32
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d00b      	beq.n	80107fa <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2210      	movs	r2, #16
 80107e8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d003      	beq.n	80107fa <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f003 0308 	and.w	r3, r3, #8
 8010804:	2b00      	cmp	r3, #0
 8010806:	d012      	beq.n	801082e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	f003 0310 	and.w	r3, r3, #16
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00b      	beq.n	801082e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	2208      	movs	r2, #8
 801081c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010822:	2b00      	cmp	r3, #0
 8010824:	d003      	beq.n	801082e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f003 0304 	and.w	r3, r3, #4
 8010838:	2b00      	cmp	r3, #0
 801083a:	d012      	beq.n	8010862 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	68db      	ldr	r3, [r3, #12]
 8010842:	f003 0308 	and.w	r3, r3, #8
 8010846:	2b00      	cmp	r3, #0
 8010848:	d00b      	beq.n	8010862 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2204      	movs	r2, #4
 8010850:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010856:	2b00      	cmp	r3, #0
 8010858:	d003      	beq.n	8010862 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	f003 0302 	and.w	r3, r3, #2
 801086c:	2b00      	cmp	r3, #0
 801086e:	d039      	beq.n	80108e4 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	f003 0304 	and.w	r3, r3, #4
 801087a:	2b00      	cmp	r3, #0
 801087c:	d032      	beq.n	80108e4 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	68da      	ldr	r2, [r3, #12]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 801088c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010894:	b2db      	uxtb	r3, r3
 8010896:	2b04      	cmp	r3, #4
 8010898:	d110      	bne.n	80108bc <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2201      	movs	r2, #1
 80108a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d05c      	beq.n	801096c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	4798      	blx	r3
        }
        return;
 80108ba:	e057      	b.n	801096c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2202      	movs	r2, #2
 80108c2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2201      	movs	r2, #1
 80108d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d003      	beq.n	80108e4 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d040      	beq.n	801096e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2204      	movs	r2, #4
 80108f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	68da      	ldr	r2, [r3, #12]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f022 0201 	bic.w	r2, r2, #1
 8010902:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	3301      	adds	r3, #1
 8010908:	60bb      	str	r3, [r7, #8]
 801090a:	697a      	ldr	r2, [r7, #20]
 801090c:	429a      	cmp	r2, r3
 801090e:	d30d      	bcc.n	801092c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	f003 0301 	and.w	r3, r3, #1
 801091a:	2b00      	cmp	r3, #0
 801091c:	d1f2      	bne.n	8010904 <HAL_MDMA_IRQHandler+0x238>
 801091e:	e006      	b.n	801092e <HAL_MDMA_IRQHandler+0x262>
 8010920:	24000054 	.word	0x24000054
 8010924:	1b4e81b5 	.word	0x1b4e81b5
 8010928:	adffffc0 	.word	0xadffffc0
        break;
 801092c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2200      	movs	r2, #0
 8010932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	f003 0301 	and.w	r3, r3, #1
 8010940:	2b00      	cmp	r3, #0
 8010942:	d004      	beq.n	801094e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2203      	movs	r2, #3
 8010948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801094c:	e003      	b.n	8010956 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2201      	movs	r2, #1
 8010952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801095a:	2b00      	cmp	r3, #0
 801095c:	d007      	beq.n	801096e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	4798      	blx	r3
 8010966:	e002      	b.n	801096e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8010968:	bf00      	nop
 801096a:	e000      	b.n	801096e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 801096c:	bf00      	nop
    }
  }
}
 801096e:	3718      	adds	r7, #24
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8010974:	b480      	push	{r7}
 8010976:	b087      	sub	sp, #28
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
 8010980:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	695a      	ldr	r2, [r3, #20]
 8010988:	4b31      	ldr	r3, [pc, #196]	; (8010a50 <MDMA_SetConfig+0xdc>)
 801098a:	4013      	ands	r3, r2
 801098c:	683a      	ldr	r2, [r7, #0]
 801098e:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8010992:	68fa      	ldr	r2, [r7, #12]
 8010994:	6812      	ldr	r2, [r2, #0]
 8010996:	430b      	orrs	r3, r1
 8010998:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	695b      	ldr	r3, [r3, #20]
 80109a0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80109a4:	6a3b      	ldr	r3, [r7, #32]
 80109a6:	3b01      	subs	r3, #1
 80109a8:	051a      	lsls	r2, r3, #20
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	430a      	orrs	r2, r1
 80109b0:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	221f      	movs	r2, #31
 80109b8:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	68ba      	ldr	r2, [r7, #8]
 80109c8:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80109d0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109d8:	d002      	beq.n	80109e0 <MDMA_SetConfig+0x6c>
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d108      	bne.n	80109f2 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80109ee:	629a      	str	r2, [r3, #40]	; 0x28
 80109f0:	e007      	b.n	8010a02 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010a00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010a08:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a10:	d002      	beq.n	8010a18 <MDMA_SetConfig+0xa4>
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d108      	bne.n	8010a2a <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010a26:	629a      	str	r2, [r3, #40]	; 0x28
 8010a28:	e007      	b.n	8010a3a <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010a38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010a44:	bf00      	nop
 8010a46:	371c      	adds	r7, #28
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr
 8010a50:	fffe0000 	.word	0xfffe0000

08010a54 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b085      	sub	sp, #20
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	68d9      	ldr	r1, [r3, #12]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	691a      	ldr	r2, [r3, #16]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	430a      	orrs	r2, r1
 8010a6a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	695a      	ldr	r2, [r3, #20]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	699b      	ldr	r3, [r3, #24]
 8010a74:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8010a7a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6a1b      	ldr	r3, [r3, #32]
 8010a80:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8010a86:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a8c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010a92:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a98:	3b01      	subs	r3, #1
 8010a9a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8010a9c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8010aa8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8010aaa:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ab4:	d107      	bne.n	8010ac6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	691a      	ldr	r2, [r3, #16]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8010ac4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2200      	movs	r2, #0
 8010acc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	da11      	bge.n	8010afa <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	695a      	ldr	r2, [r3, #20]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8010ae4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aea:	425b      	negs	r3, r3
 8010aec:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	68fa      	ldr	r2, [r7, #12]
 8010af4:	b292      	uxth	r2, r2
 8010af6:	621a      	str	r2, [r3, #32]
 8010af8:	e006      	b.n	8010b08 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010afe:	461a      	mov	r2, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	b292      	uxth	r2, r2
 8010b06:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	da15      	bge.n	8010b3c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	695a      	ldr	r2, [r3, #20]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8010b1e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b24:	425b      	negs	r3, r3
 8010b26:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	6a19      	ldr	r1, [r3, #32]
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	041a      	lsls	r2, r3, #16
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	430a      	orrs	r2, r1
 8010b38:	621a      	str	r2, [r3, #32]
 8010b3a:	e009      	b.n	8010b50 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	6a19      	ldr	r1, [r3, #32]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b46:	041a      	lsls	r2, r3, #16
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	430a      	orrs	r2, r1
 8010b4e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b58:	d006      	beq.n	8010b68 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	685a      	ldr	r2, [r3, #4]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	b2d2      	uxtb	r2, r2
 8010b64:	629a      	str	r2, [r3, #40]	; 0x28
 8010b66:	e003      	b.n	8010b70 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2200      	movs	r2, #0
 8010b76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010b78:	bf00      	nop
 8010b7a:	3714      	adds	r7, #20
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr

08010b84 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b086      	sub	sp, #24
 8010b88:	af02      	add	r7, sp, #8
 8010b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010b90:	f7fb fa9e 	bl	800c0d0 <HAL_GetTick>
 8010b94:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d102      	bne.n	8010ba2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	73fb      	strb	r3, [r7, #15]
 8010ba0:	e0a5      	b.n	8010cee <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f040 809e 	bne.w	8010cee <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f7f6 f90e 	bl	8006dd4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8010bb8:	f241 3188 	movw	r1, #5000	; 0x1388
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fd44 	bl	801164a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	689a      	ldr	r2, [r3, #8]
 8010bc8:	4b4b      	ldr	r3, [pc, #300]	; (8010cf8 <HAL_OSPI_Init+0x174>)
 8010bca:	4013      	ands	r3, r2
 8010bcc:	687a      	ldr	r2, [r7, #4]
 8010bce:	68d1      	ldr	r1, [r2, #12]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	6912      	ldr	r2, [r2, #16]
 8010bd4:	3a01      	subs	r2, #1
 8010bd6:	0412      	lsls	r2, r2, #16
 8010bd8:	4311      	orrs	r1, r2
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	6952      	ldr	r2, [r2, #20]
 8010bde:	3a01      	subs	r2, #1
 8010be0:	0212      	lsls	r2, r2, #8
 8010be2:	4311      	orrs	r1, r2
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010be8:	4311      	orrs	r1, r2
 8010bea:	687a      	ldr	r2, [r7, #4]
 8010bec:	69d2      	ldr	r2, [r2, #28]
 8010bee:	4311      	orrs	r1, r2
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	6812      	ldr	r2, [r2, #0]
 8010bf4:	430b      	orrs	r3, r1
 8010bf6:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6a1a      	ldr	r2, [r3, #32]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	430a      	orrs	r2, r1
 8010c0c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c12:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	430a      	orrs	r2, r1
 8010c1e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010c28:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	021a      	lsls	r2, r3, #8
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	430a      	orrs	r2, r1
 8010c42:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c48:	9300      	str	r3, [sp, #0]
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	2120      	movs	r1, #32
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f000 fd45 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 8010c56:	4603      	mov	r3, r0
 8010c58:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010c5a:	7bfb      	ldrb	r3, [r7, #15]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d146      	bne.n	8010cee <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c6e:	1e5a      	subs	r2, r3, #1
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	430a      	orrs	r2, r1
 8010c76:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	689a      	ldr	r2, [r3, #8]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	430a      	orrs	r2, r1
 8010c8c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8010c96:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ca2:	431a      	orrs	r2, r3
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	430a      	orrs	r2, r1
 8010caa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f042 0201 	orr.w	r2, r2, #1
 8010cbc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	699b      	ldr	r3, [r3, #24]
 8010cc2:	2b02      	cmp	r3, #2
 8010cc4:	d107      	bne.n	8010cd6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	689a      	ldr	r2, [r3, #8]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	f042 0202 	orr.w	r2, r2, #2
 8010cd4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010cde:	d103      	bne.n	8010ce8 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	651a      	str	r2, [r3, #80]	; 0x50
 8010ce6:	e002      	b.n	8010cee <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2202      	movs	r2, #2
 8010cec:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8010cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3710      	adds	r7, #16
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	f8e0f8f4 	.word	0xf8e0f8f4

08010cfc <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d04:	2300      	movs	r3, #0
 8010d06:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d102      	bne.n	8010d14 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8010d0e:	2301      	movs	r3, #1
 8010d10:	73fb      	strb	r3, [r7, #15]
 8010d12:	e015      	b.n	8010d40 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f022 0201 	bic.w	r2, r2, #1
 8010d22:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	689a      	ldr	r2, [r3, #8]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f022 0202 	bic.w	r2, r2, #2
 8010d32:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7f6 f8af 	bl	8006e98 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 8010d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3710      	adds	r7, #16
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
	...

08010d4c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b086      	sub	sp, #24
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	3350      	adds	r3, #80	; 0x50
 8010d5a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	6a1b      	ldr	r3, [r3, #32]
 8010d62:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d70:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	f003 0304 	and.w	r3, r3, #4
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d03a      	beq.n	8010df2 <HAL_OSPI_IRQHandler+0xa6>
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d035      	beq.n	8010df2 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	2b18      	cmp	r3, #24
 8010d8a:	d10f      	bne.n	8010dac <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d90:	781a      	ldrb	r2, [r3, #0]
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d9a:	1c5a      	adds	r2, r3, #1
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010da4:	1e5a      	subs	r2, r3, #1
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	649a      	str	r2, [r3, #72]	; 0x48
 8010daa:	e012      	b.n	8010dd2 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	2b28      	cmp	r3, #40	; 0x28
 8010db0:	d10f      	bne.n	8010dd2 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010db6:	697a      	ldr	r2, [r7, #20]
 8010db8:	7812      	ldrb	r2, [r2, #0]
 8010dba:	b2d2      	uxtb	r2, r2
 8010dbc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dc2:	1c5a      	adds	r2, r3, #1
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dcc:	1e5a      	subs	r2, r3, #1
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d107      	bne.n	8010dea <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010de8:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f000 fb7c 	bl	80114e8 <HAL_OSPI_FifoThresholdCallback>
 8010df0:	e0e7      	b.n	8010fc2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	f003 0302 	and.w	r3, r3, #2
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d067      	beq.n	8010ecc <HAL_OSPI_IRQHandler+0x180>
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d062      	beq.n	8010ecc <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	2b28      	cmp	r3, #40	; 0x28
 8010e0a:	d131      	bne.n	8010e70 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d015      	beq.n	8010e40 <HAL_OSPI_IRQHandler+0xf4>
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d010      	beq.n	8010e40 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e22:	697a      	ldr	r2, [r7, #20]
 8010e24:	7812      	ldrb	r2, [r2, #0]
 8010e26:	b2d2      	uxtb	r2, r2
 8010e28:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e38:	1e5a      	subs	r2, r3, #1
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010e3e:	e0bd      	b.n	8010fbc <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	f040 80b9 	bne.w	8010fbc <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	2202      	movs	r2, #2
 8010e50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	681a      	ldr	r2, [r3, #0]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8010e60:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2202      	movs	r2, #2
 8010e66:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f000 fb51 	bl	8011510 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010e6e:	e0a5      	b.n	8010fbc <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	2202      	movs	r2, #2
 8010e76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8010e86:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2202      	movs	r2, #2
 8010e8c:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	2b18      	cmp	r3, #24
 8010e92:	d103      	bne.n	8010e9c <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f000 fb45 	bl	8011524 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010e9a:	e08f      	b.n	8010fbc <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	2b08      	cmp	r3, #8
 8010ea0:	d103      	bne.n	8010eaa <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 fb2a 	bl	80114fc <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010ea8:	e088      	b.n	8010fbc <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010eb0:	f040 8084 	bne.w	8010fbc <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d103      	bne.n	8010ec4 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 fb09 	bl	80114d4 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010ec2:	e07b      	b.n	8010fbc <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 fafb 	bl	80114c0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010eca:	e077      	b.n	8010fbc <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	f003 0308 	and.w	r3, r3, #8
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d01e      	beq.n	8010f14 <HAL_OSPI_IRQHandler+0x1c8>
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d019      	beq.n	8010f14 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	2208      	movs	r2, #8
 8010ee6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d00a      	beq.n	8010f0c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	681a      	ldr	r2, [r3, #0]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8010f04:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2202      	movs	r2, #2
 8010f0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fb13 	bl	8011538 <HAL_OSPI_StatusMatchCallback>
 8010f12:	e056      	b.n	8010fc2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	f003 0301 	and.w	r3, r3, #1
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d03c      	beq.n	8010f98 <HAL_OSPI_IRQHandler+0x24c>
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d037      	beq.n	8010f98 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8010f3e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2202      	movs	r2, #2
 8010f44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f003 0304 	and.w	r3, r3, #4
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d01a      	beq.n	8010f8a <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	681a      	ldr	r2, [r3, #0]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f022 0204 	bic.w	r2, r2, #4
 8010f62:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f68:	4a18      	ldr	r2, [pc, #96]	; (8010fcc <HAL_OSPI_IRQHandler+0x280>)
 8010f6a:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7ff fb83 	bl	801067c <HAL_MDMA_Abort_IT>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d021      	beq.n	8010fc0 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2202      	movs	r2, #2
 8010f80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f000 fa9c 	bl	80114c0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010f88:	e01a      	b.n	8010fc0 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2202      	movs	r2, #2
 8010f8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f000 fa95 	bl	80114c0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010f96:	e013      	b.n	8010fc0 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	f003 0310 	and.w	r3, r3, #16
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d00f      	beq.n	8010fc2 <HAL_OSPI_IRQHandler+0x276>
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00a      	beq.n	8010fc2 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2210      	movs	r2, #16
 8010fb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f000 fac9 	bl	801154c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010fba:	e002      	b.n	8010fc2 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8010fbc:	bf00      	nop
 8010fbe:	e000      	b.n	8010fc2 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8010fc0:	bf00      	nop
}
 8010fc2:	bf00      	nop
 8010fc4:	3718      	adds	r7, #24
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	08011669 	.word	0x08011669

08010fd0 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b08a      	sub	sp, #40	; 0x28
 8010fd4:	af02      	add	r7, sp, #8
 8010fd6:	60f8      	str	r0, [r7, #12]
 8010fd8:	60b9      	str	r1, [r7, #8]
 8010fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8010fdc:	f7fb f878 	bl	800c0d0 <HAL_GetTick>
 8010fe0:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fe6:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fec:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	2b02      	cmp	r3, #2
 8010ff2:	d104      	bne.n	8010ffe <HAL_OSPI_Command+0x2e>
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	68db      	ldr	r3, [r3, #12]
 8010ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010ffc:	d115      	bne.n	801102a <HAL_OSPI_Command+0x5a>
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	2b14      	cmp	r3, #20
 8011002:	d107      	bne.n	8011014 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	2b02      	cmp	r3, #2
 801100a:	d00e      	beq.n	801102a <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2b03      	cmp	r3, #3
 8011012:	d00a      	beq.n	801102a <HAL_OSPI_Command+0x5a>
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	2b24      	cmp	r3, #36	; 0x24
 8011018:	d15b      	bne.n	80110d2 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	2b01      	cmp	r3, #1
 8011020:	d003      	beq.n	801102a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8011026:	2b03      	cmp	r3, #3
 8011028:	d153      	bne.n	80110d2 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	9300      	str	r3, [sp, #0]
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	2200      	movs	r2, #0
 8011032:	2120      	movs	r1, #32
 8011034:	68f8      	ldr	r0, [r7, #12]
 8011036:	f000 fb53 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 801103a:	4603      	mov	r3, r0
 801103c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 801103e:	7ffb      	ldrb	r3, [r7, #31]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d14c      	bne.n	80110de <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2200      	movs	r2, #0
 8011048:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 801104a:	68b9      	ldr	r1, [r7, #8]
 801104c:	68f8      	ldr	r0, [r7, #12]
 801104e:	f000 fb7f 	bl	8011750 <OSPI_ConfigCmd>
 8011052:	4603      	mov	r3, r0
 8011054:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8011056:	7ffb      	ldrb	r3, [r7, #31]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d140      	bne.n	80110de <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011060:	2b00      	cmp	r3, #0
 8011062:	d10e      	bne.n	8011082 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	69bb      	ldr	r3, [r7, #24]
 801106a:	2201      	movs	r2, #1
 801106c:	2102      	movs	r1, #2
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	f000 fb36 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 8011074:	4603      	mov	r3, r0
 8011076:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2202      	movs	r2, #2
 801107e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8011080:	e02d      	b.n	80110de <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d103      	bne.n	8011092 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2204      	movs	r2, #4
 801108e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011090:	e025      	b.n	80110de <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2b01      	cmp	r3, #1
 8011098:	d10b      	bne.n	80110b2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801109e:	2b24      	cmp	r3, #36	; 0x24
 80110a0:	d103      	bne.n	80110aa <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2204      	movs	r2, #4
 80110a6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80110a8:	e019      	b.n	80110de <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2214      	movs	r2, #20
 80110ae:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80110b0:	e015      	b.n	80110de <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b02      	cmp	r3, #2
 80110b8:	d111      	bne.n	80110de <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110be:	2b14      	cmp	r3, #20
 80110c0:	d103      	bne.n	80110ca <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	2204      	movs	r2, #4
 80110c6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80110c8:	e009      	b.n	80110de <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2224      	movs	r2, #36	; 0x24
 80110ce:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80110d0:	e005      	b.n	80110de <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80110d2:	2301      	movs	r3, #1
 80110d4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2210      	movs	r2, #16
 80110da:	655a      	str	r2, [r3, #84]	; 0x54
 80110dc:	e000      	b.n	80110e0 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 80110de:	bf00      	nop
  }

  /* Return function status */
  return status;
 80110e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3720      	adds	r7, #32
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b08a      	sub	sp, #40	; 0x28
 80110ee:	af02      	add	r7, sp, #8
 80110f0:	60f8      	str	r0, [r7, #12]
 80110f2:	60b9      	str	r1, [r7, #8]
 80110f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80110f6:	f7fa ffeb 	bl	800c0d0 <HAL_GetTick>
 80110fa:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	3350      	adds	r3, #80	; 0x50
 8011102:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d105      	bne.n	8011116 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 801110a:	2301      	movs	r3, #1
 801110c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2208      	movs	r2, #8
 8011112:	655a      	str	r2, [r3, #84]	; 0x54
 8011114:	e057      	b.n	80111c6 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801111a:	2b04      	cmp	r3, #4
 801111c:	d14e      	bne.n	80111bc <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011124:	1c5a      	adds	r2, r3, #1
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	68ba      	ldr	r2, [r7, #8]
 8011136:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011146:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	9300      	str	r3, [sp, #0]
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	2201      	movs	r2, #1
 8011150:	2104      	movs	r1, #4
 8011152:	68f8      	ldr	r0, [r7, #12]
 8011154:	f000 fac4 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 8011158:	4603      	mov	r3, r0
 801115a:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801115c:	7ffb      	ldrb	r3, [r7, #31]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d113      	bne.n	801118a <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011166:	781a      	ldrb	r2, [r3, #0]
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011170:	1c5a      	adds	r2, r3, #1
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801117a:	1e5a      	subs	r2, r3, #1
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011184:	2b00      	cmp	r3, #0
 8011186:	d1df      	bne.n	8011148 <HAL_OSPI_Transmit+0x5e>
 8011188:	e000      	b.n	801118c <HAL_OSPI_Transmit+0xa2>
          break;
 801118a:	bf00      	nop

      if (status == HAL_OK)
 801118c:	7ffb      	ldrb	r3, [r7, #31]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d119      	bne.n	80111c6 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	9300      	str	r3, [sp, #0]
 8011196:	69bb      	ldr	r3, [r7, #24]
 8011198:	2201      	movs	r2, #1
 801119a:	2102      	movs	r1, #2
 801119c:	68f8      	ldr	r0, [r7, #12]
 801119e:	f000 fa9f 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 80111a2:	4603      	mov	r3, r0
 80111a4:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80111a6:	7ffb      	ldrb	r3, [r7, #31]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d10c      	bne.n	80111c6 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	2202      	movs	r2, #2
 80111b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2202      	movs	r2, #2
 80111b8:	651a      	str	r2, [r3, #80]	; 0x50
 80111ba:	e004      	b.n	80111c6 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80111bc:	2301      	movs	r3, #1
 80111be:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	2210      	movs	r2, #16
 80111c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 80111c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3720      	adds	r7, #32
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b08c      	sub	sp, #48	; 0x30
 80111d4:	af02      	add	r7, sp, #8
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	60b9      	str	r1, [r7, #8]
 80111da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80111dc:	f7fa ff78 	bl	800c0d0 <HAL_GetTick>
 80111e0:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	3350      	adds	r3, #80	; 0x50
 80111e8:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111f0:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80111fa:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d106      	bne.n	8011210 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8011202:	2301      	movs	r3, #1
 8011204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2208      	movs	r2, #8
 801120c:	655a      	str	r2, [r3, #84]	; 0x54
 801120e:	e07c      	b.n	801130a <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011214:	2b04      	cmp	r3, #4
 8011216:	d172      	bne.n	80112fe <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801121e:	1c5a      	adds	r2, r3, #1
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	68ba      	ldr	r2, [r7, #8]
 8011230:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011244:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801124e:	d104      	bne.n	801125a <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	69ba      	ldr	r2, [r7, #24]
 8011256:	649a      	str	r2, [r3, #72]	; 0x48
 8011258:	e011      	b.n	801127e <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8011262:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011266:	2b00      	cmp	r3, #0
 8011268:	d004      	beq.n	8011274 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	69ba      	ldr	r2, [r7, #24]
 8011270:	649a      	str	r2, [r3, #72]	; 0x48
 8011272:	e004      	b.n	801127e <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	697a      	ldr	r2, [r7, #20]
 801127a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	9300      	str	r3, [sp, #0]
 8011282:	6a3b      	ldr	r3, [r7, #32]
 8011284:	2201      	movs	r2, #1
 8011286:	2106      	movs	r1, #6
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	f000 fa29 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 801128e:	4603      	mov	r3, r0
 8011290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8011294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011298:	2b00      	cmp	r3, #0
 801129a:	d114      	bne.n	80112c6 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112a0:	69fa      	ldr	r2, [r7, #28]
 80112a2:	7812      	ldrb	r2, [r2, #0]
 80112a4:	b2d2      	uxtb	r2, r2
 80112a6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ac:	1c5a      	adds	r2, r3, #1
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80112b6:	1e5a      	subs	r2, r3, #1
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d1dc      	bne.n	801127e <HAL_OSPI_Receive+0xae>
 80112c4:	e000      	b.n	80112c8 <HAL_OSPI_Receive+0xf8>
          break;
 80112c6:	bf00      	nop

      if (status == HAL_OK)
 80112c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d11c      	bne.n	801130a <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	9300      	str	r3, [sp, #0]
 80112d4:	6a3b      	ldr	r3, [r7, #32]
 80112d6:	2201      	movs	r2, #1
 80112d8:	2102      	movs	r1, #2
 80112da:	68f8      	ldr	r0, [r7, #12]
 80112dc:	f000 fa00 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 80112e0:	4603      	mov	r3, r0
 80112e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 80112e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d10d      	bne.n	801130a <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	2202      	movs	r2, #2
 80112f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2202      	movs	r2, #2
 80112fa:	651a      	str	r2, [r3, #80]	; 0x50
 80112fc:	e005      	b.n	801130a <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80112fe:	2301      	movs	r3, #1
 8011300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	2210      	movs	r2, #16
 8011308:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 801130a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801130e:	4618      	mov	r0, r3
 8011310:	3728      	adds	r7, #40	; 0x28
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8011316:	b580      	push	{r7, lr}
 8011318:	b08a      	sub	sp, #40	; 0x28
 801131a:	af02      	add	r7, sp, #8
 801131c:	60f8      	str	r0, [r7, #12]
 801131e:	60b9      	str	r1, [r7, #8]
 8011320:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011322:	f7fa fed5 	bl	800c0d0 <HAL_GetTick>
 8011326:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801132e:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8011338:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801133e:	2b04      	cmp	r3, #4
 8011340:	d164      	bne.n	801140c <HAL_OSPI_AutoPolling+0xf6>
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801134a:	d15f      	bne.n	801140c <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	9300      	str	r3, [sp, #0]
 8011350:	69bb      	ldr	r3, [r7, #24]
 8011352:	2200      	movs	r2, #0
 8011354:	2120      	movs	r1, #32
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f000 f9c2 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 801135c:	4603      	mov	r3, r0
 801135e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8011360:	7ffb      	ldrb	r3, [r7, #31]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d158      	bne.n	8011418 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	68ba      	ldr	r2, [r7, #8]
 801136c:	6812      	ldr	r2, [r2, #0]
 801136e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	68ba      	ldr	r2, [r7, #8]
 8011378:	6852      	ldr	r2, [r2, #4]
 801137a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	6912      	ldr	r2, [r2, #16]
 8011386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	6899      	ldr	r1, [r3, #8]
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	430b      	orrs	r3, r1
 801139e:	431a      	orrs	r2, r3
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80113a8:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80113b2:	d104      	bne.n	80113be <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	697a      	ldr	r2, [r7, #20]
 80113ba:	649a      	str	r2, [r3, #72]	; 0x48
 80113bc:	e011      	b.n	80113e2 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80113c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d004      	beq.n	80113d8 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	697a      	ldr	r2, [r7, #20]
 80113d4:	649a      	str	r2, [r3, #72]	; 0x48
 80113d6:	e004      	b.n	80113e2 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	693a      	ldr	r2, [r7, #16]
 80113de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	9300      	str	r3, [sp, #0]
 80113e6:	69bb      	ldr	r3, [r7, #24]
 80113e8:	2201      	movs	r2, #1
 80113ea:	2108      	movs	r1, #8
 80113ec:	68f8      	ldr	r0, [r7, #12]
 80113ee:	f000 f977 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 80113f2:	4603      	mov	r3, r0
 80113f4:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80113f6:	7ffb      	ldrb	r3, [r7, #31]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d10d      	bne.n	8011418 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	2208      	movs	r2, #8
 8011402:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2202      	movs	r2, #2
 8011408:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 801140a:	e005      	b.n	8011418 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 801140c:	2301      	movs	r3, #1
 801140e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2210      	movs	r2, #16
 8011414:	655a      	str	r2, [r3, #84]	; 0x54
 8011416:	e000      	b.n	801141a <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8011418:	bf00      	nop
  }

  /* Return function status */
  return status;
 801141a:	7ffb      	ldrb	r3, [r7, #31]
}
 801141c:	4618      	mov	r0, r3
 801141e:	3720      	adds	r7, #32
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b086      	sub	sp, #24
 8011428:	af02      	add	r7, sp, #8
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801142e:	f7fa fe4f 	bl	800c0d0 <HAL_GetTick>
 8011432:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011438:	2b04      	cmp	r3, #4
 801143a:	d134      	bne.n	80114a6 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011440:	9300      	str	r3, [sp, #0]
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	2200      	movs	r2, #0
 8011446:	2120      	movs	r1, #32
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f000 f949 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 801144e:	4603      	mov	r3, r0
 8011450:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8011452:	7bfb      	ldrb	r3, [r7, #15]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d12b      	bne.n	80114b0 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2288      	movs	r2, #136	; 0x88
 801145c:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	2b08      	cmp	r3, #8
 8011464:	d111      	bne.n	801148a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	683a      	ldr	r2, [r7, #0]
 801146c:	6852      	ldr	r2, [r2, #4]
 801146e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2210      	movs	r2, #16
 8011478:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011488:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	681a      	ldr	r2, [r3, #0]
 8011490:	4b0a      	ldr	r3, [pc, #40]	; (80114bc <HAL_OSPI_MemoryMapped+0x98>)
 8011492:	4013      	ands	r3, r2
 8011494:	683a      	ldr	r2, [r7, #0]
 8011496:	6812      	ldr	r2, [r2, #0]
 8011498:	431a      	orrs	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80114a2:	601a      	str	r2, [r3, #0]
 80114a4:	e004      	b.n	80114b0 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80114a6:	2301      	movs	r3, #1
 80114a8:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2210      	movs	r2, #16
 80114ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 80114b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	cffffff7 	.word	0xcffffff7

080114c0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b083      	sub	sp, #12
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 80114c8:	bf00      	nop
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr

080114d4 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80114dc:	bf00      	nop
 80114de:	370c      	adds	r7, #12
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr

080114e8 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b083      	sub	sp, #12
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80114f0:	bf00      	nop
 80114f2:	370c      	adds	r7, #12
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr

080114fc <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80114fc:	b480      	push	{r7}
 80114fe:	b083      	sub	sp, #12
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8011504:	bf00      	nop
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8011518:	bf00      	nop
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8011524:	b480      	push	{r7}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 801152c:	bf00      	nop
 801152e:	370c      	adds	r7, #12
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr

08011538 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8011540:	bf00      	nop
 8011542:	370c      	adds	r7, #12
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr

0801154c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8011554:	bf00      	nop
 8011556:	370c      	adds	r7, #12
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr

08011560 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b088      	sub	sp, #32
 8011564:	af02      	add	r7, sp, #8
 8011566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011568:	2300      	movs	r3, #0
 801156a:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 801156c:	f7fa fdb0 	bl	800c0d0 <HAL_GetTick>
 8011570:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011576:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f003 0308 	and.w	r3, r3, #8
 801157e:	2b00      	cmp	r3, #0
 8011580:	d104      	bne.n	801158c <HAL_OSPI_Abort+0x2c>
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	f003 0304 	and.w	r3, r3, #4
 8011588:	2b00      	cmp	r3, #0
 801158a:	d052      	beq.n	8011632 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f003 0304 	and.w	r3, r3, #4
 8011596:	2b00      	cmp	r3, #0
 8011598:	d014      	beq.n	80115c4 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	f022 0204 	bic.w	r2, r2, #4
 80115a8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7ff f809 	bl	80105c6 <HAL_MDMA_Abort>
 80115b4:	4603      	mov	r3, r0
 80115b6:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80115b8:	7dfb      	ldrb	r3, [r7, #23]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d002      	beq.n	80115c4 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2204      	movs	r2, #4
 80115c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	6a1b      	ldr	r3, [r3, #32]
 80115ca:	f003 0320 	and.w	r3, r3, #32
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d02b      	beq.n	801162a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f042 0202 	orr.w	r2, r2, #2
 80115e0:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115e6:	9300      	str	r3, [sp, #0]
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	2201      	movs	r2, #1
 80115ec:	2102      	movs	r1, #2
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f000 f876 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 80115f4:	4603      	mov	r3, r0
 80115f6:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80115f8:	7dfb      	ldrb	r3, [r7, #23]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d11f      	bne.n	801163e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2202      	movs	r2, #2
 8011604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	2200      	movs	r2, #0
 8011610:	2120      	movs	r1, #32
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f000 f864 	bl	80116e0 <OSPI_WaitFlagStateUntilTimeout>
 8011618:	4603      	mov	r3, r0
 801161a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 801161c:	7dfb      	ldrb	r3, [r7, #23]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d10d      	bne.n	801163e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	2202      	movs	r2, #2
 8011626:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8011628:	e009      	b.n	801163e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2202      	movs	r2, #2
 801162e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8011630:	e005      	b.n	801163e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8011632:	2301      	movs	r3, #1
 8011634:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2210      	movs	r2, #16
 801163a:	655a      	str	r2, [r3, #84]	; 0x54
 801163c:	e000      	b.n	8011640 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 801163e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8011640:	7dfb      	ldrb	r3, [r7, #23]
}
 8011642:	4618      	mov	r0, r3
 8011644:	3718      	adds	r7, #24
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 801164a:	b480      	push	{r7}
 801164c:	b083      	sub	sp, #12
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
 8011652:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	683a      	ldr	r2, [r7, #0]
 8011658:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	370c      	adds	r7, #12
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011674:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2200      	movs	r2, #0
 801167a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011684:	d122      	bne.n	80116cc <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	6a1b      	ldr	r3, [r3, #32]
 801168c:	f003 0320 	and.w	r3, r3, #32
 8011690:	2b00      	cmp	r3, #0
 8011692:	d014      	beq.n	80116be <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	2202      	movs	r2, #2
 801169a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80116aa:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	f042 0202 	orr.w	r2, r2, #2
 80116ba:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 80116bc:	e00c      	b.n	80116d8 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	2202      	movs	r2, #2
 80116c2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 80116c4:	68f8      	ldr	r0, [r7, #12]
 80116c6:	f7ff ff05 	bl	80114d4 <HAL_OSPI_AbortCpltCallback>
}
 80116ca:	e005      	b.n	80116d8 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2202      	movs	r2, #2
 80116d0:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 80116d2:	68f8      	ldr	r0, [r7, #12]
 80116d4:	f7ff fef4 	bl	80114c0 <HAL_OSPI_ErrorCallback>
}
 80116d8:	bf00      	nop
 80116da:	3710      	adds	r7, #16
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}

080116e0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	603b      	str	r3, [r7, #0]
 80116ec:	4613      	mov	r3, r2
 80116ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80116f0:	e01a      	b.n	8011728 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116f8:	d016      	beq.n	8011728 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80116fa:	f7fa fce9 	bl	800c0d0 <HAL_GetTick>
 80116fe:	4602      	mov	r2, r0
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	1ad3      	subs	r3, r2, r3
 8011704:	69ba      	ldr	r2, [r7, #24]
 8011706:	429a      	cmp	r2, r3
 8011708:	d302      	bcc.n	8011710 <OSPI_WaitFlagStateUntilTimeout+0x30>
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d10b      	bne.n	8011728 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011716:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801171c:	f043 0201 	orr.w	r2, r3, #1
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8011724:	2301      	movs	r3, #1
 8011726:	e00e      	b.n	8011746 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	6a1a      	ldr	r2, [r3, #32]
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	4013      	ands	r3, r2
 8011732:	2b00      	cmp	r3, #0
 8011734:	bf14      	ite	ne
 8011736:	2301      	movne	r3, #1
 8011738:	2300      	moveq	r3, #0
 801173a:	b2db      	uxtb	r3, r3
 801173c:	461a      	mov	r2, r3
 801173e:	79fb      	ldrb	r3, [r7, #7]
 8011740:	429a      	cmp	r2, r3
 8011742:	d1d6      	bne.n	80116f2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011744:	2300      	movs	r3, #0
}
 8011746:	4618      	mov	r0, r3
 8011748:	3710      	adds	r7, #16
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
	...

08011750 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8011750:	b480      	push	{r7}
 8011752:	b089      	sub	sp, #36	; 0x24
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801175a:	2300      	movs	r3, #0
 801175c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801176c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	689b      	ldr	r3, [r3, #8]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d10a      	bne.n	801178c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	685a      	ldr	r2, [r3, #4]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	430a      	orrs	r2, r1
 801178a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2b02      	cmp	r3, #2
 8011792:	d114      	bne.n	80117be <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801179c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80117a6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80117b0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80117ba:	60fb      	str	r3, [r7, #12]
 80117bc:	e02c      	b.n	8011818 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	2b03      	cmp	r3, #3
 80117c4:	d114      	bne.n	80117f0 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80117ce:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80117d8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80117e2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80117ec:	60fb      	str	r3, [r7, #12]
 80117ee:	e013      	b.n	8011818 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80117f8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8011802:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801180c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8011816:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011820:	431a      	orrs	r2, r3
 8011822:	69bb      	ldr	r3, [r7, #24]
 8011824:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801182a:	2b00      	cmp	r3, #0
 801182c:	d012      	beq.n	8011854 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8011836:	69bb      	ldr	r3, [r7, #24]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011846:	4319      	orrs	r1, r3
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801184c:	430b      	orrs	r3, r1
 801184e:	431a      	orrs	r2, r3
 8011850:	69bb      	ldr	r3, [r7, #24]
 8011852:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	f023 021f 	bic.w	r2, r3, #31
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011860:	431a      	orrs	r2, r3
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801186a:	2b00      	cmp	r3, #0
 801186c:	d009      	beq.n	8011882 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d105      	bne.n	8011882 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	3a01      	subs	r2, #1
 8011880:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	68db      	ldr	r3, [r3, #12]
 8011886:	2b00      	cmp	r3, #0
 8011888:	f000 8095 	beq.w	80119b6 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	69db      	ldr	r3, [r3, #28]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d053      	beq.n	801193c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011898:	2b00      	cmp	r3, #0
 801189a:	d01e      	beq.n	80118da <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	4b64      	ldr	r3, [pc, #400]	; (8011a34 <OSPI_ConfigCmd+0x2e4>)
 80118a2:	4013      	ands	r3, r2
 80118a4:	683a      	ldr	r2, [r7, #0]
 80118a6:	68d1      	ldr	r1, [r2, #12]
 80118a8:	683a      	ldr	r2, [r7, #0]
 80118aa:	6952      	ldr	r2, [r2, #20]
 80118ac:	4311      	orrs	r1, r2
 80118ae:	683a      	ldr	r2, [r7, #0]
 80118b0:	6912      	ldr	r2, [r2, #16]
 80118b2:	4311      	orrs	r1, r2
 80118b4:	683a      	ldr	r2, [r7, #0]
 80118b6:	69d2      	ldr	r2, [r2, #28]
 80118b8:	4311      	orrs	r1, r2
 80118ba:	683a      	ldr	r2, [r7, #0]
 80118bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80118be:	4311      	orrs	r1, r2
 80118c0:	683a      	ldr	r2, [r7, #0]
 80118c2:	6a12      	ldr	r2, [r2, #32]
 80118c4:	4311      	orrs	r1, r2
 80118c6:	683a      	ldr	r2, [r7, #0]
 80118c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80118ca:	4311      	orrs	r1, r2
 80118cc:	683a      	ldr	r2, [r7, #0]
 80118ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80118d0:	430a      	orrs	r2, r1
 80118d2:	431a      	orrs	r2, r3
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	601a      	str	r2, [r3, #0]
 80118d8:	e026      	b.n	8011928 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	681a      	ldr	r2, [r3, #0]
 80118de:	4b56      	ldr	r3, [pc, #344]	; (8011a38 <OSPI_ConfigCmd+0x2e8>)
 80118e0:	4013      	ands	r3, r2
 80118e2:	683a      	ldr	r2, [r7, #0]
 80118e4:	68d1      	ldr	r1, [r2, #12]
 80118e6:	683a      	ldr	r2, [r7, #0]
 80118e8:	6952      	ldr	r2, [r2, #20]
 80118ea:	4311      	orrs	r1, r2
 80118ec:	683a      	ldr	r2, [r7, #0]
 80118ee:	6912      	ldr	r2, [r2, #16]
 80118f0:	4311      	orrs	r1, r2
 80118f2:	683a      	ldr	r2, [r7, #0]
 80118f4:	69d2      	ldr	r2, [r2, #28]
 80118f6:	4311      	orrs	r1, r2
 80118f8:	683a      	ldr	r2, [r7, #0]
 80118fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80118fc:	4311      	orrs	r1, r2
 80118fe:	683a      	ldr	r2, [r7, #0]
 8011900:	6a12      	ldr	r2, [r2, #32]
 8011902:	430a      	orrs	r2, r1
 8011904:	431a      	orrs	r2, r3
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801190e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011912:	d109      	bne.n	8011928 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8011918:	2b08      	cmp	r3, #8
 801191a:	d105      	bne.n	8011928 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011924:	69bb      	ldr	r3, [r7, #24]
 8011926:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	689a      	ldr	r2, [r3, #8]
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	683a      	ldr	r2, [r7, #0]
 8011936:	6992      	ldr	r2, [r2, #24]
 8011938:	649a      	str	r2, [r3, #72]	; 0x48
 801193a:	e074      	b.n	8011a26 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011940:	2b00      	cmp	r3, #0
 8011942:	d015      	beq.n	8011970 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8011944:	69bb      	ldr	r3, [r7, #24]
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	4b3c      	ldr	r3, [pc, #240]	; (8011a3c <OSPI_ConfigCmd+0x2ec>)
 801194a:	4013      	ands	r3, r2
 801194c:	683a      	ldr	r2, [r7, #0]
 801194e:	68d1      	ldr	r1, [r2, #12]
 8011950:	683a      	ldr	r2, [r7, #0]
 8011952:	6952      	ldr	r2, [r2, #20]
 8011954:	4311      	orrs	r1, r2
 8011956:	683a      	ldr	r2, [r7, #0]
 8011958:	6912      	ldr	r2, [r2, #16]
 801195a:	4311      	orrs	r1, r2
 801195c:	683a      	ldr	r2, [r7, #0]
 801195e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011960:	4311      	orrs	r1, r2
 8011962:	683a      	ldr	r2, [r7, #0]
 8011964:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011966:	430a      	orrs	r2, r1
 8011968:	431a      	orrs	r2, r3
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	601a      	str	r2, [r3, #0]
 801196e:	e01d      	b.n	80119ac <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	68d9      	ldr	r1, [r3, #12]
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	695b      	ldr	r3, [r3, #20]
 8011980:	4319      	orrs	r1, r3
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	691b      	ldr	r3, [r3, #16]
 8011986:	430b      	orrs	r3, r1
 8011988:	431a      	orrs	r2, r3
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011996:	d109      	bne.n	80119ac <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801199c:	2b08      	cmp	r3, #8
 801199e:	d105      	bne.n	80119ac <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80119a8:	69bb      	ldr	r3, [r7, #24]
 80119aa:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	689a      	ldr	r2, [r3, #8]
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	601a      	str	r2, [r3, #0]
 80119b4:	e037      	b.n	8011a26 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	69db      	ldr	r3, [r3, #28]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d02e      	beq.n	8011a1c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d015      	beq.n	80119f2 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	4b1d      	ldr	r3, [pc, #116]	; (8011a40 <OSPI_ConfigCmd+0x2f0>)
 80119cc:	4013      	ands	r3, r2
 80119ce:	683a      	ldr	r2, [r7, #0]
 80119d0:	69d1      	ldr	r1, [r2, #28]
 80119d2:	683a      	ldr	r2, [r7, #0]
 80119d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80119d6:	4311      	orrs	r1, r2
 80119d8:	683a      	ldr	r2, [r7, #0]
 80119da:	6a12      	ldr	r2, [r2, #32]
 80119dc:	4311      	orrs	r1, r2
 80119de:	683a      	ldr	r2, [r7, #0]
 80119e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80119e2:	4311      	orrs	r1, r2
 80119e4:	683a      	ldr	r2, [r7, #0]
 80119e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80119e8:	430a      	orrs	r2, r1
 80119ea:	431a      	orrs	r2, r3
 80119ec:	69bb      	ldr	r3, [r7, #24]
 80119ee:	601a      	str	r2, [r3, #0]
 80119f0:	e00e      	b.n	8011a10 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80119f2:	69bb      	ldr	r3, [r7, #24]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	69d9      	ldr	r1, [r3, #28]
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a02:	4319      	orrs	r1, r3
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	6a1b      	ldr	r3, [r3, #32]
 8011a08:	430b      	orrs	r3, r1
 8011a0a:	431a      	orrs	r2, r3
 8011a0c:	69bb      	ldr	r3, [r7, #24]
 8011a0e:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	683a      	ldr	r2, [r7, #0]
 8011a16:	6992      	ldr	r2, [r2, #24]
 8011a18:	649a      	str	r2, [r3, #72]	; 0x48
 8011a1a:	e004      	b.n	8011a26 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2208      	movs	r2, #8
 8011a24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8011a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3724      	adds	r7, #36	; 0x24
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr
 8011a34:	f0ffc0c0 	.word	0xf0ffc0c0
 8011a38:	ffffc0c0 	.word	0xffffc0c0
 8011a3c:	f0ffffc0 	.word	0xf0ffffc0
 8011a40:	f0ffc0ff 	.word	0xf0ffc0ff

08011a44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8011a4c:	4b29      	ldr	r3, [pc, #164]	; (8011af4 <HAL_PWREx_ConfigSupply+0xb0>)
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	f003 0307 	and.w	r3, r3, #7
 8011a54:	2b06      	cmp	r3, #6
 8011a56:	d00a      	beq.n	8011a6e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8011a58:	4b26      	ldr	r3, [pc, #152]	; (8011af4 <HAL_PWREx_ConfigSupply+0xb0>)
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d001      	beq.n	8011a6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8011a66:	2301      	movs	r3, #1
 8011a68:	e040      	b.n	8011aec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	e03e      	b.n	8011aec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8011a6e:	4b21      	ldr	r3, [pc, #132]	; (8011af4 <HAL_PWREx_ConfigSupply+0xb0>)
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8011a76:	491f      	ldr	r1, [pc, #124]	; (8011af4 <HAL_PWREx_ConfigSupply+0xb0>)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	4313      	orrs	r3, r2
 8011a7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8011a7e:	f7fa fb27 	bl	800c0d0 <HAL_GetTick>
 8011a82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011a84:	e009      	b.n	8011a9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011a86:	f7fa fb23 	bl	800c0d0 <HAL_GetTick>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011a94:	d901      	bls.n	8011a9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8011a96:	2301      	movs	r3, #1
 8011a98:	e028      	b.n	8011aec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011a9a:	4b16      	ldr	r3, [pc, #88]	; (8011af4 <HAL_PWREx_ConfigSupply+0xb0>)
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011aa6:	d1ee      	bne.n	8011a86 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2b1e      	cmp	r3, #30
 8011aac:	d008      	beq.n	8011ac0 <HAL_PWREx_ConfigSupply+0x7c>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8011ab2:	d005      	beq.n	8011ac0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2b1d      	cmp	r3, #29
 8011ab8:	d002      	beq.n	8011ac0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2b2d      	cmp	r3, #45	; 0x2d
 8011abe:	d114      	bne.n	8011aea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8011ac0:	f7fa fb06 	bl	800c0d0 <HAL_GetTick>
 8011ac4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8011ac6:	e009      	b.n	8011adc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011ac8:	f7fa fb02 	bl	800c0d0 <HAL_GetTick>
 8011acc:	4602      	mov	r2, r0
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011ad6:	d901      	bls.n	8011adc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8011ad8:	2301      	movs	r3, #1
 8011ada:	e007      	b.n	8011aec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8011adc:	4b05      	ldr	r3, [pc, #20]	; (8011af4 <HAL_PWREx_ConfigSupply+0xb0>)
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ae8:	d1ee      	bne.n	8011ac8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8011aea:	2300      	movs	r3, #0
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3710      	adds	r7, #16
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	58024800 	.word	0x58024800

08011af8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b08c      	sub	sp, #48	; 0x30
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d102      	bne.n	8011b0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011b06:	2301      	movs	r3, #1
 8011b08:	f000 bc1f 	b.w	801234a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f003 0301 	and.w	r3, r3, #1
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	f000 80b3 	beq.w	8011c80 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011b1a:	4b95      	ldr	r3, [pc, #596]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b1c:	691b      	ldr	r3, [r3, #16]
 8011b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011b24:	4b92      	ldr	r3, [pc, #584]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b28:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2c:	2b10      	cmp	r3, #16
 8011b2e:	d007      	beq.n	8011b40 <HAL_RCC_OscConfig+0x48>
 8011b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b32:	2b18      	cmp	r3, #24
 8011b34:	d112      	bne.n	8011b5c <HAL_RCC_OscConfig+0x64>
 8011b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b38:	f003 0303 	and.w	r3, r3, #3
 8011b3c:	2b02      	cmp	r3, #2
 8011b3e:	d10d      	bne.n	8011b5c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011b40:	4b8b      	ldr	r3, [pc, #556]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	f000 8098 	beq.w	8011c7e <HAL_RCC_OscConfig+0x186>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f040 8093 	bne.w	8011c7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8011b58:	2301      	movs	r3, #1
 8011b5a:	e3f6      	b.n	801234a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b64:	d106      	bne.n	8011b74 <HAL_RCC_OscConfig+0x7c>
 8011b66:	4b82      	ldr	r3, [pc, #520]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	4a81      	ldr	r2, [pc, #516]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011b70:	6013      	str	r3, [r2, #0]
 8011b72:	e058      	b.n	8011c26 <HAL_RCC_OscConfig+0x12e>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	685b      	ldr	r3, [r3, #4]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d112      	bne.n	8011ba2 <HAL_RCC_OscConfig+0xaa>
 8011b7c:	4b7c      	ldr	r3, [pc, #496]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4a7b      	ldr	r2, [pc, #492]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011b86:	6013      	str	r3, [r2, #0]
 8011b88:	4b79      	ldr	r3, [pc, #484]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	4a78      	ldr	r2, [pc, #480]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011b92:	6013      	str	r3, [r2, #0]
 8011b94:	4b76      	ldr	r3, [pc, #472]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	4a75      	ldr	r2, [pc, #468]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011b9e:	6013      	str	r3, [r2, #0]
 8011ba0:	e041      	b.n	8011c26 <HAL_RCC_OscConfig+0x12e>
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011baa:	d112      	bne.n	8011bd2 <HAL_RCC_OscConfig+0xda>
 8011bac:	4b70      	ldr	r3, [pc, #448]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	4a6f      	ldr	r2, [pc, #444]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011bb6:	6013      	str	r3, [r2, #0]
 8011bb8:	4b6d      	ldr	r3, [pc, #436]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	4a6c      	ldr	r2, [pc, #432]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011bc2:	6013      	str	r3, [r2, #0]
 8011bc4:	4b6a      	ldr	r3, [pc, #424]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4a69      	ldr	r2, [pc, #420]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011bce:	6013      	str	r3, [r2, #0]
 8011bd0:	e029      	b.n	8011c26 <HAL_RCC_OscConfig+0x12e>
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	685b      	ldr	r3, [r3, #4]
 8011bd6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8011bda:	d112      	bne.n	8011c02 <HAL_RCC_OscConfig+0x10a>
 8011bdc:	4b64      	ldr	r3, [pc, #400]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	4a63      	ldr	r2, [pc, #396]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011be6:	6013      	str	r3, [r2, #0]
 8011be8:	4b61      	ldr	r3, [pc, #388]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	4a60      	ldr	r2, [pc, #384]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011bf2:	6013      	str	r3, [r2, #0]
 8011bf4:	4b5e      	ldr	r3, [pc, #376]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	4a5d      	ldr	r2, [pc, #372]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011bfe:	6013      	str	r3, [r2, #0]
 8011c00:	e011      	b.n	8011c26 <HAL_RCC_OscConfig+0x12e>
 8011c02:	4b5b      	ldr	r3, [pc, #364]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	4a5a      	ldr	r2, [pc, #360]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c0c:	6013      	str	r3, [r2, #0]
 8011c0e:	4b58      	ldr	r3, [pc, #352]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	4a57      	ldr	r2, [pc, #348]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011c18:	6013      	str	r3, [r2, #0]
 8011c1a:	4b55      	ldr	r3, [pc, #340]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4a54      	ldr	r2, [pc, #336]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011c20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011c24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d013      	beq.n	8011c56 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c2e:	f7fa fa4f 	bl	800c0d0 <HAL_GetTick>
 8011c32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011c34:	e008      	b.n	8011c48 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011c36:	f7fa fa4b 	bl	800c0d0 <HAL_GetTick>
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3e:	1ad3      	subs	r3, r2, r3
 8011c40:	2b64      	cmp	r3, #100	; 0x64
 8011c42:	d901      	bls.n	8011c48 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8011c44:	2303      	movs	r3, #3
 8011c46:	e380      	b.n	801234a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011c48:	4b49      	ldr	r3, [pc, #292]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d0f0      	beq.n	8011c36 <HAL_RCC_OscConfig+0x13e>
 8011c54:	e014      	b.n	8011c80 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c56:	f7fa fa3b 	bl	800c0d0 <HAL_GetTick>
 8011c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011c5c:	e008      	b.n	8011c70 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011c5e:	f7fa fa37 	bl	800c0d0 <HAL_GetTick>
 8011c62:	4602      	mov	r2, r0
 8011c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c66:	1ad3      	subs	r3, r2, r3
 8011c68:	2b64      	cmp	r3, #100	; 0x64
 8011c6a:	d901      	bls.n	8011c70 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8011c6c:	2303      	movs	r3, #3
 8011c6e:	e36c      	b.n	801234a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011c70:	4b3f      	ldr	r3, [pc, #252]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d1f0      	bne.n	8011c5e <HAL_RCC_OscConfig+0x166>
 8011c7c:	e000      	b.n	8011c80 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011c7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	f003 0302 	and.w	r3, r3, #2
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f000 808c 	beq.w	8011da6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011c8e:	4b38      	ldr	r3, [pc, #224]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011c90:	691b      	ldr	r3, [r3, #16]
 8011c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011c96:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011c98:	4b35      	ldr	r3, [pc, #212]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c9c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011c9e:	6a3b      	ldr	r3, [r7, #32]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d007      	beq.n	8011cb4 <HAL_RCC_OscConfig+0x1bc>
 8011ca4:	6a3b      	ldr	r3, [r7, #32]
 8011ca6:	2b18      	cmp	r3, #24
 8011ca8:	d137      	bne.n	8011d1a <HAL_RCC_OscConfig+0x222>
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	f003 0303 	and.w	r3, r3, #3
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d132      	bne.n	8011d1a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011cb4:	4b2e      	ldr	r3, [pc, #184]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f003 0304 	and.w	r3, r3, #4
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d005      	beq.n	8011ccc <HAL_RCC_OscConfig+0x1d4>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d101      	bne.n	8011ccc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8011cc8:	2301      	movs	r3, #1
 8011cca:	e33e      	b.n	801234a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011ccc:	4b28      	ldr	r3, [pc, #160]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	f023 0219 	bic.w	r2, r3, #25
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	4925      	ldr	r1, [pc, #148]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011cda:	4313      	orrs	r3, r2
 8011cdc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011cde:	f7fa f9f7 	bl	800c0d0 <HAL_GetTick>
 8011ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011ce4:	e008      	b.n	8011cf8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011ce6:	f7fa f9f3 	bl	800c0d0 <HAL_GetTick>
 8011cea:	4602      	mov	r2, r0
 8011cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cee:	1ad3      	subs	r3, r2, r3
 8011cf0:	2b02      	cmp	r3, #2
 8011cf2:	d901      	bls.n	8011cf8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8011cf4:	2303      	movs	r3, #3
 8011cf6:	e328      	b.n	801234a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011cf8:	4b1d      	ldr	r3, [pc, #116]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f003 0304 	and.w	r3, r3, #4
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d0f0      	beq.n	8011ce6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d04:	4b1a      	ldr	r3, [pc, #104]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	691b      	ldr	r3, [r3, #16]
 8011d10:	061b      	lsls	r3, r3, #24
 8011d12:	4917      	ldr	r1, [pc, #92]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011d14:	4313      	orrs	r3, r2
 8011d16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011d18:	e045      	b.n	8011da6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d028      	beq.n	8011d74 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011d22:	4b13      	ldr	r3, [pc, #76]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f023 0219 	bic.w	r2, r3, #25
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	4910      	ldr	r1, [pc, #64]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011d30:	4313      	orrs	r3, r2
 8011d32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d34:	f7fa f9cc 	bl	800c0d0 <HAL_GetTick>
 8011d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011d3a:	e008      	b.n	8011d4e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011d3c:	f7fa f9c8 	bl	800c0d0 <HAL_GetTick>
 8011d40:	4602      	mov	r2, r0
 8011d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d44:	1ad3      	subs	r3, r2, r3
 8011d46:	2b02      	cmp	r3, #2
 8011d48:	d901      	bls.n	8011d4e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8011d4a:	2303      	movs	r3, #3
 8011d4c:	e2fd      	b.n	801234a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011d4e:	4b08      	ldr	r3, [pc, #32]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f003 0304 	and.w	r3, r3, #4
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d0f0      	beq.n	8011d3c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d5a:	4b05      	ldr	r3, [pc, #20]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	691b      	ldr	r3, [r3, #16]
 8011d66:	061b      	lsls	r3, r3, #24
 8011d68:	4901      	ldr	r1, [pc, #4]	; (8011d70 <HAL_RCC_OscConfig+0x278>)
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	604b      	str	r3, [r1, #4]
 8011d6e:	e01a      	b.n	8011da6 <HAL_RCC_OscConfig+0x2ae>
 8011d70:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011d74:	4b97      	ldr	r3, [pc, #604]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	4a96      	ldr	r2, [pc, #600]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011d7a:	f023 0301 	bic.w	r3, r3, #1
 8011d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d80:	f7fa f9a6 	bl	800c0d0 <HAL_GetTick>
 8011d84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011d86:	e008      	b.n	8011d9a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011d88:	f7fa f9a2 	bl	800c0d0 <HAL_GetTick>
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	1ad3      	subs	r3, r2, r3
 8011d92:	2b02      	cmp	r3, #2
 8011d94:	d901      	bls.n	8011d9a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8011d96:	2303      	movs	r3, #3
 8011d98:	e2d7      	b.n	801234a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011d9a:	4b8e      	ldr	r3, [pc, #568]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f003 0304 	and.w	r3, r3, #4
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d1f0      	bne.n	8011d88 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f003 0310 	and.w	r3, r3, #16
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d06a      	beq.n	8011e88 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011db2:	4b88      	ldr	r3, [pc, #544]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011db4:	691b      	ldr	r3, [r3, #16]
 8011db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011dba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011dbc:	4b85      	ldr	r3, [pc, #532]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dc0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8011dc2:	69bb      	ldr	r3, [r7, #24]
 8011dc4:	2b08      	cmp	r3, #8
 8011dc6:	d007      	beq.n	8011dd8 <HAL_RCC_OscConfig+0x2e0>
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	2b18      	cmp	r3, #24
 8011dcc:	d11b      	bne.n	8011e06 <HAL_RCC_OscConfig+0x30e>
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	f003 0303 	and.w	r3, r3, #3
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d116      	bne.n	8011e06 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011dd8:	4b7e      	ldr	r3, [pc, #504]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d005      	beq.n	8011df0 <HAL_RCC_OscConfig+0x2f8>
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	69db      	ldr	r3, [r3, #28]
 8011de8:	2b80      	cmp	r3, #128	; 0x80
 8011dea:	d001      	beq.n	8011df0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8011dec:	2301      	movs	r3, #1
 8011dee:	e2ac      	b.n	801234a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011df0:	4b78      	ldr	r3, [pc, #480]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6a1b      	ldr	r3, [r3, #32]
 8011dfc:	061b      	lsls	r3, r3, #24
 8011dfe:	4975      	ldr	r1, [pc, #468]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011e00:	4313      	orrs	r3, r2
 8011e02:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011e04:	e040      	b.n	8011e88 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	69db      	ldr	r3, [r3, #28]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d023      	beq.n	8011e56 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011e0e:	4b71      	ldr	r3, [pc, #452]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	4a70      	ldr	r2, [pc, #448]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e1a:	f7fa f959 	bl	800c0d0 <HAL_GetTick>
 8011e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011e20:	e008      	b.n	8011e34 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011e22:	f7fa f955 	bl	800c0d0 <HAL_GetTick>
 8011e26:	4602      	mov	r2, r0
 8011e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2a:	1ad3      	subs	r3, r2, r3
 8011e2c:	2b02      	cmp	r3, #2
 8011e2e:	d901      	bls.n	8011e34 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8011e30:	2303      	movs	r3, #3
 8011e32:	e28a      	b.n	801234a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011e34:	4b67      	ldr	r3, [pc, #412]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d0f0      	beq.n	8011e22 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011e40:	4b64      	ldr	r3, [pc, #400]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011e42:	68db      	ldr	r3, [r3, #12]
 8011e44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6a1b      	ldr	r3, [r3, #32]
 8011e4c:	061b      	lsls	r3, r3, #24
 8011e4e:	4961      	ldr	r1, [pc, #388]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011e50:	4313      	orrs	r3, r2
 8011e52:	60cb      	str	r3, [r1, #12]
 8011e54:	e018      	b.n	8011e88 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011e56:	4b5f      	ldr	r3, [pc, #380]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	4a5e      	ldr	r2, [pc, #376]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e62:	f7fa f935 	bl	800c0d0 <HAL_GetTick>
 8011e66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011e68:	e008      	b.n	8011e7c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011e6a:	f7fa f931 	bl	800c0d0 <HAL_GetTick>
 8011e6e:	4602      	mov	r2, r0
 8011e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d901      	bls.n	8011e7c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8011e78:	2303      	movs	r3, #3
 8011e7a:	e266      	b.n	801234a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011e7c:	4b55      	ldr	r3, [pc, #340]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d1f0      	bne.n	8011e6a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f003 0308 	and.w	r3, r3, #8
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d036      	beq.n	8011f02 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	695b      	ldr	r3, [r3, #20]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d019      	beq.n	8011ed0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011e9c:	4b4d      	ldr	r3, [pc, #308]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ea0:	4a4c      	ldr	r2, [pc, #304]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011ea2:	f043 0301 	orr.w	r3, r3, #1
 8011ea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011ea8:	f7fa f912 	bl	800c0d0 <HAL_GetTick>
 8011eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011eae:	e008      	b.n	8011ec2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011eb0:	f7fa f90e 	bl	800c0d0 <HAL_GetTick>
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb8:	1ad3      	subs	r3, r2, r3
 8011eba:	2b02      	cmp	r3, #2
 8011ebc:	d901      	bls.n	8011ec2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8011ebe:	2303      	movs	r3, #3
 8011ec0:	e243      	b.n	801234a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011ec2:	4b44      	ldr	r3, [pc, #272]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ec6:	f003 0302 	and.w	r3, r3, #2
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d0f0      	beq.n	8011eb0 <HAL_RCC_OscConfig+0x3b8>
 8011ece:	e018      	b.n	8011f02 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011ed0:	4b40      	ldr	r3, [pc, #256]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ed4:	4a3f      	ldr	r2, [pc, #252]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011ed6:	f023 0301 	bic.w	r3, r3, #1
 8011eda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011edc:	f7fa f8f8 	bl	800c0d0 <HAL_GetTick>
 8011ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011ee2:	e008      	b.n	8011ef6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011ee4:	f7fa f8f4 	bl	800c0d0 <HAL_GetTick>
 8011ee8:	4602      	mov	r2, r0
 8011eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eec:	1ad3      	subs	r3, r2, r3
 8011eee:	2b02      	cmp	r3, #2
 8011ef0:	d901      	bls.n	8011ef6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8011ef2:	2303      	movs	r3, #3
 8011ef4:	e229      	b.n	801234a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011ef6:	4b37      	ldr	r3, [pc, #220]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011efa:	f003 0302 	and.w	r3, r3, #2
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d1f0      	bne.n	8011ee4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f003 0320 	and.w	r3, r3, #32
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d036      	beq.n	8011f7c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	699b      	ldr	r3, [r3, #24]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d019      	beq.n	8011f4a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011f16:	4b2f      	ldr	r3, [pc, #188]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	4a2e      	ldr	r2, [pc, #184]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011f20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011f22:	f7fa f8d5 	bl	800c0d0 <HAL_GetTick>
 8011f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011f28:	e008      	b.n	8011f3c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011f2a:	f7fa f8d1 	bl	800c0d0 <HAL_GetTick>
 8011f2e:	4602      	mov	r2, r0
 8011f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f32:	1ad3      	subs	r3, r2, r3
 8011f34:	2b02      	cmp	r3, #2
 8011f36:	d901      	bls.n	8011f3c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8011f38:	2303      	movs	r3, #3
 8011f3a:	e206      	b.n	801234a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011f3c:	4b25      	ldr	r3, [pc, #148]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d0f0      	beq.n	8011f2a <HAL_RCC_OscConfig+0x432>
 8011f48:	e018      	b.n	8011f7c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011f4a:	4b22      	ldr	r3, [pc, #136]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	4a21      	ldr	r2, [pc, #132]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011f56:	f7fa f8bb 	bl	800c0d0 <HAL_GetTick>
 8011f5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011f5c:	e008      	b.n	8011f70 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011f5e:	f7fa f8b7 	bl	800c0d0 <HAL_GetTick>
 8011f62:	4602      	mov	r2, r0
 8011f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f66:	1ad3      	subs	r3, r2, r3
 8011f68:	2b02      	cmp	r3, #2
 8011f6a:	d901      	bls.n	8011f70 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8011f6c:	2303      	movs	r3, #3
 8011f6e:	e1ec      	b.n	801234a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011f70:	4b18      	ldr	r3, [pc, #96]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d1f0      	bne.n	8011f5e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f003 0304 	and.w	r3, r3, #4
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	f000 80af 	beq.w	80120e8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011f8a:	4b13      	ldr	r3, [pc, #76]	; (8011fd8 <HAL_RCC_OscConfig+0x4e0>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	4a12      	ldr	r2, [pc, #72]	; (8011fd8 <HAL_RCC_OscConfig+0x4e0>)
 8011f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011f96:	f7fa f89b 	bl	800c0d0 <HAL_GetTick>
 8011f9a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011f9c:	e008      	b.n	8011fb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011f9e:	f7fa f897 	bl	800c0d0 <HAL_GetTick>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa6:	1ad3      	subs	r3, r2, r3
 8011fa8:	2b64      	cmp	r3, #100	; 0x64
 8011faa:	d901      	bls.n	8011fb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8011fac:	2303      	movs	r3, #3
 8011fae:	e1cc      	b.n	801234a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011fb0:	4b09      	ldr	r3, [pc, #36]	; (8011fd8 <HAL_RCC_OscConfig+0x4e0>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d0f0      	beq.n	8011f9e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	689b      	ldr	r3, [r3, #8]
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	d10b      	bne.n	8011fdc <HAL_RCC_OscConfig+0x4e4>
 8011fc4:	4b03      	ldr	r3, [pc, #12]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fc8:	4a02      	ldr	r2, [pc, #8]	; (8011fd4 <HAL_RCC_OscConfig+0x4dc>)
 8011fca:	f043 0301 	orr.w	r3, r3, #1
 8011fce:	6713      	str	r3, [r2, #112]	; 0x70
 8011fd0:	e05b      	b.n	801208a <HAL_RCC_OscConfig+0x592>
 8011fd2:	bf00      	nop
 8011fd4:	58024400 	.word	0x58024400
 8011fd8:	58024800 	.word	0x58024800
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	689b      	ldr	r3, [r3, #8]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d112      	bne.n	801200a <HAL_RCC_OscConfig+0x512>
 8011fe4:	4b9d      	ldr	r3, [pc, #628]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8011fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fe8:	4a9c      	ldr	r2, [pc, #624]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8011fea:	f023 0301 	bic.w	r3, r3, #1
 8011fee:	6713      	str	r3, [r2, #112]	; 0x70
 8011ff0:	4b9a      	ldr	r3, [pc, #616]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8011ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff4:	4a99      	ldr	r2, [pc, #612]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8011ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8011ffc:	4b97      	ldr	r3, [pc, #604]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8011ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012000:	4a96      	ldr	r2, [pc, #600]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012002:	f023 0304 	bic.w	r3, r3, #4
 8012006:	6713      	str	r3, [r2, #112]	; 0x70
 8012008:	e03f      	b.n	801208a <HAL_RCC_OscConfig+0x592>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	689b      	ldr	r3, [r3, #8]
 801200e:	2b05      	cmp	r3, #5
 8012010:	d112      	bne.n	8012038 <HAL_RCC_OscConfig+0x540>
 8012012:	4b92      	ldr	r3, [pc, #584]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012016:	4a91      	ldr	r2, [pc, #580]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012018:	f043 0304 	orr.w	r3, r3, #4
 801201c:	6713      	str	r3, [r2, #112]	; 0x70
 801201e:	4b8f      	ldr	r3, [pc, #572]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012022:	4a8e      	ldr	r2, [pc, #568]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012028:	6713      	str	r3, [r2, #112]	; 0x70
 801202a:	4b8c      	ldr	r3, [pc, #560]	; (801225c <HAL_RCC_OscConfig+0x764>)
 801202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801202e:	4a8b      	ldr	r2, [pc, #556]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012030:	f043 0301 	orr.w	r3, r3, #1
 8012034:	6713      	str	r3, [r2, #112]	; 0x70
 8012036:	e028      	b.n	801208a <HAL_RCC_OscConfig+0x592>
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	689b      	ldr	r3, [r3, #8]
 801203c:	2b85      	cmp	r3, #133	; 0x85
 801203e:	d112      	bne.n	8012066 <HAL_RCC_OscConfig+0x56e>
 8012040:	4b86      	ldr	r3, [pc, #536]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012044:	4a85      	ldr	r2, [pc, #532]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012046:	f043 0304 	orr.w	r3, r3, #4
 801204a:	6713      	str	r3, [r2, #112]	; 0x70
 801204c:	4b83      	ldr	r3, [pc, #524]	; (801225c <HAL_RCC_OscConfig+0x764>)
 801204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012050:	4a82      	ldr	r2, [pc, #520]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012056:	6713      	str	r3, [r2, #112]	; 0x70
 8012058:	4b80      	ldr	r3, [pc, #512]	; (801225c <HAL_RCC_OscConfig+0x764>)
 801205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801205c:	4a7f      	ldr	r2, [pc, #508]	; (801225c <HAL_RCC_OscConfig+0x764>)
 801205e:	f043 0301 	orr.w	r3, r3, #1
 8012062:	6713      	str	r3, [r2, #112]	; 0x70
 8012064:	e011      	b.n	801208a <HAL_RCC_OscConfig+0x592>
 8012066:	4b7d      	ldr	r3, [pc, #500]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801206a:	4a7c      	ldr	r2, [pc, #496]	; (801225c <HAL_RCC_OscConfig+0x764>)
 801206c:	f023 0301 	bic.w	r3, r3, #1
 8012070:	6713      	str	r3, [r2, #112]	; 0x70
 8012072:	4b7a      	ldr	r3, [pc, #488]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012076:	4a79      	ldr	r2, [pc, #484]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012078:	f023 0304 	bic.w	r3, r3, #4
 801207c:	6713      	str	r3, [r2, #112]	; 0x70
 801207e:	4b77      	ldr	r3, [pc, #476]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012082:	4a76      	ldr	r2, [pc, #472]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012088:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	689b      	ldr	r3, [r3, #8]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d015      	beq.n	80120be <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012092:	f7fa f81d 	bl	800c0d0 <HAL_GetTick>
 8012096:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012098:	e00a      	b.n	80120b0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801209a:	f7fa f819 	bl	800c0d0 <HAL_GetTick>
 801209e:	4602      	mov	r2, r0
 80120a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a2:	1ad3      	subs	r3, r2, r3
 80120a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80120a8:	4293      	cmp	r3, r2
 80120aa:	d901      	bls.n	80120b0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80120ac:	2303      	movs	r3, #3
 80120ae:	e14c      	b.n	801234a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80120b0:	4b6a      	ldr	r3, [pc, #424]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80120b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120b4:	f003 0302 	and.w	r3, r3, #2
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d0ee      	beq.n	801209a <HAL_RCC_OscConfig+0x5a2>
 80120bc:	e014      	b.n	80120e8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80120be:	f7fa f807 	bl	800c0d0 <HAL_GetTick>
 80120c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80120c4:	e00a      	b.n	80120dc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80120c6:	f7fa f803 	bl	800c0d0 <HAL_GetTick>
 80120ca:	4602      	mov	r2, r0
 80120cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ce:	1ad3      	subs	r3, r2, r3
 80120d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80120d4:	4293      	cmp	r3, r2
 80120d6:	d901      	bls.n	80120dc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80120d8:	2303      	movs	r3, #3
 80120da:	e136      	b.n	801234a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80120dc:	4b5f      	ldr	r3, [pc, #380]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80120de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120e0:	f003 0302 	and.w	r3, r3, #2
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d1ee      	bne.n	80120c6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	f000 812b 	beq.w	8012348 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80120f2:	4b5a      	ldr	r3, [pc, #360]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80120f4:	691b      	ldr	r3, [r3, #16]
 80120f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80120fa:	2b18      	cmp	r3, #24
 80120fc:	f000 80bb 	beq.w	8012276 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012104:	2b02      	cmp	r3, #2
 8012106:	f040 8095 	bne.w	8012234 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801210a:	4b54      	ldr	r3, [pc, #336]	; (801225c <HAL_RCC_OscConfig+0x764>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	4a53      	ldr	r2, [pc, #332]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012116:	f7f9 ffdb 	bl	800c0d0 <HAL_GetTick>
 801211a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801211c:	e008      	b.n	8012130 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801211e:	f7f9 ffd7 	bl	800c0d0 <HAL_GetTick>
 8012122:	4602      	mov	r2, r0
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	1ad3      	subs	r3, r2, r3
 8012128:	2b02      	cmp	r3, #2
 801212a:	d901      	bls.n	8012130 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 801212c:	2303      	movs	r3, #3
 801212e:	e10c      	b.n	801234a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012130:	4b4a      	ldr	r3, [pc, #296]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012138:	2b00      	cmp	r3, #0
 801213a:	d1f0      	bne.n	801211e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801213c:	4b47      	ldr	r3, [pc, #284]	; (801225c <HAL_RCC_OscConfig+0x764>)
 801213e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012140:	4b47      	ldr	r3, [pc, #284]	; (8012260 <HAL_RCC_OscConfig+0x768>)
 8012142:	4013      	ands	r3, r2
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801214c:	0112      	lsls	r2, r2, #4
 801214e:	430a      	orrs	r2, r1
 8012150:	4942      	ldr	r1, [pc, #264]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012152:	4313      	orrs	r3, r2
 8012154:	628b      	str	r3, [r1, #40]	; 0x28
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801215a:	3b01      	subs	r3, #1
 801215c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012164:	3b01      	subs	r3, #1
 8012166:	025b      	lsls	r3, r3, #9
 8012168:	b29b      	uxth	r3, r3
 801216a:	431a      	orrs	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012170:	3b01      	subs	r3, #1
 8012172:	041b      	lsls	r3, r3, #16
 8012174:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012178:	431a      	orrs	r2, r3
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801217e:	3b01      	subs	r3, #1
 8012180:	061b      	lsls	r3, r3, #24
 8012182:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012186:	4935      	ldr	r1, [pc, #212]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012188:	4313      	orrs	r3, r2
 801218a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801218c:	4b33      	ldr	r3, [pc, #204]	; (801225c <HAL_RCC_OscConfig+0x764>)
 801218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012190:	4a32      	ldr	r2, [pc, #200]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012192:	f023 0301 	bic.w	r3, r3, #1
 8012196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012198:	4b30      	ldr	r3, [pc, #192]	; (801225c <HAL_RCC_OscConfig+0x764>)
 801219a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801219c:	4b31      	ldr	r3, [pc, #196]	; (8012264 <HAL_RCC_OscConfig+0x76c>)
 801219e:	4013      	ands	r3, r2
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80121a4:	00d2      	lsls	r2, r2, #3
 80121a6:	492d      	ldr	r1, [pc, #180]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121a8:	4313      	orrs	r3, r2
 80121aa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80121ac:	4b2b      	ldr	r3, [pc, #172]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b0:	f023 020c 	bic.w	r2, r3, #12
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121b8:	4928      	ldr	r1, [pc, #160]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121ba:	4313      	orrs	r3, r2
 80121bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80121be:	4b27      	ldr	r3, [pc, #156]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121c2:	f023 0202 	bic.w	r2, r3, #2
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121ca:	4924      	ldr	r1, [pc, #144]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121cc:	4313      	orrs	r3, r2
 80121ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80121d0:	4b22      	ldr	r3, [pc, #136]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d4:	4a21      	ldr	r2, [pc, #132]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80121da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121dc:	4b1f      	ldr	r3, [pc, #124]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121e0:	4a1e      	ldr	r2, [pc, #120]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80121e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80121e8:	4b1c      	ldr	r3, [pc, #112]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ec:	4a1b      	ldr	r2, [pc, #108]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80121f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80121f4:	4b19      	ldr	r3, [pc, #100]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f8:	4a18      	ldr	r2, [pc, #96]	; (801225c <HAL_RCC_OscConfig+0x764>)
 80121fa:	f043 0301 	orr.w	r3, r3, #1
 80121fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012200:	4b16      	ldr	r3, [pc, #88]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	4a15      	ldr	r2, [pc, #84]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801220a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801220c:	f7f9 ff60 	bl	800c0d0 <HAL_GetTick>
 8012210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012212:	e008      	b.n	8012226 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012214:	f7f9 ff5c 	bl	800c0d0 <HAL_GetTick>
 8012218:	4602      	mov	r2, r0
 801221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221c:	1ad3      	subs	r3, r2, r3
 801221e:	2b02      	cmp	r3, #2
 8012220:	d901      	bls.n	8012226 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8012222:	2303      	movs	r3, #3
 8012224:	e091      	b.n	801234a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012226:	4b0d      	ldr	r3, [pc, #52]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801222e:	2b00      	cmp	r3, #0
 8012230:	d0f0      	beq.n	8012214 <HAL_RCC_OscConfig+0x71c>
 8012232:	e089      	b.n	8012348 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012234:	4b09      	ldr	r3, [pc, #36]	; (801225c <HAL_RCC_OscConfig+0x764>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	4a08      	ldr	r2, [pc, #32]	; (801225c <HAL_RCC_OscConfig+0x764>)
 801223a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801223e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012240:	f7f9 ff46 	bl	800c0d0 <HAL_GetTick>
 8012244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012246:	e00f      	b.n	8012268 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012248:	f7f9 ff42 	bl	800c0d0 <HAL_GetTick>
 801224c:	4602      	mov	r2, r0
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	1ad3      	subs	r3, r2, r3
 8012252:	2b02      	cmp	r3, #2
 8012254:	d908      	bls.n	8012268 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8012256:	2303      	movs	r3, #3
 8012258:	e077      	b.n	801234a <HAL_RCC_OscConfig+0x852>
 801225a:	bf00      	nop
 801225c:	58024400 	.word	0x58024400
 8012260:	fffffc0c 	.word	0xfffffc0c
 8012264:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012268:	4b3a      	ldr	r3, [pc, #232]	; (8012354 <HAL_RCC_OscConfig+0x85c>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012270:	2b00      	cmp	r3, #0
 8012272:	d1e9      	bne.n	8012248 <HAL_RCC_OscConfig+0x750>
 8012274:	e068      	b.n	8012348 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8012276:	4b37      	ldr	r3, [pc, #220]	; (8012354 <HAL_RCC_OscConfig+0x85c>)
 8012278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801227a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801227c:	4b35      	ldr	r3, [pc, #212]	; (8012354 <HAL_RCC_OscConfig+0x85c>)
 801227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012280:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012286:	2b01      	cmp	r3, #1
 8012288:	d031      	beq.n	80122ee <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	f003 0203 	and.w	r2, r3, #3
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012294:	429a      	cmp	r2, r3
 8012296:	d12a      	bne.n	80122ee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	091b      	lsrs	r3, r3, #4
 801229c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d122      	bne.n	80122ee <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d11a      	bne.n	80122ee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	0a5b      	lsrs	r3, r3, #9
 80122bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122c4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d111      	bne.n	80122ee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	0c1b      	lsrs	r3, r3, #16
 80122ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80122d8:	429a      	cmp	r2, r3
 80122da:	d108      	bne.n	80122ee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	0e1b      	lsrs	r3, r3, #24
 80122e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d001      	beq.n	80122f2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80122ee:	2301      	movs	r3, #1
 80122f0:	e02b      	b.n	801234a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80122f2:	4b18      	ldr	r3, [pc, #96]	; (8012354 <HAL_RCC_OscConfig+0x85c>)
 80122f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122f6:	08db      	lsrs	r3, r3, #3
 80122f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80122fc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012302:	693a      	ldr	r2, [r7, #16]
 8012304:	429a      	cmp	r2, r3
 8012306:	d01f      	beq.n	8012348 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8012308:	4b12      	ldr	r3, [pc, #72]	; (8012354 <HAL_RCC_OscConfig+0x85c>)
 801230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801230c:	4a11      	ldr	r2, [pc, #68]	; (8012354 <HAL_RCC_OscConfig+0x85c>)
 801230e:	f023 0301 	bic.w	r3, r3, #1
 8012312:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012314:	f7f9 fedc 	bl	800c0d0 <HAL_GetTick>
 8012318:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801231a:	bf00      	nop
 801231c:	f7f9 fed8 	bl	800c0d0 <HAL_GetTick>
 8012320:	4602      	mov	r2, r0
 8012322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012324:	4293      	cmp	r3, r2
 8012326:	d0f9      	beq.n	801231c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012328:	4b0a      	ldr	r3, [pc, #40]	; (8012354 <HAL_RCC_OscConfig+0x85c>)
 801232a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801232c:	4b0a      	ldr	r3, [pc, #40]	; (8012358 <HAL_RCC_OscConfig+0x860>)
 801232e:	4013      	ands	r3, r2
 8012330:	687a      	ldr	r2, [r7, #4]
 8012332:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8012334:	00d2      	lsls	r2, r2, #3
 8012336:	4907      	ldr	r1, [pc, #28]	; (8012354 <HAL_RCC_OscConfig+0x85c>)
 8012338:	4313      	orrs	r3, r2
 801233a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801233c:	4b05      	ldr	r3, [pc, #20]	; (8012354 <HAL_RCC_OscConfig+0x85c>)
 801233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012340:	4a04      	ldr	r2, [pc, #16]	; (8012354 <HAL_RCC_OscConfig+0x85c>)
 8012342:	f043 0301 	orr.w	r3, r3, #1
 8012346:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8012348:	2300      	movs	r3, #0
}
 801234a:	4618      	mov	r0, r3
 801234c:	3730      	adds	r7, #48	; 0x30
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	58024400 	.word	0x58024400
 8012358:	ffff0007 	.word	0xffff0007

0801235c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b086      	sub	sp, #24
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d101      	bne.n	8012370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801236c:	2301      	movs	r3, #1
 801236e:	e19c      	b.n	80126aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8012370:	4b8a      	ldr	r3, [pc, #552]	; (801259c <HAL_RCC_ClockConfig+0x240>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	f003 030f 	and.w	r3, r3, #15
 8012378:	683a      	ldr	r2, [r7, #0]
 801237a:	429a      	cmp	r2, r3
 801237c:	d910      	bls.n	80123a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801237e:	4b87      	ldr	r3, [pc, #540]	; (801259c <HAL_RCC_ClockConfig+0x240>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f023 020f 	bic.w	r2, r3, #15
 8012386:	4985      	ldr	r1, [pc, #532]	; (801259c <HAL_RCC_ClockConfig+0x240>)
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	4313      	orrs	r3, r2
 801238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801238e:	4b83      	ldr	r3, [pc, #524]	; (801259c <HAL_RCC_ClockConfig+0x240>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f003 030f 	and.w	r3, r3, #15
 8012396:	683a      	ldr	r2, [r7, #0]
 8012398:	429a      	cmp	r2, r3
 801239a:	d001      	beq.n	80123a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801239c:	2301      	movs	r3, #1
 801239e:	e184      	b.n	80126aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f003 0304 	and.w	r3, r3, #4
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d010      	beq.n	80123ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	691a      	ldr	r2, [r3, #16]
 80123b0:	4b7b      	ldr	r3, [pc, #492]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80123b2:	699b      	ldr	r3, [r3, #24]
 80123b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d908      	bls.n	80123ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80123bc:	4b78      	ldr	r3, [pc, #480]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80123be:	699b      	ldr	r3, [r3, #24]
 80123c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	691b      	ldr	r3, [r3, #16]
 80123c8:	4975      	ldr	r1, [pc, #468]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80123ca:	4313      	orrs	r3, r2
 80123cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f003 0308 	and.w	r3, r3, #8
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d010      	beq.n	80123fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	695a      	ldr	r2, [r3, #20]
 80123de:	4b70      	ldr	r3, [pc, #448]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80123e0:	69db      	ldr	r3, [r3, #28]
 80123e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d908      	bls.n	80123fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80123ea:	4b6d      	ldr	r3, [pc, #436]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80123ec:	69db      	ldr	r3, [r3, #28]
 80123ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	695b      	ldr	r3, [r3, #20]
 80123f6:	496a      	ldr	r1, [pc, #424]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80123f8:	4313      	orrs	r3, r2
 80123fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	f003 0310 	and.w	r3, r3, #16
 8012404:	2b00      	cmp	r3, #0
 8012406:	d010      	beq.n	801242a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	699a      	ldr	r2, [r3, #24]
 801240c:	4b64      	ldr	r3, [pc, #400]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 801240e:	69db      	ldr	r3, [r3, #28]
 8012410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012414:	429a      	cmp	r2, r3
 8012416:	d908      	bls.n	801242a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012418:	4b61      	ldr	r3, [pc, #388]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 801241a:	69db      	ldr	r3, [r3, #28]
 801241c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	699b      	ldr	r3, [r3, #24]
 8012424:	495e      	ldr	r1, [pc, #376]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 8012426:	4313      	orrs	r3, r2
 8012428:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	f003 0320 	and.w	r3, r3, #32
 8012432:	2b00      	cmp	r3, #0
 8012434:	d010      	beq.n	8012458 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	69da      	ldr	r2, [r3, #28]
 801243a:	4b59      	ldr	r3, [pc, #356]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 801243c:	6a1b      	ldr	r3, [r3, #32]
 801243e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012442:	429a      	cmp	r2, r3
 8012444:	d908      	bls.n	8012458 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8012446:	4b56      	ldr	r3, [pc, #344]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 8012448:	6a1b      	ldr	r3, [r3, #32]
 801244a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	69db      	ldr	r3, [r3, #28]
 8012452:	4953      	ldr	r1, [pc, #332]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 8012454:	4313      	orrs	r3, r2
 8012456:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	f003 0302 	and.w	r3, r3, #2
 8012460:	2b00      	cmp	r3, #0
 8012462:	d010      	beq.n	8012486 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	68da      	ldr	r2, [r3, #12]
 8012468:	4b4d      	ldr	r3, [pc, #308]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 801246a:	699b      	ldr	r3, [r3, #24]
 801246c:	f003 030f 	and.w	r3, r3, #15
 8012470:	429a      	cmp	r2, r3
 8012472:	d908      	bls.n	8012486 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012474:	4b4a      	ldr	r3, [pc, #296]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 8012476:	699b      	ldr	r3, [r3, #24]
 8012478:	f023 020f 	bic.w	r2, r3, #15
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	4947      	ldr	r1, [pc, #284]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 8012482:	4313      	orrs	r3, r2
 8012484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	f003 0301 	and.w	r3, r3, #1
 801248e:	2b00      	cmp	r3, #0
 8012490:	d055      	beq.n	801253e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8012492:	4b43      	ldr	r3, [pc, #268]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 8012494:	699b      	ldr	r3, [r3, #24]
 8012496:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	689b      	ldr	r3, [r3, #8]
 801249e:	4940      	ldr	r1, [pc, #256]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80124a0:	4313      	orrs	r3, r2
 80124a2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	2b02      	cmp	r3, #2
 80124aa:	d107      	bne.n	80124bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80124ac:	4b3c      	ldr	r3, [pc, #240]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d121      	bne.n	80124fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80124b8:	2301      	movs	r3, #1
 80124ba:	e0f6      	b.n	80126aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	2b03      	cmp	r3, #3
 80124c2:	d107      	bne.n	80124d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80124c4:	4b36      	ldr	r3, [pc, #216]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d115      	bne.n	80124fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80124d0:	2301      	movs	r3, #1
 80124d2:	e0ea      	b.n	80126aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d107      	bne.n	80124ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80124dc:	4b30      	ldr	r3, [pc, #192]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d109      	bne.n	80124fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80124e8:	2301      	movs	r3, #1
 80124ea:	e0de      	b.n	80126aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80124ec:	4b2c      	ldr	r3, [pc, #176]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	f003 0304 	and.w	r3, r3, #4
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d101      	bne.n	80124fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80124f8:	2301      	movs	r3, #1
 80124fa:	e0d6      	b.n	80126aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80124fc:	4b28      	ldr	r3, [pc, #160]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 80124fe:	691b      	ldr	r3, [r3, #16]
 8012500:	f023 0207 	bic.w	r2, r3, #7
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	4925      	ldr	r1, [pc, #148]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 801250a:	4313      	orrs	r3, r2
 801250c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801250e:	f7f9 fddf 	bl	800c0d0 <HAL_GetTick>
 8012512:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012514:	e00a      	b.n	801252c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012516:	f7f9 fddb 	bl	800c0d0 <HAL_GetTick>
 801251a:	4602      	mov	r2, r0
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	1ad3      	subs	r3, r2, r3
 8012520:	f241 3288 	movw	r2, #5000	; 0x1388
 8012524:	4293      	cmp	r3, r2
 8012526:	d901      	bls.n	801252c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8012528:	2303      	movs	r3, #3
 801252a:	e0be      	b.n	80126aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801252c:	4b1c      	ldr	r3, [pc, #112]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 801252e:	691b      	ldr	r3, [r3, #16]
 8012530:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	00db      	lsls	r3, r3, #3
 801253a:	429a      	cmp	r2, r3
 801253c:	d1eb      	bne.n	8012516 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	f003 0302 	and.w	r3, r3, #2
 8012546:	2b00      	cmp	r3, #0
 8012548:	d010      	beq.n	801256c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	68da      	ldr	r2, [r3, #12]
 801254e:	4b14      	ldr	r3, [pc, #80]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 8012550:	699b      	ldr	r3, [r3, #24]
 8012552:	f003 030f 	and.w	r3, r3, #15
 8012556:	429a      	cmp	r2, r3
 8012558:	d208      	bcs.n	801256c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801255a:	4b11      	ldr	r3, [pc, #68]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 801255c:	699b      	ldr	r3, [r3, #24]
 801255e:	f023 020f 	bic.w	r2, r3, #15
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	68db      	ldr	r3, [r3, #12]
 8012566:	490e      	ldr	r1, [pc, #56]	; (80125a0 <HAL_RCC_ClockConfig+0x244>)
 8012568:	4313      	orrs	r3, r2
 801256a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801256c:	4b0b      	ldr	r3, [pc, #44]	; (801259c <HAL_RCC_ClockConfig+0x240>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f003 030f 	and.w	r3, r3, #15
 8012574:	683a      	ldr	r2, [r7, #0]
 8012576:	429a      	cmp	r2, r3
 8012578:	d214      	bcs.n	80125a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801257a:	4b08      	ldr	r3, [pc, #32]	; (801259c <HAL_RCC_ClockConfig+0x240>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f023 020f 	bic.w	r2, r3, #15
 8012582:	4906      	ldr	r1, [pc, #24]	; (801259c <HAL_RCC_ClockConfig+0x240>)
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	4313      	orrs	r3, r2
 8012588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801258a:	4b04      	ldr	r3, [pc, #16]	; (801259c <HAL_RCC_ClockConfig+0x240>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f003 030f 	and.w	r3, r3, #15
 8012592:	683a      	ldr	r2, [r7, #0]
 8012594:	429a      	cmp	r2, r3
 8012596:	d005      	beq.n	80125a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8012598:	2301      	movs	r3, #1
 801259a:	e086      	b.n	80126aa <HAL_RCC_ClockConfig+0x34e>
 801259c:	52002000 	.word	0x52002000
 80125a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	f003 0304 	and.w	r3, r3, #4
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d010      	beq.n	80125d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	691a      	ldr	r2, [r3, #16]
 80125b4:	4b3f      	ldr	r3, [pc, #252]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 80125b6:	699b      	ldr	r3, [r3, #24]
 80125b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80125bc:	429a      	cmp	r2, r3
 80125be:	d208      	bcs.n	80125d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80125c0:	4b3c      	ldr	r3, [pc, #240]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 80125c2:	699b      	ldr	r3, [r3, #24]
 80125c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	691b      	ldr	r3, [r3, #16]
 80125cc:	4939      	ldr	r1, [pc, #228]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 80125ce:	4313      	orrs	r3, r2
 80125d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f003 0308 	and.w	r3, r3, #8
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d010      	beq.n	8012600 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	695a      	ldr	r2, [r3, #20]
 80125e2:	4b34      	ldr	r3, [pc, #208]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 80125e4:	69db      	ldr	r3, [r3, #28]
 80125e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d208      	bcs.n	8012600 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80125ee:	4b31      	ldr	r3, [pc, #196]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 80125f0:	69db      	ldr	r3, [r3, #28]
 80125f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	695b      	ldr	r3, [r3, #20]
 80125fa:	492e      	ldr	r1, [pc, #184]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 80125fc:	4313      	orrs	r3, r2
 80125fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	f003 0310 	and.w	r3, r3, #16
 8012608:	2b00      	cmp	r3, #0
 801260a:	d010      	beq.n	801262e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	699a      	ldr	r2, [r3, #24]
 8012610:	4b28      	ldr	r3, [pc, #160]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 8012612:	69db      	ldr	r3, [r3, #28]
 8012614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012618:	429a      	cmp	r2, r3
 801261a:	d208      	bcs.n	801262e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801261c:	4b25      	ldr	r3, [pc, #148]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 801261e:	69db      	ldr	r3, [r3, #28]
 8012620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	699b      	ldr	r3, [r3, #24]
 8012628:	4922      	ldr	r1, [pc, #136]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 801262a:	4313      	orrs	r3, r2
 801262c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	f003 0320 	and.w	r3, r3, #32
 8012636:	2b00      	cmp	r3, #0
 8012638:	d010      	beq.n	801265c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	69da      	ldr	r2, [r3, #28]
 801263e:	4b1d      	ldr	r3, [pc, #116]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 8012640:	6a1b      	ldr	r3, [r3, #32]
 8012642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012646:	429a      	cmp	r2, r3
 8012648:	d208      	bcs.n	801265c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801264a:	4b1a      	ldr	r3, [pc, #104]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 801264c:	6a1b      	ldr	r3, [r3, #32]
 801264e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	69db      	ldr	r3, [r3, #28]
 8012656:	4917      	ldr	r1, [pc, #92]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 8012658:	4313      	orrs	r3, r2
 801265a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 801265c:	f000 f834 	bl	80126c8 <HAL_RCC_GetSysClockFreq>
 8012660:	4602      	mov	r2, r0
 8012662:	4b14      	ldr	r3, [pc, #80]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 8012664:	699b      	ldr	r3, [r3, #24]
 8012666:	0a1b      	lsrs	r3, r3, #8
 8012668:	f003 030f 	and.w	r3, r3, #15
 801266c:	4912      	ldr	r1, [pc, #72]	; (80126b8 <HAL_RCC_ClockConfig+0x35c>)
 801266e:	5ccb      	ldrb	r3, [r1, r3]
 8012670:	f003 031f 	and.w	r3, r3, #31
 8012674:	fa22 f303 	lsr.w	r3, r2, r3
 8012678:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 801267a:	4b0e      	ldr	r3, [pc, #56]	; (80126b4 <HAL_RCC_ClockConfig+0x358>)
 801267c:	699b      	ldr	r3, [r3, #24]
 801267e:	f003 030f 	and.w	r3, r3, #15
 8012682:	4a0d      	ldr	r2, [pc, #52]	; (80126b8 <HAL_RCC_ClockConfig+0x35c>)
 8012684:	5cd3      	ldrb	r3, [r2, r3]
 8012686:	f003 031f 	and.w	r3, r3, #31
 801268a:	693a      	ldr	r2, [r7, #16]
 801268c:	fa22 f303 	lsr.w	r3, r2, r3
 8012690:	4a0a      	ldr	r2, [pc, #40]	; (80126bc <HAL_RCC_ClockConfig+0x360>)
 8012692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012694:	4a0a      	ldr	r2, [pc, #40]	; (80126c0 <HAL_RCC_ClockConfig+0x364>)
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801269a:	4b0a      	ldr	r3, [pc, #40]	; (80126c4 <HAL_RCC_ClockConfig+0x368>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	4618      	mov	r0, r3
 80126a0:	f7f4 fce4 	bl	800706c <HAL_InitTick>
 80126a4:	4603      	mov	r3, r0
 80126a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80126a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3718      	adds	r7, #24
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
 80126b2:	bf00      	nop
 80126b4:	58024400 	.word	0x58024400
 80126b8:	0802bb4c 	.word	0x0802bb4c
 80126bc:	24000058 	.word	0x24000058
 80126c0:	24000054 	.word	0x24000054
 80126c4:	2400005c 	.word	0x2400005c

080126c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80126c8:	b480      	push	{r7}
 80126ca:	b089      	sub	sp, #36	; 0x24
 80126cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80126ce:	4bb3      	ldr	r3, [pc, #716]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80126d0:	691b      	ldr	r3, [r3, #16]
 80126d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80126d6:	2b18      	cmp	r3, #24
 80126d8:	f200 8155 	bhi.w	8012986 <HAL_RCC_GetSysClockFreq+0x2be>
 80126dc:	a201      	add	r2, pc, #4	; (adr r2, 80126e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80126de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126e2:	bf00      	nop
 80126e4:	08012749 	.word	0x08012749
 80126e8:	08012987 	.word	0x08012987
 80126ec:	08012987 	.word	0x08012987
 80126f0:	08012987 	.word	0x08012987
 80126f4:	08012987 	.word	0x08012987
 80126f8:	08012987 	.word	0x08012987
 80126fc:	08012987 	.word	0x08012987
 8012700:	08012987 	.word	0x08012987
 8012704:	0801276f 	.word	0x0801276f
 8012708:	08012987 	.word	0x08012987
 801270c:	08012987 	.word	0x08012987
 8012710:	08012987 	.word	0x08012987
 8012714:	08012987 	.word	0x08012987
 8012718:	08012987 	.word	0x08012987
 801271c:	08012987 	.word	0x08012987
 8012720:	08012987 	.word	0x08012987
 8012724:	08012775 	.word	0x08012775
 8012728:	08012987 	.word	0x08012987
 801272c:	08012987 	.word	0x08012987
 8012730:	08012987 	.word	0x08012987
 8012734:	08012987 	.word	0x08012987
 8012738:	08012987 	.word	0x08012987
 801273c:	08012987 	.word	0x08012987
 8012740:	08012987 	.word	0x08012987
 8012744:	0801277b 	.word	0x0801277b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012748:	4b94      	ldr	r3, [pc, #592]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f003 0320 	and.w	r3, r3, #32
 8012750:	2b00      	cmp	r3, #0
 8012752:	d009      	beq.n	8012768 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012754:	4b91      	ldr	r3, [pc, #580]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	08db      	lsrs	r3, r3, #3
 801275a:	f003 0303 	and.w	r3, r3, #3
 801275e:	4a90      	ldr	r2, [pc, #576]	; (80129a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012760:	fa22 f303 	lsr.w	r3, r2, r3
 8012764:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8012766:	e111      	b.n	801298c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012768:	4b8d      	ldr	r3, [pc, #564]	; (80129a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801276a:	61bb      	str	r3, [r7, #24]
      break;
 801276c:	e10e      	b.n	801298c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801276e:	4b8d      	ldr	r3, [pc, #564]	; (80129a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012770:	61bb      	str	r3, [r7, #24]
      break;
 8012772:	e10b      	b.n	801298c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8012774:	4b8c      	ldr	r3, [pc, #560]	; (80129a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8012776:	61bb      	str	r3, [r7, #24]
      break;
 8012778:	e108      	b.n	801298c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801277a:	4b88      	ldr	r3, [pc, #544]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801277e:	f003 0303 	and.w	r3, r3, #3
 8012782:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8012784:	4b85      	ldr	r3, [pc, #532]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012788:	091b      	lsrs	r3, r3, #4
 801278a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801278e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012790:	4b82      	ldr	r3, [pc, #520]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012794:	f003 0301 	and.w	r3, r3, #1
 8012798:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801279a:	4b80      	ldr	r3, [pc, #512]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801279c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801279e:	08db      	lsrs	r3, r3, #3
 80127a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127a4:	68fa      	ldr	r2, [r7, #12]
 80127a6:	fb02 f303 	mul.w	r3, r2, r3
 80127aa:	ee07 3a90 	vmov	s15, r3
 80127ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	f000 80e1 	beq.w	8012980 <HAL_RCC_GetSysClockFreq+0x2b8>
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	2b02      	cmp	r3, #2
 80127c2:	f000 8083 	beq.w	80128cc <HAL_RCC_GetSysClockFreq+0x204>
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	2b02      	cmp	r3, #2
 80127ca:	f200 80a1 	bhi.w	8012910 <HAL_RCC_GetSysClockFreq+0x248>
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d003      	beq.n	80127dc <HAL_RCC_GetSysClockFreq+0x114>
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	2b01      	cmp	r3, #1
 80127d8:	d056      	beq.n	8012888 <HAL_RCC_GetSysClockFreq+0x1c0>
 80127da:	e099      	b.n	8012910 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80127dc:	4b6f      	ldr	r3, [pc, #444]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f003 0320 	and.w	r3, r3, #32
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d02d      	beq.n	8012844 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80127e8:	4b6c      	ldr	r3, [pc, #432]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	08db      	lsrs	r3, r3, #3
 80127ee:	f003 0303 	and.w	r3, r3, #3
 80127f2:	4a6b      	ldr	r2, [pc, #428]	; (80129a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80127f4:	fa22 f303 	lsr.w	r3, r2, r3
 80127f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	ee07 3a90 	vmov	s15, r3
 8012800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	ee07 3a90 	vmov	s15, r3
 801280a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801280e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012812:	4b62      	ldr	r3, [pc, #392]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801281a:	ee07 3a90 	vmov	s15, r3
 801281e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012822:	ed97 6a02 	vldr	s12, [r7, #8]
 8012826:	eddf 5a61 	vldr	s11, [pc, #388]	; 80129ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801282a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801282e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801283e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8012842:	e087      	b.n	8012954 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	ee07 3a90 	vmov	s15, r3
 801284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801284e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80129b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8012852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012856:	4b51      	ldr	r3, [pc, #324]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801285a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801285e:	ee07 3a90 	vmov	s15, r3
 8012862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012866:	ed97 6a02 	vldr	s12, [r7, #8]
 801286a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80129ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801286e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801287a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801287e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8012886:	e065      	b.n	8012954 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	ee07 3a90 	vmov	s15, r3
 801288e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012892:	eddf 6a48 	vldr	s13, [pc, #288]	; 80129b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801289a:	4b40      	ldr	r3, [pc, #256]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801289e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128a2:	ee07 3a90 	vmov	s15, r3
 80128a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80128aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80128ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80129ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80128b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80128b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80128ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80128be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80128c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80128ca:	e043      	b.n	8012954 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	ee07 3a90 	vmov	s15, r3
 80128d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80129b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80128da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80128de:	4b2f      	ldr	r3, [pc, #188]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128e6:	ee07 3a90 	vmov	s15, r3
 80128ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80128ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80128f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80129ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80128f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80128fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80128fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012906:	ee67 7a27 	vmul.f32	s15, s14, s15
 801290a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801290e:	e021      	b.n	8012954 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	ee07 3a90 	vmov	s15, r3
 8012916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801291a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80129b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801291e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012922:	4b1e      	ldr	r3, [pc, #120]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801292a:	ee07 3a90 	vmov	s15, r3
 801292e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012932:	ed97 6a02 	vldr	s12, [r7, #8]
 8012936:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80129ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801293a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801293e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801294e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8012952:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8012954:	4b11      	ldr	r3, [pc, #68]	; (801299c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012958:	0a5b      	lsrs	r3, r3, #9
 801295a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801295e:	3301      	adds	r3, #1
 8012960:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	ee07 3a90 	vmov	s15, r3
 8012968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801296c:	edd7 6a07 	vldr	s13, [r7, #28]
 8012970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012978:	ee17 3a90 	vmov	r3, s15
 801297c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801297e:	e005      	b.n	801298c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8012980:	2300      	movs	r3, #0
 8012982:	61bb      	str	r3, [r7, #24]
      break;
 8012984:	e002      	b.n	801298c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8012986:	4b07      	ldr	r3, [pc, #28]	; (80129a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012988:	61bb      	str	r3, [r7, #24]
      break;
 801298a:	bf00      	nop
  }

  return sysclockfreq;
 801298c:	69bb      	ldr	r3, [r7, #24]
}
 801298e:	4618      	mov	r0, r3
 8012990:	3724      	adds	r7, #36	; 0x24
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr
 801299a:	bf00      	nop
 801299c:	58024400 	.word	0x58024400
 80129a0:	03d09000 	.word	0x03d09000
 80129a4:	003d0900 	.word	0x003d0900
 80129a8:	016e3600 	.word	0x016e3600
 80129ac:	46000000 	.word	0x46000000
 80129b0:	4c742400 	.word	0x4c742400
 80129b4:	4a742400 	.word	0x4a742400
 80129b8:	4bb71b00 	.word	0x4bb71b00

080129bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80129c2:	f7ff fe81 	bl	80126c8 <HAL_RCC_GetSysClockFreq>
 80129c6:	4602      	mov	r2, r0
 80129c8:	4b10      	ldr	r3, [pc, #64]	; (8012a0c <HAL_RCC_GetHCLKFreq+0x50>)
 80129ca:	699b      	ldr	r3, [r3, #24]
 80129cc:	0a1b      	lsrs	r3, r3, #8
 80129ce:	f003 030f 	and.w	r3, r3, #15
 80129d2:	490f      	ldr	r1, [pc, #60]	; (8012a10 <HAL_RCC_GetHCLKFreq+0x54>)
 80129d4:	5ccb      	ldrb	r3, [r1, r3]
 80129d6:	f003 031f 	and.w	r3, r3, #31
 80129da:	fa22 f303 	lsr.w	r3, r2, r3
 80129de:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80129e0:	4b0a      	ldr	r3, [pc, #40]	; (8012a0c <HAL_RCC_GetHCLKFreq+0x50>)
 80129e2:	699b      	ldr	r3, [r3, #24]
 80129e4:	f003 030f 	and.w	r3, r3, #15
 80129e8:	4a09      	ldr	r2, [pc, #36]	; (8012a10 <HAL_RCC_GetHCLKFreq+0x54>)
 80129ea:	5cd3      	ldrb	r3, [r2, r3]
 80129ec:	f003 031f 	and.w	r3, r3, #31
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	fa22 f303 	lsr.w	r3, r2, r3
 80129f6:	4a07      	ldr	r2, [pc, #28]	; (8012a14 <HAL_RCC_GetHCLKFreq+0x58>)
 80129f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80129fa:	4a07      	ldr	r2, [pc, #28]	; (8012a18 <HAL_RCC_GetHCLKFreq+0x5c>)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012a00:	4b04      	ldr	r3, [pc, #16]	; (8012a14 <HAL_RCC_GetHCLKFreq+0x58>)
 8012a02:	681b      	ldr	r3, [r3, #0]
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	58024400 	.word	0x58024400
 8012a10:	0802bb4c 	.word	0x0802bb4c
 8012a14:	24000058 	.word	0x24000058
 8012a18:	24000054 	.word	0x24000054

08012a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8012a20:	f7ff ffcc 	bl	80129bc <HAL_RCC_GetHCLKFreq>
 8012a24:	4602      	mov	r2, r0
 8012a26:	4b06      	ldr	r3, [pc, #24]	; (8012a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012a28:	69db      	ldr	r3, [r3, #28]
 8012a2a:	091b      	lsrs	r3, r3, #4
 8012a2c:	f003 0307 	and.w	r3, r3, #7
 8012a30:	4904      	ldr	r1, [pc, #16]	; (8012a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012a32:	5ccb      	ldrb	r3, [r1, r3]
 8012a34:	f003 031f 	and.w	r3, r3, #31
 8012a38:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	58024400 	.word	0x58024400
 8012a44:	0802bb4c 	.word	0x0802bb4c

08012a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8012a4c:	f7ff ffb6 	bl	80129bc <HAL_RCC_GetHCLKFreq>
 8012a50:	4602      	mov	r2, r0
 8012a52:	4b06      	ldr	r3, [pc, #24]	; (8012a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8012a54:	69db      	ldr	r3, [r3, #28]
 8012a56:	0a1b      	lsrs	r3, r3, #8
 8012a58:	f003 0307 	and.w	r3, r3, #7
 8012a5c:	4904      	ldr	r1, [pc, #16]	; (8012a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012a5e:	5ccb      	ldrb	r3, [r1, r3]
 8012a60:	f003 031f 	and.w	r3, r3, #31
 8012a64:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	bd80      	pop	{r7, pc}
 8012a6c:	58024400 	.word	0x58024400
 8012a70:	0802bb4c 	.word	0x0802bb4c

08012a74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012a74:	b480      	push	{r7}
 8012a76:	b083      	sub	sp, #12
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	223f      	movs	r2, #63	; 0x3f
 8012a82:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012a84:	4b1a      	ldr	r3, [pc, #104]	; (8012af0 <HAL_RCC_GetClockConfig+0x7c>)
 8012a86:	691b      	ldr	r3, [r3, #16]
 8012a88:	f003 0207 	and.w	r2, r3, #7
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8012a90:	4b17      	ldr	r3, [pc, #92]	; (8012af0 <HAL_RCC_GetClockConfig+0x7c>)
 8012a92:	699b      	ldr	r3, [r3, #24]
 8012a94:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8012a9c:	4b14      	ldr	r3, [pc, #80]	; (8012af0 <HAL_RCC_GetClockConfig+0x7c>)
 8012a9e:	699b      	ldr	r3, [r3, #24]
 8012aa0:	f003 020f 	and.w	r2, r3, #15
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8012aa8:	4b11      	ldr	r3, [pc, #68]	; (8012af0 <HAL_RCC_GetClockConfig+0x7c>)
 8012aaa:	699b      	ldr	r3, [r3, #24]
 8012aac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8012ab4:	4b0e      	ldr	r3, [pc, #56]	; (8012af0 <HAL_RCC_GetClockConfig+0x7c>)
 8012ab6:	69db      	ldr	r3, [r3, #28]
 8012ab8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8012ac0:	4b0b      	ldr	r3, [pc, #44]	; (8012af0 <HAL_RCC_GetClockConfig+0x7c>)
 8012ac2:	69db      	ldr	r3, [r3, #28]
 8012ac4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8012acc:	4b08      	ldr	r3, [pc, #32]	; (8012af0 <HAL_RCC_GetClockConfig+0x7c>)
 8012ace:	6a1b      	ldr	r3, [r3, #32]
 8012ad0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012ad8:	4b06      	ldr	r3, [pc, #24]	; (8012af4 <HAL_RCC_GetClockConfig+0x80>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	f003 020f 	and.w	r2, r3, #15
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	601a      	str	r2, [r3, #0]
}
 8012ae4:	bf00      	nop
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr
 8012af0:	58024400 	.word	0x58024400
 8012af4:	52002000 	.word	0x52002000

08012af8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012afc:	b0c8      	sub	sp, #288	; 0x120
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012b04:	2300      	movs	r3, #0
 8012b06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b18:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8012b1c:	2500      	movs	r5, #0
 8012b1e:	ea54 0305 	orrs.w	r3, r4, r5
 8012b22:	d049      	beq.n	8012bb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8012b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012b2e:	d02f      	beq.n	8012b90 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8012b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012b34:	d828      	bhi.n	8012b88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012b3a:	d01a      	beq.n	8012b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8012b3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012b40:	d822      	bhi.n	8012b88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d003      	beq.n	8012b4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8012b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012b4a:	d007      	beq.n	8012b5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012b4c:	e01c      	b.n	8012b88 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012b4e:	4ba7      	ldr	r3, [pc, #668]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b52:	4aa6      	ldr	r2, [pc, #664]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012b58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012b5a:	e01a      	b.n	8012b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b60:	3308      	adds	r3, #8
 8012b62:	2102      	movs	r1, #2
 8012b64:	4618      	mov	r0, r3
 8012b66:	f001 f985 	bl	8013e74 <RCCEx_PLL2_Config>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012b70:	e00f      	b.n	8012b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b76:	3328      	adds	r3, #40	; 0x28
 8012b78:	2102      	movs	r1, #2
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f001 fa2c 	bl	8013fd8 <RCCEx_PLL3_Config>
 8012b80:	4603      	mov	r3, r0
 8012b82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012b86:	e004      	b.n	8012b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012b8e:	e000      	b.n	8012b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8012b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10a      	bne.n	8012bb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012b9a:	4b94      	ldr	r3, [pc, #592]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b9e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8012ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ba8:	4a90      	ldr	r2, [pc, #576]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012baa:	430b      	orrs	r3, r1
 8012bac:	6513      	str	r3, [r2, #80]	; 0x50
 8012bae:	e003      	b.n	8012bb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012bb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012bb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8012bc4:	f04f 0900 	mov.w	r9, #0
 8012bc8:	ea58 0309 	orrs.w	r3, r8, r9
 8012bcc:	d047      	beq.n	8012c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8012bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bd4:	2b04      	cmp	r3, #4
 8012bd6:	d82a      	bhi.n	8012c2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8012bd8:	a201      	add	r2, pc, #4	; (adr r2, 8012be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8012bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bde:	bf00      	nop
 8012be0:	08012bf5 	.word	0x08012bf5
 8012be4:	08012c03 	.word	0x08012c03
 8012be8:	08012c19 	.word	0x08012c19
 8012bec:	08012c37 	.word	0x08012c37
 8012bf0:	08012c37 	.word	0x08012c37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012bf4:	4b7d      	ldr	r3, [pc, #500]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf8:	4a7c      	ldr	r2, [pc, #496]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012c00:	e01a      	b.n	8012c38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c06:	3308      	adds	r3, #8
 8012c08:	2100      	movs	r1, #0
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f001 f932 	bl	8013e74 <RCCEx_PLL2_Config>
 8012c10:	4603      	mov	r3, r0
 8012c12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012c16:	e00f      	b.n	8012c38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c1c:	3328      	adds	r3, #40	; 0x28
 8012c1e:	2100      	movs	r1, #0
 8012c20:	4618      	mov	r0, r3
 8012c22:	f001 f9d9 	bl	8013fd8 <RCCEx_PLL3_Config>
 8012c26:	4603      	mov	r3, r0
 8012c28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012c2c:	e004      	b.n	8012c38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c2e:	2301      	movs	r3, #1
 8012c30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012c34:	e000      	b.n	8012c38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8012c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d10a      	bne.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012c40:	4b6a      	ldr	r3, [pc, #424]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c44:	f023 0107 	bic.w	r1, r3, #7
 8012c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c4e:	4a67      	ldr	r2, [pc, #412]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012c50:	430b      	orrs	r3, r1
 8012c52:	6513      	str	r3, [r2, #80]	; 0x50
 8012c54:	e003      	b.n	8012c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012c5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8012c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c66:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8012c6a:	f04f 0b00 	mov.w	fp, #0
 8012c6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8012c72:	d054      	beq.n	8012d1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8012c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012c7a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8012c7e:	d036      	beq.n	8012cee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8012c80:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8012c84:	d82f      	bhi.n	8012ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8012c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c8a:	d032      	beq.n	8012cf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c90:	d829      	bhi.n	8012ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8012c92:	2bc0      	cmp	r3, #192	; 0xc0
 8012c94:	d02f      	beq.n	8012cf6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8012c96:	2bc0      	cmp	r3, #192	; 0xc0
 8012c98:	d825      	bhi.n	8012ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8012c9a:	2b80      	cmp	r3, #128	; 0x80
 8012c9c:	d018      	beq.n	8012cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8012c9e:	2b80      	cmp	r3, #128	; 0x80
 8012ca0:	d821      	bhi.n	8012ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d002      	beq.n	8012cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8012ca6:	2b40      	cmp	r3, #64	; 0x40
 8012ca8:	d007      	beq.n	8012cba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8012caa:	e01c      	b.n	8012ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012cac:	4b4f      	ldr	r3, [pc, #316]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cb0:	4a4e      	ldr	r2, [pc, #312]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8012cb8:	e01e      	b.n	8012cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012cbe:	3308      	adds	r3, #8
 8012cc0:	2100      	movs	r1, #0
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f001 f8d6 	bl	8013e74 <RCCEx_PLL2_Config>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8012cce:	e013      	b.n	8012cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012cd4:	3328      	adds	r3, #40	; 0x28
 8012cd6:	2100      	movs	r1, #0
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f001 f97d 	bl	8013fd8 <RCCEx_PLL3_Config>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8012ce4:	e008      	b.n	8012cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012cec:	e004      	b.n	8012cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8012cee:	bf00      	nop
 8012cf0:	e002      	b.n	8012cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8012cf2:	bf00      	nop
 8012cf4:	e000      	b.n	8012cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8012cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d10a      	bne.n	8012d16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8012d00:	4b3a      	ldr	r3, [pc, #232]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d04:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8012d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012d0e:	4a37      	ldr	r2, [pc, #220]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012d10:	430b      	orrs	r3, r1
 8012d12:	6513      	str	r3, [r2, #80]	; 0x50
 8012d14:	e003      	b.n	8012d1e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8012d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d26:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8012d2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012d2e:	2300      	movs	r3, #0
 8012d30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8012d34:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8012d38:	460b      	mov	r3, r1
 8012d3a:	4313      	orrs	r3, r2
 8012d3c:	d05c      	beq.n	8012df8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8012d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012d44:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8012d48:	d03b      	beq.n	8012dc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8012d4a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8012d4e:	d834      	bhi.n	8012dba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8012d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012d54:	d037      	beq.n	8012dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8012d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012d5a:	d82e      	bhi.n	8012dba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8012d5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012d60:	d033      	beq.n	8012dca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012d62:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012d66:	d828      	bhi.n	8012dba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8012d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d6c:	d01a      	beq.n	8012da4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8012d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d72:	d822      	bhi.n	8012dba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d003      	beq.n	8012d80 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8012d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d7c:	d007      	beq.n	8012d8e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8012d7e:	e01c      	b.n	8012dba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012d80:	4b1a      	ldr	r3, [pc, #104]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d84:	4a19      	ldr	r2, [pc, #100]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8012d8c:	e01e      	b.n	8012dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d92:	3308      	adds	r3, #8
 8012d94:	2100      	movs	r1, #0
 8012d96:	4618      	mov	r0, r3
 8012d98:	f001 f86c 	bl	8013e74 <RCCEx_PLL2_Config>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8012da2:	e013      	b.n	8012dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012da8:	3328      	adds	r3, #40	; 0x28
 8012daa:	2100      	movs	r1, #0
 8012dac:	4618      	mov	r0, r3
 8012dae:	f001 f913 	bl	8013fd8 <RCCEx_PLL3_Config>
 8012db2:	4603      	mov	r3, r0
 8012db4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8012db8:	e008      	b.n	8012dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012dba:	2301      	movs	r3, #1
 8012dbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012dc0:	e004      	b.n	8012dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8012dc2:	bf00      	nop
 8012dc4:	e002      	b.n	8012dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8012dc6:	bf00      	nop
 8012dc8:	e000      	b.n	8012dcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8012dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012dcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d10d      	bne.n	8012df0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8012dd4:	4b05      	ldr	r3, [pc, #20]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dd8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8012ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012de2:	4a02      	ldr	r2, [pc, #8]	; (8012dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012de4:	430b      	orrs	r3, r1
 8012de6:	6513      	str	r3, [r2, #80]	; 0x50
 8012de8:	e006      	b.n	8012df8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8012dea:	bf00      	nop
 8012dec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012df4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8012df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e00:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8012e04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012e08:	2300      	movs	r3, #0
 8012e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8012e0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8012e12:	460b      	mov	r3, r1
 8012e14:	4313      	orrs	r3, r2
 8012e16:	d03a      	beq.n	8012e8e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8012e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e1e:	2b30      	cmp	r3, #48	; 0x30
 8012e20:	d01f      	beq.n	8012e62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8012e22:	2b30      	cmp	r3, #48	; 0x30
 8012e24:	d819      	bhi.n	8012e5a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8012e26:	2b20      	cmp	r3, #32
 8012e28:	d00c      	beq.n	8012e44 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8012e2a:	2b20      	cmp	r3, #32
 8012e2c:	d815      	bhi.n	8012e5a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d019      	beq.n	8012e66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8012e32:	2b10      	cmp	r3, #16
 8012e34:	d111      	bne.n	8012e5a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012e36:	4bae      	ldr	r3, [pc, #696]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e3a:	4aad      	ldr	r2, [pc, #692]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012e40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012e42:	e011      	b.n	8012e68 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e48:	3308      	adds	r3, #8
 8012e4a:	2102      	movs	r1, #2
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f001 f811 	bl	8013e74 <RCCEx_PLL2_Config>
 8012e52:	4603      	mov	r3, r0
 8012e54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012e58:	e006      	b.n	8012e68 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012e60:	e002      	b.n	8012e68 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8012e62:	bf00      	nop
 8012e64:	e000      	b.n	8012e68 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8012e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012e68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d10a      	bne.n	8012e86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8012e70:	4b9f      	ldr	r3, [pc, #636]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e74:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8012e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e7e:	4a9c      	ldr	r2, [pc, #624]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012e80:	430b      	orrs	r3, r1
 8012e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e84:	e003      	b.n	8012e8e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012e8a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8012e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e96:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8012e9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012ea4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8012ea8:	460b      	mov	r3, r1
 8012eaa:	4313      	orrs	r3, r2
 8012eac:	d051      	beq.n	8012f52 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8012eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012eb8:	d035      	beq.n	8012f26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8012eba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012ebe:	d82e      	bhi.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8012ec0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012ec4:	d031      	beq.n	8012f2a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8012ec6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012eca:	d828      	bhi.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8012ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012ed0:	d01a      	beq.n	8012f08 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8012ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012ed6:	d822      	bhi.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d003      	beq.n	8012ee4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8012edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ee0:	d007      	beq.n	8012ef2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8012ee2:	e01c      	b.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ee4:	4b82      	ldr	r3, [pc, #520]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee8:	4a81      	ldr	r2, [pc, #516]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012ef0:	e01c      	b.n	8012f2c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ef6:	3308      	adds	r3, #8
 8012ef8:	2100      	movs	r1, #0
 8012efa:	4618      	mov	r0, r3
 8012efc:	f000 ffba 	bl	8013e74 <RCCEx_PLL2_Config>
 8012f00:	4603      	mov	r3, r0
 8012f02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012f06:	e011      	b.n	8012f2c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f0c:	3328      	adds	r3, #40	; 0x28
 8012f0e:	2100      	movs	r1, #0
 8012f10:	4618      	mov	r0, r3
 8012f12:	f001 f861 	bl	8013fd8 <RCCEx_PLL3_Config>
 8012f16:	4603      	mov	r3, r0
 8012f18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012f1c:	e006      	b.n	8012f2c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f1e:	2301      	movs	r3, #1
 8012f20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012f24:	e002      	b.n	8012f2c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8012f26:	bf00      	nop
 8012f28:	e000      	b.n	8012f2c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8012f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d10a      	bne.n	8012f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012f34:	4b6e      	ldr	r3, [pc, #440]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f38:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8012f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f42:	4a6b      	ldr	r2, [pc, #428]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012f44:	430b      	orrs	r3, r1
 8012f46:	6513      	str	r3, [r2, #80]	; 0x50
 8012f48:	e003      	b.n	8012f52 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012f4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8012f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012f62:	2300      	movs	r3, #0
 8012f64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012f68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8012f6c:	460b      	mov	r3, r1
 8012f6e:	4313      	orrs	r3, r2
 8012f70:	d053      	beq.n	801301a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8012f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012f7c:	d033      	beq.n	8012fe6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8012f7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012f82:	d82c      	bhi.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012f84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012f88:	d02f      	beq.n	8012fea <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8012f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012f8e:	d826      	bhi.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012f90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012f94:	d02b      	beq.n	8012fee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012f96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012f9a:	d820      	bhi.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012fa0:	d012      	beq.n	8012fc8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8012fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012fa6:	d81a      	bhi.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d022      	beq.n	8012ff2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8012fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fb0:	d115      	bne.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012fb6:	3308      	adds	r3, #8
 8012fb8:	2101      	movs	r1, #1
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f000 ff5a 	bl	8013e74 <RCCEx_PLL2_Config>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012fc6:	e015      	b.n	8012ff4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012fcc:	3328      	adds	r3, #40	; 0x28
 8012fce:	2101      	movs	r1, #1
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f001 f801 	bl	8013fd8 <RCCEx_PLL3_Config>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012fdc:	e00a      	b.n	8012ff4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012fde:	2301      	movs	r3, #1
 8012fe0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8012fe4:	e006      	b.n	8012ff4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012fe6:	bf00      	nop
 8012fe8:	e004      	b.n	8012ff4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012fea:	bf00      	nop
 8012fec:	e002      	b.n	8012ff4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012fee:	bf00      	nop
 8012ff0:	e000      	b.n	8012ff4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8012ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012ff4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d10a      	bne.n	8013012 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8012ffc:	4b3c      	ldr	r3, [pc, #240]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013000:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8013004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801300a:	4a39      	ldr	r2, [pc, #228]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801300c:	430b      	orrs	r3, r1
 801300e:	6513      	str	r3, [r2, #80]	; 0x50
 8013010:	e003      	b.n	801301a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013012:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013016:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801301a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013022:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8013026:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801302a:	2300      	movs	r3, #0
 801302c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013030:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8013034:	460b      	mov	r3, r1
 8013036:	4313      	orrs	r3, r2
 8013038:	d060      	beq.n	80130fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801303a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801303e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013042:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8013046:	d039      	beq.n	80130bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8013048:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 801304c:	d832      	bhi.n	80130b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 801304e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013052:	d035      	beq.n	80130c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8013054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013058:	d82c      	bhi.n	80130b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 801305a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801305e:	d031      	beq.n	80130c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8013060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013064:	d826      	bhi.n	80130b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013066:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801306a:	d02d      	beq.n	80130c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 801306c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013070:	d820      	bhi.n	80130b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013076:	d012      	beq.n	801309e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8013078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801307c:	d81a      	bhi.n	80130b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 801307e:	2b00      	cmp	r3, #0
 8013080:	d024      	beq.n	80130cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8013082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013086:	d115      	bne.n	80130b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801308c:	3308      	adds	r3, #8
 801308e:	2101      	movs	r1, #1
 8013090:	4618      	mov	r0, r3
 8013092:	f000 feef 	bl	8013e74 <RCCEx_PLL2_Config>
 8013096:	4603      	mov	r3, r0
 8013098:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801309c:	e017      	b.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801309e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130a2:	3328      	adds	r3, #40	; 0x28
 80130a4:	2101      	movs	r1, #1
 80130a6:	4618      	mov	r0, r3
 80130a8:	f000 ff96 	bl	8013fd8 <RCCEx_PLL3_Config>
 80130ac:	4603      	mov	r3, r0
 80130ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80130b2:	e00c      	b.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80130b4:	2301      	movs	r3, #1
 80130b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80130ba:	e008      	b.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80130bc:	bf00      	nop
 80130be:	e006      	b.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80130c0:	bf00      	nop
 80130c2:	e004      	b.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80130c4:	bf00      	nop
 80130c6:	e002      	b.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80130c8:	bf00      	nop
 80130ca:	e000      	b.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80130cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80130ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d10e      	bne.n	80130f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80130d6:	4b06      	ldr	r3, [pc, #24]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80130d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80130de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80130e6:	4a02      	ldr	r2, [pc, #8]	; (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80130e8:	430b      	orrs	r3, r1
 80130ea:	6593      	str	r3, [r2, #88]	; 0x58
 80130ec:	e006      	b.n	80130fc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80130ee:	bf00      	nop
 80130f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80130f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80130fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013104:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8013108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801310c:	2300      	movs	r3, #0
 801310e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8013116:	460b      	mov	r3, r1
 8013118:	4313      	orrs	r3, r2
 801311a:	d037      	beq.n	801318c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801311c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013126:	d00e      	beq.n	8013146 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8013128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801312c:	d816      	bhi.n	801315c <HAL_RCCEx_PeriphCLKConfig+0x664>
 801312e:	2b00      	cmp	r3, #0
 8013130:	d018      	beq.n	8013164 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8013132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013136:	d111      	bne.n	801315c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013138:	4bc4      	ldr	r3, [pc, #784]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801313c:	4ac3      	ldr	r2, [pc, #780]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801313e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8013144:	e00f      	b.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801314a:	3308      	adds	r3, #8
 801314c:	2101      	movs	r1, #1
 801314e:	4618      	mov	r0, r3
 8013150:	f000 fe90 	bl	8013e74 <RCCEx_PLL2_Config>
 8013154:	4603      	mov	r3, r0
 8013156:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801315a:	e004      	b.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801315c:	2301      	movs	r3, #1
 801315e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013162:	e000      	b.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8013164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013166:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801316a:	2b00      	cmp	r3, #0
 801316c:	d10a      	bne.n	8013184 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801316e:	4bb7      	ldr	r3, [pc, #732]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013172:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8013176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801317a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801317c:	4ab3      	ldr	r2, [pc, #716]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801317e:	430b      	orrs	r3, r1
 8013180:	6513      	str	r3, [r2, #80]	; 0x50
 8013182:	e003      	b.n	801318c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013184:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013188:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801318c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013194:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8013198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801319c:	2300      	movs	r3, #0
 801319e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80131a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80131a6:	460b      	mov	r3, r1
 80131a8:	4313      	orrs	r3, r2
 80131aa:	d039      	beq.n	8013220 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80131ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131b2:	2b03      	cmp	r3, #3
 80131b4:	d81c      	bhi.n	80131f0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80131b6:	a201      	add	r2, pc, #4	; (adr r2, 80131bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80131b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131bc:	080131f9 	.word	0x080131f9
 80131c0:	080131cd 	.word	0x080131cd
 80131c4:	080131db 	.word	0x080131db
 80131c8:	080131f9 	.word	0x080131f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80131cc:	4b9f      	ldr	r3, [pc, #636]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80131ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131d0:	4a9e      	ldr	r2, [pc, #632]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80131d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80131d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80131d8:	e00f      	b.n	80131fa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80131da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131de:	3308      	adds	r3, #8
 80131e0:	2102      	movs	r1, #2
 80131e2:	4618      	mov	r0, r3
 80131e4:	f000 fe46 	bl	8013e74 <RCCEx_PLL2_Config>
 80131e8:	4603      	mov	r3, r0
 80131ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80131ee:	e004      	b.n	80131fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80131f0:	2301      	movs	r3, #1
 80131f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80131f6:	e000      	b.n	80131fa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80131f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80131fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d10a      	bne.n	8013218 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8013202:	4b92      	ldr	r3, [pc, #584]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013206:	f023 0103 	bic.w	r1, r3, #3
 801320a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801320e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013210:	4a8e      	ldr	r2, [pc, #568]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013212:	430b      	orrs	r3, r1
 8013214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013216:	e003      	b.n	8013220 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013218:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801321c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013228:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801322c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013230:	2300      	movs	r3, #0
 8013232:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013236:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801323a:	460b      	mov	r3, r1
 801323c:	4313      	orrs	r3, r2
 801323e:	f000 8099 	beq.w	8013374 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013242:	4b83      	ldr	r3, [pc, #524]	; (8013450 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	4a82      	ldr	r2, [pc, #520]	; (8013450 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8013248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801324c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801324e:	f7f8 ff3f 	bl	800c0d0 <HAL_GetTick>
 8013252:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013256:	e00b      	b.n	8013270 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013258:	f7f8 ff3a 	bl	800c0d0 <HAL_GetTick>
 801325c:	4602      	mov	r2, r0
 801325e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013262:	1ad3      	subs	r3, r2, r3
 8013264:	2b64      	cmp	r3, #100	; 0x64
 8013266:	d903      	bls.n	8013270 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8013268:	2303      	movs	r3, #3
 801326a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801326e:	e005      	b.n	801327c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013270:	4b77      	ldr	r3, [pc, #476]	; (8013450 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013278:	2b00      	cmp	r3, #0
 801327a:	d0ed      	beq.n	8013258 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801327c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013280:	2b00      	cmp	r3, #0
 8013282:	d173      	bne.n	801336c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013284:	4b71      	ldr	r3, [pc, #452]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801328c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013290:	4053      	eors	r3, r2
 8013292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013296:	2b00      	cmp	r3, #0
 8013298:	d015      	beq.n	80132c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801329a:	4b6c      	ldr	r3, [pc, #432]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801329e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80132a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80132a6:	4b69      	ldr	r3, [pc, #420]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80132a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132aa:	4a68      	ldr	r2, [pc, #416]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80132ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80132b0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80132b2:	4b66      	ldr	r3, [pc, #408]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80132b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132b6:	4a65      	ldr	r2, [pc, #404]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80132b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80132bc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80132be:	4a63      	ldr	r2, [pc, #396]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80132c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80132c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80132c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80132ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80132d2:	d118      	bne.n	8013306 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80132d4:	f7f8 fefc 	bl	800c0d0 <HAL_GetTick>
 80132d8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80132dc:	e00d      	b.n	80132fa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80132de:	f7f8 fef7 	bl	800c0d0 <HAL_GetTick>
 80132e2:	4602      	mov	r2, r0
 80132e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80132e8:	1ad2      	subs	r2, r2, r3
 80132ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d903      	bls.n	80132fa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80132f2:	2303      	movs	r3, #3
 80132f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80132f8:	e005      	b.n	8013306 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80132fa:	4b54      	ldr	r3, [pc, #336]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80132fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132fe:	f003 0302 	and.w	r3, r3, #2
 8013302:	2b00      	cmp	r3, #0
 8013304:	d0eb      	beq.n	80132de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8013306:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801330a:	2b00      	cmp	r3, #0
 801330c:	d129      	bne.n	8013362 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801330e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801331a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801331e:	d10e      	bne.n	801333e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8013320:	4b4a      	ldr	r3, [pc, #296]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013322:	691b      	ldr	r3, [r3, #16]
 8013324:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8013328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801332c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013330:	091a      	lsrs	r2, r3, #4
 8013332:	4b48      	ldr	r3, [pc, #288]	; (8013454 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8013334:	4013      	ands	r3, r2
 8013336:	4a45      	ldr	r2, [pc, #276]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013338:	430b      	orrs	r3, r1
 801333a:	6113      	str	r3, [r2, #16]
 801333c:	e005      	b.n	801334a <HAL_RCCEx_PeriphCLKConfig+0x852>
 801333e:	4b43      	ldr	r3, [pc, #268]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013340:	691b      	ldr	r3, [r3, #16]
 8013342:	4a42      	ldr	r2, [pc, #264]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013344:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013348:	6113      	str	r3, [r2, #16]
 801334a:	4b40      	ldr	r3, [pc, #256]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801334c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801334e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801335a:	4a3c      	ldr	r2, [pc, #240]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801335c:	430b      	orrs	r3, r1
 801335e:	6713      	str	r3, [r2, #112]	; 0x70
 8013360:	e008      	b.n	8013374 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013362:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013366:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 801336a:	e003      	b.n	8013374 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801336c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013370:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8013374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801337c:	f002 0301 	and.w	r3, r2, #1
 8013380:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013384:	2300      	movs	r3, #0
 8013386:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801338a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801338e:	460b      	mov	r3, r1
 8013390:	4313      	orrs	r3, r2
 8013392:	f000 8090 	beq.w	80134b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8013396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801339a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801339e:	2b28      	cmp	r3, #40	; 0x28
 80133a0:	d870      	bhi.n	8013484 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80133a2:	a201      	add	r2, pc, #4	; (adr r2, 80133a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80133a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133a8:	0801348d 	.word	0x0801348d
 80133ac:	08013485 	.word	0x08013485
 80133b0:	08013485 	.word	0x08013485
 80133b4:	08013485 	.word	0x08013485
 80133b8:	08013485 	.word	0x08013485
 80133bc:	08013485 	.word	0x08013485
 80133c0:	08013485 	.word	0x08013485
 80133c4:	08013485 	.word	0x08013485
 80133c8:	08013459 	.word	0x08013459
 80133cc:	08013485 	.word	0x08013485
 80133d0:	08013485 	.word	0x08013485
 80133d4:	08013485 	.word	0x08013485
 80133d8:	08013485 	.word	0x08013485
 80133dc:	08013485 	.word	0x08013485
 80133e0:	08013485 	.word	0x08013485
 80133e4:	08013485 	.word	0x08013485
 80133e8:	0801346f 	.word	0x0801346f
 80133ec:	08013485 	.word	0x08013485
 80133f0:	08013485 	.word	0x08013485
 80133f4:	08013485 	.word	0x08013485
 80133f8:	08013485 	.word	0x08013485
 80133fc:	08013485 	.word	0x08013485
 8013400:	08013485 	.word	0x08013485
 8013404:	08013485 	.word	0x08013485
 8013408:	0801348d 	.word	0x0801348d
 801340c:	08013485 	.word	0x08013485
 8013410:	08013485 	.word	0x08013485
 8013414:	08013485 	.word	0x08013485
 8013418:	08013485 	.word	0x08013485
 801341c:	08013485 	.word	0x08013485
 8013420:	08013485 	.word	0x08013485
 8013424:	08013485 	.word	0x08013485
 8013428:	0801348d 	.word	0x0801348d
 801342c:	08013485 	.word	0x08013485
 8013430:	08013485 	.word	0x08013485
 8013434:	08013485 	.word	0x08013485
 8013438:	08013485 	.word	0x08013485
 801343c:	08013485 	.word	0x08013485
 8013440:	08013485 	.word	0x08013485
 8013444:	08013485 	.word	0x08013485
 8013448:	0801348d 	.word	0x0801348d
 801344c:	58024400 	.word	0x58024400
 8013450:	58024800 	.word	0x58024800
 8013454:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801345c:	3308      	adds	r3, #8
 801345e:	2101      	movs	r1, #1
 8013460:	4618      	mov	r0, r3
 8013462:	f000 fd07 	bl	8013e74 <RCCEx_PLL2_Config>
 8013466:	4603      	mov	r3, r0
 8013468:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801346c:	e00f      	b.n	801348e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801346e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013472:	3328      	adds	r3, #40	; 0x28
 8013474:	2101      	movs	r1, #1
 8013476:	4618      	mov	r0, r3
 8013478:	f000 fdae 	bl	8013fd8 <RCCEx_PLL3_Config>
 801347c:	4603      	mov	r3, r0
 801347e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8013482:	e004      	b.n	801348e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013484:	2301      	movs	r3, #1
 8013486:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801348a:	e000      	b.n	801348e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801348c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801348e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013492:	2b00      	cmp	r3, #0
 8013494:	d10b      	bne.n	80134ae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8013496:	4bc0      	ldr	r3, [pc, #768]	; (8013798 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801349a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801349e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80134a6:	4abc      	ldr	r2, [pc, #752]	; (8013798 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80134a8:	430b      	orrs	r3, r1
 80134aa:	6553      	str	r3, [r2, #84]	; 0x54
 80134ac:	e003      	b.n	80134b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80134ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80134b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80134b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134be:	f002 0302 	and.w	r3, r2, #2
 80134c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80134c6:	2300      	movs	r3, #0
 80134c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80134cc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80134d0:	460b      	mov	r3, r1
 80134d2:	4313      	orrs	r3, r2
 80134d4:	d043      	beq.n	801355e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80134d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80134de:	2b05      	cmp	r3, #5
 80134e0:	d824      	bhi.n	801352c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80134e2:	a201      	add	r2, pc, #4	; (adr r2, 80134e8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80134e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134e8:	08013535 	.word	0x08013535
 80134ec:	08013501 	.word	0x08013501
 80134f0:	08013517 	.word	0x08013517
 80134f4:	08013535 	.word	0x08013535
 80134f8:	08013535 	.word	0x08013535
 80134fc:	08013535 	.word	0x08013535
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013504:	3308      	adds	r3, #8
 8013506:	2101      	movs	r1, #1
 8013508:	4618      	mov	r0, r3
 801350a:	f000 fcb3 	bl	8013e74 <RCCEx_PLL2_Config>
 801350e:	4603      	mov	r3, r0
 8013510:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8013514:	e00f      	b.n	8013536 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801351a:	3328      	adds	r3, #40	; 0x28
 801351c:	2101      	movs	r1, #1
 801351e:	4618      	mov	r0, r3
 8013520:	f000 fd5a 	bl	8013fd8 <RCCEx_PLL3_Config>
 8013524:	4603      	mov	r3, r0
 8013526:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801352a:	e004      	b.n	8013536 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801352c:	2301      	movs	r3, #1
 801352e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013532:	e000      	b.n	8013536 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8013534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013536:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801353a:	2b00      	cmp	r3, #0
 801353c:	d10b      	bne.n	8013556 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801353e:	4b96      	ldr	r3, [pc, #600]	; (8013798 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013542:	f023 0107 	bic.w	r1, r3, #7
 8013546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801354a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801354e:	4a92      	ldr	r2, [pc, #584]	; (8013798 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013550:	430b      	orrs	r3, r1
 8013552:	6553      	str	r3, [r2, #84]	; 0x54
 8013554:	e003      	b.n	801355e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013556:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801355a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801355e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013566:	f002 0304 	and.w	r3, r2, #4
 801356a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801356e:	2300      	movs	r3, #0
 8013570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013574:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8013578:	460b      	mov	r3, r1
 801357a:	4313      	orrs	r3, r2
 801357c:	d043      	beq.n	8013606 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801357e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013586:	2b05      	cmp	r3, #5
 8013588:	d824      	bhi.n	80135d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 801358a:	a201      	add	r2, pc, #4	; (adr r2, 8013590 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 801358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013590:	080135dd 	.word	0x080135dd
 8013594:	080135a9 	.word	0x080135a9
 8013598:	080135bf 	.word	0x080135bf
 801359c:	080135dd 	.word	0x080135dd
 80135a0:	080135dd 	.word	0x080135dd
 80135a4:	080135dd 	.word	0x080135dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80135a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135ac:	3308      	adds	r3, #8
 80135ae:	2101      	movs	r1, #1
 80135b0:	4618      	mov	r0, r3
 80135b2:	f000 fc5f 	bl	8013e74 <RCCEx_PLL2_Config>
 80135b6:	4603      	mov	r3, r0
 80135b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80135bc:	e00f      	b.n	80135de <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80135be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135c2:	3328      	adds	r3, #40	; 0x28
 80135c4:	2101      	movs	r1, #1
 80135c6:	4618      	mov	r0, r3
 80135c8:	f000 fd06 	bl	8013fd8 <RCCEx_PLL3_Config>
 80135cc:	4603      	mov	r3, r0
 80135ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80135d2:	e004      	b.n	80135de <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80135d4:	2301      	movs	r3, #1
 80135d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80135da:	e000      	b.n	80135de <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80135dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80135de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d10b      	bne.n	80135fe <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80135e6:	4b6c      	ldr	r3, [pc, #432]	; (8013798 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80135e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135ea:	f023 0107 	bic.w	r1, r3, #7
 80135ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80135f6:	4a68      	ldr	r2, [pc, #416]	; (8013798 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80135f8:	430b      	orrs	r3, r1
 80135fa:	6593      	str	r3, [r2, #88]	; 0x58
 80135fc:	e003      	b.n	8013606 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80135fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013602:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801360e:	f002 0320 	and.w	r3, r2, #32
 8013612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013616:	2300      	movs	r3, #0
 8013618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801361c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8013620:	460b      	mov	r3, r1
 8013622:	4313      	orrs	r3, r2
 8013624:	d055      	beq.n	80136d2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8013626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801362a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801362e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013632:	d033      	beq.n	801369c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8013634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013638:	d82c      	bhi.n	8013694 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 801363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801363e:	d02f      	beq.n	80136a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8013640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013644:	d826      	bhi.n	8013694 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8013646:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801364a:	d02b      	beq.n	80136a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801364c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013650:	d820      	bhi.n	8013694 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8013652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013656:	d012      	beq.n	801367e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8013658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801365c:	d81a      	bhi.n	8013694 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 801365e:	2b00      	cmp	r3, #0
 8013660:	d022      	beq.n	80136a8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8013662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013666:	d115      	bne.n	8013694 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801366c:	3308      	adds	r3, #8
 801366e:	2100      	movs	r1, #0
 8013670:	4618      	mov	r0, r3
 8013672:	f000 fbff 	bl	8013e74 <RCCEx_PLL2_Config>
 8013676:	4603      	mov	r3, r0
 8013678:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801367c:	e015      	b.n	80136aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801367e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013682:	3328      	adds	r3, #40	; 0x28
 8013684:	2102      	movs	r1, #2
 8013686:	4618      	mov	r0, r3
 8013688:	f000 fca6 	bl	8013fd8 <RCCEx_PLL3_Config>
 801368c:	4603      	mov	r3, r0
 801368e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8013692:	e00a      	b.n	80136aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013694:	2301      	movs	r3, #1
 8013696:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801369a:	e006      	b.n	80136aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 801369c:	bf00      	nop
 801369e:	e004      	b.n	80136aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80136a0:	bf00      	nop
 80136a2:	e002      	b.n	80136aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80136a4:	bf00      	nop
 80136a6:	e000      	b.n	80136aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80136a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80136aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d10b      	bne.n	80136ca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80136b2:	4b39      	ldr	r3, [pc, #228]	; (8013798 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80136b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80136ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80136c2:	4a35      	ldr	r2, [pc, #212]	; (8013798 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80136c4:	430b      	orrs	r3, r1
 80136c6:	6553      	str	r3, [r2, #84]	; 0x54
 80136c8:	e003      	b.n	80136d2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80136ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80136ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80136d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80136de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80136e2:	2300      	movs	r3, #0
 80136e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80136e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80136ec:	460b      	mov	r3, r1
 80136ee:	4313      	orrs	r3, r2
 80136f0:	d058      	beq.n	80137a4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80136f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80136fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80136fe:	d033      	beq.n	8013768 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8013700:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8013704:	d82c      	bhi.n	8013760 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8013706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801370a:	d02f      	beq.n	801376c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801370c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013710:	d826      	bhi.n	8013760 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8013712:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013716:	d02b      	beq.n	8013770 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8013718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801371c:	d820      	bhi.n	8013760 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 801371e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013722:	d012      	beq.n	801374a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8013724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013728:	d81a      	bhi.n	8013760 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 801372a:	2b00      	cmp	r3, #0
 801372c:	d022      	beq.n	8013774 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 801372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013732:	d115      	bne.n	8013760 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013738:	3308      	adds	r3, #8
 801373a:	2100      	movs	r1, #0
 801373c:	4618      	mov	r0, r3
 801373e:	f000 fb99 	bl	8013e74 <RCCEx_PLL2_Config>
 8013742:	4603      	mov	r3, r0
 8013744:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8013748:	e015      	b.n	8013776 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801374a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801374e:	3328      	adds	r3, #40	; 0x28
 8013750:	2102      	movs	r1, #2
 8013752:	4618      	mov	r0, r3
 8013754:	f000 fc40 	bl	8013fd8 <RCCEx_PLL3_Config>
 8013758:	4603      	mov	r3, r0
 801375a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801375e:	e00a      	b.n	8013776 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013760:	2301      	movs	r3, #1
 8013762:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013766:	e006      	b.n	8013776 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8013768:	bf00      	nop
 801376a:	e004      	b.n	8013776 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 801376c:	bf00      	nop
 801376e:	e002      	b.n	8013776 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8013770:	bf00      	nop
 8013772:	e000      	b.n	8013776 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8013774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013776:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801377a:	2b00      	cmp	r3, #0
 801377c:	d10e      	bne.n	801379c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801377e:	4b06      	ldr	r3, [pc, #24]	; (8013798 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013782:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8013786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801378a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801378e:	4a02      	ldr	r2, [pc, #8]	; (8013798 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013790:	430b      	orrs	r3, r1
 8013792:	6593      	str	r3, [r2, #88]	; 0x58
 8013794:	e006      	b.n	80137a4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8013796:	bf00      	nop
 8013798:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801379c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80137a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80137a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80137b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80137b4:	2300      	movs	r3, #0
 80137b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80137ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80137be:	460b      	mov	r3, r1
 80137c0:	4313      	orrs	r3, r2
 80137c2:	d055      	beq.n	8013870 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80137c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80137cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80137d0:	d033      	beq.n	801383a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80137d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80137d6:	d82c      	bhi.n	8013832 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80137d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137dc:	d02f      	beq.n	801383e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80137de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137e2:	d826      	bhi.n	8013832 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80137e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80137e8:	d02b      	beq.n	8013842 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80137ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80137ee:	d820      	bhi.n	8013832 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80137f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80137f4:	d012      	beq.n	801381c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80137f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80137fa:	d81a      	bhi.n	8013832 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d022      	beq.n	8013846 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8013800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013804:	d115      	bne.n	8013832 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801380a:	3308      	adds	r3, #8
 801380c:	2100      	movs	r1, #0
 801380e:	4618      	mov	r0, r3
 8013810:	f000 fb30 	bl	8013e74 <RCCEx_PLL2_Config>
 8013814:	4603      	mov	r3, r0
 8013816:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801381a:	e015      	b.n	8013848 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801381c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013820:	3328      	adds	r3, #40	; 0x28
 8013822:	2102      	movs	r1, #2
 8013824:	4618      	mov	r0, r3
 8013826:	f000 fbd7 	bl	8013fd8 <RCCEx_PLL3_Config>
 801382a:	4603      	mov	r3, r0
 801382c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8013830:	e00a      	b.n	8013848 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013832:	2301      	movs	r3, #1
 8013834:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013838:	e006      	b.n	8013848 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 801383a:	bf00      	nop
 801383c:	e004      	b.n	8013848 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 801383e:	bf00      	nop
 8013840:	e002      	b.n	8013848 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8013842:	bf00      	nop
 8013844:	e000      	b.n	8013848 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8013846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013848:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10b      	bne.n	8013868 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8013850:	4ba1      	ldr	r3, [pc, #644]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013854:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8013858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801385c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013860:	4a9d      	ldr	r2, [pc, #628]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013862:	430b      	orrs	r3, r1
 8013864:	6593      	str	r3, [r2, #88]	; 0x58
 8013866:	e003      	b.n	8013870 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013868:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801386c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8013870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013878:	f002 0308 	and.w	r3, r2, #8
 801387c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013880:	2300      	movs	r3, #0
 8013882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013886:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801388a:	460b      	mov	r3, r1
 801388c:	4313      	orrs	r3, r2
 801388e:	d01e      	beq.n	80138ce <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8013890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801389c:	d10c      	bne.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801389e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138a2:	3328      	adds	r3, #40	; 0x28
 80138a4:	2102      	movs	r1, #2
 80138a6:	4618      	mov	r0, r3
 80138a8:	f000 fb96 	bl	8013fd8 <RCCEx_PLL3_Config>
 80138ac:	4603      	mov	r3, r0
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d002      	beq.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80138b2:	2301      	movs	r3, #1
 80138b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80138b8:	4b87      	ldr	r3, [pc, #540]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80138ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80138c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80138c8:	4a83      	ldr	r2, [pc, #524]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80138ca:	430b      	orrs	r3, r1
 80138cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80138ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d6:	f002 0310 	and.w	r3, r2, #16
 80138da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80138de:	2300      	movs	r3, #0
 80138e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80138e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80138e8:	460b      	mov	r3, r1
 80138ea:	4313      	orrs	r3, r2
 80138ec:	d01e      	beq.n	801392c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80138ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80138f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80138fa:	d10c      	bne.n	8013916 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80138fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013900:	3328      	adds	r3, #40	; 0x28
 8013902:	2102      	movs	r1, #2
 8013904:	4618      	mov	r0, r3
 8013906:	f000 fb67 	bl	8013fd8 <RCCEx_PLL3_Config>
 801390a:	4603      	mov	r3, r0
 801390c:	2b00      	cmp	r3, #0
 801390e:	d002      	beq.n	8013916 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8013910:	2301      	movs	r3, #1
 8013912:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8013916:	4b70      	ldr	r3, [pc, #448]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801391a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801391e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013922:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013926:	4a6c      	ldr	r2, [pc, #432]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013928:	430b      	orrs	r3, r1
 801392a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801392c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013934:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8013938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801393c:	2300      	movs	r3, #0
 801393e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013942:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8013946:	460b      	mov	r3, r1
 8013948:	4313      	orrs	r3, r2
 801394a:	d03e      	beq.n	80139ca <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013950:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013958:	d022      	beq.n	80139a0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 801395a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801395e:	d81b      	bhi.n	8013998 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8013960:	2b00      	cmp	r3, #0
 8013962:	d003      	beq.n	801396c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8013964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013968:	d00b      	beq.n	8013982 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 801396a:	e015      	b.n	8013998 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801396c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013970:	3308      	adds	r3, #8
 8013972:	2100      	movs	r1, #0
 8013974:	4618      	mov	r0, r3
 8013976:	f000 fa7d 	bl	8013e74 <RCCEx_PLL2_Config>
 801397a:	4603      	mov	r3, r0
 801397c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8013980:	e00f      	b.n	80139a2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013986:	3328      	adds	r3, #40	; 0x28
 8013988:	2102      	movs	r1, #2
 801398a:	4618      	mov	r0, r3
 801398c:	f000 fb24 	bl	8013fd8 <RCCEx_PLL3_Config>
 8013990:	4603      	mov	r3, r0
 8013992:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8013996:	e004      	b.n	80139a2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013998:	2301      	movs	r3, #1
 801399a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801399e:	e000      	b.n	80139a2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80139a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80139a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d10b      	bne.n	80139c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80139aa:	4b4b      	ldr	r3, [pc, #300]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80139ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80139b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80139ba:	4a47      	ldr	r2, [pc, #284]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80139bc:	430b      	orrs	r3, r1
 80139be:	6593      	str	r3, [r2, #88]	; 0x58
 80139c0:	e003      	b.n	80139ca <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80139c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80139c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80139ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80139d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80139d8:	2300      	movs	r3, #0
 80139da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80139dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80139e0:	460b      	mov	r3, r1
 80139e2:	4313      	orrs	r3, r2
 80139e4:	d03b      	beq.n	8013a5e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80139e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80139f2:	d01f      	beq.n	8013a34 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80139f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80139f8:	d818      	bhi.n	8013a2c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80139fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80139fe:	d003      	beq.n	8013a08 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8013a00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a04:	d007      	beq.n	8013a16 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8013a06:	e011      	b.n	8013a2c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013a08:	4b33      	ldr	r3, [pc, #204]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a0c:	4a32      	ldr	r2, [pc, #200]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013a12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8013a14:	e00f      	b.n	8013a36 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a1a:	3328      	adds	r3, #40	; 0x28
 8013a1c:	2101      	movs	r1, #1
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f000 fada 	bl	8013fd8 <RCCEx_PLL3_Config>
 8013a24:	4603      	mov	r3, r0
 8013a26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8013a2a:	e004      	b.n	8013a36 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013a32:	e000      	b.n	8013a36 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8013a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013a36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d10b      	bne.n	8013a56 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8013a3e:	4b26      	ldr	r3, [pc, #152]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a42:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8013a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a4e:	4a22      	ldr	r2, [pc, #136]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013a50:	430b      	orrs	r3, r1
 8013a52:	6553      	str	r3, [r2, #84]	; 0x54
 8013a54:	e003      	b.n	8013a5e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013a56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013a5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a66:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8013a6a:	673b      	str	r3, [r7, #112]	; 0x70
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	677b      	str	r3, [r7, #116]	; 0x74
 8013a70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8013a74:	460b      	mov	r3, r1
 8013a76:	4313      	orrs	r3, r2
 8013a78:	d034      	beq.n	8013ae4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8013a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d003      	beq.n	8013a8c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8013a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a88:	d007      	beq.n	8013a9a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8013a8a:	e011      	b.n	8013ab0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013a8c:	4b12      	ldr	r3, [pc, #72]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a90:	4a11      	ldr	r2, [pc, #68]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013a98:	e00e      	b.n	8013ab8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a9e:	3308      	adds	r3, #8
 8013aa0:	2102      	movs	r1, #2
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f000 f9e6 	bl	8013e74 <RCCEx_PLL2_Config>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013aae:	e003      	b.n	8013ab8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013ab8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d10d      	bne.n	8013adc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013ac0:	4b05      	ldr	r3, [pc, #20]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ac4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ace:	4a02      	ldr	r2, [pc, #8]	; (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013ad0:	430b      	orrs	r3, r1
 8013ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013ad4:	e006      	b.n	8013ae4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8013ad6:	bf00      	nop
 8013ad8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013adc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013ae0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8013af0:	66bb      	str	r3, [r7, #104]	; 0x68
 8013af2:	2300      	movs	r3, #0
 8013af4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013af6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8013afa:	460b      	mov	r3, r1
 8013afc:	4313      	orrs	r3, r2
 8013afe:	d00c      	beq.n	8013b1a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8013b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b04:	3328      	adds	r3, #40	; 0x28
 8013b06:	2102      	movs	r1, #2
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f000 fa65 	bl	8013fd8 <RCCEx_PLL3_Config>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d002      	beq.n	8013b1a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8013b14:	2301      	movs	r3, #1
 8013b16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b22:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8013b26:	663b      	str	r3, [r7, #96]	; 0x60
 8013b28:	2300      	movs	r3, #0
 8013b2a:	667b      	str	r3, [r7, #100]	; 0x64
 8013b2c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8013b30:	460b      	mov	r3, r1
 8013b32:	4313      	orrs	r3, r2
 8013b34:	d038      	beq.n	8013ba8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8013b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013b42:	d018      	beq.n	8013b76 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8013b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013b48:	d811      	bhi.n	8013b6e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8013b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b4e:	d014      	beq.n	8013b7a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8013b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b54:	d80b      	bhi.n	8013b6e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d011      	beq.n	8013b7e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8013b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b5e:	d106      	bne.n	8013b6e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013b60:	4bc3      	ldr	r3, [pc, #780]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b64:	4ac2      	ldr	r2, [pc, #776]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8013b6c:	e008      	b.n	8013b80 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013b6e:	2301      	movs	r3, #1
 8013b70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013b74:	e004      	b.n	8013b80 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8013b76:	bf00      	nop
 8013b78:	e002      	b.n	8013b80 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8013b7a:	bf00      	nop
 8013b7c:	e000      	b.n	8013b80 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8013b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013b80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d10b      	bne.n	8013ba0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013b88:	4bb9      	ldr	r3, [pc, #740]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b8c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8013b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b98:	4ab5      	ldr	r2, [pc, #724]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013b9a:	430b      	orrs	r3, r1
 8013b9c:	6553      	str	r3, [r2, #84]	; 0x54
 8013b9e:	e003      	b.n	8013ba8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013ba0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013ba4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8013ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8013bb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013bba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8013bbe:	460b      	mov	r3, r1
 8013bc0:	4313      	orrs	r3, r2
 8013bc2:	d009      	beq.n	8013bd8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013bc4:	4baa      	ldr	r3, [pc, #680]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013bd2:	4aa7      	ldr	r2, [pc, #668]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013bd4:	430b      	orrs	r3, r1
 8013bd6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8013be4:	653b      	str	r3, [r7, #80]	; 0x50
 8013be6:	2300      	movs	r3, #0
 8013be8:	657b      	str	r3, [r7, #84]	; 0x54
 8013bea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8013bee:	460b      	mov	r3, r1
 8013bf0:	4313      	orrs	r3, r2
 8013bf2:	d009      	beq.n	8013c08 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013bf4:	4b9e      	ldr	r3, [pc, #632]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bf8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8013bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c02:	4a9b      	ldr	r2, [pc, #620]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013c04:	430b      	orrs	r3, r1
 8013c06:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8013c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c10:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8013c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8013c16:	2300      	movs	r3, #0
 8013c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c1a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8013c1e:	460b      	mov	r3, r1
 8013c20:	4313      	orrs	r3, r2
 8013c22:	d009      	beq.n	8013c38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8013c24:	4b92      	ldr	r3, [pc, #584]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c28:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8013c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c32:	4a8f      	ldr	r2, [pc, #572]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013c34:	430b      	orrs	r3, r1
 8013c36:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8013c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c40:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8013c44:	643b      	str	r3, [r7, #64]	; 0x40
 8013c46:	2300      	movs	r3, #0
 8013c48:	647b      	str	r3, [r7, #68]	; 0x44
 8013c4a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8013c4e:	460b      	mov	r3, r1
 8013c50:	4313      	orrs	r3, r2
 8013c52:	d00e      	beq.n	8013c72 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013c54:	4b86      	ldr	r3, [pc, #536]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013c56:	691b      	ldr	r3, [r3, #16]
 8013c58:	4a85      	ldr	r2, [pc, #532]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013c5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013c5e:	6113      	str	r3, [r2, #16]
 8013c60:	4b83      	ldr	r3, [pc, #524]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013c62:	6919      	ldr	r1, [r3, #16]
 8013c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013c6c:	4a80      	ldr	r2, [pc, #512]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013c6e:	430b      	orrs	r3, r1
 8013c70:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8013c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013c80:	2300      	movs	r3, #0
 8013c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c84:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8013c88:	460b      	mov	r3, r1
 8013c8a:	4313      	orrs	r3, r2
 8013c8c:	d009      	beq.n	8013ca2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013c8e:	4b78      	ldr	r3, [pc, #480]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c92:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8013c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c9c:	4a74      	ldr	r2, [pc, #464]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013c9e:	430b      	orrs	r3, r1
 8013ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013caa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8013cae:	633b      	str	r3, [r7, #48]	; 0x30
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8013cb4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8013cb8:	460b      	mov	r3, r1
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	d00a      	beq.n	8013cd4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013cbe:	4b6c      	ldr	r3, [pc, #432]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cc2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8013cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013cce:	4a68      	ldr	r2, [pc, #416]	; (8013e70 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8013cd0:	430b      	orrs	r3, r1
 8013cd2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8013cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cdc:	2100      	movs	r1, #0
 8013cde:	62b9      	str	r1, [r7, #40]	; 0x28
 8013ce0:	f003 0301 	and.w	r3, r3, #1
 8013ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ce6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8013cea:	460b      	mov	r3, r1
 8013cec:	4313      	orrs	r3, r2
 8013cee:	d011      	beq.n	8013d14 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cf4:	3308      	adds	r3, #8
 8013cf6:	2100      	movs	r1, #0
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f000 f8bb 	bl	8013e74 <RCCEx_PLL2_Config>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013d04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d003      	beq.n	8013d14 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013d0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8013d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d1c:	2100      	movs	r1, #0
 8013d1e:	6239      	str	r1, [r7, #32]
 8013d20:	f003 0302 	and.w	r3, r3, #2
 8013d24:	627b      	str	r3, [r7, #36]	; 0x24
 8013d26:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013d2a:	460b      	mov	r3, r1
 8013d2c:	4313      	orrs	r3, r2
 8013d2e:	d011      	beq.n	8013d54 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d34:	3308      	adds	r3, #8
 8013d36:	2101      	movs	r1, #1
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f000 f89b 	bl	8013e74 <RCCEx_PLL2_Config>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013d44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d003      	beq.n	8013d54 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d50:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8013d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d5c:	2100      	movs	r1, #0
 8013d5e:	61b9      	str	r1, [r7, #24]
 8013d60:	f003 0304 	and.w	r3, r3, #4
 8013d64:	61fb      	str	r3, [r7, #28]
 8013d66:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8013d6a:	460b      	mov	r3, r1
 8013d6c:	4313      	orrs	r3, r2
 8013d6e:	d011      	beq.n	8013d94 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d74:	3308      	adds	r3, #8
 8013d76:	2102      	movs	r1, #2
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f000 f87b 	bl	8013e74 <RCCEx_PLL2_Config>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013d84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d003      	beq.n	8013d94 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8013d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d9c:	2100      	movs	r1, #0
 8013d9e:	6139      	str	r1, [r7, #16]
 8013da0:	f003 0308 	and.w	r3, r3, #8
 8013da4:	617b      	str	r3, [r7, #20]
 8013da6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013daa:	460b      	mov	r3, r1
 8013dac:	4313      	orrs	r3, r2
 8013dae:	d011      	beq.n	8013dd4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013db4:	3328      	adds	r3, #40	; 0x28
 8013db6:	2100      	movs	r1, #0
 8013db8:	4618      	mov	r0, r3
 8013dba:	f000 f90d 	bl	8013fd8 <RCCEx_PLL3_Config>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8013dc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d003      	beq.n	8013dd4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013dcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013dd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8013dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ddc:	2100      	movs	r1, #0
 8013dde:	60b9      	str	r1, [r7, #8]
 8013de0:	f003 0310 	and.w	r3, r3, #16
 8013de4:	60fb      	str	r3, [r7, #12]
 8013de6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013dea:	460b      	mov	r3, r1
 8013dec:	4313      	orrs	r3, r2
 8013dee:	d011      	beq.n	8013e14 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013df4:	3328      	adds	r3, #40	; 0x28
 8013df6:	2101      	movs	r1, #1
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f000 f8ed 	bl	8013fd8 <RCCEx_PLL3_Config>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013e04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d003      	beq.n	8013e14 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013e10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8013e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e1c:	2100      	movs	r1, #0
 8013e1e:	6039      	str	r1, [r7, #0]
 8013e20:	f003 0320 	and.w	r3, r3, #32
 8013e24:	607b      	str	r3, [r7, #4]
 8013e26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	4313      	orrs	r3, r2
 8013e2e:	d011      	beq.n	8013e54 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e34:	3328      	adds	r3, #40	; 0x28
 8013e36:	2102      	movs	r1, #2
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f000 f8cd 	bl	8013fd8 <RCCEx_PLL3_Config>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8013e44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d003      	beq.n	8013e54 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013e4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013e50:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8013e54:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d101      	bne.n	8013e60 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	e000      	b.n	8013e62 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8013e60:	2301      	movs	r3, #1
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013e6e:	bf00      	nop
 8013e70:	58024400 	.word	0x58024400

08013e74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013e82:	4b53      	ldr	r3, [pc, #332]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e86:	f003 0303 	and.w	r3, r3, #3
 8013e8a:	2b03      	cmp	r3, #3
 8013e8c:	d101      	bne.n	8013e92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8013e8e:	2301      	movs	r3, #1
 8013e90:	e099      	b.n	8013fc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013e92:	4b4f      	ldr	r3, [pc, #316]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	4a4e      	ldr	r2, [pc, #312]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013e98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013e9e:	f7f8 f917 	bl	800c0d0 <HAL_GetTick>
 8013ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013ea4:	e008      	b.n	8013eb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013ea6:	f7f8 f913 	bl	800c0d0 <HAL_GetTick>
 8013eaa:	4602      	mov	r2, r0
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	1ad3      	subs	r3, r2, r3
 8013eb0:	2b02      	cmp	r3, #2
 8013eb2:	d901      	bls.n	8013eb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013eb4:	2303      	movs	r3, #3
 8013eb6:	e086      	b.n	8013fc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013eb8:	4b45      	ldr	r3, [pc, #276]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d1f0      	bne.n	8013ea6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8013ec4:	4b42      	ldr	r3, [pc, #264]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ec8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	031b      	lsls	r3, r3, #12
 8013ed2:	493f      	ldr	r1, [pc, #252]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013ed4:	4313      	orrs	r3, r2
 8013ed6:	628b      	str	r3, [r1, #40]	; 0x28
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	3b01      	subs	r3, #1
 8013ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	689b      	ldr	r3, [r3, #8]
 8013ee6:	3b01      	subs	r3, #1
 8013ee8:	025b      	lsls	r3, r3, #9
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	431a      	orrs	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	68db      	ldr	r3, [r3, #12]
 8013ef2:	3b01      	subs	r3, #1
 8013ef4:	041b      	lsls	r3, r3, #16
 8013ef6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8013efa:	431a      	orrs	r2, r3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	691b      	ldr	r3, [r3, #16]
 8013f00:	3b01      	subs	r3, #1
 8013f02:	061b      	lsls	r3, r3, #24
 8013f04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8013f08:	4931      	ldr	r1, [pc, #196]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f0a:	4313      	orrs	r3, r2
 8013f0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8013f0e:	4b30      	ldr	r3, [pc, #192]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	695b      	ldr	r3, [r3, #20]
 8013f1a:	492d      	ldr	r1, [pc, #180]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f1c:	4313      	orrs	r3, r2
 8013f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8013f20:	4b2b      	ldr	r3, [pc, #172]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f24:	f023 0220 	bic.w	r2, r3, #32
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	699b      	ldr	r3, [r3, #24]
 8013f2c:	4928      	ldr	r1, [pc, #160]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f2e:	4313      	orrs	r3, r2
 8013f30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8013f32:	4b27      	ldr	r3, [pc, #156]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f36:	4a26      	ldr	r2, [pc, #152]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f38:	f023 0310 	bic.w	r3, r3, #16
 8013f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8013f3e:	4b24      	ldr	r3, [pc, #144]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013f42:	4b24      	ldr	r3, [pc, #144]	; (8013fd4 <RCCEx_PLL2_Config+0x160>)
 8013f44:	4013      	ands	r3, r2
 8013f46:	687a      	ldr	r2, [r7, #4]
 8013f48:	69d2      	ldr	r2, [r2, #28]
 8013f4a:	00d2      	lsls	r2, r2, #3
 8013f4c:	4920      	ldr	r1, [pc, #128]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f4e:	4313      	orrs	r3, r2
 8013f50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8013f52:	4b1f      	ldr	r3, [pc, #124]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f56:	4a1e      	ldr	r2, [pc, #120]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f58:	f043 0310 	orr.w	r3, r3, #16
 8013f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d106      	bne.n	8013f72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8013f64:	4b1a      	ldr	r3, [pc, #104]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f68:	4a19      	ldr	r2, [pc, #100]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013f70:	e00f      	b.n	8013f92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	2b01      	cmp	r3, #1
 8013f76:	d106      	bne.n	8013f86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8013f78:	4b15      	ldr	r3, [pc, #84]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f7c:	4a14      	ldr	r2, [pc, #80]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013f84:	e005      	b.n	8013f92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8013f86:	4b12      	ldr	r3, [pc, #72]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f8a:	4a11      	ldr	r2, [pc, #68]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013f90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8013f92:	4b0f      	ldr	r3, [pc, #60]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	4a0e      	ldr	r2, [pc, #56]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013f9e:	f7f8 f897 	bl	800c0d0 <HAL_GetTick>
 8013fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013fa4:	e008      	b.n	8013fb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013fa6:	f7f8 f893 	bl	800c0d0 <HAL_GetTick>
 8013faa:	4602      	mov	r2, r0
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	1ad3      	subs	r3, r2, r3
 8013fb0:	2b02      	cmp	r3, #2
 8013fb2:	d901      	bls.n	8013fb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013fb4:	2303      	movs	r3, #3
 8013fb6:	e006      	b.n	8013fc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013fb8:	4b05      	ldr	r3, [pc, #20]	; (8013fd0 <RCCEx_PLL2_Config+0x15c>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d0f0      	beq.n	8013fa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8013fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	58024400 	.word	0x58024400
 8013fd4:	ffff0007 	.word	0xffff0007

08013fd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b084      	sub	sp, #16
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013fe6:	4b53      	ldr	r3, [pc, #332]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 8013fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fea:	f003 0303 	and.w	r3, r3, #3
 8013fee:	2b03      	cmp	r3, #3
 8013ff0:	d101      	bne.n	8013ff6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	e099      	b.n	801412a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8013ff6:	4b4f      	ldr	r3, [pc, #316]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	4a4e      	ldr	r2, [pc, #312]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 8013ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014002:	f7f8 f865 	bl	800c0d0 <HAL_GetTick>
 8014006:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014008:	e008      	b.n	801401c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801400a:	f7f8 f861 	bl	800c0d0 <HAL_GetTick>
 801400e:	4602      	mov	r2, r0
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	1ad3      	subs	r3, r2, r3
 8014014:	2b02      	cmp	r3, #2
 8014016:	d901      	bls.n	801401c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014018:	2303      	movs	r3, #3
 801401a:	e086      	b.n	801412a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801401c:	4b45      	ldr	r3, [pc, #276]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014024:	2b00      	cmp	r3, #0
 8014026:	d1f0      	bne.n	801400a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014028:	4b42      	ldr	r3, [pc, #264]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 801402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801402c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	051b      	lsls	r3, r3, #20
 8014036:	493f      	ldr	r1, [pc, #252]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 8014038:	4313      	orrs	r3, r2
 801403a:	628b      	str	r3, [r1, #40]	; 0x28
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	685b      	ldr	r3, [r3, #4]
 8014040:	3b01      	subs	r3, #1
 8014042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	689b      	ldr	r3, [r3, #8]
 801404a:	3b01      	subs	r3, #1
 801404c:	025b      	lsls	r3, r3, #9
 801404e:	b29b      	uxth	r3, r3
 8014050:	431a      	orrs	r2, r3
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	68db      	ldr	r3, [r3, #12]
 8014056:	3b01      	subs	r3, #1
 8014058:	041b      	lsls	r3, r3, #16
 801405a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801405e:	431a      	orrs	r2, r3
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	691b      	ldr	r3, [r3, #16]
 8014064:	3b01      	subs	r3, #1
 8014066:	061b      	lsls	r3, r3, #24
 8014068:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801406c:	4931      	ldr	r1, [pc, #196]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 801406e:	4313      	orrs	r3, r2
 8014070:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8014072:	4b30      	ldr	r3, [pc, #192]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 8014074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	695b      	ldr	r3, [r3, #20]
 801407e:	492d      	ldr	r1, [pc, #180]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 8014080:	4313      	orrs	r3, r2
 8014082:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8014084:	4b2b      	ldr	r3, [pc, #172]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 8014086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014088:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	699b      	ldr	r3, [r3, #24]
 8014090:	4928      	ldr	r1, [pc, #160]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 8014092:	4313      	orrs	r3, r2
 8014094:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8014096:	4b27      	ldr	r3, [pc, #156]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 8014098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801409a:	4a26      	ldr	r2, [pc, #152]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 801409c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80140a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80140a2:	4b24      	ldr	r3, [pc, #144]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80140a6:	4b24      	ldr	r3, [pc, #144]	; (8014138 <RCCEx_PLL3_Config+0x160>)
 80140a8:	4013      	ands	r3, r2
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	69d2      	ldr	r2, [r2, #28]
 80140ae:	00d2      	lsls	r2, r2, #3
 80140b0:	4920      	ldr	r1, [pc, #128]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140b2:	4313      	orrs	r3, r2
 80140b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80140b6:	4b1f      	ldr	r3, [pc, #124]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ba:	4a1e      	ldr	r2, [pc, #120]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80140c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d106      	bne.n	80140d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80140c8:	4b1a      	ldr	r3, [pc, #104]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140cc:	4a19      	ldr	r2, [pc, #100]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80140d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80140d4:	e00f      	b.n	80140f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	2b01      	cmp	r3, #1
 80140da:	d106      	bne.n	80140ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80140dc:	4b15      	ldr	r3, [pc, #84]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140e0:	4a14      	ldr	r2, [pc, #80]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80140e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80140e8:	e005      	b.n	80140f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80140ea:	4b12      	ldr	r3, [pc, #72]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ee:	4a11      	ldr	r2, [pc, #68]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80140f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80140f6:	4b0f      	ldr	r3, [pc, #60]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	4a0e      	ldr	r2, [pc, #56]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 80140fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014102:	f7f7 ffe5 	bl	800c0d0 <HAL_GetTick>
 8014106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014108:	e008      	b.n	801411c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801410a:	f7f7 ffe1 	bl	800c0d0 <HAL_GetTick>
 801410e:	4602      	mov	r2, r0
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	1ad3      	subs	r3, r2, r3
 8014114:	2b02      	cmp	r3, #2
 8014116:	d901      	bls.n	801411c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014118:	2303      	movs	r3, #3
 801411a:	e006      	b.n	801412a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801411c:	4b05      	ldr	r3, [pc, #20]	; (8014134 <RCCEx_PLL3_Config+0x15c>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014124:	2b00      	cmp	r3, #0
 8014126:	d0f0      	beq.n	801410a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014128:	7bfb      	ldrb	r3, [r7, #15]
}
 801412a:	4618      	mov	r0, r3
 801412c:	3710      	adds	r7, #16
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
 8014132:	bf00      	nop
 8014134:	58024400 	.word	0x58024400
 8014138:	ffff0007 	.word	0xffff0007

0801413c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d101      	bne.n	8014150 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 801414c:	2301      	movs	r3, #1
 801414e:	e02b      	b.n	80141a8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014156:	b2db      	uxtb	r3, r3
 8014158:	2b00      	cmp	r3, #0
 801415a:	d106      	bne.n	801416a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2200      	movs	r2, #0
 8014160:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f7f2 ff77 	bl	8007058 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2202      	movs	r2, #2
 801416e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681a      	ldr	r2, [r3, #0]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	3304      	adds	r3, #4
 801417a:	4619      	mov	r1, r3
 801417c:	4610      	mov	r0, r2
 801417e:	f000 fb4f 	bl	8014820 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6818      	ldr	r0, [r3, #0]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	461a      	mov	r2, r3
 801418c:	6839      	ldr	r1, [r7, #0]
 801418e:	f000 fba3 	bl	80148d8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8014192:	4b07      	ldr	r3, [pc, #28]	; (80141b0 <HAL_SDRAM_Init+0x74>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	4a06      	ldr	r2, [pc, #24]	; (80141b0 <HAL_SDRAM_Init+0x74>)
 8014198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801419c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	2201      	movs	r2, #1
 80141a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80141a6:	2300      	movs	r3, #0
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3708      	adds	r7, #8
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	52004000 	.word	0x52004000

080141b4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b086      	sub	sp, #24
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	60f8      	str	r0, [r7, #12]
 80141bc:	60b9      	str	r1, [r7, #8]
 80141be:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80141c6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80141c8:	7dfb      	ldrb	r3, [r7, #23]
 80141ca:	2b02      	cmp	r3, #2
 80141cc:	d101      	bne.n	80141d2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80141ce:	2302      	movs	r3, #2
 80141d0:	e021      	b.n	8014216 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80141d2:	7dfb      	ldrb	r3, [r7, #23]
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	d002      	beq.n	80141de <HAL_SDRAM_SendCommand+0x2a>
 80141d8:	7dfb      	ldrb	r3, [r7, #23]
 80141da:	2b05      	cmp	r3, #5
 80141dc:	d118      	bne.n	8014210 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	2202      	movs	r2, #2
 80141e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	68b9      	ldr	r1, [r7, #8]
 80141ee:	4618      	mov	r0, r3
 80141f0:	f000 fbdc 	bl	80149ac <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	2b02      	cmp	r3, #2
 80141fa:	d104      	bne.n	8014206 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	2205      	movs	r2, #5
 8014200:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8014204:	e006      	b.n	8014214 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	2201      	movs	r2, #1
 801420a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801420e:	e001      	b.n	8014214 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8014210:	2301      	movs	r3, #1
 8014212:	e000      	b.n	8014216 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8014214:	2300      	movs	r3, #0
}
 8014216:	4618      	mov	r0, r3
 8014218:	3718      	adds	r7, #24
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801421e:	b580      	push	{r7, lr}
 8014220:	b082      	sub	sp, #8
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
 8014226:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801422e:	b2db      	uxtb	r3, r3
 8014230:	2b02      	cmp	r3, #2
 8014232:	d101      	bne.n	8014238 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8014234:	2302      	movs	r3, #2
 8014236:	e016      	b.n	8014266 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801423e:	b2db      	uxtb	r3, r3
 8014240:	2b01      	cmp	r3, #1
 8014242:	d10f      	bne.n	8014264 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2202      	movs	r2, #2
 8014248:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	6839      	ldr	r1, [r7, #0]
 8014252:	4618      	mov	r0, r3
 8014254:	f000 fbce 	bl	80149f4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2201      	movs	r2, #1
 801425c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8014260:	2300      	movs	r3, #0
 8014262:	e000      	b.n	8014266 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8014264:	2301      	movs	r3, #1
}
 8014266:	4618      	mov	r0, r3
 8014268:	3708      	adds	r7, #8
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}

0801426e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801426e:	b580      	push	{r7, lr}
 8014270:	b082      	sub	sp, #8
 8014272:	af00      	add	r7, sp, #0
 8014274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d101      	bne.n	8014280 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801427c:	2301      	movs	r3, #1
 801427e:	e049      	b.n	8014314 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014286:	b2db      	uxtb	r3, r3
 8014288:	2b00      	cmp	r3, #0
 801428a:	d106      	bne.n	801429a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2200      	movs	r2, #0
 8014290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f000 f841 	bl	801431c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	2202      	movs	r2, #2
 801429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681a      	ldr	r2, [r3, #0]
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	3304      	adds	r3, #4
 80142aa:	4619      	mov	r1, r3
 80142ac:	4610      	mov	r0, r2
 80142ae:	f000 f9ff 	bl	80146b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2201      	movs	r2, #1
 80142b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2201      	movs	r2, #1
 80142be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2201      	movs	r2, #1
 80142c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	2201      	movs	r2, #1
 80142ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2201      	movs	r2, #1
 80142d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	2201      	movs	r2, #1
 80142de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2201      	movs	r2, #1
 80142e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2201      	movs	r2, #1
 80142ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2201      	movs	r2, #1
 80142f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2201      	movs	r2, #1
 80142fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2201      	movs	r2, #1
 8014306:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2201      	movs	r2, #1
 801430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014312:	2300      	movs	r3, #0
}
 8014314:	4618      	mov	r0, r3
 8014316:	3708      	adds	r7, #8
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}

0801431c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801431c:	b480      	push	{r7}
 801431e:	b083      	sub	sp, #12
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8014324:	bf00      	nop
 8014326:	370c      	adds	r7, #12
 8014328:	46bd      	mov	sp, r7
 801432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432e:	4770      	bx	lr

08014330 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014330:	b480      	push	{r7}
 8014332:	b085      	sub	sp, #20
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801433e:	b2db      	uxtb	r3, r3
 8014340:	2b01      	cmp	r3, #1
 8014342:	d001      	beq.n	8014348 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014344:	2301      	movs	r3, #1
 8014346:	e054      	b.n	80143f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2202      	movs	r2, #2
 801434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	68da      	ldr	r2, [r3, #12]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	f042 0201 	orr.w	r2, r2, #1
 801435e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	4a26      	ldr	r2, [pc, #152]	; (8014400 <HAL_TIM_Base_Start_IT+0xd0>)
 8014366:	4293      	cmp	r3, r2
 8014368:	d022      	beq.n	80143b0 <HAL_TIM_Base_Start_IT+0x80>
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014372:	d01d      	beq.n	80143b0 <HAL_TIM_Base_Start_IT+0x80>
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	4a22      	ldr	r2, [pc, #136]	; (8014404 <HAL_TIM_Base_Start_IT+0xd4>)
 801437a:	4293      	cmp	r3, r2
 801437c:	d018      	beq.n	80143b0 <HAL_TIM_Base_Start_IT+0x80>
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4a21      	ldr	r2, [pc, #132]	; (8014408 <HAL_TIM_Base_Start_IT+0xd8>)
 8014384:	4293      	cmp	r3, r2
 8014386:	d013      	beq.n	80143b0 <HAL_TIM_Base_Start_IT+0x80>
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	4a1f      	ldr	r2, [pc, #124]	; (801440c <HAL_TIM_Base_Start_IT+0xdc>)
 801438e:	4293      	cmp	r3, r2
 8014390:	d00e      	beq.n	80143b0 <HAL_TIM_Base_Start_IT+0x80>
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	4a1e      	ldr	r2, [pc, #120]	; (8014410 <HAL_TIM_Base_Start_IT+0xe0>)
 8014398:	4293      	cmp	r3, r2
 801439a:	d009      	beq.n	80143b0 <HAL_TIM_Base_Start_IT+0x80>
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	4a1c      	ldr	r2, [pc, #112]	; (8014414 <HAL_TIM_Base_Start_IT+0xe4>)
 80143a2:	4293      	cmp	r3, r2
 80143a4:	d004      	beq.n	80143b0 <HAL_TIM_Base_Start_IT+0x80>
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	4a1b      	ldr	r2, [pc, #108]	; (8014418 <HAL_TIM_Base_Start_IT+0xe8>)
 80143ac:	4293      	cmp	r3, r2
 80143ae:	d115      	bne.n	80143dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	689a      	ldr	r2, [r3, #8]
 80143b6:	4b19      	ldr	r3, [pc, #100]	; (801441c <HAL_TIM_Base_Start_IT+0xec>)
 80143b8:	4013      	ands	r3, r2
 80143ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	2b06      	cmp	r3, #6
 80143c0:	d015      	beq.n	80143ee <HAL_TIM_Base_Start_IT+0xbe>
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143c8:	d011      	beq.n	80143ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	681a      	ldr	r2, [r3, #0]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	f042 0201 	orr.w	r2, r2, #1
 80143d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143da:	e008      	b.n	80143ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	681a      	ldr	r2, [r3, #0]
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	f042 0201 	orr.w	r2, r2, #1
 80143ea:	601a      	str	r2, [r3, #0]
 80143ec:	e000      	b.n	80143f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80143f0:	2300      	movs	r3, #0
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3714      	adds	r7, #20
 80143f6:	46bd      	mov	sp, r7
 80143f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fc:	4770      	bx	lr
 80143fe:	bf00      	nop
 8014400:	40010000 	.word	0x40010000
 8014404:	40000400 	.word	0x40000400
 8014408:	40000800 	.word	0x40000800
 801440c:	40000c00 	.word	0x40000c00
 8014410:	40010400 	.word	0x40010400
 8014414:	40001800 	.word	0x40001800
 8014418:	40014000 	.word	0x40014000
 801441c:	00010007 	.word	0x00010007

08014420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	691b      	ldr	r3, [r3, #16]
 801442e:	f003 0302 	and.w	r3, r3, #2
 8014432:	2b02      	cmp	r3, #2
 8014434:	d122      	bne.n	801447c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	68db      	ldr	r3, [r3, #12]
 801443c:	f003 0302 	and.w	r3, r3, #2
 8014440:	2b02      	cmp	r3, #2
 8014442:	d11b      	bne.n	801447c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	f06f 0202 	mvn.w	r2, #2
 801444c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2201      	movs	r2, #1
 8014452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	699b      	ldr	r3, [r3, #24]
 801445a:	f003 0303 	and.w	r3, r3, #3
 801445e:	2b00      	cmp	r3, #0
 8014460:	d003      	beq.n	801446a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f000 f905 	bl	8014672 <HAL_TIM_IC_CaptureCallback>
 8014468:	e005      	b.n	8014476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f000 f8f7 	bl	801465e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f000 f908 	bl	8014686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2200      	movs	r2, #0
 801447a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	691b      	ldr	r3, [r3, #16]
 8014482:	f003 0304 	and.w	r3, r3, #4
 8014486:	2b04      	cmp	r3, #4
 8014488:	d122      	bne.n	80144d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	68db      	ldr	r3, [r3, #12]
 8014490:	f003 0304 	and.w	r3, r3, #4
 8014494:	2b04      	cmp	r3, #4
 8014496:	d11b      	bne.n	80144d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	f06f 0204 	mvn.w	r2, #4
 80144a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2202      	movs	r2, #2
 80144a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	699b      	ldr	r3, [r3, #24]
 80144ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d003      	beq.n	80144be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f000 f8db 	bl	8014672 <HAL_TIM_IC_CaptureCallback>
 80144bc:	e005      	b.n	80144ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f000 f8cd 	bl	801465e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f000 f8de 	bl	8014686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2200      	movs	r2, #0
 80144ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	691b      	ldr	r3, [r3, #16]
 80144d6:	f003 0308 	and.w	r3, r3, #8
 80144da:	2b08      	cmp	r3, #8
 80144dc:	d122      	bne.n	8014524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	68db      	ldr	r3, [r3, #12]
 80144e4:	f003 0308 	and.w	r3, r3, #8
 80144e8:	2b08      	cmp	r3, #8
 80144ea:	d11b      	bne.n	8014524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	f06f 0208 	mvn.w	r2, #8
 80144f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2204      	movs	r2, #4
 80144fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	69db      	ldr	r3, [r3, #28]
 8014502:	f003 0303 	and.w	r3, r3, #3
 8014506:	2b00      	cmp	r3, #0
 8014508:	d003      	beq.n	8014512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f000 f8b1 	bl	8014672 <HAL_TIM_IC_CaptureCallback>
 8014510:	e005      	b.n	801451e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 f8a3 	bl	801465e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f000 f8b4 	bl	8014686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2200      	movs	r2, #0
 8014522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	691b      	ldr	r3, [r3, #16]
 801452a:	f003 0310 	and.w	r3, r3, #16
 801452e:	2b10      	cmp	r3, #16
 8014530:	d122      	bne.n	8014578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	68db      	ldr	r3, [r3, #12]
 8014538:	f003 0310 	and.w	r3, r3, #16
 801453c:	2b10      	cmp	r3, #16
 801453e:	d11b      	bne.n	8014578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	f06f 0210 	mvn.w	r2, #16
 8014548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2208      	movs	r2, #8
 801454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	69db      	ldr	r3, [r3, #28]
 8014556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801455a:	2b00      	cmp	r3, #0
 801455c:	d003      	beq.n	8014566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f000 f887 	bl	8014672 <HAL_TIM_IC_CaptureCallback>
 8014564:	e005      	b.n	8014572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f000 f879 	bl	801465e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f000 f88a 	bl	8014686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2200      	movs	r2, #0
 8014576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	691b      	ldr	r3, [r3, #16]
 801457e:	f003 0301 	and.w	r3, r3, #1
 8014582:	2b01      	cmp	r3, #1
 8014584:	d10e      	bne.n	80145a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	68db      	ldr	r3, [r3, #12]
 801458c:	f003 0301 	and.w	r3, r3, #1
 8014590:	2b01      	cmp	r3, #1
 8014592:	d107      	bne.n	80145a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	f06f 0201 	mvn.w	r2, #1
 801459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f7f2 f976 	bl	8006890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	691b      	ldr	r3, [r3, #16]
 80145aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80145ae:	2b80      	cmp	r3, #128	; 0x80
 80145b0:	d10e      	bne.n	80145d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	68db      	ldr	r3, [r3, #12]
 80145b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80145bc:	2b80      	cmp	r3, #128	; 0x80
 80145be:	d107      	bne.n	80145d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80145c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f000 f914 	bl	80147f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	691b      	ldr	r3, [r3, #16]
 80145d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80145da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145de:	d10e      	bne.n	80145fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	68db      	ldr	r3, [r3, #12]
 80145e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80145ea:	2b80      	cmp	r3, #128	; 0x80
 80145ec:	d107      	bne.n	80145fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80145f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f000 f907 	bl	801480c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	691b      	ldr	r3, [r3, #16]
 8014604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014608:	2b40      	cmp	r3, #64	; 0x40
 801460a:	d10e      	bne.n	801462a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	68db      	ldr	r3, [r3, #12]
 8014612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014616:	2b40      	cmp	r3, #64	; 0x40
 8014618:	d107      	bne.n	801462a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f000 f838 	bl	801469a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	691b      	ldr	r3, [r3, #16]
 8014630:	f003 0320 	and.w	r3, r3, #32
 8014634:	2b20      	cmp	r3, #32
 8014636:	d10e      	bne.n	8014656 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	68db      	ldr	r3, [r3, #12]
 801463e:	f003 0320 	and.w	r3, r3, #32
 8014642:	2b20      	cmp	r3, #32
 8014644:	d107      	bne.n	8014656 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	f06f 0220 	mvn.w	r2, #32
 801464e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f000 f8c7 	bl	80147e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014656:	bf00      	nop
 8014658:	3708      	adds	r7, #8
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801465e:	b480      	push	{r7}
 8014660:	b083      	sub	sp, #12
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014666:	bf00      	nop
 8014668:	370c      	adds	r7, #12
 801466a:	46bd      	mov	sp, r7
 801466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014670:	4770      	bx	lr

08014672 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014672:	b480      	push	{r7}
 8014674:	b083      	sub	sp, #12
 8014676:	af00      	add	r7, sp, #0
 8014678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801467a:	bf00      	nop
 801467c:	370c      	adds	r7, #12
 801467e:	46bd      	mov	sp, r7
 8014680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014684:	4770      	bx	lr

08014686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014686:	b480      	push	{r7}
 8014688:	b083      	sub	sp, #12
 801468a:	af00      	add	r7, sp, #0
 801468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801468e:	bf00      	nop
 8014690:	370c      	adds	r7, #12
 8014692:	46bd      	mov	sp, r7
 8014694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014698:	4770      	bx	lr

0801469a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801469a:	b480      	push	{r7}
 801469c:	b083      	sub	sp, #12
 801469e:	af00      	add	r7, sp, #0
 80146a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80146a2:	bf00      	nop
 80146a4:	370c      	adds	r7, #12
 80146a6:	46bd      	mov	sp, r7
 80146a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ac:	4770      	bx	lr
	...

080146b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80146b0:	b480      	push	{r7}
 80146b2:	b085      	sub	sp, #20
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	4a40      	ldr	r2, [pc, #256]	; (80147c4 <TIM_Base_SetConfig+0x114>)
 80146c4:	4293      	cmp	r3, r2
 80146c6:	d013      	beq.n	80146f0 <TIM_Base_SetConfig+0x40>
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80146ce:	d00f      	beq.n	80146f0 <TIM_Base_SetConfig+0x40>
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	4a3d      	ldr	r2, [pc, #244]	; (80147c8 <TIM_Base_SetConfig+0x118>)
 80146d4:	4293      	cmp	r3, r2
 80146d6:	d00b      	beq.n	80146f0 <TIM_Base_SetConfig+0x40>
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	4a3c      	ldr	r2, [pc, #240]	; (80147cc <TIM_Base_SetConfig+0x11c>)
 80146dc:	4293      	cmp	r3, r2
 80146de:	d007      	beq.n	80146f0 <TIM_Base_SetConfig+0x40>
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	4a3b      	ldr	r2, [pc, #236]	; (80147d0 <TIM_Base_SetConfig+0x120>)
 80146e4:	4293      	cmp	r3, r2
 80146e6:	d003      	beq.n	80146f0 <TIM_Base_SetConfig+0x40>
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	4a3a      	ldr	r2, [pc, #232]	; (80147d4 <TIM_Base_SetConfig+0x124>)
 80146ec:	4293      	cmp	r3, r2
 80146ee:	d108      	bne.n	8014702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80146f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	68fa      	ldr	r2, [r7, #12]
 80146fe:	4313      	orrs	r3, r2
 8014700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	4a2f      	ldr	r2, [pc, #188]	; (80147c4 <TIM_Base_SetConfig+0x114>)
 8014706:	4293      	cmp	r3, r2
 8014708:	d01f      	beq.n	801474a <TIM_Base_SetConfig+0x9a>
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014710:	d01b      	beq.n	801474a <TIM_Base_SetConfig+0x9a>
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	4a2c      	ldr	r2, [pc, #176]	; (80147c8 <TIM_Base_SetConfig+0x118>)
 8014716:	4293      	cmp	r3, r2
 8014718:	d017      	beq.n	801474a <TIM_Base_SetConfig+0x9a>
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	4a2b      	ldr	r2, [pc, #172]	; (80147cc <TIM_Base_SetConfig+0x11c>)
 801471e:	4293      	cmp	r3, r2
 8014720:	d013      	beq.n	801474a <TIM_Base_SetConfig+0x9a>
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	4a2a      	ldr	r2, [pc, #168]	; (80147d0 <TIM_Base_SetConfig+0x120>)
 8014726:	4293      	cmp	r3, r2
 8014728:	d00f      	beq.n	801474a <TIM_Base_SetConfig+0x9a>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4a29      	ldr	r2, [pc, #164]	; (80147d4 <TIM_Base_SetConfig+0x124>)
 801472e:	4293      	cmp	r3, r2
 8014730:	d00b      	beq.n	801474a <TIM_Base_SetConfig+0x9a>
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	4a28      	ldr	r2, [pc, #160]	; (80147d8 <TIM_Base_SetConfig+0x128>)
 8014736:	4293      	cmp	r3, r2
 8014738:	d007      	beq.n	801474a <TIM_Base_SetConfig+0x9a>
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	4a27      	ldr	r2, [pc, #156]	; (80147dc <TIM_Base_SetConfig+0x12c>)
 801473e:	4293      	cmp	r3, r2
 8014740:	d003      	beq.n	801474a <TIM_Base_SetConfig+0x9a>
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	4a26      	ldr	r2, [pc, #152]	; (80147e0 <TIM_Base_SetConfig+0x130>)
 8014746:	4293      	cmp	r3, r2
 8014748:	d108      	bne.n	801475c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	68db      	ldr	r3, [r3, #12]
 8014756:	68fa      	ldr	r2, [r7, #12]
 8014758:	4313      	orrs	r3, r2
 801475a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014762:	683b      	ldr	r3, [r7, #0]
 8014764:	695b      	ldr	r3, [r3, #20]
 8014766:	4313      	orrs	r3, r2
 8014768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	68fa      	ldr	r2, [r7, #12]
 801476e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	689a      	ldr	r2, [r3, #8]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	681a      	ldr	r2, [r3, #0]
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	4a10      	ldr	r2, [pc, #64]	; (80147c4 <TIM_Base_SetConfig+0x114>)
 8014784:	4293      	cmp	r3, r2
 8014786:	d00f      	beq.n	80147a8 <TIM_Base_SetConfig+0xf8>
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4a12      	ldr	r2, [pc, #72]	; (80147d4 <TIM_Base_SetConfig+0x124>)
 801478c:	4293      	cmp	r3, r2
 801478e:	d00b      	beq.n	80147a8 <TIM_Base_SetConfig+0xf8>
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	4a11      	ldr	r2, [pc, #68]	; (80147d8 <TIM_Base_SetConfig+0x128>)
 8014794:	4293      	cmp	r3, r2
 8014796:	d007      	beq.n	80147a8 <TIM_Base_SetConfig+0xf8>
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	4a10      	ldr	r2, [pc, #64]	; (80147dc <TIM_Base_SetConfig+0x12c>)
 801479c:	4293      	cmp	r3, r2
 801479e:	d003      	beq.n	80147a8 <TIM_Base_SetConfig+0xf8>
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	4a0f      	ldr	r2, [pc, #60]	; (80147e0 <TIM_Base_SetConfig+0x130>)
 80147a4:	4293      	cmp	r3, r2
 80147a6:	d103      	bne.n	80147b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	691a      	ldr	r2, [r3, #16]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2201      	movs	r2, #1
 80147b4:	615a      	str	r2, [r3, #20]
}
 80147b6:	bf00      	nop
 80147b8:	3714      	adds	r7, #20
 80147ba:	46bd      	mov	sp, r7
 80147bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c0:	4770      	bx	lr
 80147c2:	bf00      	nop
 80147c4:	40010000 	.word	0x40010000
 80147c8:	40000400 	.word	0x40000400
 80147cc:	40000800 	.word	0x40000800
 80147d0:	40000c00 	.word	0x40000c00
 80147d4:	40010400 	.word	0x40010400
 80147d8:	40014000 	.word	0x40014000
 80147dc:	40014400 	.word	0x40014400
 80147e0:	40014800 	.word	0x40014800

080147e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80147e4:	b480      	push	{r7}
 80147e6:	b083      	sub	sp, #12
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80147ec:	bf00      	nop
 80147ee:	370c      	adds	r7, #12
 80147f0:	46bd      	mov	sp, r7
 80147f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f6:	4770      	bx	lr

080147f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80147f8:	b480      	push	{r7}
 80147fa:	b083      	sub	sp, #12
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014800:	bf00      	nop
 8014802:	370c      	adds	r7, #12
 8014804:	46bd      	mov	sp, r7
 8014806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480a:	4770      	bx	lr

0801480c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801480c:	b480      	push	{r7}
 801480e:	b083      	sub	sp, #12
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014814:	bf00      	nop
 8014816:	370c      	adds	r7, #12
 8014818:	46bd      	mov	sp, r7
 801481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481e:	4770      	bx	lr

08014820 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8014820:	b480      	push	{r7}
 8014822:	b083      	sub	sp, #12
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d121      	bne.n	8014876 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	681a      	ldr	r2, [r3, #0]
 8014836:	4b27      	ldr	r3, [pc, #156]	; (80148d4 <FMC_SDRAM_Init+0xb4>)
 8014838:	4013      	ands	r3, r2
 801483a:	683a      	ldr	r2, [r7, #0]
 801483c:	6851      	ldr	r1, [r2, #4]
 801483e:	683a      	ldr	r2, [r7, #0]
 8014840:	6892      	ldr	r2, [r2, #8]
 8014842:	4311      	orrs	r1, r2
 8014844:	683a      	ldr	r2, [r7, #0]
 8014846:	68d2      	ldr	r2, [r2, #12]
 8014848:	4311      	orrs	r1, r2
 801484a:	683a      	ldr	r2, [r7, #0]
 801484c:	6912      	ldr	r2, [r2, #16]
 801484e:	4311      	orrs	r1, r2
 8014850:	683a      	ldr	r2, [r7, #0]
 8014852:	6952      	ldr	r2, [r2, #20]
 8014854:	4311      	orrs	r1, r2
 8014856:	683a      	ldr	r2, [r7, #0]
 8014858:	6992      	ldr	r2, [r2, #24]
 801485a:	4311      	orrs	r1, r2
 801485c:	683a      	ldr	r2, [r7, #0]
 801485e:	69d2      	ldr	r2, [r2, #28]
 8014860:	4311      	orrs	r1, r2
 8014862:	683a      	ldr	r2, [r7, #0]
 8014864:	6a12      	ldr	r2, [r2, #32]
 8014866:	4311      	orrs	r1, r2
 8014868:	683a      	ldr	r2, [r7, #0]
 801486a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801486c:	430a      	orrs	r2, r1
 801486e:	431a      	orrs	r2, r3
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	601a      	str	r2, [r3, #0]
 8014874:	e026      	b.n	80148c4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	69d9      	ldr	r1, [r3, #28]
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	6a1b      	ldr	r3, [r3, #32]
 8014886:	4319      	orrs	r1, r3
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801488c:	430b      	orrs	r3, r1
 801488e:	431a      	orrs	r2, r3
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	685a      	ldr	r2, [r3, #4]
 8014898:	4b0e      	ldr	r3, [pc, #56]	; (80148d4 <FMC_SDRAM_Init+0xb4>)
 801489a:	4013      	ands	r3, r2
 801489c:	683a      	ldr	r2, [r7, #0]
 801489e:	6851      	ldr	r1, [r2, #4]
 80148a0:	683a      	ldr	r2, [r7, #0]
 80148a2:	6892      	ldr	r2, [r2, #8]
 80148a4:	4311      	orrs	r1, r2
 80148a6:	683a      	ldr	r2, [r7, #0]
 80148a8:	68d2      	ldr	r2, [r2, #12]
 80148aa:	4311      	orrs	r1, r2
 80148ac:	683a      	ldr	r2, [r7, #0]
 80148ae:	6912      	ldr	r2, [r2, #16]
 80148b0:	4311      	orrs	r1, r2
 80148b2:	683a      	ldr	r2, [r7, #0]
 80148b4:	6952      	ldr	r2, [r2, #20]
 80148b6:	4311      	orrs	r1, r2
 80148b8:	683a      	ldr	r2, [r7, #0]
 80148ba:	6992      	ldr	r2, [r2, #24]
 80148bc:	430a      	orrs	r2, r1
 80148be:	431a      	orrs	r2, r3
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80148c4:	2300      	movs	r3, #0
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	370c      	adds	r7, #12
 80148ca:	46bd      	mov	sp, r7
 80148cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop
 80148d4:	ffff8000 	.word	0xffff8000

080148d8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80148d8:	b480      	push	{r7}
 80148da:	b085      	sub	sp, #20
 80148dc:	af00      	add	r7, sp, #0
 80148de:	60f8      	str	r0, [r7, #12]
 80148e0:	60b9      	str	r1, [r7, #8]
 80148e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d128      	bne.n	801493c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	689b      	ldr	r3, [r3, #8]
 80148ee:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	1e59      	subs	r1, r3, #1
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	685b      	ldr	r3, [r3, #4]
 80148fc:	3b01      	subs	r3, #1
 80148fe:	011b      	lsls	r3, r3, #4
 8014900:	4319      	orrs	r1, r3
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	689b      	ldr	r3, [r3, #8]
 8014906:	3b01      	subs	r3, #1
 8014908:	021b      	lsls	r3, r3, #8
 801490a:	4319      	orrs	r1, r3
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	3b01      	subs	r3, #1
 8014912:	031b      	lsls	r3, r3, #12
 8014914:	4319      	orrs	r1, r3
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	691b      	ldr	r3, [r3, #16]
 801491a:	3b01      	subs	r3, #1
 801491c:	041b      	lsls	r3, r3, #16
 801491e:	4319      	orrs	r1, r3
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	695b      	ldr	r3, [r3, #20]
 8014924:	3b01      	subs	r3, #1
 8014926:	051b      	lsls	r3, r3, #20
 8014928:	4319      	orrs	r1, r3
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	699b      	ldr	r3, [r3, #24]
 801492e:	3b01      	subs	r3, #1
 8014930:	061b      	lsls	r3, r3, #24
 8014932:	430b      	orrs	r3, r1
 8014934:	431a      	orrs	r2, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	609a      	str	r2, [r3, #8]
 801493a:	e02d      	b.n	8014998 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	689a      	ldr	r2, [r3, #8]
 8014940:	4b19      	ldr	r3, [pc, #100]	; (80149a8 <FMC_SDRAM_Timing_Init+0xd0>)
 8014942:	4013      	ands	r3, r2
 8014944:	68ba      	ldr	r2, [r7, #8]
 8014946:	68d2      	ldr	r2, [r2, #12]
 8014948:	3a01      	subs	r2, #1
 801494a:	0311      	lsls	r1, r2, #12
 801494c:	68ba      	ldr	r2, [r7, #8]
 801494e:	6952      	ldr	r2, [r2, #20]
 8014950:	3a01      	subs	r2, #1
 8014952:	0512      	lsls	r2, r2, #20
 8014954:	430a      	orrs	r2, r1
 8014956:	431a      	orrs	r2, r3
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	68db      	ldr	r3, [r3, #12]
 8014960:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	1e59      	subs	r1, r3, #1
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	685b      	ldr	r3, [r3, #4]
 801496e:	3b01      	subs	r3, #1
 8014970:	011b      	lsls	r3, r3, #4
 8014972:	4319      	orrs	r1, r3
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	689b      	ldr	r3, [r3, #8]
 8014978:	3b01      	subs	r3, #1
 801497a:	021b      	lsls	r3, r3, #8
 801497c:	4319      	orrs	r1, r3
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	691b      	ldr	r3, [r3, #16]
 8014982:	3b01      	subs	r3, #1
 8014984:	041b      	lsls	r3, r3, #16
 8014986:	4319      	orrs	r1, r3
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	699b      	ldr	r3, [r3, #24]
 801498c:	3b01      	subs	r3, #1
 801498e:	061b      	lsls	r3, r3, #24
 8014990:	430b      	orrs	r3, r1
 8014992:	431a      	orrs	r2, r3
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8014998:	2300      	movs	r3, #0
}
 801499a:	4618      	mov	r0, r3
 801499c:	3714      	adds	r7, #20
 801499e:	46bd      	mov	sp, r7
 80149a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a4:	4770      	bx	lr
 80149a6:	bf00      	nop
 80149a8:	ff0f0fff 	.word	0xff0f0fff

080149ac <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80149ac:	b480      	push	{r7}
 80149ae:	b085      	sub	sp, #20
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	691a      	ldr	r2, [r3, #16]
 80149bc:	4b0c      	ldr	r3, [pc, #48]	; (80149f0 <FMC_SDRAM_SendCommand+0x44>)
 80149be:	4013      	ands	r3, r2
 80149c0:	68ba      	ldr	r2, [r7, #8]
 80149c2:	6811      	ldr	r1, [r2, #0]
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	6852      	ldr	r2, [r2, #4]
 80149c8:	4311      	orrs	r1, r2
 80149ca:	68ba      	ldr	r2, [r7, #8]
 80149cc:	6892      	ldr	r2, [r2, #8]
 80149ce:	3a01      	subs	r2, #1
 80149d0:	0152      	lsls	r2, r2, #5
 80149d2:	4311      	orrs	r1, r2
 80149d4:	68ba      	ldr	r2, [r7, #8]
 80149d6:	68d2      	ldr	r2, [r2, #12]
 80149d8:	0252      	lsls	r2, r2, #9
 80149da:	430a      	orrs	r2, r1
 80149dc:	431a      	orrs	r2, r3
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80149e2:	2300      	movs	r3, #0
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3714      	adds	r7, #20
 80149e8:	46bd      	mov	sp, r7
 80149ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ee:	4770      	bx	lr
 80149f0:	ffc00000 	.word	0xffc00000

080149f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80149f4:	b480      	push	{r7}
 80149f6:	b083      	sub	sp, #12
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	695a      	ldr	r2, [r3, #20]
 8014a02:	4b07      	ldr	r3, [pc, #28]	; (8014a20 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8014a04:	4013      	ands	r3, r2
 8014a06:	683a      	ldr	r2, [r7, #0]
 8014a08:	0052      	lsls	r2, r2, #1
 8014a0a:	431a      	orrs	r2, r3
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8014a10:	2300      	movs	r3, #0
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	370c      	adds	r7, #12
 8014a16:	46bd      	mov	sp, r7
 8014a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop
 8014a20:	ffffc001 	.word	0xffffc001

08014a24 <__NVIC_SetPriority>:
{
 8014a24:	b480      	push	{r7}
 8014a26:	b083      	sub	sp, #12
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	6039      	str	r1, [r7, #0]
 8014a2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	db0a      	blt.n	8014a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	b2da      	uxtb	r2, r3
 8014a3c:	490c      	ldr	r1, [pc, #48]	; (8014a70 <__NVIC_SetPriority+0x4c>)
 8014a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014a42:	0112      	lsls	r2, r2, #4
 8014a44:	b2d2      	uxtb	r2, r2
 8014a46:	440b      	add	r3, r1
 8014a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014a4c:	e00a      	b.n	8014a64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	b2da      	uxtb	r2, r3
 8014a52:	4908      	ldr	r1, [pc, #32]	; (8014a74 <__NVIC_SetPriority+0x50>)
 8014a54:	88fb      	ldrh	r3, [r7, #6]
 8014a56:	f003 030f 	and.w	r3, r3, #15
 8014a5a:	3b04      	subs	r3, #4
 8014a5c:	0112      	lsls	r2, r2, #4
 8014a5e:	b2d2      	uxtb	r2, r2
 8014a60:	440b      	add	r3, r1
 8014a62:	761a      	strb	r2, [r3, #24]
}
 8014a64:	bf00      	nop
 8014a66:	370c      	adds	r7, #12
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6e:	4770      	bx	lr
 8014a70:	e000e100 	.word	0xe000e100
 8014a74:	e000ed00 	.word	0xe000ed00

08014a78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014a7c:	4b05      	ldr	r3, [pc, #20]	; (8014a94 <SysTick_Handler+0x1c>)
 8014a7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014a80:	f003 f8d0 	bl	8017c24 <xTaskGetSchedulerState>
 8014a84:	4603      	mov	r3, r0
 8014a86:	2b01      	cmp	r3, #1
 8014a88:	d001      	beq.n	8014a8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014a8a:	f001 f8f5 	bl	8015c78 <xPortSysTickHandler>
  }
}
 8014a8e:	bf00      	nop
 8014a90:	bd80      	pop	{r7, pc}
 8014a92:	bf00      	nop
 8014a94:	e000e010 	.word	0xe000e010

08014a98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014a9c:	2100      	movs	r1, #0
 8014a9e:	f06f 0004 	mvn.w	r0, #4
 8014aa2:	f7ff ffbf 	bl	8014a24 <__NVIC_SetPriority>
#endif
}
 8014aa6:	bf00      	nop
 8014aa8:	bd80      	pop	{r7, pc}
	...

08014aac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014aac:	b480      	push	{r7}
 8014aae:	b083      	sub	sp, #12
 8014ab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ab2:	f3ef 8305 	mrs	r3, IPSR
 8014ab6:	603b      	str	r3, [r7, #0]
  return(result);
 8014ab8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d003      	beq.n	8014ac6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014abe:	f06f 0305 	mvn.w	r3, #5
 8014ac2:	607b      	str	r3, [r7, #4]
 8014ac4:	e00c      	b.n	8014ae0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014ac6:	4b0a      	ldr	r3, [pc, #40]	; (8014af0 <osKernelInitialize+0x44>)
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d105      	bne.n	8014ada <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014ace:	4b08      	ldr	r3, [pc, #32]	; (8014af0 <osKernelInitialize+0x44>)
 8014ad0:	2201      	movs	r2, #1
 8014ad2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	607b      	str	r3, [r7, #4]
 8014ad8:	e002      	b.n	8014ae0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014ada:	f04f 33ff 	mov.w	r3, #4294967295
 8014ade:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014ae0:	687b      	ldr	r3, [r7, #4]
}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	370c      	adds	r7, #12
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aec:	4770      	bx	lr
 8014aee:	bf00      	nop
 8014af0:	2400be20 	.word	0x2400be20

08014af4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014afa:	f3ef 8305 	mrs	r3, IPSR
 8014afe:	603b      	str	r3, [r7, #0]
  return(result);
 8014b00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d003      	beq.n	8014b0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8014b06:	f06f 0305 	mvn.w	r3, #5
 8014b0a:	607b      	str	r3, [r7, #4]
 8014b0c:	e010      	b.n	8014b30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014b0e:	4b0b      	ldr	r3, [pc, #44]	; (8014b3c <osKernelStart+0x48>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2b01      	cmp	r3, #1
 8014b14:	d109      	bne.n	8014b2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014b16:	f7ff ffbf 	bl	8014a98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014b1a:	4b08      	ldr	r3, [pc, #32]	; (8014b3c <osKernelStart+0x48>)
 8014b1c:	2202      	movs	r2, #2
 8014b1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014b20:	f002 fbd6 	bl	80172d0 <vTaskStartScheduler>
      stat = osOK;
 8014b24:	2300      	movs	r3, #0
 8014b26:	607b      	str	r3, [r7, #4]
 8014b28:	e002      	b.n	8014b30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014b30:	687b      	ldr	r3, [r7, #4]
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	3708      	adds	r7, #8
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	2400be20 	.word	0x2400be20

08014b40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b08e      	sub	sp, #56	; 0x38
 8014b44:	af04      	add	r7, sp, #16
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014b50:	f3ef 8305 	mrs	r3, IPSR
 8014b54:	617b      	str	r3, [r7, #20]
  return(result);
 8014b56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d17e      	bne.n	8014c5a <osThreadNew+0x11a>
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d07b      	beq.n	8014c5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014b62:	2380      	movs	r3, #128	; 0x80
 8014b64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014b66:	2318      	movs	r3, #24
 8014b68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8014b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d045      	beq.n	8014c06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d002      	beq.n	8014b88 <osThreadNew+0x48>
        name = attr->name;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	699b      	ldr	r3, [r3, #24]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d002      	beq.n	8014b96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	699b      	ldr	r3, [r3, #24]
 8014b94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014b96:	69fb      	ldr	r3, [r7, #28]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d008      	beq.n	8014bae <osThreadNew+0x6e>
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	2b38      	cmp	r3, #56	; 0x38
 8014ba0:	d805      	bhi.n	8014bae <osThreadNew+0x6e>
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	f003 0301 	and.w	r3, r3, #1
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d001      	beq.n	8014bb2 <osThreadNew+0x72>
        return (NULL);
 8014bae:	2300      	movs	r3, #0
 8014bb0:	e054      	b.n	8014c5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	695b      	ldr	r3, [r3, #20]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d003      	beq.n	8014bc2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	695b      	ldr	r3, [r3, #20]
 8014bbe:	089b      	lsrs	r3, r3, #2
 8014bc0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	689b      	ldr	r3, [r3, #8]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d00e      	beq.n	8014be8 <osThreadNew+0xa8>
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	68db      	ldr	r3, [r3, #12]
 8014bce:	2b5f      	cmp	r3, #95	; 0x5f
 8014bd0:	d90a      	bls.n	8014be8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d006      	beq.n	8014be8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	695b      	ldr	r3, [r3, #20]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d002      	beq.n	8014be8 <osThreadNew+0xa8>
        mem = 1;
 8014be2:	2301      	movs	r3, #1
 8014be4:	61bb      	str	r3, [r7, #24]
 8014be6:	e010      	b.n	8014c0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	689b      	ldr	r3, [r3, #8]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d10c      	bne.n	8014c0a <osThreadNew+0xca>
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	68db      	ldr	r3, [r3, #12]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d108      	bne.n	8014c0a <osThreadNew+0xca>
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	691b      	ldr	r3, [r3, #16]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d104      	bne.n	8014c0a <osThreadNew+0xca>
          mem = 0;
 8014c00:	2300      	movs	r3, #0
 8014c02:	61bb      	str	r3, [r7, #24]
 8014c04:	e001      	b.n	8014c0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014c06:	2300      	movs	r3, #0
 8014c08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014c0a:	69bb      	ldr	r3, [r7, #24]
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d110      	bne.n	8014c32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014c18:	9202      	str	r2, [sp, #8]
 8014c1a:	9301      	str	r3, [sp, #4]
 8014c1c:	69fb      	ldr	r3, [r7, #28]
 8014c1e:	9300      	str	r3, [sp, #0]
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	6a3a      	ldr	r2, [r7, #32]
 8014c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c26:	68f8      	ldr	r0, [r7, #12]
 8014c28:	f002 f97a 	bl	8016f20 <xTaskCreateStatic>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	613b      	str	r3, [r7, #16]
 8014c30:	e013      	b.n	8014c5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d110      	bne.n	8014c5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014c38:	6a3b      	ldr	r3, [r7, #32]
 8014c3a:	b29a      	uxth	r2, r3
 8014c3c:	f107 0310 	add.w	r3, r7, #16
 8014c40:	9301      	str	r3, [sp, #4]
 8014c42:	69fb      	ldr	r3, [r7, #28]
 8014c44:	9300      	str	r3, [sp, #0]
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c4a:	68f8      	ldr	r0, [r7, #12]
 8014c4c:	f002 f9c5 	bl	8016fda <xTaskCreate>
 8014c50:	4603      	mov	r3, r0
 8014c52:	2b01      	cmp	r3, #1
 8014c54:	d001      	beq.n	8014c5a <osThreadNew+0x11a>
            hTask = NULL;
 8014c56:	2300      	movs	r3, #0
 8014c58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014c5a:	693b      	ldr	r3, [r7, #16]
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3728      	adds	r7, #40	; 0x28
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}

08014c64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c6c:	f3ef 8305 	mrs	r3, IPSR
 8014c70:	60bb      	str	r3, [r7, #8]
  return(result);
 8014c72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d003      	beq.n	8014c80 <osDelay+0x1c>
    stat = osErrorISR;
 8014c78:	f06f 0305 	mvn.w	r3, #5
 8014c7c:	60fb      	str	r3, [r7, #12]
 8014c7e:	e007      	b.n	8014c90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014c80:	2300      	movs	r3, #0
 8014c82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d002      	beq.n	8014c90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f002 faec 	bl	8017268 <vTaskDelay>
    }
  }

  return (stat);
 8014c90:	68fb      	ldr	r3, [r7, #12]
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	3710      	adds	r7, #16
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd80      	pop	{r7, pc}

08014c9a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8014c9a:	b580      	push	{r7, lr}
 8014c9c:	b088      	sub	sp, #32
 8014c9e:	af00      	add	r7, sp, #0
 8014ca0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ca6:	f3ef 8305 	mrs	r3, IPSR
 8014caa:	60bb      	str	r3, [r7, #8]
  return(result);
 8014cac:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d174      	bne.n	8014d9c <osMutexNew+0x102>
    if (attr != NULL) {
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d003      	beq.n	8014cc0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	685b      	ldr	r3, [r3, #4]
 8014cbc:	61bb      	str	r3, [r7, #24]
 8014cbe:	e001      	b.n	8014cc4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8014cc4:	69bb      	ldr	r3, [r7, #24]
 8014cc6:	f003 0301 	and.w	r3, r3, #1
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d002      	beq.n	8014cd4 <osMutexNew+0x3a>
      rmtx = 1U;
 8014cce:	2301      	movs	r3, #1
 8014cd0:	617b      	str	r3, [r7, #20]
 8014cd2:	e001      	b.n	8014cd8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	f003 0308 	and.w	r3, r3, #8
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d15c      	bne.n	8014d9c <osMutexNew+0x102>
      mem = -1;
 8014ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ce6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d015      	beq.n	8014d1a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	689b      	ldr	r3, [r3, #8]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d006      	beq.n	8014d04 <osMutexNew+0x6a>
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	2b4f      	cmp	r3, #79	; 0x4f
 8014cfc:	d902      	bls.n	8014d04 <osMutexNew+0x6a>
          mem = 1;
 8014cfe:	2301      	movs	r3, #1
 8014d00:	613b      	str	r3, [r7, #16]
 8014d02:	e00c      	b.n	8014d1e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	689b      	ldr	r3, [r3, #8]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d108      	bne.n	8014d1e <osMutexNew+0x84>
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d104      	bne.n	8014d1e <osMutexNew+0x84>
            mem = 0;
 8014d14:	2300      	movs	r3, #0
 8014d16:	613b      	str	r3, [r7, #16]
 8014d18:	e001      	b.n	8014d1e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	2b01      	cmp	r3, #1
 8014d22:	d112      	bne.n	8014d4a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8014d24:	697b      	ldr	r3, [r7, #20]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d007      	beq.n	8014d3a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	689b      	ldr	r3, [r3, #8]
 8014d2e:	4619      	mov	r1, r3
 8014d30:	2004      	movs	r0, #4
 8014d32:	f001 f9a0 	bl	8016076 <xQueueCreateMutexStatic>
 8014d36:	61f8      	str	r0, [r7, #28]
 8014d38:	e016      	b.n	8014d68 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	689b      	ldr	r3, [r3, #8]
 8014d3e:	4619      	mov	r1, r3
 8014d40:	2001      	movs	r0, #1
 8014d42:	f001 f998 	bl	8016076 <xQueueCreateMutexStatic>
 8014d46:	61f8      	str	r0, [r7, #28]
 8014d48:	e00e      	b.n	8014d68 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d10b      	bne.n	8014d68 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d004      	beq.n	8014d60 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8014d56:	2004      	movs	r0, #4
 8014d58:	f001 f975 	bl	8016046 <xQueueCreateMutex>
 8014d5c:	61f8      	str	r0, [r7, #28]
 8014d5e:	e003      	b.n	8014d68 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8014d60:	2001      	movs	r0, #1
 8014d62:	f001 f970 	bl	8016046 <xQueueCreateMutex>
 8014d66:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8014d68:	69fb      	ldr	r3, [r7, #28]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d00c      	beq.n	8014d88 <osMutexNew+0xee>
        if (attr != NULL) {
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d003      	beq.n	8014d7c <osMutexNew+0xe2>
          name = attr->name;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	60fb      	str	r3, [r7, #12]
 8014d7a:	e001      	b.n	8014d80 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8014d80:	68f9      	ldr	r1, [r7, #12]
 8014d82:	69f8      	ldr	r0, [r7, #28]
 8014d84:	f002 f844 	bl	8016e10 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8014d88:	69fb      	ldr	r3, [r7, #28]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d006      	beq.n	8014d9c <osMutexNew+0x102>
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d003      	beq.n	8014d9c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8014d94:	69fb      	ldr	r3, [r7, #28]
 8014d96:	f043 0301 	orr.w	r3, r3, #1
 8014d9a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8014d9c:	69fb      	ldr	r3, [r7, #28]
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3720      	adds	r7, #32
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}

08014da6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8014da6:	b580      	push	{r7, lr}
 8014da8:	b086      	sub	sp, #24
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	6078      	str	r0, [r7, #4]
 8014dae:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f023 0301 	bic.w	r3, r3, #1
 8014db6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f003 0301 	and.w	r3, r3, #1
 8014dbe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014dc4:	f3ef 8305 	mrs	r3, IPSR
 8014dc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8014dca:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d003      	beq.n	8014dd8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8014dd0:	f06f 0305 	mvn.w	r3, #5
 8014dd4:	617b      	str	r3, [r7, #20]
 8014dd6:	e02c      	b.n	8014e32 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8014dd8:	693b      	ldr	r3, [r7, #16]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d103      	bne.n	8014de6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8014dde:	f06f 0303 	mvn.w	r3, #3
 8014de2:	617b      	str	r3, [r7, #20]
 8014de4:	e025      	b.n	8014e32 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d011      	beq.n	8014e10 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8014dec:	6839      	ldr	r1, [r7, #0]
 8014dee:	6938      	ldr	r0, [r7, #16]
 8014df0:	f001 f990 	bl	8016114 <xQueueTakeMutexRecursive>
 8014df4:	4603      	mov	r3, r0
 8014df6:	2b01      	cmp	r3, #1
 8014df8:	d01b      	beq.n	8014e32 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d003      	beq.n	8014e08 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8014e00:	f06f 0301 	mvn.w	r3, #1
 8014e04:	617b      	str	r3, [r7, #20]
 8014e06:	e014      	b.n	8014e32 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8014e08:	f06f 0302 	mvn.w	r3, #2
 8014e0c:	617b      	str	r3, [r7, #20]
 8014e0e:	e010      	b.n	8014e32 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8014e10:	6839      	ldr	r1, [r7, #0]
 8014e12:	6938      	ldr	r0, [r7, #16]
 8014e14:	f001 fd24 	bl	8016860 <xQueueSemaphoreTake>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	2b01      	cmp	r3, #1
 8014e1c:	d009      	beq.n	8014e32 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d003      	beq.n	8014e2c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8014e24:	f06f 0301 	mvn.w	r3, #1
 8014e28:	617b      	str	r3, [r7, #20]
 8014e2a:	e002      	b.n	8014e32 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8014e2c:	f06f 0302 	mvn.w	r3, #2
 8014e30:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8014e32:	697b      	ldr	r3, [r7, #20]
}
 8014e34:	4618      	mov	r0, r3
 8014e36:	3718      	adds	r7, #24
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}

08014e3c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b086      	sub	sp, #24
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f023 0301 	bic.w	r3, r3, #1
 8014e4a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f003 0301 	and.w	r3, r3, #1
 8014e52:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8014e54:	2300      	movs	r3, #0
 8014e56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e58:	f3ef 8305 	mrs	r3, IPSR
 8014e5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8014e5e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d003      	beq.n	8014e6c <osMutexRelease+0x30>
    stat = osErrorISR;
 8014e64:	f06f 0305 	mvn.w	r3, #5
 8014e68:	617b      	str	r3, [r7, #20]
 8014e6a:	e01f      	b.n	8014eac <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8014e6c:	693b      	ldr	r3, [r7, #16]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d103      	bne.n	8014e7a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8014e72:	f06f 0303 	mvn.w	r3, #3
 8014e76:	617b      	str	r3, [r7, #20]
 8014e78:	e018      	b.n	8014eac <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d009      	beq.n	8014e94 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8014e80:	6938      	ldr	r0, [r7, #16]
 8014e82:	f001 f913 	bl	80160ac <xQueueGiveMutexRecursive>
 8014e86:	4603      	mov	r3, r0
 8014e88:	2b01      	cmp	r3, #1
 8014e8a:	d00f      	beq.n	8014eac <osMutexRelease+0x70>
        stat = osErrorResource;
 8014e8c:	f06f 0302 	mvn.w	r3, #2
 8014e90:	617b      	str	r3, [r7, #20]
 8014e92:	e00b      	b.n	8014eac <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8014e94:	2300      	movs	r3, #0
 8014e96:	2200      	movs	r2, #0
 8014e98:	2100      	movs	r1, #0
 8014e9a:	6938      	ldr	r0, [r7, #16]
 8014e9c:	f001 f9da 	bl	8016254 <xQueueGenericSend>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d002      	beq.n	8014eac <osMutexRelease+0x70>
        stat = osErrorResource;
 8014ea6:	f06f 0302 	mvn.w	r3, #2
 8014eaa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8014eac:	697b      	ldr	r3, [r7, #20]
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3718      	adds	r7, #24
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}

08014eb6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014eb6:	b580      	push	{r7, lr}
 8014eb8:	b08a      	sub	sp, #40	; 0x28
 8014eba:	af02      	add	r7, sp, #8
 8014ebc:	60f8      	str	r0, [r7, #12]
 8014ebe:	60b9      	str	r1, [r7, #8]
 8014ec0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ec6:	f3ef 8305 	mrs	r3, IPSR
 8014eca:	613b      	str	r3, [r7, #16]
  return(result);
 8014ecc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d175      	bne.n	8014fbe <osSemaphoreNew+0x108>
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d072      	beq.n	8014fbe <osSemaphoreNew+0x108>
 8014ed8:	68ba      	ldr	r2, [r7, #8]
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	429a      	cmp	r2, r3
 8014ede:	d86e      	bhi.n	8014fbe <osSemaphoreNew+0x108>
    mem = -1;
 8014ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ee4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d015      	beq.n	8014f18 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	689b      	ldr	r3, [r3, #8]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d006      	beq.n	8014f02 <osSemaphoreNew+0x4c>
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	68db      	ldr	r3, [r3, #12]
 8014ef8:	2b4f      	cmp	r3, #79	; 0x4f
 8014efa:	d902      	bls.n	8014f02 <osSemaphoreNew+0x4c>
        mem = 1;
 8014efc:	2301      	movs	r3, #1
 8014efe:	61bb      	str	r3, [r7, #24]
 8014f00:	e00c      	b.n	8014f1c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	689b      	ldr	r3, [r3, #8]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d108      	bne.n	8014f1c <osSemaphoreNew+0x66>
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	68db      	ldr	r3, [r3, #12]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d104      	bne.n	8014f1c <osSemaphoreNew+0x66>
          mem = 0;
 8014f12:	2300      	movs	r3, #0
 8014f14:	61bb      	str	r3, [r7, #24]
 8014f16:	e001      	b.n	8014f1c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8014f18:	2300      	movs	r3, #0
 8014f1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8014f1c:	69bb      	ldr	r3, [r7, #24]
 8014f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f22:	d04c      	beq.n	8014fbe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	2b01      	cmp	r3, #1
 8014f28:	d128      	bne.n	8014f7c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8014f2a:	69bb      	ldr	r3, [r7, #24]
 8014f2c:	2b01      	cmp	r3, #1
 8014f2e:	d10a      	bne.n	8014f46 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	689b      	ldr	r3, [r3, #8]
 8014f34:	2203      	movs	r2, #3
 8014f36:	9200      	str	r2, [sp, #0]
 8014f38:	2200      	movs	r2, #0
 8014f3a:	2100      	movs	r1, #0
 8014f3c:	2001      	movs	r0, #1
 8014f3e:	f000 ff93 	bl	8015e68 <xQueueGenericCreateStatic>
 8014f42:	61f8      	str	r0, [r7, #28]
 8014f44:	e005      	b.n	8014f52 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8014f46:	2203      	movs	r2, #3
 8014f48:	2100      	movs	r1, #0
 8014f4a:	2001      	movs	r0, #1
 8014f4c:	f001 f804 	bl	8015f58 <xQueueGenericCreate>
 8014f50:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8014f52:	69fb      	ldr	r3, [r7, #28]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d022      	beq.n	8014f9e <osSemaphoreNew+0xe8>
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d01f      	beq.n	8014f9e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014f5e:	2300      	movs	r3, #0
 8014f60:	2200      	movs	r2, #0
 8014f62:	2100      	movs	r1, #0
 8014f64:	69f8      	ldr	r0, [r7, #28]
 8014f66:	f001 f975 	bl	8016254 <xQueueGenericSend>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	d016      	beq.n	8014f9e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8014f70:	69f8      	ldr	r0, [r7, #28]
 8014f72:	f001 fe01 	bl	8016b78 <vQueueDelete>
            hSemaphore = NULL;
 8014f76:	2300      	movs	r3, #0
 8014f78:	61fb      	str	r3, [r7, #28]
 8014f7a:	e010      	b.n	8014f9e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8014f7c:	69bb      	ldr	r3, [r7, #24]
 8014f7e:	2b01      	cmp	r3, #1
 8014f80:	d108      	bne.n	8014f94 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	689b      	ldr	r3, [r3, #8]
 8014f86:	461a      	mov	r2, r3
 8014f88:	68b9      	ldr	r1, [r7, #8]
 8014f8a:	68f8      	ldr	r0, [r7, #12]
 8014f8c:	f001 f8f8 	bl	8016180 <xQueueCreateCountingSemaphoreStatic>
 8014f90:	61f8      	str	r0, [r7, #28]
 8014f92:	e004      	b.n	8014f9e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014f94:	68b9      	ldr	r1, [r7, #8]
 8014f96:	68f8      	ldr	r0, [r7, #12]
 8014f98:	f001 f929 	bl	80161ee <xQueueCreateCountingSemaphore>
 8014f9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014f9e:	69fb      	ldr	r3, [r7, #28]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d00c      	beq.n	8014fbe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d003      	beq.n	8014fb2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	617b      	str	r3, [r7, #20]
 8014fb0:	e001      	b.n	8014fb6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014fb6:	6979      	ldr	r1, [r7, #20]
 8014fb8:	69f8      	ldr	r0, [r7, #28]
 8014fba:	f001 ff29 	bl	8016e10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014fbe:	69fb      	ldr	r3, [r7, #28]
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3720      	adds	r7, #32
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b086      	sub	sp, #24
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014fda:	693b      	ldr	r3, [r7, #16]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d103      	bne.n	8014fe8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014fe0:	f06f 0303 	mvn.w	r3, #3
 8014fe4:	617b      	str	r3, [r7, #20]
 8014fe6:	e039      	b.n	801505c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014fe8:	f3ef 8305 	mrs	r3, IPSR
 8014fec:	60fb      	str	r3, [r7, #12]
  return(result);
 8014fee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d022      	beq.n	801503a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d003      	beq.n	8015002 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014ffa:	f06f 0303 	mvn.w	r3, #3
 8014ffe:	617b      	str	r3, [r7, #20]
 8015000:	e02c      	b.n	801505c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015002:	2300      	movs	r3, #0
 8015004:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015006:	f107 0308 	add.w	r3, r7, #8
 801500a:	461a      	mov	r2, r3
 801500c:	2100      	movs	r1, #0
 801500e:	6938      	ldr	r0, [r7, #16]
 8015010:	f001 fd32 	bl	8016a78 <xQueueReceiveFromISR>
 8015014:	4603      	mov	r3, r0
 8015016:	2b01      	cmp	r3, #1
 8015018:	d003      	beq.n	8015022 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801501a:	f06f 0302 	mvn.w	r3, #2
 801501e:	617b      	str	r3, [r7, #20]
 8015020:	e01c      	b.n	801505c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d019      	beq.n	801505c <osSemaphoreAcquire+0x94>
 8015028:	4b0f      	ldr	r3, [pc, #60]	; (8015068 <osSemaphoreAcquire+0xa0>)
 801502a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801502e:	601a      	str	r2, [r3, #0]
 8015030:	f3bf 8f4f 	dsb	sy
 8015034:	f3bf 8f6f 	isb	sy
 8015038:	e010      	b.n	801505c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801503a:	6839      	ldr	r1, [r7, #0]
 801503c:	6938      	ldr	r0, [r7, #16]
 801503e:	f001 fc0f 	bl	8016860 <xQueueSemaphoreTake>
 8015042:	4603      	mov	r3, r0
 8015044:	2b01      	cmp	r3, #1
 8015046:	d009      	beq.n	801505c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d003      	beq.n	8015056 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801504e:	f06f 0301 	mvn.w	r3, #1
 8015052:	617b      	str	r3, [r7, #20]
 8015054:	e002      	b.n	801505c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015056:	f06f 0302 	mvn.w	r3, #2
 801505a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801505c:	697b      	ldr	r3, [r7, #20]
}
 801505e:	4618      	mov	r0, r3
 8015060:	3718      	adds	r7, #24
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}
 8015066:	bf00      	nop
 8015068:	e000ed04 	.word	0xe000ed04

0801506c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801506c:	b580      	push	{r7, lr}
 801506e:	b086      	sub	sp, #24
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015078:	2300      	movs	r3, #0
 801507a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d103      	bne.n	801508a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015082:	f06f 0303 	mvn.w	r3, #3
 8015086:	617b      	str	r3, [r7, #20]
 8015088:	e02c      	b.n	80150e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801508a:	f3ef 8305 	mrs	r3, IPSR
 801508e:	60fb      	str	r3, [r7, #12]
  return(result);
 8015090:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015092:	2b00      	cmp	r3, #0
 8015094:	d01a      	beq.n	80150cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015096:	2300      	movs	r3, #0
 8015098:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801509a:	f107 0308 	add.w	r3, r7, #8
 801509e:	4619      	mov	r1, r3
 80150a0:	6938      	ldr	r0, [r7, #16]
 80150a2:	f001 fa70 	bl	8016586 <xQueueGiveFromISR>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b01      	cmp	r3, #1
 80150aa:	d003      	beq.n	80150b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80150ac:	f06f 0302 	mvn.w	r3, #2
 80150b0:	617b      	str	r3, [r7, #20]
 80150b2:	e017      	b.n	80150e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80150b4:	68bb      	ldr	r3, [r7, #8]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d014      	beq.n	80150e4 <osSemaphoreRelease+0x78>
 80150ba:	4b0d      	ldr	r3, [pc, #52]	; (80150f0 <osSemaphoreRelease+0x84>)
 80150bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150c0:	601a      	str	r2, [r3, #0]
 80150c2:	f3bf 8f4f 	dsb	sy
 80150c6:	f3bf 8f6f 	isb	sy
 80150ca:	e00b      	b.n	80150e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80150cc:	2300      	movs	r3, #0
 80150ce:	2200      	movs	r2, #0
 80150d0:	2100      	movs	r1, #0
 80150d2:	6938      	ldr	r0, [r7, #16]
 80150d4:	f001 f8be 	bl	8016254 <xQueueGenericSend>
 80150d8:	4603      	mov	r3, r0
 80150da:	2b01      	cmp	r3, #1
 80150dc:	d002      	beq.n	80150e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80150de:	f06f 0302 	mvn.w	r3, #2
 80150e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80150e4:	697b      	ldr	r3, [r7, #20]
}
 80150e6:	4618      	mov	r0, r3
 80150e8:	3718      	adds	r7, #24
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
 80150ee:	bf00      	nop
 80150f0:	e000ed04 	.word	0xe000ed04

080150f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b08a      	sub	sp, #40	; 0x28
 80150f8:	af02      	add	r7, sp, #8
 80150fa:	60f8      	str	r0, [r7, #12]
 80150fc:	60b9      	str	r1, [r7, #8]
 80150fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015100:	2300      	movs	r3, #0
 8015102:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015104:	f3ef 8305 	mrs	r3, IPSR
 8015108:	613b      	str	r3, [r7, #16]
  return(result);
 801510a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801510c:	2b00      	cmp	r3, #0
 801510e:	d15f      	bne.n	80151d0 <osMessageQueueNew+0xdc>
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d05c      	beq.n	80151d0 <osMessageQueueNew+0xdc>
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d059      	beq.n	80151d0 <osMessageQueueNew+0xdc>
    mem = -1;
 801511c:	f04f 33ff 	mov.w	r3, #4294967295
 8015120:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d029      	beq.n	801517c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	689b      	ldr	r3, [r3, #8]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d012      	beq.n	8015156 <osMessageQueueNew+0x62>
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	68db      	ldr	r3, [r3, #12]
 8015134:	2b4f      	cmp	r3, #79	; 0x4f
 8015136:	d90e      	bls.n	8015156 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801513c:	2b00      	cmp	r3, #0
 801513e:	d00a      	beq.n	8015156 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	695a      	ldr	r2, [r3, #20]
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	68b9      	ldr	r1, [r7, #8]
 8015148:	fb01 f303 	mul.w	r3, r1, r3
 801514c:	429a      	cmp	r2, r3
 801514e:	d302      	bcc.n	8015156 <osMessageQueueNew+0x62>
        mem = 1;
 8015150:	2301      	movs	r3, #1
 8015152:	61bb      	str	r3, [r7, #24]
 8015154:	e014      	b.n	8015180 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	689b      	ldr	r3, [r3, #8]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d110      	bne.n	8015180 <osMessageQueueNew+0x8c>
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	68db      	ldr	r3, [r3, #12]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d10c      	bne.n	8015180 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801516a:	2b00      	cmp	r3, #0
 801516c:	d108      	bne.n	8015180 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	695b      	ldr	r3, [r3, #20]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d104      	bne.n	8015180 <osMessageQueueNew+0x8c>
          mem = 0;
 8015176:	2300      	movs	r3, #0
 8015178:	61bb      	str	r3, [r7, #24]
 801517a:	e001      	b.n	8015180 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801517c:	2300      	movs	r3, #0
 801517e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015180:	69bb      	ldr	r3, [r7, #24]
 8015182:	2b01      	cmp	r3, #1
 8015184:	d10b      	bne.n	801519e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	691a      	ldr	r2, [r3, #16]
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	689b      	ldr	r3, [r3, #8]
 801518e:	2100      	movs	r1, #0
 8015190:	9100      	str	r1, [sp, #0]
 8015192:	68b9      	ldr	r1, [r7, #8]
 8015194:	68f8      	ldr	r0, [r7, #12]
 8015196:	f000 fe67 	bl	8015e68 <xQueueGenericCreateStatic>
 801519a:	61f8      	str	r0, [r7, #28]
 801519c:	e008      	b.n	80151b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801519e:	69bb      	ldr	r3, [r7, #24]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d105      	bne.n	80151b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80151a4:	2200      	movs	r2, #0
 80151a6:	68b9      	ldr	r1, [r7, #8]
 80151a8:	68f8      	ldr	r0, [r7, #12]
 80151aa:	f000 fed5 	bl	8015f58 <xQueueGenericCreate>
 80151ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80151b0:	69fb      	ldr	r3, [r7, #28]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d00c      	beq.n	80151d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d003      	beq.n	80151c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	617b      	str	r3, [r7, #20]
 80151c2:	e001      	b.n	80151c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80151c4:	2300      	movs	r3, #0
 80151c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80151c8:	6979      	ldr	r1, [r7, #20]
 80151ca:	69f8      	ldr	r0, [r7, #28]
 80151cc:	f001 fe20 	bl	8016e10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80151d0:	69fb      	ldr	r3, [r7, #28]
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3720      	adds	r7, #32
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}
	...

080151dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80151dc:	b580      	push	{r7, lr}
 80151de:	b088      	sub	sp, #32
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	60f8      	str	r0, [r7, #12]
 80151e4:	60b9      	str	r1, [r7, #8]
 80151e6:	603b      	str	r3, [r7, #0]
 80151e8:	4613      	mov	r3, r2
 80151ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80151f0:	2300      	movs	r3, #0
 80151f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80151f4:	f3ef 8305 	mrs	r3, IPSR
 80151f8:	617b      	str	r3, [r7, #20]
  return(result);
 80151fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d028      	beq.n	8015252 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015200:	69bb      	ldr	r3, [r7, #24]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d005      	beq.n	8015212 <osMessageQueuePut+0x36>
 8015206:	68bb      	ldr	r3, [r7, #8]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d002      	beq.n	8015212 <osMessageQueuePut+0x36>
 801520c:	683b      	ldr	r3, [r7, #0]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d003      	beq.n	801521a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8015212:	f06f 0303 	mvn.w	r3, #3
 8015216:	61fb      	str	r3, [r7, #28]
 8015218:	e038      	b.n	801528c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801521a:	2300      	movs	r3, #0
 801521c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801521e:	f107 0210 	add.w	r2, r7, #16
 8015222:	2300      	movs	r3, #0
 8015224:	68b9      	ldr	r1, [r7, #8]
 8015226:	69b8      	ldr	r0, [r7, #24]
 8015228:	f001 f912 	bl	8016450 <xQueueGenericSendFromISR>
 801522c:	4603      	mov	r3, r0
 801522e:	2b01      	cmp	r3, #1
 8015230:	d003      	beq.n	801523a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8015232:	f06f 0302 	mvn.w	r3, #2
 8015236:	61fb      	str	r3, [r7, #28]
 8015238:	e028      	b.n	801528c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d025      	beq.n	801528c <osMessageQueuePut+0xb0>
 8015240:	4b15      	ldr	r3, [pc, #84]	; (8015298 <osMessageQueuePut+0xbc>)
 8015242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015246:	601a      	str	r2, [r3, #0]
 8015248:	f3bf 8f4f 	dsb	sy
 801524c:	f3bf 8f6f 	isb	sy
 8015250:	e01c      	b.n	801528c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015252:	69bb      	ldr	r3, [r7, #24]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d002      	beq.n	801525e <osMessageQueuePut+0x82>
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d103      	bne.n	8015266 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801525e:	f06f 0303 	mvn.w	r3, #3
 8015262:	61fb      	str	r3, [r7, #28]
 8015264:	e012      	b.n	801528c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015266:	2300      	movs	r3, #0
 8015268:	683a      	ldr	r2, [r7, #0]
 801526a:	68b9      	ldr	r1, [r7, #8]
 801526c:	69b8      	ldr	r0, [r7, #24]
 801526e:	f000 fff1 	bl	8016254 <xQueueGenericSend>
 8015272:	4603      	mov	r3, r0
 8015274:	2b01      	cmp	r3, #1
 8015276:	d009      	beq.n	801528c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d003      	beq.n	8015286 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801527e:	f06f 0301 	mvn.w	r3, #1
 8015282:	61fb      	str	r3, [r7, #28]
 8015284:	e002      	b.n	801528c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8015286:	f06f 0302 	mvn.w	r3, #2
 801528a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801528c:	69fb      	ldr	r3, [r7, #28]
}
 801528e:	4618      	mov	r0, r3
 8015290:	3720      	adds	r7, #32
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
 8015296:	bf00      	nop
 8015298:	e000ed04 	.word	0xe000ed04

0801529c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801529c:	b580      	push	{r7, lr}
 801529e:	b088      	sub	sp, #32
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	60f8      	str	r0, [r7, #12]
 80152a4:	60b9      	str	r1, [r7, #8]
 80152a6:	607a      	str	r2, [r7, #4]
 80152a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80152ae:	2300      	movs	r3, #0
 80152b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80152b2:	f3ef 8305 	mrs	r3, IPSR
 80152b6:	617b      	str	r3, [r7, #20]
  return(result);
 80152b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d028      	beq.n	8015310 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80152be:	69bb      	ldr	r3, [r7, #24]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d005      	beq.n	80152d0 <osMessageQueueGet+0x34>
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d002      	beq.n	80152d0 <osMessageQueueGet+0x34>
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d003      	beq.n	80152d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80152d0:	f06f 0303 	mvn.w	r3, #3
 80152d4:	61fb      	str	r3, [r7, #28]
 80152d6:	e037      	b.n	8015348 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80152d8:	2300      	movs	r3, #0
 80152da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80152dc:	f107 0310 	add.w	r3, r7, #16
 80152e0:	461a      	mov	r2, r3
 80152e2:	68b9      	ldr	r1, [r7, #8]
 80152e4:	69b8      	ldr	r0, [r7, #24]
 80152e6:	f001 fbc7 	bl	8016a78 <xQueueReceiveFromISR>
 80152ea:	4603      	mov	r3, r0
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d003      	beq.n	80152f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80152f0:	f06f 0302 	mvn.w	r3, #2
 80152f4:	61fb      	str	r3, [r7, #28]
 80152f6:	e027      	b.n	8015348 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d024      	beq.n	8015348 <osMessageQueueGet+0xac>
 80152fe:	4b15      	ldr	r3, [pc, #84]	; (8015354 <osMessageQueueGet+0xb8>)
 8015300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015304:	601a      	str	r2, [r3, #0]
 8015306:	f3bf 8f4f 	dsb	sy
 801530a:	f3bf 8f6f 	isb	sy
 801530e:	e01b      	b.n	8015348 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015310:	69bb      	ldr	r3, [r7, #24]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d002      	beq.n	801531c <osMessageQueueGet+0x80>
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d103      	bne.n	8015324 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801531c:	f06f 0303 	mvn.w	r3, #3
 8015320:	61fb      	str	r3, [r7, #28]
 8015322:	e011      	b.n	8015348 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015324:	683a      	ldr	r2, [r7, #0]
 8015326:	68b9      	ldr	r1, [r7, #8]
 8015328:	69b8      	ldr	r0, [r7, #24]
 801532a:	f001 f9b9 	bl	80166a0 <xQueueReceive>
 801532e:	4603      	mov	r3, r0
 8015330:	2b01      	cmp	r3, #1
 8015332:	d009      	beq.n	8015348 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d003      	beq.n	8015342 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801533a:	f06f 0301 	mvn.w	r3, #1
 801533e:	61fb      	str	r3, [r7, #28]
 8015340:	e002      	b.n	8015348 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8015342:	f06f 0302 	mvn.w	r3, #2
 8015346:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015348:	69fb      	ldr	r3, [r7, #28]
}
 801534a:	4618      	mov	r0, r3
 801534c:	3720      	adds	r7, #32
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
 8015352:	bf00      	nop
 8015354:	e000ed04 	.word	0xe000ed04

08015358 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015358:	b480      	push	{r7}
 801535a:	b085      	sub	sp, #20
 801535c:	af00      	add	r7, sp, #0
 801535e:	60f8      	str	r0, [r7, #12]
 8015360:	60b9      	str	r1, [r7, #8]
 8015362:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	4a07      	ldr	r2, [pc, #28]	; (8015384 <vApplicationGetIdleTaskMemory+0x2c>)
 8015368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	4a06      	ldr	r2, [pc, #24]	; (8015388 <vApplicationGetIdleTaskMemory+0x30>)
 801536e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2280      	movs	r2, #128	; 0x80
 8015374:	601a      	str	r2, [r3, #0]
}
 8015376:	bf00      	nop
 8015378:	3714      	adds	r7, #20
 801537a:	46bd      	mov	sp, r7
 801537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015380:	4770      	bx	lr
 8015382:	bf00      	nop
 8015384:	2400be24 	.word	0x2400be24
 8015388:	2400be84 	.word	0x2400be84

0801538c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801538c:	b480      	push	{r7}
 801538e:	b085      	sub	sp, #20
 8015390:	af00      	add	r7, sp, #0
 8015392:	60f8      	str	r0, [r7, #12]
 8015394:	60b9      	str	r1, [r7, #8]
 8015396:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	4a07      	ldr	r2, [pc, #28]	; (80153b8 <vApplicationGetTimerTaskMemory+0x2c>)
 801539c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	4a06      	ldr	r2, [pc, #24]	; (80153bc <vApplicationGetTimerTaskMemory+0x30>)
 80153a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80153aa:	601a      	str	r2, [r3, #0]
}
 80153ac:	bf00      	nop
 80153ae:	3714      	adds	r7, #20
 80153b0:	46bd      	mov	sp, r7
 80153b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b6:	4770      	bx	lr
 80153b8:	2400c084 	.word	0x2400c084
 80153bc:	2400c0e4 	.word	0x2400c0e4

080153c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b08a      	sub	sp, #40	; 0x28
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80153c8:	2300      	movs	r3, #0
 80153ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80153cc:	f001 ffee 	bl	80173ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80153d0:	4b5b      	ldr	r3, [pc, #364]	; (8015540 <pvPortMalloc+0x180>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d101      	bne.n	80153dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80153d8:	f000 f920 	bl	801561c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80153dc:	4b59      	ldr	r3, [pc, #356]	; (8015544 <pvPortMalloc+0x184>)
 80153de:	681a      	ldr	r2, [r3, #0]
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	4013      	ands	r3, r2
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	f040 8093 	bne.w	8015510 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d01d      	beq.n	801542c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80153f0:	2208      	movs	r2, #8
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	4413      	add	r3, r2
 80153f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f003 0307 	and.w	r3, r3, #7
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d014      	beq.n	801542c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f023 0307 	bic.w	r3, r3, #7
 8015408:	3308      	adds	r3, #8
 801540a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f003 0307 	and.w	r3, r3, #7
 8015412:	2b00      	cmp	r3, #0
 8015414:	d00a      	beq.n	801542c <pvPortMalloc+0x6c>
	__asm volatile
 8015416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801541a:	f383 8811 	msr	BASEPRI, r3
 801541e:	f3bf 8f6f 	isb	sy
 8015422:	f3bf 8f4f 	dsb	sy
 8015426:	617b      	str	r3, [r7, #20]
}
 8015428:	bf00      	nop
 801542a:	e7fe      	b.n	801542a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d06e      	beq.n	8015510 <pvPortMalloc+0x150>
 8015432:	4b45      	ldr	r3, [pc, #276]	; (8015548 <pvPortMalloc+0x188>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	687a      	ldr	r2, [r7, #4]
 8015438:	429a      	cmp	r2, r3
 801543a:	d869      	bhi.n	8015510 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801543c:	4b43      	ldr	r3, [pc, #268]	; (801554c <pvPortMalloc+0x18c>)
 801543e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015440:	4b42      	ldr	r3, [pc, #264]	; (801554c <pvPortMalloc+0x18c>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015446:	e004      	b.n	8015452 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015454:	685b      	ldr	r3, [r3, #4]
 8015456:	687a      	ldr	r2, [r7, #4]
 8015458:	429a      	cmp	r2, r3
 801545a:	d903      	bls.n	8015464 <pvPortMalloc+0xa4>
 801545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d1f1      	bne.n	8015448 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015464:	4b36      	ldr	r3, [pc, #216]	; (8015540 <pvPortMalloc+0x180>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801546a:	429a      	cmp	r2, r3
 801546c:	d050      	beq.n	8015510 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801546e:	6a3b      	ldr	r3, [r7, #32]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	2208      	movs	r2, #8
 8015474:	4413      	add	r3, r2
 8015476:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801547a:	681a      	ldr	r2, [r3, #0]
 801547c:	6a3b      	ldr	r3, [r7, #32]
 801547e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015482:	685a      	ldr	r2, [r3, #4]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	1ad2      	subs	r2, r2, r3
 8015488:	2308      	movs	r3, #8
 801548a:	005b      	lsls	r3, r3, #1
 801548c:	429a      	cmp	r2, r3
 801548e:	d91f      	bls.n	80154d0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	4413      	add	r3, r2
 8015496:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015498:	69bb      	ldr	r3, [r7, #24]
 801549a:	f003 0307 	and.w	r3, r3, #7
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d00a      	beq.n	80154b8 <pvPortMalloc+0xf8>
	__asm volatile
 80154a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a6:	f383 8811 	msr	BASEPRI, r3
 80154aa:	f3bf 8f6f 	isb	sy
 80154ae:	f3bf 8f4f 	dsb	sy
 80154b2:	613b      	str	r3, [r7, #16]
}
 80154b4:	bf00      	nop
 80154b6:	e7fe      	b.n	80154b6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80154b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ba:	685a      	ldr	r2, [r3, #4]
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	1ad2      	subs	r2, r2, r3
 80154c0:	69bb      	ldr	r3, [r7, #24]
 80154c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80154c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c6:	687a      	ldr	r2, [r7, #4]
 80154c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80154ca:	69b8      	ldr	r0, [r7, #24]
 80154cc:	f000 f90a 	bl	80156e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80154d0:	4b1d      	ldr	r3, [pc, #116]	; (8015548 <pvPortMalloc+0x188>)
 80154d2:	681a      	ldr	r2, [r3, #0]
 80154d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d6:	685b      	ldr	r3, [r3, #4]
 80154d8:	1ad3      	subs	r3, r2, r3
 80154da:	4a1b      	ldr	r2, [pc, #108]	; (8015548 <pvPortMalloc+0x188>)
 80154dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80154de:	4b1a      	ldr	r3, [pc, #104]	; (8015548 <pvPortMalloc+0x188>)
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	4b1b      	ldr	r3, [pc, #108]	; (8015550 <pvPortMalloc+0x190>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	429a      	cmp	r2, r3
 80154e8:	d203      	bcs.n	80154f2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80154ea:	4b17      	ldr	r3, [pc, #92]	; (8015548 <pvPortMalloc+0x188>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	4a18      	ldr	r2, [pc, #96]	; (8015550 <pvPortMalloc+0x190>)
 80154f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80154f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f4:	685a      	ldr	r2, [r3, #4]
 80154f6:	4b13      	ldr	r3, [pc, #76]	; (8015544 <pvPortMalloc+0x184>)
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	431a      	orrs	r2, r3
 80154fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015502:	2200      	movs	r2, #0
 8015504:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015506:	4b13      	ldr	r3, [pc, #76]	; (8015554 <pvPortMalloc+0x194>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	3301      	adds	r3, #1
 801550c:	4a11      	ldr	r2, [pc, #68]	; (8015554 <pvPortMalloc+0x194>)
 801550e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015510:	f001 ff5a 	bl	80173c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015514:	69fb      	ldr	r3, [r7, #28]
 8015516:	f003 0307 	and.w	r3, r3, #7
 801551a:	2b00      	cmp	r3, #0
 801551c:	d00a      	beq.n	8015534 <pvPortMalloc+0x174>
	__asm volatile
 801551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015522:	f383 8811 	msr	BASEPRI, r3
 8015526:	f3bf 8f6f 	isb	sy
 801552a:	f3bf 8f4f 	dsb	sy
 801552e:	60fb      	str	r3, [r7, #12]
}
 8015530:	bf00      	nop
 8015532:	e7fe      	b.n	8015532 <pvPortMalloc+0x172>
	return pvReturn;
 8015534:	69fb      	ldr	r3, [r7, #28]
}
 8015536:	4618      	mov	r0, r3
 8015538:	3728      	adds	r7, #40	; 0x28
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}
 801553e:	bf00      	nop
 8015540:	24024b8c 	.word	0x24024b8c
 8015544:	24024ba0 	.word	0x24024ba0
 8015548:	24024b90 	.word	0x24024b90
 801554c:	24024b84 	.word	0x24024b84
 8015550:	24024b94 	.word	0x24024b94
 8015554:	24024b98 	.word	0x24024b98

08015558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b086      	sub	sp, #24
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d04d      	beq.n	8015606 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801556a:	2308      	movs	r3, #8
 801556c:	425b      	negs	r3, r3
 801556e:	697a      	ldr	r2, [r7, #20]
 8015570:	4413      	add	r3, r2
 8015572:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	685a      	ldr	r2, [r3, #4]
 801557c:	4b24      	ldr	r3, [pc, #144]	; (8015610 <vPortFree+0xb8>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	4013      	ands	r3, r2
 8015582:	2b00      	cmp	r3, #0
 8015584:	d10a      	bne.n	801559c <vPortFree+0x44>
	__asm volatile
 8015586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801558a:	f383 8811 	msr	BASEPRI, r3
 801558e:	f3bf 8f6f 	isb	sy
 8015592:	f3bf 8f4f 	dsb	sy
 8015596:	60fb      	str	r3, [r7, #12]
}
 8015598:	bf00      	nop
 801559a:	e7fe      	b.n	801559a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d00a      	beq.n	80155ba <vPortFree+0x62>
	__asm volatile
 80155a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155a8:	f383 8811 	msr	BASEPRI, r3
 80155ac:	f3bf 8f6f 	isb	sy
 80155b0:	f3bf 8f4f 	dsb	sy
 80155b4:	60bb      	str	r3, [r7, #8]
}
 80155b6:	bf00      	nop
 80155b8:	e7fe      	b.n	80155b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	685a      	ldr	r2, [r3, #4]
 80155be:	4b14      	ldr	r3, [pc, #80]	; (8015610 <vPortFree+0xb8>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	4013      	ands	r3, r2
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d01e      	beq.n	8015606 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80155c8:	693b      	ldr	r3, [r7, #16]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d11a      	bne.n	8015606 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80155d0:	693b      	ldr	r3, [r7, #16]
 80155d2:	685a      	ldr	r2, [r3, #4]
 80155d4:	4b0e      	ldr	r3, [pc, #56]	; (8015610 <vPortFree+0xb8>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	43db      	mvns	r3, r3
 80155da:	401a      	ands	r2, r3
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80155e0:	f001 fee4 	bl	80173ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	685a      	ldr	r2, [r3, #4]
 80155e8:	4b0a      	ldr	r3, [pc, #40]	; (8015614 <vPortFree+0xbc>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	4413      	add	r3, r2
 80155ee:	4a09      	ldr	r2, [pc, #36]	; (8015614 <vPortFree+0xbc>)
 80155f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80155f2:	6938      	ldr	r0, [r7, #16]
 80155f4:	f000 f876 	bl	80156e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80155f8:	4b07      	ldr	r3, [pc, #28]	; (8015618 <vPortFree+0xc0>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	3301      	adds	r3, #1
 80155fe:	4a06      	ldr	r2, [pc, #24]	; (8015618 <vPortFree+0xc0>)
 8015600:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015602:	f001 fee1 	bl	80173c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015606:	bf00      	nop
 8015608:	3718      	adds	r7, #24
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
 801560e:	bf00      	nop
 8015610:	24024ba0 	.word	0x24024ba0
 8015614:	24024b90 	.word	0x24024b90
 8015618:	24024b9c 	.word	0x24024b9c

0801561c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801561c:	b480      	push	{r7}
 801561e:	b085      	sub	sp, #20
 8015620:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015622:	4b29      	ldr	r3, [pc, #164]	; (80156c8 <prvHeapInit+0xac>)
 8015624:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015626:	4b29      	ldr	r3, [pc, #164]	; (80156cc <prvHeapInit+0xb0>)
 8015628:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f003 0307 	and.w	r3, r3, #7
 8015630:	2b00      	cmp	r3, #0
 8015632:	d00c      	beq.n	801564e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	3307      	adds	r3, #7
 8015638:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	f023 0307 	bic.w	r3, r3, #7
 8015640:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015642:	68ba      	ldr	r2, [r7, #8]
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	1ad3      	subs	r3, r2, r3
 8015648:	4a20      	ldr	r2, [pc, #128]	; (80156cc <prvHeapInit+0xb0>)
 801564a:	4413      	add	r3, r2
 801564c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015652:	4a1f      	ldr	r2, [pc, #124]	; (80156d0 <prvHeapInit+0xb4>)
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015658:	4b1d      	ldr	r3, [pc, #116]	; (80156d0 <prvHeapInit+0xb4>)
 801565a:	2200      	movs	r2, #0
 801565c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	68ba      	ldr	r2, [r7, #8]
 8015662:	4413      	add	r3, r2
 8015664:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015666:	2208      	movs	r2, #8
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	1a9b      	subs	r3, r3, r2
 801566c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	f023 0307 	bic.w	r3, r3, #7
 8015674:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	4a16      	ldr	r2, [pc, #88]	; (80156d4 <prvHeapInit+0xb8>)
 801567a:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801567c:	4b15      	ldr	r3, [pc, #84]	; (80156d4 <prvHeapInit+0xb8>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	2200      	movs	r2, #0
 8015682:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015684:	4b13      	ldr	r3, [pc, #76]	; (80156d4 <prvHeapInit+0xb8>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	2200      	movs	r2, #0
 801568a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	68fa      	ldr	r2, [r7, #12]
 8015694:	1ad2      	subs	r2, r2, r3
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801569a:	4b0e      	ldr	r3, [pc, #56]	; (80156d4 <prvHeapInit+0xb8>)
 801569c:	681a      	ldr	r2, [r3, #0]
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	4a0c      	ldr	r2, [pc, #48]	; (80156d8 <prvHeapInit+0xbc>)
 80156a8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	685b      	ldr	r3, [r3, #4]
 80156ae:	4a0b      	ldr	r2, [pc, #44]	; (80156dc <prvHeapInit+0xc0>)
 80156b0:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80156b2:	4b0b      	ldr	r3, [pc, #44]	; (80156e0 <prvHeapInit+0xc4>)
 80156b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80156b8:	601a      	str	r2, [r3, #0]
}
 80156ba:	bf00      	nop
 80156bc:	3714      	adds	r7, #20
 80156be:	46bd      	mov	sp, r7
 80156c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c4:	4770      	bx	lr
 80156c6:	bf00      	nop
 80156c8:	000186a0 	.word	0x000186a0
 80156cc:	2400c4e4 	.word	0x2400c4e4
 80156d0:	24024b84 	.word	0x24024b84
 80156d4:	24024b8c 	.word	0x24024b8c
 80156d8:	24024b94 	.word	0x24024b94
 80156dc:	24024b90 	.word	0x24024b90
 80156e0:	24024ba0 	.word	0x24024ba0

080156e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80156e4:	b480      	push	{r7}
 80156e6:	b085      	sub	sp, #20
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80156ec:	4b28      	ldr	r3, [pc, #160]	; (8015790 <prvInsertBlockIntoFreeList+0xac>)
 80156ee:	60fb      	str	r3, [r7, #12]
 80156f0:	e002      	b.n	80156f8 <prvInsertBlockIntoFreeList+0x14>
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	60fb      	str	r3, [r7, #12]
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	687a      	ldr	r2, [r7, #4]
 80156fe:	429a      	cmp	r2, r3
 8015700:	d8f7      	bhi.n	80156f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	685b      	ldr	r3, [r3, #4]
 801570a:	68ba      	ldr	r2, [r7, #8]
 801570c:	4413      	add	r3, r2
 801570e:	687a      	ldr	r2, [r7, #4]
 8015710:	429a      	cmp	r2, r3
 8015712:	d108      	bne.n	8015726 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	685a      	ldr	r2, [r3, #4]
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	685b      	ldr	r3, [r3, #4]
 801571c:	441a      	add	r2, r3
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	68ba      	ldr	r2, [r7, #8]
 8015730:	441a      	add	r2, r3
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	429a      	cmp	r2, r3
 8015738:	d118      	bne.n	801576c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	681a      	ldr	r2, [r3, #0]
 801573e:	4b15      	ldr	r3, [pc, #84]	; (8015794 <prvInsertBlockIntoFreeList+0xb0>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	429a      	cmp	r2, r3
 8015744:	d00d      	beq.n	8015762 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	685a      	ldr	r2, [r3, #4]
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	685b      	ldr	r3, [r3, #4]
 8015750:	441a      	add	r2, r3
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	681a      	ldr	r2, [r3, #0]
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	601a      	str	r2, [r3, #0]
 8015760:	e008      	b.n	8015774 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015762:	4b0c      	ldr	r3, [pc, #48]	; (8015794 <prvInsertBlockIntoFreeList+0xb0>)
 8015764:	681a      	ldr	r2, [r3, #0]
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	601a      	str	r2, [r3, #0]
 801576a:	e003      	b.n	8015774 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	681a      	ldr	r2, [r3, #0]
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015774:	68fa      	ldr	r2, [r7, #12]
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	429a      	cmp	r2, r3
 801577a:	d002      	beq.n	8015782 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	687a      	ldr	r2, [r7, #4]
 8015780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015782:	bf00      	nop
 8015784:	3714      	adds	r7, #20
 8015786:	46bd      	mov	sp, r7
 8015788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578c:	4770      	bx	lr
 801578e:	bf00      	nop
 8015790:	24024b84 	.word	0x24024b84
 8015794:	24024b8c 	.word	0x24024b8c

08015798 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015798:	b480      	push	{r7}
 801579a:	b083      	sub	sp, #12
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f103 0208 	add.w	r2, r3, #8
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f04f 32ff 	mov.w	r2, #4294967295
 80157b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	f103 0208 	add.w	r2, r3, #8
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f103 0208 	add.w	r2, r3, #8
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2200      	movs	r2, #0
 80157ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80157cc:	bf00      	nop
 80157ce:	370c      	adds	r7, #12
 80157d0:	46bd      	mov	sp, r7
 80157d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d6:	4770      	bx	lr

080157d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80157d8:	b480      	push	{r7}
 80157da:	b083      	sub	sp, #12
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2200      	movs	r2, #0
 80157e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80157e6:	bf00      	nop
 80157e8:	370c      	adds	r7, #12
 80157ea:	46bd      	mov	sp, r7
 80157ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f0:	4770      	bx	lr

080157f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80157f2:	b480      	push	{r7}
 80157f4:	b085      	sub	sp, #20
 80157f6:	af00      	add	r7, sp, #0
 80157f8:	6078      	str	r0, [r7, #4]
 80157fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	685b      	ldr	r3, [r3, #4]
 8015800:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	68fa      	ldr	r2, [r7, #12]
 8015806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	689a      	ldr	r2, [r3, #8]
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	689b      	ldr	r3, [r3, #8]
 8015814:	683a      	ldr	r2, [r7, #0]
 8015816:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	683a      	ldr	r2, [r7, #0]
 801581c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	687a      	ldr	r2, [r7, #4]
 8015822:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	1c5a      	adds	r2, r3, #1
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	601a      	str	r2, [r3, #0]
}
 801582e:	bf00      	nop
 8015830:	3714      	adds	r7, #20
 8015832:	46bd      	mov	sp, r7
 8015834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015838:	4770      	bx	lr

0801583a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801583a:	b480      	push	{r7}
 801583c:	b085      	sub	sp, #20
 801583e:	af00      	add	r7, sp, #0
 8015840:	6078      	str	r0, [r7, #4]
 8015842:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015850:	d103      	bne.n	801585a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	691b      	ldr	r3, [r3, #16]
 8015856:	60fb      	str	r3, [r7, #12]
 8015858:	e00c      	b.n	8015874 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	3308      	adds	r3, #8
 801585e:	60fb      	str	r3, [r7, #12]
 8015860:	e002      	b.n	8015868 <vListInsert+0x2e>
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	685b      	ldr	r3, [r3, #4]
 8015866:	60fb      	str	r3, [r7, #12]
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	685b      	ldr	r3, [r3, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	68ba      	ldr	r2, [r7, #8]
 8015870:	429a      	cmp	r2, r3
 8015872:	d2f6      	bcs.n	8015862 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	685a      	ldr	r2, [r3, #4]
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	683a      	ldr	r2, [r7, #0]
 8015882:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015884:	683b      	ldr	r3, [r7, #0]
 8015886:	68fa      	ldr	r2, [r7, #12]
 8015888:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	683a      	ldr	r2, [r7, #0]
 801588e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	687a      	ldr	r2, [r7, #4]
 8015894:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	1c5a      	adds	r2, r3, #1
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	601a      	str	r2, [r3, #0]
}
 80158a0:	bf00      	nop
 80158a2:	3714      	adds	r7, #20
 80158a4:	46bd      	mov	sp, r7
 80158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158aa:	4770      	bx	lr

080158ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80158ac:	b480      	push	{r7}
 80158ae:	b085      	sub	sp, #20
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	691b      	ldr	r3, [r3, #16]
 80158b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	687a      	ldr	r2, [r7, #4]
 80158c0:	6892      	ldr	r2, [r2, #8]
 80158c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	689b      	ldr	r3, [r3, #8]
 80158c8:	687a      	ldr	r2, [r7, #4]
 80158ca:	6852      	ldr	r2, [r2, #4]
 80158cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	685b      	ldr	r3, [r3, #4]
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d103      	bne.n	80158e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	689a      	ldr	r2, [r3, #8]
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2200      	movs	r2, #0
 80158e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	1e5a      	subs	r2, r3, #1
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	681b      	ldr	r3, [r3, #0]
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	3714      	adds	r7, #20
 80158f8:	46bd      	mov	sp, r7
 80158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fe:	4770      	bx	lr

08015900 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015900:	b480      	push	{r7}
 8015902:	b085      	sub	sp, #20
 8015904:	af00      	add	r7, sp, #0
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	3b04      	subs	r3, #4
 8015910:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	3b04      	subs	r3, #4
 801591e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	f023 0201 	bic.w	r2, r3, #1
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	3b04      	subs	r3, #4
 801592e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015930:	4a0c      	ldr	r2, [pc, #48]	; (8015964 <pxPortInitialiseStack+0x64>)
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	3b14      	subs	r3, #20
 801593a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801593c:	687a      	ldr	r2, [r7, #4]
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	3b04      	subs	r3, #4
 8015946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	f06f 0202 	mvn.w	r2, #2
 801594e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	3b20      	subs	r3, #32
 8015954:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015956:	68fb      	ldr	r3, [r7, #12]
}
 8015958:	4618      	mov	r0, r3
 801595a:	3714      	adds	r7, #20
 801595c:	46bd      	mov	sp, r7
 801595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015962:	4770      	bx	lr
 8015964:	08015969 	.word	0x08015969

08015968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015968:	b480      	push	{r7}
 801596a:	b085      	sub	sp, #20
 801596c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801596e:	2300      	movs	r3, #0
 8015970:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015972:	4b12      	ldr	r3, [pc, #72]	; (80159bc <prvTaskExitError+0x54>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801597a:	d00a      	beq.n	8015992 <prvTaskExitError+0x2a>
	__asm volatile
 801597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015980:	f383 8811 	msr	BASEPRI, r3
 8015984:	f3bf 8f6f 	isb	sy
 8015988:	f3bf 8f4f 	dsb	sy
 801598c:	60fb      	str	r3, [r7, #12]
}
 801598e:	bf00      	nop
 8015990:	e7fe      	b.n	8015990 <prvTaskExitError+0x28>
	__asm volatile
 8015992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015996:	f383 8811 	msr	BASEPRI, r3
 801599a:	f3bf 8f6f 	isb	sy
 801599e:	f3bf 8f4f 	dsb	sy
 80159a2:	60bb      	str	r3, [r7, #8]
}
 80159a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80159a6:	bf00      	nop
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d0fc      	beq.n	80159a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80159ae:	bf00      	nop
 80159b0:	bf00      	nop
 80159b2:	3714      	adds	r7, #20
 80159b4:	46bd      	mov	sp, r7
 80159b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ba:	4770      	bx	lr
 80159bc:	24000064 	.word	0x24000064

080159c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80159c0:	4b07      	ldr	r3, [pc, #28]	; (80159e0 <pxCurrentTCBConst2>)
 80159c2:	6819      	ldr	r1, [r3, #0]
 80159c4:	6808      	ldr	r0, [r1, #0]
 80159c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ca:	f380 8809 	msr	PSP, r0
 80159ce:	f3bf 8f6f 	isb	sy
 80159d2:	f04f 0000 	mov.w	r0, #0
 80159d6:	f380 8811 	msr	BASEPRI, r0
 80159da:	4770      	bx	lr
 80159dc:	f3af 8000 	nop.w

080159e0 <pxCurrentTCBConst2>:
 80159e0:	24024bec 	.word	0x24024bec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80159e4:	bf00      	nop
 80159e6:	bf00      	nop

080159e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80159e8:	4808      	ldr	r0, [pc, #32]	; (8015a0c <prvPortStartFirstTask+0x24>)
 80159ea:	6800      	ldr	r0, [r0, #0]
 80159ec:	6800      	ldr	r0, [r0, #0]
 80159ee:	f380 8808 	msr	MSP, r0
 80159f2:	f04f 0000 	mov.w	r0, #0
 80159f6:	f380 8814 	msr	CONTROL, r0
 80159fa:	b662      	cpsie	i
 80159fc:	b661      	cpsie	f
 80159fe:	f3bf 8f4f 	dsb	sy
 8015a02:	f3bf 8f6f 	isb	sy
 8015a06:	df00      	svc	0
 8015a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015a0a:	bf00      	nop
 8015a0c:	e000ed08 	.word	0xe000ed08

08015a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b086      	sub	sp, #24
 8015a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015a16:	4b46      	ldr	r3, [pc, #280]	; (8015b30 <xPortStartScheduler+0x120>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	4a46      	ldr	r2, [pc, #280]	; (8015b34 <xPortStartScheduler+0x124>)
 8015a1c:	4293      	cmp	r3, r2
 8015a1e:	d10a      	bne.n	8015a36 <xPortStartScheduler+0x26>
	__asm volatile
 8015a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a24:	f383 8811 	msr	BASEPRI, r3
 8015a28:	f3bf 8f6f 	isb	sy
 8015a2c:	f3bf 8f4f 	dsb	sy
 8015a30:	613b      	str	r3, [r7, #16]
}
 8015a32:	bf00      	nop
 8015a34:	e7fe      	b.n	8015a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015a36:	4b3e      	ldr	r3, [pc, #248]	; (8015b30 <xPortStartScheduler+0x120>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	4a3f      	ldr	r2, [pc, #252]	; (8015b38 <xPortStartScheduler+0x128>)
 8015a3c:	4293      	cmp	r3, r2
 8015a3e:	d10a      	bne.n	8015a56 <xPortStartScheduler+0x46>
	__asm volatile
 8015a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a44:	f383 8811 	msr	BASEPRI, r3
 8015a48:	f3bf 8f6f 	isb	sy
 8015a4c:	f3bf 8f4f 	dsb	sy
 8015a50:	60fb      	str	r3, [r7, #12]
}
 8015a52:	bf00      	nop
 8015a54:	e7fe      	b.n	8015a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015a56:	4b39      	ldr	r3, [pc, #228]	; (8015b3c <xPortStartScheduler+0x12c>)
 8015a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015a62:	697b      	ldr	r3, [r7, #20]
 8015a64:	22ff      	movs	r2, #255	; 0xff
 8015a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015a68:	697b      	ldr	r3, [r7, #20]
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	b2db      	uxtb	r3, r3
 8015a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015a70:	78fb      	ldrb	r3, [r7, #3]
 8015a72:	b2db      	uxtb	r3, r3
 8015a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015a78:	b2da      	uxtb	r2, r3
 8015a7a:	4b31      	ldr	r3, [pc, #196]	; (8015b40 <xPortStartScheduler+0x130>)
 8015a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015a7e:	4b31      	ldr	r3, [pc, #196]	; (8015b44 <xPortStartScheduler+0x134>)
 8015a80:	2207      	movs	r2, #7
 8015a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015a84:	e009      	b.n	8015a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015a86:	4b2f      	ldr	r3, [pc, #188]	; (8015b44 <xPortStartScheduler+0x134>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	3b01      	subs	r3, #1
 8015a8c:	4a2d      	ldr	r2, [pc, #180]	; (8015b44 <xPortStartScheduler+0x134>)
 8015a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015a90:	78fb      	ldrb	r3, [r7, #3]
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	005b      	lsls	r3, r3, #1
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015a9a:	78fb      	ldrb	r3, [r7, #3]
 8015a9c:	b2db      	uxtb	r3, r3
 8015a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015aa2:	2b80      	cmp	r3, #128	; 0x80
 8015aa4:	d0ef      	beq.n	8015a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015aa6:	4b27      	ldr	r3, [pc, #156]	; (8015b44 <xPortStartScheduler+0x134>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	f1c3 0307 	rsb	r3, r3, #7
 8015aae:	2b04      	cmp	r3, #4
 8015ab0:	d00a      	beq.n	8015ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab6:	f383 8811 	msr	BASEPRI, r3
 8015aba:	f3bf 8f6f 	isb	sy
 8015abe:	f3bf 8f4f 	dsb	sy
 8015ac2:	60bb      	str	r3, [r7, #8]
}
 8015ac4:	bf00      	nop
 8015ac6:	e7fe      	b.n	8015ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015ac8:	4b1e      	ldr	r3, [pc, #120]	; (8015b44 <xPortStartScheduler+0x134>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	021b      	lsls	r3, r3, #8
 8015ace:	4a1d      	ldr	r2, [pc, #116]	; (8015b44 <xPortStartScheduler+0x134>)
 8015ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015ad2:	4b1c      	ldr	r3, [pc, #112]	; (8015b44 <xPortStartScheduler+0x134>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015ada:	4a1a      	ldr	r2, [pc, #104]	; (8015b44 <xPortStartScheduler+0x134>)
 8015adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	b2da      	uxtb	r2, r3
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015ae6:	4b18      	ldr	r3, [pc, #96]	; (8015b48 <xPortStartScheduler+0x138>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	4a17      	ldr	r2, [pc, #92]	; (8015b48 <xPortStartScheduler+0x138>)
 8015aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015af2:	4b15      	ldr	r3, [pc, #84]	; (8015b48 <xPortStartScheduler+0x138>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	4a14      	ldr	r2, [pc, #80]	; (8015b48 <xPortStartScheduler+0x138>)
 8015af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015afe:	f000 f8dd 	bl	8015cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015b02:	4b12      	ldr	r3, [pc, #72]	; (8015b4c <xPortStartScheduler+0x13c>)
 8015b04:	2200      	movs	r2, #0
 8015b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015b08:	f000 f8fc 	bl	8015d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015b0c:	4b10      	ldr	r3, [pc, #64]	; (8015b50 <xPortStartScheduler+0x140>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	4a0f      	ldr	r2, [pc, #60]	; (8015b50 <xPortStartScheduler+0x140>)
 8015b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015b18:	f7ff ff66 	bl	80159e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015b1c:	f001 fdfa 	bl	8017714 <vTaskSwitchContext>
	prvTaskExitError();
 8015b20:	f7ff ff22 	bl	8015968 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015b24:	2300      	movs	r3, #0
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3718      	adds	r7, #24
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}
 8015b2e:	bf00      	nop
 8015b30:	e000ed00 	.word	0xe000ed00
 8015b34:	410fc271 	.word	0x410fc271
 8015b38:	410fc270 	.word	0x410fc270
 8015b3c:	e000e400 	.word	0xe000e400
 8015b40:	24024ba4 	.word	0x24024ba4
 8015b44:	24024ba8 	.word	0x24024ba8
 8015b48:	e000ed20 	.word	0xe000ed20
 8015b4c:	24000064 	.word	0x24000064
 8015b50:	e000ef34 	.word	0xe000ef34

08015b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015b54:	b480      	push	{r7}
 8015b56:	b083      	sub	sp, #12
 8015b58:	af00      	add	r7, sp, #0
	__asm volatile
 8015b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b5e:	f383 8811 	msr	BASEPRI, r3
 8015b62:	f3bf 8f6f 	isb	sy
 8015b66:	f3bf 8f4f 	dsb	sy
 8015b6a:	607b      	str	r3, [r7, #4]
}
 8015b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015b6e:	4b0f      	ldr	r3, [pc, #60]	; (8015bac <vPortEnterCritical+0x58>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	3301      	adds	r3, #1
 8015b74:	4a0d      	ldr	r2, [pc, #52]	; (8015bac <vPortEnterCritical+0x58>)
 8015b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015b78:	4b0c      	ldr	r3, [pc, #48]	; (8015bac <vPortEnterCritical+0x58>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	2b01      	cmp	r3, #1
 8015b7e:	d10f      	bne.n	8015ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015b80:	4b0b      	ldr	r3, [pc, #44]	; (8015bb0 <vPortEnterCritical+0x5c>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	b2db      	uxtb	r3, r3
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d00a      	beq.n	8015ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8015b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b8e:	f383 8811 	msr	BASEPRI, r3
 8015b92:	f3bf 8f6f 	isb	sy
 8015b96:	f3bf 8f4f 	dsb	sy
 8015b9a:	603b      	str	r3, [r7, #0]
}
 8015b9c:	bf00      	nop
 8015b9e:	e7fe      	b.n	8015b9e <vPortEnterCritical+0x4a>
	}
}
 8015ba0:	bf00      	nop
 8015ba2:	370c      	adds	r7, #12
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr
 8015bac:	24000064 	.word	0x24000064
 8015bb0:	e000ed04 	.word	0xe000ed04

08015bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015bb4:	b480      	push	{r7}
 8015bb6:	b083      	sub	sp, #12
 8015bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015bba:	4b12      	ldr	r3, [pc, #72]	; (8015c04 <vPortExitCritical+0x50>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d10a      	bne.n	8015bd8 <vPortExitCritical+0x24>
	__asm volatile
 8015bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc6:	f383 8811 	msr	BASEPRI, r3
 8015bca:	f3bf 8f6f 	isb	sy
 8015bce:	f3bf 8f4f 	dsb	sy
 8015bd2:	607b      	str	r3, [r7, #4]
}
 8015bd4:	bf00      	nop
 8015bd6:	e7fe      	b.n	8015bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015bd8:	4b0a      	ldr	r3, [pc, #40]	; (8015c04 <vPortExitCritical+0x50>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	3b01      	subs	r3, #1
 8015bde:	4a09      	ldr	r2, [pc, #36]	; (8015c04 <vPortExitCritical+0x50>)
 8015be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015be2:	4b08      	ldr	r3, [pc, #32]	; (8015c04 <vPortExitCritical+0x50>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d105      	bne.n	8015bf6 <vPortExitCritical+0x42>
 8015bea:	2300      	movs	r3, #0
 8015bec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015bf6:	bf00      	nop
 8015bf8:	370c      	adds	r7, #12
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c00:	4770      	bx	lr
 8015c02:	bf00      	nop
 8015c04:	24000064 	.word	0x24000064
	...

08015c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015c10:	f3ef 8009 	mrs	r0, PSP
 8015c14:	f3bf 8f6f 	isb	sy
 8015c18:	4b15      	ldr	r3, [pc, #84]	; (8015c70 <pxCurrentTCBConst>)
 8015c1a:	681a      	ldr	r2, [r3, #0]
 8015c1c:	f01e 0f10 	tst.w	lr, #16
 8015c20:	bf08      	it	eq
 8015c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c2a:	6010      	str	r0, [r2, #0]
 8015c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015c34:	f380 8811 	msr	BASEPRI, r0
 8015c38:	f3bf 8f4f 	dsb	sy
 8015c3c:	f3bf 8f6f 	isb	sy
 8015c40:	f001 fd68 	bl	8017714 <vTaskSwitchContext>
 8015c44:	f04f 0000 	mov.w	r0, #0
 8015c48:	f380 8811 	msr	BASEPRI, r0
 8015c4c:	bc09      	pop	{r0, r3}
 8015c4e:	6819      	ldr	r1, [r3, #0]
 8015c50:	6808      	ldr	r0, [r1, #0]
 8015c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c56:	f01e 0f10 	tst.w	lr, #16
 8015c5a:	bf08      	it	eq
 8015c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015c60:	f380 8809 	msr	PSP, r0
 8015c64:	f3bf 8f6f 	isb	sy
 8015c68:	4770      	bx	lr
 8015c6a:	bf00      	nop
 8015c6c:	f3af 8000 	nop.w

08015c70 <pxCurrentTCBConst>:
 8015c70:	24024bec 	.word	0x24024bec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015c74:	bf00      	nop
 8015c76:	bf00      	nop

08015c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b082      	sub	sp, #8
 8015c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8015c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c82:	f383 8811 	msr	BASEPRI, r3
 8015c86:	f3bf 8f6f 	isb	sy
 8015c8a:	f3bf 8f4f 	dsb	sy
 8015c8e:	607b      	str	r3, [r7, #4]
}
 8015c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015c92:	f001 fc47 	bl	8017524 <xTaskIncrementTick>
 8015c96:	4603      	mov	r3, r0
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d003      	beq.n	8015ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015c9c:	4b06      	ldr	r3, [pc, #24]	; (8015cb8 <xPortSysTickHandler+0x40>)
 8015c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ca2:	601a      	str	r2, [r3, #0]
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	f383 8811 	msr	BASEPRI, r3
}
 8015cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015cb0:	bf00      	nop
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	e000ed04 	.word	0xe000ed04

08015cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015cc0:	4b0b      	ldr	r3, [pc, #44]	; (8015cf0 <vPortSetupTimerInterrupt+0x34>)
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015cc6:	4b0b      	ldr	r3, [pc, #44]	; (8015cf4 <vPortSetupTimerInterrupt+0x38>)
 8015cc8:	2200      	movs	r2, #0
 8015cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015ccc:	4b0a      	ldr	r3, [pc, #40]	; (8015cf8 <vPortSetupTimerInterrupt+0x3c>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	4a0a      	ldr	r2, [pc, #40]	; (8015cfc <vPortSetupTimerInterrupt+0x40>)
 8015cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8015cd6:	099b      	lsrs	r3, r3, #6
 8015cd8:	4a09      	ldr	r2, [pc, #36]	; (8015d00 <vPortSetupTimerInterrupt+0x44>)
 8015cda:	3b01      	subs	r3, #1
 8015cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015cde:	4b04      	ldr	r3, [pc, #16]	; (8015cf0 <vPortSetupTimerInterrupt+0x34>)
 8015ce0:	2207      	movs	r2, #7
 8015ce2:	601a      	str	r2, [r3, #0]
}
 8015ce4:	bf00      	nop
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cec:	4770      	bx	lr
 8015cee:	bf00      	nop
 8015cf0:	e000e010 	.word	0xe000e010
 8015cf4:	e000e018 	.word	0xe000e018
 8015cf8:	24000054 	.word	0x24000054
 8015cfc:	10624dd3 	.word	0x10624dd3
 8015d00:	e000e014 	.word	0xe000e014

08015d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015d14 <vPortEnableVFP+0x10>
 8015d08:	6801      	ldr	r1, [r0, #0]
 8015d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015d0e:	6001      	str	r1, [r0, #0]
 8015d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015d12:	bf00      	nop
 8015d14:	e000ed88 	.word	0xe000ed88

08015d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015d18:	b480      	push	{r7}
 8015d1a:	b085      	sub	sp, #20
 8015d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015d1e:	f3ef 8305 	mrs	r3, IPSR
 8015d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	2b0f      	cmp	r3, #15
 8015d28:	d914      	bls.n	8015d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015d2a:	4a17      	ldr	r2, [pc, #92]	; (8015d88 <vPortValidateInterruptPriority+0x70>)
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	4413      	add	r3, r2
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015d34:	4b15      	ldr	r3, [pc, #84]	; (8015d8c <vPortValidateInterruptPriority+0x74>)
 8015d36:	781b      	ldrb	r3, [r3, #0]
 8015d38:	7afa      	ldrb	r2, [r7, #11]
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d20a      	bcs.n	8015d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d42:	f383 8811 	msr	BASEPRI, r3
 8015d46:	f3bf 8f6f 	isb	sy
 8015d4a:	f3bf 8f4f 	dsb	sy
 8015d4e:	607b      	str	r3, [r7, #4]
}
 8015d50:	bf00      	nop
 8015d52:	e7fe      	b.n	8015d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015d54:	4b0e      	ldr	r3, [pc, #56]	; (8015d90 <vPortValidateInterruptPriority+0x78>)
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015d5c:	4b0d      	ldr	r3, [pc, #52]	; (8015d94 <vPortValidateInterruptPriority+0x7c>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d90a      	bls.n	8015d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d68:	f383 8811 	msr	BASEPRI, r3
 8015d6c:	f3bf 8f6f 	isb	sy
 8015d70:	f3bf 8f4f 	dsb	sy
 8015d74:	603b      	str	r3, [r7, #0]
}
 8015d76:	bf00      	nop
 8015d78:	e7fe      	b.n	8015d78 <vPortValidateInterruptPriority+0x60>
	}
 8015d7a:	bf00      	nop
 8015d7c:	3714      	adds	r7, #20
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d84:	4770      	bx	lr
 8015d86:	bf00      	nop
 8015d88:	e000e3f0 	.word	0xe000e3f0
 8015d8c:	24024ba4 	.word	0x24024ba4
 8015d90:	e000ed0c 	.word	0xe000ed0c
 8015d94:	24024ba8 	.word	0x24024ba8

08015d98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b084      	sub	sp, #16
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
 8015da0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d10a      	bne.n	8015dc2 <xQueueGenericReset+0x2a>
	__asm volatile
 8015dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015db0:	f383 8811 	msr	BASEPRI, r3
 8015db4:	f3bf 8f6f 	isb	sy
 8015db8:	f3bf 8f4f 	dsb	sy
 8015dbc:	60bb      	str	r3, [r7, #8]
}
 8015dbe:	bf00      	nop
 8015dc0:	e7fe      	b.n	8015dc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015dc2:	f7ff fec7 	bl	8015b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	681a      	ldr	r2, [r3, #0]
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015dce:	68f9      	ldr	r1, [r7, #12]
 8015dd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015dd2:	fb01 f303 	mul.w	r3, r1, r3
 8015dd6:	441a      	add	r2, r3
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	2200      	movs	r2, #0
 8015de0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	681a      	ldr	r2, [r3, #0]
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	681a      	ldr	r2, [r3, #0]
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015df2:	3b01      	subs	r3, #1
 8015df4:	68f9      	ldr	r1, [r7, #12]
 8015df6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015df8:	fb01 f303 	mul.w	r3, r1, r3
 8015dfc:	441a      	add	r2, r3
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	22ff      	movs	r2, #255	; 0xff
 8015e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	22ff      	movs	r2, #255	; 0xff
 8015e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d114      	bne.n	8015e42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	691b      	ldr	r3, [r3, #16]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d01a      	beq.n	8015e56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	3310      	adds	r3, #16
 8015e24:	4618      	mov	r0, r3
 8015e26:	f001 fd2d 	bl	8017884 <xTaskRemoveFromEventList>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d012      	beq.n	8015e56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015e30:	4b0c      	ldr	r3, [pc, #48]	; (8015e64 <xQueueGenericReset+0xcc>)
 8015e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e36:	601a      	str	r2, [r3, #0]
 8015e38:	f3bf 8f4f 	dsb	sy
 8015e3c:	f3bf 8f6f 	isb	sy
 8015e40:	e009      	b.n	8015e56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	3310      	adds	r3, #16
 8015e46:	4618      	mov	r0, r3
 8015e48:	f7ff fca6 	bl	8015798 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	3324      	adds	r3, #36	; 0x24
 8015e50:	4618      	mov	r0, r3
 8015e52:	f7ff fca1 	bl	8015798 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015e56:	f7ff fead 	bl	8015bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015e5a:	2301      	movs	r3, #1
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3710      	adds	r7, #16
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}
 8015e64:	e000ed04 	.word	0xe000ed04

08015e68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b08e      	sub	sp, #56	; 0x38
 8015e6c:	af02      	add	r7, sp, #8
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	607a      	str	r2, [r7, #4]
 8015e74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d10a      	bne.n	8015e92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e80:	f383 8811 	msr	BASEPRI, r3
 8015e84:	f3bf 8f6f 	isb	sy
 8015e88:	f3bf 8f4f 	dsb	sy
 8015e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015e8e:	bf00      	nop
 8015e90:	e7fe      	b.n	8015e90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d10a      	bne.n	8015eae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e9c:	f383 8811 	msr	BASEPRI, r3
 8015ea0:	f3bf 8f6f 	isb	sy
 8015ea4:	f3bf 8f4f 	dsb	sy
 8015ea8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015eaa:	bf00      	nop
 8015eac:	e7fe      	b.n	8015eac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d002      	beq.n	8015eba <xQueueGenericCreateStatic+0x52>
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d001      	beq.n	8015ebe <xQueueGenericCreateStatic+0x56>
 8015eba:	2301      	movs	r3, #1
 8015ebc:	e000      	b.n	8015ec0 <xQueueGenericCreateStatic+0x58>
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d10a      	bne.n	8015eda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec8:	f383 8811 	msr	BASEPRI, r3
 8015ecc:	f3bf 8f6f 	isb	sy
 8015ed0:	f3bf 8f4f 	dsb	sy
 8015ed4:	623b      	str	r3, [r7, #32]
}
 8015ed6:	bf00      	nop
 8015ed8:	e7fe      	b.n	8015ed8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d102      	bne.n	8015ee6 <xQueueGenericCreateStatic+0x7e>
 8015ee0:	68bb      	ldr	r3, [r7, #8]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d101      	bne.n	8015eea <xQueueGenericCreateStatic+0x82>
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	e000      	b.n	8015eec <xQueueGenericCreateStatic+0x84>
 8015eea:	2300      	movs	r3, #0
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d10a      	bne.n	8015f06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ef4:	f383 8811 	msr	BASEPRI, r3
 8015ef8:	f3bf 8f6f 	isb	sy
 8015efc:	f3bf 8f4f 	dsb	sy
 8015f00:	61fb      	str	r3, [r7, #28]
}
 8015f02:	bf00      	nop
 8015f04:	e7fe      	b.n	8015f04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015f06:	2350      	movs	r3, #80	; 0x50
 8015f08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015f0a:	697b      	ldr	r3, [r7, #20]
 8015f0c:	2b50      	cmp	r3, #80	; 0x50
 8015f0e:	d00a      	beq.n	8015f26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f14:	f383 8811 	msr	BASEPRI, r3
 8015f18:	f3bf 8f6f 	isb	sy
 8015f1c:	f3bf 8f4f 	dsb	sy
 8015f20:	61bb      	str	r3, [r7, #24]
}
 8015f22:	bf00      	nop
 8015f24:	e7fe      	b.n	8015f24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015f26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d00d      	beq.n	8015f4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f34:	2201      	movs	r2, #1
 8015f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015f3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f40:	9300      	str	r3, [sp, #0]
 8015f42:	4613      	mov	r3, r2
 8015f44:	687a      	ldr	r2, [r7, #4]
 8015f46:	68b9      	ldr	r1, [r7, #8]
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f000 f83f 	bl	8015fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015f50:	4618      	mov	r0, r3
 8015f52:	3730      	adds	r7, #48	; 0x30
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}

08015f58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b08a      	sub	sp, #40	; 0x28
 8015f5c:	af02      	add	r7, sp, #8
 8015f5e:	60f8      	str	r0, [r7, #12]
 8015f60:	60b9      	str	r1, [r7, #8]
 8015f62:	4613      	mov	r3, r2
 8015f64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d10a      	bne.n	8015f82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8015f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f70:	f383 8811 	msr	BASEPRI, r3
 8015f74:	f3bf 8f6f 	isb	sy
 8015f78:	f3bf 8f4f 	dsb	sy
 8015f7c:	613b      	str	r3, [r7, #16]
}
 8015f7e:	bf00      	nop
 8015f80:	e7fe      	b.n	8015f80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	68ba      	ldr	r2, [r7, #8]
 8015f86:	fb02 f303 	mul.w	r3, r2, r3
 8015f8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015f8c:	69fb      	ldr	r3, [r7, #28]
 8015f8e:	3350      	adds	r3, #80	; 0x50
 8015f90:	4618      	mov	r0, r3
 8015f92:	f7ff fa15 	bl	80153c0 <pvPortMalloc>
 8015f96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015f98:	69bb      	ldr	r3, [r7, #24]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d011      	beq.n	8015fc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015f9e:	69bb      	ldr	r3, [r7, #24]
 8015fa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015fa2:	697b      	ldr	r3, [r7, #20]
 8015fa4:	3350      	adds	r3, #80	; 0x50
 8015fa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015fa8:	69bb      	ldr	r3, [r7, #24]
 8015faa:	2200      	movs	r2, #0
 8015fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015fb0:	79fa      	ldrb	r2, [r7, #7]
 8015fb2:	69bb      	ldr	r3, [r7, #24]
 8015fb4:	9300      	str	r3, [sp, #0]
 8015fb6:	4613      	mov	r3, r2
 8015fb8:	697a      	ldr	r2, [r7, #20]
 8015fba:	68b9      	ldr	r1, [r7, #8]
 8015fbc:	68f8      	ldr	r0, [r7, #12]
 8015fbe:	f000 f805 	bl	8015fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015fc2:	69bb      	ldr	r3, [r7, #24]
	}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3720      	adds	r7, #32
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}

08015fcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b084      	sub	sp, #16
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	60f8      	str	r0, [r7, #12]
 8015fd4:	60b9      	str	r1, [r7, #8]
 8015fd6:	607a      	str	r2, [r7, #4]
 8015fd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d103      	bne.n	8015fe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015fe0:	69bb      	ldr	r3, [r7, #24]
 8015fe2:	69ba      	ldr	r2, [r7, #24]
 8015fe4:	601a      	str	r2, [r3, #0]
 8015fe6:	e002      	b.n	8015fee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015fe8:	69bb      	ldr	r3, [r7, #24]
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015fee:	69bb      	ldr	r3, [r7, #24]
 8015ff0:	68fa      	ldr	r2, [r7, #12]
 8015ff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015ff4:	69bb      	ldr	r3, [r7, #24]
 8015ff6:	68ba      	ldr	r2, [r7, #8]
 8015ff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015ffa:	2101      	movs	r1, #1
 8015ffc:	69b8      	ldr	r0, [r7, #24]
 8015ffe:	f7ff fecb 	bl	8015d98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016002:	69bb      	ldr	r3, [r7, #24]
 8016004:	78fa      	ldrb	r2, [r7, #3]
 8016006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801600a:	bf00      	nop
 801600c:	3710      	adds	r7, #16
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}

08016012 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016012:	b580      	push	{r7, lr}
 8016014:	b082      	sub	sp, #8
 8016016:	af00      	add	r7, sp, #0
 8016018:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d00e      	beq.n	801603e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	2200      	movs	r2, #0
 8016024:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2200      	movs	r2, #0
 801602a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2200      	movs	r2, #0
 8016030:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016032:	2300      	movs	r3, #0
 8016034:	2200      	movs	r2, #0
 8016036:	2100      	movs	r1, #0
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f000 f90b 	bl	8016254 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801603e:	bf00      	nop
 8016040:	3708      	adds	r7, #8
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}

08016046 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016046:	b580      	push	{r7, lr}
 8016048:	b086      	sub	sp, #24
 801604a:	af00      	add	r7, sp, #0
 801604c:	4603      	mov	r3, r0
 801604e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016050:	2301      	movs	r3, #1
 8016052:	617b      	str	r3, [r7, #20]
 8016054:	2300      	movs	r3, #0
 8016056:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016058:	79fb      	ldrb	r3, [r7, #7]
 801605a:	461a      	mov	r2, r3
 801605c:	6939      	ldr	r1, [r7, #16]
 801605e:	6978      	ldr	r0, [r7, #20]
 8016060:	f7ff ff7a 	bl	8015f58 <xQueueGenericCreate>
 8016064:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016066:	68f8      	ldr	r0, [r7, #12]
 8016068:	f7ff ffd3 	bl	8016012 <prvInitialiseMutex>

		return xNewQueue;
 801606c:	68fb      	ldr	r3, [r7, #12]
	}
 801606e:	4618      	mov	r0, r3
 8016070:	3718      	adds	r7, #24
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}

08016076 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016076:	b580      	push	{r7, lr}
 8016078:	b088      	sub	sp, #32
 801607a:	af02      	add	r7, sp, #8
 801607c:	4603      	mov	r3, r0
 801607e:	6039      	str	r1, [r7, #0]
 8016080:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016082:	2301      	movs	r3, #1
 8016084:	617b      	str	r3, [r7, #20]
 8016086:	2300      	movs	r3, #0
 8016088:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801608a:	79fb      	ldrb	r3, [r7, #7]
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	2200      	movs	r2, #0
 8016092:	6939      	ldr	r1, [r7, #16]
 8016094:	6978      	ldr	r0, [r7, #20]
 8016096:	f7ff fee7 	bl	8015e68 <xQueueGenericCreateStatic>
 801609a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801609c:	68f8      	ldr	r0, [r7, #12]
 801609e:	f7ff ffb8 	bl	8016012 <prvInitialiseMutex>

		return xNewQueue;
 80160a2:	68fb      	ldr	r3, [r7, #12]
	}
 80160a4:	4618      	mov	r0, r3
 80160a6:	3718      	adds	r7, #24
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}

080160ac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80160ac:	b590      	push	{r4, r7, lr}
 80160ae:	b087      	sub	sp, #28
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d10a      	bne.n	80160d4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80160be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160c2:	f383 8811 	msr	BASEPRI, r3
 80160c6:	f3bf 8f6f 	isb	sy
 80160ca:	f3bf 8f4f 	dsb	sy
 80160ce:	60fb      	str	r3, [r7, #12]
}
 80160d0:	bf00      	nop
 80160d2:	e7fe      	b.n	80160d2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	689c      	ldr	r4, [r3, #8]
 80160d8:	f001 fd94 	bl	8017c04 <xTaskGetCurrentTaskHandle>
 80160dc:	4603      	mov	r3, r0
 80160de:	429c      	cmp	r4, r3
 80160e0:	d111      	bne.n	8016106 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	68db      	ldr	r3, [r3, #12]
 80160e6:	1e5a      	subs	r2, r3, #1
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	68db      	ldr	r3, [r3, #12]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d105      	bne.n	8016100 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80160f4:	2300      	movs	r3, #0
 80160f6:	2200      	movs	r2, #0
 80160f8:	2100      	movs	r1, #0
 80160fa:	6938      	ldr	r0, [r7, #16]
 80160fc:	f000 f8aa 	bl	8016254 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016100:	2301      	movs	r3, #1
 8016102:	617b      	str	r3, [r7, #20]
 8016104:	e001      	b.n	801610a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016106:	2300      	movs	r3, #0
 8016108:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801610a:	697b      	ldr	r3, [r7, #20]
	}
 801610c:	4618      	mov	r0, r3
 801610e:	371c      	adds	r7, #28
 8016110:	46bd      	mov	sp, r7
 8016112:	bd90      	pop	{r4, r7, pc}

08016114 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016114:	b590      	push	{r4, r7, lr}
 8016116:	b087      	sub	sp, #28
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016122:	693b      	ldr	r3, [r7, #16]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d10a      	bne.n	801613e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8016128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801612c:	f383 8811 	msr	BASEPRI, r3
 8016130:	f3bf 8f6f 	isb	sy
 8016134:	f3bf 8f4f 	dsb	sy
 8016138:	60fb      	str	r3, [r7, #12]
}
 801613a:	bf00      	nop
 801613c:	e7fe      	b.n	801613c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	689c      	ldr	r4, [r3, #8]
 8016142:	f001 fd5f 	bl	8017c04 <xTaskGetCurrentTaskHandle>
 8016146:	4603      	mov	r3, r0
 8016148:	429c      	cmp	r4, r3
 801614a:	d107      	bne.n	801615c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801614c:	693b      	ldr	r3, [r7, #16]
 801614e:	68db      	ldr	r3, [r3, #12]
 8016150:	1c5a      	adds	r2, r3, #1
 8016152:	693b      	ldr	r3, [r7, #16]
 8016154:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016156:	2301      	movs	r3, #1
 8016158:	617b      	str	r3, [r7, #20]
 801615a:	e00c      	b.n	8016176 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801615c:	6839      	ldr	r1, [r7, #0]
 801615e:	6938      	ldr	r0, [r7, #16]
 8016160:	f000 fb7e 	bl	8016860 <xQueueSemaphoreTake>
 8016164:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016166:	697b      	ldr	r3, [r7, #20]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d004      	beq.n	8016176 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	68db      	ldr	r3, [r3, #12]
 8016170:	1c5a      	adds	r2, r3, #1
 8016172:	693b      	ldr	r3, [r7, #16]
 8016174:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016176:	697b      	ldr	r3, [r7, #20]
	}
 8016178:	4618      	mov	r0, r3
 801617a:	371c      	adds	r7, #28
 801617c:	46bd      	mov	sp, r7
 801617e:	bd90      	pop	{r4, r7, pc}

08016180 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016180:	b580      	push	{r7, lr}
 8016182:	b08a      	sub	sp, #40	; 0x28
 8016184:	af02      	add	r7, sp, #8
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	60b9      	str	r1, [r7, #8]
 801618a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d10a      	bne.n	80161a8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8016192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016196:	f383 8811 	msr	BASEPRI, r3
 801619a:	f3bf 8f6f 	isb	sy
 801619e:	f3bf 8f4f 	dsb	sy
 80161a2:	61bb      	str	r3, [r7, #24]
}
 80161a4:	bf00      	nop
 80161a6:	e7fe      	b.n	80161a6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80161a8:	68ba      	ldr	r2, [r7, #8]
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	429a      	cmp	r2, r3
 80161ae:	d90a      	bls.n	80161c6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80161b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b4:	f383 8811 	msr	BASEPRI, r3
 80161b8:	f3bf 8f6f 	isb	sy
 80161bc:	f3bf 8f4f 	dsb	sy
 80161c0:	617b      	str	r3, [r7, #20]
}
 80161c2:	bf00      	nop
 80161c4:	e7fe      	b.n	80161c4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80161c6:	2302      	movs	r3, #2
 80161c8:	9300      	str	r3, [sp, #0]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	2200      	movs	r2, #0
 80161ce:	2100      	movs	r1, #0
 80161d0:	68f8      	ldr	r0, [r7, #12]
 80161d2:	f7ff fe49 	bl	8015e68 <xQueueGenericCreateStatic>
 80161d6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80161d8:	69fb      	ldr	r3, [r7, #28]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d002      	beq.n	80161e4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80161de:	69fb      	ldr	r3, [r7, #28]
 80161e0:	68ba      	ldr	r2, [r7, #8]
 80161e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80161e4:	69fb      	ldr	r3, [r7, #28]
	}
 80161e6:	4618      	mov	r0, r3
 80161e8:	3720      	adds	r7, #32
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bd80      	pop	{r7, pc}

080161ee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80161ee:	b580      	push	{r7, lr}
 80161f0:	b086      	sub	sp, #24
 80161f2:	af00      	add	r7, sp, #0
 80161f4:	6078      	str	r0, [r7, #4]
 80161f6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d10a      	bne.n	8016214 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80161fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016202:	f383 8811 	msr	BASEPRI, r3
 8016206:	f3bf 8f6f 	isb	sy
 801620a:	f3bf 8f4f 	dsb	sy
 801620e:	613b      	str	r3, [r7, #16]
}
 8016210:	bf00      	nop
 8016212:	e7fe      	b.n	8016212 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016214:	683a      	ldr	r2, [r7, #0]
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	429a      	cmp	r2, r3
 801621a:	d90a      	bls.n	8016232 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016220:	f383 8811 	msr	BASEPRI, r3
 8016224:	f3bf 8f6f 	isb	sy
 8016228:	f3bf 8f4f 	dsb	sy
 801622c:	60fb      	str	r3, [r7, #12]
}
 801622e:	bf00      	nop
 8016230:	e7fe      	b.n	8016230 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016232:	2202      	movs	r2, #2
 8016234:	2100      	movs	r1, #0
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	f7ff fe8e 	bl	8015f58 <xQueueGenericCreate>
 801623c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801623e:	697b      	ldr	r3, [r7, #20]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d002      	beq.n	801624a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016244:	697b      	ldr	r3, [r7, #20]
 8016246:	683a      	ldr	r2, [r7, #0]
 8016248:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801624a:	697b      	ldr	r3, [r7, #20]
	}
 801624c:	4618      	mov	r0, r3
 801624e:	3718      	adds	r7, #24
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}

08016254 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b08e      	sub	sp, #56	; 0x38
 8016258:	af00      	add	r7, sp, #0
 801625a:	60f8      	str	r0, [r7, #12]
 801625c:	60b9      	str	r1, [r7, #8]
 801625e:	607a      	str	r2, [r7, #4]
 8016260:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016262:	2300      	movs	r3, #0
 8016264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801626c:	2b00      	cmp	r3, #0
 801626e:	d10a      	bne.n	8016286 <xQueueGenericSend+0x32>
	__asm volatile
 8016270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016274:	f383 8811 	msr	BASEPRI, r3
 8016278:	f3bf 8f6f 	isb	sy
 801627c:	f3bf 8f4f 	dsb	sy
 8016280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016282:	bf00      	nop
 8016284:	e7fe      	b.n	8016284 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d103      	bne.n	8016294 <xQueueGenericSend+0x40>
 801628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016290:	2b00      	cmp	r3, #0
 8016292:	d101      	bne.n	8016298 <xQueueGenericSend+0x44>
 8016294:	2301      	movs	r3, #1
 8016296:	e000      	b.n	801629a <xQueueGenericSend+0x46>
 8016298:	2300      	movs	r3, #0
 801629a:	2b00      	cmp	r3, #0
 801629c:	d10a      	bne.n	80162b4 <xQueueGenericSend+0x60>
	__asm volatile
 801629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a2:	f383 8811 	msr	BASEPRI, r3
 80162a6:	f3bf 8f6f 	isb	sy
 80162aa:	f3bf 8f4f 	dsb	sy
 80162ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80162b0:	bf00      	nop
 80162b2:	e7fe      	b.n	80162b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	2b02      	cmp	r3, #2
 80162b8:	d103      	bne.n	80162c2 <xQueueGenericSend+0x6e>
 80162ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162be:	2b01      	cmp	r3, #1
 80162c0:	d101      	bne.n	80162c6 <xQueueGenericSend+0x72>
 80162c2:	2301      	movs	r3, #1
 80162c4:	e000      	b.n	80162c8 <xQueueGenericSend+0x74>
 80162c6:	2300      	movs	r3, #0
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d10a      	bne.n	80162e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80162cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d0:	f383 8811 	msr	BASEPRI, r3
 80162d4:	f3bf 8f6f 	isb	sy
 80162d8:	f3bf 8f4f 	dsb	sy
 80162dc:	623b      	str	r3, [r7, #32]
}
 80162de:	bf00      	nop
 80162e0:	e7fe      	b.n	80162e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80162e2:	f001 fc9f 	bl	8017c24 <xTaskGetSchedulerState>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d102      	bne.n	80162f2 <xQueueGenericSend+0x9e>
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d101      	bne.n	80162f6 <xQueueGenericSend+0xa2>
 80162f2:	2301      	movs	r3, #1
 80162f4:	e000      	b.n	80162f8 <xQueueGenericSend+0xa4>
 80162f6:	2300      	movs	r3, #0
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d10a      	bne.n	8016312 <xQueueGenericSend+0xbe>
	__asm volatile
 80162fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016300:	f383 8811 	msr	BASEPRI, r3
 8016304:	f3bf 8f6f 	isb	sy
 8016308:	f3bf 8f4f 	dsb	sy
 801630c:	61fb      	str	r3, [r7, #28]
}
 801630e:	bf00      	nop
 8016310:	e7fe      	b.n	8016310 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016312:	f7ff fc1f 	bl	8015b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801631e:	429a      	cmp	r2, r3
 8016320:	d302      	bcc.n	8016328 <xQueueGenericSend+0xd4>
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	2b02      	cmp	r3, #2
 8016326:	d129      	bne.n	801637c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016328:	683a      	ldr	r2, [r7, #0]
 801632a:	68b9      	ldr	r1, [r7, #8]
 801632c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801632e:	f000 fc5e 	bl	8016bee <prvCopyDataToQueue>
 8016332:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016338:	2b00      	cmp	r3, #0
 801633a:	d010      	beq.n	801635e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633e:	3324      	adds	r3, #36	; 0x24
 8016340:	4618      	mov	r0, r3
 8016342:	f001 fa9f 	bl	8017884 <xTaskRemoveFromEventList>
 8016346:	4603      	mov	r3, r0
 8016348:	2b00      	cmp	r3, #0
 801634a:	d013      	beq.n	8016374 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801634c:	4b3f      	ldr	r3, [pc, #252]	; (801644c <xQueueGenericSend+0x1f8>)
 801634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016352:	601a      	str	r2, [r3, #0]
 8016354:	f3bf 8f4f 	dsb	sy
 8016358:	f3bf 8f6f 	isb	sy
 801635c:	e00a      	b.n	8016374 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016360:	2b00      	cmp	r3, #0
 8016362:	d007      	beq.n	8016374 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016364:	4b39      	ldr	r3, [pc, #228]	; (801644c <xQueueGenericSend+0x1f8>)
 8016366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801636a:	601a      	str	r2, [r3, #0]
 801636c:	f3bf 8f4f 	dsb	sy
 8016370:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016374:	f7ff fc1e 	bl	8015bb4 <vPortExitCritical>
				return pdPASS;
 8016378:	2301      	movs	r3, #1
 801637a:	e063      	b.n	8016444 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d103      	bne.n	801638a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016382:	f7ff fc17 	bl	8015bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016386:	2300      	movs	r3, #0
 8016388:	e05c      	b.n	8016444 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801638c:	2b00      	cmp	r3, #0
 801638e:	d106      	bne.n	801639e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016390:	f107 0314 	add.w	r3, r7, #20
 8016394:	4618      	mov	r0, r3
 8016396:	f001 fad9 	bl	801794c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801639a:	2301      	movs	r3, #1
 801639c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801639e:	f7ff fc09 	bl	8015bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80163a2:	f001 f803 	bl	80173ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80163a6:	f7ff fbd5 	bl	8015b54 <vPortEnterCritical>
 80163aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163b0:	b25b      	sxtb	r3, r3
 80163b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163b6:	d103      	bne.n	80163c0 <xQueueGenericSend+0x16c>
 80163b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ba:	2200      	movs	r2, #0
 80163bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80163c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80163c6:	b25b      	sxtb	r3, r3
 80163c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163cc:	d103      	bne.n	80163d6 <xQueueGenericSend+0x182>
 80163ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d0:	2200      	movs	r2, #0
 80163d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80163d6:	f7ff fbed 	bl	8015bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80163da:	1d3a      	adds	r2, r7, #4
 80163dc:	f107 0314 	add.w	r3, r7, #20
 80163e0:	4611      	mov	r1, r2
 80163e2:	4618      	mov	r0, r3
 80163e4:	f001 fac8 	bl	8017978 <xTaskCheckForTimeOut>
 80163e8:	4603      	mov	r3, r0
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d124      	bne.n	8016438 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80163ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163f0:	f000 fcf5 	bl	8016dde <prvIsQueueFull>
 80163f4:	4603      	mov	r3, r0
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d018      	beq.n	801642c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80163fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163fc:	3310      	adds	r3, #16
 80163fe:	687a      	ldr	r2, [r7, #4]
 8016400:	4611      	mov	r1, r2
 8016402:	4618      	mov	r0, r3
 8016404:	f001 f9ee 	bl	80177e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801640a:	f000 fc80 	bl	8016d0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801640e:	f000 ffdb 	bl	80173c8 <xTaskResumeAll>
 8016412:	4603      	mov	r3, r0
 8016414:	2b00      	cmp	r3, #0
 8016416:	f47f af7c 	bne.w	8016312 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801641a:	4b0c      	ldr	r3, [pc, #48]	; (801644c <xQueueGenericSend+0x1f8>)
 801641c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016420:	601a      	str	r2, [r3, #0]
 8016422:	f3bf 8f4f 	dsb	sy
 8016426:	f3bf 8f6f 	isb	sy
 801642a:	e772      	b.n	8016312 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801642c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801642e:	f000 fc6e 	bl	8016d0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016432:	f000 ffc9 	bl	80173c8 <xTaskResumeAll>
 8016436:	e76c      	b.n	8016312 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801643a:	f000 fc68 	bl	8016d0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801643e:	f000 ffc3 	bl	80173c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016442:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016444:	4618      	mov	r0, r3
 8016446:	3738      	adds	r7, #56	; 0x38
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}
 801644c:	e000ed04 	.word	0xe000ed04

08016450 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b090      	sub	sp, #64	; 0x40
 8016454:	af00      	add	r7, sp, #0
 8016456:	60f8      	str	r0, [r7, #12]
 8016458:	60b9      	str	r1, [r7, #8]
 801645a:	607a      	str	r2, [r7, #4]
 801645c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016464:	2b00      	cmp	r3, #0
 8016466:	d10a      	bne.n	801647e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801646c:	f383 8811 	msr	BASEPRI, r3
 8016470:	f3bf 8f6f 	isb	sy
 8016474:	f3bf 8f4f 	dsb	sy
 8016478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801647a:	bf00      	nop
 801647c:	e7fe      	b.n	801647c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801647e:	68bb      	ldr	r3, [r7, #8]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d103      	bne.n	801648c <xQueueGenericSendFromISR+0x3c>
 8016484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016488:	2b00      	cmp	r3, #0
 801648a:	d101      	bne.n	8016490 <xQueueGenericSendFromISR+0x40>
 801648c:	2301      	movs	r3, #1
 801648e:	e000      	b.n	8016492 <xQueueGenericSendFromISR+0x42>
 8016490:	2300      	movs	r3, #0
 8016492:	2b00      	cmp	r3, #0
 8016494:	d10a      	bne.n	80164ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801649a:	f383 8811 	msr	BASEPRI, r3
 801649e:	f3bf 8f6f 	isb	sy
 80164a2:	f3bf 8f4f 	dsb	sy
 80164a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80164a8:	bf00      	nop
 80164aa:	e7fe      	b.n	80164aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	2b02      	cmp	r3, #2
 80164b0:	d103      	bne.n	80164ba <xQueueGenericSendFromISR+0x6a>
 80164b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80164b6:	2b01      	cmp	r3, #1
 80164b8:	d101      	bne.n	80164be <xQueueGenericSendFromISR+0x6e>
 80164ba:	2301      	movs	r3, #1
 80164bc:	e000      	b.n	80164c0 <xQueueGenericSendFromISR+0x70>
 80164be:	2300      	movs	r3, #0
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d10a      	bne.n	80164da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80164c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c8:	f383 8811 	msr	BASEPRI, r3
 80164cc:	f3bf 8f6f 	isb	sy
 80164d0:	f3bf 8f4f 	dsb	sy
 80164d4:	623b      	str	r3, [r7, #32]
}
 80164d6:	bf00      	nop
 80164d8:	e7fe      	b.n	80164d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80164da:	f7ff fc1d 	bl	8015d18 <vPortValidateInterruptPriority>
	__asm volatile
 80164de:	f3ef 8211 	mrs	r2, BASEPRI
 80164e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e6:	f383 8811 	msr	BASEPRI, r3
 80164ea:	f3bf 8f6f 	isb	sy
 80164ee:	f3bf 8f4f 	dsb	sy
 80164f2:	61fa      	str	r2, [r7, #28]
 80164f4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80164f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80164f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80164fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80164fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016502:	429a      	cmp	r2, r3
 8016504:	d302      	bcc.n	801650c <xQueueGenericSendFromISR+0xbc>
 8016506:	683b      	ldr	r3, [r7, #0]
 8016508:	2b02      	cmp	r3, #2
 801650a:	d12f      	bne.n	801656c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801650e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801651a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801651c:	683a      	ldr	r2, [r7, #0]
 801651e:	68b9      	ldr	r1, [r7, #8]
 8016520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016522:	f000 fb64 	bl	8016bee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016526:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801652e:	d112      	bne.n	8016556 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016534:	2b00      	cmp	r3, #0
 8016536:	d016      	beq.n	8016566 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801653a:	3324      	adds	r3, #36	; 0x24
 801653c:	4618      	mov	r0, r3
 801653e:	f001 f9a1 	bl	8017884 <xTaskRemoveFromEventList>
 8016542:	4603      	mov	r3, r0
 8016544:	2b00      	cmp	r3, #0
 8016546:	d00e      	beq.n	8016566 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d00b      	beq.n	8016566 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	2201      	movs	r2, #1
 8016552:	601a      	str	r2, [r3, #0]
 8016554:	e007      	b.n	8016566 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801655a:	3301      	adds	r3, #1
 801655c:	b2db      	uxtb	r3, r3
 801655e:	b25a      	sxtb	r2, r3
 8016560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016566:	2301      	movs	r3, #1
 8016568:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801656a:	e001      	b.n	8016570 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801656c:	2300      	movs	r3, #0
 801656e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016572:	617b      	str	r3, [r7, #20]
	__asm volatile
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	f383 8811 	msr	BASEPRI, r3
}
 801657a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801657c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801657e:	4618      	mov	r0, r3
 8016580:	3740      	adds	r7, #64	; 0x40
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}

08016586 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016586:	b580      	push	{r7, lr}
 8016588:	b08e      	sub	sp, #56	; 0x38
 801658a:	af00      	add	r7, sp, #0
 801658c:	6078      	str	r0, [r7, #4]
 801658e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016596:	2b00      	cmp	r3, #0
 8016598:	d10a      	bne.n	80165b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801659e:	f383 8811 	msr	BASEPRI, r3
 80165a2:	f3bf 8f6f 	isb	sy
 80165a6:	f3bf 8f4f 	dsb	sy
 80165aa:	623b      	str	r3, [r7, #32]
}
 80165ac:	bf00      	nop
 80165ae:	e7fe      	b.n	80165ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80165b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d00a      	beq.n	80165ce <xQueueGiveFromISR+0x48>
	__asm volatile
 80165b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165bc:	f383 8811 	msr	BASEPRI, r3
 80165c0:	f3bf 8f6f 	isb	sy
 80165c4:	f3bf 8f4f 	dsb	sy
 80165c8:	61fb      	str	r3, [r7, #28]
}
 80165ca:	bf00      	nop
 80165cc:	e7fe      	b.n	80165cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80165ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d103      	bne.n	80165de <xQueueGiveFromISR+0x58>
 80165d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d8:	689b      	ldr	r3, [r3, #8]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d101      	bne.n	80165e2 <xQueueGiveFromISR+0x5c>
 80165de:	2301      	movs	r3, #1
 80165e0:	e000      	b.n	80165e4 <xQueueGiveFromISR+0x5e>
 80165e2:	2300      	movs	r3, #0
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d10a      	bne.n	80165fe <xQueueGiveFromISR+0x78>
	__asm volatile
 80165e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165ec:	f383 8811 	msr	BASEPRI, r3
 80165f0:	f3bf 8f6f 	isb	sy
 80165f4:	f3bf 8f4f 	dsb	sy
 80165f8:	61bb      	str	r3, [r7, #24]
}
 80165fa:	bf00      	nop
 80165fc:	e7fe      	b.n	80165fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80165fe:	f7ff fb8b 	bl	8015d18 <vPortValidateInterruptPriority>
	__asm volatile
 8016602:	f3ef 8211 	mrs	r2, BASEPRI
 8016606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801660a:	f383 8811 	msr	BASEPRI, r3
 801660e:	f3bf 8f6f 	isb	sy
 8016612:	f3bf 8f4f 	dsb	sy
 8016616:	617a      	str	r2, [r7, #20]
 8016618:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801661a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801661c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016622:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801662a:	429a      	cmp	r2, r3
 801662c:	d22b      	bcs.n	8016686 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801663a:	1c5a      	adds	r2, r3, #1
 801663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801663e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016648:	d112      	bne.n	8016670 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801664e:	2b00      	cmp	r3, #0
 8016650:	d016      	beq.n	8016680 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016654:	3324      	adds	r3, #36	; 0x24
 8016656:	4618      	mov	r0, r3
 8016658:	f001 f914 	bl	8017884 <xTaskRemoveFromEventList>
 801665c:	4603      	mov	r3, r0
 801665e:	2b00      	cmp	r3, #0
 8016660:	d00e      	beq.n	8016680 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d00b      	beq.n	8016680 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	2201      	movs	r2, #1
 801666c:	601a      	str	r2, [r3, #0]
 801666e:	e007      	b.n	8016680 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016674:	3301      	adds	r3, #1
 8016676:	b2db      	uxtb	r3, r3
 8016678:	b25a      	sxtb	r2, r3
 801667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016680:	2301      	movs	r3, #1
 8016682:	637b      	str	r3, [r7, #52]	; 0x34
 8016684:	e001      	b.n	801668a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016686:	2300      	movs	r3, #0
 8016688:	637b      	str	r3, [r7, #52]	; 0x34
 801668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	f383 8811 	msr	BASEPRI, r3
}
 8016694:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016698:	4618      	mov	r0, r3
 801669a:	3738      	adds	r7, #56	; 0x38
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}

080166a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b08c      	sub	sp, #48	; 0x30
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	60f8      	str	r0, [r7, #12]
 80166a8:	60b9      	str	r1, [r7, #8]
 80166aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80166ac:	2300      	movs	r3, #0
 80166ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80166b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d10a      	bne.n	80166d0 <xQueueReceive+0x30>
	__asm volatile
 80166ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166be:	f383 8811 	msr	BASEPRI, r3
 80166c2:	f3bf 8f6f 	isb	sy
 80166c6:	f3bf 8f4f 	dsb	sy
 80166ca:	623b      	str	r3, [r7, #32]
}
 80166cc:	bf00      	nop
 80166ce:	e7fe      	b.n	80166ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80166d0:	68bb      	ldr	r3, [r7, #8]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d103      	bne.n	80166de <xQueueReceive+0x3e>
 80166d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d101      	bne.n	80166e2 <xQueueReceive+0x42>
 80166de:	2301      	movs	r3, #1
 80166e0:	e000      	b.n	80166e4 <xQueueReceive+0x44>
 80166e2:	2300      	movs	r3, #0
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d10a      	bne.n	80166fe <xQueueReceive+0x5e>
	__asm volatile
 80166e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ec:	f383 8811 	msr	BASEPRI, r3
 80166f0:	f3bf 8f6f 	isb	sy
 80166f4:	f3bf 8f4f 	dsb	sy
 80166f8:	61fb      	str	r3, [r7, #28]
}
 80166fa:	bf00      	nop
 80166fc:	e7fe      	b.n	80166fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80166fe:	f001 fa91 	bl	8017c24 <xTaskGetSchedulerState>
 8016702:	4603      	mov	r3, r0
 8016704:	2b00      	cmp	r3, #0
 8016706:	d102      	bne.n	801670e <xQueueReceive+0x6e>
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d101      	bne.n	8016712 <xQueueReceive+0x72>
 801670e:	2301      	movs	r3, #1
 8016710:	e000      	b.n	8016714 <xQueueReceive+0x74>
 8016712:	2300      	movs	r3, #0
 8016714:	2b00      	cmp	r3, #0
 8016716:	d10a      	bne.n	801672e <xQueueReceive+0x8e>
	__asm volatile
 8016718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801671c:	f383 8811 	msr	BASEPRI, r3
 8016720:	f3bf 8f6f 	isb	sy
 8016724:	f3bf 8f4f 	dsb	sy
 8016728:	61bb      	str	r3, [r7, #24]
}
 801672a:	bf00      	nop
 801672c:	e7fe      	b.n	801672c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801672e:	f7ff fa11 	bl	8015b54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016736:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801673a:	2b00      	cmp	r3, #0
 801673c:	d01f      	beq.n	801677e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801673e:	68b9      	ldr	r1, [r7, #8]
 8016740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016742:	f000 fabe 	bl	8016cc2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016748:	1e5a      	subs	r2, r3, #1
 801674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801674c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016750:	691b      	ldr	r3, [r3, #16]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d00f      	beq.n	8016776 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016758:	3310      	adds	r3, #16
 801675a:	4618      	mov	r0, r3
 801675c:	f001 f892 	bl	8017884 <xTaskRemoveFromEventList>
 8016760:	4603      	mov	r3, r0
 8016762:	2b00      	cmp	r3, #0
 8016764:	d007      	beq.n	8016776 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016766:	4b3d      	ldr	r3, [pc, #244]	; (801685c <xQueueReceive+0x1bc>)
 8016768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801676c:	601a      	str	r2, [r3, #0]
 801676e:	f3bf 8f4f 	dsb	sy
 8016772:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016776:	f7ff fa1d 	bl	8015bb4 <vPortExitCritical>
				return pdPASS;
 801677a:	2301      	movs	r3, #1
 801677c:	e069      	b.n	8016852 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d103      	bne.n	801678c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016784:	f7ff fa16 	bl	8015bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016788:	2300      	movs	r3, #0
 801678a:	e062      	b.n	8016852 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801678e:	2b00      	cmp	r3, #0
 8016790:	d106      	bne.n	80167a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016792:	f107 0310 	add.w	r3, r7, #16
 8016796:	4618      	mov	r0, r3
 8016798:	f001 f8d8 	bl	801794c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801679c:	2301      	movs	r3, #1
 801679e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80167a0:	f7ff fa08 	bl	8015bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80167a4:	f000 fe02 	bl	80173ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80167a8:	f7ff f9d4 	bl	8015b54 <vPortEnterCritical>
 80167ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80167b2:	b25b      	sxtb	r3, r3
 80167b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167b8:	d103      	bne.n	80167c2 <xQueueReceive+0x122>
 80167ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167bc:	2200      	movs	r2, #0
 80167be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80167c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80167c8:	b25b      	sxtb	r3, r3
 80167ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167ce:	d103      	bne.n	80167d8 <xQueueReceive+0x138>
 80167d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167d2:	2200      	movs	r2, #0
 80167d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80167d8:	f7ff f9ec 	bl	8015bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80167dc:	1d3a      	adds	r2, r7, #4
 80167de:	f107 0310 	add.w	r3, r7, #16
 80167e2:	4611      	mov	r1, r2
 80167e4:	4618      	mov	r0, r3
 80167e6:	f001 f8c7 	bl	8017978 <xTaskCheckForTimeOut>
 80167ea:	4603      	mov	r3, r0
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d123      	bne.n	8016838 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80167f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167f2:	f000 fade 	bl	8016db2 <prvIsQueueEmpty>
 80167f6:	4603      	mov	r3, r0
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d017      	beq.n	801682c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80167fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167fe:	3324      	adds	r3, #36	; 0x24
 8016800:	687a      	ldr	r2, [r7, #4]
 8016802:	4611      	mov	r1, r2
 8016804:	4618      	mov	r0, r3
 8016806:	f000 ffed 	bl	80177e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801680a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801680c:	f000 fa7f 	bl	8016d0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016810:	f000 fdda 	bl	80173c8 <xTaskResumeAll>
 8016814:	4603      	mov	r3, r0
 8016816:	2b00      	cmp	r3, #0
 8016818:	d189      	bne.n	801672e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801681a:	4b10      	ldr	r3, [pc, #64]	; (801685c <xQueueReceive+0x1bc>)
 801681c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016820:	601a      	str	r2, [r3, #0]
 8016822:	f3bf 8f4f 	dsb	sy
 8016826:	f3bf 8f6f 	isb	sy
 801682a:	e780      	b.n	801672e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801682c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801682e:	f000 fa6e 	bl	8016d0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016832:	f000 fdc9 	bl	80173c8 <xTaskResumeAll>
 8016836:	e77a      	b.n	801672e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801683a:	f000 fa68 	bl	8016d0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801683e:	f000 fdc3 	bl	80173c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016844:	f000 fab5 	bl	8016db2 <prvIsQueueEmpty>
 8016848:	4603      	mov	r3, r0
 801684a:	2b00      	cmp	r3, #0
 801684c:	f43f af6f 	beq.w	801672e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016850:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016852:	4618      	mov	r0, r3
 8016854:	3730      	adds	r7, #48	; 0x30
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop
 801685c:	e000ed04 	.word	0xe000ed04

08016860 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b08e      	sub	sp, #56	; 0x38
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
 8016868:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801686a:	2300      	movs	r3, #0
 801686c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016872:	2300      	movs	r3, #0
 8016874:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016878:	2b00      	cmp	r3, #0
 801687a:	d10a      	bne.n	8016892 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016880:	f383 8811 	msr	BASEPRI, r3
 8016884:	f3bf 8f6f 	isb	sy
 8016888:	f3bf 8f4f 	dsb	sy
 801688c:	623b      	str	r3, [r7, #32]
}
 801688e:	bf00      	nop
 8016890:	e7fe      	b.n	8016890 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016896:	2b00      	cmp	r3, #0
 8016898:	d00a      	beq.n	80168b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801689e:	f383 8811 	msr	BASEPRI, r3
 80168a2:	f3bf 8f6f 	isb	sy
 80168a6:	f3bf 8f4f 	dsb	sy
 80168aa:	61fb      	str	r3, [r7, #28]
}
 80168ac:	bf00      	nop
 80168ae:	e7fe      	b.n	80168ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80168b0:	f001 f9b8 	bl	8017c24 <xTaskGetSchedulerState>
 80168b4:	4603      	mov	r3, r0
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d102      	bne.n	80168c0 <xQueueSemaphoreTake+0x60>
 80168ba:	683b      	ldr	r3, [r7, #0]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d101      	bne.n	80168c4 <xQueueSemaphoreTake+0x64>
 80168c0:	2301      	movs	r3, #1
 80168c2:	e000      	b.n	80168c6 <xQueueSemaphoreTake+0x66>
 80168c4:	2300      	movs	r3, #0
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d10a      	bne.n	80168e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80168ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ce:	f383 8811 	msr	BASEPRI, r3
 80168d2:	f3bf 8f6f 	isb	sy
 80168d6:	f3bf 8f4f 	dsb	sy
 80168da:	61bb      	str	r3, [r7, #24]
}
 80168dc:	bf00      	nop
 80168de:	e7fe      	b.n	80168de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80168e0:	f7ff f938 	bl	8015b54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80168e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80168ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d024      	beq.n	801693a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80168f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f2:	1e5a      	subs	r2, r3, #1
 80168f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80168f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d104      	bne.n	801690a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016900:	f001 fb06 	bl	8017f10 <pvTaskIncrementMutexHeldCount>
 8016904:	4602      	mov	r2, r0
 8016906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016908:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801690c:	691b      	ldr	r3, [r3, #16]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d00f      	beq.n	8016932 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016914:	3310      	adds	r3, #16
 8016916:	4618      	mov	r0, r3
 8016918:	f000 ffb4 	bl	8017884 <xTaskRemoveFromEventList>
 801691c:	4603      	mov	r3, r0
 801691e:	2b00      	cmp	r3, #0
 8016920:	d007      	beq.n	8016932 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016922:	4b54      	ldr	r3, [pc, #336]	; (8016a74 <xQueueSemaphoreTake+0x214>)
 8016924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016928:	601a      	str	r2, [r3, #0]
 801692a:	f3bf 8f4f 	dsb	sy
 801692e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016932:	f7ff f93f 	bl	8015bb4 <vPortExitCritical>
				return pdPASS;
 8016936:	2301      	movs	r3, #1
 8016938:	e097      	b.n	8016a6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d111      	bne.n	8016964 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016942:	2b00      	cmp	r3, #0
 8016944:	d00a      	beq.n	801695c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801694a:	f383 8811 	msr	BASEPRI, r3
 801694e:	f3bf 8f6f 	isb	sy
 8016952:	f3bf 8f4f 	dsb	sy
 8016956:	617b      	str	r3, [r7, #20]
}
 8016958:	bf00      	nop
 801695a:	e7fe      	b.n	801695a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801695c:	f7ff f92a 	bl	8015bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016960:	2300      	movs	r3, #0
 8016962:	e082      	b.n	8016a6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016966:	2b00      	cmp	r3, #0
 8016968:	d106      	bne.n	8016978 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801696a:	f107 030c 	add.w	r3, r7, #12
 801696e:	4618      	mov	r0, r3
 8016970:	f000 ffec 	bl	801794c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016974:	2301      	movs	r3, #1
 8016976:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016978:	f7ff f91c 	bl	8015bb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801697c:	f000 fd16 	bl	80173ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016980:	f7ff f8e8 	bl	8015b54 <vPortEnterCritical>
 8016984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801698a:	b25b      	sxtb	r3, r3
 801698c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016990:	d103      	bne.n	801699a <xQueueSemaphoreTake+0x13a>
 8016992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016994:	2200      	movs	r2, #0
 8016996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801699c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80169a0:	b25b      	sxtb	r3, r3
 80169a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169a6:	d103      	bne.n	80169b0 <xQueueSemaphoreTake+0x150>
 80169a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169aa:	2200      	movs	r2, #0
 80169ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80169b0:	f7ff f900 	bl	8015bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80169b4:	463a      	mov	r2, r7
 80169b6:	f107 030c 	add.w	r3, r7, #12
 80169ba:	4611      	mov	r1, r2
 80169bc:	4618      	mov	r0, r3
 80169be:	f000 ffdb 	bl	8017978 <xTaskCheckForTimeOut>
 80169c2:	4603      	mov	r3, r0
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d132      	bne.n	8016a2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80169c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80169ca:	f000 f9f2 	bl	8016db2 <prvIsQueueEmpty>
 80169ce:	4603      	mov	r3, r0
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d026      	beq.n	8016a22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80169d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d109      	bne.n	80169f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80169dc:	f7ff f8ba 	bl	8015b54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80169e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169e2:	689b      	ldr	r3, [r3, #8]
 80169e4:	4618      	mov	r0, r3
 80169e6:	f001 f93b 	bl	8017c60 <xTaskPriorityInherit>
 80169ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80169ec:	f7ff f8e2 	bl	8015bb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80169f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f2:	3324      	adds	r3, #36	; 0x24
 80169f4:	683a      	ldr	r2, [r7, #0]
 80169f6:	4611      	mov	r1, r2
 80169f8:	4618      	mov	r0, r3
 80169fa:	f000 fef3 	bl	80177e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80169fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a00:	f000 f985 	bl	8016d0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016a04:	f000 fce0 	bl	80173c8 <xTaskResumeAll>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	f47f af68 	bne.w	80168e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016a10:	4b18      	ldr	r3, [pc, #96]	; (8016a74 <xQueueSemaphoreTake+0x214>)
 8016a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a16:	601a      	str	r2, [r3, #0]
 8016a18:	f3bf 8f4f 	dsb	sy
 8016a1c:	f3bf 8f6f 	isb	sy
 8016a20:	e75e      	b.n	80168e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a24:	f000 f973 	bl	8016d0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016a28:	f000 fcce 	bl	80173c8 <xTaskResumeAll>
 8016a2c:	e758      	b.n	80168e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a30:	f000 f96d 	bl	8016d0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016a34:	f000 fcc8 	bl	80173c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a3a:	f000 f9ba 	bl	8016db2 <prvIsQueueEmpty>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	f43f af4d 	beq.w	80168e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d00d      	beq.n	8016a68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016a4c:	f7ff f882 	bl	8015b54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a52:	f000 f8b4 	bl	8016bbe <prvGetDisinheritPriorityAfterTimeout>
 8016a56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a5a:	689b      	ldr	r3, [r3, #8]
 8016a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f001 f9d4 	bl	8017e0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016a64:	f7ff f8a6 	bl	8015bb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016a68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	3738      	adds	r7, #56	; 0x38
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}
 8016a72:	bf00      	nop
 8016a74:	e000ed04 	.word	0xe000ed04

08016a78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b08e      	sub	sp, #56	; 0x38
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	60f8      	str	r0, [r7, #12]
 8016a80:	60b9      	str	r1, [r7, #8]
 8016a82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d10a      	bne.n	8016aa4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a92:	f383 8811 	msr	BASEPRI, r3
 8016a96:	f3bf 8f6f 	isb	sy
 8016a9a:	f3bf 8f4f 	dsb	sy
 8016a9e:	623b      	str	r3, [r7, #32]
}
 8016aa0:	bf00      	nop
 8016aa2:	e7fe      	b.n	8016aa2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016aa4:	68bb      	ldr	r3, [r7, #8]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d103      	bne.n	8016ab2 <xQueueReceiveFromISR+0x3a>
 8016aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d101      	bne.n	8016ab6 <xQueueReceiveFromISR+0x3e>
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	e000      	b.n	8016ab8 <xQueueReceiveFromISR+0x40>
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d10a      	bne.n	8016ad2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac0:	f383 8811 	msr	BASEPRI, r3
 8016ac4:	f3bf 8f6f 	isb	sy
 8016ac8:	f3bf 8f4f 	dsb	sy
 8016acc:	61fb      	str	r3, [r7, #28]
}
 8016ace:	bf00      	nop
 8016ad0:	e7fe      	b.n	8016ad0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016ad2:	f7ff f921 	bl	8015d18 <vPortValidateInterruptPriority>
	__asm volatile
 8016ad6:	f3ef 8211 	mrs	r2, BASEPRI
 8016ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ade:	f383 8811 	msr	BASEPRI, r3
 8016ae2:	f3bf 8f6f 	isb	sy
 8016ae6:	f3bf 8f4f 	dsb	sy
 8016aea:	61ba      	str	r2, [r7, #24]
 8016aec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016aee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016af0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016af6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d02f      	beq.n	8016b5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016b08:	68b9      	ldr	r1, [r7, #8]
 8016b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b0c:	f000 f8d9 	bl	8016cc2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b12:	1e5a      	subs	r2, r3, #1
 8016b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016b18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b20:	d112      	bne.n	8016b48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b24:	691b      	ldr	r3, [r3, #16]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d016      	beq.n	8016b58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b2c:	3310      	adds	r3, #16
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f000 fea8 	bl	8017884 <xTaskRemoveFromEventList>
 8016b34:	4603      	mov	r3, r0
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d00e      	beq.n	8016b58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d00b      	beq.n	8016b58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2201      	movs	r2, #1
 8016b44:	601a      	str	r2, [r3, #0]
 8016b46:	e007      	b.n	8016b58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b4c:	3301      	adds	r3, #1
 8016b4e:	b2db      	uxtb	r3, r3
 8016b50:	b25a      	sxtb	r2, r3
 8016b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016b58:	2301      	movs	r3, #1
 8016b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8016b5c:	e001      	b.n	8016b62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	637b      	str	r3, [r7, #52]	; 0x34
 8016b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016b66:	693b      	ldr	r3, [r7, #16]
 8016b68:	f383 8811 	msr	BASEPRI, r3
}
 8016b6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3738      	adds	r7, #56	; 0x38
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}

08016b78 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d10a      	bne.n	8016ba0 <vQueueDelete+0x28>
	__asm volatile
 8016b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b8e:	f383 8811 	msr	BASEPRI, r3
 8016b92:	f3bf 8f6f 	isb	sy
 8016b96:	f3bf 8f4f 	dsb	sy
 8016b9a:	60bb      	str	r3, [r7, #8]
}
 8016b9c:	bf00      	nop
 8016b9e:	e7fe      	b.n	8016b9e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016ba0:	68f8      	ldr	r0, [r7, #12]
 8016ba2:	f000 f95f 	bl	8016e64 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d102      	bne.n	8016bb6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016bb0:	68f8      	ldr	r0, [r7, #12]
 8016bb2:	f7fe fcd1 	bl	8015558 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016bb6:	bf00      	nop
 8016bb8:	3710      	adds	r7, #16
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}

08016bbe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016bbe:	b480      	push	{r7}
 8016bc0:	b085      	sub	sp, #20
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d006      	beq.n	8016bdc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016bd8:	60fb      	str	r3, [r7, #12]
 8016bda:	e001      	b.n	8016be0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016bdc:	2300      	movs	r3, #0
 8016bde:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016be0:	68fb      	ldr	r3, [r7, #12]
	}
 8016be2:	4618      	mov	r0, r3
 8016be4:	3714      	adds	r7, #20
 8016be6:	46bd      	mov	sp, r7
 8016be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bec:	4770      	bx	lr

08016bee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016bee:	b580      	push	{r7, lr}
 8016bf0:	b086      	sub	sp, #24
 8016bf2:	af00      	add	r7, sp, #0
 8016bf4:	60f8      	str	r0, [r7, #12]
 8016bf6:	60b9      	str	r1, [r7, #8]
 8016bf8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d10d      	bne.n	8016c28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d14d      	bne.n	8016cb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	689b      	ldr	r3, [r3, #8]
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f001 f889 	bl	8017d30 <xTaskPriorityDisinherit>
 8016c1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	2200      	movs	r2, #0
 8016c24:	609a      	str	r2, [r3, #8]
 8016c26:	e043      	b.n	8016cb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d119      	bne.n	8016c62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	6858      	ldr	r0, [r3, #4]
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c36:	461a      	mov	r2, r3
 8016c38:	68b9      	ldr	r1, [r7, #8]
 8016c3a:	f010 ffa9 	bl	8027b90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	685a      	ldr	r2, [r3, #4]
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c46:	441a      	add	r2, r3
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	685a      	ldr	r2, [r3, #4]
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	689b      	ldr	r3, [r3, #8]
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d32b      	bcc.n	8016cb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	681a      	ldr	r2, [r3, #0]
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	605a      	str	r2, [r3, #4]
 8016c60:	e026      	b.n	8016cb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	68d8      	ldr	r0, [r3, #12]
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	68b9      	ldr	r1, [r7, #8]
 8016c6e:	f010 ff8f 	bl	8027b90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	68da      	ldr	r2, [r3, #12]
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c7a:	425b      	negs	r3, r3
 8016c7c:	441a      	add	r2, r3
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	68da      	ldr	r2, [r3, #12]
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	d207      	bcs.n	8016c9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	689a      	ldr	r2, [r3, #8]
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c96:	425b      	negs	r3, r3
 8016c98:	441a      	add	r2, r3
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	2b02      	cmp	r3, #2
 8016ca2:	d105      	bne.n	8016cb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d002      	beq.n	8016cb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016caa:	693b      	ldr	r3, [r7, #16]
 8016cac:	3b01      	subs	r3, #1
 8016cae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016cb0:	693b      	ldr	r3, [r7, #16]
 8016cb2:	1c5a      	adds	r2, r3, #1
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016cb8:	697b      	ldr	r3, [r7, #20]
}
 8016cba:	4618      	mov	r0, r3
 8016cbc:	3718      	adds	r7, #24
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}

08016cc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016cc2:	b580      	push	{r7, lr}
 8016cc4:	b082      	sub	sp, #8
 8016cc6:	af00      	add	r7, sp, #0
 8016cc8:	6078      	str	r0, [r7, #4]
 8016cca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d018      	beq.n	8016d06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	68da      	ldr	r2, [r3, #12]
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cdc:	441a      	add	r2, r3
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	68da      	ldr	r2, [r3, #12]
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	689b      	ldr	r3, [r3, #8]
 8016cea:	429a      	cmp	r2, r3
 8016cec:	d303      	bcc.n	8016cf6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681a      	ldr	r2, [r3, #0]
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	68d9      	ldr	r1, [r3, #12]
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cfe:	461a      	mov	r2, r3
 8016d00:	6838      	ldr	r0, [r7, #0]
 8016d02:	f010 ff45 	bl	8027b90 <memcpy>
	}
}
 8016d06:	bf00      	nop
 8016d08:	3708      	adds	r7, #8
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}

08016d0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016d0e:	b580      	push	{r7, lr}
 8016d10:	b084      	sub	sp, #16
 8016d12:	af00      	add	r7, sp, #0
 8016d14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016d16:	f7fe ff1d 	bl	8015b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016d20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016d22:	e011      	b.n	8016d48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d012      	beq.n	8016d52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	3324      	adds	r3, #36	; 0x24
 8016d30:	4618      	mov	r0, r3
 8016d32:	f000 fda7 	bl	8017884 <xTaskRemoveFromEventList>
 8016d36:	4603      	mov	r3, r0
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d001      	beq.n	8016d40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016d3c:	f000 fe7e 	bl	8017a3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016d40:	7bfb      	ldrb	r3, [r7, #15]
 8016d42:	3b01      	subs	r3, #1
 8016d44:	b2db      	uxtb	r3, r3
 8016d46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	dce9      	bgt.n	8016d24 <prvUnlockQueue+0x16>
 8016d50:	e000      	b.n	8016d54 <prvUnlockQueue+0x46>
					break;
 8016d52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	22ff      	movs	r2, #255	; 0xff
 8016d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016d5c:	f7fe ff2a 	bl	8015bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016d60:	f7fe fef8 	bl	8015b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016d6c:	e011      	b.n	8016d92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	691b      	ldr	r3, [r3, #16]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d012      	beq.n	8016d9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	3310      	adds	r3, #16
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	f000 fd82 	bl	8017884 <xTaskRemoveFromEventList>
 8016d80:	4603      	mov	r3, r0
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d001      	beq.n	8016d8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016d86:	f000 fe59 	bl	8017a3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016d8a:	7bbb      	ldrb	r3, [r7, #14]
 8016d8c:	3b01      	subs	r3, #1
 8016d8e:	b2db      	uxtb	r3, r3
 8016d90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016d92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	dce9      	bgt.n	8016d6e <prvUnlockQueue+0x60>
 8016d9a:	e000      	b.n	8016d9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016d9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	22ff      	movs	r2, #255	; 0xff
 8016da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016da6:	f7fe ff05 	bl	8015bb4 <vPortExitCritical>
}
 8016daa:	bf00      	nop
 8016dac:	3710      	adds	r7, #16
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}

08016db2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016db2:	b580      	push	{r7, lr}
 8016db4:	b084      	sub	sp, #16
 8016db6:	af00      	add	r7, sp, #0
 8016db8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016dba:	f7fe fecb 	bl	8015b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d102      	bne.n	8016dcc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	60fb      	str	r3, [r7, #12]
 8016dca:	e001      	b.n	8016dd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016dcc:	2300      	movs	r3, #0
 8016dce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016dd0:	f7fe fef0 	bl	8015bb4 <vPortExitCritical>

	return xReturn;
 8016dd4:	68fb      	ldr	r3, [r7, #12]
}
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	3710      	adds	r7, #16
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}

08016dde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016dde:	b580      	push	{r7, lr}
 8016de0:	b084      	sub	sp, #16
 8016de2:	af00      	add	r7, sp, #0
 8016de4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016de6:	f7fe feb5 	bl	8015b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d102      	bne.n	8016dfc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016df6:	2301      	movs	r3, #1
 8016df8:	60fb      	str	r3, [r7, #12]
 8016dfa:	e001      	b.n	8016e00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016e00:	f7fe fed8 	bl	8015bb4 <vPortExitCritical>

	return xReturn;
 8016e04:	68fb      	ldr	r3, [r7, #12]
}
 8016e06:	4618      	mov	r0, r3
 8016e08:	3710      	adds	r7, #16
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd80      	pop	{r7, pc}
	...

08016e10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016e10:	b480      	push	{r7}
 8016e12:	b085      	sub	sp, #20
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
 8016e18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	60fb      	str	r3, [r7, #12]
 8016e1e:	e014      	b.n	8016e4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016e20:	4a0f      	ldr	r2, [pc, #60]	; (8016e60 <vQueueAddToRegistry+0x50>)
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d10b      	bne.n	8016e44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016e2c:	490c      	ldr	r1, [pc, #48]	; (8016e60 <vQueueAddToRegistry+0x50>)
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	683a      	ldr	r2, [r7, #0]
 8016e32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016e36:	4a0a      	ldr	r2, [pc, #40]	; (8016e60 <vQueueAddToRegistry+0x50>)
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	00db      	lsls	r3, r3, #3
 8016e3c:	4413      	add	r3, r2
 8016e3e:	687a      	ldr	r2, [r7, #4]
 8016e40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016e42:	e006      	b.n	8016e52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	3301      	adds	r3, #1
 8016e48:	60fb      	str	r3, [r7, #12]
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	2b07      	cmp	r3, #7
 8016e4e:	d9e7      	bls.n	8016e20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016e50:	bf00      	nop
 8016e52:	bf00      	nop
 8016e54:	3714      	adds	r7, #20
 8016e56:	46bd      	mov	sp, r7
 8016e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5c:	4770      	bx	lr
 8016e5e:	bf00      	nop
 8016e60:	24024bac 	.word	0x24024bac

08016e64 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016e64:	b480      	push	{r7}
 8016e66:	b085      	sub	sp, #20
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	60fb      	str	r3, [r7, #12]
 8016e70:	e016      	b.n	8016ea0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016e72:	4a10      	ldr	r2, [pc, #64]	; (8016eb4 <vQueueUnregisterQueue+0x50>)
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	00db      	lsls	r3, r3, #3
 8016e78:	4413      	add	r3, r2
 8016e7a:	685b      	ldr	r3, [r3, #4]
 8016e7c:	687a      	ldr	r2, [r7, #4]
 8016e7e:	429a      	cmp	r2, r3
 8016e80:	d10b      	bne.n	8016e9a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016e82:	4a0c      	ldr	r2, [pc, #48]	; (8016eb4 <vQueueUnregisterQueue+0x50>)
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	2100      	movs	r1, #0
 8016e88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016e8c:	4a09      	ldr	r2, [pc, #36]	; (8016eb4 <vQueueUnregisterQueue+0x50>)
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	00db      	lsls	r3, r3, #3
 8016e92:	4413      	add	r3, r2
 8016e94:	2200      	movs	r2, #0
 8016e96:	605a      	str	r2, [r3, #4]
				break;
 8016e98:	e006      	b.n	8016ea8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	3301      	adds	r3, #1
 8016e9e:	60fb      	str	r3, [r7, #12]
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	2b07      	cmp	r3, #7
 8016ea4:	d9e5      	bls.n	8016e72 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016ea6:	bf00      	nop
 8016ea8:	bf00      	nop
 8016eaa:	3714      	adds	r7, #20
 8016eac:	46bd      	mov	sp, r7
 8016eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb2:	4770      	bx	lr
 8016eb4:	24024bac 	.word	0x24024bac

08016eb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b086      	sub	sp, #24
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	60f8      	str	r0, [r7, #12]
 8016ec0:	60b9      	str	r1, [r7, #8]
 8016ec2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016ec8:	f7fe fe44 	bl	8015b54 <vPortEnterCritical>
 8016ecc:	697b      	ldr	r3, [r7, #20]
 8016ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ed2:	b25b      	sxtb	r3, r3
 8016ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ed8:	d103      	bne.n	8016ee2 <vQueueWaitForMessageRestricted+0x2a>
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	2200      	movs	r2, #0
 8016ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016ee2:	697b      	ldr	r3, [r7, #20]
 8016ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016ee8:	b25b      	sxtb	r3, r3
 8016eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eee:	d103      	bne.n	8016ef8 <vQueueWaitForMessageRestricted+0x40>
 8016ef0:	697b      	ldr	r3, [r7, #20]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016ef8:	f7fe fe5c 	bl	8015bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016efc:	697b      	ldr	r3, [r7, #20]
 8016efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d106      	bne.n	8016f12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016f04:	697b      	ldr	r3, [r7, #20]
 8016f06:	3324      	adds	r3, #36	; 0x24
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	68b9      	ldr	r1, [r7, #8]
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f000 fc8d 	bl	801782c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016f12:	6978      	ldr	r0, [r7, #20]
 8016f14:	f7ff fefb 	bl	8016d0e <prvUnlockQueue>
	}
 8016f18:	bf00      	nop
 8016f1a:	3718      	adds	r7, #24
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd80      	pop	{r7, pc}

08016f20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b08e      	sub	sp, #56	; 0x38
 8016f24:	af04      	add	r7, sp, #16
 8016f26:	60f8      	str	r0, [r7, #12]
 8016f28:	60b9      	str	r1, [r7, #8]
 8016f2a:	607a      	str	r2, [r7, #4]
 8016f2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d10a      	bne.n	8016f4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8016f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f38:	f383 8811 	msr	BASEPRI, r3
 8016f3c:	f3bf 8f6f 	isb	sy
 8016f40:	f3bf 8f4f 	dsb	sy
 8016f44:	623b      	str	r3, [r7, #32]
}
 8016f46:	bf00      	nop
 8016f48:	e7fe      	b.n	8016f48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d10a      	bne.n	8016f66 <xTaskCreateStatic+0x46>
	__asm volatile
 8016f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f54:	f383 8811 	msr	BASEPRI, r3
 8016f58:	f3bf 8f6f 	isb	sy
 8016f5c:	f3bf 8f4f 	dsb	sy
 8016f60:	61fb      	str	r3, [r7, #28]
}
 8016f62:	bf00      	nop
 8016f64:	e7fe      	b.n	8016f64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016f66:	2360      	movs	r3, #96	; 0x60
 8016f68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016f6a:	693b      	ldr	r3, [r7, #16]
 8016f6c:	2b60      	cmp	r3, #96	; 0x60
 8016f6e:	d00a      	beq.n	8016f86 <xTaskCreateStatic+0x66>
	__asm volatile
 8016f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f74:	f383 8811 	msr	BASEPRI, r3
 8016f78:	f3bf 8f6f 	isb	sy
 8016f7c:	f3bf 8f4f 	dsb	sy
 8016f80:	61bb      	str	r3, [r7, #24]
}
 8016f82:	bf00      	nop
 8016f84:	e7fe      	b.n	8016f84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016f86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d01e      	beq.n	8016fcc <xTaskCreateStatic+0xac>
 8016f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d01b      	beq.n	8016fcc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016f9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fa0:	2202      	movs	r2, #2
 8016fa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	9303      	str	r3, [sp, #12]
 8016faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fac:	9302      	str	r3, [sp, #8]
 8016fae:	f107 0314 	add.w	r3, r7, #20
 8016fb2:	9301      	str	r3, [sp, #4]
 8016fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb6:	9300      	str	r3, [sp, #0]
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	687a      	ldr	r2, [r7, #4]
 8016fbc:	68b9      	ldr	r1, [r7, #8]
 8016fbe:	68f8      	ldr	r0, [r7, #12]
 8016fc0:	f000 f850 	bl	8017064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016fc6:	f000 f8df 	bl	8017188 <prvAddNewTaskToReadyList>
 8016fca:	e001      	b.n	8016fd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016fcc:	2300      	movs	r3, #0
 8016fce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016fd0:	697b      	ldr	r3, [r7, #20]
	}
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	3728      	adds	r7, #40	; 0x28
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	bd80      	pop	{r7, pc}

08016fda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016fda:	b580      	push	{r7, lr}
 8016fdc:	b08c      	sub	sp, #48	; 0x30
 8016fde:	af04      	add	r7, sp, #16
 8016fe0:	60f8      	str	r0, [r7, #12]
 8016fe2:	60b9      	str	r1, [r7, #8]
 8016fe4:	603b      	str	r3, [r7, #0]
 8016fe6:	4613      	mov	r3, r2
 8016fe8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016fea:	88fb      	ldrh	r3, [r7, #6]
 8016fec:	009b      	lsls	r3, r3, #2
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f7fe f9e6 	bl	80153c0 <pvPortMalloc>
 8016ff4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016ff6:	697b      	ldr	r3, [r7, #20]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d00e      	beq.n	801701a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016ffc:	2060      	movs	r0, #96	; 0x60
 8016ffe:	f7fe f9df 	bl	80153c0 <pvPortMalloc>
 8017002:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017004:	69fb      	ldr	r3, [r7, #28]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d003      	beq.n	8017012 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801700a:	69fb      	ldr	r3, [r7, #28]
 801700c:	697a      	ldr	r2, [r7, #20]
 801700e:	631a      	str	r2, [r3, #48]	; 0x30
 8017010:	e005      	b.n	801701e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017012:	6978      	ldr	r0, [r7, #20]
 8017014:	f7fe faa0 	bl	8015558 <vPortFree>
 8017018:	e001      	b.n	801701e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801701a:	2300      	movs	r3, #0
 801701c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801701e:	69fb      	ldr	r3, [r7, #28]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d017      	beq.n	8017054 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017024:	69fb      	ldr	r3, [r7, #28]
 8017026:	2200      	movs	r2, #0
 8017028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801702c:	88fa      	ldrh	r2, [r7, #6]
 801702e:	2300      	movs	r3, #0
 8017030:	9303      	str	r3, [sp, #12]
 8017032:	69fb      	ldr	r3, [r7, #28]
 8017034:	9302      	str	r3, [sp, #8]
 8017036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017038:	9301      	str	r3, [sp, #4]
 801703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801703c:	9300      	str	r3, [sp, #0]
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	68b9      	ldr	r1, [r7, #8]
 8017042:	68f8      	ldr	r0, [r7, #12]
 8017044:	f000 f80e 	bl	8017064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017048:	69f8      	ldr	r0, [r7, #28]
 801704a:	f000 f89d 	bl	8017188 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801704e:	2301      	movs	r3, #1
 8017050:	61bb      	str	r3, [r7, #24]
 8017052:	e002      	b.n	801705a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017054:	f04f 33ff 	mov.w	r3, #4294967295
 8017058:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801705a:	69bb      	ldr	r3, [r7, #24]
	}
 801705c:	4618      	mov	r0, r3
 801705e:	3720      	adds	r7, #32
 8017060:	46bd      	mov	sp, r7
 8017062:	bd80      	pop	{r7, pc}

08017064 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b088      	sub	sp, #32
 8017068:	af00      	add	r7, sp, #0
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	607a      	str	r2, [r7, #4]
 8017070:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017074:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	009b      	lsls	r3, r3, #2
 801707a:	461a      	mov	r2, r3
 801707c:	21a5      	movs	r1, #165	; 0xa5
 801707e:	f010 fd95 	bl	8027bac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017086:	6879      	ldr	r1, [r7, #4]
 8017088:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801708c:	440b      	add	r3, r1
 801708e:	009b      	lsls	r3, r3, #2
 8017090:	4413      	add	r3, r2
 8017092:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017094:	69bb      	ldr	r3, [r7, #24]
 8017096:	f023 0307 	bic.w	r3, r3, #7
 801709a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801709c:	69bb      	ldr	r3, [r7, #24]
 801709e:	f003 0307 	and.w	r3, r3, #7
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d00a      	beq.n	80170bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80170a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170aa:	f383 8811 	msr	BASEPRI, r3
 80170ae:	f3bf 8f6f 	isb	sy
 80170b2:	f3bf 8f4f 	dsb	sy
 80170b6:	617b      	str	r3, [r7, #20]
}
 80170b8:	bf00      	nop
 80170ba:	e7fe      	b.n	80170ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d01f      	beq.n	8017102 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80170c2:	2300      	movs	r3, #0
 80170c4:	61fb      	str	r3, [r7, #28]
 80170c6:	e012      	b.n	80170ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80170c8:	68ba      	ldr	r2, [r7, #8]
 80170ca:	69fb      	ldr	r3, [r7, #28]
 80170cc:	4413      	add	r3, r2
 80170ce:	7819      	ldrb	r1, [r3, #0]
 80170d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170d2:	69fb      	ldr	r3, [r7, #28]
 80170d4:	4413      	add	r3, r2
 80170d6:	3334      	adds	r3, #52	; 0x34
 80170d8:	460a      	mov	r2, r1
 80170da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80170dc:	68ba      	ldr	r2, [r7, #8]
 80170de:	69fb      	ldr	r3, [r7, #28]
 80170e0:	4413      	add	r3, r2
 80170e2:	781b      	ldrb	r3, [r3, #0]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d006      	beq.n	80170f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80170e8:	69fb      	ldr	r3, [r7, #28]
 80170ea:	3301      	adds	r3, #1
 80170ec:	61fb      	str	r3, [r7, #28]
 80170ee:	69fb      	ldr	r3, [r7, #28]
 80170f0:	2b0f      	cmp	r3, #15
 80170f2:	d9e9      	bls.n	80170c8 <prvInitialiseNewTask+0x64>
 80170f4:	e000      	b.n	80170f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80170f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80170f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170fa:	2200      	movs	r2, #0
 80170fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017100:	e003      	b.n	801710a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017104:	2200      	movs	r2, #0
 8017106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801710c:	2b37      	cmp	r3, #55	; 0x37
 801710e:	d901      	bls.n	8017114 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017110:	2337      	movs	r3, #55	; 0x37
 8017112:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017118:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801711c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801711e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017122:	2200      	movs	r2, #0
 8017124:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017128:	3304      	adds	r3, #4
 801712a:	4618      	mov	r0, r3
 801712c:	f7fe fb54 	bl	80157d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017132:	3318      	adds	r3, #24
 8017134:	4618      	mov	r0, r3
 8017136:	f7fe fb4f 	bl	80157d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801713c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801713e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017142:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017148:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801714c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801714e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017152:	2200      	movs	r2, #0
 8017154:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017158:	2200      	movs	r2, #0
 801715a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801715e:	2200      	movs	r2, #0
 8017160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017164:	683a      	ldr	r2, [r7, #0]
 8017166:	68f9      	ldr	r1, [r7, #12]
 8017168:	69b8      	ldr	r0, [r7, #24]
 801716a:	f7fe fbc9 	bl	8015900 <pxPortInitialiseStack>
 801716e:	4602      	mov	r2, r0
 8017170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017172:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017176:	2b00      	cmp	r3, #0
 8017178:	d002      	beq.n	8017180 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801717e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017180:	bf00      	nop
 8017182:	3720      	adds	r7, #32
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}

08017188 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b082      	sub	sp, #8
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017190:	f7fe fce0 	bl	8015b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017194:	4b2d      	ldr	r3, [pc, #180]	; (801724c <prvAddNewTaskToReadyList+0xc4>)
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	3301      	adds	r3, #1
 801719a:	4a2c      	ldr	r2, [pc, #176]	; (801724c <prvAddNewTaskToReadyList+0xc4>)
 801719c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801719e:	4b2c      	ldr	r3, [pc, #176]	; (8017250 <prvAddNewTaskToReadyList+0xc8>)
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d109      	bne.n	80171ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80171a6:	4a2a      	ldr	r2, [pc, #168]	; (8017250 <prvAddNewTaskToReadyList+0xc8>)
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80171ac:	4b27      	ldr	r3, [pc, #156]	; (801724c <prvAddNewTaskToReadyList+0xc4>)
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	2b01      	cmp	r3, #1
 80171b2:	d110      	bne.n	80171d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80171b4:	f000 fc68 	bl	8017a88 <prvInitialiseTaskLists>
 80171b8:	e00d      	b.n	80171d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80171ba:	4b26      	ldr	r3, [pc, #152]	; (8017254 <prvAddNewTaskToReadyList+0xcc>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d109      	bne.n	80171d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80171c2:	4b23      	ldr	r3, [pc, #140]	; (8017250 <prvAddNewTaskToReadyList+0xc8>)
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d802      	bhi.n	80171d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80171d0:	4a1f      	ldr	r2, [pc, #124]	; (8017250 <prvAddNewTaskToReadyList+0xc8>)
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80171d6:	4b20      	ldr	r3, [pc, #128]	; (8017258 <prvAddNewTaskToReadyList+0xd0>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	3301      	adds	r3, #1
 80171dc:	4a1e      	ldr	r2, [pc, #120]	; (8017258 <prvAddNewTaskToReadyList+0xd0>)
 80171de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80171e0:	4b1d      	ldr	r3, [pc, #116]	; (8017258 <prvAddNewTaskToReadyList+0xd0>)
 80171e2:	681a      	ldr	r2, [r3, #0]
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171ec:	4b1b      	ldr	r3, [pc, #108]	; (801725c <prvAddNewTaskToReadyList+0xd4>)
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	429a      	cmp	r2, r3
 80171f2:	d903      	bls.n	80171fc <prvAddNewTaskToReadyList+0x74>
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171f8:	4a18      	ldr	r2, [pc, #96]	; (801725c <prvAddNewTaskToReadyList+0xd4>)
 80171fa:	6013      	str	r3, [r2, #0]
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017200:	4613      	mov	r3, r2
 8017202:	009b      	lsls	r3, r3, #2
 8017204:	4413      	add	r3, r2
 8017206:	009b      	lsls	r3, r3, #2
 8017208:	4a15      	ldr	r2, [pc, #84]	; (8017260 <prvAddNewTaskToReadyList+0xd8>)
 801720a:	441a      	add	r2, r3
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	3304      	adds	r3, #4
 8017210:	4619      	mov	r1, r3
 8017212:	4610      	mov	r0, r2
 8017214:	f7fe faed 	bl	80157f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017218:	f7fe fccc 	bl	8015bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801721c:	4b0d      	ldr	r3, [pc, #52]	; (8017254 <prvAddNewTaskToReadyList+0xcc>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d00e      	beq.n	8017242 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017224:	4b0a      	ldr	r3, [pc, #40]	; (8017250 <prvAddNewTaskToReadyList+0xc8>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801722e:	429a      	cmp	r2, r3
 8017230:	d207      	bcs.n	8017242 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017232:	4b0c      	ldr	r3, [pc, #48]	; (8017264 <prvAddNewTaskToReadyList+0xdc>)
 8017234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017238:	601a      	str	r2, [r3, #0]
 801723a:	f3bf 8f4f 	dsb	sy
 801723e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017242:	bf00      	nop
 8017244:	3708      	adds	r7, #8
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
 801724a:	bf00      	nop
 801724c:	240250c0 	.word	0x240250c0
 8017250:	24024bec 	.word	0x24024bec
 8017254:	240250cc 	.word	0x240250cc
 8017258:	240250dc 	.word	0x240250dc
 801725c:	240250c8 	.word	0x240250c8
 8017260:	24024bf0 	.word	0x24024bf0
 8017264:	e000ed04 	.word	0xe000ed04

08017268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017268:	b580      	push	{r7, lr}
 801726a:	b084      	sub	sp, #16
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017270:	2300      	movs	r3, #0
 8017272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d017      	beq.n	80172aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801727a:	4b13      	ldr	r3, [pc, #76]	; (80172c8 <vTaskDelay+0x60>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d00a      	beq.n	8017298 <vTaskDelay+0x30>
	__asm volatile
 8017282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017286:	f383 8811 	msr	BASEPRI, r3
 801728a:	f3bf 8f6f 	isb	sy
 801728e:	f3bf 8f4f 	dsb	sy
 8017292:	60bb      	str	r3, [r7, #8]
}
 8017294:	bf00      	nop
 8017296:	e7fe      	b.n	8017296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017298:	f000 f888 	bl	80173ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801729c:	2100      	movs	r1, #0
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f000 fe4a 	bl	8017f38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80172a4:	f000 f890 	bl	80173c8 <xTaskResumeAll>
 80172a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d107      	bne.n	80172c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80172b0:	4b06      	ldr	r3, [pc, #24]	; (80172cc <vTaskDelay+0x64>)
 80172b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172b6:	601a      	str	r2, [r3, #0]
 80172b8:	f3bf 8f4f 	dsb	sy
 80172bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80172c0:	bf00      	nop
 80172c2:	3710      	adds	r7, #16
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}
 80172c8:	240250e8 	.word	0x240250e8
 80172cc:	e000ed04 	.word	0xe000ed04

080172d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b08a      	sub	sp, #40	; 0x28
 80172d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80172d6:	2300      	movs	r3, #0
 80172d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80172da:	2300      	movs	r3, #0
 80172dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80172de:	463a      	mov	r2, r7
 80172e0:	1d39      	adds	r1, r7, #4
 80172e2:	f107 0308 	add.w	r3, r7, #8
 80172e6:	4618      	mov	r0, r3
 80172e8:	f7fe f836 	bl	8015358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80172ec:	6839      	ldr	r1, [r7, #0]
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	68ba      	ldr	r2, [r7, #8]
 80172f2:	9202      	str	r2, [sp, #8]
 80172f4:	9301      	str	r3, [sp, #4]
 80172f6:	2300      	movs	r3, #0
 80172f8:	9300      	str	r3, [sp, #0]
 80172fa:	2300      	movs	r3, #0
 80172fc:	460a      	mov	r2, r1
 80172fe:	4924      	ldr	r1, [pc, #144]	; (8017390 <vTaskStartScheduler+0xc0>)
 8017300:	4824      	ldr	r0, [pc, #144]	; (8017394 <vTaskStartScheduler+0xc4>)
 8017302:	f7ff fe0d 	bl	8016f20 <xTaskCreateStatic>
 8017306:	4603      	mov	r3, r0
 8017308:	4a23      	ldr	r2, [pc, #140]	; (8017398 <vTaskStartScheduler+0xc8>)
 801730a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801730c:	4b22      	ldr	r3, [pc, #136]	; (8017398 <vTaskStartScheduler+0xc8>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d002      	beq.n	801731a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017314:	2301      	movs	r3, #1
 8017316:	617b      	str	r3, [r7, #20]
 8017318:	e001      	b.n	801731e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801731a:	2300      	movs	r3, #0
 801731c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801731e:	697b      	ldr	r3, [r7, #20]
 8017320:	2b01      	cmp	r3, #1
 8017322:	d102      	bne.n	801732a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017324:	f000 fe5c 	bl	8017fe0 <xTimerCreateTimerTask>
 8017328:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801732a:	697b      	ldr	r3, [r7, #20]
 801732c:	2b01      	cmp	r3, #1
 801732e:	d11c      	bne.n	801736a <vTaskStartScheduler+0x9a>
	__asm volatile
 8017330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017334:	f383 8811 	msr	BASEPRI, r3
 8017338:	f3bf 8f6f 	isb	sy
 801733c:	f3bf 8f4f 	dsb	sy
 8017340:	613b      	str	r3, [r7, #16]
}
 8017342:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017344:	4b15      	ldr	r3, [pc, #84]	; (801739c <vTaskStartScheduler+0xcc>)
 8017346:	f04f 32ff 	mov.w	r2, #4294967295
 801734a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801734c:	4b14      	ldr	r3, [pc, #80]	; (80173a0 <vTaskStartScheduler+0xd0>)
 801734e:	2201      	movs	r2, #1
 8017350:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017352:	4b14      	ldr	r3, [pc, #80]	; (80173a4 <vTaskStartScheduler+0xd4>)
 8017354:	2200      	movs	r2, #0
 8017356:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8017358:	4b13      	ldr	r3, [pc, #76]	; (80173a8 <vTaskStartScheduler+0xd8>)
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	2100      	movs	r1, #0
 801735e:	4618      	mov	r0, r3
 8017360:	f000 f9b6 	bl	80176d0 <xTaskCallApplicationTaskHook>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017364:	f7fe fb54 	bl	8015a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017368:	e00e      	b.n	8017388 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801736a:	697b      	ldr	r3, [r7, #20]
 801736c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017370:	d10a      	bne.n	8017388 <vTaskStartScheduler+0xb8>
	__asm volatile
 8017372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017376:	f383 8811 	msr	BASEPRI, r3
 801737a:	f3bf 8f6f 	isb	sy
 801737e:	f3bf 8f4f 	dsb	sy
 8017382:	60fb      	str	r3, [r7, #12]
}
 8017384:	bf00      	nop
 8017386:	e7fe      	b.n	8017386 <vTaskStartScheduler+0xb6>
}
 8017388:	bf00      	nop
 801738a:	3718      	adds	r7, #24
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}
 8017390:	0802adfc 	.word	0x0802adfc
 8017394:	08017a55 	.word	0x08017a55
 8017398:	240250e4 	.word	0x240250e4
 801739c:	240250e0 	.word	0x240250e0
 80173a0:	240250cc 	.word	0x240250cc
 80173a4:	240250c4 	.word	0x240250c4
 80173a8:	24024bec 	.word	0x24024bec

080173ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80173ac:	b480      	push	{r7}
 80173ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80173b0:	4b04      	ldr	r3, [pc, #16]	; (80173c4 <vTaskSuspendAll+0x18>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	3301      	adds	r3, #1
 80173b6:	4a03      	ldr	r2, [pc, #12]	; (80173c4 <vTaskSuspendAll+0x18>)
 80173b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80173ba:	bf00      	nop
 80173bc:	46bd      	mov	sp, r7
 80173be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c2:	4770      	bx	lr
 80173c4:	240250e8 	.word	0x240250e8

080173c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b084      	sub	sp, #16
 80173cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80173ce:	2300      	movs	r3, #0
 80173d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80173d2:	2300      	movs	r3, #0
 80173d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80173d6:	4b42      	ldr	r3, [pc, #264]	; (80174e0 <xTaskResumeAll+0x118>)
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d10a      	bne.n	80173f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80173de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173e2:	f383 8811 	msr	BASEPRI, r3
 80173e6:	f3bf 8f6f 	isb	sy
 80173ea:	f3bf 8f4f 	dsb	sy
 80173ee:	603b      	str	r3, [r7, #0]
}
 80173f0:	bf00      	nop
 80173f2:	e7fe      	b.n	80173f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80173f4:	f7fe fbae 	bl	8015b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80173f8:	4b39      	ldr	r3, [pc, #228]	; (80174e0 <xTaskResumeAll+0x118>)
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	3b01      	subs	r3, #1
 80173fe:	4a38      	ldr	r2, [pc, #224]	; (80174e0 <xTaskResumeAll+0x118>)
 8017400:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017402:	4b37      	ldr	r3, [pc, #220]	; (80174e0 <xTaskResumeAll+0x118>)
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d162      	bne.n	80174d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801740a:	4b36      	ldr	r3, [pc, #216]	; (80174e4 <xTaskResumeAll+0x11c>)
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d05e      	beq.n	80174d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017412:	e02f      	b.n	8017474 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017414:	4b34      	ldr	r3, [pc, #208]	; (80174e8 <xTaskResumeAll+0x120>)
 8017416:	68db      	ldr	r3, [r3, #12]
 8017418:	68db      	ldr	r3, [r3, #12]
 801741a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	3318      	adds	r3, #24
 8017420:	4618      	mov	r0, r3
 8017422:	f7fe fa43 	bl	80158ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	3304      	adds	r3, #4
 801742a:	4618      	mov	r0, r3
 801742c:	f7fe fa3e 	bl	80158ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017434:	4b2d      	ldr	r3, [pc, #180]	; (80174ec <xTaskResumeAll+0x124>)
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	429a      	cmp	r2, r3
 801743a:	d903      	bls.n	8017444 <xTaskResumeAll+0x7c>
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017440:	4a2a      	ldr	r2, [pc, #168]	; (80174ec <xTaskResumeAll+0x124>)
 8017442:	6013      	str	r3, [r2, #0]
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017448:	4613      	mov	r3, r2
 801744a:	009b      	lsls	r3, r3, #2
 801744c:	4413      	add	r3, r2
 801744e:	009b      	lsls	r3, r3, #2
 8017450:	4a27      	ldr	r2, [pc, #156]	; (80174f0 <xTaskResumeAll+0x128>)
 8017452:	441a      	add	r2, r3
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	3304      	adds	r3, #4
 8017458:	4619      	mov	r1, r3
 801745a:	4610      	mov	r0, r2
 801745c:	f7fe f9c9 	bl	80157f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017464:	4b23      	ldr	r3, [pc, #140]	; (80174f4 <xTaskResumeAll+0x12c>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801746a:	429a      	cmp	r2, r3
 801746c:	d302      	bcc.n	8017474 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801746e:	4b22      	ldr	r3, [pc, #136]	; (80174f8 <xTaskResumeAll+0x130>)
 8017470:	2201      	movs	r2, #1
 8017472:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017474:	4b1c      	ldr	r3, [pc, #112]	; (80174e8 <xTaskResumeAll+0x120>)
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d1cb      	bne.n	8017414 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d001      	beq.n	8017486 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017482:	f000 fb9f 	bl	8017bc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017486:	4b1d      	ldr	r3, [pc, #116]	; (80174fc <xTaskResumeAll+0x134>)
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d010      	beq.n	80174b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017492:	f000 f847 	bl	8017524 <xTaskIncrementTick>
 8017496:	4603      	mov	r3, r0
 8017498:	2b00      	cmp	r3, #0
 801749a:	d002      	beq.n	80174a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801749c:	4b16      	ldr	r3, [pc, #88]	; (80174f8 <xTaskResumeAll+0x130>)
 801749e:	2201      	movs	r2, #1
 80174a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	3b01      	subs	r3, #1
 80174a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d1f1      	bne.n	8017492 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80174ae:	4b13      	ldr	r3, [pc, #76]	; (80174fc <xTaskResumeAll+0x134>)
 80174b0:	2200      	movs	r2, #0
 80174b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80174b4:	4b10      	ldr	r3, [pc, #64]	; (80174f8 <xTaskResumeAll+0x130>)
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d009      	beq.n	80174d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80174bc:	2301      	movs	r3, #1
 80174be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80174c0:	4b0f      	ldr	r3, [pc, #60]	; (8017500 <xTaskResumeAll+0x138>)
 80174c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174c6:	601a      	str	r2, [r3, #0]
 80174c8:	f3bf 8f4f 	dsb	sy
 80174cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80174d0:	f7fe fb70 	bl	8015bb4 <vPortExitCritical>

	return xAlreadyYielded;
 80174d4:	68bb      	ldr	r3, [r7, #8]
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	3710      	adds	r7, #16
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}
 80174de:	bf00      	nop
 80174e0:	240250e8 	.word	0x240250e8
 80174e4:	240250c0 	.word	0x240250c0
 80174e8:	24025080 	.word	0x24025080
 80174ec:	240250c8 	.word	0x240250c8
 80174f0:	24024bf0 	.word	0x24024bf0
 80174f4:	24024bec 	.word	0x24024bec
 80174f8:	240250d4 	.word	0x240250d4
 80174fc:	240250d0 	.word	0x240250d0
 8017500:	e000ed04 	.word	0xe000ed04

08017504 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017504:	b480      	push	{r7}
 8017506:	b083      	sub	sp, #12
 8017508:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801750a:	4b05      	ldr	r3, [pc, #20]	; (8017520 <xTaskGetTickCount+0x1c>)
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017510:	687b      	ldr	r3, [r7, #4]
}
 8017512:	4618      	mov	r0, r3
 8017514:	370c      	adds	r7, #12
 8017516:	46bd      	mov	sp, r7
 8017518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751c:	4770      	bx	lr
 801751e:	bf00      	nop
 8017520:	240250c4 	.word	0x240250c4

08017524 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b086      	sub	sp, #24
 8017528:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801752a:	2300      	movs	r3, #0
 801752c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801752e:	4b4f      	ldr	r3, [pc, #316]	; (801766c <xTaskIncrementTick+0x148>)
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	2b00      	cmp	r3, #0
 8017534:	f040 808f 	bne.w	8017656 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017538:	4b4d      	ldr	r3, [pc, #308]	; (8017670 <xTaskIncrementTick+0x14c>)
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	3301      	adds	r3, #1
 801753e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017540:	4a4b      	ldr	r2, [pc, #300]	; (8017670 <xTaskIncrementTick+0x14c>)
 8017542:	693b      	ldr	r3, [r7, #16]
 8017544:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017546:	693b      	ldr	r3, [r7, #16]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d120      	bne.n	801758e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801754c:	4b49      	ldr	r3, [pc, #292]	; (8017674 <xTaskIncrementTick+0x150>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d00a      	beq.n	801756c <xTaskIncrementTick+0x48>
	__asm volatile
 8017556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801755a:	f383 8811 	msr	BASEPRI, r3
 801755e:	f3bf 8f6f 	isb	sy
 8017562:	f3bf 8f4f 	dsb	sy
 8017566:	603b      	str	r3, [r7, #0]
}
 8017568:	bf00      	nop
 801756a:	e7fe      	b.n	801756a <xTaskIncrementTick+0x46>
 801756c:	4b41      	ldr	r3, [pc, #260]	; (8017674 <xTaskIncrementTick+0x150>)
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	60fb      	str	r3, [r7, #12]
 8017572:	4b41      	ldr	r3, [pc, #260]	; (8017678 <xTaskIncrementTick+0x154>)
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	4a3f      	ldr	r2, [pc, #252]	; (8017674 <xTaskIncrementTick+0x150>)
 8017578:	6013      	str	r3, [r2, #0]
 801757a:	4a3f      	ldr	r2, [pc, #252]	; (8017678 <xTaskIncrementTick+0x154>)
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	6013      	str	r3, [r2, #0]
 8017580:	4b3e      	ldr	r3, [pc, #248]	; (801767c <xTaskIncrementTick+0x158>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	3301      	adds	r3, #1
 8017586:	4a3d      	ldr	r2, [pc, #244]	; (801767c <xTaskIncrementTick+0x158>)
 8017588:	6013      	str	r3, [r2, #0]
 801758a:	f000 fb1b 	bl	8017bc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801758e:	4b3c      	ldr	r3, [pc, #240]	; (8017680 <xTaskIncrementTick+0x15c>)
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	693a      	ldr	r2, [r7, #16]
 8017594:	429a      	cmp	r2, r3
 8017596:	d349      	bcc.n	801762c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017598:	4b36      	ldr	r3, [pc, #216]	; (8017674 <xTaskIncrementTick+0x150>)
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d104      	bne.n	80175ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80175a2:	4b37      	ldr	r3, [pc, #220]	; (8017680 <xTaskIncrementTick+0x15c>)
 80175a4:	f04f 32ff 	mov.w	r2, #4294967295
 80175a8:	601a      	str	r2, [r3, #0]
					break;
 80175aa:	e03f      	b.n	801762c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175ac:	4b31      	ldr	r3, [pc, #196]	; (8017674 <xTaskIncrementTick+0x150>)
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	68db      	ldr	r3, [r3, #12]
 80175b2:	68db      	ldr	r3, [r3, #12]
 80175b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80175b6:	68bb      	ldr	r3, [r7, #8]
 80175b8:	685b      	ldr	r3, [r3, #4]
 80175ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80175bc:	693a      	ldr	r2, [r7, #16]
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d203      	bcs.n	80175cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80175c4:	4a2e      	ldr	r2, [pc, #184]	; (8017680 <xTaskIncrementTick+0x15c>)
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80175ca:	e02f      	b.n	801762c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80175cc:	68bb      	ldr	r3, [r7, #8]
 80175ce:	3304      	adds	r3, #4
 80175d0:	4618      	mov	r0, r3
 80175d2:	f7fe f96b 	bl	80158ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80175d6:	68bb      	ldr	r3, [r7, #8]
 80175d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d004      	beq.n	80175e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80175de:	68bb      	ldr	r3, [r7, #8]
 80175e0:	3318      	adds	r3, #24
 80175e2:	4618      	mov	r0, r3
 80175e4:	f7fe f962 	bl	80158ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175ec:	4b25      	ldr	r3, [pc, #148]	; (8017684 <xTaskIncrementTick+0x160>)
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	429a      	cmp	r2, r3
 80175f2:	d903      	bls.n	80175fc <xTaskIncrementTick+0xd8>
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175f8:	4a22      	ldr	r2, [pc, #136]	; (8017684 <xTaskIncrementTick+0x160>)
 80175fa:	6013      	str	r3, [r2, #0]
 80175fc:	68bb      	ldr	r3, [r7, #8]
 80175fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017600:	4613      	mov	r3, r2
 8017602:	009b      	lsls	r3, r3, #2
 8017604:	4413      	add	r3, r2
 8017606:	009b      	lsls	r3, r3, #2
 8017608:	4a1f      	ldr	r2, [pc, #124]	; (8017688 <xTaskIncrementTick+0x164>)
 801760a:	441a      	add	r2, r3
 801760c:	68bb      	ldr	r3, [r7, #8]
 801760e:	3304      	adds	r3, #4
 8017610:	4619      	mov	r1, r3
 8017612:	4610      	mov	r0, r2
 8017614:	f7fe f8ed 	bl	80157f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017618:	68bb      	ldr	r3, [r7, #8]
 801761a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801761c:	4b1b      	ldr	r3, [pc, #108]	; (801768c <xTaskIncrementTick+0x168>)
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017622:	429a      	cmp	r2, r3
 8017624:	d3b8      	bcc.n	8017598 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017626:	2301      	movs	r3, #1
 8017628:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801762a:	e7b5      	b.n	8017598 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801762c:	4b17      	ldr	r3, [pc, #92]	; (801768c <xTaskIncrementTick+0x168>)
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017632:	4915      	ldr	r1, [pc, #84]	; (8017688 <xTaskIncrementTick+0x164>)
 8017634:	4613      	mov	r3, r2
 8017636:	009b      	lsls	r3, r3, #2
 8017638:	4413      	add	r3, r2
 801763a:	009b      	lsls	r3, r3, #2
 801763c:	440b      	add	r3, r1
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	2b01      	cmp	r3, #1
 8017642:	d901      	bls.n	8017648 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017644:	2301      	movs	r3, #1
 8017646:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017648:	4b11      	ldr	r3, [pc, #68]	; (8017690 <xTaskIncrementTick+0x16c>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d007      	beq.n	8017660 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017650:	2301      	movs	r3, #1
 8017652:	617b      	str	r3, [r7, #20]
 8017654:	e004      	b.n	8017660 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017656:	4b0f      	ldr	r3, [pc, #60]	; (8017694 <xTaskIncrementTick+0x170>)
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	3301      	adds	r3, #1
 801765c:	4a0d      	ldr	r2, [pc, #52]	; (8017694 <xTaskIncrementTick+0x170>)
 801765e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017660:	697b      	ldr	r3, [r7, #20]
}
 8017662:	4618      	mov	r0, r3
 8017664:	3718      	adds	r7, #24
 8017666:	46bd      	mov	sp, r7
 8017668:	bd80      	pop	{r7, pc}
 801766a:	bf00      	nop
 801766c:	240250e8 	.word	0x240250e8
 8017670:	240250c4 	.word	0x240250c4
 8017674:	24025078 	.word	0x24025078
 8017678:	2402507c 	.word	0x2402507c
 801767c:	240250d8 	.word	0x240250d8
 8017680:	240250e0 	.word	0x240250e0
 8017684:	240250c8 	.word	0x240250c8
 8017688:	24024bf0 	.word	0x24024bf0
 801768c:	24024bec 	.word	0x24024bec
 8017690:	240250d4 	.word	0x240250d4
 8017694:	240250d0 	.word	0x240250d0

08017698 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8017698:	b580      	push	{r7, lr}
 801769a:	b084      	sub	sp, #16
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
 80176a0:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d103      	bne.n	80176b0 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80176a8:	4b08      	ldr	r3, [pc, #32]	; (80176cc <vTaskSetApplicationTaskTag+0x34>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	60fb      	str	r3, [r7, #12]
 80176ae:	e001      	b.n	80176b4 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80176b4:	f7fe fa4e 	bl	8015b54 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	683a      	ldr	r2, [r7, #0]
 80176bc:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80176be:	f7fe fa79 	bl	8015bb4 <vPortExitCritical>
	}
 80176c2:	bf00      	nop
 80176c4:	3710      	adds	r7, #16
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bd80      	pop	{r7, pc}
 80176ca:	bf00      	nop
 80176cc:	24024bec 	.word	0x24024bec

080176d0 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b084      	sub	sp, #16
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
 80176d8:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d103      	bne.n	80176e8 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = pxCurrentTCB;
 80176e0:	4b0b      	ldr	r3, [pc, #44]	; (8017710 <xTaskCallApplicationTaskHook+0x40>)
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	60fb      	str	r3, [r7, #12]
 80176e6:	e001      	b.n	80176ec <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = xTask;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d005      	beq.n	8017700 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80176f8:	6838      	ldr	r0, [r7, #0]
 80176fa:	4798      	blx	r3
 80176fc:	60b8      	str	r0, [r7, #8]
 80176fe:	e001      	b.n	8017704 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8017700:	2300      	movs	r3, #0
 8017702:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8017704:	68bb      	ldr	r3, [r7, #8]
	}
 8017706:	4618      	mov	r0, r3
 8017708:	3710      	adds	r7, #16
 801770a:	46bd      	mov	sp, r7
 801770c:	bd80      	pop	{r7, pc}
 801770e:	bf00      	nop
 8017710:	24024bec 	.word	0x24024bec

08017714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b084      	sub	sp, #16
 8017718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801771a:	4b2d      	ldr	r3, [pc, #180]	; (80177d0 <vTaskSwitchContext+0xbc>)
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d003      	beq.n	801772a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017722:	4b2c      	ldr	r3, [pc, #176]	; (80177d4 <vTaskSwitchContext+0xc0>)
 8017724:	2201      	movs	r2, #1
 8017726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017728:	e04d      	b.n	80177c6 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 801772a:	4b2a      	ldr	r3, [pc, #168]	; (80177d4 <vTaskSwitchContext+0xc0>)
 801772c:	2200      	movs	r2, #0
 801772e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8017730:	4b29      	ldr	r3, [pc, #164]	; (80177d8 <vTaskSwitchContext+0xc4>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	2101      	movs	r1, #1
 8017736:	4618      	mov	r0, r3
 8017738:	f7ff ffca 	bl	80176d0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801773c:	4b27      	ldr	r3, [pc, #156]	; (80177dc <vTaskSwitchContext+0xc8>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	60fb      	str	r3, [r7, #12]
 8017742:	e010      	b.n	8017766 <vTaskSwitchContext+0x52>
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d10a      	bne.n	8017760 <vTaskSwitchContext+0x4c>
	__asm volatile
 801774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801774e:	f383 8811 	msr	BASEPRI, r3
 8017752:	f3bf 8f6f 	isb	sy
 8017756:	f3bf 8f4f 	dsb	sy
 801775a:	607b      	str	r3, [r7, #4]
}
 801775c:	bf00      	nop
 801775e:	e7fe      	b.n	801775e <vTaskSwitchContext+0x4a>
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	3b01      	subs	r3, #1
 8017764:	60fb      	str	r3, [r7, #12]
 8017766:	491e      	ldr	r1, [pc, #120]	; (80177e0 <vTaskSwitchContext+0xcc>)
 8017768:	68fa      	ldr	r2, [r7, #12]
 801776a:	4613      	mov	r3, r2
 801776c:	009b      	lsls	r3, r3, #2
 801776e:	4413      	add	r3, r2
 8017770:	009b      	lsls	r3, r3, #2
 8017772:	440b      	add	r3, r1
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d0e4      	beq.n	8017744 <vTaskSwitchContext+0x30>
 801777a:	68fa      	ldr	r2, [r7, #12]
 801777c:	4613      	mov	r3, r2
 801777e:	009b      	lsls	r3, r3, #2
 8017780:	4413      	add	r3, r2
 8017782:	009b      	lsls	r3, r3, #2
 8017784:	4a16      	ldr	r2, [pc, #88]	; (80177e0 <vTaskSwitchContext+0xcc>)
 8017786:	4413      	add	r3, r2
 8017788:	60bb      	str	r3, [r7, #8]
 801778a:	68bb      	ldr	r3, [r7, #8]
 801778c:	685b      	ldr	r3, [r3, #4]
 801778e:	685a      	ldr	r2, [r3, #4]
 8017790:	68bb      	ldr	r3, [r7, #8]
 8017792:	605a      	str	r2, [r3, #4]
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	685a      	ldr	r2, [r3, #4]
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	3308      	adds	r3, #8
 801779c:	429a      	cmp	r2, r3
 801779e:	d104      	bne.n	80177aa <vTaskSwitchContext+0x96>
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	685b      	ldr	r3, [r3, #4]
 80177a4:	685a      	ldr	r2, [r3, #4]
 80177a6:	68bb      	ldr	r3, [r7, #8]
 80177a8:	605a      	str	r2, [r3, #4]
 80177aa:	68bb      	ldr	r3, [r7, #8]
 80177ac:	685b      	ldr	r3, [r3, #4]
 80177ae:	68db      	ldr	r3, [r3, #12]
 80177b0:	4a09      	ldr	r2, [pc, #36]	; (80177d8 <vTaskSwitchContext+0xc4>)
 80177b2:	6013      	str	r3, [r2, #0]
 80177b4:	4a09      	ldr	r2, [pc, #36]	; (80177dc <vTaskSwitchContext+0xc8>)
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80177ba:	4b07      	ldr	r3, [pc, #28]	; (80177d8 <vTaskSwitchContext+0xc4>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	2100      	movs	r1, #0
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7ff ff85 	bl	80176d0 <xTaskCallApplicationTaskHook>
}
 80177c6:	bf00      	nop
 80177c8:	3710      	adds	r7, #16
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}
 80177ce:	bf00      	nop
 80177d0:	240250e8 	.word	0x240250e8
 80177d4:	240250d4 	.word	0x240250d4
 80177d8:	24024bec 	.word	0x24024bec
 80177dc:	240250c8 	.word	0x240250c8
 80177e0:	24024bf0 	.word	0x24024bf0

080177e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b084      	sub	sp, #16
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d10a      	bne.n	801780a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80177f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f8:	f383 8811 	msr	BASEPRI, r3
 80177fc:	f3bf 8f6f 	isb	sy
 8017800:	f3bf 8f4f 	dsb	sy
 8017804:	60fb      	str	r3, [r7, #12]
}
 8017806:	bf00      	nop
 8017808:	e7fe      	b.n	8017808 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801780a:	4b07      	ldr	r3, [pc, #28]	; (8017828 <vTaskPlaceOnEventList+0x44>)
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	3318      	adds	r3, #24
 8017810:	4619      	mov	r1, r3
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f7fe f811 	bl	801583a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017818:	2101      	movs	r1, #1
 801781a:	6838      	ldr	r0, [r7, #0]
 801781c:	f000 fb8c 	bl	8017f38 <prvAddCurrentTaskToDelayedList>
}
 8017820:	bf00      	nop
 8017822:	3710      	adds	r7, #16
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}
 8017828:	24024bec 	.word	0x24024bec

0801782c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801782c:	b580      	push	{r7, lr}
 801782e:	b086      	sub	sp, #24
 8017830:	af00      	add	r7, sp, #0
 8017832:	60f8      	str	r0, [r7, #12]
 8017834:	60b9      	str	r1, [r7, #8]
 8017836:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d10a      	bne.n	8017854 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017842:	f383 8811 	msr	BASEPRI, r3
 8017846:	f3bf 8f6f 	isb	sy
 801784a:	f3bf 8f4f 	dsb	sy
 801784e:	617b      	str	r3, [r7, #20]
}
 8017850:	bf00      	nop
 8017852:	e7fe      	b.n	8017852 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017854:	4b0a      	ldr	r3, [pc, #40]	; (8017880 <vTaskPlaceOnEventListRestricted+0x54>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	3318      	adds	r3, #24
 801785a:	4619      	mov	r1, r3
 801785c:	68f8      	ldr	r0, [r7, #12]
 801785e:	f7fd ffc8 	bl	80157f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d002      	beq.n	801786e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017868:	f04f 33ff 	mov.w	r3, #4294967295
 801786c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801786e:	6879      	ldr	r1, [r7, #4]
 8017870:	68b8      	ldr	r0, [r7, #8]
 8017872:	f000 fb61 	bl	8017f38 <prvAddCurrentTaskToDelayedList>
	}
 8017876:	bf00      	nop
 8017878:	3718      	adds	r7, #24
 801787a:	46bd      	mov	sp, r7
 801787c:	bd80      	pop	{r7, pc}
 801787e:	bf00      	nop
 8017880:	24024bec 	.word	0x24024bec

08017884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b086      	sub	sp, #24
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	68db      	ldr	r3, [r3, #12]
 8017890:	68db      	ldr	r3, [r3, #12]
 8017892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017894:	693b      	ldr	r3, [r7, #16]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d10a      	bne.n	80178b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801789e:	f383 8811 	msr	BASEPRI, r3
 80178a2:	f3bf 8f6f 	isb	sy
 80178a6:	f3bf 8f4f 	dsb	sy
 80178aa:	60fb      	str	r3, [r7, #12]
}
 80178ac:	bf00      	nop
 80178ae:	e7fe      	b.n	80178ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80178b0:	693b      	ldr	r3, [r7, #16]
 80178b2:	3318      	adds	r3, #24
 80178b4:	4618      	mov	r0, r3
 80178b6:	f7fd fff9 	bl	80158ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80178ba:	4b1e      	ldr	r3, [pc, #120]	; (8017934 <xTaskRemoveFromEventList+0xb0>)
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d11d      	bne.n	80178fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80178c2:	693b      	ldr	r3, [r7, #16]
 80178c4:	3304      	adds	r3, #4
 80178c6:	4618      	mov	r0, r3
 80178c8:	f7fd fff0 	bl	80158ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80178cc:	693b      	ldr	r3, [r7, #16]
 80178ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178d0:	4b19      	ldr	r3, [pc, #100]	; (8017938 <xTaskRemoveFromEventList+0xb4>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	429a      	cmp	r2, r3
 80178d6:	d903      	bls.n	80178e0 <xTaskRemoveFromEventList+0x5c>
 80178d8:	693b      	ldr	r3, [r7, #16]
 80178da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178dc:	4a16      	ldr	r2, [pc, #88]	; (8017938 <xTaskRemoveFromEventList+0xb4>)
 80178de:	6013      	str	r3, [r2, #0]
 80178e0:	693b      	ldr	r3, [r7, #16]
 80178e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178e4:	4613      	mov	r3, r2
 80178e6:	009b      	lsls	r3, r3, #2
 80178e8:	4413      	add	r3, r2
 80178ea:	009b      	lsls	r3, r3, #2
 80178ec:	4a13      	ldr	r2, [pc, #76]	; (801793c <xTaskRemoveFromEventList+0xb8>)
 80178ee:	441a      	add	r2, r3
 80178f0:	693b      	ldr	r3, [r7, #16]
 80178f2:	3304      	adds	r3, #4
 80178f4:	4619      	mov	r1, r3
 80178f6:	4610      	mov	r0, r2
 80178f8:	f7fd ff7b 	bl	80157f2 <vListInsertEnd>
 80178fc:	e005      	b.n	801790a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80178fe:	693b      	ldr	r3, [r7, #16]
 8017900:	3318      	adds	r3, #24
 8017902:	4619      	mov	r1, r3
 8017904:	480e      	ldr	r0, [pc, #56]	; (8017940 <xTaskRemoveFromEventList+0xbc>)
 8017906:	f7fd ff74 	bl	80157f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801790a:	693b      	ldr	r3, [r7, #16]
 801790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801790e:	4b0d      	ldr	r3, [pc, #52]	; (8017944 <xTaskRemoveFromEventList+0xc0>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017914:	429a      	cmp	r2, r3
 8017916:	d905      	bls.n	8017924 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017918:	2301      	movs	r3, #1
 801791a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801791c:	4b0a      	ldr	r3, [pc, #40]	; (8017948 <xTaskRemoveFromEventList+0xc4>)
 801791e:	2201      	movs	r2, #1
 8017920:	601a      	str	r2, [r3, #0]
 8017922:	e001      	b.n	8017928 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017924:	2300      	movs	r3, #0
 8017926:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017928:	697b      	ldr	r3, [r7, #20]
}
 801792a:	4618      	mov	r0, r3
 801792c:	3718      	adds	r7, #24
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}
 8017932:	bf00      	nop
 8017934:	240250e8 	.word	0x240250e8
 8017938:	240250c8 	.word	0x240250c8
 801793c:	24024bf0 	.word	0x24024bf0
 8017940:	24025080 	.word	0x24025080
 8017944:	24024bec 	.word	0x24024bec
 8017948:	240250d4 	.word	0x240250d4

0801794c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801794c:	b480      	push	{r7}
 801794e:	b083      	sub	sp, #12
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017954:	4b06      	ldr	r3, [pc, #24]	; (8017970 <vTaskInternalSetTimeOutState+0x24>)
 8017956:	681a      	ldr	r2, [r3, #0]
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801795c:	4b05      	ldr	r3, [pc, #20]	; (8017974 <vTaskInternalSetTimeOutState+0x28>)
 801795e:	681a      	ldr	r2, [r3, #0]
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	605a      	str	r2, [r3, #4]
}
 8017964:	bf00      	nop
 8017966:	370c      	adds	r7, #12
 8017968:	46bd      	mov	sp, r7
 801796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796e:	4770      	bx	lr
 8017970:	240250d8 	.word	0x240250d8
 8017974:	240250c4 	.word	0x240250c4

08017978 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b088      	sub	sp, #32
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
 8017980:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d10a      	bne.n	801799e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801798c:	f383 8811 	msr	BASEPRI, r3
 8017990:	f3bf 8f6f 	isb	sy
 8017994:	f3bf 8f4f 	dsb	sy
 8017998:	613b      	str	r3, [r7, #16]
}
 801799a:	bf00      	nop
 801799c:	e7fe      	b.n	801799c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d10a      	bne.n	80179ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80179a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179a8:	f383 8811 	msr	BASEPRI, r3
 80179ac:	f3bf 8f6f 	isb	sy
 80179b0:	f3bf 8f4f 	dsb	sy
 80179b4:	60fb      	str	r3, [r7, #12]
}
 80179b6:	bf00      	nop
 80179b8:	e7fe      	b.n	80179b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80179ba:	f7fe f8cb 	bl	8015b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80179be:	4b1d      	ldr	r3, [pc, #116]	; (8017a34 <xTaskCheckForTimeOut+0xbc>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	685b      	ldr	r3, [r3, #4]
 80179c8:	69ba      	ldr	r2, [r7, #24]
 80179ca:	1ad3      	subs	r3, r2, r3
 80179cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80179ce:	683b      	ldr	r3, [r7, #0]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179d6:	d102      	bne.n	80179de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80179d8:	2300      	movs	r3, #0
 80179da:	61fb      	str	r3, [r7, #28]
 80179dc:	e023      	b.n	8017a26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681a      	ldr	r2, [r3, #0]
 80179e2:	4b15      	ldr	r3, [pc, #84]	; (8017a38 <xTaskCheckForTimeOut+0xc0>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	429a      	cmp	r2, r3
 80179e8:	d007      	beq.n	80179fa <xTaskCheckForTimeOut+0x82>
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	685b      	ldr	r3, [r3, #4]
 80179ee:	69ba      	ldr	r2, [r7, #24]
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d302      	bcc.n	80179fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80179f4:	2301      	movs	r3, #1
 80179f6:	61fb      	str	r3, [r7, #28]
 80179f8:	e015      	b.n	8017a26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80179fa:	683b      	ldr	r3, [r7, #0]
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	697a      	ldr	r2, [r7, #20]
 8017a00:	429a      	cmp	r2, r3
 8017a02:	d20b      	bcs.n	8017a1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017a04:	683b      	ldr	r3, [r7, #0]
 8017a06:	681a      	ldr	r2, [r3, #0]
 8017a08:	697b      	ldr	r3, [r7, #20]
 8017a0a:	1ad2      	subs	r2, r2, r3
 8017a0c:	683b      	ldr	r3, [r7, #0]
 8017a0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017a10:	6878      	ldr	r0, [r7, #4]
 8017a12:	f7ff ff9b 	bl	801794c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017a16:	2300      	movs	r3, #0
 8017a18:	61fb      	str	r3, [r7, #28]
 8017a1a:	e004      	b.n	8017a26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	2200      	movs	r2, #0
 8017a20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017a22:	2301      	movs	r3, #1
 8017a24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017a26:	f7fe f8c5 	bl	8015bb4 <vPortExitCritical>

	return xReturn;
 8017a2a:	69fb      	ldr	r3, [r7, #28]
}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	3720      	adds	r7, #32
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}
 8017a34:	240250c4 	.word	0x240250c4
 8017a38:	240250d8 	.word	0x240250d8

08017a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017a3c:	b480      	push	{r7}
 8017a3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017a40:	4b03      	ldr	r3, [pc, #12]	; (8017a50 <vTaskMissedYield+0x14>)
 8017a42:	2201      	movs	r2, #1
 8017a44:	601a      	str	r2, [r3, #0]
}
 8017a46:	bf00      	nop
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4e:	4770      	bx	lr
 8017a50:	240250d4 	.word	0x240250d4

08017a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017a5c:	f000 f854 	bl	8017b08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017a60:	4b07      	ldr	r3, [pc, #28]	; (8017a80 <prvIdleTask+0x2c>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	2b01      	cmp	r3, #1
 8017a66:	d907      	bls.n	8017a78 <prvIdleTask+0x24>
			{
				taskYIELD();
 8017a68:	4b06      	ldr	r3, [pc, #24]	; (8017a84 <prvIdleTask+0x30>)
 8017a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a6e:	601a      	str	r2, [r3, #0]
 8017a70:	f3bf 8f4f 	dsb	sy
 8017a74:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8017a78:	f7ee f9fc 	bl	8005e74 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8017a7c:	e7ee      	b.n	8017a5c <prvIdleTask+0x8>
 8017a7e:	bf00      	nop
 8017a80:	24024bf0 	.word	0x24024bf0
 8017a84:	e000ed04 	.word	0xe000ed04

08017a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b082      	sub	sp, #8
 8017a8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017a8e:	2300      	movs	r3, #0
 8017a90:	607b      	str	r3, [r7, #4]
 8017a92:	e00c      	b.n	8017aae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017a94:	687a      	ldr	r2, [r7, #4]
 8017a96:	4613      	mov	r3, r2
 8017a98:	009b      	lsls	r3, r3, #2
 8017a9a:	4413      	add	r3, r2
 8017a9c:	009b      	lsls	r3, r3, #2
 8017a9e:	4a12      	ldr	r2, [pc, #72]	; (8017ae8 <prvInitialiseTaskLists+0x60>)
 8017aa0:	4413      	add	r3, r2
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7fd fe78 	bl	8015798 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	3301      	adds	r3, #1
 8017aac:	607b      	str	r3, [r7, #4]
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	2b37      	cmp	r3, #55	; 0x37
 8017ab2:	d9ef      	bls.n	8017a94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017ab4:	480d      	ldr	r0, [pc, #52]	; (8017aec <prvInitialiseTaskLists+0x64>)
 8017ab6:	f7fd fe6f 	bl	8015798 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017aba:	480d      	ldr	r0, [pc, #52]	; (8017af0 <prvInitialiseTaskLists+0x68>)
 8017abc:	f7fd fe6c 	bl	8015798 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017ac0:	480c      	ldr	r0, [pc, #48]	; (8017af4 <prvInitialiseTaskLists+0x6c>)
 8017ac2:	f7fd fe69 	bl	8015798 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017ac6:	480c      	ldr	r0, [pc, #48]	; (8017af8 <prvInitialiseTaskLists+0x70>)
 8017ac8:	f7fd fe66 	bl	8015798 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017acc:	480b      	ldr	r0, [pc, #44]	; (8017afc <prvInitialiseTaskLists+0x74>)
 8017ace:	f7fd fe63 	bl	8015798 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017ad2:	4b0b      	ldr	r3, [pc, #44]	; (8017b00 <prvInitialiseTaskLists+0x78>)
 8017ad4:	4a05      	ldr	r2, [pc, #20]	; (8017aec <prvInitialiseTaskLists+0x64>)
 8017ad6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017ad8:	4b0a      	ldr	r3, [pc, #40]	; (8017b04 <prvInitialiseTaskLists+0x7c>)
 8017ada:	4a05      	ldr	r2, [pc, #20]	; (8017af0 <prvInitialiseTaskLists+0x68>)
 8017adc:	601a      	str	r2, [r3, #0]
}
 8017ade:	bf00      	nop
 8017ae0:	3708      	adds	r7, #8
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bd80      	pop	{r7, pc}
 8017ae6:	bf00      	nop
 8017ae8:	24024bf0 	.word	0x24024bf0
 8017aec:	24025050 	.word	0x24025050
 8017af0:	24025064 	.word	0x24025064
 8017af4:	24025080 	.word	0x24025080
 8017af8:	24025094 	.word	0x24025094
 8017afc:	240250ac 	.word	0x240250ac
 8017b00:	24025078 	.word	0x24025078
 8017b04:	2402507c 	.word	0x2402507c

08017b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b082      	sub	sp, #8
 8017b0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017b0e:	e019      	b.n	8017b44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017b10:	f7fe f820 	bl	8015b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b14:	4b10      	ldr	r3, [pc, #64]	; (8017b58 <prvCheckTasksWaitingTermination+0x50>)
 8017b16:	68db      	ldr	r3, [r3, #12]
 8017b18:	68db      	ldr	r3, [r3, #12]
 8017b1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	3304      	adds	r3, #4
 8017b20:	4618      	mov	r0, r3
 8017b22:	f7fd fec3 	bl	80158ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017b26:	4b0d      	ldr	r3, [pc, #52]	; (8017b5c <prvCheckTasksWaitingTermination+0x54>)
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	3b01      	subs	r3, #1
 8017b2c:	4a0b      	ldr	r2, [pc, #44]	; (8017b5c <prvCheckTasksWaitingTermination+0x54>)
 8017b2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017b30:	4b0b      	ldr	r3, [pc, #44]	; (8017b60 <prvCheckTasksWaitingTermination+0x58>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	3b01      	subs	r3, #1
 8017b36:	4a0a      	ldr	r2, [pc, #40]	; (8017b60 <prvCheckTasksWaitingTermination+0x58>)
 8017b38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017b3a:	f7fe f83b 	bl	8015bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017b3e:	6878      	ldr	r0, [r7, #4]
 8017b40:	f000 f810 	bl	8017b64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017b44:	4b06      	ldr	r3, [pc, #24]	; (8017b60 <prvCheckTasksWaitingTermination+0x58>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d1e1      	bne.n	8017b10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017b4c:	bf00      	nop
 8017b4e:	bf00      	nop
 8017b50:	3708      	adds	r7, #8
 8017b52:	46bd      	mov	sp, r7
 8017b54:	bd80      	pop	{r7, pc}
 8017b56:	bf00      	nop
 8017b58:	24025094 	.word	0x24025094
 8017b5c:	240250c0 	.word	0x240250c0
 8017b60:	240250a8 	.word	0x240250a8

08017b64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017b64:	b580      	push	{r7, lr}
 8017b66:	b084      	sub	sp, #16
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d108      	bne.n	8017b88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f7fd fcec 	bl	8015558 <vPortFree>
				vPortFree( pxTCB );
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	f7fd fce9 	bl	8015558 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017b86:	e018      	b.n	8017bba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8017b8e:	2b01      	cmp	r3, #1
 8017b90:	d103      	bne.n	8017b9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017b92:	6878      	ldr	r0, [r7, #4]
 8017b94:	f7fd fce0 	bl	8015558 <vPortFree>
	}
 8017b98:	e00f      	b.n	8017bba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8017ba0:	2b02      	cmp	r3, #2
 8017ba2:	d00a      	beq.n	8017bba <prvDeleteTCB+0x56>
	__asm volatile
 8017ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ba8:	f383 8811 	msr	BASEPRI, r3
 8017bac:	f3bf 8f6f 	isb	sy
 8017bb0:	f3bf 8f4f 	dsb	sy
 8017bb4:	60fb      	str	r3, [r7, #12]
}
 8017bb6:	bf00      	nop
 8017bb8:	e7fe      	b.n	8017bb8 <prvDeleteTCB+0x54>
	}
 8017bba:	bf00      	nop
 8017bbc:	3710      	adds	r7, #16
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bd80      	pop	{r7, pc}
	...

08017bc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017bc4:	b480      	push	{r7}
 8017bc6:	b083      	sub	sp, #12
 8017bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017bca:	4b0c      	ldr	r3, [pc, #48]	; (8017bfc <prvResetNextTaskUnblockTime+0x38>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d104      	bne.n	8017bde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017bd4:	4b0a      	ldr	r3, [pc, #40]	; (8017c00 <prvResetNextTaskUnblockTime+0x3c>)
 8017bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8017bda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017bdc:	e008      	b.n	8017bf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bde:	4b07      	ldr	r3, [pc, #28]	; (8017bfc <prvResetNextTaskUnblockTime+0x38>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	68db      	ldr	r3, [r3, #12]
 8017be4:	68db      	ldr	r3, [r3, #12]
 8017be6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	685b      	ldr	r3, [r3, #4]
 8017bec:	4a04      	ldr	r2, [pc, #16]	; (8017c00 <prvResetNextTaskUnblockTime+0x3c>)
 8017bee:	6013      	str	r3, [r2, #0]
}
 8017bf0:	bf00      	nop
 8017bf2:	370c      	adds	r7, #12
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bfa:	4770      	bx	lr
 8017bfc:	24025078 	.word	0x24025078
 8017c00:	240250e0 	.word	0x240250e0

08017c04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017c04:	b480      	push	{r7}
 8017c06:	b083      	sub	sp, #12
 8017c08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8017c0a:	4b05      	ldr	r3, [pc, #20]	; (8017c20 <xTaskGetCurrentTaskHandle+0x1c>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8017c10:	687b      	ldr	r3, [r7, #4]
	}
 8017c12:	4618      	mov	r0, r3
 8017c14:	370c      	adds	r7, #12
 8017c16:	46bd      	mov	sp, r7
 8017c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1c:	4770      	bx	lr
 8017c1e:	bf00      	nop
 8017c20:	24024bec 	.word	0x24024bec

08017c24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017c24:	b480      	push	{r7}
 8017c26:	b083      	sub	sp, #12
 8017c28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017c2a:	4b0b      	ldr	r3, [pc, #44]	; (8017c58 <xTaskGetSchedulerState+0x34>)
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d102      	bne.n	8017c38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017c32:	2301      	movs	r3, #1
 8017c34:	607b      	str	r3, [r7, #4]
 8017c36:	e008      	b.n	8017c4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c38:	4b08      	ldr	r3, [pc, #32]	; (8017c5c <xTaskGetSchedulerState+0x38>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d102      	bne.n	8017c46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017c40:	2302      	movs	r3, #2
 8017c42:	607b      	str	r3, [r7, #4]
 8017c44:	e001      	b.n	8017c4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017c46:	2300      	movs	r3, #0
 8017c48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017c4a:	687b      	ldr	r3, [r7, #4]
	}
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	370c      	adds	r7, #12
 8017c50:	46bd      	mov	sp, r7
 8017c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c56:	4770      	bx	lr
 8017c58:	240250cc 	.word	0x240250cc
 8017c5c:	240250e8 	.word	0x240250e8

08017c60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b084      	sub	sp, #16
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d051      	beq.n	8017d1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017c76:	68bb      	ldr	r3, [r7, #8]
 8017c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c7a:	4b2a      	ldr	r3, [pc, #168]	; (8017d24 <xTaskPriorityInherit+0xc4>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c80:	429a      	cmp	r2, r3
 8017c82:	d241      	bcs.n	8017d08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017c84:	68bb      	ldr	r3, [r7, #8]
 8017c86:	699b      	ldr	r3, [r3, #24]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	db06      	blt.n	8017c9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017c8c:	4b25      	ldr	r3, [pc, #148]	; (8017d24 <xTaskPriorityInherit+0xc4>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017c96:	68bb      	ldr	r3, [r7, #8]
 8017c98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	6959      	ldr	r1, [r3, #20]
 8017c9e:	68bb      	ldr	r3, [r7, #8]
 8017ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ca2:	4613      	mov	r3, r2
 8017ca4:	009b      	lsls	r3, r3, #2
 8017ca6:	4413      	add	r3, r2
 8017ca8:	009b      	lsls	r3, r3, #2
 8017caa:	4a1f      	ldr	r2, [pc, #124]	; (8017d28 <xTaskPriorityInherit+0xc8>)
 8017cac:	4413      	add	r3, r2
 8017cae:	4299      	cmp	r1, r3
 8017cb0:	d122      	bne.n	8017cf8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017cb2:	68bb      	ldr	r3, [r7, #8]
 8017cb4:	3304      	adds	r3, #4
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f7fd fdf8 	bl	80158ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017cbc:	4b19      	ldr	r3, [pc, #100]	; (8017d24 <xTaskPriorityInherit+0xc4>)
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cc2:	68bb      	ldr	r3, [r7, #8]
 8017cc4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017cc6:	68bb      	ldr	r3, [r7, #8]
 8017cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cca:	4b18      	ldr	r3, [pc, #96]	; (8017d2c <xTaskPriorityInherit+0xcc>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	429a      	cmp	r2, r3
 8017cd0:	d903      	bls.n	8017cda <xTaskPriorityInherit+0x7a>
 8017cd2:	68bb      	ldr	r3, [r7, #8]
 8017cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cd6:	4a15      	ldr	r2, [pc, #84]	; (8017d2c <xTaskPriorityInherit+0xcc>)
 8017cd8:	6013      	str	r3, [r2, #0]
 8017cda:	68bb      	ldr	r3, [r7, #8]
 8017cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cde:	4613      	mov	r3, r2
 8017ce0:	009b      	lsls	r3, r3, #2
 8017ce2:	4413      	add	r3, r2
 8017ce4:	009b      	lsls	r3, r3, #2
 8017ce6:	4a10      	ldr	r2, [pc, #64]	; (8017d28 <xTaskPriorityInherit+0xc8>)
 8017ce8:	441a      	add	r2, r3
 8017cea:	68bb      	ldr	r3, [r7, #8]
 8017cec:	3304      	adds	r3, #4
 8017cee:	4619      	mov	r1, r3
 8017cf0:	4610      	mov	r0, r2
 8017cf2:	f7fd fd7e 	bl	80157f2 <vListInsertEnd>
 8017cf6:	e004      	b.n	8017d02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017cf8:	4b0a      	ldr	r3, [pc, #40]	; (8017d24 <xTaskPriorityInherit+0xc4>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cfe:	68bb      	ldr	r3, [r7, #8]
 8017d00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017d02:	2301      	movs	r3, #1
 8017d04:	60fb      	str	r3, [r7, #12]
 8017d06:	e008      	b.n	8017d1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017d08:	68bb      	ldr	r3, [r7, #8]
 8017d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017d0c:	4b05      	ldr	r3, [pc, #20]	; (8017d24 <xTaskPriorityInherit+0xc4>)
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d12:	429a      	cmp	r2, r3
 8017d14:	d201      	bcs.n	8017d1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017d16:	2301      	movs	r3, #1
 8017d18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
	}
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	3710      	adds	r7, #16
 8017d20:	46bd      	mov	sp, r7
 8017d22:	bd80      	pop	{r7, pc}
 8017d24:	24024bec 	.word	0x24024bec
 8017d28:	24024bf0 	.word	0x24024bf0
 8017d2c:	240250c8 	.word	0x240250c8

08017d30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b086      	sub	sp, #24
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d056      	beq.n	8017df4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017d46:	4b2e      	ldr	r3, [pc, #184]	; (8017e00 <xTaskPriorityDisinherit+0xd0>)
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	693a      	ldr	r2, [r7, #16]
 8017d4c:	429a      	cmp	r2, r3
 8017d4e:	d00a      	beq.n	8017d66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d54:	f383 8811 	msr	BASEPRI, r3
 8017d58:	f3bf 8f6f 	isb	sy
 8017d5c:	f3bf 8f4f 	dsb	sy
 8017d60:	60fb      	str	r3, [r7, #12]
}
 8017d62:	bf00      	nop
 8017d64:	e7fe      	b.n	8017d64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017d66:	693b      	ldr	r3, [r7, #16]
 8017d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d10a      	bne.n	8017d84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d72:	f383 8811 	msr	BASEPRI, r3
 8017d76:	f3bf 8f6f 	isb	sy
 8017d7a:	f3bf 8f4f 	dsb	sy
 8017d7e:	60bb      	str	r3, [r7, #8]
}
 8017d80:	bf00      	nop
 8017d82:	e7fe      	b.n	8017d82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017d84:	693b      	ldr	r3, [r7, #16]
 8017d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d88:	1e5a      	subs	r2, r3, #1
 8017d8a:	693b      	ldr	r3, [r7, #16]
 8017d8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017d8e:	693b      	ldr	r3, [r7, #16]
 8017d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d92:	693b      	ldr	r3, [r7, #16]
 8017d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d02c      	beq.n	8017df4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017d9a:	693b      	ldr	r3, [r7, #16]
 8017d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d128      	bne.n	8017df4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017da2:	693b      	ldr	r3, [r7, #16]
 8017da4:	3304      	adds	r3, #4
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7fd fd80 	bl	80158ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017dac:	693b      	ldr	r3, [r7, #16]
 8017dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017db0:	693b      	ldr	r3, [r7, #16]
 8017db2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017db4:	693b      	ldr	r3, [r7, #16]
 8017db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017db8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017dbc:	693b      	ldr	r3, [r7, #16]
 8017dbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017dc0:	693b      	ldr	r3, [r7, #16]
 8017dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dc4:	4b0f      	ldr	r3, [pc, #60]	; (8017e04 <xTaskPriorityDisinherit+0xd4>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d903      	bls.n	8017dd4 <xTaskPriorityDisinherit+0xa4>
 8017dcc:	693b      	ldr	r3, [r7, #16]
 8017dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dd0:	4a0c      	ldr	r2, [pc, #48]	; (8017e04 <xTaskPriorityDisinherit+0xd4>)
 8017dd2:	6013      	str	r3, [r2, #0]
 8017dd4:	693b      	ldr	r3, [r7, #16]
 8017dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dd8:	4613      	mov	r3, r2
 8017dda:	009b      	lsls	r3, r3, #2
 8017ddc:	4413      	add	r3, r2
 8017dde:	009b      	lsls	r3, r3, #2
 8017de0:	4a09      	ldr	r2, [pc, #36]	; (8017e08 <xTaskPriorityDisinherit+0xd8>)
 8017de2:	441a      	add	r2, r3
 8017de4:	693b      	ldr	r3, [r7, #16]
 8017de6:	3304      	adds	r3, #4
 8017de8:	4619      	mov	r1, r3
 8017dea:	4610      	mov	r0, r2
 8017dec:	f7fd fd01 	bl	80157f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017df0:	2301      	movs	r3, #1
 8017df2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017df4:	697b      	ldr	r3, [r7, #20]
	}
 8017df6:	4618      	mov	r0, r3
 8017df8:	3718      	adds	r7, #24
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	bd80      	pop	{r7, pc}
 8017dfe:	bf00      	nop
 8017e00:	24024bec 	.word	0x24024bec
 8017e04:	240250c8 	.word	0x240250c8
 8017e08:	24024bf0 	.word	0x24024bf0

08017e0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b088      	sub	sp, #32
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
 8017e14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d06a      	beq.n	8017efa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017e24:	69bb      	ldr	r3, [r7, #24]
 8017e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d10a      	bne.n	8017e42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e30:	f383 8811 	msr	BASEPRI, r3
 8017e34:	f3bf 8f6f 	isb	sy
 8017e38:	f3bf 8f4f 	dsb	sy
 8017e3c:	60fb      	str	r3, [r7, #12]
}
 8017e3e:	bf00      	nop
 8017e40:	e7fe      	b.n	8017e40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017e42:	69bb      	ldr	r3, [r7, #24]
 8017e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e46:	683a      	ldr	r2, [r7, #0]
 8017e48:	429a      	cmp	r2, r3
 8017e4a:	d902      	bls.n	8017e52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017e4c:	683b      	ldr	r3, [r7, #0]
 8017e4e:	61fb      	str	r3, [r7, #28]
 8017e50:	e002      	b.n	8017e58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017e52:	69bb      	ldr	r3, [r7, #24]
 8017e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017e58:	69bb      	ldr	r3, [r7, #24]
 8017e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e5c:	69fa      	ldr	r2, [r7, #28]
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d04b      	beq.n	8017efa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017e62:	69bb      	ldr	r3, [r7, #24]
 8017e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e66:	697a      	ldr	r2, [r7, #20]
 8017e68:	429a      	cmp	r2, r3
 8017e6a:	d146      	bne.n	8017efa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017e6c:	4b25      	ldr	r3, [pc, #148]	; (8017f04 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	69ba      	ldr	r2, [r7, #24]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d10a      	bne.n	8017e8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e7a:	f383 8811 	msr	BASEPRI, r3
 8017e7e:	f3bf 8f6f 	isb	sy
 8017e82:	f3bf 8f4f 	dsb	sy
 8017e86:	60bb      	str	r3, [r7, #8]
}
 8017e88:	bf00      	nop
 8017e8a:	e7fe      	b.n	8017e8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017e8c:	69bb      	ldr	r3, [r7, #24]
 8017e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017e92:	69bb      	ldr	r3, [r7, #24]
 8017e94:	69fa      	ldr	r2, [r7, #28]
 8017e96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017e98:	69bb      	ldr	r3, [r7, #24]
 8017e9a:	699b      	ldr	r3, [r3, #24]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	db04      	blt.n	8017eaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ea0:	69fb      	ldr	r3, [r7, #28]
 8017ea2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017ea6:	69bb      	ldr	r3, [r7, #24]
 8017ea8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017eaa:	69bb      	ldr	r3, [r7, #24]
 8017eac:	6959      	ldr	r1, [r3, #20]
 8017eae:	693a      	ldr	r2, [r7, #16]
 8017eb0:	4613      	mov	r3, r2
 8017eb2:	009b      	lsls	r3, r3, #2
 8017eb4:	4413      	add	r3, r2
 8017eb6:	009b      	lsls	r3, r3, #2
 8017eb8:	4a13      	ldr	r2, [pc, #76]	; (8017f08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017eba:	4413      	add	r3, r2
 8017ebc:	4299      	cmp	r1, r3
 8017ebe:	d11c      	bne.n	8017efa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017ec0:	69bb      	ldr	r3, [r7, #24]
 8017ec2:	3304      	adds	r3, #4
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f7fd fcf1 	bl	80158ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017eca:	69bb      	ldr	r3, [r7, #24]
 8017ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ece:	4b0f      	ldr	r3, [pc, #60]	; (8017f0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	d903      	bls.n	8017ede <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017ed6:	69bb      	ldr	r3, [r7, #24]
 8017ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eda:	4a0c      	ldr	r2, [pc, #48]	; (8017f0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017edc:	6013      	str	r3, [r2, #0]
 8017ede:	69bb      	ldr	r3, [r7, #24]
 8017ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ee2:	4613      	mov	r3, r2
 8017ee4:	009b      	lsls	r3, r3, #2
 8017ee6:	4413      	add	r3, r2
 8017ee8:	009b      	lsls	r3, r3, #2
 8017eea:	4a07      	ldr	r2, [pc, #28]	; (8017f08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017eec:	441a      	add	r2, r3
 8017eee:	69bb      	ldr	r3, [r7, #24]
 8017ef0:	3304      	adds	r3, #4
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	4610      	mov	r0, r2
 8017ef6:	f7fd fc7c 	bl	80157f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017efa:	bf00      	nop
 8017efc:	3720      	adds	r7, #32
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd80      	pop	{r7, pc}
 8017f02:	bf00      	nop
 8017f04:	24024bec 	.word	0x24024bec
 8017f08:	24024bf0 	.word	0x24024bf0
 8017f0c:	240250c8 	.word	0x240250c8

08017f10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017f10:	b480      	push	{r7}
 8017f12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017f14:	4b07      	ldr	r3, [pc, #28]	; (8017f34 <pvTaskIncrementMutexHeldCount+0x24>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d004      	beq.n	8017f26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017f1c:	4b05      	ldr	r3, [pc, #20]	; (8017f34 <pvTaskIncrementMutexHeldCount+0x24>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017f22:	3201      	adds	r2, #1
 8017f24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017f26:	4b03      	ldr	r3, [pc, #12]	; (8017f34 <pvTaskIncrementMutexHeldCount+0x24>)
 8017f28:	681b      	ldr	r3, [r3, #0]
	}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f32:	4770      	bx	lr
 8017f34:	24024bec 	.word	0x24024bec

08017f38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b084      	sub	sp, #16
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
 8017f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017f42:	4b21      	ldr	r3, [pc, #132]	; (8017fc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f48:	4b20      	ldr	r3, [pc, #128]	; (8017fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	3304      	adds	r3, #4
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f7fd fcac 	bl	80158ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f5a:	d10a      	bne.n	8017f72 <prvAddCurrentTaskToDelayedList+0x3a>
 8017f5c:	683b      	ldr	r3, [r7, #0]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d007      	beq.n	8017f72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f62:	4b1a      	ldr	r3, [pc, #104]	; (8017fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	3304      	adds	r3, #4
 8017f68:	4619      	mov	r1, r3
 8017f6a:	4819      	ldr	r0, [pc, #100]	; (8017fd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8017f6c:	f7fd fc41 	bl	80157f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017f70:	e026      	b.n	8017fc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017f72:	68fa      	ldr	r2, [r7, #12]
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	4413      	add	r3, r2
 8017f78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017f7a:	4b14      	ldr	r3, [pc, #80]	; (8017fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	68ba      	ldr	r2, [r7, #8]
 8017f80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017f82:	68ba      	ldr	r2, [r7, #8]
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	429a      	cmp	r2, r3
 8017f88:	d209      	bcs.n	8017f9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f8a:	4b12      	ldr	r3, [pc, #72]	; (8017fd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017f8c:	681a      	ldr	r2, [r3, #0]
 8017f8e:	4b0f      	ldr	r3, [pc, #60]	; (8017fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	3304      	adds	r3, #4
 8017f94:	4619      	mov	r1, r3
 8017f96:	4610      	mov	r0, r2
 8017f98:	f7fd fc4f 	bl	801583a <vListInsert>
}
 8017f9c:	e010      	b.n	8017fc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f9e:	4b0e      	ldr	r3, [pc, #56]	; (8017fd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	4b0a      	ldr	r3, [pc, #40]	; (8017fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	3304      	adds	r3, #4
 8017fa8:	4619      	mov	r1, r3
 8017faa:	4610      	mov	r0, r2
 8017fac:	f7fd fc45 	bl	801583a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017fb0:	4b0a      	ldr	r3, [pc, #40]	; (8017fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	68ba      	ldr	r2, [r7, #8]
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	d202      	bcs.n	8017fc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017fba:	4a08      	ldr	r2, [pc, #32]	; (8017fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8017fbc:	68bb      	ldr	r3, [r7, #8]
 8017fbe:	6013      	str	r3, [r2, #0]
}
 8017fc0:	bf00      	nop
 8017fc2:	3710      	adds	r7, #16
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	bd80      	pop	{r7, pc}
 8017fc8:	240250c4 	.word	0x240250c4
 8017fcc:	24024bec 	.word	0x24024bec
 8017fd0:	240250ac 	.word	0x240250ac
 8017fd4:	2402507c 	.word	0x2402507c
 8017fd8:	24025078 	.word	0x24025078
 8017fdc:	240250e0 	.word	0x240250e0

08017fe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b08a      	sub	sp, #40	; 0x28
 8017fe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017fea:	f000 fb07 	bl	80185fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017fee:	4b1c      	ldr	r3, [pc, #112]	; (8018060 <xTimerCreateTimerTask+0x80>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d021      	beq.n	801803a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017ffe:	1d3a      	adds	r2, r7, #4
 8018000:	f107 0108 	add.w	r1, r7, #8
 8018004:	f107 030c 	add.w	r3, r7, #12
 8018008:	4618      	mov	r0, r3
 801800a:	f7fd f9bf 	bl	801538c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801800e:	6879      	ldr	r1, [r7, #4]
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	68fa      	ldr	r2, [r7, #12]
 8018014:	9202      	str	r2, [sp, #8]
 8018016:	9301      	str	r3, [sp, #4]
 8018018:	2302      	movs	r3, #2
 801801a:	9300      	str	r3, [sp, #0]
 801801c:	2300      	movs	r3, #0
 801801e:	460a      	mov	r2, r1
 8018020:	4910      	ldr	r1, [pc, #64]	; (8018064 <xTimerCreateTimerTask+0x84>)
 8018022:	4811      	ldr	r0, [pc, #68]	; (8018068 <xTimerCreateTimerTask+0x88>)
 8018024:	f7fe ff7c 	bl	8016f20 <xTaskCreateStatic>
 8018028:	4603      	mov	r3, r0
 801802a:	4a10      	ldr	r2, [pc, #64]	; (801806c <xTimerCreateTimerTask+0x8c>)
 801802c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801802e:	4b0f      	ldr	r3, [pc, #60]	; (801806c <xTimerCreateTimerTask+0x8c>)
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d001      	beq.n	801803a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018036:	2301      	movs	r3, #1
 8018038:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d10a      	bne.n	8018056 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018044:	f383 8811 	msr	BASEPRI, r3
 8018048:	f3bf 8f6f 	isb	sy
 801804c:	f3bf 8f4f 	dsb	sy
 8018050:	613b      	str	r3, [r7, #16]
}
 8018052:	bf00      	nop
 8018054:	e7fe      	b.n	8018054 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018056:	697b      	ldr	r3, [r7, #20]
}
 8018058:	4618      	mov	r0, r3
 801805a:	3718      	adds	r7, #24
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}
 8018060:	2402511c 	.word	0x2402511c
 8018064:	0802ae04 	.word	0x0802ae04
 8018068:	080181a5 	.word	0x080181a5
 801806c:	24025120 	.word	0x24025120

08018070 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b08a      	sub	sp, #40	; 0x28
 8018074:	af00      	add	r7, sp, #0
 8018076:	60f8      	str	r0, [r7, #12]
 8018078:	60b9      	str	r1, [r7, #8]
 801807a:	607a      	str	r2, [r7, #4]
 801807c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801807e:	2300      	movs	r3, #0
 8018080:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d10a      	bne.n	801809e <xTimerGenericCommand+0x2e>
	__asm volatile
 8018088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801808c:	f383 8811 	msr	BASEPRI, r3
 8018090:	f3bf 8f6f 	isb	sy
 8018094:	f3bf 8f4f 	dsb	sy
 8018098:	623b      	str	r3, [r7, #32]
}
 801809a:	bf00      	nop
 801809c:	e7fe      	b.n	801809c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801809e:	4b1a      	ldr	r3, [pc, #104]	; (8018108 <xTimerGenericCommand+0x98>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d02a      	beq.n	80180fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80180a6:	68bb      	ldr	r3, [r7, #8]
 80180a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80180b2:	68bb      	ldr	r3, [r7, #8]
 80180b4:	2b05      	cmp	r3, #5
 80180b6:	dc18      	bgt.n	80180ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80180b8:	f7ff fdb4 	bl	8017c24 <xTaskGetSchedulerState>
 80180bc:	4603      	mov	r3, r0
 80180be:	2b02      	cmp	r3, #2
 80180c0:	d109      	bne.n	80180d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80180c2:	4b11      	ldr	r3, [pc, #68]	; (8018108 <xTimerGenericCommand+0x98>)
 80180c4:	6818      	ldr	r0, [r3, #0]
 80180c6:	f107 0110 	add.w	r1, r7, #16
 80180ca:	2300      	movs	r3, #0
 80180cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180ce:	f7fe f8c1 	bl	8016254 <xQueueGenericSend>
 80180d2:	6278      	str	r0, [r7, #36]	; 0x24
 80180d4:	e012      	b.n	80180fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80180d6:	4b0c      	ldr	r3, [pc, #48]	; (8018108 <xTimerGenericCommand+0x98>)
 80180d8:	6818      	ldr	r0, [r3, #0]
 80180da:	f107 0110 	add.w	r1, r7, #16
 80180de:	2300      	movs	r3, #0
 80180e0:	2200      	movs	r2, #0
 80180e2:	f7fe f8b7 	bl	8016254 <xQueueGenericSend>
 80180e6:	6278      	str	r0, [r7, #36]	; 0x24
 80180e8:	e008      	b.n	80180fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80180ea:	4b07      	ldr	r3, [pc, #28]	; (8018108 <xTimerGenericCommand+0x98>)
 80180ec:	6818      	ldr	r0, [r3, #0]
 80180ee:	f107 0110 	add.w	r1, r7, #16
 80180f2:	2300      	movs	r3, #0
 80180f4:	683a      	ldr	r2, [r7, #0]
 80180f6:	f7fe f9ab 	bl	8016450 <xQueueGenericSendFromISR>
 80180fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80180fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80180fe:	4618      	mov	r0, r3
 8018100:	3728      	adds	r7, #40	; 0x28
 8018102:	46bd      	mov	sp, r7
 8018104:	bd80      	pop	{r7, pc}
 8018106:	bf00      	nop
 8018108:	2402511c 	.word	0x2402511c

0801810c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b088      	sub	sp, #32
 8018110:	af02      	add	r7, sp, #8
 8018112:	6078      	str	r0, [r7, #4]
 8018114:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018116:	4b22      	ldr	r3, [pc, #136]	; (80181a0 <prvProcessExpiredTimer+0x94>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	68db      	ldr	r3, [r3, #12]
 801811c:	68db      	ldr	r3, [r3, #12]
 801811e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018120:	697b      	ldr	r3, [r7, #20]
 8018122:	3304      	adds	r3, #4
 8018124:	4618      	mov	r0, r3
 8018126:	f7fd fbc1 	bl	80158ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801812a:	697b      	ldr	r3, [r7, #20]
 801812c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018130:	f003 0304 	and.w	r3, r3, #4
 8018134:	2b00      	cmp	r3, #0
 8018136:	d022      	beq.n	801817e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018138:	697b      	ldr	r3, [r7, #20]
 801813a:	699a      	ldr	r2, [r3, #24]
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	18d1      	adds	r1, r2, r3
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	683a      	ldr	r2, [r7, #0]
 8018144:	6978      	ldr	r0, [r7, #20]
 8018146:	f000 f8d1 	bl	80182ec <prvInsertTimerInActiveList>
 801814a:	4603      	mov	r3, r0
 801814c:	2b00      	cmp	r3, #0
 801814e:	d01f      	beq.n	8018190 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018150:	2300      	movs	r3, #0
 8018152:	9300      	str	r3, [sp, #0]
 8018154:	2300      	movs	r3, #0
 8018156:	687a      	ldr	r2, [r7, #4]
 8018158:	2100      	movs	r1, #0
 801815a:	6978      	ldr	r0, [r7, #20]
 801815c:	f7ff ff88 	bl	8018070 <xTimerGenericCommand>
 8018160:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018162:	693b      	ldr	r3, [r7, #16]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d113      	bne.n	8018190 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801816c:	f383 8811 	msr	BASEPRI, r3
 8018170:	f3bf 8f6f 	isb	sy
 8018174:	f3bf 8f4f 	dsb	sy
 8018178:	60fb      	str	r3, [r7, #12]
}
 801817a:	bf00      	nop
 801817c:	e7fe      	b.n	801817c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801817e:	697b      	ldr	r3, [r7, #20]
 8018180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018184:	f023 0301 	bic.w	r3, r3, #1
 8018188:	b2da      	uxtb	r2, r3
 801818a:	697b      	ldr	r3, [r7, #20]
 801818c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018190:	697b      	ldr	r3, [r7, #20]
 8018192:	6a1b      	ldr	r3, [r3, #32]
 8018194:	6978      	ldr	r0, [r7, #20]
 8018196:	4798      	blx	r3
}
 8018198:	bf00      	nop
 801819a:	3718      	adds	r7, #24
 801819c:	46bd      	mov	sp, r7
 801819e:	bd80      	pop	{r7, pc}
 80181a0:	24025114 	.word	0x24025114

080181a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b084      	sub	sp, #16
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80181ac:	f107 0308 	add.w	r3, r7, #8
 80181b0:	4618      	mov	r0, r3
 80181b2:	f000 f857 	bl	8018264 <prvGetNextExpireTime>
 80181b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80181b8:	68bb      	ldr	r3, [r7, #8]
 80181ba:	4619      	mov	r1, r3
 80181bc:	68f8      	ldr	r0, [r7, #12]
 80181be:	f000 f803 	bl	80181c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80181c2:	f000 f8d5 	bl	8018370 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80181c6:	e7f1      	b.n	80181ac <prvTimerTask+0x8>

080181c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b084      	sub	sp, #16
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	6078      	str	r0, [r7, #4]
 80181d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80181d2:	f7ff f8eb 	bl	80173ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80181d6:	f107 0308 	add.w	r3, r7, #8
 80181da:	4618      	mov	r0, r3
 80181dc:	f000 f866 	bl	80182ac <prvSampleTimeNow>
 80181e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80181e2:	68bb      	ldr	r3, [r7, #8]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d130      	bne.n	801824a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d10a      	bne.n	8018204 <prvProcessTimerOrBlockTask+0x3c>
 80181ee:	687a      	ldr	r2, [r7, #4]
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d806      	bhi.n	8018204 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80181f6:	f7ff f8e7 	bl	80173c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80181fa:	68f9      	ldr	r1, [r7, #12]
 80181fc:	6878      	ldr	r0, [r7, #4]
 80181fe:	f7ff ff85 	bl	801810c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018202:	e024      	b.n	801824e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018204:	683b      	ldr	r3, [r7, #0]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d008      	beq.n	801821c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801820a:	4b13      	ldr	r3, [pc, #76]	; (8018258 <prvProcessTimerOrBlockTask+0x90>)
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d101      	bne.n	8018218 <prvProcessTimerOrBlockTask+0x50>
 8018214:	2301      	movs	r3, #1
 8018216:	e000      	b.n	801821a <prvProcessTimerOrBlockTask+0x52>
 8018218:	2300      	movs	r3, #0
 801821a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801821c:	4b0f      	ldr	r3, [pc, #60]	; (801825c <prvProcessTimerOrBlockTask+0x94>)
 801821e:	6818      	ldr	r0, [r3, #0]
 8018220:	687a      	ldr	r2, [r7, #4]
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	1ad3      	subs	r3, r2, r3
 8018226:	683a      	ldr	r2, [r7, #0]
 8018228:	4619      	mov	r1, r3
 801822a:	f7fe fe45 	bl	8016eb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801822e:	f7ff f8cb 	bl	80173c8 <xTaskResumeAll>
 8018232:	4603      	mov	r3, r0
 8018234:	2b00      	cmp	r3, #0
 8018236:	d10a      	bne.n	801824e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018238:	4b09      	ldr	r3, [pc, #36]	; (8018260 <prvProcessTimerOrBlockTask+0x98>)
 801823a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801823e:	601a      	str	r2, [r3, #0]
 8018240:	f3bf 8f4f 	dsb	sy
 8018244:	f3bf 8f6f 	isb	sy
}
 8018248:	e001      	b.n	801824e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801824a:	f7ff f8bd 	bl	80173c8 <xTaskResumeAll>
}
 801824e:	bf00      	nop
 8018250:	3710      	adds	r7, #16
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}
 8018256:	bf00      	nop
 8018258:	24025118 	.word	0x24025118
 801825c:	2402511c 	.word	0x2402511c
 8018260:	e000ed04 	.word	0xe000ed04

08018264 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018264:	b480      	push	{r7}
 8018266:	b085      	sub	sp, #20
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801826c:	4b0e      	ldr	r3, [pc, #56]	; (80182a8 <prvGetNextExpireTime+0x44>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d101      	bne.n	801827a <prvGetNextExpireTime+0x16>
 8018276:	2201      	movs	r2, #1
 8018278:	e000      	b.n	801827c <prvGetNextExpireTime+0x18>
 801827a:	2200      	movs	r2, #0
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d105      	bne.n	8018294 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018288:	4b07      	ldr	r3, [pc, #28]	; (80182a8 <prvGetNextExpireTime+0x44>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	68db      	ldr	r3, [r3, #12]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	60fb      	str	r3, [r7, #12]
 8018292:	e001      	b.n	8018298 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018294:	2300      	movs	r3, #0
 8018296:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018298:	68fb      	ldr	r3, [r7, #12]
}
 801829a:	4618      	mov	r0, r3
 801829c:	3714      	adds	r7, #20
 801829e:	46bd      	mov	sp, r7
 80182a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a4:	4770      	bx	lr
 80182a6:	bf00      	nop
 80182a8:	24025114 	.word	0x24025114

080182ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b084      	sub	sp, #16
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80182b4:	f7ff f926 	bl	8017504 <xTaskGetTickCount>
 80182b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80182ba:	4b0b      	ldr	r3, [pc, #44]	; (80182e8 <prvSampleTimeNow+0x3c>)
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	68fa      	ldr	r2, [r7, #12]
 80182c0:	429a      	cmp	r2, r3
 80182c2:	d205      	bcs.n	80182d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80182c4:	f000 f936 	bl	8018534 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	2201      	movs	r2, #1
 80182cc:	601a      	str	r2, [r3, #0]
 80182ce:	e002      	b.n	80182d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	2200      	movs	r2, #0
 80182d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80182d6:	4a04      	ldr	r2, [pc, #16]	; (80182e8 <prvSampleTimeNow+0x3c>)
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80182dc:	68fb      	ldr	r3, [r7, #12]
}
 80182de:	4618      	mov	r0, r3
 80182e0:	3710      	adds	r7, #16
 80182e2:	46bd      	mov	sp, r7
 80182e4:	bd80      	pop	{r7, pc}
 80182e6:	bf00      	nop
 80182e8:	24025124 	.word	0x24025124

080182ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b086      	sub	sp, #24
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	60f8      	str	r0, [r7, #12]
 80182f4:	60b9      	str	r1, [r7, #8]
 80182f6:	607a      	str	r2, [r7, #4]
 80182f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80182fa:	2300      	movs	r3, #0
 80182fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	68ba      	ldr	r2, [r7, #8]
 8018302:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	68fa      	ldr	r2, [r7, #12]
 8018308:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801830a:	68ba      	ldr	r2, [r7, #8]
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	429a      	cmp	r2, r3
 8018310:	d812      	bhi.n	8018338 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018312:	687a      	ldr	r2, [r7, #4]
 8018314:	683b      	ldr	r3, [r7, #0]
 8018316:	1ad2      	subs	r2, r2, r3
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	699b      	ldr	r3, [r3, #24]
 801831c:	429a      	cmp	r2, r3
 801831e:	d302      	bcc.n	8018326 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018320:	2301      	movs	r3, #1
 8018322:	617b      	str	r3, [r7, #20]
 8018324:	e01b      	b.n	801835e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018326:	4b10      	ldr	r3, [pc, #64]	; (8018368 <prvInsertTimerInActiveList+0x7c>)
 8018328:	681a      	ldr	r2, [r3, #0]
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	3304      	adds	r3, #4
 801832e:	4619      	mov	r1, r3
 8018330:	4610      	mov	r0, r2
 8018332:	f7fd fa82 	bl	801583a <vListInsert>
 8018336:	e012      	b.n	801835e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018338:	687a      	ldr	r2, [r7, #4]
 801833a:	683b      	ldr	r3, [r7, #0]
 801833c:	429a      	cmp	r2, r3
 801833e:	d206      	bcs.n	801834e <prvInsertTimerInActiveList+0x62>
 8018340:	68ba      	ldr	r2, [r7, #8]
 8018342:	683b      	ldr	r3, [r7, #0]
 8018344:	429a      	cmp	r2, r3
 8018346:	d302      	bcc.n	801834e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018348:	2301      	movs	r3, #1
 801834a:	617b      	str	r3, [r7, #20]
 801834c:	e007      	b.n	801835e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801834e:	4b07      	ldr	r3, [pc, #28]	; (801836c <prvInsertTimerInActiveList+0x80>)
 8018350:	681a      	ldr	r2, [r3, #0]
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	3304      	adds	r3, #4
 8018356:	4619      	mov	r1, r3
 8018358:	4610      	mov	r0, r2
 801835a:	f7fd fa6e 	bl	801583a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801835e:	697b      	ldr	r3, [r7, #20]
}
 8018360:	4618      	mov	r0, r3
 8018362:	3718      	adds	r7, #24
 8018364:	46bd      	mov	sp, r7
 8018366:	bd80      	pop	{r7, pc}
 8018368:	24025118 	.word	0x24025118
 801836c:	24025114 	.word	0x24025114

08018370 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018370:	b580      	push	{r7, lr}
 8018372:	b08e      	sub	sp, #56	; 0x38
 8018374:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018376:	e0ca      	b.n	801850e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	2b00      	cmp	r3, #0
 801837c:	da18      	bge.n	80183b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801837e:	1d3b      	adds	r3, r7, #4
 8018380:	3304      	adds	r3, #4
 8018382:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018386:	2b00      	cmp	r3, #0
 8018388:	d10a      	bne.n	80183a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801838e:	f383 8811 	msr	BASEPRI, r3
 8018392:	f3bf 8f6f 	isb	sy
 8018396:	f3bf 8f4f 	dsb	sy
 801839a:	61fb      	str	r3, [r7, #28]
}
 801839c:	bf00      	nop
 801839e:	e7fe      	b.n	801839e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80183a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183a6:	6850      	ldr	r0, [r2, #4]
 80183a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183aa:	6892      	ldr	r2, [r2, #8]
 80183ac:	4611      	mov	r1, r2
 80183ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	f2c0 80aa 	blt.w	801850c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80183bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183be:	695b      	ldr	r3, [r3, #20]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d004      	beq.n	80183ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80183c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183c6:	3304      	adds	r3, #4
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7fd fa6f 	bl	80158ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80183ce:	463b      	mov	r3, r7
 80183d0:	4618      	mov	r0, r3
 80183d2:	f7ff ff6b 	bl	80182ac <prvSampleTimeNow>
 80183d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2b09      	cmp	r3, #9
 80183dc:	f200 8097 	bhi.w	801850e <prvProcessReceivedCommands+0x19e>
 80183e0:	a201      	add	r2, pc, #4	; (adr r2, 80183e8 <prvProcessReceivedCommands+0x78>)
 80183e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183e6:	bf00      	nop
 80183e8:	08018411 	.word	0x08018411
 80183ec:	08018411 	.word	0x08018411
 80183f0:	08018411 	.word	0x08018411
 80183f4:	08018485 	.word	0x08018485
 80183f8:	08018499 	.word	0x08018499
 80183fc:	080184e3 	.word	0x080184e3
 8018400:	08018411 	.word	0x08018411
 8018404:	08018411 	.word	0x08018411
 8018408:	08018485 	.word	0x08018485
 801840c:	08018499 	.word	0x08018499
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018416:	f043 0301 	orr.w	r3, r3, #1
 801841a:	b2da      	uxtb	r2, r3
 801841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801841e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018422:	68ba      	ldr	r2, [r7, #8]
 8018424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018426:	699b      	ldr	r3, [r3, #24]
 8018428:	18d1      	adds	r1, r2, r3
 801842a:	68bb      	ldr	r3, [r7, #8]
 801842c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801842e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018430:	f7ff ff5c 	bl	80182ec <prvInsertTimerInActiveList>
 8018434:	4603      	mov	r3, r0
 8018436:	2b00      	cmp	r3, #0
 8018438:	d069      	beq.n	801850e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801843c:	6a1b      	ldr	r3, [r3, #32]
 801843e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018440:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018448:	f003 0304 	and.w	r3, r3, #4
 801844c:	2b00      	cmp	r3, #0
 801844e:	d05e      	beq.n	801850e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018450:	68ba      	ldr	r2, [r7, #8]
 8018452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018454:	699b      	ldr	r3, [r3, #24]
 8018456:	441a      	add	r2, r3
 8018458:	2300      	movs	r3, #0
 801845a:	9300      	str	r3, [sp, #0]
 801845c:	2300      	movs	r3, #0
 801845e:	2100      	movs	r1, #0
 8018460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018462:	f7ff fe05 	bl	8018070 <xTimerGenericCommand>
 8018466:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018468:	6a3b      	ldr	r3, [r7, #32]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d14f      	bne.n	801850e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018472:	f383 8811 	msr	BASEPRI, r3
 8018476:	f3bf 8f6f 	isb	sy
 801847a:	f3bf 8f4f 	dsb	sy
 801847e:	61bb      	str	r3, [r7, #24]
}
 8018480:	bf00      	nop
 8018482:	e7fe      	b.n	8018482 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801848a:	f023 0301 	bic.w	r3, r3, #1
 801848e:	b2da      	uxtb	r2, r3
 8018490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018496:	e03a      	b.n	801850e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801849a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801849e:	f043 0301 	orr.w	r3, r3, #1
 80184a2:	b2da      	uxtb	r2, r3
 80184a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80184aa:	68ba      	ldr	r2, [r7, #8]
 80184ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80184b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b2:	699b      	ldr	r3, [r3, #24]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d10a      	bne.n	80184ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80184b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184bc:	f383 8811 	msr	BASEPRI, r3
 80184c0:	f3bf 8f6f 	isb	sy
 80184c4:	f3bf 8f4f 	dsb	sy
 80184c8:	617b      	str	r3, [r7, #20]
}
 80184ca:	bf00      	nop
 80184cc:	e7fe      	b.n	80184cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80184ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184d0:	699a      	ldr	r2, [r3, #24]
 80184d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184d4:	18d1      	adds	r1, r2, r3
 80184d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184dc:	f7ff ff06 	bl	80182ec <prvInsertTimerInActiveList>
					break;
 80184e0:	e015      	b.n	801850e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80184e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184e8:	f003 0302 	and.w	r3, r3, #2
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d103      	bne.n	80184f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80184f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184f2:	f7fd f831 	bl	8015558 <vPortFree>
 80184f6:	e00a      	b.n	801850e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80184f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184fe:	f023 0301 	bic.w	r3, r3, #1
 8018502:	b2da      	uxtb	r2, r3
 8018504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801850a:	e000      	b.n	801850e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801850c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801850e:	4b08      	ldr	r3, [pc, #32]	; (8018530 <prvProcessReceivedCommands+0x1c0>)
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	1d39      	adds	r1, r7, #4
 8018514:	2200      	movs	r2, #0
 8018516:	4618      	mov	r0, r3
 8018518:	f7fe f8c2 	bl	80166a0 <xQueueReceive>
 801851c:	4603      	mov	r3, r0
 801851e:	2b00      	cmp	r3, #0
 8018520:	f47f af2a 	bne.w	8018378 <prvProcessReceivedCommands+0x8>
	}
}
 8018524:	bf00      	nop
 8018526:	bf00      	nop
 8018528:	3730      	adds	r7, #48	; 0x30
 801852a:	46bd      	mov	sp, r7
 801852c:	bd80      	pop	{r7, pc}
 801852e:	bf00      	nop
 8018530:	2402511c 	.word	0x2402511c

08018534 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b088      	sub	sp, #32
 8018538:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801853a:	e048      	b.n	80185ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801853c:	4b2d      	ldr	r3, [pc, #180]	; (80185f4 <prvSwitchTimerLists+0xc0>)
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	68db      	ldr	r3, [r3, #12]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018546:	4b2b      	ldr	r3, [pc, #172]	; (80185f4 <prvSwitchTimerLists+0xc0>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	68db      	ldr	r3, [r3, #12]
 801854c:	68db      	ldr	r3, [r3, #12]
 801854e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	3304      	adds	r3, #4
 8018554:	4618      	mov	r0, r3
 8018556:	f7fd f9a9 	bl	80158ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	6a1b      	ldr	r3, [r3, #32]
 801855e:	68f8      	ldr	r0, [r7, #12]
 8018560:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018568:	f003 0304 	and.w	r3, r3, #4
 801856c:	2b00      	cmp	r3, #0
 801856e:	d02e      	beq.n	80185ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	699b      	ldr	r3, [r3, #24]
 8018574:	693a      	ldr	r2, [r7, #16]
 8018576:	4413      	add	r3, r2
 8018578:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801857a:	68ba      	ldr	r2, [r7, #8]
 801857c:	693b      	ldr	r3, [r7, #16]
 801857e:	429a      	cmp	r2, r3
 8018580:	d90e      	bls.n	80185a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	68ba      	ldr	r2, [r7, #8]
 8018586:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	68fa      	ldr	r2, [r7, #12]
 801858c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801858e:	4b19      	ldr	r3, [pc, #100]	; (80185f4 <prvSwitchTimerLists+0xc0>)
 8018590:	681a      	ldr	r2, [r3, #0]
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	3304      	adds	r3, #4
 8018596:	4619      	mov	r1, r3
 8018598:	4610      	mov	r0, r2
 801859a:	f7fd f94e 	bl	801583a <vListInsert>
 801859e:	e016      	b.n	80185ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80185a0:	2300      	movs	r3, #0
 80185a2:	9300      	str	r3, [sp, #0]
 80185a4:	2300      	movs	r3, #0
 80185a6:	693a      	ldr	r2, [r7, #16]
 80185a8:	2100      	movs	r1, #0
 80185aa:	68f8      	ldr	r0, [r7, #12]
 80185ac:	f7ff fd60 	bl	8018070 <xTimerGenericCommand>
 80185b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d10a      	bne.n	80185ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80185b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185bc:	f383 8811 	msr	BASEPRI, r3
 80185c0:	f3bf 8f6f 	isb	sy
 80185c4:	f3bf 8f4f 	dsb	sy
 80185c8:	603b      	str	r3, [r7, #0]
}
 80185ca:	bf00      	nop
 80185cc:	e7fe      	b.n	80185cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80185ce:	4b09      	ldr	r3, [pc, #36]	; (80185f4 <prvSwitchTimerLists+0xc0>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d1b1      	bne.n	801853c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80185d8:	4b06      	ldr	r3, [pc, #24]	; (80185f4 <prvSwitchTimerLists+0xc0>)
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80185de:	4b06      	ldr	r3, [pc, #24]	; (80185f8 <prvSwitchTimerLists+0xc4>)
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	4a04      	ldr	r2, [pc, #16]	; (80185f4 <prvSwitchTimerLists+0xc0>)
 80185e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80185e6:	4a04      	ldr	r2, [pc, #16]	; (80185f8 <prvSwitchTimerLists+0xc4>)
 80185e8:	697b      	ldr	r3, [r7, #20]
 80185ea:	6013      	str	r3, [r2, #0]
}
 80185ec:	bf00      	nop
 80185ee:	3718      	adds	r7, #24
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}
 80185f4:	24025114 	.word	0x24025114
 80185f8:	24025118 	.word	0x24025118

080185fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018602:	f7fd faa7 	bl	8015b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018606:	4b15      	ldr	r3, [pc, #84]	; (801865c <prvCheckForValidListAndQueue+0x60>)
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d120      	bne.n	8018650 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801860e:	4814      	ldr	r0, [pc, #80]	; (8018660 <prvCheckForValidListAndQueue+0x64>)
 8018610:	f7fd f8c2 	bl	8015798 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018614:	4813      	ldr	r0, [pc, #76]	; (8018664 <prvCheckForValidListAndQueue+0x68>)
 8018616:	f7fd f8bf 	bl	8015798 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801861a:	4b13      	ldr	r3, [pc, #76]	; (8018668 <prvCheckForValidListAndQueue+0x6c>)
 801861c:	4a10      	ldr	r2, [pc, #64]	; (8018660 <prvCheckForValidListAndQueue+0x64>)
 801861e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018620:	4b12      	ldr	r3, [pc, #72]	; (801866c <prvCheckForValidListAndQueue+0x70>)
 8018622:	4a10      	ldr	r2, [pc, #64]	; (8018664 <prvCheckForValidListAndQueue+0x68>)
 8018624:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018626:	2300      	movs	r3, #0
 8018628:	9300      	str	r3, [sp, #0]
 801862a:	4b11      	ldr	r3, [pc, #68]	; (8018670 <prvCheckForValidListAndQueue+0x74>)
 801862c:	4a11      	ldr	r2, [pc, #68]	; (8018674 <prvCheckForValidListAndQueue+0x78>)
 801862e:	2110      	movs	r1, #16
 8018630:	200a      	movs	r0, #10
 8018632:	f7fd fc19 	bl	8015e68 <xQueueGenericCreateStatic>
 8018636:	4603      	mov	r3, r0
 8018638:	4a08      	ldr	r2, [pc, #32]	; (801865c <prvCheckForValidListAndQueue+0x60>)
 801863a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801863c:	4b07      	ldr	r3, [pc, #28]	; (801865c <prvCheckForValidListAndQueue+0x60>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	2b00      	cmp	r3, #0
 8018642:	d005      	beq.n	8018650 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018644:	4b05      	ldr	r3, [pc, #20]	; (801865c <prvCheckForValidListAndQueue+0x60>)
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	490b      	ldr	r1, [pc, #44]	; (8018678 <prvCheckForValidListAndQueue+0x7c>)
 801864a:	4618      	mov	r0, r3
 801864c:	f7fe fbe0 	bl	8016e10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018650:	f7fd fab0 	bl	8015bb4 <vPortExitCritical>
}
 8018654:	bf00      	nop
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}
 801865a:	bf00      	nop
 801865c:	2402511c 	.word	0x2402511c
 8018660:	240250ec 	.word	0x240250ec
 8018664:	24025100 	.word	0x24025100
 8018668:	24025114 	.word	0x24025114
 801866c:	24025118 	.word	0x24025118
 8018670:	240251c8 	.word	0x240251c8
 8018674:	24025128 	.word	0x24025128
 8018678:	0802ae0c 	.word	0x0802ae0c

0801867c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 801867c:	b480      	push	{r7}
 801867e:	b097      	sub	sp, #92	; 0x5c
 8018680:	af00      	add	r7, sp, #0
 8018682:	60f8      	str	r0, [r7, #12]
 8018684:	60b9      	str	r1, [r7, #8]
 8018686:	607a      	str	r2, [r7, #4]
 8018688:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 801868a:	683b      	ldr	r3, [r7, #0]
 801868c:	4a9a      	ldr	r2, [pc, #616]	; (80188f8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x27c>)
 801868e:	fba2 2303 	umull	r2, r3, r2, r3
 8018692:	0a1b      	lsrs	r3, r3, #8
 8018694:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801869a:	e11e      	b.n	80188da <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25e>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 801869c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801869e:	011a      	lsls	r2, r3, #4
 80186a0:	4b96      	ldr	r3, [pc, #600]	; (80188fc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80186a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80186a8:	011b      	lsls	r3, r3, #4
 80186aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80186ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80186ae:	011b      	lsls	r3, r3, #4
 80186b0:	4a92      	ldr	r2, [pc, #584]	; (80188fc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80186b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80186b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80186b8:	fb01 f202 	mul.w	r2, r1, r2
 80186bc:	1a9b      	subs	r3, r3, r2
 80186be:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80186c0:	4b8e      	ldr	r3, [pc, #568]	; (80188fc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80186c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186c6:	fb02 f103 	mul.w	r1, r2, r3
 80186ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80186cc:	4613      	mov	r3, r2
 80186ce:	005b      	lsls	r3, r3, #1
 80186d0:	4413      	add	r3, r2
 80186d2:	440b      	add	r3, r1
 80186d4:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80186d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80186d8:	3301      	adds	r3, #1
 80186da:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80186e2:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  16; i+=2)
 80186e8:	2300      	movs	r3, #0
 80186ea:	657b      	str	r3, [r7, #84]	; 0x54
 80186ec:	e0ed      	b.n	80188ca <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24e>
    {
      if(i == 8)
 80186ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80186f0:	2b08      	cmp	r3, #8
 80186f2:	d102      	bne.n	80186fa <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      {
        pLum = pInBuffer + 128;
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	3380      	adds	r3, #128	; 0x80
 80186f8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80186fa:	4b80      	ldr	r3, [pc, #512]	; (80188fc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80186fc:	691b      	ldr	r3, [r3, #16]
 80186fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018700:	429a      	cmp	r2, r3
 8018702:	f080 80df 	bcs.w	80188c4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x248>
      {
        pOutAddr = pOutBuffer + refline;
 8018706:	68ba      	ldr	r2, [r7, #8]
 8018708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801870a:	4413      	add	r3, r2
 801870c:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 801870e:	4b7b      	ldr	r3, [pc, #492]	; (80188fc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 8018710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018712:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018714:	4413      	add	r3, r2
 8018716:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        for(k= 0; k<2; k++)
 8018718:	2300      	movs	r3, #0
 801871a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801871c:	e0c5      	b.n	80188aa <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22e>
        {
          for(j=0; j < 8; j+=2)
 801871e:	2300      	movs	r3, #0
 8018720:	653b      	str	r3, [r7, #80]	; 0x50
 8018722:	e0b8      	b.n	8018896 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21a>
          {           
            cbcomp = (int32_t)(*(pChrom));
 8018724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018726:	781b      	ldrb	r3, [r3, #0]
 8018728:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801872c:	009b      	lsls	r3, r3, #2
 801872e:	4a74      	ldr	r2, [pc, #464]	; (8018900 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x284>)
 8018730:	4413      	add	r3, r2
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8018736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018738:	3340      	adds	r3, #64	; 0x40
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 801873e:	69fb      	ldr	r3, [r7, #28]
 8018740:	009b      	lsls	r3, r3, #2
 8018742:	4a70      	ldr	r2, [pc, #448]	; (8018904 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x288>)
 8018744:	4413      	add	r3, r2
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801874a:	69fb      	ldr	r3, [r7, #28]
 801874c:	009b      	lsls	r3, r3, #2
 801874e:	4a6e      	ldr	r2, [pc, #440]	; (8018908 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 8018750:	4413      	add	r3, r2
 8018752:	681a      	ldr	r2, [r3, #0]
 8018754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018756:	009b      	lsls	r3, r3, #2
 8018758:	496c      	ldr	r1, [pc, #432]	; (801890c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 801875a:	440b      	add	r3, r1
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	4413      	add	r3, r2
 8018760:	141b      	asrs	r3, r3, #16
 8018762:	617b      	str	r3, [r7, #20]
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 8018764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018768:	4413      	add	r3, r2
 801876a:	781b      	ldrb	r3, [r3, #0]
 801876c:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801876e:	693a      	ldr	r2, [r7, #16]
 8018770:	69bb      	ldr	r3, [r7, #24]
 8018772:	4413      	add	r3, r2
 8018774:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801877a:	3302      	adds	r3, #2
 801877c:	4964      	ldr	r1, [pc, #400]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801877e:	5c8a      	ldrb	r2, [r1, r2]
 8018780:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8018782:	693a      	ldr	r2, [r7, #16]
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	4413      	add	r3, r2
 8018788:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801878c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801878e:	3301      	adds	r3, #1
 8018790:	495f      	ldr	r1, [pc, #380]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8018792:	5c8a      	ldrb	r2, [r1, r2]
 8018794:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8018796:	693a      	ldr	r2, [r7, #16]
 8018798:	6a3b      	ldr	r3, [r7, #32]
 801879a:	4413      	add	r3, r2
 801879c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80187a0:	4a5b      	ldr	r2, [pc, #364]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80187a2:	5cd2      	ldrb	r2, [r2, r3]
 80187a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187a6:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80187a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187aa:	3301      	adds	r3, #1
 80187ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80187ae:	4413      	add	r3, r2
 80187b0:	781b      	ldrb	r3, [r3, #0]
 80187b2:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80187b4:	693a      	ldr	r2, [r7, #16]
 80187b6:	69bb      	ldr	r3, [r7, #24]
 80187b8:	4413      	add	r3, r2
 80187ba:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80187be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187c0:	3305      	adds	r3, #5
 80187c2:	4953      	ldr	r1, [pc, #332]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80187c4:	5c8a      	ldrb	r2, [r1, r2]
 80187c6:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80187c8:	693a      	ldr	r2, [r7, #16]
 80187ca:	697b      	ldr	r3, [r7, #20]
 80187cc:	4413      	add	r3, r2
 80187ce:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80187d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187d4:	3304      	adds	r3, #4
 80187d6:	494e      	ldr	r1, [pc, #312]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80187d8:	5c8a      	ldrb	r2, [r1, r2]
 80187da:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80187dc:	693a      	ldr	r2, [r7, #16]
 80187de:	6a3b      	ldr	r3, [r7, #32]
 80187e0:	4413      	add	r3, r2
 80187e2:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80187e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187e8:	3303      	adds	r3, #3
 80187ea:	4949      	ldr	r1, [pc, #292]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80187ec:	5c8a      	ldrb	r2, [r1, r2]
 80187ee:	701a      	strb	r2, [r3, #0]

            /**********/            
            ycomp = (int32_t)(*(pLum +j +8));
 80187f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187f2:	3308      	adds	r3, #8
 80187f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80187f6:	4413      	add	r3, r2
 80187f8:	781b      	ldrb	r3, [r3, #0]
 80187fa:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80187fc:	693a      	ldr	r2, [r7, #16]
 80187fe:	69bb      	ldr	r3, [r7, #24]
 8018800:	4413      	add	r3, r2
 8018802:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018808:	3302      	adds	r3, #2
 801880a:	4941      	ldr	r1, [pc, #260]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801880c:	5c8a      	ldrb	r2, [r1, r2]
 801880e:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8018810:	693a      	ldr	r2, [r7, #16]
 8018812:	697b      	ldr	r3, [r7, #20]
 8018814:	4413      	add	r3, r2
 8018816:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801881a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801881c:	3301      	adds	r3, #1
 801881e:	493c      	ldr	r1, [pc, #240]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8018820:	5c8a      	ldrb	r2, [r1, r2]
 8018822:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8018824:	693a      	ldr	r2, [r7, #16]
 8018826:	6a3b      	ldr	r3, [r7, #32]
 8018828:	4413      	add	r3, r2
 801882a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801882e:	4a38      	ldr	r2, [pc, #224]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8018830:	5cd2      	ldrb	r2, [r2, r3]
 8018832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018834:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));            
 8018836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018838:	3309      	adds	r3, #9
 801883a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801883c:	4413      	add	r3, r2
 801883e:	781b      	ldrb	r3, [r3, #0]
 8018840:	613b      	str	r3, [r7, #16]
            
            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8018842:	693a      	ldr	r2, [r7, #16]
 8018844:	69bb      	ldr	r3, [r7, #24]
 8018846:	4413      	add	r3, r2
 8018848:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801884c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801884e:	3305      	adds	r3, #5
 8018850:	492f      	ldr	r1, [pc, #188]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8018852:	5c8a      	ldrb	r2, [r1, r2]
 8018854:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8018856:	693a      	ldr	r2, [r7, #16]
 8018858:	697b      	ldr	r3, [r7, #20]
 801885a:	4413      	add	r3, r2
 801885c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018862:	3304      	adds	r3, #4
 8018864:	492a      	ldr	r1, [pc, #168]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8018866:	5c8a      	ldrb	r2, [r1, r2]
 8018868:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 801886a:	693a      	ldr	r2, [r7, #16]
 801886c:	6a3b      	ldr	r3, [r7, #32]
 801886e:	4413      	add	r3, r2
 8018870:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018876:	3303      	adds	r3, #3
 8018878:	4925      	ldr	r1, [pc, #148]	; (8018910 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801887a:	5c8a      	ldrb	r2, [r1, r2]
 801887c:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801887e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018880:	3306      	adds	r3, #6
 8018882:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8018884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018886:	3306      	adds	r3, #6
 8018888:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 801888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801888c:	3301      	adds	r3, #1
 801888e:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8018890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018892:	3302      	adds	r3, #2
 8018894:	653b      	str	r3, [r7, #80]	; 0x50
 8018896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018898:	2b07      	cmp	r3, #7
 801889a:	f67f af43 	bls.w	8018724 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>
          }
          pLum += 64;                      
 801889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188a0:	3340      	adds	r3, #64	; 0x40
 80188a2:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 80188a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188a6:	3301      	adds	r3, #1
 80188a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80188aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188ac:	2b01      	cmp	r3, #1
 80188ae:	f67f af36 	bls.w	801871e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
        }

        pLum = pLum - 128 + 16;
 80188b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188b4:	3b70      	subs	r3, #112	; 0x70
 80188b6:	637b      	str	r3, [r7, #52]	; 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 80188b8:	4b10      	ldr	r3, [pc, #64]	; (80188fc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80188ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188bc:	005b      	lsls	r3, r3, #1
 80188be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80188c0:	4413      	add	r3, r2
 80188c2:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 80188c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80188c6:	3302      	adds	r3, #2
 80188c8:	657b      	str	r3, [r7, #84]	; 0x54
 80188ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80188cc:	2b0f      	cmp	r3, #15
 80188ce:	f67f af0e 	bls.w	80186ee <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x72>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80188d8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80188da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	4413      	add	r3, r2
 80188e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80188e2:	429a      	cmp	r2, r3
 80188e4:	f4ff aeda 	bcc.w	801869c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80188e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80188ea:	4618      	mov	r0, r3
 80188ec:	375c      	adds	r7, #92	; 0x5c
 80188ee:	46bd      	mov	sp, r7
 80188f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f4:	4770      	bx	lr
 80188f6:	bf00      	nop
 80188f8:	aaaaaaab 	.word	0xaaaaaaab
 80188fc:	24025218 	.word	0x24025218
 8018900:	24025658 	.word	0x24025658
 8018904:	24025258 	.word	0x24025258
 8018908:	24025a58 	.word	0x24025a58
 801890c:	24025e58 	.word	0x24025e58
 8018910:	0802bdbc 	.word	0x0802bdbc

08018914 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8018914:	b480      	push	{r7}
 8018916:	b097      	sub	sp, #92	; 0x5c
 8018918:	af00      	add	r7, sp, #0
 801891a:	60f8      	str	r0, [r7, #12]
 801891c:	60b9      	str	r1, [r7, #8]
 801891e:	607a      	str	r2, [r7, #4]
 8018920:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	0a1b      	lsrs	r3, r3, #8
 8018926:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801892c:	e0c5      	b.n	8018aba <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801892e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018930:	011a      	lsls	r2, r3, #4
 8018932:	4b69      	ldr	r3, [pc, #420]	; (8018ad8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8018934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018936:	fbb2 f3f3 	udiv	r3, r2, r3
 801893a:	00db      	lsls	r3, r3, #3
 801893c:	633b      	str	r3, [r7, #48]	; 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801893e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018940:	011b      	lsls	r3, r3, #4
 8018942:	4a65      	ldr	r2, [pc, #404]	; (8018ad8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8018944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018946:	fbb3 f1f2 	udiv	r1, r3, r2
 801894a:	fb01 f202 	mul.w	r2, r1, r2
 801894e:	1a9b      	subs	r3, r3, r2
 8018950:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8018952:	4b61      	ldr	r3, [pc, #388]	; (8018ad8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8018954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018958:	fb02 f103 	mul.w	r1, r2, r3
 801895c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801895e:	4613      	mov	r3, r2
 8018960:	005b      	lsls	r3, r3, #1
 8018962:	4413      	add	r3, r2
 8018964:	440b      	add	r3, r1
 8018966:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8018968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801896a:	3301      	adds	r3, #1
 801896c:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	3380      	adds	r3, #128	; 0x80
 8018972:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pLum = pInBuffer;
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	63bb      	str	r3, [r7, #56]	; 0x38
    
    for(i= 0; i <  8; i++)
 8018978:	2300      	movs	r3, #0
 801897a:	657b      	str	r3, [r7, #84]	; 0x54
 801897c:	e095      	b.n	8018aaa <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801897e:	4b56      	ldr	r3, [pc, #344]	; (8018ad8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8018980:	691b      	ldr	r3, [r3, #16]
 8018982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018984:	429a      	cmp	r2, r3
 8018986:	f080 808d 	bcs.w	8018aa4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 801898a:	68ba      	ldr	r2, [r7, #8]
 801898c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801898e:	4413      	add	r3, r2
 8018990:	643b      	str	r3, [r7, #64]	; 0x40
        
        for(k= 0; k<2; k++)
 8018992:	2300      	movs	r3, #0
 8018994:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018996:	e07a      	b.n	8018a8e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 8018998:	2300      	movs	r3, #0
 801899a:	653b      	str	r3, [r7, #80]	; 0x50
 801899c:	e06e      	b.n	8018a7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {           
            cbcomp = (int32_t)(*(pChrom));
 801899e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189a0:	781b      	ldrb	r3, [r3, #0]
 80189a2:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80189a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189a6:	009b      	lsls	r3, r3, #2
 80189a8:	4a4c      	ldr	r2, [pc, #304]	; (8018adc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 80189aa:	4413      	add	r3, r2
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	627b      	str	r3, [r7, #36]	; 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 80189b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189b2:	3340      	adds	r3, #64	; 0x40
 80189b4:	781b      	ldrb	r3, [r3, #0]
 80189b6:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80189b8:	6a3b      	ldr	r3, [r7, #32]
 80189ba:	009b      	lsls	r3, r3, #2
 80189bc:	4a48      	ldr	r2, [pc, #288]	; (8018ae0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 80189be:	4413      	add	r3, r2
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80189c4:	6a3b      	ldr	r3, [r7, #32]
 80189c6:	009b      	lsls	r3, r3, #2
 80189c8:	4a46      	ldr	r2, [pc, #280]	; (8018ae4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 80189ca:	4413      	add	r3, r2
 80189cc:	681a      	ldr	r2, [r3, #0]
 80189ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189d0:	009b      	lsls	r3, r3, #2
 80189d2:	4945      	ldr	r1, [pc, #276]	; (8018ae8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 80189d4:	440b      	add	r3, r1
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	4413      	add	r3, r2
 80189da:	141b      	asrs	r3, r3, #16
 80189dc:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 80189de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80189e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189e2:	4413      	add	r3, r2
 80189e4:	781b      	ldrb	r3, [r3, #0]
 80189e6:	617b      	str	r3, [r7, #20]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80189e8:	697a      	ldr	r2, [r7, #20]
 80189ea:	69fb      	ldr	r3, [r7, #28]
 80189ec:	4413      	add	r3, r2
 80189ee:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80189f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189f4:	3302      	adds	r3, #2
 80189f6:	493d      	ldr	r1, [pc, #244]	; (8018aec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80189f8:	5c8a      	ldrb	r2, [r1, r2]
 80189fa:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80189fc:	697a      	ldr	r2, [r7, #20]
 80189fe:	69bb      	ldr	r3, [r7, #24]
 8018a00:	4413      	add	r3, r2
 8018a02:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a08:	3301      	adds	r3, #1
 8018a0a:	4938      	ldr	r1, [pc, #224]	; (8018aec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8018a0c:	5c8a      	ldrb	r2, [r1, r2]
 8018a0e:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8018a10:	697a      	ldr	r2, [r7, #20]
 8018a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a14:	4413      	add	r3, r2
 8018a16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018a1a:	4a34      	ldr	r2, [pc, #208]	; (8018aec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8018a1c:	5cd2      	ldrb	r2, [r2, r3]
 8018a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a20:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8018a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a24:	3301      	adds	r3, #1
 8018a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018a28:	4413      	add	r3, r2
 8018a2a:	781b      	ldrb	r3, [r3, #0]
 8018a2c:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8018a2e:	697a      	ldr	r2, [r7, #20]
 8018a30:	69fb      	ldr	r3, [r7, #28]
 8018a32:	4413      	add	r3, r2
 8018a34:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a3a:	3305      	adds	r3, #5
 8018a3c:	492b      	ldr	r1, [pc, #172]	; (8018aec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8018a3e:	5c8a      	ldrb	r2, [r1, r2]
 8018a40:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8018a42:	697a      	ldr	r2, [r7, #20]
 8018a44:	69bb      	ldr	r3, [r7, #24]
 8018a46:	4413      	add	r3, r2
 8018a48:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a4e:	3304      	adds	r3, #4
 8018a50:	4926      	ldr	r1, [pc, #152]	; (8018aec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8018a52:	5c8a      	ldrb	r2, [r1, r2]
 8018a54:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8018a56:	697a      	ldr	r2, [r7, #20]
 8018a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a5a:	4413      	add	r3, r2
 8018a5c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a62:	3303      	adds	r3, #3
 8018a64:	4921      	ldr	r1, [pc, #132]	; (8018aec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8018a66:	5c8a      	ldrb	r2, [r1, r2]
 8018a68:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8018a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a6c:	3306      	adds	r3, #6
 8018a6e:	643b      	str	r3, [r7, #64]	; 0x40
          
            pChrom++;
 8018a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a72:	3301      	adds	r3, #1
 8018a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8018a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a78:	3302      	adds	r3, #2
 8018a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8018a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a7e:	2b07      	cmp	r3, #7
 8018a80:	d98d      	bls.n	801899e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;                      
 8018a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a84:	3340      	adds	r3, #64	; 0x40
 8018a86:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8018a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a8a:	3301      	adds	r3, #1
 8018a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a90:	2b01      	cmp	r3, #1
 8018a92:	d981      	bls.n	8018998 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }
        
        pLum = pLum - 128 + 8;
 8018a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a96:	3b78      	subs	r3, #120	; 0x78
 8018a98:	63bb      	str	r3, [r7, #56]	; 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 8018a9a:	4b0f      	ldr	r3, [pc, #60]	; (8018ad8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8018a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018aa0:	4413      	add	r3, r2
 8018aa2:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8018aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018aa6:	3301      	adds	r3, #1
 8018aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8018aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018aac:	2b07      	cmp	r3, #7
 8018aae:	f67f af66 	bls.w	801897e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018ab8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8018aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	4413      	add	r3, r2
 8018ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018ac2:	429a      	cmp	r2, r3
 8018ac4:	f4ff af33 	bcc.w	801892e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8018ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018aca:	4618      	mov	r0, r3
 8018acc:	375c      	adds	r7, #92	; 0x5c
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad4:	4770      	bx	lr
 8018ad6:	bf00      	nop
 8018ad8:	24025218 	.word	0x24025218
 8018adc:	24025658 	.word	0x24025658
 8018ae0:	24025258 	.word	0x24025258
 8018ae4:	24025a58 	.word	0x24025a58
 8018ae8:	24025e58 	.word	0x24025e58
 8018aec:	0802bdbc 	.word	0x0802bdbc

08018af0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8018af0:	b480      	push	{r7}
 8018af2:	b095      	sub	sp, #84	; 0x54
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	60f8      	str	r0, [r7, #12]
 8018af8:	60b9      	str	r1, [r7, #8]
 8018afa:	607a      	str	r2, [r7, #4]
 8018afc:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8018afe:	683b      	ldr	r3, [r7, #0]
 8018b00:	4a54      	ldr	r2, [pc, #336]	; (8018c54 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 8018b02:	fba2 2303 	umull	r2, r3, r2, r3
 8018b06:	09db      	lsrs	r3, r3, #7
 8018b08:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	647b      	str	r3, [r7, #68]	; 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 8018b0e:	e092      	b.n	8018c36 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8018b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b12:	00da      	lsls	r2, r3, #3
 8018b14:	4b50      	ldr	r3, [pc, #320]	; (8018c58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8018b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b1c:	00db      	lsls	r3, r3, #3
 8018b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8018b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b22:	00db      	lsls	r3, r3, #3
 8018b24:	4a4c      	ldr	r2, [pc, #304]	; (8018c58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8018b26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8018b2c:	fb01 f202 	mul.w	r2, r1, r2
 8018b30:	1a9b      	subs	r3, r3, r2
 8018b32:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8018b34:	4b48      	ldr	r3, [pc, #288]	; (8018c58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8018b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018b3a:	fb02 f103 	mul.w	r1, r2, r3
 8018b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b40:	4613      	mov	r3, r2
 8018b42:	005b      	lsls	r3, r3, #1
 8018b44:	4413      	add	r3, r2
 8018b46:	440b      	add	r3, r1
 8018b48:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;   
 8018b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b4c:	3301      	adds	r3, #1
 8018b4e:	647b      	str	r3, [r7, #68]	; 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	3340      	adds	r3, #64	; 0x40
 8018b54:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  8; i++)
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018b5e:	e064      	b.n	8018c2a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8018b60:	4b3d      	ldr	r3, [pc, #244]	; (8018c58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8018b62:	691b      	ldr	r3, [r3, #16]
 8018b64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018b66:	429a      	cmp	r2, r3
 8018b68:	d25c      	bcs.n	8018c24 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 8018b6a:	68ba      	ldr	r2, [r7, #8]
 8018b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b6e:	4413      	add	r3, r2
 8018b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        

          for(j=0; j < 8; j++)
 8018b72:	2300      	movs	r3, #0
 8018b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8018b76:	e04a      	b.n	8018c0e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {           
            cbcomp = (int32_t)(*pChrom);
 8018b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b7a:	781b      	ldrb	r3, [r3, #0]
 8018b7c:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8018b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b80:	009b      	lsls	r3, r3, #2
 8018b82:	4a36      	ldr	r2, [pc, #216]	; (8018c5c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 8018b84:	4413      	add	r3, r2
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8018b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b8c:	3340      	adds	r3, #64	; 0x40
 8018b8e:	781b      	ldrb	r3, [r3, #0]
 8018b90:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8018b92:	69fb      	ldr	r3, [r7, #28]
 8018b94:	009b      	lsls	r3, r3, #2
 8018b96:	4a32      	ldr	r2, [pc, #200]	; (8018c60 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 8018b98:	4413      	add	r3, r2
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8018b9e:	69fb      	ldr	r3, [r7, #28]
 8018ba0:	009b      	lsls	r3, r3, #2
 8018ba2:	4a30      	ldr	r2, [pc, #192]	; (8018c64 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 8018ba4:	4413      	add	r3, r2
 8018ba6:	681a      	ldr	r2, [r3, #0]
 8018ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018baa:	009b      	lsls	r3, r3, #2
 8018bac:	492e      	ldr	r1, [pc, #184]	; (8018c68 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8018bae:	440b      	add	r3, r1
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	4413      	add	r3, r2
 8018bb4:	141b      	asrs	r3, r3, #16
 8018bb6:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
            ycomp = (int32_t)(*(pLum +j));
 8018bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018bbc:	4413      	add	r3, r2
 8018bbe:	781b      	ldrb	r3, [r3, #0]
 8018bc0:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8018bc2:	693a      	ldr	r2, [r7, #16]
 8018bc4:	69bb      	ldr	r3, [r7, #24]
 8018bc6:	4413      	add	r3, r2
 8018bc8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bce:	3302      	adds	r3, #2
 8018bd0:	4926      	ldr	r1, [pc, #152]	; (8018c6c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8018bd2:	5c8a      	ldrb	r2, [r1, r2]
 8018bd4:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8018bd6:	693a      	ldr	r2, [r7, #16]
 8018bd8:	697b      	ldr	r3, [r7, #20]
 8018bda:	4413      	add	r3, r2
 8018bdc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018be2:	3301      	adds	r3, #1
 8018be4:	4921      	ldr	r1, [pc, #132]	; (8018c6c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8018be6:	5c8a      	ldrb	r2, [r1, r2]
 8018be8:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        
 8018bea:	693a      	ldr	r2, [r7, #16]
 8018bec:	6a3b      	ldr	r3, [r7, #32]
 8018bee:	4413      	add	r3, r2
 8018bf0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018bf4:	4a1d      	ldr	r2, [pc, #116]	; (8018c6c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8018bf6:	5cd2      	ldrb	r2, [r2, r3]
 8018bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bfa:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8018bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bfe:	3303      	adds	r3, #3
 8018c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 8018c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c04:	3301      	adds	r3, #1
 8018c06:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8018c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018c0a:	3301      	adds	r3, #1
 8018c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8018c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018c10:	2b07      	cmp	r3, #7
 8018c12:	d9b1      	bls.n	8018b78 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 8018c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c16:	3308      	adds	r3, #8
 8018c18:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8018c1a:	4b0f      	ldr	r3, [pc, #60]	; (8018c58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8018c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018c20:	4413      	add	r3, r2
 8018c22:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 8018c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c26:	3301      	adds	r3, #1
 8018c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c2c:	2b07      	cmp	r3, #7
 8018c2e:	d997      	bls.n	8018b60 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	33c0      	adds	r3, #192	; 0xc0
 8018c34:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8018c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	4413      	add	r3, r2
 8018c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018c3e:	429a      	cmp	r2, r3
 8018c40:	f4ff af66 	bcc.w	8018b10 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8018c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8018c46:	4618      	mov	r0, r3
 8018c48:	3754      	adds	r7, #84	; 0x54
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c50:	4770      	bx	lr
 8018c52:	bf00      	nop
 8018c54:	aaaaaaab 	.word	0xaaaaaaab
 8018c58:	24025218 	.word	0x24025218
 8018c5c:	24025658 	.word	0x24025658
 8018c60:	24025258 	.word	0x24025258
 8018c64:	24025a58 	.word	0x24025a58
 8018c68:	24025e58 	.word	0x24025e58
 8018c6c:	0802bdbc 	.word	0x0802bdbc

08018c70 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8018c70:	b480      	push	{r7}
 8018c72:	b08f      	sub	sp, #60	; 0x3c
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	60f8      	str	r0, [r7, #12]
 8018c78:	60b9      	str	r1, [r7, #8]
 8018c7a:	607a      	str	r2, [r7, #4]
 8018c7c:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	099b      	lsrs	r3, r3, #6
 8018c82:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	637b      	str	r3, [r7, #52]	; 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 8018c88:	e05b      	b.n	8018d42 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8018c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c8c:	00da      	lsls	r2, r3, #3
 8018c8e:	4b33      	ldr	r3, [pc, #204]	; (8018d5c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8018c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c96:	00db      	lsls	r3, r3, #3
 8018c98:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8018c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c9c:	00db      	lsls	r3, r3, #3
 8018c9e:	4a2f      	ldr	r2, [pc, #188]	; (8018d5c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8018ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018ca2:	fbb3 f1f2 	udiv	r1, r3, r2
 8018ca6:	fb01 f202 	mul.w	r2, r1, r2
 8018caa:	1a9b      	subs	r3, r3, r2
 8018cac:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8018cae:	4b2b      	ldr	r3, [pc, #172]	; (8018d5c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8018cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cb2:	69ba      	ldr	r2, [r7, #24]
 8018cb4:	fb02 f103 	mul.w	r1, r2, r3
 8018cb8:	697a      	ldr	r2, [r7, #20]
 8018cba:	4613      	mov	r3, r2
 8018cbc:	005b      	lsls	r3, r3, #1
 8018cbe:	4413      	add	r3, r2
 8018cc0:	440b      	add	r3, r1
 8018cc2:	633b      	str	r3, [r7, #48]	; 0x30
    
    currentMCU++;
 8018cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cc6:	3301      	adds	r3, #1
 8018cc8:	637b      	str	r3, [r7, #52]	; 0x34
  
    pLum = pInBuffer;
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 8018cce:	2300      	movs	r3, #0
 8018cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018cd2:	e030      	b.n	8018d36 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    { 
      pOutAddr = pOutBuffer + refline;
 8018cd4:	68ba      	ldr	r2, [r7, #8]
 8018cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cd8:	4413      	add	r3, r2
 8018cda:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8018cdc:	4b1f      	ldr	r3, [pc, #124]	; (8018d5c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8018cde:	691b      	ldr	r3, [r3, #16]
 8018ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ce2:	429a      	cmp	r2, r3
 8018ce4:	d224      	bcs.n	8018d30 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {  
        for(j=0; j < 8; j++)
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8018cea:	e019      	b.n	8018d20 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        { 
          ySample =   (uint32_t)(*pLum);
 8018cec:	6a3b      	ldr	r3, [r7, #32]
 8018cee:	781b      	ldrb	r3, [r3, #0]
 8018cf0:	613b      	str	r3, [r7, #16]
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
          pOutAddr[0] =  ySample;
 8018cf2:	693b      	ldr	r3, [r7, #16]
 8018cf4:	b2da      	uxtb	r2, r3
 8018cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cf8:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 8018cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cfc:	3301      	adds	r3, #1
 8018cfe:	693a      	ldr	r2, [r7, #16]
 8018d00:	b2d2      	uxtb	r2, r2
 8018d02:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;     
 8018d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d06:	3302      	adds	r3, #2
 8018d08:	693a      	ldr	r2, [r7, #16]
 8018d0a:	b2d2      	uxtb	r2, r2
 8018d0c:	701a      	strb	r2, [r3, #0]
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 8018d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d10:	3303      	adds	r3, #3
 8018d12:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 8018d14:	6a3b      	ldr	r3, [r7, #32]
 8018d16:	3301      	adds	r3, #1
 8018d18:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 8018d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d1c:	3301      	adds	r3, #1
 8018d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d22:	2b07      	cmp	r3, #7
 8018d24:	d9e2      	bls.n	8018cec <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 8018d26:	4b0d      	ldr	r3, [pc, #52]	; (8018d5c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8018d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018d2c:	4413      	add	r3, r2
 8018d2e:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 8018d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d32:	3301      	adds	r3, #1
 8018d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d38:	2b07      	cmp	r3, #7
 8018d3a:	d9cb      	bls.n	8018cd4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	3340      	adds	r3, #64	; 0x40
 8018d40:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8018d42:	69fa      	ldr	r2, [r7, #28]
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	4413      	add	r3, r2
 8018d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018d4a:	429a      	cmp	r2, r3
 8018d4c:	d39d      	bcc.n	8018c8a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8018d4e:	69fb      	ldr	r3, [r7, #28]
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	373c      	adds	r7, #60	; 0x3c
 8018d54:	46bd      	mov	sp, r7
 8018d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d5a:	4770      	bx	lr
 8018d5c:	24025218 	.word	0x24025218

08018d60 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8018d60:	b480      	push	{r7}
 8018d62:	b093      	sub	sp, #76	; 0x4c
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	60f8      	str	r0, [r7, #12]
 8018d68:	60b9      	str	r1, [r7, #8]
 8018d6a:	607a      	str	r2, [r7, #4]
 8018d6c:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	0a1b      	lsrs	r3, r3, #8
 8018d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 8018d78:	e089      	b.n	8018e8e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8018d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018d7c:	00da      	lsls	r2, r3, #3
 8018d7e:	4b4b      	ldr	r3, [pc, #300]	; (8018eac <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8018d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d86:	00db      	lsls	r3, r3, #3
 8018d88:	62bb      	str	r3, [r7, #40]	; 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8018d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018d8c:	00db      	lsls	r3, r3, #3
 8018d8e:	4a47      	ldr	r2, [pc, #284]	; (8018eac <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8018d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018d92:	fbb3 f1f2 	udiv	r1, r3, r2
 8018d96:	fb01 f202 	mul.w	r2, r1, r2
 8018d9a:	1a9b      	subs	r3, r3, r2
 8018d9c:	627b      	str	r3, [r7, #36]	; 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8018d9e:	4b43      	ldr	r3, [pc, #268]	; (8018eac <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8018da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018da4:	fb02 f103 	mul.w	r1, r2, r3
 8018da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018daa:	4613      	mov	r3, r2
 8018dac:	005b      	lsls	r3, r3, #1
 8018dae:	4413      	add	r3, r2
 8018db0:	440b      	add	r3, r1
 8018db2:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8018db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018db6:	3301      	adds	r3, #1
 8018db8:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pChrom = pInBuffer;
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	633b      	str	r3, [r7, #48]	; 0x30
    
    for(i= 0; i <  8; i++)
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8018dc2:	e05d      	b.n	8018e80 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8018dc4:	4b39      	ldr	r3, [pc, #228]	; (8018eac <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8018dc6:	691b      	ldr	r3, [r3, #16]
 8018dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	d255      	bcs.n	8018e7a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;        
 8018dce:	68ba      	ldr	r2, [r7, #8]
 8018dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dd2:	4413      	add	r3, r2
 8018dd4:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8018dda:	e046      	b.n	8018e6a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 8018ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dde:	33c0      	adds	r3, #192	; 0xc0
 8018de0:	781b      	ldrb	r3, [r3, #0]
 8018de2:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8018de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	461a      	mov	r2, r3
 8018dea:	6a3b      	ldr	r3, [r7, #32]
 8018dec:	fb02 f303 	mul.w	r3, r2, r3
 8018df0:	4a2f      	ldr	r2, [pc, #188]	; (8018eb0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8018df2:	fb82 1203 	smull	r1, r2, r2, r3
 8018df6:	441a      	add	r2, r3
 8018df8:	11d2      	asrs	r2, r2, #7
 8018dfa:	17db      	asrs	r3, r3, #31
 8018dfc:	1ad3      	subs	r3, r2, r3
 8018dfe:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8018e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e02:	3340      	adds	r3, #64	; 0x40
 8018e04:	781b      	ldrb	r3, [r3, #0]
 8018e06:	461a      	mov	r2, r3
 8018e08:	6a3b      	ldr	r3, [r7, #32]
 8018e0a:	fb02 f303 	mul.w	r3, r2, r3
 8018e0e:	4a28      	ldr	r2, [pc, #160]	; (8018eb0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8018e10:	fb82 1203 	smull	r1, r2, r2, r3
 8018e14:	441a      	add	r2, r3
 8018e16:	11d2      	asrs	r2, r2, #7
 8018e18:	17db      	asrs	r3, r3, #31
 8018e1a:	1ad3      	subs	r3, r2, r3
 8018e1c:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8018e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e20:	3380      	adds	r3, #128	; 0x80
 8018e22:	781b      	ldrb	r3, [r3, #0]
 8018e24:	461a      	mov	r2, r3
 8018e26:	6a3b      	ldr	r3, [r7, #32]
 8018e28:	fb02 f303 	mul.w	r3, r2, r3
 8018e2c:	4a20      	ldr	r2, [pc, #128]	; (8018eb0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8018e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8018e32:	441a      	add	r2, r3
 8018e34:	11d2      	asrs	r2, r2, #7
 8018e36:	17db      	asrs	r3, r3, #31
 8018e38:	1ad3      	subs	r3, r2, r3
 8018e3a:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);     
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 8018e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e3e:	3302      	adds	r3, #2
 8018e40:	69fa      	ldr	r2, [r7, #28]
 8018e42:	b2d2      	uxtb	r2, r2
 8018e44:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 8018e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e48:	3301      	adds	r3, #1
 8018e4a:	69ba      	ldr	r2, [r7, #24]
 8018e4c:	b2d2      	uxtb	r2, r2
 8018e4e:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 8018e50:	697b      	ldr	r3, [r7, #20]
 8018e52:	b2da      	uxtb	r2, r3
 8018e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e56:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8018e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e5a:	3303      	adds	r3, #3
 8018e5c:	637b      	str	r3, [r7, #52]	; 0x34
          
            pChrom++;
 8018e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e60:	3301      	adds	r3, #1
 8018e62:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8018e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e66:	3301      	adds	r3, #1
 8018e68:	643b      	str	r3, [r7, #64]	; 0x40
 8018e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e6c:	2b07      	cmp	r3, #7
 8018e6e:	d9b5      	bls.n	8018ddc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8018e70:	4b0e      	ldr	r3, [pc, #56]	; (8018eac <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8018e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018e76:	4413      	add	r3, r2
 8018e78:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 8018e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018e7c:	3301      	adds	r3, #1
 8018e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8018e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018e82:	2b07      	cmp	r3, #7
 8018e84:	d99e      	bls.n	8018dc4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018e8c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8018e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	4413      	add	r3, r2
 8018e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018e96:	429a      	cmp	r2, r3
 8018e98:	f4ff af6f 	bcc.w	8018d7a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8018e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	374c      	adds	r7, #76	; 0x4c
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea8:	4770      	bx	lr
 8018eaa:	bf00      	nop
 8018eac:	24025218 	.word	0x24025218
 8018eb0:	80808081 	.word	0x80808081

08018eb4 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8018eb4:	b480      	push	{r7}
 8018eb6:	b087      	sub	sp, #28
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	60f8      	str	r0, [r7, #12]
 8018ebc:	60b9      	str	r1, [r7, #8]
 8018ebe:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	4a7c      	ldr	r2, [pc, #496]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ec6:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	68db      	ldr	r3, [r3, #12]
 8018ecc:	4a7a      	ldr	r2, [pc, #488]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ece:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	689b      	ldr	r3, [r3, #8]
 8018ed4:	4a78      	ldr	r2, [pc, #480]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ed6:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	68db      	ldr	r3, [r3, #12]
 8018edc:	68fa      	ldr	r2, [r7, #12]
 8018ede:	6892      	ldr	r2, [r2, #8]
 8018ee0:	fb03 f202 	mul.w	r2, r3, r2
 8018ee4:	4613      	mov	r3, r2
 8018ee6:	005b      	lsls	r3, r3, #1
 8018ee8:	4413      	add	r3, r2
 8018eea:	4a73      	ldr	r2, [pc, #460]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018eec:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	685b      	ldr	r3, [r3, #4]
 8018ef2:	4a71      	ldr	r2, [pc, #452]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ef4:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8018ef6:	4b70      	ldr	r3, [pc, #448]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	2b10      	cmp	r3, #16
 8018efc:	d155      	bne.n	8018faa <JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8018efe:	4b6e      	ldr	r3, [pc, #440]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f00:	685b      	ldr	r3, [r3, #4]
 8018f02:	2b01      	cmp	r3, #1
 8018f04:	d119      	bne.n	8018f3a <JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8018f06:	68bb      	ldr	r3, [r7, #8]
 8018f08:	4a6c      	ldr	r2, [pc, #432]	; (80190bc <JPEG_GetDecodeColorConvertFunc+0x208>)
 8018f0a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8018f0c:	4b6a      	ldr	r3, [pc, #424]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f0e:	689b      	ldr	r3, [r3, #8]
 8018f10:	f003 030f 	and.w	r3, r3, #15
 8018f14:	4a68      	ldr	r2, [pc, #416]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f16:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8018f18:	4b67      	ldr	r3, [pc, #412]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f1a:	695b      	ldr	r3, [r3, #20]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d005      	beq.n	8018f2c <JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8018f20:	4b65      	ldr	r3, [pc, #404]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f22:	695b      	ldr	r3, [r3, #20]
 8018f24:	f1c3 0310 	rsb	r3, r3, #16
 8018f28:	4a63      	ldr	r2, [pc, #396]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f2a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8018f2c:	4b62      	ldr	r3, [pc, #392]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f2e:	2210      	movs	r2, #16
 8018f30:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8018f32:	4b61      	ldr	r3, [pc, #388]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f34:	2210      	movs	r2, #16
 8018f36:	621a      	str	r2, [r3, #32]
 8018f38:	e075      	b.n	8019026 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8018f3a:	4b5f      	ldr	r3, [pc, #380]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f3c:	685b      	ldr	r3, [r3, #4]
 8018f3e:	2b02      	cmp	r3, #2
 8018f40:	d119      	bne.n	8018f76 <JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8018f42:	68bb      	ldr	r3, [r7, #8]
 8018f44:	4a5e      	ldr	r2, [pc, #376]	; (80190c0 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 8018f46:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8018f48:	4b5b      	ldr	r3, [pc, #364]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f4a:	689b      	ldr	r3, [r3, #8]
 8018f4c:	f003 030f 	and.w	r3, r3, #15
 8018f50:	4a59      	ldr	r2, [pc, #356]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f52:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8018f54:	4b58      	ldr	r3, [pc, #352]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f56:	695b      	ldr	r3, [r3, #20]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d005      	beq.n	8018f68 <JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8018f5c:	4b56      	ldr	r3, [pc, #344]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f5e:	695b      	ldr	r3, [r3, #20]
 8018f60:	f1c3 0310 	rsb	r3, r3, #16
 8018f64:	4a54      	ldr	r2, [pc, #336]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f66:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8018f68:	4b53      	ldr	r3, [pc, #332]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f6a:	2210      	movs	r2, #16
 8018f6c:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8018f6e:	4b52      	ldr	r3, [pc, #328]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f70:	2208      	movs	r2, #8
 8018f72:	621a      	str	r2, [r3, #32]
 8018f74:	e057      	b.n	8019026 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8018f76:	68bb      	ldr	r3, [r7, #8]
 8018f78:	4a52      	ldr	r2, [pc, #328]	; (80190c4 <JPEG_GetDecodeColorConvertFunc+0x210>)
 8018f7a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8018f7c:	4b4e      	ldr	r3, [pc, #312]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f7e:	689b      	ldr	r3, [r3, #8]
 8018f80:	f003 0307 	and.w	r3, r3, #7
 8018f84:	4a4c      	ldr	r2, [pc, #304]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f86:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8018f88:	4b4b      	ldr	r3, [pc, #300]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f8a:	695b      	ldr	r3, [r3, #20]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d005      	beq.n	8018f9c <JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8018f90:	4b49      	ldr	r3, [pc, #292]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f92:	695b      	ldr	r3, [r3, #20]
 8018f94:	f1c3 0308 	rsb	r3, r3, #8
 8018f98:	4a47      	ldr	r2, [pc, #284]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f9a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8018f9c:	4b46      	ldr	r3, [pc, #280]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018f9e:	2208      	movs	r2, #8
 8018fa0:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8018fa2:	4b45      	ldr	r3, [pc, #276]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018fa4:	2208      	movs	r2, #8
 8018fa6:	621a      	str	r2, [r3, #32]
 8018fa8:	e03d      	b.n	8019026 <JPEG_GetDecodeColorConvertFunc+0x172>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8018faa:	4b43      	ldr	r3, [pc, #268]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d119      	bne.n	8018fe6 <JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8018fb2:	68bb      	ldr	r3, [r7, #8]
 8018fb4:	4a44      	ldr	r2, [pc, #272]	; (80190c8 <JPEG_GetDecodeColorConvertFunc+0x214>)
 8018fb6:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8018fb8:	4b3f      	ldr	r3, [pc, #252]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018fba:	689b      	ldr	r3, [r3, #8]
 8018fbc:	f003 0307 	and.w	r3, r3, #7
 8018fc0:	4a3d      	ldr	r2, [pc, #244]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018fc2:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8018fc4:	4b3c      	ldr	r3, [pc, #240]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018fc6:	695b      	ldr	r3, [r3, #20]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d005      	beq.n	8018fd8 <JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8018fcc:	4b3a      	ldr	r3, [pc, #232]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018fce:	695b      	ldr	r3, [r3, #20]
 8018fd0:	f1c3 0308 	rsb	r3, r3, #8
 8018fd4:	4a38      	ldr	r2, [pc, #224]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018fd6:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8018fd8:	4b37      	ldr	r3, [pc, #220]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018fda:	2208      	movs	r2, #8
 8018fdc:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8018fde:	4b36      	ldr	r3, [pc, #216]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018fe0:	2208      	movs	r2, #8
 8018fe2:	621a      	str	r2, [r3, #32]
 8018fe4:	e01f      	b.n	8019026 <JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8018fe6:	4b34      	ldr	r3, [pc, #208]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	2b30      	cmp	r3, #48	; 0x30
 8018fec:	d119      	bne.n	8019022 <JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8018fee:	68bb      	ldr	r3, [r7, #8]
 8018ff0:	4a36      	ldr	r2, [pc, #216]	; (80190cc <JPEG_GetDecodeColorConvertFunc+0x218>)
 8018ff2:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8018ff4:	4b30      	ldr	r3, [pc, #192]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ff6:	689b      	ldr	r3, [r3, #8]
 8018ff8:	f003 0307 	and.w	r3, r3, #7
 8018ffc:	4a2e      	ldr	r2, [pc, #184]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8018ffe:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8019000:	4b2d      	ldr	r3, [pc, #180]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019002:	695b      	ldr	r3, [r3, #20]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d005      	beq.n	8019014 <JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019008:	4b2b      	ldr	r3, [pc, #172]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801900a:	695b      	ldr	r3, [r3, #20]
 801900c:	f1c3 0308 	rsb	r3, r3, #8
 8019010:	4a29      	ldr	r2, [pc, #164]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019012:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8019014:	4b28      	ldr	r3, [pc, #160]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019016:	2208      	movs	r2, #8
 8019018:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 801901a:	4b27      	ldr	r3, [pc, #156]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801901c:	2208      	movs	r2, #8
 801901e:	621a      	str	r2, [r3, #32]
 8019020:	e001      	b.n	8019026 <JPEG_GetDecodeColorConvertFunc+0x172>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 8019022:	2301      	movs	r3, #1
 8019024:	e042      	b.n	80190ac <JPEG_GetDecodeColorConvertFunc+0x1f8>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8019026:	4b24      	ldr	r3, [pc, #144]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019028:	689a      	ldr	r2, [r3, #8]
 801902a:	4b23      	ldr	r3, [pc, #140]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801902c:	695b      	ldr	r3, [r3, #20]
 801902e:	4413      	add	r3, r2
 8019030:	4a21      	ldr	r2, [pc, #132]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019032:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8019034:	4b20      	ldr	r3, [pc, #128]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019036:	689a      	ldr	r2, [r3, #8]
 8019038:	4613      	mov	r3, r2
 801903a:	005b      	lsls	r3, r3, #1
 801903c:	4413      	add	r3, r2
 801903e:	4a1e      	ldr	r2, [pc, #120]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019040:	6293      	str	r3, [r2, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8019042:	4b1d      	ldr	r3, [pc, #116]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019044:	689a      	ldr	r2, [r3, #8]
 8019046:	4b1c      	ldr	r3, [pc, #112]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019048:	69db      	ldr	r3, [r3, #28]
 801904a:	fbb2 f3f3 	udiv	r3, r2, r3
 801904e:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8019050:	4b19      	ldr	r3, [pc, #100]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019052:	689b      	ldr	r3, [r3, #8]
 8019054:	4a18      	ldr	r2, [pc, #96]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019056:	69d2      	ldr	r2, [r2, #28]
 8019058:	fbb3 f1f2 	udiv	r1, r3, r2
 801905c:	fb01 f202 	mul.w	r2, r1, r2
 8019060:	1a9b      	subs	r3, r3, r2
 8019062:	2b00      	cmp	r3, #0
 8019064:	d002      	beq.n	801906c <JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8019066:	697b      	ldr	r3, [r7, #20]
 8019068:	3301      	adds	r3, #1
 801906a:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 801906c:	4b12      	ldr	r3, [pc, #72]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801906e:	68da      	ldr	r2, [r3, #12]
 8019070:	4b11      	ldr	r3, [pc, #68]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019072:	6a1b      	ldr	r3, [r3, #32]
 8019074:	fbb2 f3f3 	udiv	r3, r2, r3
 8019078:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 801907a:	4b0f      	ldr	r3, [pc, #60]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 801907c:	68db      	ldr	r3, [r3, #12]
 801907e:	4a0e      	ldr	r2, [pc, #56]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019080:	6a12      	ldr	r2, [r2, #32]
 8019082:	fbb3 f1f2 	udiv	r1, r3, r2
 8019086:	fb01 f202 	mul.w	r2, r1, r2
 801908a:	1a9b      	subs	r3, r3, r2
 801908c:	2b00      	cmp	r3, #0
 801908e:	d002      	beq.n	8019096 <JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8019090:	693b      	ldr	r3, [r7, #16]
 8019092:	3301      	adds	r3, #1
 8019094:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8019096:	697b      	ldr	r3, [r7, #20]
 8019098:	693a      	ldr	r2, [r7, #16]
 801909a:	fb02 f303 	mul.w	r3, r2, r3
 801909e:	4a06      	ldr	r2, [pc, #24]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80190a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 80190a2:	4b05      	ldr	r3, [pc, #20]	; (80190b8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80190a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80190aa:	2300      	movs	r3, #0
}
 80190ac:	4618      	mov	r0, r3
 80190ae:	371c      	adds	r7, #28
 80190b0:	46bd      	mov	sp, r7
 80190b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b6:	4770      	bx	lr
 80190b8:	24025218 	.word	0x24025218
 80190bc:	0801867d 	.word	0x0801867d
 80190c0:	08018915 	.word	0x08018915
 80190c4:	08018af1 	.word	0x08018af1
 80190c8:	08018c71 	.word	0x08018c71
 80190cc:	08018d61 	.word	0x08018d61

080190d0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80190d0:	8880      	ldrh	r0, [r0, #4]
 80190d2:	4770      	bx	lr

080190d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80190d4:	b570      	push	{r4, r5, r6, lr}
 80190d6:	6803      	ldr	r3, [r0, #0]
 80190d8:	460c      	mov	r4, r1
 80190da:	2100      	movs	r1, #0
 80190dc:	4605      	mov	r5, r0
 80190de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190e0:	4798      	blx	r3
 80190e2:	4606      	mov	r6, r0
 80190e4:	682b      	ldr	r3, [r5, #0]
 80190e6:	4628      	mov	r0, r5
 80190e8:	1ba4      	subs	r4, r4, r6
 80190ea:	6a1b      	ldr	r3, [r3, #32]
 80190ec:	b2a4      	uxth	r4, r4
 80190ee:	4798      	blx	r3
 80190f0:	fbb4 f0f0 	udiv	r0, r4, r0
 80190f4:	bd70      	pop	{r4, r5, r6, pc}

080190f6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80190f6:	2300      	movs	r3, #0
 80190f8:	8083      	strh	r3, [r0, #4]
 80190fa:	4770      	bx	lr

080190fc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80190fc:	b510      	push	{r4, lr}
 80190fe:	6803      	ldr	r3, [r0, #0]
 8019100:	4604      	mov	r4, r0
 8019102:	8881      	ldrh	r1, [r0, #4]
 8019104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019106:	4798      	blx	r3
 8019108:	88a3      	ldrh	r3, [r4, #4]
 801910a:	3301      	adds	r3, #1
 801910c:	80a3      	strh	r3, [r4, #4]
 801910e:	bd10      	pop	{r4, pc}

08019110 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8019110:	6803      	ldr	r3, [r0, #0]
 8019112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019114:	4718      	bx	r3

08019116 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8019116:	4770      	bx	lr

08019118 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8019118:	4a02      	ldr	r2, [pc, #8]	; (8019124 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801911a:	6002      	str	r2, [r0, #0]
 801911c:	2200      	movs	r2, #0
 801911e:	8082      	strh	r2, [r0, #4]
 8019120:	4770      	bx	lr
 8019122:	bf00      	nop
 8019124:	0802c0c4 	.word	0x0802c0c4

08019128 <_ZN8touchgfx9Container13getFirstChildEv>:
 8019128:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801912a:	4770      	bx	lr

0801912c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801912c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801912e:	2000      	movs	r0, #0
 8019130:	b12b      	cbz	r3, 801913e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019132:	b920      	cbnz	r0, 801913e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019134:	1a5a      	subs	r2, r3, r1
 8019136:	699b      	ldr	r3, [r3, #24]
 8019138:	4250      	negs	r0, r2
 801913a:	4150      	adcs	r0, r2
 801913c:	e7f8      	b.n	8019130 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801913e:	4770      	bx	lr

08019140 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8019140:	2300      	movs	r3, #0
 8019142:	6148      	str	r0, [r1, #20]
 8019144:	618b      	str	r3, [r1, #24]
 8019146:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019148:	b913      	cbnz	r3, 8019150 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801914a:	6281      	str	r1, [r0, #40]	; 0x28
 801914c:	4770      	bx	lr
 801914e:	4613      	mov	r3, r2
 8019150:	699a      	ldr	r2, [r3, #24]
 8019152:	2a00      	cmp	r2, #0
 8019154:	d1fb      	bne.n	801914e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8019156:	6199      	str	r1, [r3, #24]
 8019158:	4770      	bx	lr

0801915a <_ZN8touchgfx9Container9removeAllEv>:
 801915a:	2200      	movs	r2, #0
 801915c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801915e:	b123      	cbz	r3, 801916a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8019160:	6999      	ldr	r1, [r3, #24]
 8019162:	6281      	str	r1, [r0, #40]	; 0x28
 8019164:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8019168:	e7f8      	b.n	801915c <_ZN8touchgfx9Container9removeAllEv+0x2>
 801916a:	4770      	bx	lr

0801916c <_ZN8touchgfx9Container6unlinkEv>:
 801916c:	2300      	movs	r3, #0
 801916e:	6283      	str	r3, [r0, #40]	; 0x28
 8019170:	4770      	bx	lr

08019172 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8019172:	2200      	movs	r2, #0
 8019174:	8002      	strh	r2, [r0, #0]
 8019176:	8042      	strh	r2, [r0, #2]
 8019178:	8082      	strh	r2, [r0, #4]
 801917a:	80c2      	strh	r2, [r0, #6]
 801917c:	4770      	bx	lr

0801917e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801917e:	b570      	push	{r4, r5, r6, lr}
 8019180:	460d      	mov	r5, r1
 8019182:	4616      	mov	r6, r2
 8019184:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019186:	b13c      	cbz	r4, 8019198 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8019188:	6823      	ldr	r3, [r4, #0]
 801918a:	4620      	mov	r0, r4
 801918c:	4632      	mov	r2, r6
 801918e:	4629      	mov	r1, r5
 8019190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019192:	4798      	blx	r3
 8019194:	69a4      	ldr	r4, [r4, #24]
 8019196:	e7f6      	b.n	8019186 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8019198:	bd70      	pop	{r4, r5, r6, pc}

0801919a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801919a:	b538      	push	{r3, r4, r5, lr}
 801919c:	460d      	mov	r5, r1
 801919e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80191a0:	b134      	cbz	r4, 80191b0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80191a2:	682b      	ldr	r3, [r5, #0]
 80191a4:	4621      	mov	r1, r4
 80191a6:	4628      	mov	r0, r5
 80191a8:	689b      	ldr	r3, [r3, #8]
 80191aa:	4798      	blx	r3
 80191ac:	69a4      	ldr	r4, [r4, #24]
 80191ae:	e7f7      	b.n	80191a0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80191b0:	bd38      	pop	{r3, r4, r5, pc}

080191b2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80191b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80191b4:	b19b      	cbz	r3, 80191de <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80191b6:	428b      	cmp	r3, r1
 80191b8:	d109      	bne.n	80191ce <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80191ba:	699a      	ldr	r2, [r3, #24]
 80191bc:	2100      	movs	r1, #0
 80191be:	6159      	str	r1, [r3, #20]
 80191c0:	6282      	str	r2, [r0, #40]	; 0x28
 80191c2:	b902      	cbnz	r2, 80191c6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80191c4:	4770      	bx	lr
 80191c6:	6199      	str	r1, [r3, #24]
 80191c8:	4770      	bx	lr
 80191ca:	4613      	mov	r3, r2
 80191cc:	b13a      	cbz	r2, 80191de <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80191ce:	699a      	ldr	r2, [r3, #24]
 80191d0:	428a      	cmp	r2, r1
 80191d2:	d1fa      	bne.n	80191ca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80191d4:	698a      	ldr	r2, [r1, #24]
 80191d6:	619a      	str	r2, [r3, #24]
 80191d8:	2300      	movs	r3, #0
 80191da:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80191de:	4770      	bx	lr

080191e0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80191e0:	b410      	push	{r4}
 80191e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80191e4:	4604      	mov	r4, r0
 80191e6:	b92b      	cbnz	r3, 80191f4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80191e8:	6803      	ldr	r3, [r0, #0]
 80191ea:	4611      	mov	r1, r2
 80191ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80191f2:	4718      	bx	r3
 80191f4:	b941      	cbnz	r1, 8019208 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80191f6:	6193      	str	r3, [r2, #24]
 80191f8:	6282      	str	r2, [r0, #40]	; 0x28
 80191fa:	6154      	str	r4, [r2, #20]
 80191fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019200:	4770      	bx	lr
 8019202:	4603      	mov	r3, r0
 8019204:	2800      	cmp	r0, #0
 8019206:	d0f9      	beq.n	80191fc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8019208:	4299      	cmp	r1, r3
 801920a:	6998      	ldr	r0, [r3, #24]
 801920c:	d1f9      	bne.n	8019202 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801920e:	6190      	str	r0, [r2, #24]
 8019210:	618a      	str	r2, [r1, #24]
 8019212:	e7f2      	b.n	80191fa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08019214 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8019214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019218:	461f      	mov	r7, r3
 801921a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801921e:	460d      	mov	r5, r1
 8019220:	4616      	mov	r6, r2
 8019222:	b103      	cbz	r3, 8019226 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8019224:	6038      	str	r0, [r7, #0]
 8019226:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019228:	b314      	cbz	r4, 8019270 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801922a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801922e:	b1eb      	cbz	r3, 801926c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019230:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019234:	428d      	cmp	r5, r1
 8019236:	db19      	blt.n	801926c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019238:	b289      	uxth	r1, r1
 801923a:	8923      	ldrh	r3, [r4, #8]
 801923c:	440b      	add	r3, r1
 801923e:	b21b      	sxth	r3, r3
 8019240:	429d      	cmp	r5, r3
 8019242:	da13      	bge.n	801926c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019244:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019248:	4296      	cmp	r6, r2
 801924a:	db0f      	blt.n	801926c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801924c:	b292      	uxth	r2, r2
 801924e:	8963      	ldrh	r3, [r4, #10]
 8019250:	4413      	add	r3, r2
 8019252:	b21b      	sxth	r3, r3
 8019254:	429e      	cmp	r6, r3
 8019256:	da09      	bge.n	801926c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019258:	6823      	ldr	r3, [r4, #0]
 801925a:	1ab2      	subs	r2, r6, r2
 801925c:	1a69      	subs	r1, r5, r1
 801925e:	4620      	mov	r0, r4
 8019260:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8019264:	b212      	sxth	r2, r2
 8019266:	463b      	mov	r3, r7
 8019268:	b209      	sxth	r1, r1
 801926a:	47c0      	blx	r8
 801926c:	69a4      	ldr	r4, [r4, #24]
 801926e:	e7db      	b.n	8019228 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8019270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019274 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8019274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019278:	4c6d      	ldr	r4, [pc, #436]	; (8019430 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801927a:	b0a1      	sub	sp, #132	; 0x84
 801927c:	4606      	mov	r6, r0
 801927e:	6824      	ldr	r4, [r4, #0]
 8019280:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8019282:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8019286:	2400      	movs	r4, #0
 8019288:	9303      	str	r3, [sp, #12]
 801928a:	802c      	strh	r4, [r5, #0]
 801928c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801928e:	802c      	strh	r4, [r5, #0]
 8019290:	601c      	str	r4, [r3, #0]
 8019292:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8019296:	f7ff ffbd 	bl	8019214 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801929a:	f1b9 0f03 	cmp.w	r9, #3
 801929e:	f340 80c1 	ble.w	8019424 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80192a2:	4631      	mov	r1, r6
 80192a4:	a80c      	add	r0, sp, #48	; 0x30
 80192a6:	f004 fe1f 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192aa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80192ae:	9306      	str	r3, [sp, #24]
 80192b0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80192b4:	9307      	str	r3, [sp, #28]
 80192b6:	9b03      	ldr	r3, [sp, #12]
 80192b8:	f8d3 a000 	ldr.w	sl, [r3]
 80192bc:	f1ba 0f00 	cmp.w	sl, #0
 80192c0:	f000 80b3 	beq.w	801942a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80192c4:	4651      	mov	r1, sl
 80192c6:	a810      	add	r0, sp, #64	; 0x40
 80192c8:	f004 fe0e 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192cc:	2002      	movs	r0, #2
 80192ce:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80192d2:	9b01      	ldr	r3, [sp, #4]
 80192d4:	9a06      	ldr	r2, [sp, #24]
 80192d6:	fb91 f1f0 	sdiv	r1, r1, r0
 80192da:	189d      	adds	r5, r3, r2
 80192dc:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80192e0:	9a07      	ldr	r2, [sp, #28]
 80192e2:	4419      	add	r1, r3
 80192e4:	9b02      	ldr	r3, [sp, #8]
 80192e6:	4413      	add	r3, r2
 80192e8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80192ec:	1a6d      	subs	r5, r5, r1
 80192ee:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80192f2:	fb92 f2f0 	sdiv	r2, r2, r0
 80192f6:	440a      	add	r2, r1
 80192f8:	1a9b      	subs	r3, r3, r2
 80192fa:	435b      	muls	r3, r3
 80192fc:	fb05 3505 	mla	r5, r5, r5, r3
 8019300:	4f4c      	ldr	r7, [pc, #304]	; (8019434 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8019302:	ac10      	add	r4, sp, #64	; 0x40
 8019304:	f1b9 0f0c 	cmp.w	r9, #12
 8019308:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801930a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801930c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801930e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019310:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019314:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8019318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801931c:	f04f 0303 	mov.w	r3, #3
 8019320:	bfd8      	it	le
 8019322:	f109 32ff 	addle.w	r2, r9, #4294967295
 8019326:	f04f 0400 	mov.w	r4, #0
 801932a:	f8cd 9000 	str.w	r9, [sp]
 801932e:	bfcc      	ite	gt
 8019330:	4698      	movgt	r8, r3
 8019332:	fb92 f8f3 	sdivle	r8, r2, r3
 8019336:	1c63      	adds	r3, r4, #1
 8019338:	aa10      	add	r2, sp, #64	; 0x40
 801933a:	f004 0401 	and.w	r4, r4, #1
 801933e:	f04f 0b00 	mov.w	fp, #0
 8019342:	9308      	str	r3, [sp, #32]
 8019344:	9b00      	ldr	r3, [sp, #0]
 8019346:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801934a:	fb93 f3f8 	sdiv	r3, r3, r8
 801934e:	3404      	adds	r4, #4
 8019350:	b29b      	uxth	r3, r3
 8019352:	9304      	str	r3, [sp, #16]
 8019354:	9a04      	ldr	r2, [sp, #16]
 8019356:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801935a:	fb13 f302 	smulbb	r3, r3, r2
 801935e:	9a01      	ldr	r2, [sp, #4]
 8019360:	b29b      	uxth	r3, r3
 8019362:	1899      	adds	r1, r3, r2
 8019364:	9305      	str	r3, [sp, #20]
 8019366:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801936a:	b209      	sxth	r1, r1
 801936c:	4299      	cmp	r1, r3
 801936e:	db4d      	blt.n	801940c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019370:	8932      	ldrh	r2, [r6, #8]
 8019372:	4413      	add	r3, r2
 8019374:	b21b      	sxth	r3, r3
 8019376:	4299      	cmp	r1, r3
 8019378:	da48      	bge.n	801940c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801937a:	9b04      	ldr	r3, [sp, #16]
 801937c:	6827      	ldr	r7, [r4, #0]
 801937e:	fb17 f703 	smulbb	r7, r7, r3
 8019382:	9b02      	ldr	r3, [sp, #8]
 8019384:	b2bf      	uxth	r7, r7
 8019386:	18fa      	adds	r2, r7, r3
 8019388:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801938c:	b212      	sxth	r2, r2
 801938e:	429a      	cmp	r2, r3
 8019390:	db3c      	blt.n	801940c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019392:	8970      	ldrh	r0, [r6, #10]
 8019394:	4403      	add	r3, r0
 8019396:	b21b      	sxth	r3, r3
 8019398:	429a      	cmp	r2, r3
 801939a:	da37      	bge.n	801940c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801939c:	2300      	movs	r3, #0
 801939e:	4630      	mov	r0, r6
 80193a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80193a2:	ab0b      	add	r3, sp, #44	; 0x2c
 80193a4:	f7ff ff36 	bl	8019214 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80193a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80193aa:	b37a      	cbz	r2, 801940c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80193ac:	4552      	cmp	r2, sl
 80193ae:	d02d      	beq.n	801940c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80193b0:	4611      	mov	r1, r2
 80193b2:	a80e      	add	r0, sp, #56	; 0x38
 80193b4:	9209      	str	r2, [sp, #36]	; 0x24
 80193b6:	f004 fd97 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80193ba:	f04f 0e02 	mov.w	lr, #2
 80193be:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80193c2:	9a06      	ldr	r2, [sp, #24]
 80193c4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80193c8:	9b01      	ldr	r3, [sp, #4]
 80193ca:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80193ce:	4413      	add	r3, r2
 80193d0:	9a07      	ldr	r2, [sp, #28]
 80193d2:	fb91 f1fe 	sdiv	r1, r1, lr
 80193d6:	fb9c fcfe 	sdiv	ip, ip, lr
 80193da:	4401      	add	r1, r0
 80193dc:	1a58      	subs	r0, r3, r1
 80193de:	9b02      	ldr	r3, [sp, #8]
 80193e0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80193e4:	4413      	add	r3, r2
 80193e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80193e8:	448c      	add	ip, r1
 80193ea:	eba3 030c 	sub.w	r3, r3, ip
 80193ee:	435b      	muls	r3, r3
 80193f0:	fb00 3300 	mla	r3, r0, r0, r3
 80193f4:	42ab      	cmp	r3, r5
 80193f6:	d208      	bcs.n	801940a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80193f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80193fa:	461d      	mov	r5, r3
 80193fc:	9803      	ldr	r0, [sp, #12]
 80193fe:	6001      	str	r1, [r0, #0]
 8019400:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019402:	9805      	ldr	r0, [sp, #20]
 8019404:	8008      	strh	r0, [r1, #0]
 8019406:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019408:	800f      	strh	r7, [r1, #0]
 801940a:	4692      	mov	sl, r2
 801940c:	f10b 0b01 	add.w	fp, fp, #1
 8019410:	3408      	adds	r4, #8
 8019412:	f1bb 0f04 	cmp.w	fp, #4
 8019416:	d19d      	bne.n	8019354 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8019418:	9b00      	ldr	r3, [sp, #0]
 801941a:	9c08      	ldr	r4, [sp, #32]
 801941c:	444b      	add	r3, r9
 801941e:	4544      	cmp	r4, r8
 8019420:	9300      	str	r3, [sp, #0]
 8019422:	d188      	bne.n	8019336 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8019424:	b021      	add	sp, #132	; 0x84
 8019426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801942a:	f04f 35ff 	mov.w	r5, #4294967295
 801942e:	e767      	b.n	8019300 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8019430:	24026264 	.word	0x24026264
 8019434:	0802ae14 	.word	0x0802ae14

08019438 <_ZN8touchgfx4RectaNERKS0_>:
 8019438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801943c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8019440:	888c      	ldrh	r4, [r1, #4]
 8019442:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019446:	443c      	add	r4, r7
 8019448:	b2a4      	uxth	r4, r4
 801944a:	fa0f f884 	sxth.w	r8, r4
 801944e:	45c1      	cmp	r9, r8
 8019450:	da2f      	bge.n	80194b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019452:	8882      	ldrh	r2, [r0, #4]
 8019454:	444a      	add	r2, r9
 8019456:	b292      	uxth	r2, r2
 8019458:	fa0f fe82 	sxth.w	lr, r2
 801945c:	4577      	cmp	r7, lr
 801945e:	da28      	bge.n	80194b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019460:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019464:	88cb      	ldrh	r3, [r1, #6]
 8019466:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801946a:	442b      	add	r3, r5
 801946c:	b21b      	sxth	r3, r3
 801946e:	429e      	cmp	r6, r3
 8019470:	da1f      	bge.n	80194b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019472:	88c3      	ldrh	r3, [r0, #6]
 8019474:	4433      	add	r3, r6
 8019476:	b29b      	uxth	r3, r3
 8019478:	fa0f fc83 	sxth.w	ip, r3
 801947c:	4565      	cmp	r5, ip
 801947e:	da18      	bge.n	80194b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019480:	454f      	cmp	r7, r9
 8019482:	bfb8      	it	lt
 8019484:	464f      	movlt	r7, r9
 8019486:	42b5      	cmp	r5, r6
 8019488:	bfb8      	it	lt
 801948a:	4635      	movlt	r5, r6
 801948c:	45f0      	cmp	r8, lr
 801948e:	bfd8      	it	le
 8019490:	4622      	movle	r2, r4
 8019492:	1bd2      	subs	r2, r2, r7
 8019494:	8082      	strh	r2, [r0, #4]
 8019496:	884a      	ldrh	r2, [r1, #2]
 8019498:	88c9      	ldrh	r1, [r1, #6]
 801949a:	8007      	strh	r7, [r0, #0]
 801949c:	440a      	add	r2, r1
 801949e:	8045      	strh	r5, [r0, #2]
 80194a0:	b292      	uxth	r2, r2
 80194a2:	b211      	sxth	r1, r2
 80194a4:	458c      	cmp	ip, r1
 80194a6:	bfa8      	it	ge
 80194a8:	4613      	movge	r3, r2
 80194aa:	1b5b      	subs	r3, r3, r5
 80194ac:	80c3      	strh	r3, [r0, #6]
 80194ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194b2:	2300      	movs	r3, #0
 80194b4:	8003      	strh	r3, [r0, #0]
 80194b6:	8043      	strh	r3, [r0, #2]
 80194b8:	8083      	strh	r3, [r0, #4]
 80194ba:	80c3      	strh	r3, [r0, #6]
 80194bc:	e7f7      	b.n	80194ae <_ZN8touchgfx4RectaNERKS0_+0x76>

080194be <_ZNK8touchgfx4Rect7isEmptyEv>:
 80194be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	dd06      	ble.n	80194d4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80194c6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80194ca:	2800      	cmp	r0, #0
 80194cc:	bfcc      	ite	gt
 80194ce:	2000      	movgt	r0, #0
 80194d0:	2001      	movle	r0, #1
 80194d2:	4770      	bx	lr
 80194d4:	2001      	movs	r0, #1
 80194d6:	4770      	bx	lr

080194d8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80194d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194dc:	2300      	movs	r3, #0
 80194de:	4604      	mov	r4, r0
 80194e0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80194e2:	8003      	strh	r3, [r0, #0]
 80194e4:	8043      	strh	r3, [r0, #2]
 80194e6:	8083      	strh	r3, [r0, #4]
 80194e8:	80c3      	strh	r3, [r0, #6]
 80194ea:	2d00      	cmp	r5, #0
 80194ec:	d040      	beq.n	8019570 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80194ee:	1d28      	adds	r0, r5, #4
 80194f0:	f7ff ffe5 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 80194f4:	b988      	cbnz	r0, 801951a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80194f6:	4620      	mov	r0, r4
 80194f8:	f7ff ffe1 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 80194fc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8019500:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019504:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8019508:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801950c:	b138      	cbz	r0, 801951e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801950e:	8022      	strh	r2, [r4, #0]
 8019510:	8063      	strh	r3, [r4, #2]
 8019512:	f8a4 e004 	strh.w	lr, [r4, #4]
 8019516:	f8a4 c006 	strh.w	ip, [r4, #6]
 801951a:	69ad      	ldr	r5, [r5, #24]
 801951c:	e7e5      	b.n	80194ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801951e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019522:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019526:	4290      	cmp	r0, r2
 8019528:	4607      	mov	r7, r0
 801952a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801952e:	460e      	mov	r6, r1
 8019530:	bfa8      	it	ge
 8019532:	4617      	movge	r7, r2
 8019534:	4299      	cmp	r1, r3
 8019536:	4472      	add	r2, lr
 8019538:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801953c:	bfa8      	it	ge
 801953e:	461e      	movge	r6, r3
 8019540:	4440      	add	r0, r8
 8019542:	4471      	add	r1, lr
 8019544:	4463      	add	r3, ip
 8019546:	b200      	sxth	r0, r0
 8019548:	8027      	strh	r7, [r4, #0]
 801954a:	b212      	sxth	r2, r2
 801954c:	8066      	strh	r6, [r4, #2]
 801954e:	b209      	sxth	r1, r1
 8019550:	b21b      	sxth	r3, r3
 8019552:	4290      	cmp	r0, r2
 8019554:	bfac      	ite	ge
 8019556:	ebc7 0200 	rsbge	r2, r7, r0
 801955a:	ebc7 0202 	rsblt	r2, r7, r2
 801955e:	4299      	cmp	r1, r3
 8019560:	bfac      	ite	ge
 8019562:	ebc6 0301 	rsbge	r3, r6, r1
 8019566:	ebc6 0303 	rsblt	r3, r6, r3
 801956a:	80a2      	strh	r2, [r4, #4]
 801956c:	80e3      	strh	r3, [r4, #6]
 801956e:	e7d4      	b.n	801951a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8019570:	4620      	mov	r0, r4
 8019572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019576 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8019576:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801957a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801957e:	b383      	cbz	r3, 80195e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8019580:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019582:	b374      	cbz	r4, 80195e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8019584:	f9b1 5000 	ldrsh.w	r5, [r1]
 8019588:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801958c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8019590:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8019594:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019598:	b303      	cbz	r3, 80195dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801959a:	4668      	mov	r0, sp
 801959c:	1d21      	adds	r1, r4, #4
 801959e:	f8ad 5000 	strh.w	r5, [sp]
 80195a2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80195a6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80195aa:	f8ad 8006 	strh.w	r8, [sp, #6]
 80195ae:	f7ff ff43 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 80195b2:	4668      	mov	r0, sp
 80195b4:	f7ff ff83 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 80195b8:	b980      	cbnz	r0, 80195dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80195ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80195be:	4669      	mov	r1, sp
 80195c0:	88a2      	ldrh	r2, [r4, #4]
 80195c2:	4620      	mov	r0, r4
 80195c4:	1a9b      	subs	r3, r3, r2
 80195c6:	88e2      	ldrh	r2, [r4, #6]
 80195c8:	f8ad 3000 	strh.w	r3, [sp]
 80195cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80195d0:	1a9b      	subs	r3, r3, r2
 80195d2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80195d6:	6823      	ldr	r3, [r4, #0]
 80195d8:	689b      	ldr	r3, [r3, #8]
 80195da:	4798      	blx	r3
 80195dc:	69a4      	ldr	r4, [r4, #24]
 80195de:	2c00      	cmp	r4, #0
 80195e0:	d1d8      	bne.n	8019594 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80195e2:	b002      	add	sp, #8
 80195e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080195e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80195e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80195ea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80195ee:	460d      	mov	r5, r1
 80195f0:	4616      	mov	r6, r2
 80195f2:	b323      	cbz	r3, 801963e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80195f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80195f6:	b314      	cbz	r4, 801963e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80195f8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80195fc:	b1eb      	cbz	r3, 801963a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80195fe:	6828      	ldr	r0, [r5, #0]
 8019600:	466b      	mov	r3, sp
 8019602:	6869      	ldr	r1, [r5, #4]
 8019604:	c303      	stmia	r3!, {r0, r1}
 8019606:	4668      	mov	r0, sp
 8019608:	1d21      	adds	r1, r4, #4
 801960a:	f7ff ff15 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 801960e:	4668      	mov	r0, sp
 8019610:	f7ff ff55 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 8019614:	b988      	cbnz	r0, 801963a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019616:	f8bd 3000 	ldrh.w	r3, [sp]
 801961a:	4669      	mov	r1, sp
 801961c:	88a2      	ldrh	r2, [r4, #4]
 801961e:	4620      	mov	r0, r4
 8019620:	1a9b      	subs	r3, r3, r2
 8019622:	88e2      	ldrh	r2, [r4, #6]
 8019624:	f8ad 3000 	strh.w	r3, [sp]
 8019628:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801962c:	1a9b      	subs	r3, r3, r2
 801962e:	4632      	mov	r2, r6
 8019630:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019634:	6823      	ldr	r3, [r4, #0]
 8019636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019638:	4798      	blx	r3
 801963a:	69a4      	ldr	r4, [r4, #24]
 801963c:	e7db      	b.n	80195f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801963e:	b002      	add	sp, #8
 8019640:	bd70      	pop	{r4, r5, r6, pc}

08019642 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8019642:	4770      	bx	lr

08019644 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8019644:	4770      	bx	lr

08019646 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8019646:	6803      	ldr	r3, [r0, #0]
 8019648:	b513      	push	{r0, r1, r4, lr}
 801964a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 801964e:	2300      	movs	r3, #0
 8019650:	e9cd 3300 	strd	r3, r3, [sp]
 8019654:	466b      	mov	r3, sp
 8019656:	47a0      	blx	r4
 8019658:	b002      	add	sp, #8
 801965a:	bd10      	pop	{r4, pc}

0801965c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801965c:	2301      	movs	r3, #1
 801965e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019662:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019666:	4770      	bx	lr

08019668 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8019668:	2301      	movs	r3, #1
 801966a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801966e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019672:	4770      	bx	lr

08019674 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8019674:	6843      	ldr	r3, [r0, #4]
 8019676:	2201      	movs	r2, #1
 8019678:	725a      	strb	r2, [r3, #9]
 801967a:	6840      	ldr	r0, [r0, #4]
 801967c:	6803      	ldr	r3, [r0, #0]
 801967e:	691b      	ldr	r3, [r3, #16]
 8019680:	4718      	bx	r3

08019682 <_ZN8touchgfx3HAL8flushDMAEv>:
 8019682:	6840      	ldr	r0, [r0, #4]
 8019684:	6803      	ldr	r3, [r0, #0]
 8019686:	689b      	ldr	r3, [r3, #8]
 8019688:	4718      	bx	r3

0801968a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801968a:	b530      	push	{r4, r5, lr}
 801968c:	b08b      	sub	sp, #44	; 0x2c
 801968e:	6804      	ldr	r4, [r0, #0]
 8019690:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8019694:	9509      	str	r5, [sp, #36]	; 0x24
 8019696:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801969a:	9508      	str	r5, [sp, #32]
 801969c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80196a0:	9507      	str	r5, [sp, #28]
 80196a2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80196a6:	9506      	str	r5, [sp, #24]
 80196a8:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80196ac:	9505      	str	r5, [sp, #20]
 80196ae:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80196b2:	9504      	str	r5, [sp, #16]
 80196b4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80196b8:	9503      	str	r5, [sp, #12]
 80196ba:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80196be:	9502      	str	r5, [sp, #8]
 80196c0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80196c4:	e9cd 3500 	strd	r3, r5, [sp]
 80196c8:	4613      	mov	r3, r2
 80196ca:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80196cc:	2200      	movs	r2, #0
 80196ce:	47a0      	blx	r4
 80196d0:	b00b      	add	sp, #44	; 0x2c
 80196d2:	bd30      	pop	{r4, r5, pc}

080196d4 <_ZN8touchgfx3HAL10beginFrameEv>:
 80196d4:	4b04      	ldr	r3, [pc, #16]	; (80196e8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80196d6:	781b      	ldrb	r3, [r3, #0]
 80196d8:	b123      	cbz	r3, 80196e4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80196da:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80196de:	f080 0001 	eor.w	r0, r0, #1
 80196e2:	4770      	bx	lr
 80196e4:	2001      	movs	r0, #1
 80196e6:	4770      	bx	lr
 80196e8:	24026262 	.word	0x24026262

080196ec <_ZN8touchgfx3HAL8endFrameEv>:
 80196ec:	b510      	push	{r4, lr}
 80196ee:	4604      	mov	r4, r0
 80196f0:	6840      	ldr	r0, [r0, #4]
 80196f2:	6803      	ldr	r3, [r0, #0]
 80196f4:	689b      	ldr	r3, [r3, #8]
 80196f6:	4798      	blx	r3
 80196f8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80196fc:	b113      	cbz	r3, 8019704 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80196fe:	2301      	movs	r3, #1
 8019700:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019704:	bd10      	pop	{r4, pc}

08019706 <_ZN8touchgfx3HAL10initializeEv>:
 8019706:	b510      	push	{r4, lr}
 8019708:	4604      	mov	r4, r0
 801970a:	f7e8 fdc5 	bl	8002298 <_ZN8touchgfx10OSWrappers10initializeEv>
 801970e:	f7e7 f813 	bl	8000738 <_ZN8touchgfx4GPIO4initEv>
 8019712:	6860      	ldr	r0, [r4, #4]
 8019714:	6803      	ldr	r3, [r0, #0]
 8019716:	68db      	ldr	r3, [r3, #12]
 8019718:	4798      	blx	r3
 801971a:	68e0      	ldr	r0, [r4, #12]
 801971c:	6803      	ldr	r3, [r0, #0]
 801971e:	689b      	ldr	r3, [r3, #8]
 8019720:	4798      	blx	r3
 8019722:	6823      	ldr	r3, [r4, #0]
 8019724:	4620      	mov	r0, r4
 8019726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801972c:	4718      	bx	r3

0801972e <_ZN8touchgfx3HAL9taskEntryEv>:
 801972e:	b508      	push	{r3, lr}
 8019730:	6803      	ldr	r3, [r0, #0]
 8019732:	4604      	mov	r4, r0
 8019734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019738:	4798      	blx	r3
 801973a:	6823      	ldr	r3, [r4, #0]
 801973c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801973e:	4620      	mov	r0, r4
 8019740:	4798      	blx	r3
 8019742:	f7e8 fe1f 	bl	8002384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8019746:	6823      	ldr	r3, [r4, #0]
 8019748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801974a:	e7f8      	b.n	801973e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801974c <_ZN8touchgfx3HAL4tickEv>:
 801974c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801974e:	6803      	ldr	r3, [r0, #0]
 8019750:	4604      	mov	r4, r0
 8019752:	4d5b      	ldr	r5, [pc, #364]	; (80198c0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8019754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019758:	4798      	blx	r3
 801975a:	2800      	cmp	r0, #0
 801975c:	f000 8095 	beq.w	801988a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8019760:	2001      	movs	r0, #1
 8019762:	2600      	movs	r6, #0
 8019764:	f7e7 f80e 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019768:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801976c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8019770:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019774:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8019778:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801977c:	b133      	cbz	r3, 801978c <_ZN8touchgfx3HAL4tickEv+0x40>
 801977e:	6823      	ldr	r3, [r4, #0]
 8019780:	4620      	mov	r0, r4
 8019782:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019786:	4798      	blx	r3
 8019788:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801978c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019790:	2601      	movs	r6, #1
 8019792:	6862      	ldr	r2, [r4, #4]
 8019794:	f083 0301 	eor.w	r3, r3, #1
 8019798:	702e      	strb	r6, [r5, #0]
 801979a:	7253      	strb	r3, [r2, #9]
 801979c:	f003 fac4 	bl	801cd28 <_ZN8touchgfx11Application11getInstanceEv>
 80197a0:	6803      	ldr	r3, [r0, #0]
 80197a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197a4:	4798      	blx	r3
 80197a6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80197aa:	b90b      	cbnz	r3, 80197b0 <_ZN8touchgfx3HAL4tickEv+0x64>
 80197ac:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80197b0:	f003 faba 	bl	801cd28 <_ZN8touchgfx11Application11getInstanceEv>
 80197b4:	6803      	ldr	r3, [r0, #0]
 80197b6:	695b      	ldr	r3, [r3, #20]
 80197b8:	4798      	blx	r3
 80197ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80197bc:	6803      	ldr	r3, [r0, #0]
 80197be:	691b      	ldr	r3, [r3, #16]
 80197c0:	4798      	blx	r3
 80197c2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80197c6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80197ca:	3b01      	subs	r3, #1
 80197cc:	b2db      	uxtb	r3, r3
 80197ce:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80197d2:	b10a      	cbz	r2, 80197d8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d1eb      	bne.n	80197b0 <_ZN8touchgfx3HAL4tickEv+0x64>
 80197d8:	4a3a      	ldr	r2, [pc, #232]	; (80198c4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80197da:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80197de:	7813      	ldrb	r3, [r2, #0]
 80197e0:	3301      	adds	r3, #1
 80197e2:	b25b      	sxtb	r3, r3
 80197e4:	4299      	cmp	r1, r3
 80197e6:	7013      	strb	r3, [r2, #0]
 80197e8:	dc10      	bgt.n	801980c <_ZN8touchgfx3HAL4tickEv+0xc0>
 80197ea:	2300      	movs	r3, #0
 80197ec:	68e0      	ldr	r0, [r4, #12]
 80197ee:	a902      	add	r1, sp, #8
 80197f0:	7013      	strb	r3, [r2, #0]
 80197f2:	aa03      	add	r2, sp, #12
 80197f4:	6803      	ldr	r3, [r0, #0]
 80197f6:	68db      	ldr	r3, [r3, #12]
 80197f8:	4798      	blx	r3
 80197fa:	6823      	ldr	r3, [r4, #0]
 80197fc:	2800      	cmp	r0, #0
 80197fe:	d050      	beq.n	80198a2 <_ZN8touchgfx3HAL4tickEv+0x156>
 8019800:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019804:	4620      	mov	r0, r4
 8019806:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801980a:	4798      	blx	r3
 801980c:	2300      	movs	r3, #0
 801980e:	6960      	ldr	r0, [r4, #20]
 8019810:	f88d 3007 	strb.w	r3, [sp, #7]
 8019814:	b158      	cbz	r0, 801982e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8019816:	6803      	ldr	r3, [r0, #0]
 8019818:	f10d 0107 	add.w	r1, sp, #7
 801981c:	68db      	ldr	r3, [r3, #12]
 801981e:	4798      	blx	r3
 8019820:	b128      	cbz	r0, 801982e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8019822:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019824:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8019828:	6803      	ldr	r3, [r0, #0]
 801982a:	68db      	ldr	r3, [r3, #12]
 801982c:	4798      	blx	r3
 801982e:	f104 001c 	add.w	r0, r4, #28
 8019832:	f00e f847 	bl	80278c4 <_ZN8touchgfx8Gestures4tickEv>
 8019836:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801983a:	b30b      	cbz	r3, 8019880 <_ZN8touchgfx3HAL4tickEv+0x134>
 801983c:	6920      	ldr	r0, [r4, #16]
 801983e:	6803      	ldr	r3, [r0, #0]
 8019840:	691b      	ldr	r3, [r3, #16]
 8019842:	4798      	blx	r3
 8019844:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019846:	4606      	mov	r6, r0
 8019848:	b903      	cbnz	r3, 801984c <_ZN8touchgfx3HAL4tickEv+0x100>
 801984a:	6720      	str	r0, [r4, #112]	; 0x70
 801984c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801984e:	4a1e      	ldr	r2, [pc, #120]	; (80198c8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8019850:	1af3      	subs	r3, r6, r3
 8019852:	4293      	cmp	r3, r2
 8019854:	d914      	bls.n	8019880 <_ZN8touchgfx3HAL4tickEv+0x134>
 8019856:	6920      	ldr	r0, [r4, #16]
 8019858:	6803      	ldr	r3, [r0, #0]
 801985a:	699b      	ldr	r3, [r3, #24]
 801985c:	4798      	blx	r3
 801985e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019860:	2264      	movs	r2, #100	; 0x64
 8019862:	1af3      	subs	r3, r6, r3
 8019864:	fbb3 f3f2 	udiv	r3, r3, r2
 8019868:	fbb0 f0f3 	udiv	r0, r0, r3
 801986c:	2800      	cmp	r0, #0
 801986e:	dc1d      	bgt.n	80198ac <_ZN8touchgfx3HAL4tickEv+0x160>
 8019870:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8019874:	6920      	ldr	r0, [r4, #16]
 8019876:	2100      	movs	r1, #0
 8019878:	6803      	ldr	r3, [r0, #0]
 801987a:	69db      	ldr	r3, [r3, #28]
 801987c:	4798      	blx	r3
 801987e:	6726      	str	r6, [r4, #112]	; 0x70
 8019880:	f003 fa52 	bl	801cd28 <_ZN8touchgfx11Application11getInstanceEv>
 8019884:	6803      	ldr	r3, [r0, #0]
 8019886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019888:	4798      	blx	r3
 801988a:	6823      	ldr	r3, [r4, #0]
 801988c:	4620      	mov	r0, r4
 801988e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019892:	4798      	blx	r3
 8019894:	2001      	movs	r0, #1
 8019896:	f7e6 ffd3 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801989a:	2300      	movs	r3, #0
 801989c:	702b      	strb	r3, [r5, #0]
 801989e:	b004      	add	sp, #16
 80198a0:	bd70      	pop	{r4, r5, r6, pc}
 80198a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80198a6:	4620      	mov	r0, r4
 80198a8:	4798      	blx	r3
 80198aa:	e7af      	b.n	801980c <_ZN8touchgfx3HAL4tickEv+0xc0>
 80198ac:	2863      	cmp	r0, #99	; 0x63
 80198ae:	bfcb      	itete	gt
 80198b0:	2300      	movgt	r3, #0
 80198b2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80198b6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80198ba:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80198be:	e7d9      	b.n	8019874 <_ZN8touchgfx3HAL4tickEv+0x128>
 80198c0:	24026268 	.word	0x24026268
 80198c4:	24026269 	.word	0x24026269
 80198c8:	05f5e100 	.word	0x05f5e100

080198cc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80198cc:	f7e8 bd26 	b.w	800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080198d0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80198d0:	6581      	str	r1, [r0, #88]	; 0x58
 80198d2:	301c      	adds	r0, #28
 80198d4:	f00d bff4 	b.w	80278c0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080198d8 <_ZN8touchgfx3HAL5touchEll>:
 80198d8:	b530      	push	{r4, r5, lr}
 80198da:	b087      	sub	sp, #28
 80198dc:	4604      	mov	r4, r0
 80198de:	a804      	add	r0, sp, #16
 80198e0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80198e4:	f003 f80e 	bl	801c904 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80198e8:	9b04      	ldr	r3, [sp, #16]
 80198ea:	a906      	add	r1, sp, #24
 80198ec:	a803      	add	r0, sp, #12
 80198ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80198f2:	9b05      	ldr	r3, [sp, #20]
 80198f4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80198f8:	f003 f856 	bl	801c9a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80198fc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8019900:	f104 001c 	add.w	r0, r4, #28
 8019904:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8019908:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801990c:	b189      	cbz	r1, 8019932 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801990e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8019912:	9300      	str	r3, [sp, #0]
 8019914:	4613      	mov	r3, r2
 8019916:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801991a:	462a      	mov	r2, r5
 801991c:	f00d ffe0 	bl	80278e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8019920:	b128      	cbz	r0, 801992e <_ZN8touchgfx3HAL5touchEll+0x56>
 8019922:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019926:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019928:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801992c:	6623      	str	r3, [r4, #96]	; 0x60
 801992e:	b007      	add	sp, #28
 8019930:	bd30      	pop	{r4, r5, pc}
 8019932:	f00e f815 	bl	8027960 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019936:	2301      	movs	r3, #1
 8019938:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801993c:	e7f1      	b.n	8019922 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801993e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801993e:	b510      	push	{r4, lr}
 8019940:	2b00      	cmp	r3, #0
 8019942:	d046      	beq.n	80199d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019944:	ea81 0002 	eor.w	r0, r1, r2
 8019948:	07c4      	lsls	r4, r0, #31
 801994a:	d508      	bpl.n	801995e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801994c:	440b      	add	r3, r1
 801994e:	3a01      	subs	r2, #1
 8019950:	428b      	cmp	r3, r1
 8019952:	d93e      	bls.n	80199d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019954:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019958:	f801 0b01 	strb.w	r0, [r1], #1
 801995c:	e7f8      	b.n	8019950 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801995e:	07d0      	lsls	r0, r2, #31
 8019960:	bf42      	ittt	mi
 8019962:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8019966:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801996a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801996e:	2b01      	cmp	r3, #1
 8019970:	d911      	bls.n	8019996 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019972:	ea81 0402 	eor.w	r4, r1, r2
 8019976:	4610      	mov	r0, r2
 8019978:	07a4      	lsls	r4, r4, #30
 801997a:	d022      	beq.n	80199c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801997c:	f023 0401 	bic.w	r4, r3, #1
 8019980:	440c      	add	r4, r1
 8019982:	428c      	cmp	r4, r1
 8019984:	4602      	mov	r2, r0
 8019986:	d904      	bls.n	8019992 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8019988:	8812      	ldrh	r2, [r2, #0]
 801998a:	3002      	adds	r0, #2
 801998c:	f821 2b02 	strh.w	r2, [r1], #2
 8019990:	e7f7      	b.n	8019982 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8019992:	f003 0301 	and.w	r3, r3, #1
 8019996:	f023 0003 	bic.w	r0, r3, #3
 801999a:	4408      	add	r0, r1
 801999c:	4288      	cmp	r0, r1
 801999e:	4614      	mov	r4, r2
 80199a0:	d904      	bls.n	80199ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80199a2:	6824      	ldr	r4, [r4, #0]
 80199a4:	3204      	adds	r2, #4
 80199a6:	f841 4b04 	str.w	r4, [r1], #4
 80199aa:	e7f7      	b.n	801999c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80199ac:	f003 0303 	and.w	r3, r3, #3
 80199b0:	3a01      	subs	r2, #1
 80199b2:	440b      	add	r3, r1
 80199b4:	428b      	cmp	r3, r1
 80199b6:	d90c      	bls.n	80199d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80199b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80199bc:	f801 0b01 	strb.w	r0, [r1], #1
 80199c0:	e7f8      	b.n	80199b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80199c2:	0790      	lsls	r0, r2, #30
 80199c4:	d0e7      	beq.n	8019996 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80199c6:	f832 0b02 	ldrh.w	r0, [r2], #2
 80199ca:	3b02      	subs	r3, #2
 80199cc:	f821 0b02 	strh.w	r0, [r1], #2
 80199d0:	e7e1      	b.n	8019996 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80199d2:	2001      	movs	r0, #1
 80199d4:	bd10      	pop	{r4, pc}

080199d6 <_ZN8touchgfx3HAL7noTouchEv>:
 80199d6:	b510      	push	{r4, lr}
 80199d8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80199dc:	4604      	mov	r4, r0
 80199de:	b153      	cbz	r3, 80199f6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80199e0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80199e4:	2101      	movs	r1, #1
 80199e6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80199ea:	301c      	adds	r0, #28
 80199ec:	f00d ffb8 	bl	8027960 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80199f0:	2300      	movs	r3, #0
 80199f2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80199f6:	bd10      	pop	{r4, pc}

080199f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80199f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199fc:	b085      	sub	sp, #20
 80199fe:	4604      	mov	r4, r0
 8019a00:	2000      	movs	r0, #0
 8019a02:	4699      	mov	r9, r3
 8019a04:	ad04      	add	r5, sp, #16
 8019a06:	460f      	mov	r7, r1
 8019a08:	4690      	mov	r8, r2
 8019a0a:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019a0e:	69a0      	ldr	r0, [r4, #24]
 8019a10:	6806      	ldr	r6, [r0, #0]
 8019a12:	9501      	str	r5, [sp, #4]
 8019a14:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8019a18:	9500      	str	r5, [sp, #0]
 8019a1a:	6835      	ldr	r5, [r6, #0]
 8019a1c:	47a8      	blx	r5
 8019a1e:	4d10      	ldr	r5, [pc, #64]	; (8019a60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8019a20:	4606      	mov	r6, r0
 8019a22:	f8a5 9000 	strh.w	r9, [r5]
 8019a26:	f7ea fa7f 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 8019a2a:	6803      	ldr	r3, [r0, #0]
 8019a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a2e:	4798      	blx	r3
 8019a30:	b128      	cbz	r0, 8019a3e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8019a32:	2801      	cmp	r0, #1
 8019a34:	d00b      	beq.n	8019a4e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8019a36:	4630      	mov	r0, r6
 8019a38:	b005      	add	sp, #20
 8019a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a3e:	882b      	ldrh	r3, [r5, #0]
 8019a40:	fb08 7203 	mla	r2, r8, r3, r7
 8019a44:	9b03      	ldr	r3, [sp, #12]
 8019a46:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8019a4a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019a4c:	e7f3      	b.n	8019a36 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8019a4e:	882a      	ldrh	r2, [r5, #0]
 8019a50:	9b03      	ldr	r3, [sp, #12]
 8019a52:	fb08 7202 	mla	r2, r8, r2, r7
 8019a56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019a5a:	1a9a      	subs	r2, r3, r2
 8019a5c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8019a5e:	e7ea      	b.n	8019a36 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8019a60:	2402625e 	.word	0x2402625e

08019a64 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8019a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a66:	b08b      	sub	sp, #44	; 0x2c
 8019a68:	4617      	mov	r7, r2
 8019a6a:	4604      	mov	r4, r0
 8019a6c:	460e      	mov	r6, r1
 8019a6e:	461d      	mov	r5, r3
 8019a70:	f7ea fa5a 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 8019a74:	6803      	ldr	r3, [r0, #0]
 8019a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a78:	4798      	blx	r3
 8019a7a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8019a7e:	9007      	str	r0, [sp, #28]
 8019a80:	4631      	mov	r1, r6
 8019a82:	6822      	ldr	r2, [r4, #0]
 8019a84:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019a88:	4b0c      	ldr	r3, [pc, #48]	; (8019abc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8019a8a:	4620      	mov	r0, r4
 8019a8c:	881b      	ldrh	r3, [r3, #0]
 8019a8e:	9306      	str	r3, [sp, #24]
 8019a90:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019a94:	9305      	str	r3, [sp, #20]
 8019a96:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019a9a:	9304      	str	r3, [sp, #16]
 8019a9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019aa0:	9303      	str	r3, [sp, #12]
 8019aa2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019aa6:	9302      	str	r3, [sp, #8]
 8019aa8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019aac:	e9cd 5300 	strd	r5, r3, [sp]
 8019ab0:	463b      	mov	r3, r7
 8019ab2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8019ab4:	2200      	movs	r2, #0
 8019ab6:	47a8      	blx	r5
 8019ab8:	b00b      	add	sp, #44	; 0x2c
 8019aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019abc:	2402625e 	.word	0x2402625e

08019ac0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8019ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ac4:	4698      	mov	r8, r3
 8019ac6:	6803      	ldr	r3, [r0, #0]
 8019ac8:	b08b      	sub	sp, #44	; 0x2c
 8019aca:	4617      	mov	r7, r2
 8019acc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8019ace:	460e      	mov	r6, r1
 8019ad0:	4b13      	ldr	r3, [pc, #76]	; (8019b20 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8019ad2:	4604      	mov	r4, r0
 8019ad4:	f8b3 9000 	ldrh.w	r9, [r3]
 8019ad8:	f7ea fa26 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 8019adc:	6803      	ldr	r3, [r0, #0]
 8019ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ae0:	4798      	blx	r3
 8019ae2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	4631      	mov	r1, r6
 8019aea:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019aee:	2302      	movs	r3, #2
 8019af0:	4620      	mov	r0, r4
 8019af2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8019af6:	2301      	movs	r3, #1
 8019af8:	9305      	str	r3, [sp, #20]
 8019afa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8019afe:	9304      	str	r3, [sp, #16]
 8019b00:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019b04:	9303      	str	r3, [sp, #12]
 8019b06:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019b0a:	9302      	str	r3, [sp, #8]
 8019b0c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019b10:	e9cd 8300 	strd	r8, r3, [sp]
 8019b14:	463b      	mov	r3, r7
 8019b16:	47a8      	blx	r5
 8019b18:	b00b      	add	sp, #44	; 0x2c
 8019b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b1e:	bf00      	nop
 8019b20:	2402625e 	.word	0x2402625e

08019b24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8019b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b28:	4698      	mov	r8, r3
 8019b2a:	6803      	ldr	r3, [r0, #0]
 8019b2c:	b087      	sub	sp, #28
 8019b2e:	460e      	mov	r6, r1
 8019b30:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8019b32:	4617      	mov	r7, r2
 8019b34:	4b0f      	ldr	r3, [pc, #60]	; (8019b74 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8019b36:	4604      	mov	r4, r0
 8019b38:	f8b3 9000 	ldrh.w	r9, [r3]
 8019b3c:	f7ea f9f4 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 8019b40:	6803      	ldr	r3, [r0, #0]
 8019b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b44:	4798      	blx	r3
 8019b46:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8019b4a:	463a      	mov	r2, r7
 8019b4c:	4631      	mov	r1, r6
 8019b4e:	f8cd 900c 	str.w	r9, [sp, #12]
 8019b52:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8019b56:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019b5a:	4620      	mov	r0, r4
 8019b5c:	9302      	str	r3, [sp, #8]
 8019b5e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8019b62:	9301      	str	r3, [sp, #4]
 8019b64:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019b68:	9300      	str	r3, [sp, #0]
 8019b6a:	4643      	mov	r3, r8
 8019b6c:	47a8      	blx	r5
 8019b6e:	b007      	add	sp, #28
 8019b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b74:	2402625e 	.word	0x2402625e

08019b78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b7c:	4604      	mov	r4, r0
 8019b7e:	b08f      	sub	sp, #60	; 0x3c
 8019b80:	4610      	mov	r0, r2
 8019b82:	460d      	mov	r5, r1
 8019b84:	4691      	mov	r9, r2
 8019b86:	461e      	mov	r6, r3
 8019b88:	f005 fd04 	bl	801f594 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019b8c:	2800      	cmp	r0, #0
 8019b8e:	f000 809d 	beq.w	8019ccc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8019b92:	6823      	ldr	r3, [r4, #0]
 8019b94:	4620      	mov	r0, r4
 8019b96:	f8df b198 	ldr.w	fp, [pc, #408]	; 8019d30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8019b9a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8019b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ba0:	4798      	blx	r3
 8019ba2:	6823      	ldr	r3, [r4, #0]
 8019ba4:	4620      	mov	r0, r4
 8019ba6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8019d34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8019baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bac:	4798      	blx	r3
 8019bae:	f8bb 3000 	ldrh.w	r3, [fp]
 8019bb2:	4f5c      	ldr	r7, [pc, #368]	; (8019d24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019bb4:	9301      	str	r3, [sp, #4]
 8019bb6:	f8ba 3000 	ldrh.w	r3, [sl]
 8019bba:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8019bbe:	4640      	mov	r0, r8
 8019bc0:	9302      	str	r3, [sp, #8]
 8019bc2:	883b      	ldrh	r3, [r7, #0]
 8019bc4:	9303      	str	r3, [sp, #12]
 8019bc6:	4b58      	ldr	r3, [pc, #352]	; (8019d28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019bc8:	881a      	ldrh	r2, [r3, #0]
 8019bca:	9305      	str	r3, [sp, #20]
 8019bcc:	9204      	str	r2, [sp, #16]
 8019bce:	f005 fe25 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019bd2:	8038      	strh	r0, [r7, #0]
 8019bd4:	4640      	mov	r0, r8
 8019bd6:	f005 fe55 	bl	801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019bda:	9b05      	ldr	r3, [sp, #20]
 8019bdc:	b280      	uxth	r0, r0
 8019bde:	8018      	strh	r0, [r3, #0]
 8019be0:	4b52      	ldr	r3, [pc, #328]	; (8019d2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8019be2:	781b      	ldrb	r3, [r3, #0]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d174      	bne.n	8019cd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8019be8:	883b      	ldrh	r3, [r7, #0]
 8019bea:	f8aa 0000 	strh.w	r0, [sl]
 8019bee:	f8ab 3000 	strh.w	r3, [fp]
 8019bf2:	4648      	mov	r0, r9
 8019bf4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8019bf8:	f005 fccc 	bl	801f594 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8019c02:	4611      	mov	r1, r2
 8019c04:	4628      	mov	r0, r5
 8019c06:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8019c0a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8019c0e:	f7ed fc18 	bl	8007442 <_ZN8touchgfx8Drawable5setXYEss>
 8019c12:	2301      	movs	r3, #1
 8019c14:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8019c18:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8019c1c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	dd5c      	ble.n	8019cde <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8019c24:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	dd58      	ble.n	8019cde <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8019c2c:	462a      	mov	r2, r5
 8019c2e:	ab0a      	add	r3, sp, #40	; 0x28
 8019c30:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019c34:	6851      	ldr	r1, [r2, #4]
 8019c36:	c303      	stmia	r3!, {r0, r1}
 8019c38:	4631      	mov	r1, r6
 8019c3a:	a80a      	add	r0, sp, #40	; 0x28
 8019c3c:	f7ff fbfc 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 8019c40:	4b38      	ldr	r3, [pc, #224]	; (8019d24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019c42:	2100      	movs	r1, #0
 8019c44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c48:	4b37      	ldr	r3, [pc, #220]	; (8019d28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019c4a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8019c4e:	aa0a      	add	r2, sp, #40	; 0x28
 8019c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c54:	910c      	str	r1, [sp, #48]	; 0x30
 8019c56:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019c5a:	ab08      	add	r3, sp, #32
 8019c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019c60:	e883 0003 	stmia.w	r3, {r0, r1}
 8019c64:	4618      	mov	r0, r3
 8019c66:	a90c      	add	r1, sp, #48	; 0x30
 8019c68:	f7ff fbe6 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 8019c6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d13c      	bne.n	8019cec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8019c72:	2000      	movs	r0, #0
 8019c74:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8019c78:	2600      	movs	r6, #0
 8019c7a:	696b      	ldr	r3, [r5, #20]
 8019c7c:	a908      	add	r1, sp, #32
 8019c7e:	682a      	ldr	r2, [r5, #0]
 8019c80:	4628      	mov	r0, r5
 8019c82:	9305      	str	r3, [sp, #20]
 8019c84:	616e      	str	r6, [r5, #20]
 8019c86:	6892      	ldr	r2, [r2, #8]
 8019c88:	4790      	blx	r2
 8019c8a:	9b05      	ldr	r3, [sp, #20]
 8019c8c:	4652      	mov	r2, sl
 8019c8e:	4649      	mov	r1, r9
 8019c90:	616b      	str	r3, [r5, #20]
 8019c92:	4628      	mov	r0, r5
 8019c94:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8019c98:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8019c9c:	f7ed fbd1 	bl	8007442 <_ZN8touchgfx8Drawable5setXYEss>
 8019ca0:	9a01      	ldr	r2, [sp, #4]
 8019ca2:	4b23      	ldr	r3, [pc, #140]	; (8019d30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8019ca4:	4620      	mov	r0, r4
 8019ca6:	801a      	strh	r2, [r3, #0]
 8019ca8:	9a02      	ldr	r2, [sp, #8]
 8019caa:	4b22      	ldr	r3, [pc, #136]	; (8019d34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8019cac:	801a      	strh	r2, [r3, #0]
 8019cae:	9a03      	ldr	r2, [sp, #12]
 8019cb0:	4b1c      	ldr	r3, [pc, #112]	; (8019d24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019cb2:	801a      	strh	r2, [r3, #0]
 8019cb4:	4b1c      	ldr	r3, [pc, #112]	; (8019d28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019cb6:	9a04      	ldr	r2, [sp, #16]
 8019cb8:	801a      	strh	r2, [r3, #0]
 8019cba:	6823      	ldr	r3, [r4, #0]
 8019cbc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8019cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cc2:	4798      	blx	r3
 8019cc4:	6823      	ldr	r3, [r4, #0]
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cca:	4798      	blx	r3
 8019ccc:	b00f      	add	sp, #60	; 0x3c
 8019cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cd2:	883b      	ldrh	r3, [r7, #0]
 8019cd4:	f8ab 0000 	strh.w	r0, [fp]
 8019cd8:	f8aa 3000 	strh.w	r3, [sl]
 8019cdc:	e789      	b.n	8019bf2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8019cde:	462a      	mov	r2, r5
 8019ce0:	ab0a      	add	r3, sp, #40	; 0x28
 8019ce2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019ce6:	6851      	ldr	r1, [r2, #4]
 8019ce8:	c303      	stmia	r3!, {r0, r1}
 8019cea:	e7a9      	b.n	8019c40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8019cec:	a807      	add	r0, sp, #28
 8019cee:	f005 ff05 	bl	801fafc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019cf2:	4606      	mov	r6, r0
 8019cf4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019cf6:	6803      	ldr	r3, [r0, #0]
 8019cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cfa:	4798      	blx	r3
 8019cfc:	4286      	cmp	r6, r0
 8019cfe:	d1b8      	bne.n	8019c72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8019d00:	f7ea f912 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 8019d04:	6803      	ldr	r3, [r0, #0]
 8019d06:	4606      	mov	r6, r0
 8019d08:	a807      	add	r0, sp, #28
 8019d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d0c:	9305      	str	r3, [sp, #20]
 8019d0e:	f005 fef5 	bl	801fafc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019d12:	9b05      	ldr	r3, [sp, #20]
 8019d14:	4601      	mov	r1, r0
 8019d16:	4630      	mov	r0, r6
 8019d18:	4798      	blx	r3
 8019d1a:	f080 0001 	eor.w	r0, r0, #1
 8019d1e:	b2c0      	uxtb	r0, r0
 8019d20:	e7a8      	b.n	8019c74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8019d22:	bf00      	nop
 8019d24:	24026258 	.word	0x24026258
 8019d28:	2402625a 	.word	0x2402625a
 8019d2c:	2402625c 	.word	0x2402625c
 8019d30:	2402625e 	.word	0x2402625e
 8019d34:	24026260 	.word	0x24026260

08019d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8019d38:	4b07      	ldr	r3, [pc, #28]	; (8019d58 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8019d3a:	b510      	push	{r4, lr}
 8019d3c:	781b      	ldrb	r3, [r3, #0]
 8019d3e:	4604      	mov	r4, r0
 8019d40:	b13b      	cbz	r3, 8019d52 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019d42:	6803      	ldr	r3, [r0, #0]
 8019d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d46:	4798      	blx	r3
 8019d48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019d4a:	4283      	cmp	r3, r0
 8019d4c:	d101      	bne.n	8019d52 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019d4e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8019d50:	bd10      	pop	{r4, pc}
 8019d52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019d54:	e7fc      	b.n	8019d50 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8019d56:	bf00      	nop
 8019d58:	24026262 	.word	0x24026262

08019d5c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8019d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d60:	461d      	mov	r5, r3
 8019d62:	b08a      	sub	sp, #40	; 0x28
 8019d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019d68:	4690      	mov	r8, r2
 8019d6a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8019d6e:	2400      	movs	r4, #0
 8019d70:	4607      	mov	r7, r0
 8019d72:	fb06 8505 	mla	r5, r6, r5, r8
 8019d76:	9404      	str	r4, [sp, #16]
 8019d78:	f88d 4020 	strb.w	r4, [sp, #32]
 8019d7c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8019d80:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019d84:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019d88:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019d8c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019d90:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019d94:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019d98:	f7ff ffce 	bl	8019d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019d9c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019da0:	6878      	ldr	r0, [r7, #4]
 8019da2:	f8ad 601e 	strh.w	r6, [sp, #30]
 8019da6:	a901      	add	r1, sp, #4
 8019da8:	9505      	str	r5, [sp, #20]
 8019daa:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8019dae:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8019db2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8019db6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8019dba:	6803      	ldr	r3, [r0, #0]
 8019dbc:	685b      	ldr	r3, [r3, #4]
 8019dbe:	4798      	blx	r3
 8019dc0:	b00a      	add	sp, #40	; 0x28
 8019dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019dc6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8019dc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019dca:	b08b      	sub	sp, #44	; 0x2c
 8019dcc:	2400      	movs	r4, #0
 8019dce:	4691      	mov	r9, r2
 8019dd0:	461d      	mov	r5, r3
 8019dd2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8019dd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019dda:	4688      	mov	r8, r1
 8019ddc:	4607      	mov	r7, r0
 8019dde:	9404      	str	r4, [sp, #16]
 8019de0:	fb06 9505 	mla	r5, r6, r5, r9
 8019de4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019de8:	f7ff ffa6 	bl	8019d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019dec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019df0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019df4:	6878      	ldr	r0, [r7, #4]
 8019df6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019dfa:	a901      	add	r1, sp, #4
 8019dfc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019e00:	9505      	str	r5, [sp, #20]
 8019e02:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019e06:	f8ad 401c 	strh.w	r4, [sp, #28]
 8019e0a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8019e0e:	f8cd 8010 	str.w	r8, [sp, #16]
 8019e12:	f8ad 4020 	strh.w	r4, [sp, #32]
 8019e16:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8019e1a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8019e1e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8019e22:	6803      	ldr	r3, [r0, #0]
 8019e24:	685b      	ldr	r3, [r3, #4]
 8019e26:	4798      	blx	r3
 8019e28:	b00b      	add	sp, #44	; 0x2c
 8019e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08019e30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8019e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e34:	b08a      	sub	sp, #40	; 0x28
 8019e36:	4698      	mov	r8, r3
 8019e38:	2300      	movs	r3, #0
 8019e3a:	4606      	mov	r6, r0
 8019e3c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8019e40:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8019e44:	2d0b      	cmp	r5, #11
 8019e46:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8019e4a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8019e4e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8019e52:	9304      	str	r3, [sp, #16]
 8019e54:	d137      	bne.n	8019ec6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8019e56:	2380      	movs	r3, #128	; 0x80
 8019e58:	f88d 0020 	strb.w	r0, [sp, #32]
 8019e5c:	4630      	mov	r0, r6
 8019e5e:	9203      	str	r2, [sp, #12]
 8019e60:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8019e64:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019e68:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019e6c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019e70:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019e74:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019e78:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019e7c:	f7ff ff5c 	bl	8019d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019e80:	2c0b      	cmp	r4, #11
 8019e82:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8019e86:	f8ad 701e 	strh.w	r7, [sp, #30]
 8019e8a:	bf94      	ite	ls
 8019e8c:	4b19      	ldrls	r3, [pc, #100]	; (8019ef4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8019e8e:	2100      	movhi	r1, #0
 8019e90:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8019e94:	bf98      	it	ls
 8019e96:	5d19      	ldrbls	r1, [r3, r4]
 8019e98:	fb02 8307 	mla	r3, r2, r7, r8
 8019e9c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8019ea0:	10c9      	asrs	r1, r1, #3
 8019ea2:	fb01 0003 	mla	r0, r1, r3, r0
 8019ea6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8019eaa:	a901      	add	r1, sp, #4
 8019eac:	9005      	str	r0, [sp, #20]
 8019eae:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8019eb2:	2300      	movs	r3, #0
 8019eb4:	6870      	ldr	r0, [r6, #4]
 8019eb6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019eba:	6803      	ldr	r3, [r0, #0]
 8019ebc:	685b      	ldr	r3, [r3, #4]
 8019ebe:	4798      	blx	r3
 8019ec0:	b00a      	add	sp, #40	; 0x28
 8019ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ec6:	2d02      	cmp	r5, #2
 8019ec8:	d109      	bne.n	8019ede <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8019eca:	28ff      	cmp	r0, #255	; 0xff
 8019ecc:	d105      	bne.n	8019eda <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8019ece:	f1bc 0f00 	cmp.w	ip, #0
 8019ed2:	bf14      	ite	ne
 8019ed4:	2340      	movne	r3, #64	; 0x40
 8019ed6:	2320      	moveq	r3, #32
 8019ed8:	e7be      	b.n	8019e58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8019eda:	2340      	movs	r3, #64	; 0x40
 8019edc:	e7bc      	b.n	8019e58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8019ede:	28ff      	cmp	r0, #255	; 0xff
 8019ee0:	d105      	bne.n	8019eee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8019ee2:	f1bc 0f00 	cmp.w	ip, #0
 8019ee6:	bf14      	ite	ne
 8019ee8:	2304      	movne	r3, #4
 8019eea:	2301      	moveq	r3, #1
 8019eec:	e7b4      	b.n	8019e58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8019eee:	2304      	movs	r3, #4
 8019ef0:	e7b2      	b.n	8019e58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8019ef2:	bf00      	nop
 8019ef4:	0802c180 	.word	0x0802c180

08019ef8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8019ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019efc:	b08b      	sub	sp, #44	; 0x2c
 8019efe:	461d      	mov	r5, r3
 8019f00:	2400      	movs	r4, #0
 8019f02:	4688      	mov	r8, r1
 8019f04:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8019f08:	4693      	mov	fp, r2
 8019f0a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8019f0e:	4607      	mov	r7, r0
 8019f10:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019f14:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8019f18:	9404      	str	r4, [sp, #16]
 8019f1a:	bf14      	ite	ne
 8019f1c:	2308      	movne	r3, #8
 8019f1e:	2302      	moveq	r3, #2
 8019f20:	fb05 b50a 	mla	r5, r5, sl, fp
 8019f24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019f28:	f7ff ff06 	bl	8019d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019f2c:	2e0b      	cmp	r6, #11
 8019f2e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019f32:	a901      	add	r1, sp, #4
 8019f34:	bf98      	it	ls
 8019f36:	4b13      	ldrls	r3, [pc, #76]	; (8019f84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8019f38:	f8ad a01e 	strh.w	sl, [sp, #30]
 8019f3c:	bf98      	it	ls
 8019f3e:	5d9c      	ldrbls	r4, [r3, r6]
 8019f40:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019f44:	10e4      	asrs	r4, r4, #3
 8019f46:	f8cd 8010 	str.w	r8, [sp, #16]
 8019f4a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019f4e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8019f52:	fb04 0405 	mla	r4, r4, r5, r0
 8019f56:	6878      	ldr	r0, [r7, #4]
 8019f58:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	9405      	str	r4, [sp, #20]
 8019f60:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019f64:	f88d 9020 	strb.w	r9, [sp, #32]
 8019f68:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8019f6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019f70:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8019f74:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8019f78:	6803      	ldr	r3, [r0, #0]
 8019f7a:	685b      	ldr	r3, [r3, #4]
 8019f7c:	4798      	blx	r3
 8019f7e:	b00b      	add	sp, #44	; 0x2c
 8019f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f84:	0802c180 	.word	0x0802c180

08019f88 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f8c:	461e      	mov	r6, r3
 8019f8e:	4b0a      	ldr	r3, [pc, #40]	; (8019fb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8019f90:	460f      	mov	r7, r1
 8019f92:	4690      	mov	r8, r2
 8019f94:	881d      	ldrh	r5, [r3, #0]
 8019f96:	f7e9 ffc7 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 8019f9a:	6803      	ldr	r3, [r0, #0]
 8019f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f9e:	4798      	blx	r3
 8019fa0:	280b      	cmp	r0, #11
 8019fa2:	bf96      	itet	ls
 8019fa4:	4b05      	ldrls	r3, [pc, #20]	; (8019fbc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019fa6:	2400      	movhi	r4, #0
 8019fa8:	5c1c      	ldrbls	r4, [r3, r0]
 8019faa:	fb08 7005 	mla	r0, r8, r5, r7
 8019fae:	10e4      	asrs	r4, r4, #3
 8019fb0:	fb04 6000 	mla	r0, r4, r0, r6
 8019fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fb8:	2402625e 	.word	0x2402625e
 8019fbc:	0802c180 	.word	0x0802c180

08019fc0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8019fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fc2:	b08b      	sub	sp, #44	; 0x2c
 8019fc4:	461f      	mov	r7, r3
 8019fc6:	4604      	mov	r4, r0
 8019fc8:	4616      	mov	r6, r2
 8019fca:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8019fce:	2500      	movs	r5, #0
 8019fd0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8019fd4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019fd8:	9504      	str	r5, [sp, #16]
 8019fda:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019fde:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019fe2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019fe6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019fea:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019fee:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019ff2:	f88d 3020 	strb.w	r3, [sp, #32]
 8019ff6:	f7ff fe9f 	bl	8019d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019ffa:	463a      	mov	r2, r7
 8019ffc:	4631      	mov	r1, r6
 8019ffe:	4603      	mov	r3, r0
 801a000:	4620      	mov	r0, r4
 801a002:	f7ff ffc1 	bl	8019f88 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a006:	4b0e      	ldr	r3, [pc, #56]	; (801a040 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801a008:	9005      	str	r0, [sp, #20]
 801a00a:	881b      	ldrh	r3, [r3, #0]
 801a00c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a010:	f7e9 ff8a 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 801a014:	6803      	ldr	r3, [r0, #0]
 801a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a018:	4798      	blx	r3
 801a01a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a01c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801a020:	a901      	add	r1, sp, #4
 801a022:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801a026:	9304      	str	r3, [sp, #16]
 801a028:	6860      	ldr	r0, [r4, #4]
 801a02a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801a02e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801a032:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801a036:	6803      	ldr	r3, [r0, #0]
 801a038:	685b      	ldr	r3, [r3, #4]
 801a03a:	4798      	blx	r3
 801a03c:	b00b      	add	sp, #44	; 0x2c
 801a03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a040:	2402625e 	.word	0x2402625e

0801a044 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801a044:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a046:	b08d      	sub	sp, #52	; 0x34
 801a048:	2501      	movs	r5, #1
 801a04a:	4604      	mov	r4, r0
 801a04c:	466b      	mov	r3, sp
 801a04e:	9503      	str	r5, [sp, #12]
 801a050:	e883 0006 	stmia.w	r3, {r1, r2}
 801a054:	2300      	movs	r3, #0
 801a056:	f8bd 6000 	ldrh.w	r6, [sp]
 801a05a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801a05e:	9306      	str	r3, [sp, #24]
 801a060:	6803      	ldr	r3, [r0, #0]
 801a062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a064:	4798      	blx	r3
 801a066:	463a      	mov	r2, r7
 801a068:	4631      	mov	r1, r6
 801a06a:	4603      	mov	r3, r0
 801a06c:	4620      	mov	r0, r4
 801a06e:	f7ff ff8b 	bl	8019f88 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a072:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a074:	9004      	str	r0, [sp, #16]
 801a076:	9307      	str	r3, [sp, #28]
 801a078:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a07c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a080:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a084:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a088:	4b0e      	ldr	r3, [pc, #56]	; (801a0c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801a08a:	881b      	ldrh	r3, [r3, #0]
 801a08c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a090:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a094:	f7e9 ff48 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 801a098:	6803      	ldr	r3, [r0, #0]
 801a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a09c:	4798      	blx	r3
 801a09e:	23ff      	movs	r3, #255	; 0xff
 801a0a0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801a0a4:	a903      	add	r1, sp, #12
 801a0a6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801a0aa:	6860      	ldr	r0, [r4, #4]
 801a0ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801a0b0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a0b4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801a0b8:	6803      	ldr	r3, [r0, #0]
 801a0ba:	685b      	ldr	r3, [r3, #4]
 801a0bc:	4798      	blx	r3
 801a0be:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801a0c0:	b00d      	add	sp, #52	; 0x34
 801a0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0c4:	2402625e 	.word	0x2402625e

0801a0c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0cc:	b08c      	sub	sp, #48	; 0x30
 801a0ce:	461e      	mov	r6, r3
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	4604      	mov	r4, r0
 801a0d4:	466d      	mov	r5, sp
 801a0d6:	9306      	str	r3, [sp, #24]
 801a0d8:	6803      	ldr	r3, [r0, #0]
 801a0da:	e885 0006 	stmia.w	r5, {r1, r2}
 801a0de:	2501      	movs	r5, #1
 801a0e0:	f8bd 7000 	ldrh.w	r7, [sp]
 801a0e4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801a0e8:	9503      	str	r5, [sp, #12]
 801a0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a0ec:	4798      	blx	r3
 801a0ee:	4642      	mov	r2, r8
 801a0f0:	4639      	mov	r1, r7
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	4620      	mov	r0, r4
 801a0f6:	f7ff ff47 	bl	8019f88 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a0fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a0fe:	9004      	str	r0, [sp, #16]
 801a100:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a104:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a108:	9607      	str	r6, [sp, #28]
 801a10a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a10e:	4b10      	ldr	r3, [pc, #64]	; (801a150 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801a110:	881b      	ldrh	r3, [r3, #0]
 801a112:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a116:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a118:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a11c:	f7e9 ff04 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 801a120:	6803      	ldr	r3, [r0, #0]
 801a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a124:	4798      	blx	r3
 801a126:	23ff      	movs	r3, #255	; 0xff
 801a128:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801a12c:	a903      	add	r1, sp, #12
 801a12e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801a132:	6860      	ldr	r0, [r4, #4]
 801a134:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801a138:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a13c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801a140:	6803      	ldr	r3, [r0, #0]
 801a142:	685b      	ldr	r3, [r3, #4]
 801a144:	4798      	blx	r3
 801a146:	4630      	mov	r0, r6
 801a148:	b00c      	add	sp, #48	; 0x30
 801a14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a14e:	bf00      	nop
 801a150:	2402625e 	.word	0x2402625e

0801a154 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801a154:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a156:	b085      	sub	sp, #20
 801a158:	4605      	mov	r5, r0
 801a15a:	ac02      	add	r4, sp, #8
 801a15c:	e884 0006 	stmia.w	r4, {r1, r2}
 801a160:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801a164:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801a168:	f7ff fde6 	bl	8019d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a16c:	4631      	mov	r1, r6
 801a16e:	4603      	mov	r3, r0
 801a170:	463a      	mov	r2, r7
 801a172:	4628      	mov	r0, r5
 801a174:	f7ff ff08 	bl	8019f88 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a178:	4a05      	ldr	r2, [pc, #20]	; (801a190 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801a17a:	682b      	ldr	r3, [r5, #0]
 801a17c:	8812      	ldrh	r2, [r2, #0]
 801a17e:	9200      	str	r2, [sp, #0]
 801a180:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a182:	4603      	mov	r3, r0
 801a184:	4628      	mov	r0, r5
 801a186:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a18a:	47b0      	blx	r6
 801a18c:	b005      	add	sp, #20
 801a18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a190:	2402625e 	.word	0x2402625e

0801a194 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801a194:	b570      	push	{r4, r5, r6, lr}
 801a196:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801a19a:	4604      	mov	r4, r0
 801a19c:	b19b      	cbz	r3, 801a1c6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801a19e:	2002      	movs	r0, #2
 801a1a0:	f7e6 fbac 	bl	80008fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	4620      	mov	r0, r4
 801a1a8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801a1ac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801a1b0:	6823      	ldr	r3, [r4, #0]
 801a1b2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801a1b6:	f7ff fdbf 	bl	8019d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a1ba:	4601      	mov	r1, r0
 801a1bc:	4620      	mov	r0, r4
 801a1be:	462b      	mov	r3, r5
 801a1c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1c4:	4718      	bx	r3
 801a1c6:	bd70      	pop	{r4, r5, r6, pc}

0801a1c8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801a1c8:	b570      	push	{r4, r5, r6, lr}
 801a1ca:	4605      	mov	r5, r0
 801a1cc:	460c      	mov	r4, r1
 801a1ce:	2003      	movs	r0, #3
 801a1d0:	b149      	cbz	r1, 801a1e6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801a1d2:	f7e6 fad7 	bl	8000784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a1d6:	6928      	ldr	r0, [r5, #16]
 801a1d8:	b168      	cbz	r0, 801a1f6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801a1da:	6803      	ldr	r3, [r0, #0]
 801a1dc:	2101      	movs	r1, #1
 801a1de:	695b      	ldr	r3, [r3, #20]
 801a1e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1e4:	4718      	bx	r3
 801a1e6:	f7e6 fb2b 	bl	8000840 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a1ea:	6928      	ldr	r0, [r5, #16]
 801a1ec:	b118      	cbz	r0, 801a1f6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801a1ee:	6803      	ldr	r3, [r0, #0]
 801a1f0:	4621      	mov	r1, r4
 801a1f2:	695b      	ldr	r3, [r3, #20]
 801a1f4:	e7f4      	b.n	801a1e0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801a1f6:	bd70      	pop	{r4, r5, r6, pc}

0801a1f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801a1f8:	b538      	push	{r3, r4, r5, lr}
 801a1fa:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801a1fe:	4604      	mov	r4, r0
 801a200:	460d      	mov	r5, r1
 801a202:	428b      	cmp	r3, r1
 801a204:	d006      	beq.n	801a214 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801a206:	6803      	ldr	r3, [r0, #0]
 801a208:	b929      	cbnz	r1, 801a216 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801a20a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a20e:	4798      	blx	r3
 801a210:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801a214:	bd38      	pop	{r3, r4, r5, pc}
 801a216:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801a21a:	e7f8      	b.n	801a20e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801a21c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801a21c:	4b0d      	ldr	r3, [pc, #52]	; (801a254 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801a21e:	b510      	push	{r4, lr}
 801a220:	781b      	ldrb	r3, [r3, #0]
 801a222:	4604      	mov	r4, r0
 801a224:	b95b      	cbnz	r3, 801a23e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a226:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801a22a:	2b02      	cmp	r3, #2
 801a22c:	d007      	beq.n	801a23e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a22e:	6840      	ldr	r0, [r0, #4]
 801a230:	f000 f90e 	bl	801a450 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801a234:	b118      	cbz	r0, 801a23e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a236:	6862      	ldr	r2, [r4, #4]
 801a238:	7a53      	ldrb	r3, [r2, #9]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d0fc      	beq.n	801a238 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801a23e:	f7e8 f85f 	bl	8002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a242:	4620      	mov	r0, r4
 801a244:	2100      	movs	r1, #0
 801a246:	f7ff ffd7 	bl	801a1f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a24a:	4620      	mov	r0, r4
 801a24c:	f7ff fd74 	bl	8019d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a250:	bd10      	pop	{r4, pc}
 801a252:	bf00      	nop
 801a254:	24026262 	.word	0x24026262

0801a258 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801a258:	4770      	bx	lr

0801a25a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801a25a:	2000      	movs	r0, #0
 801a25c:	4770      	bx	lr

0801a25e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801a25e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801a262:	1a13      	subs	r3, r2, r0
 801a264:	4258      	negs	r0, r3
 801a266:	4158      	adcs	r0, r3
 801a268:	4770      	bx	lr

0801a26a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801a26a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801a26e:	1a9b      	subs	r3, r3, r2
 801a270:	2b00      	cmp	r3, #0
 801a272:	bfdc      	itt	le
 801a274:	6882      	ldrle	r2, [r0, #8]
 801a276:	189b      	addle	r3, r3, r2
 801a278:	2b01      	cmp	r3, #1
 801a27a:	bfcc      	ite	gt
 801a27c:	2000      	movgt	r0, #0
 801a27e:	2001      	movle	r0, #1
 801a280:	4770      	bx	lr

0801a282 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801a282:	6902      	ldr	r2, [r0, #16]
 801a284:	6843      	ldr	r3, [r0, #4]
 801a286:	2024      	movs	r0, #36	; 0x24
 801a288:	fb00 3002 	mla	r0, r0, r2, r3
 801a28c:	4770      	bx	lr

0801a28e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801a28e:	6803      	ldr	r3, [r0, #0]
 801a290:	691b      	ldr	r3, [r3, #16]
 801a292:	4718      	bx	r3

0801a294 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801a294:	2301      	movs	r3, #1
 801a296:	b570      	push	{r4, r5, r6, lr}
 801a298:	7203      	strb	r3, [r0, #8]
 801a29a:	4604      	mov	r4, r0
 801a29c:	6840      	ldr	r0, [r0, #4]
 801a29e:	6803      	ldr	r3, [r0, #0]
 801a2a0:	699b      	ldr	r3, [r3, #24]
 801a2a2:	4798      	blx	r3
 801a2a4:	6803      	ldr	r3, [r0, #0]
 801a2a6:	4605      	mov	r5, r0
 801a2a8:	2b40      	cmp	r3, #64	; 0x40
 801a2aa:	d00c      	beq.n	801a2c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a2ac:	d810      	bhi.n	801a2d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801a2ae:	2b04      	cmp	r3, #4
 801a2b0:	d01d      	beq.n	801a2ee <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801a2b2:	d804      	bhi.n	801a2be <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801a2b4:	2b01      	cmp	r3, #1
 801a2b6:	d006      	beq.n	801a2c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a2b8:	2b02      	cmp	r3, #2
 801a2ba:	d02c      	beq.n	801a316 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801a2bc:	bd70      	pop	{r4, r5, r6, pc}
 801a2be:	2b08      	cmp	r3, #8
 801a2c0:	d01d      	beq.n	801a2fe <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801a2c2:	2b20      	cmp	r3, #32
 801a2c4:	d1fa      	bne.n	801a2bc <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801a2c6:	6823      	ldr	r3, [r4, #0]
 801a2c8:	4620      	mov	r0, r4
 801a2ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a2cc:	4798      	blx	r3
 801a2ce:	e013      	b.n	801a2f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801a2d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2d4:	d0f7      	beq.n	801a2c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a2d6:	d804      	bhi.n	801a2e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801a2d8:	2b80      	cmp	r3, #128	; 0x80
 801a2da:	d0f4      	beq.n	801a2c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a2dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a2e0:	e7f0      	b.n	801a2c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801a2e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a2e6:	d0ee      	beq.n	801a2c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a2e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a2ec:	e7e5      	b.n	801a2ba <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801a2ee:	6823      	ldr	r3, [r4, #0]
 801a2f0:	7f01      	ldrb	r1, [r0, #28]
 801a2f2:	4620      	mov	r0, r4
 801a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2f6:	4798      	blx	r3
 801a2f8:	6823      	ldr	r3, [r4, #0]
 801a2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2fc:	e006      	b.n	801a30c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801a2fe:	6823      	ldr	r3, [r4, #0]
 801a300:	7f01      	ldrb	r1, [r0, #28]
 801a302:	4620      	mov	r0, r4
 801a304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a306:	4798      	blx	r3
 801a308:	6823      	ldr	r3, [r4, #0]
 801a30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a30c:	4629      	mov	r1, r5
 801a30e:	4620      	mov	r0, r4
 801a310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a314:	4718      	bx	r3
 801a316:	6823      	ldr	r3, [r4, #0]
 801a318:	4620      	mov	r0, r4
 801a31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a31c:	4798      	blx	r3
 801a31e:	e7f3      	b.n	801a308 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801a320 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801a320:	4770      	bx	lr

0801a322 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801a322:	4770      	bx	lr

0801a324 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801a324:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801a328:	b510      	push	{r4, lr}
 801a32a:	1ad2      	subs	r2, r2, r3
 801a32c:	2a00      	cmp	r2, #0
 801a32e:	bfdc      	itt	le
 801a330:	6884      	ldrle	r4, [r0, #8]
 801a332:	1912      	addle	r2, r2, r4
 801a334:	2a01      	cmp	r2, #1
 801a336:	dd16      	ble.n	801a366 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801a338:	6842      	ldr	r2, [r0, #4]
 801a33a:	2424      	movs	r4, #36	; 0x24
 801a33c:	fb04 2303 	mla	r3, r4, r3, r2
 801a340:	f101 0220 	add.w	r2, r1, #32
 801a344:	f851 4b04 	ldr.w	r4, [r1], #4
 801a348:	4291      	cmp	r1, r2
 801a34a:	f843 4b04 	str.w	r4, [r3], #4
 801a34e:	d1f9      	bne.n	801a344 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801a350:	780a      	ldrb	r2, [r1, #0]
 801a352:	701a      	strb	r2, [r3, #0]
 801a354:	68c3      	ldr	r3, [r0, #12]
 801a356:	6882      	ldr	r2, [r0, #8]
 801a358:	f3bf 8f5b 	dmb	ish
 801a35c:	3301      	adds	r3, #1
 801a35e:	429a      	cmp	r2, r3
 801a360:	bfd8      	it	le
 801a362:	1a9b      	suble	r3, r3, r2
 801a364:	60c3      	str	r3, [r0, #12]
 801a366:	bd10      	pop	{r4, pc}

0801a368 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801a368:	6903      	ldr	r3, [r0, #16]
 801a36a:	6882      	ldr	r2, [r0, #8]
 801a36c:	f3bf 8f5b 	dmb	ish
 801a370:	3301      	adds	r3, #1
 801a372:	429a      	cmp	r2, r3
 801a374:	bfd8      	it	le
 801a376:	1a9b      	suble	r3, r3, r2
 801a378:	6103      	str	r3, [r0, #16]
 801a37a:	4770      	bx	lr

0801a37c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801a37c:	b570      	push	{r4, r5, r6, lr}
 801a37e:	4604      	mov	r4, r0
 801a380:	460e      	mov	r6, r1
 801a382:	6860      	ldr	r0, [r4, #4]
 801a384:	6803      	ldr	r3, [r0, #0]
 801a386:	685b      	ldr	r3, [r3, #4]
 801a388:	4798      	blx	r3
 801a38a:	2800      	cmp	r0, #0
 801a38c:	d1f9      	bne.n	801a382 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801a38e:	4d0d      	ldr	r5, [pc, #52]	; (801a3c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801a390:	6828      	ldr	r0, [r5, #0]
 801a392:	6803      	ldr	r3, [r0, #0]
 801a394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a396:	4798      	blx	r3
 801a398:	f7e7 ffcc 	bl	8002334 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801a39c:	6828      	ldr	r0, [r5, #0]
 801a39e:	2101      	movs	r1, #1
 801a3a0:	f7ff ff2a 	bl	801a1f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a3a4:	6860      	ldr	r0, [r4, #4]
 801a3a6:	4631      	mov	r1, r6
 801a3a8:	6803      	ldr	r3, [r0, #0]
 801a3aa:	689b      	ldr	r3, [r3, #8]
 801a3ac:	4798      	blx	r3
 801a3ae:	6823      	ldr	r3, [r4, #0]
 801a3b0:	4620      	mov	r0, r4
 801a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3b4:	4798      	blx	r3
 801a3b6:	6828      	ldr	r0, [r5, #0]
 801a3b8:	6803      	ldr	r3, [r0, #0]
 801a3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a3be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a3c0:	4718      	bx	r3
 801a3c2:	bf00      	nop
 801a3c4:	24026264 	.word	0x24026264

0801a3c8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801a3c8:	b508      	push	{r3, lr}
 801a3ca:	f7e7 ff99 	bl	8002300 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a3ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a3d2:	f7e7 bfa3 	b.w	800231c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a3d6 <_ZN8touchgfx13DMA_Interface5startEv>:
 801a3d6:	b510      	push	{r4, lr}
 801a3d8:	4604      	mov	r4, r0
 801a3da:	6840      	ldr	r0, [r0, #4]
 801a3dc:	6803      	ldr	r3, [r0, #0]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	4798      	blx	r3
 801a3e2:	b948      	cbnz	r0, 801a3f8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a3e4:	7a63      	ldrb	r3, [r4, #9]
 801a3e6:	b13b      	cbz	r3, 801a3f8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a3e8:	7a23      	ldrb	r3, [r4, #8]
 801a3ea:	b92b      	cbnz	r3, 801a3f8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a3ec:	6823      	ldr	r3, [r4, #0]
 801a3ee:	4620      	mov	r0, r4
 801a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3f6:	4718      	bx	r3
 801a3f8:	bd10      	pop	{r4, pc}

0801a3fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801a3fa:	b570      	push	{r4, r5, r6, lr}
 801a3fc:	4604      	mov	r4, r0
 801a3fe:	6840      	ldr	r0, [r0, #4]
 801a400:	6803      	ldr	r3, [r0, #0]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	4798      	blx	r3
 801a406:	4605      	mov	r5, r0
 801a408:	b930      	cbnz	r0, 801a418 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a40a:	7a23      	ldrb	r3, [r4, #8]
 801a40c:	b123      	cbz	r3, 801a418 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a40e:	6860      	ldr	r0, [r4, #4]
 801a410:	6803      	ldr	r3, [r0, #0]
 801a412:	695b      	ldr	r3, [r3, #20]
 801a414:	4798      	blx	r3
 801a416:	7225      	strb	r5, [r4, #8]
 801a418:	6860      	ldr	r0, [r4, #4]
 801a41a:	6803      	ldr	r3, [r0, #0]
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	4798      	blx	r3
 801a420:	b928      	cbnz	r0, 801a42e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801a422:	6823      	ldr	r3, [r4, #0]
 801a424:	4620      	mov	r0, r4
 801a426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a42c:	4718      	bx	r3
 801a42e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a432:	f7e7 bf8b 	b.w	800234c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801a438 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801a438:	b510      	push	{r4, lr}
 801a43a:	6082      	str	r2, [r0, #8]
 801a43c:	2200      	movs	r2, #0
 801a43e:	4c03      	ldr	r4, [pc, #12]	; (801a44c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801a440:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801a444:	e9c0 4100 	strd	r4, r1, [r0]
 801a448:	bd10      	pop	{r4, pc}
 801a44a:	bf00      	nop
 801a44c:	0802c2bc 	.word	0x0802c2bc

0801a450 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801a450:	6840      	ldr	r0, [r0, #4]
 801a452:	6803      	ldr	r3, [r0, #0]
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	4718      	bx	r3

0801a458 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801a458:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801a45c:	4770      	bx	lr

0801a45e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801a45e:	b510      	push	{r4, lr}
 801a460:	4604      	mov	r4, r0
 801a462:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a464:	b150      	cbz	r0, 801a47c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801a466:	6803      	ldr	r3, [r0, #0]
 801a468:	68db      	ldr	r3, [r3, #12]
 801a46a:	4798      	blx	r3
 801a46c:	b130      	cbz	r0, 801a47c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801a46e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a470:	4621      	mov	r1, r4
 801a472:	6803      	ldr	r3, [r0, #0]
 801a474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a478:	689b      	ldr	r3, [r3, #8]
 801a47a:	4718      	bx	r3
 801a47c:	bd10      	pop	{r4, pc}

0801a47e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801a47e:	790b      	ldrb	r3, [r1, #4]
 801a480:	2b00      	cmp	r3, #0
 801a482:	bf0c      	ite	eq
 801a484:	2301      	moveq	r3, #1
 801a486:	2300      	movne	r3, #0
 801a488:	b570      	push	{r4, r5, r6, lr}
 801a48a:	4604      	mov	r4, r0
 801a48c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801a490:	460e      	mov	r6, r1
 801a492:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801a496:	d109      	bne.n	801a4ac <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801a498:	b14d      	cbz	r5, 801a4ae <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801a49a:	7933      	ldrb	r3, [r6, #4]
 801a49c:	2b01      	cmp	r3, #1
 801a49e:	d10c      	bne.n	801a4ba <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801a4a0:	6823      	ldr	r3, [r4, #0]
 801a4a2:	4620      	mov	r0, r4
 801a4a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a4a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4aa:	4718      	bx	r3
 801a4ac:	b12d      	cbz	r5, 801a4ba <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801a4ae:	6823      	ldr	r3, [r4, #0]
 801a4b0:	4620      	mov	r0, r4
 801a4b2:	695b      	ldr	r3, [r3, #20]
 801a4b4:	4798      	blx	r3
 801a4b6:	2d00      	cmp	r5, #0
 801a4b8:	d1ef      	bne.n	801a49a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801a4ba:	bd70      	pop	{r4, r5, r6, pc}

0801a4bc <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 801a4bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801a4c0:	b133      	cbz	r3, 801a4d0 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801a4c2:	790b      	ldrb	r3, [r1, #4]
 801a4c4:	2b01      	cmp	r3, #1
 801a4c6:	bf01      	itttt	eq
 801a4c8:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 801a4ca:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 801a4cc:	8603      	strheq	r3, [r0, #48]	; 0x30
 801a4ce:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 801a4d0:	f7ff bfd5 	b.w	801a47e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0801a4d4 <_ZNK8touchgfx6Button17invalidateContentEv>:
 801a4d4:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 801a4d8:	b12a      	cbz	r2, 801a4e6 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801a4da:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801a4de:	b112      	cbz	r2, 801a4e6 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801a4e0:	6803      	ldr	r3, [r0, #0]
 801a4e2:	695b      	ldr	r3, [r3, #20]
 801a4e4:	4718      	bx	r3
 801a4e6:	4770      	bx	lr

0801a4e8 <_ZNK8touchgfx5Image17invalidateContentEv>:
 801a4e8:	b508      	push	{r3, lr}
 801a4ea:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801a4ee:	b10b      	cbz	r3, 801a4f4 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 801a4f0:	f7e9 fc16 	bl	8003d20 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801a4f4:	bd08      	pop	{r3, pc}

0801a4f6 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801a4f6:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a4fa:	4770      	bx	lr

0801a4fc <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 801a4fc:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801a500:	4770      	bx	lr

0801a502 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 801a502:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a504:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a508:	4605      	mov	r5, r0
 801a50a:	2bff      	cmp	r3, #255	; 0xff
 801a50c:	d11e      	bne.n	801a54c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801a50e:	f101 0426 	add.w	r4, r1, #38	; 0x26
 801a512:	4668      	mov	r0, sp
 801a514:	4621      	mov	r1, r4
 801a516:	f005 f9e9 	bl	801f8ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a51a:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 801a51e:	4620      	mov	r0, r4
 801a520:	f005 f97c 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a524:	4286      	cmp	r6, r0
 801a526:	d111      	bne.n	801a54c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801a528:	4621      	mov	r1, r4
 801a52a:	a802      	add	r0, sp, #8
 801a52c:	f005 f9de 	bl	801f8ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a530:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801a534:	4620      	mov	r0, r4
 801a536:	f005 f9a5 	bl	801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a53a:	4286      	cmp	r6, r0
 801a53c:	d106      	bne.n	801a54c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801a53e:	4621      	mov	r1, r4
 801a540:	4628      	mov	r0, r5
 801a542:	f005 f9d3 	bl	801f8ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a546:	4628      	mov	r0, r5
 801a548:	b004      	add	sp, #16
 801a54a:	bd70      	pop	{r4, r5, r6, pc}
 801a54c:	2300      	movs	r3, #0
 801a54e:	802b      	strh	r3, [r5, #0]
 801a550:	806b      	strh	r3, [r5, #2]
 801a552:	80ab      	strh	r3, [r5, #4]
 801a554:	80eb      	strh	r3, [r5, #6]
 801a556:	e7f6      	b.n	801a546 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

0801a558 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 801a558:	b538      	push	{r3, r4, r5, lr}
 801a55a:	2300      	movs	r3, #0
 801a55c:	2501      	movs	r5, #1
 801a55e:	4604      	mov	r4, r0
 801a560:	8083      	strh	r3, [r0, #4]
 801a562:	80c3      	strh	r3, [r0, #6]
 801a564:	8103      	strh	r3, [r0, #8]
 801a566:	8143      	strh	r3, [r0, #10]
 801a568:	8183      	strh	r3, [r0, #12]
 801a56a:	81c3      	strh	r3, [r0, #14]
 801a56c:	8203      	strh	r3, [r0, #16]
 801a56e:	8243      	strh	r3, [r0, #18]
 801a570:	61c3      	str	r3, [r0, #28]
 801a572:	8403      	strh	r3, [r0, #32]
 801a574:	8443      	strh	r3, [r0, #34]	; 0x22
 801a576:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801a57a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 801a57e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801a582:	4b07      	ldr	r3, [pc, #28]	; (801a5a0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 801a584:	6003      	str	r3, [r0, #0]
 801a586:	880b      	ldrh	r3, [r1, #0]
 801a588:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a58a:	23ff      	movs	r3, #255	; 0xff
 801a58c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a590:	f000 fe9c 	bl	801b2cc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801a594:	4b03      	ldr	r3, [pc, #12]	; (801a5a4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 801a596:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801a59a:	4620      	mov	r0, r4
 801a59c:	6023      	str	r3, [r4, #0]
 801a59e:	bd38      	pop	{r3, r4, r5, pc}
 801a5a0:	0802c5a4 	.word	0x0802c5a4
 801a5a4:	0802c3c4 	.word	0x0802c3c4

0801a5a8 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 801a5a8:	4603      	mov	r3, r0
 801a5aa:	3026      	adds	r0, #38	; 0x26
 801a5ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801a5b0:	b90b      	cbnz	r3, 801a5b6 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801a5b2:	f003 bd3d 	b.w	801e030 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801a5b6:	f003 bd4b 	b.w	801e050 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0801a5bc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5c0:	4604      	mov	r4, r0
 801a5c2:	469b      	mov	fp, r3
 801a5c4:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801a5c8:	b0b3      	sub	sp, #204	; 0xcc
 801a5ca:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a5ce:	f9b1 6000 	ldrsh.w	r6, [r1]
 801a5d2:	8888      	ldrh	r0, [r1, #4]
 801a5d4:	9206      	str	r2, [sp, #24]
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	4430      	add	r0, r6
 801a5da:	9211      	str	r2, [sp, #68]	; 0x44
 801a5dc:	b280      	uxth	r0, r0
 801a5de:	fa0f fe80 	sxth.w	lr, r0
 801a5e2:	4596      	cmp	lr, r2
 801a5e4:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 801a5e8:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 801a5ec:	f340 811a 	ble.w	801a824 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801a5f0:	45b4      	cmp	ip, r6
 801a5f2:	f340 8117 	ble.w	801a824 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801a5f6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801a5fa:	88ca      	ldrh	r2, [r1, #6]
 801a5fc:	442a      	add	r2, r5
 801a5fe:	b292      	uxth	r2, r2
 801a600:	b211      	sxth	r1, r2
 801a602:	2900      	cmp	r1, #0
 801a604:	f340 810e 	ble.w	801a824 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801a608:	42ab      	cmp	r3, r5
 801a60a:	f340 810b 	ble.w	801a824 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801a60e:	45f4      	cmp	ip, lr
 801a610:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801a614:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801a618:	bfb8      	it	lt
 801a61a:	fa1f f08c 	uxthlt.w	r0, ip
 801a61e:	428b      	cmp	r3, r1
 801a620:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801a624:	bfb8      	it	lt
 801a626:	b29a      	uxthlt	r2, r3
 801a628:	1b80      	subs	r0, r0, r6
 801a62a:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801a62e:	1b52      	subs	r2, r2, r5
 801a630:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801a634:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801a638:	ab11      	add	r3, sp, #68	; 0x44
 801a63a:	ad13      	add	r5, sp, #76	; 0x4c
 801a63c:	6822      	ldr	r2, [r4, #0]
 801a63e:	1d26      	adds	r6, r4, #4
 801a640:	9307      	str	r3, [sp, #28]
 801a642:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801a644:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a648:	e885 0003 	stmia.w	r5, {r0, r1}
 801a64c:	4629      	mov	r1, r5
 801a64e:	4620      	mov	r0, r4
 801a650:	4790      	blx	r2
 801a652:	4621      	mov	r1, r4
 801a654:	a815      	add	r0, sp, #84	; 0x54
 801a656:	f003 fc47 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a65a:	a815      	add	r0, sp, #84	; 0x54
 801a65c:	f002 f9d2 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a660:	9b07      	ldr	r3, [sp, #28]
 801a662:	4631      	mov	r1, r6
 801a664:	4618      	mov	r0, r3
 801a666:	f002 fa11 	bl	801ca8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a66a:	4628      	mov	r0, r5
 801a66c:	f104 0526 	add.w	r5, r4, #38	; 0x26
 801a670:	f002 f9c8 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a674:	4628      	mov	r0, r5
 801a676:	f005 f9bd 	bl	801f9f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a67a:	9007      	str	r0, [sp, #28]
 801a67c:	2800      	cmp	r0, #0
 801a67e:	f000 80ce 	beq.w	801a81e <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 801a682:	f8db 2000 	ldr.w	r2, [fp]
 801a686:	a90d      	add	r1, sp, #52	; 0x34
 801a688:	a809      	add	r0, sp, #36	; 0x24
 801a68a:	9209      	str	r2, [sp, #36]	; 0x24
 801a68c:	f8db 2004 	ldr.w	r2, [fp, #4]
 801a690:	920a      	str	r2, [sp, #40]	; 0x28
 801a692:	f8db 2008 	ldr.w	r2, [fp, #8]
 801a696:	920b      	str	r2, [sp, #44]	; 0x2c
 801a698:	f8db 200c 	ldr.w	r2, [fp, #12]
 801a69c:	920c      	str	r2, [sp, #48]	; 0x30
 801a69e:	f8da 2000 	ldr.w	r2, [sl]
 801a6a2:	920d      	str	r2, [sp, #52]	; 0x34
 801a6a4:	f8da 2004 	ldr.w	r2, [sl, #4]
 801a6a8:	920e      	str	r2, [sp, #56]	; 0x38
 801a6aa:	f8da 2008 	ldr.w	r2, [sl, #8]
 801a6ae:	920f      	str	r2, [sp, #60]	; 0x3c
 801a6b0:	f8da 200c 	ldr.w	r2, [sl, #12]
 801a6b4:	9210      	str	r2, [sp, #64]	; 0x40
 801a6b6:	4632      	mov	r2, r6
 801a6b8:	f002 f9cc 	bl	801ca54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801a6bc:	4632      	mov	r2, r6
 801a6be:	a90e      	add	r1, sp, #56	; 0x38
 801a6c0:	a80a      	add	r0, sp, #40	; 0x28
 801a6c2:	f002 f9c7 	bl	801ca54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801a6c6:	4632      	mov	r2, r6
 801a6c8:	a90f      	add	r1, sp, #60	; 0x3c
 801a6ca:	a80b      	add	r0, sp, #44	; 0x2c
 801a6cc:	f002 f9c2 	bl	801ca54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801a6d0:	4632      	mov	r2, r6
 801a6d2:	a910      	add	r1, sp, #64	; 0x40
 801a6d4:	a80c      	add	r0, sp, #48	; 0x30
 801a6d6:	f002 f9bd 	bl	801ca54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801a6da:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801a6de:	edd7 3a00 	vldr	s7, [r7]
 801a6e2:	eef0 6a67 	vmov.f32	s13, s15
 801a6e6:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801a6ea:	ed97 5a01 	vldr	s10, [r7, #4]
 801a6ee:	eeb0 7a67 	vmov.f32	s14, s15
 801a6f2:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801a6f6:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801a6fa:	edd9 2a00 	vldr	s5, [r9]
 801a6fe:	eeb0 6a67 	vmov.f32	s12, s15
 801a702:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801a706:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801a70a:	ed98 3a00 	vldr	s6, [r8]
 801a70e:	ed99 4a01 	vldr	s8, [r9, #4]
 801a712:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801a716:	edd8 4a01 	vldr	s9, [r8, #4]
 801a71a:	edd9 5a02 	vldr	s11, [r9, #8]
 801a71e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801a722:	ee16 6a10 	vmov	r6, s12
 801a726:	eeb0 6a67 	vmov.f32	s12, s15
 801a72a:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801a72e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801a732:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801a736:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801a73a:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 801a73e:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 801a742:	ee16 0a10 	vmov	r0, s12
 801a746:	eeb0 6a67 	vmov.f32	s12, s15
 801a74a:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801a74e:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 801a752:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801a756:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801a75a:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 801a75e:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 801a762:	ee16 1a10 	vmov	r1, s12
 801a766:	eeb0 6a67 	vmov.f32	s12, s15
 801a76a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801a76e:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 801a772:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801a776:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801a77a:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801a77e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801a782:	68ff      	ldr	r7, [r7, #12]
 801a784:	ee16 2a10 	vmov	r2, s12
 801a788:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801a78c:	9624      	str	r6, [sp, #144]	; 0x90
 801a78e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801a792:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801a796:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801a79a:	4628      	mov	r0, r5
 801a79c:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 801a7a0:	9b06      	ldr	r3, [sp, #24]
 801a7a2:	922d      	str	r2, [sp, #180]	; 0xb4
 801a7a4:	4a21      	ldr	r2, [pc, #132]	; (801a82c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 801a7a6:	9317      	str	r3, [sp, #92]	; 0x5c
 801a7a8:	8812      	ldrh	r2, [r2, #0]
 801a7aa:	9b07      	ldr	r3, [sp, #28]
 801a7ac:	9218      	str	r2, [sp, #96]	; 0x60
 801a7ae:	9319      	str	r3, [sp, #100]	; 0x64
 801a7b0:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801a7b4:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 801a7b8:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801a7bc:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801a7c0:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801a7c4:	9731      	str	r7, [sp, #196]	; 0xc4
 801a7c6:	f005 f945 	bl	801fa54 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801a7ca:	901a      	str	r0, [sp, #104]	; 0x68
 801a7cc:	4628      	mov	r0, r5
 801a7ce:	f005 f825 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a7d2:	901b      	str	r0, [sp, #108]	; 0x6c
 801a7d4:	4628      	mov	r0, r5
 801a7d6:	f005 f855 	bl	801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a7da:	901c      	str	r0, [sp, #112]	; 0x70
 801a7dc:	4628      	mov	r0, r5
 801a7de:	f005 f81d 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a7e2:	4b13      	ldr	r3, [pc, #76]	; (801a830 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 801a7e4:	901d      	str	r0, [sp, #116]	; 0x74
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a7ec:	b10a      	cbz	r2, 801a7f2 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 801a7ee:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801a7f0:	b905      	cbnz	r5, 801a7f4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 801a7f2:	689d      	ldr	r5, [r3, #8]
 801a7f4:	682b      	ldr	r3, [r5, #0]
 801a7f6:	4620      	mov	r0, r4
 801a7f8:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801a7fa:	f7ff fed5 	bl	801a5a8 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801a7fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a802:	aa1e      	add	r2, sp, #120	; 0x78
 801a804:	a917      	add	r1, sp, #92	; 0x5c
 801a806:	9304      	str	r3, [sp, #16]
 801a808:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a80c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801a810:	ab13      	add	r3, sp, #76	; 0x4c
 801a812:	4628      	mov	r0, r5
 801a814:	9301      	str	r3, [sp, #4]
 801a816:	ab15      	add	r3, sp, #84	; 0x54
 801a818:	9300      	str	r3, [sp, #0]
 801a81a:	ab19      	add	r3, sp, #100	; 0x64
 801a81c:	47b0      	blx	r6
 801a81e:	b033      	add	sp, #204	; 0xcc
 801a820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a824:	2300      	movs	r3, #0
 801a826:	9312      	str	r3, [sp, #72]	; 0x48
 801a828:	e706      	b.n	801a638 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 801a82a:	bf00      	nop
 801a82c:	2402625e 	.word	0x2402625e
 801a830:	24026264 	.word	0x24026264

0801a834 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 801a834:	b570      	push	{r4, r5, r6, lr}
 801a836:	ed2d 8b04 	vpush	{d8-d9}
 801a83a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801a83e:	b098      	sub	sp, #96	; 0x60
 801a840:	4604      	mov	r4, r0
 801a842:	460e      	mov	r6, r1
 801a844:	2b00      	cmp	r3, #0
 801a846:	d065      	beq.n	801a914 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 801a848:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801a84c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801a850:	ed9f 8a37 	vldr	s16, [pc, #220]	; 801a930 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 801a854:	ee09 3a10 	vmov	s18, r3
 801a858:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a85c:	4628      	mov	r0, r5
 801a85e:	ee08 3a90 	vmov	s17, r3
 801a862:	4b34      	ldr	r3, [pc, #208]	; (801a934 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 801a864:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801a868:	930c      	str	r3, [sp, #48]	; 0x30
 801a86a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801a86e:	930d      	str	r3, [sp, #52]	; 0x34
 801a870:	930e      	str	r3, [sp, #56]	; 0x38
 801a872:	ee39 9a08 	vadd.f32	s18, s18, s16
 801a876:	930f      	str	r3, [sp, #60]	; 0x3c
 801a878:	f004 ffd0 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a87c:	ee07 0a90 	vmov	s15, r0
 801a880:	4628      	mov	r0, r5
 801a882:	ee78 8a88 	vadd.f32	s17, s17, s16
 801a886:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801a88a:	f004 fffb 	bl	801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a88e:	4b2a      	ldr	r3, [pc, #168]	; (801a938 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 801a890:	ee07 0a90 	vmov	s15, r0
 801a894:	781b      	ldrb	r3, [r3, #0]
 801a896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a89a:	eef0 7a48 	vmov.f32	s15, s16
 801a89e:	2b01      	cmp	r3, #1
 801a8a0:	d13c      	bne.n	801a91c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 801a8a2:	eef0 6a69 	vmov.f32	s13, s19
 801a8a6:	ee19 3a90 	vmov	r3, s19
 801a8aa:	eeb0 6a47 	vmov.f32	s12, s14
 801a8ae:	eef0 5a47 	vmov.f32	s11, s14
 801a8b2:	eef0 9a48 	vmov.f32	s19, s16
 801a8b6:	eeb0 7a48 	vmov.f32	s14, s16
 801a8ba:	9314      	str	r3, [sp, #80]	; 0x50
 801a8bc:	ab14      	add	r3, sp, #80	; 0x50
 801a8be:	2200      	movs	r2, #0
 801a8c0:	4631      	mov	r1, r6
 801a8c2:	9303      	str	r3, [sp, #12]
 801a8c4:	ab10      	add	r3, sp, #64	; 0x40
 801a8c6:	4620      	mov	r0, r4
 801a8c8:	edcd 7a04 	vstr	s15, [sp, #16]
 801a8cc:	9302      	str	r3, [sp, #8]
 801a8ce:	ab0c      	add	r3, sp, #48	; 0x30
 801a8d0:	ed8d 9a05 	vstr	s18, [sp, #20]
 801a8d4:	9301      	str	r3, [sp, #4]
 801a8d6:	ab08      	add	r3, sp, #32
 801a8d8:	ed8d 9a06 	vstr	s18, [sp, #24]
 801a8dc:	9300      	str	r3, [sp, #0]
 801a8de:	ab04      	add	r3, sp, #16
 801a8e0:	edcd 7a07 	vstr	s15, [sp, #28]
 801a8e4:	edcd 7a08 	vstr	s15, [sp, #32]
 801a8e8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801a8ec:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 801a8f0:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 801a8f4:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801a8f8:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 801a8fc:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 801a900:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801a904:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801a908:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 801a90c:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 801a910:	f7ff fe54 	bl	801a5bc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801a914:	b018      	add	sp, #96	; 0x60
 801a916:	ecbd 8b04 	vpop	{d8-d9}
 801a91a:	bd70      	pop	{r4, r5, r6, pc}
 801a91c:	eef0 6a47 	vmov.f32	s13, s14
 801a920:	ee18 3a10 	vmov	r3, s16
 801a924:	eef0 5a69 	vmov.f32	s11, s19
 801a928:	eeb0 6a48 	vmov.f32	s12, s16
 801a92c:	e7c5      	b.n	801a8ba <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 801a92e:	bf00      	nop
 801a930:	00000000 	.word	0x00000000
 801a934:	42c80000 	.word	0x42c80000
 801a938:	2402625c 	.word	0x2402625c

0801a93c <_ZN8touchgfx8TextArea8setWidthEs>:
 801a93c:	b530      	push	{r4, r5, lr}
 801a93e:	b085      	sub	sp, #20
 801a940:	6803      	ldr	r3, [r0, #0]
 801a942:	4604      	mov	r4, r0
 801a944:	8101      	strh	r1, [r0, #8]
 801a946:	466d      	mov	r5, sp
 801a948:	4601      	mov	r1, r0
 801a94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a94e:	343c      	adds	r4, #60	; 0x3c
 801a950:	4628      	mov	r0, r5
 801a952:	4798      	blx	r3
 801a954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a95c:	b005      	add	sp, #20
 801a95e:	bd30      	pop	{r4, r5, pc}

0801a960 <_ZN8touchgfx8TextArea9setHeightEs>:
 801a960:	b530      	push	{r4, r5, lr}
 801a962:	b085      	sub	sp, #20
 801a964:	6803      	ldr	r3, [r0, #0]
 801a966:	4604      	mov	r4, r0
 801a968:	8141      	strh	r1, [r0, #10]
 801a96a:	466d      	mov	r5, sp
 801a96c:	4601      	mov	r1, r0
 801a96e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a972:	343c      	adds	r4, #60	; 0x3c
 801a974:	4628      	mov	r0, r5
 801a976:	4798      	blx	r3
 801a978:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a97c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a980:	b005      	add	sp, #20
 801a982:	bd30      	pop	{r4, r5, pc}

0801a984 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801a984:	2200      	movs	r2, #0
 801a986:	8002      	strh	r2, [r0, #0]
 801a988:	8042      	strh	r2, [r0, #2]
 801a98a:	8082      	strh	r2, [r0, #4]
 801a98c:	80c2      	strh	r2, [r0, #6]
 801a98e:	4770      	bx	lr

0801a990 <_ZN8touchgfx8TextArea8setAlphaEh>:
 801a990:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 801a994:	4770      	bx	lr
	...

0801a998 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801a998:	b570      	push	{r4, r5, r6, lr}
 801a99a:	6803      	ldr	r3, [r0, #0]
 801a99c:	4604      	mov	r4, r0
 801a99e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a9a0:	460d      	mov	r5, r1
 801a9a2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801a9a4:	4b08      	ldr	r3, [pc, #32]	; (801a9c8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801a9ac:	4b07      	ldr	r3, [pc, #28]	; (801a9cc <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a9b4:	6803      	ldr	r3, [r0, #0]
 801a9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9b8:	4798      	blx	r3
 801a9ba:	1a29      	subs	r1, r5, r0
 801a9bc:	4633      	mov	r3, r6
 801a9be:	4620      	mov	r0, r4
 801a9c0:	b209      	sxth	r1, r1
 801a9c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a9c6:	4718      	bx	r3
 801a9c8:	240262b4 	.word	0x240262b4
 801a9cc:	240262bc 	.word	0x240262bc

0801a9d0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801a9d0:	b570      	push	{r4, r5, r6, lr}
 801a9d2:	6803      	ldr	r3, [r0, #0]
 801a9d4:	4604      	mov	r4, r0
 801a9d6:	4615      	mov	r5, r2
 801a9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9da:	4798      	blx	r3
 801a9dc:	6823      	ldr	r3, [r4, #0]
 801a9de:	4629      	mov	r1, r5
 801a9e0:	4620      	mov	r0, r4
 801a9e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a9e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a9e8:	4718      	bx	r3

0801a9ea <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 801a9ea:	2000      	movs	r0, #0
 801a9ec:	4770      	bx	lr

0801a9ee <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 801a9ee:	2000      	movs	r0, #0
 801a9f0:	4770      	bx	lr
	...

0801a9f4 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801a9f4:	4b07      	ldr	r3, [pc, #28]	; (801aa14 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801a9f6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a9f8:	881b      	ldrh	r3, [r3, #0]
 801a9fa:	4293      	cmp	r3, r2
 801a9fc:	bf81      	itttt	hi
 801a9fe:	4b06      	ldrhi	r3, [pc, #24]	; (801aa18 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801aa00:	681b      	ldrhi	r3, [r3, #0]
 801aa02:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801aa06:	7858      	ldrbhi	r0, [r3, #1]
 801aa08:	bf8c      	ite	hi
 801aa0a:	f000 0003 	andhi.w	r0, r0, #3
 801aa0e:	2000      	movls	r0, #0
 801aa10:	4770      	bx	lr
 801aa12:	bf00      	nop
 801aa14:	240262b8 	.word	0x240262b8
 801aa18:	240262b4 	.word	0x240262b4

0801aa1c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801aa1c:	4b11      	ldr	r3, [pc, #68]	; (801aa64 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801aa1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa22:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801aa24:	4604      	mov	r4, r0
 801aa26:	881b      	ldrh	r3, [r3, #0]
 801aa28:	428b      	cmp	r3, r1
 801aa2a:	d918      	bls.n	801aa5e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801aa2c:	6803      	ldr	r3, [r0, #0]
 801aa2e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801aa30:	4b0d      	ldr	r3, [pc, #52]	; (801aa68 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801aa32:	6818      	ldr	r0, [r3, #0]
 801aa34:	f7ee fb82 	bl	800913c <_ZNK8touchgfx5Texts7getTextEt>
 801aa38:	6823      	ldr	r3, [r4, #0]
 801aa3a:	4606      	mov	r6, r0
 801aa3c:	4620      	mov	r0, r4
 801aa3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aa40:	4798      	blx	r3
 801aa42:	6823      	ldr	r3, [r4, #0]
 801aa44:	4607      	mov	r7, r0
 801aa46:	4620      	mov	r0, r4
 801aa48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801aa4c:	4798      	blx	r3
 801aa4e:	463a      	mov	r2, r7
 801aa50:	4603      	mov	r3, r0
 801aa52:	4631      	mov	r1, r6
 801aa54:	4620      	mov	r0, r4
 801aa56:	46ac      	mov	ip, r5
 801aa58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa5c:	4760      	bx	ip
 801aa5e:	2000      	movs	r0, #0
 801aa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa64:	240262b8 	.word	0x240262b8
 801aa68:	240262c0 	.word	0x240262c0

0801aa6c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801aa6c:	4b18      	ldr	r3, [pc, #96]	; (801aad0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801aa6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801aa72:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801aa74:	4604      	mov	r4, r0
 801aa76:	881b      	ldrh	r3, [r3, #0]
 801aa78:	428b      	cmp	r3, r1
 801aa7a:	d926      	bls.n	801aaca <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801aa7c:	4b15      	ldr	r3, [pc, #84]	; (801aad4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801aa84:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801aa88:	4b13      	ldr	r3, [pc, #76]	; (801aad8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801aa8a:	7855      	ldrb	r5, [r2, #1]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801aa92:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801aa96:	6833      	ldr	r3, [r6, #0]
 801aa98:	69df      	ldr	r7, [r3, #28]
 801aa9a:	4b10      	ldr	r3, [pc, #64]	; (801aadc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801aa9c:	6818      	ldr	r0, [r3, #0]
 801aa9e:	f7ee fb4d 	bl	800913c <_ZNK8touchgfx5Texts7getTextEt>
 801aaa2:	6823      	ldr	r3, [r4, #0]
 801aaa4:	4680      	mov	r8, r0
 801aaa6:	4620      	mov	r0, r4
 801aaa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aaaa:	4798      	blx	r3
 801aaac:	6823      	ldr	r3, [r4, #0]
 801aaae:	4681      	mov	r9, r0
 801aab0:	4620      	mov	r0, r4
 801aab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801aab6:	4798      	blx	r3
 801aab8:	464b      	mov	r3, r9
 801aaba:	9000      	str	r0, [sp, #0]
 801aabc:	4642      	mov	r2, r8
 801aabe:	4629      	mov	r1, r5
 801aac0:	4630      	mov	r0, r6
 801aac2:	47b8      	blx	r7
 801aac4:	b003      	add	sp, #12
 801aac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aaca:	2000      	movs	r0, #0
 801aacc:	e7fa      	b.n	801aac4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801aace:	bf00      	nop
 801aad0:	240262b8 	.word	0x240262b8
 801aad4:	240262b4 	.word	0x240262b4
 801aad8:	240262bc 	.word	0x240262bc
 801aadc:	240262c0 	.word	0x240262c0

0801aae0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801aae0:	b40e      	push	{r1, r2, r3}
 801aae2:	4b30      	ldr	r3, [pc, #192]	; (801aba4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801aae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aae8:	881a      	ldrh	r2, [r3, #0]
 801aaea:	b09d      	sub	sp, #116	; 0x74
 801aaec:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801aaee:	4604      	mov	r4, r0
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	d954      	bls.n	801ab9e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801aaf4:	aa26      	add	r2, sp, #152	; 0x98
 801aaf6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801aba8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801aafa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801abac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801aafe:	9202      	str	r2, [sp, #8]
 801ab00:	f8d9 2000 	ldr.w	r2, [r9]
 801ab04:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801ab08:	f8d8 3000 	ldr.w	r3, [r8]
 801ab0c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ab10:	682b      	ldr	r3, [r5, #0]
 801ab12:	4628      	mov	r0, r5
 801ab14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab16:	4798      	blx	r3
 801ab18:	4606      	mov	r6, r0
 801ab1a:	b207      	sxth	r7, r0
 801ab1c:	a803      	add	r0, sp, #12
 801ab1e:	f003 fdbb 	bl	801e698 <_ZN8touchgfx12TextProviderC1Ev>
 801ab22:	682b      	ldr	r3, [r5, #0]
 801ab24:	4628      	mov	r0, r5
 801ab26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ab28:	4798      	blx	r3
 801ab2a:	682b      	ldr	r3, [r5, #0]
 801ab2c:	4682      	mov	sl, r0
 801ab2e:	4628      	mov	r0, r5
 801ab30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ab32:	4798      	blx	r3
 801ab34:	4653      	mov	r3, sl
 801ab36:	9000      	str	r0, [sp, #0]
 801ab38:	a803      	add	r0, sp, #12
 801ab3a:	9a02      	ldr	r2, [sp, #8]
 801ab3c:	9925      	ldr	r1, [sp, #148]	; 0x94
 801ab3e:	f003 fe06 	bl	801e74e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ab42:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801ab44:	f8d9 3000 	ldr.w	r3, [r9]
 801ab48:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801ab4c:	8925      	ldrh	r5, [r4, #8]
 801ab4e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801ab52:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801ab56:	eba5 050c 	sub.w	r5, r5, ip
 801ab5a:	784a      	ldrb	r2, [r1, #1]
 801ab5c:	f8d8 3000 	ldr.w	r3, [r8]
 801ab60:	b22d      	sxth	r5, r5
 801ab62:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801ab66:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801ab6a:	9500      	str	r5, [sp, #0]
 801ab6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801ab70:	a803      	add	r0, sp, #12
 801ab72:	f001 fc55 	bl	801c420 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801ab76:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801ab7a:	b203      	sxth	r3, r0
 801ab7c:	18b9      	adds	r1, r7, r2
 801ab7e:	2900      	cmp	r1, #0
 801ab80:	dd0b      	ble.n	801ab9a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801ab82:	3b01      	subs	r3, #1
 801ab84:	fb13 f302 	smulbb	r3, r3, r2
 801ab88:	fb16 3300 	smlabb	r3, r6, r0, r3
 801ab8c:	b21f      	sxth	r7, r3
 801ab8e:	4638      	mov	r0, r7
 801ab90:	b01d      	add	sp, #116	; 0x74
 801ab92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab96:	b003      	add	sp, #12
 801ab98:	4770      	bx	lr
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	dcf7      	bgt.n	801ab8e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801ab9e:	2700      	movs	r7, #0
 801aba0:	e7f5      	b.n	801ab8e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801aba2:	bf00      	nop
 801aba4:	240262b8 	.word	0x240262b8
 801aba8:	240262b4 	.word	0x240262b4
 801abac:	240262bc 	.word	0x240262bc

0801abb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801abb0:	4bbd      	ldr	r3, [pc, #756]	; (801aea8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801abb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abb6:	460c      	mov	r4, r1
 801abb8:	881b      	ldrh	r3, [r3, #0]
 801abba:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 801abbc:	b0a9      	sub	sp, #164	; 0xa4
 801abbe:	4680      	mov	r8, r0
 801abc0:	428b      	cmp	r3, r1
 801abc2:	d809      	bhi.n	801abd8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801abc4:	2300      	movs	r3, #0
 801abc6:	f04f 32ff 	mov.w	r2, #4294967295
 801abca:	6083      	str	r3, [r0, #8]
 801abcc:	e9c0 3200 	strd	r3, r2, [r0]
 801abd0:	4640      	mov	r0, r8
 801abd2:	b029      	add	sp, #164	; 0xa4
 801abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abd8:	4eb4      	ldr	r6, [pc, #720]	; (801aeac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801abda:	6833      	ldr	r3, [r6, #0]
 801abdc:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801abe0:	4bb3      	ldr	r3, [pc, #716]	; (801aeb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801abe8:	4bb2      	ldr	r3, [pc, #712]	; (801aeb4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801abea:	6818      	ldr	r0, [r3, #0]
 801abec:	f7ee faa6 	bl	800913c <_ZNK8touchgfx5Texts7getTextEt>
 801abf0:	682b      	ldr	r3, [r5, #0]
 801abf2:	4681      	mov	r9, r0
 801abf4:	4628      	mov	r0, r5
 801abf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abf8:	4798      	blx	r3
 801abfa:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 801abfc:	b203      	sxth	r3, r0
 801abfe:	4682      	mov	sl, r0
 801ac00:	4407      	add	r7, r0
 801ac02:	a80f      	add	r0, sp, #60	; 0x3c
 801ac04:	9304      	str	r3, [sp, #16]
 801ac06:	b2bb      	uxth	r3, r7
 801ac08:	9303      	str	r3, [sp, #12]
 801ac0a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	f040 80a5 	bne.w	801ad5e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 801ac14:	f003 fd40 	bl	801e698 <_ZN8touchgfx12TextProviderC1Ev>
 801ac18:	682b      	ldr	r3, [r5, #0]
 801ac1a:	4628      	mov	r0, r5
 801ac1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ac1e:	4798      	blx	r3
 801ac20:	682b      	ldr	r3, [r5, #0]
 801ac22:	4606      	mov	r6, r0
 801ac24:	4628      	mov	r0, r5
 801ac26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ac28:	4798      	blx	r3
 801ac2a:	6823      	ldr	r3, [r4, #0]
 801ac2c:	4607      	mov	r7, r0
 801ac2e:	4620      	mov	r0, r4
 801ac30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ac32:	4798      	blx	r3
 801ac34:	6823      	ldr	r3, [r4, #0]
 801ac36:	4683      	mov	fp, r0
 801ac38:	4620      	mov	r0, r4
 801ac3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ac3e:	4798      	blx	r3
 801ac40:	463b      	mov	r3, r7
 801ac42:	4649      	mov	r1, r9
 801ac44:	4632      	mov	r2, r6
 801ac46:	2600      	movs	r6, #0
 801ac48:	e9cd b000 	strd	fp, r0, [sp]
 801ac4c:	a80f      	add	r0, sp, #60	; 0x3c
 801ac4e:	4637      	mov	r7, r6
 801ac50:	f003 fd92 	bl	801e778 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801ac54:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ac58:	f8df b250 	ldr.w	fp, [pc, #592]	; 801aeac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801ac5c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801ac60:	bf0c      	ite	eq
 801ac62:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801ac66:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801ac6a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801ac6c:	4629      	mov	r1, r5
 801ac6e:	f8db 3000 	ldr.w	r3, [fp]
 801ac72:	a80f      	add	r0, sp, #60	; 0x3c
 801ac74:	3701      	adds	r7, #1
 801ac76:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801ac7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ac7e:	b2bf      	uxth	r7, r7
 801ac80:	785b      	ldrb	r3, [r3, #1]
 801ac82:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801ac86:	f001 f8e6 	bl	801be56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801ac8a:	9b03      	ldr	r3, [sp, #12]
 801ac8c:	4286      	cmp	r6, r0
 801ac8e:	eba9 0903 	sub.w	r9, r9, r3
 801ac92:	bfb8      	it	lt
 801ac94:	4606      	movlt	r6, r0
 801ac96:	a80f      	add	r0, sp, #60	; 0x3c
 801ac98:	fa0f f989 	sxth.w	r9, r9
 801ac9c:	b236      	sxth	r6, r6
 801ac9e:	f003 fd22 	bl	801e6e6 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801aca2:	b918      	cbnz	r0, 801acac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801aca4:	7a2b      	ldrb	r3, [r5, #8]
 801aca6:	444b      	add	r3, r9
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	dcde      	bgt.n	801ac6a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 801acac:	9b03      	ldr	r3, [sp, #12]
 801acae:	4620      	mov	r0, r4
 801acb0:	9a04      	ldr	r2, [sp, #16]
 801acb2:	fb13 f707 	smulbb	r7, r3, r7
 801acb6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801acb8:	f895 9009 	ldrb.w	r9, [r5, #9]
 801acbc:	1aff      	subs	r7, r7, r3
 801acbe:	b2bf      	uxth	r7, r7
 801acc0:	b23b      	sxth	r3, r7
 801acc2:	429a      	cmp	r2, r3
 801acc4:	bfa8      	it	ge
 801acc6:	4657      	movge	r7, sl
 801acc8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801accc:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801acd0:	6823      	ldr	r3, [r4, #0]
 801acd2:	444f      	add	r7, r9
 801acd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801acd6:	bf08      	it	eq
 801acd8:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 801acdc:	fa1f f987 	uxth.w	r9, r7
 801ace0:	bf18      	it	ne
 801ace2:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801ace6:	4798      	blx	r3
 801ace8:	2801      	cmp	r0, #1
 801acea:	fa0f f789 	sxth.w	r7, r9
 801acee:	b2b3      	uxth	r3, r6
 801acf0:	f000 80e2 	beq.w	801aeb8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801acf4:	2802      	cmp	r0, #2
 801acf6:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 801acfa:	f000 80e3 	beq.w	801aec4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801acfe:	7aea      	ldrb	r2, [r5, #11]
 801ad00:	b236      	sxth	r6, r6
 801ad02:	7b2d      	ldrb	r5, [r5, #12]
 801ad04:	1ab6      	subs	r6, r6, r2
 801ad06:	442a      	add	r2, r5
 801ad08:	fa1f fa86 	uxth.w	sl, r6
 801ad0c:	4413      	add	r3, r2
 801ad0e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801ad12:	fa0f fb8a 	sxth.w	fp, sl
 801ad16:	b29b      	uxth	r3, r3
 801ad18:	2a02      	cmp	r2, #2
 801ad1a:	b21e      	sxth	r6, r3
 801ad1c:	f000 80d6 	beq.w	801aecc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 801ad20:	2a03      	cmp	r2, #3
 801ad22:	f000 80de 	beq.w	801aee2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 801ad26:	2a01      	cmp	r2, #1
 801ad28:	f040 80e6 	bne.w	801aef8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 801ad2c:	8925      	ldrh	r5, [r4, #8]
 801ad2e:	4633      	mov	r3, r6
 801ad30:	463e      	mov	r6, r7
 801ad32:	eba5 0909 	sub.w	r9, r5, r9
 801ad36:	461f      	mov	r7, r3
 801ad38:	465d      	mov	r5, fp
 801ad3a:	fa0f fb89 	sxth.w	fp, r9
 801ad3e:	4b5d      	ldr	r3, [pc, #372]	; (801aeb4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801ad40:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801ad42:	6818      	ldr	r0, [r3, #0]
 801ad44:	f7ee f9fa 	bl	800913c <_ZNK8touchgfx5Texts7getTextEt>
 801ad48:	f8a8 b000 	strh.w	fp, [r8]
 801ad4c:	f8a8 5002 	strh.w	r5, [r8, #2]
 801ad50:	f8a8 6004 	strh.w	r6, [r8, #4]
 801ad54:	f8a8 7006 	strh.w	r7, [r8, #6]
 801ad58:	f8c8 0008 	str.w	r0, [r8, #8]
 801ad5c:	e738      	b.n	801abd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801ad5e:	f003 fc9b 	bl	801e698 <_ZN8touchgfx12TextProviderC1Ev>
 801ad62:	682b      	ldr	r3, [r5, #0]
 801ad64:	4628      	mov	r0, r5
 801ad66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ad68:	4798      	blx	r3
 801ad6a:	682b      	ldr	r3, [r5, #0]
 801ad6c:	4607      	mov	r7, r0
 801ad6e:	4628      	mov	r0, r5
 801ad70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ad72:	4798      	blx	r3
 801ad74:	6823      	ldr	r3, [r4, #0]
 801ad76:	4683      	mov	fp, r0
 801ad78:	4620      	mov	r0, r4
 801ad7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ad7c:	4798      	blx	r3
 801ad7e:	6822      	ldr	r2, [r4, #0]
 801ad80:	9005      	str	r0, [sp, #20]
 801ad82:	4620      	mov	r0, r4
 801ad84:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801ad88:	4790      	blx	r2
 801ad8a:	9b05      	ldr	r3, [sp, #20]
 801ad8c:	463a      	mov	r2, r7
 801ad8e:	4649      	mov	r1, r9
 801ad90:	9001      	str	r0, [sp, #4]
 801ad92:	a80f      	add	r0, sp, #60	; 0x3c
 801ad94:	9300      	str	r3, [sp, #0]
 801ad96:	465b      	mov	r3, fp
 801ad98:	f003 fcee 	bl	801e778 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801ad9c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ada0:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801ada4:	af0f      	add	r7, sp, #60	; 0x3c
 801ada6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801adaa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801adae:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801adb0:	bf0a      	itet	eq
 801adb2:	464a      	moveq	r2, r9
 801adb4:	461a      	movne	r2, r3
 801adb6:	4699      	moveq	r9, r3
 801adb8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801adbc:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801adc0:	1ad2      	subs	r2, r2, r3
 801adc2:	6833      	ldr	r3, [r6, #0]
 801adc4:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 801adc8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801adcc:	7859      	ldrb	r1, [r3, #1]
 801adce:	2300      	movs	r3, #0
 801add0:	9707      	str	r7, [sp, #28]
 801add2:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801add6:	f8ad 3018 	strh.w	r3, [sp, #24]
 801adda:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801adde:	f88d 1020 	strb.w	r1, [sp, #32]
 801ade2:	9509      	str	r5, [sp, #36]	; 0x24
 801ade4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ade8:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801adec:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801adf0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801adf4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801adf8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801adfc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801ae00:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801ae04:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801ae08:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801ae0c:	b350      	cbz	r0, 801ae64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801ae0e:	682b      	ldr	r3, [r5, #0]
 801ae10:	4628      	mov	r0, r5
 801ae12:	695b      	ldr	r3, [r3, #20]
 801ae14:	4798      	blx	r3
 801ae16:	4607      	mov	r7, r0
 801ae18:	b320      	cbz	r0, 801ae64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801ae1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae1c:	4639      	mov	r1, r7
 801ae1e:	6803      	ldr	r3, [r0, #0]
 801ae20:	68db      	ldr	r3, [r3, #12]
 801ae22:	4798      	blx	r3
 801ae24:	4606      	mov	r6, r0
 801ae26:	b1e8      	cbz	r0, 801ae64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801ae28:	7b43      	ldrb	r3, [r0, #13]
 801ae2a:	7a82      	ldrb	r2, [r0, #10]
 801ae2c:	005b      	lsls	r3, r3, #1
 801ae2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ae32:	4313      	orrs	r3, r2
 801ae34:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801ae38:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801ae3c:	2b06      	cmp	r3, #6
 801ae3e:	d111      	bne.n	801ae64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801ae40:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae42:	4632      	mov	r2, r6
 801ae44:	4639      	mov	r1, r7
 801ae46:	6803      	ldr	r3, [r0, #0]
 801ae48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae4a:	4798      	blx	r3
 801ae4c:	7b73      	ldrb	r3, [r6, #13]
 801ae4e:	005b      	lsls	r3, r3, #1
 801ae50:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ae54:	7ab3      	ldrb	r3, [r6, #10]
 801ae56:	4313      	orrs	r3, r2
 801ae58:	4418      	add	r0, r3
 801ae5a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ae5e:	4418      	add	r0, r3
 801ae60:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801ae64:	2600      	movs	r6, #0
 801ae66:	4637      	mov	r7, r6
 801ae68:	a806      	add	r0, sp, #24
 801ae6a:	3701      	adds	r7, #1
 801ae6c:	f001 f9d5 	bl	801c21a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801ae70:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 801ae74:	9b03      	ldr	r3, [sp, #12]
 801ae76:	b2bf      	uxth	r7, r7
 801ae78:	4286      	cmp	r6, r0
 801ae7a:	eba9 0903 	sub.w	r9, r9, r3
 801ae7e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ae82:	bfb8      	it	lt
 801ae84:	4606      	movlt	r6, r0
 801ae86:	fa0f f989 	sxth.w	r9, r9
 801ae8a:	b236      	sxth	r6, r6
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	f43f af0d 	beq.w	801acac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801ae92:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	f47f af08 	bne.w	801acac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801ae9c:	7a2b      	ldrb	r3, [r5, #8]
 801ae9e:	444b      	add	r3, r9
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	dce1      	bgt.n	801ae68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 801aea4:	e702      	b.n	801acac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801aea6:	bf00      	nop
 801aea8:	240262b8 	.word	0x240262b8
 801aeac:	240262b4 	.word	0x240262b4
 801aeb0:	240262bc 	.word	0x240262bc
 801aeb4:	240262c0 	.word	0x240262c0
 801aeb8:	ebaa 0606 	sub.w	r6, sl, r6
 801aebc:	2002      	movs	r0, #2
 801aebe:	fb96 f6f0 	sdiv	r6, r6, r0
 801aec2:	e71c      	b.n	801acfe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801aec4:	441e      	add	r6, r3
 801aec6:	ebaa 0606 	sub.w	r6, sl, r6
 801aeca:	e718      	b.n	801acfe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801aecc:	8925      	ldrh	r5, [r4, #8]
 801aece:	1aed      	subs	r5, r5, r3
 801aed0:	eba5 050a 	sub.w	r5, r5, sl
 801aed4:	fa0f fb85 	sxth.w	fp, r5
 801aed8:	8965      	ldrh	r5, [r4, #10]
 801aeda:	eba5 0509 	sub.w	r5, r5, r9
 801aede:	b22d      	sxth	r5, r5
 801aee0:	e72d      	b.n	801ad3e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801aee2:	8965      	ldrh	r5, [r4, #10]
 801aee4:	f04f 0b00 	mov.w	fp, #0
 801aee8:	1aed      	subs	r5, r5, r3
 801aeea:	4633      	mov	r3, r6
 801aeec:	463e      	mov	r6, r7
 801aeee:	eba5 050a 	sub.w	r5, r5, sl
 801aef2:	461f      	mov	r7, r3
 801aef4:	b22d      	sxth	r5, r5
 801aef6:	e722      	b.n	801ad3e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801aef8:	2500      	movs	r5, #0
 801aefa:	e720      	b.n	801ad3e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0801aefc <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801aefc:	b513      	push	{r0, r1, r4, lr}
 801aefe:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801af02:	4604      	mov	r4, r0
 801af04:	b1fb      	cbz	r3, 801af46 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801af06:	4b16      	ldr	r3, [pc, #88]	; (801af60 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801af08:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801af0a:	881b      	ldrh	r3, [r3, #0]
 801af0c:	428b      	cmp	r3, r1
 801af0e:	d91a      	bls.n	801af46 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801af10:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801af14:	2b00      	cmp	r3, #0
 801af16:	dd16      	ble.n	801af46 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801af18:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	dd12      	ble.n	801af46 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801af20:	4b10      	ldr	r3, [pc, #64]	; (801af64 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801af22:	6818      	ldr	r0, [r3, #0]
 801af24:	f7ee f90a 	bl	800913c <_ZNK8touchgfx5Texts7getTextEt>
 801af28:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801af2c:	6822      	ldr	r2, [r4, #0]
 801af2e:	2b00      	cmp	r3, #0
 801af30:	db06      	blt.n	801af40 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801af32:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801af36:	2b00      	cmp	r3, #0
 801af38:	db02      	blt.n	801af40 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801af3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801af3c:	4298      	cmp	r0, r3
 801af3e:	d004      	beq.n	801af4a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801af40:	6953      	ldr	r3, [r2, #20]
 801af42:	4620      	mov	r0, r4
 801af44:	4798      	blx	r3
 801af46:	b002      	add	sp, #8
 801af48:	bd10      	pop	{r4, pc}
 801af4a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801af4e:	466b      	mov	r3, sp
 801af50:	6912      	ldr	r2, [r2, #16]
 801af52:	c903      	ldmia	r1, {r0, r1}
 801af54:	e883 0003 	stmia.w	r3, {r0, r1}
 801af58:	4619      	mov	r1, r3
 801af5a:	4620      	mov	r0, r4
 801af5c:	4790      	blx	r2
 801af5e:	e7f2      	b.n	801af46 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801af60:	240262b8 	.word	0x240262b8
 801af64:	240262c0 	.word	0x240262c0

0801af68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801af68:	4b45      	ldr	r3, [pc, #276]	; (801b080 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801af6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af6e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801af70:	b08e      	sub	sp, #56	; 0x38
 801af72:	881b      	ldrh	r3, [r3, #0]
 801af74:	4604      	mov	r4, r0
 801af76:	4293      	cmp	r3, r2
 801af78:	d97e      	bls.n	801b078 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801af7a:	6808      	ldr	r0, [r1, #0]
 801af7c:	ab05      	add	r3, sp, #20
 801af7e:	6849      	ldr	r1, [r1, #4]
 801af80:	4d40      	ldr	r5, [pc, #256]	; (801b084 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801af82:	c303      	stmia	r3!, {r0, r1}
 801af84:	4611      	mov	r1, r2
 801af86:	6828      	ldr	r0, [r5, #0]
 801af88:	f7ee f8d8 	bl	800913c <_ZNK8touchgfx5Texts7getTextEt>
 801af8c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801af90:	2b00      	cmp	r3, #0
 801af92:	db11      	blt.n	801afb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801af94:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801af98:	2b00      	cmp	r3, #0
 801af9a:	db0d      	blt.n	801afb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801af9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801af9e:	4298      	cmp	r0, r3
 801afa0:	d10a      	bne.n	801afb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801afa2:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801afa6:	ab09      	add	r3, sp, #36	; 0x24
 801afa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801afac:	e883 0003 	stmia.w	r3, {r0, r1}
 801afb0:	4619      	mov	r1, r3
 801afb2:	a805      	add	r0, sp, #20
 801afb4:	f7fe fa40 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 801afb8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	dd5b      	ble.n	801b078 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801afc0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	dd57      	ble.n	801b078 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801afc8:	4f2f      	ldr	r7, [pc, #188]	; (801b088 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801afca:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801afcc:	683b      	ldr	r3, [r7, #0]
 801afce:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801afd2:	4b2e      	ldr	r3, [pc, #184]	; (801b08c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801afda:	2e00      	cmp	r6, #0
 801afdc:	d04c      	beq.n	801b078 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801afde:	6823      	ldr	r3, [r4, #0]
 801afe0:	4620      	mov	r0, r4
 801afe2:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801afe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801afe8:	4798      	blx	r3
 801afea:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801afec:	683b      	ldr	r3, [r7, #0]
 801afee:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801aff2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801aff6:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801affa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801affe:	785b      	ldrb	r3, [r3, #1]
 801b000:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 801b004:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b008:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b00a:	9609      	str	r6, [sp, #36]	; 0x24
 801b00c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b010:	4b1f      	ldr	r3, [pc, #124]	; (801b090 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801b012:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801b01c:	910b      	str	r1, [sp, #44]	; 0x2c
 801b01e:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801b022:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801b026:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801b02a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801b02e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b032:	b10a      	cbz	r2, 801b038 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 801b034:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801b036:	b906      	cbnz	r6, 801b03a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801b038:	689e      	ldr	r6, [r3, #8]
 801b03a:	af07      	add	r7, sp, #28
 801b03c:	4621      	mov	r1, r4
 801b03e:	4638      	mov	r0, r7
 801b040:	f002 ff52 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b044:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b046:	6828      	ldr	r0, [r5, #0]
 801b048:	f7ee f878 	bl	800913c <_ZNK8touchgfx5Texts7getTextEt>
 801b04c:	6823      	ldr	r3, [r4, #0]
 801b04e:	4605      	mov	r5, r0
 801b050:	4620      	mov	r0, r4
 801b052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b054:	4798      	blx	r3
 801b056:	6823      	ldr	r3, [r4, #0]
 801b058:	4680      	mov	r8, r0
 801b05a:	4620      	mov	r0, r4
 801b05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b060:	4798      	blx	r3
 801b062:	ab09      	add	r3, sp, #36	; 0x24
 801b064:	9501      	str	r5, [sp, #4]
 801b066:	9300      	str	r3, [sp, #0]
 801b068:	ab05      	add	r3, sp, #20
 801b06a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801b06e:	4630      	mov	r0, r6
 801b070:	e897 0006 	ldmia.w	r7, {r1, r2}
 801b074:	f7ed fff3 	bl	800905e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b078:	b00e      	add	sp, #56	; 0x38
 801b07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b07e:	bf00      	nop
 801b080:	240262b8 	.word	0x240262b8
 801b084:	240262c0 	.word	0x240262c0
 801b088:	240262b4 	.word	0x240262b4
 801b08c:	240262bc 	.word	0x240262bc
 801b090:	24026264 	.word	0x24026264

0801b094 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801b094:	b538      	push	{r3, r4, r5, lr}
 801b096:	4b0e      	ldr	r3, [pc, #56]	; (801b0d0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801b098:	4604      	mov	r4, r0
 801b09a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b09c:	881b      	ldrh	r3, [r3, #0]
 801b09e:	429a      	cmp	r2, r3
 801b0a0:	d214      	bcs.n	801b0cc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801b0a2:	6803      	ldr	r3, [r0, #0]
 801b0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b0a6:	4798      	blx	r3
 801b0a8:	6823      	ldr	r3, [r4, #0]
 801b0aa:	4605      	mov	r5, r0
 801b0ac:	4620      	mov	r0, r4
 801b0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0b0:	4798      	blx	r3
 801b0b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b0b6:	b22d      	sxth	r5, r5
 801b0b8:	4601      	mov	r1, r0
 801b0ba:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b0be:	bf06      	itte	eq
 801b0c0:	4602      	moveq	r2, r0
 801b0c2:	4629      	moveq	r1, r5
 801b0c4:	462a      	movne	r2, r5
 801b0c6:	4620      	mov	r0, r4
 801b0c8:	f7ec f9d9 	bl	800747e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801b0cc:	bd38      	pop	{r3, r4, r5, pc}
 801b0ce:	bf00      	nop
 801b0d0:	240262b8 	.word	0x240262b8

0801b0d4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801b0d4:	b530      	push	{r4, r5, lr}
 801b0d6:	888b      	ldrh	r3, [r1, #4]
 801b0d8:	b085      	sub	sp, #20
 801b0da:	4604      	mov	r4, r0
 801b0dc:	8583      	strh	r3, [r0, #44]	; 0x2c
 801b0de:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b0e2:	b923      	cbnz	r3, 801b0ee <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801b0e4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b0e8:	b90b      	cbnz	r3, 801b0ee <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801b0ea:	f7ff ffd3 	bl	801b094 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801b0ee:	6823      	ldr	r3, [r4, #0]
 801b0f0:	466d      	mov	r5, sp
 801b0f2:	4621      	mov	r1, r4
 801b0f4:	343c      	adds	r4, #60	; 0x3c
 801b0f6:	4628      	mov	r0, r5
 801b0f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b0fc:	4798      	blx	r3
 801b0fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b106:	b005      	add	sp, #20
 801b108:	bd30      	pop	{r4, r5, pc}

0801b10a <_ZNK8touchgfx3Box12getSolidRectEv>:
 801b10a:	2300      	movs	r3, #0
 801b10c:	8083      	strh	r3, [r0, #4]
 801b10e:	80c3      	strh	r3, [r0, #6]
 801b110:	8003      	strh	r3, [r0, #0]
 801b112:	8043      	strh	r3, [r0, #2]
 801b114:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801b118:	2bff      	cmp	r3, #255	; 0xff
 801b11a:	bf01      	itttt	eq
 801b11c:	890b      	ldrheq	r3, [r1, #8]
 801b11e:	8083      	strheq	r3, [r0, #4]
 801b120:	894b      	ldrheq	r3, [r1, #10]
 801b122:	80c3      	strheq	r3, [r0, #6]
 801b124:	4770      	bx	lr
	...

0801b128 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801b128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b12a:	4604      	mov	r4, r0
 801b12c:	466b      	mov	r3, sp
 801b12e:	6808      	ldr	r0, [r1, #0]
 801b130:	6849      	ldr	r1, [r1, #4]
 801b132:	c303      	stmia	r3!, {r0, r1}
 801b134:	6823      	ldr	r3, [r4, #0]
 801b136:	4669      	mov	r1, sp
 801b138:	4620      	mov	r0, r4
 801b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b13c:	4798      	blx	r3
 801b13e:	4b08      	ldr	r3, [pc, #32]	; (801b160 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b146:	b10a      	cbz	r2, 801b14c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801b148:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b14a:	b900      	cbnz	r0, 801b14e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801b14c:	6898      	ldr	r0, [r3, #8]
 801b14e:	6803      	ldr	r3, [r0, #0]
 801b150:	4669      	mov	r1, sp
 801b152:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801b154:	6a1d      	ldr	r5, [r3, #32]
 801b156:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b15a:	47a8      	blx	r5
 801b15c:	b003      	add	sp, #12
 801b15e:	bd30      	pop	{r4, r5, pc}
 801b160:	24026264 	.word	0x24026264

0801b164 <_ZNK8touchgfx3Box17invalidateContentEv>:
 801b164:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801b168:	b12a      	cbz	r2, 801b176 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b16a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801b16e:	b112      	cbz	r2, 801b176 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b170:	6803      	ldr	r3, [r0, #0]
 801b172:	695b      	ldr	r3, [r3, #20]
 801b174:	4718      	bx	r3
 801b176:	4770      	bx	lr

0801b178 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801b178:	b570      	push	{r4, r5, r6, lr}
 801b17a:	880b      	ldrh	r3, [r1, #0]
 801b17c:	4605      	mov	r5, r0
 801b17e:	4604      	mov	r4, r0
 801b180:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b182:	8813      	ldrh	r3, [r2, #0]
 801b184:	f825 3f30 	strh.w	r3, [r5, #48]!
 801b188:	4628      	mov	r0, r5
 801b18a:	f004 fb47 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b18e:	4606      	mov	r6, r0
 801b190:	4628      	mov	r0, r5
 801b192:	f004 fb77 	bl	801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b196:	6823      	ldr	r3, [r4, #0]
 801b198:	4605      	mov	r5, r0
 801b19a:	4631      	mov	r1, r6
 801b19c:	4620      	mov	r0, r4
 801b19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1a0:	4798      	blx	r3
 801b1a2:	6823      	ldr	r3, [r4, #0]
 801b1a4:	4629      	mov	r1, r5
 801b1a6:	4620      	mov	r0, r4
 801b1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b1aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b1ae:	4718      	bx	r3

0801b1b0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801b1b0:	b510      	push	{r4, lr}
 801b1b2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801b1b6:	4604      	mov	r4, r0
 801b1b8:	2bff      	cmp	r3, #255	; 0xff
 801b1ba:	d006      	beq.n	801b1ca <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801b1bc:	2300      	movs	r3, #0
 801b1be:	8003      	strh	r3, [r0, #0]
 801b1c0:	8043      	strh	r3, [r0, #2]
 801b1c2:	8083      	strh	r3, [r0, #4]
 801b1c4:	80c3      	strh	r3, [r0, #6]
 801b1c6:	4620      	mov	r0, r4
 801b1c8:	bd10      	pop	{r4, pc}
 801b1ca:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801b1ce:	b11b      	cbz	r3, 801b1d8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801b1d0:	3130      	adds	r1, #48	; 0x30
 801b1d2:	f004 fb8b 	bl	801f8ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b1d6:	e7f6      	b.n	801b1c6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801b1d8:	312e      	adds	r1, #46	; 0x2e
 801b1da:	e7fa      	b.n	801b1d2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801b1dc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1e0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801b1e4:	b08a      	sub	sp, #40	; 0x28
 801b1e6:	4604      	mov	r4, r0
 801b1e8:	4688      	mov	r8, r1
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d066      	beq.n	801b2bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801b1ee:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b1f0:	a805      	add	r0, sp, #20
 801b1f2:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b1f6:	f004 fb11 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b1fa:	4607      	mov	r7, r0
 801b1fc:	a805      	add	r0, sp, #20
 801b1fe:	f004 fb41 	bl	801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b202:	f9b8 6000 	ldrsh.w	r6, [r8]
 801b206:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801b20a:	2300      	movs	r3, #0
 801b20c:	4432      	add	r2, r6
 801b20e:	9306      	str	r3, [sp, #24]
 801b210:	b292      	uxth	r2, r2
 801b212:	fa0f fc82 	sxth.w	ip, r2
 801b216:	459c      	cmp	ip, r3
 801b218:	dd52      	ble.n	801b2c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b21a:	42b7      	cmp	r7, r6
 801b21c:	dd50      	ble.n	801b2c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b21e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801b222:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b226:	442b      	add	r3, r5
 801b228:	b29b      	uxth	r3, r3
 801b22a:	b219      	sxth	r1, r3
 801b22c:	2900      	cmp	r1, #0
 801b22e:	dd47      	ble.n	801b2c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b230:	42a8      	cmp	r0, r5
 801b232:	dd45      	ble.n	801b2c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b234:	4567      	cmp	r7, ip
 801b236:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801b23a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801b23e:	bfb8      	it	lt
 801b240:	b2ba      	uxthlt	r2, r7
 801b242:	4288      	cmp	r0, r1
 801b244:	f8ad 6018 	strh.w	r6, [sp, #24]
 801b248:	bfb8      	it	lt
 801b24a:	b283      	uxthlt	r3, r0
 801b24c:	1b92      	subs	r2, r2, r6
 801b24e:	f8ad 501a 	strh.w	r5, [sp, #26]
 801b252:	1b5b      	subs	r3, r3, r5
 801b254:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b258:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b25c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b264:	429a      	cmp	r2, r3
 801b266:	d026      	beq.n	801b2b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801b268:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	dd22      	ble.n	801b2b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801b270:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b274:	2b00      	cmp	r3, #0
 801b276:	dd1e      	ble.n	801b2b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801b278:	2300      	movs	r3, #0
 801b27a:	a908      	add	r1, sp, #32
 801b27c:	4620      	mov	r0, r4
 801b27e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801b282:	6823      	ldr	r3, [r4, #0]
 801b284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b286:	4798      	blx	r3
 801b288:	4b0f      	ldr	r3, [pc, #60]	; (801b2c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b290:	b10a      	cbz	r2, 801b296 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801b292:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b294:	b900      	cbnz	r0, 801b298 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801b296:	6898      	ldr	r0, [r3, #8]
 801b298:	2501      	movs	r5, #1
 801b29a:	6801      	ldr	r1, [r0, #0]
 801b29c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b2a0:	9502      	str	r5, [sp, #8]
 801b2a2:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801b2a6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b2aa:	9401      	str	r4, [sp, #4]
 801b2ac:	ac06      	add	r4, sp, #24
 801b2ae:	9400      	str	r4, [sp, #0]
 801b2b0:	688c      	ldr	r4, [r1, #8]
 801b2b2:	a905      	add	r1, sp, #20
 801b2b4:	47a0      	blx	r4
 801b2b6:	b00a      	add	sp, #40	; 0x28
 801b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2bc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b2be:	e797      	b.n	801b1f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801b2c0:	2300      	movs	r3, #0
 801b2c2:	9307      	str	r3, [sp, #28]
 801b2c4:	e7ca      	b.n	801b25c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801b2c6:	bf00      	nop
 801b2c8:	24026264 	.word	0x24026264

0801b2cc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801b2cc:	b570      	push	{r4, r5, r6, lr}
 801b2ce:	880b      	ldrh	r3, [r1, #0]
 801b2d0:	460d      	mov	r5, r1
 801b2d2:	4604      	mov	r4, r0
 801b2d4:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b2d6:	4608      	mov	r0, r1
 801b2d8:	f004 faa0 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b2dc:	4606      	mov	r6, r0
 801b2de:	4628      	mov	r0, r5
 801b2e0:	f004 fad0 	bl	801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b2e4:	6823      	ldr	r3, [r4, #0]
 801b2e6:	4605      	mov	r5, r0
 801b2e8:	4631      	mov	r1, r6
 801b2ea:	4620      	mov	r0, r4
 801b2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2ee:	4798      	blx	r3
 801b2f0:	6823      	ldr	r3, [r4, #0]
 801b2f2:	4629      	mov	r1, r5
 801b2f4:	4620      	mov	r0, r4
 801b2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b2fc:	4718      	bx	r3

0801b2fe <_ZNK8touchgfx5Image12getSolidRectEv>:
 801b2fe:	b510      	push	{r4, lr}
 801b300:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b304:	4604      	mov	r4, r0
 801b306:	2bff      	cmp	r3, #255	; 0xff
 801b308:	d006      	beq.n	801b318 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801b30a:	2300      	movs	r3, #0
 801b30c:	8003      	strh	r3, [r0, #0]
 801b30e:	8043      	strh	r3, [r0, #2]
 801b310:	8083      	strh	r3, [r0, #4]
 801b312:	80c3      	strh	r3, [r0, #6]
 801b314:	4620      	mov	r0, r4
 801b316:	bd10      	pop	{r4, pc}
 801b318:	3126      	adds	r1, #38	; 0x26
 801b31a:	f004 fae7 	bl	801f8ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b31e:	e7f9      	b.n	801b314 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801b320 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b324:	4604      	mov	r4, r0
 801b326:	b088      	sub	sp, #32
 801b328:	2500      	movs	r5, #0
 801b32a:	460f      	mov	r7, r1
 801b32c:	f854 3b26 	ldr.w	r3, [r4], #38
 801b330:	a904      	add	r1, sp, #16
 801b332:	4606      	mov	r6, r0
 801b334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b336:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b33a:	4798      	blx	r3
 801b33c:	4620      	mov	r0, r4
 801b33e:	f004 fa6d 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b342:	4680      	mov	r8, r0
 801b344:	4620      	mov	r0, r4
 801b346:	f004 fa9d 	bl	801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b34a:	9506      	str	r5, [sp, #24]
 801b34c:	ad06      	add	r5, sp, #24
 801b34e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b352:	4639      	mov	r1, r7
 801b354:	f8ad 801c 	strh.w	r8, [sp, #28]
 801b358:	4628      	mov	r0, r5
 801b35a:	f7fe f86d 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 801b35e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b362:	2b00      	cmp	r3, #0
 801b364:	dd19      	ble.n	801b39a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801b366:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	dd15      	ble.n	801b39a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801b36e:	4b0c      	ldr	r3, [pc, #48]	; (801b3a0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b376:	b10a      	cbz	r2, 801b37c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801b378:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b37a:	b900      	cbnz	r0, 801b37e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801b37c:	6898      	ldr	r0, [r3, #8]
 801b37e:	2701      	movs	r7, #1
 801b380:	6801      	ldr	r1, [r0, #0]
 801b382:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b386:	9702      	str	r7, [sp, #8]
 801b388:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801b38c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b390:	e9cd 5600 	strd	r5, r6, [sp]
 801b394:	688d      	ldr	r5, [r1, #8]
 801b396:	4621      	mov	r1, r4
 801b398:	47a8      	blx	r5
 801b39a:	b008      	add	sp, #32
 801b39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3a0:	24026264 	.word	0x24026264

0801b3a4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801b3a4:	b510      	push	{r4, lr}
 801b3a6:	6803      	ldr	r3, [r0, #0]
 801b3a8:	460c      	mov	r4, r1
 801b3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3ac:	4798      	blx	r3
 801b3ae:	1b03      	subs	r3, r0, r4
 801b3b0:	4258      	negs	r0, r3
 801b3b2:	4158      	adcs	r0, r3
 801b3b4:	bd10      	pop	{r4, pc}
	...

0801b3b8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801b3b8:	4b01      	ldr	r3, [pc, #4]	; (801b3c0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801b3ba:	6019      	str	r1, [r3, #0]
 801b3bc:	4770      	bx	lr
 801b3be:	bf00      	nop
 801b3c0:	2402626c 	.word	0x2402626c

0801b3c4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3c8:	4696      	mov	lr, r2
 801b3ca:	b097      	sub	sp, #92	; 0x5c
 801b3cc:	4605      	mov	r5, r0
 801b3ce:	4614      	mov	r4, r2
 801b3d0:	460e      	mov	r6, r1
 801b3d2:	461f      	mov	r7, r3
 801b3d4:	f10d 0c1c 	add.w	ip, sp, #28
 801b3d8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801b3dc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801b3e0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801b3e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3ec:	f8de 3000 	ldr.w	r3, [lr]
 801b3f0:	f104 0e14 	add.w	lr, r4, #20
 801b3f4:	f8cc 3000 	str.w	r3, [ip]
 801b3f8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b3fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b404:	f8de 3000 	ldr.w	r3, [lr]
 801b408:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801b40c:	f8cc 3000 	str.w	r3, [ip]
 801b410:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801b414:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b418:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b41c:	f8de 3000 	ldr.w	r3, [lr]
 801b420:	4631      	mov	r1, r6
 801b422:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b424:	4628      	mov	r0, r5
 801b426:	f8cc 3000 	str.w	r3, [ip]
 801b42a:	682b      	ldr	r3, [r5, #0]
 801b42c:	9201      	str	r2, [sp, #4]
 801b42e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b430:	f8cd 8008 	str.w	r8, [sp, #8]
 801b434:	9200      	str	r2, [sp, #0]
 801b436:	aa07      	add	r2, sp, #28
 801b438:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b43c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801b440:	463b      	mov	r3, r7
 801b442:	47d8      	blx	fp
 801b444:	46a6      	mov	lr, r4
 801b446:	f10d 0c1c 	add.w	ip, sp, #28
 801b44a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b44e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b452:	f8de 3000 	ldr.w	r3, [lr]
 801b456:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801b45a:	343c      	adds	r4, #60	; 0x3c
 801b45c:	f8cc 3000 	str.w	r3, [ip]
 801b460:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b464:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b468:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b46c:	f8de 3000 	ldr.w	r3, [lr]
 801b470:	f8cc 3000 	str.w	r3, [ip]
 801b474:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801b478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b47a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b47e:	6823      	ldr	r3, [r4, #0]
 801b480:	4631      	mov	r1, r6
 801b482:	4628      	mov	r0, r5
 801b484:	f8cc 3000 	str.w	r3, [ip]
 801b488:	682b      	ldr	r3, [r5, #0]
 801b48a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b48e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b490:	f8cd 8008 	str.w	r8, [sp, #8]
 801b494:	9201      	str	r2, [sp, #4]
 801b496:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b498:	9200      	str	r2, [sp, #0]
 801b49a:	aa07      	add	r2, sp, #28
 801b49c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801b49e:	463b      	mov	r3, r7
 801b4a0:	47a0      	blx	r4
 801b4a2:	b017      	add	sp, #92	; 0x5c
 801b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4a8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b4a8:	2000      	movs	r0, #0
 801b4aa:	4770      	bx	lr

0801b4ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801b4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4b0:	b08d      	sub	sp, #52	; 0x34
 801b4b2:	4688      	mov	r8, r1
 801b4b4:	f8d3 c000 	ldr.w	ip, [r3]
 801b4b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b4ba:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801b4be:	680f      	ldr	r7, [r1, #0]
 801b4c0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801b4c4:	eba7 070c 	sub.w	r7, r7, ip
 801b4c8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801b4cc:	edd3 6a07 	vldr	s13, [r3, #28]
 801b4d0:	42bc      	cmp	r4, r7
 801b4d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b4d4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801b4d8:	bfa8      	it	ge
 801b4da:	463c      	movge	r4, r7
 801b4dc:	f9b1 9000 	ldrsh.w	r9, [r1]
 801b4e0:	f9ba 1000 	ldrsh.w	r1, [sl]
 801b4e4:	ee07 4a90 	vmov	s15, r4
 801b4e8:	eb09 0e0c 	add.w	lr, r9, ip
 801b4ec:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801b4f0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801b4f4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801b4f8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801b4fc:	4571      	cmp	r1, lr
 801b4fe:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b502:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b506:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b50a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b50e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801b512:	ee32 1a05 	vadd.f32	s2, s4, s10
 801b516:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b51a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801b51e:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b522:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b526:	f340 808c 	ble.w	801b642 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801b52a:	eba1 060e 	sub.w	r6, r1, lr
 801b52e:	fb96 f5f4 	sdiv	r5, r6, r4
 801b532:	ee07 5a10 	vmov	s14, r5
 801b536:	2d00      	cmp	r5, #0
 801b538:	fb04 6615 	mls	r6, r4, r5, r6
 801b53c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b540:	eea7 0a04 	vfma.f32	s0, s14, s8
 801b544:	eee7 0a24 	vfma.f32	s1, s14, s9
 801b548:	eea7 1a05 	vfma.f32	s2, s14, s10
 801b54c:	dd12      	ble.n	801b574 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801b54e:	ee70 6a44 	vsub.f32	s13, s0, s8
 801b552:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801b556:	ee31 2a45 	vsub.f32	s4, s2, s10
 801b55a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801b55e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b562:	bf14      	ite	ne
 801b564:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801b568:	eeb0 7a67 	vmoveq.f32	s14, s15
 801b56c:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b570:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b574:	fb05 f204 	mul.w	r2, r5, r4
 801b578:	1abf      	subs	r7, r7, r2
 801b57a:	4494      	add	ip, r2
 801b57c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801b580:	4411      	add	r1, r2
 801b582:	eb09 020c 	add.w	r2, r9, ip
 801b586:	b209      	sxth	r1, r1
 801b588:	443a      	add	r2, r7
 801b58a:	428a      	cmp	r2, r1
 801b58c:	bfc4      	itt	gt
 801b58e:	eba1 0209 	subgt.w	r2, r1, r9
 801b592:	eba2 070c 	subgt.w	r7, r2, ip
 801b596:	2f00      	cmp	r7, #0
 801b598:	dd50      	ble.n	801b63c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801b59a:	fb97 f1f4 	sdiv	r1, r7, r4
 801b59e:	fb04 7211 	mls	r2, r4, r1, r7
 801b5a2:	b90a      	cbnz	r2, 801b5a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801b5a4:	3901      	subs	r1, #1
 801b5a6:	4622      	mov	r2, r4
 801b5a8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801b5ac:	6840      	ldr	r0, [r0, #4]
 801b5ae:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801b5b2:	44b6      	add	lr, r6
 801b5b4:	f8d0 a000 	ldr.w	sl, [r0]
 801b5b8:	2900      	cmp	r1, #0
 801b5ba:	bfcc      	ite	gt
 801b5bc:	46a1      	movgt	r9, r4
 801b5be:	4691      	movle	r9, r2
 801b5c0:	900b      	str	r0, [sp, #44]	; 0x2c
 801b5c2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b5c4:	fb04 e505 	mla	r5, r4, r5, lr
 801b5c8:	eef0 6a42 	vmov.f32	s13, s4
 801b5cc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801b5d0:	9008      	str	r0, [sp, #32]
 801b5d2:	eeb0 7a61 	vmov.f32	s14, s3
 801b5d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801b5d8:	695b      	ldr	r3, [r3, #20]
 801b5da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b5de:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801b5e2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b5e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b5e8:	445b      	add	r3, fp
 801b5ea:	9307      	str	r3, [sp, #28]
 801b5ec:	ee16 3a90 	vmov	r3, s13
 801b5f0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801b5f4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801b5f8:	ee21 3a23 	vmul.f32	s6, s2, s7
 801b5fc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801b600:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b604:	ee17 7a90 	vmov	r7, s15
 801b608:	ee73 7a42 	vsub.f32	s15, s6, s4
 801b60c:	fb97 f7f4 	sdiv	r7, r7, r4
 801b610:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b614:	ee17 ca90 	vmov	ip, s15
 801b618:	fb9c fcf4 	sdiv	ip, ip, r4
 801b61c:	fb0c 3306 	mla	r3, ip, r6, r3
 801b620:	9302      	str	r3, [sp, #8]
 801b622:	ee17 3a10 	vmov	r3, s14
 801b626:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801b62a:	fb07 3706 	mla	r7, r7, r6, r3
 801b62e:	eba9 0306 	sub.w	r3, r9, r6
 801b632:	e9cd 4700 	strd	r4, r7, [sp]
 801b636:	f8da 4008 	ldr.w	r4, [sl, #8]
 801b63a:	47a0      	blx	r4
 801b63c:	b00d      	add	sp, #52	; 0x34
 801b63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b642:	2500      	movs	r5, #0
 801b644:	462e      	mov	r6, r5
 801b646:	e799      	b.n	801b57c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801b648 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b64c:	b0db      	sub	sp, #364	; 0x16c
 801b64e:	461d      	mov	r5, r3
 801b650:	4614      	mov	r4, r2
 801b652:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801b656:	910f      	str	r1, [sp, #60]	; 0x3c
 801b658:	4629      	mov	r1, r5
 801b65a:	930a      	str	r3, [sp, #40]	; 0x28
 801b65c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801b660:	9009      	str	r0, [sp, #36]	; 0x24
 801b662:	930b      	str	r3, [sp, #44]	; 0x2c
 801b664:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801b668:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801b66c:	9310      	str	r3, [sp, #64]	; 0x40
 801b66e:	6803      	ldr	r3, [r0, #0]
 801b670:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801b672:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b676:	47b8      	blx	r7
 801b678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b67a:	6058      	str	r0, [r3, #4]
 801b67c:	2800      	cmp	r0, #0
 801b67e:	f000 83a1 	beq.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b682:	682b      	ldr	r3, [r5, #0]
 801b684:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801b688:	ed94 7a02 	vldr	s14, [r4, #8]
 801b68c:	9314      	str	r3, [sp, #80]	; 0x50
 801b68e:	686b      	ldr	r3, [r5, #4]
 801b690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b694:	9315      	str	r3, [sp, #84]	; 0x54
 801b696:	4bc1      	ldr	r3, [pc, #772]	; (801b99c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801b698:	7819      	ldrb	r1, [r3, #0]
 801b69a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801b69e:	2900      	cmp	r1, #0
 801b6a0:	bf16      	itet	ne
 801b6a2:	4619      	movne	r1, r3
 801b6a4:	4611      	moveq	r1, r2
 801b6a6:	4613      	movne	r3, r2
 801b6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6ac:	9116      	str	r1, [sp, #88]	; 0x58
 801b6ae:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801b6b2:	f240 8387 	bls.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6b6:	ed94 7a07 	vldr	s14, [r4, #28]
 801b6ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6c2:	f240 837f 	bls.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6c6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801b6ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6d2:	f240 8377 	bls.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6d6:	6822      	ldr	r2, [r4, #0]
 801b6d8:	4bb1      	ldr	r3, [pc, #708]	; (801b9a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801b6da:	429a      	cmp	r2, r3
 801b6dc:	f2c0 8372 	blt.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6e0:	49b0      	ldr	r1, [pc, #704]	; (801b9a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801b6e2:	6963      	ldr	r3, [r4, #20]
 801b6e4:	428a      	cmp	r2, r1
 801b6e6:	f300 836d 	bgt.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6ea:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801b6ee:	48ae      	ldr	r0, [pc, #696]	; (801b9a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801b6f0:	33ff      	adds	r3, #255	; 0xff
 801b6f2:	4283      	cmp	r3, r0
 801b6f4:	f200 8366 	bhi.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b6fa:	4dac      	ldr	r5, [pc, #688]	; (801b9ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801b6fc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801b700:	33ff      	adds	r3, #255	; 0xff
 801b702:	42ab      	cmp	r3, r5
 801b704:	f200 835e 	bhi.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b708:	6862      	ldr	r2, [r4, #4]
 801b70a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801b70e:	33ff      	adds	r3, #255	; 0xff
 801b710:	4283      	cmp	r3, r0
 801b712:	f200 8357 	bhi.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b716:	69a1      	ldr	r1, [r4, #24]
 801b718:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801b71c:	33ff      	adds	r3, #255	; 0xff
 801b71e:	4283      	cmp	r3, r0
 801b720:	f200 8350 	bhi.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b724:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b726:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801b72a:	30ff      	adds	r0, #255	; 0xff
 801b72c:	42a8      	cmp	r0, r5
 801b72e:	f200 8349 	bhi.w	801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b732:	428a      	cmp	r2, r1
 801b734:	f280 8110 	bge.w	801b958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801b738:	429a      	cmp	r2, r3
 801b73a:	f300 8119 	bgt.w	801b970 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801b73e:	4299      	cmp	r1, r3
 801b740:	f280 811d 	bge.w	801b97e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801b744:	2502      	movs	r5, #2
 801b746:	2701      	movs	r7, #1
 801b748:	46a9      	mov	r9, r5
 801b74a:	46b8      	mov	r8, r7
 801b74c:	f04f 0a00 	mov.w	sl, #0
 801b750:	4621      	mov	r1, r4
 801b752:	a849      	add	r0, sp, #292	; 0x124
 801b754:	f003 fcea 	bl	801f12c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801b758:	4622      	mov	r2, r4
 801b75a:	4653      	mov	r3, sl
 801b75c:	a949      	add	r1, sp, #292	; 0x124
 801b75e:	f8cd 9000 	str.w	r9, [sp]
 801b762:	a819      	add	r0, sp, #100	; 0x64
 801b764:	f003 fe12 	bl	801f38c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b768:	4622      	mov	r2, r4
 801b76a:	4653      	mov	r3, sl
 801b76c:	a949      	add	r1, sp, #292	; 0x124
 801b76e:	f8cd 8000 	str.w	r8, [sp]
 801b772:	a829      	add	r0, sp, #164	; 0xa4
 801b774:	f003 fe0a 	bl	801f38c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b778:	4643      	mov	r3, r8
 801b77a:	4622      	mov	r2, r4
 801b77c:	a949      	add	r1, sp, #292	; 0x124
 801b77e:	f8cd 9000 	str.w	r9, [sp]
 801b782:	a839      	add	r0, sp, #228	; 0xe4
 801b784:	f003 fe02 	bl	801f38c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b788:	42af      	cmp	r7, r5
 801b78a:	af12      	add	r7, sp, #72	; 0x48
 801b78c:	bfb7      	itett	lt
 801b78e:	2300      	movlt	r3, #0
 801b790:	2301      	movge	r3, #1
 801b792:	ad29      	addlt	r5, sp, #164	; 0xa4
 801b794:	ac19      	addlt	r4, sp, #100	; 0x64
 801b796:	bfb1      	iteee	lt
 801b798:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b79a:	ad19      	addge	r5, sp, #100	; 0x64
 801b79c:	930e      	strge	r3, [sp, #56]	; 0x38
 801b79e:	ac29      	addge	r4, sp, #164	; 0xa4
 801b7a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b7a6:	e887 0003 	stmia.w	r7, {r0, r1}
 801b7aa:	b928      	cbnz	r0, 801b7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801b7ac:	4b80      	ldr	r3, [pc, #512]	; (801b9b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801b7ae:	6818      	ldr	r0, [r3, #0]
 801b7b0:	6803      	ldr	r3, [r0, #0]
 801b7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b7b4:	4798      	blx	r3
 801b7b6:	6038      	str	r0, [r7, #0]
 801b7b8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801b7ba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801b7be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b7c2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801b7c4:	930c      	str	r3, [sp, #48]	; 0x30
 801b7c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b7c8:	6963      	ldr	r3, [r4, #20]
 801b7ca:	440b      	add	r3, r1
 801b7cc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801b7d0:	4408      	add	r0, r1
 801b7d2:	b200      	sxth	r0, r0
 801b7d4:	4283      	cmp	r3, r0
 801b7d6:	900d      	str	r0, [sp, #52]	; 0x34
 801b7d8:	f280 80dd 	bge.w	801b996 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801b7dc:	428b      	cmp	r3, r1
 801b7de:	da08      	bge.n	801b7f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801b7e0:	2a00      	cmp	r2, #0
 801b7e2:	dd06      	ble.n	801b7f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801b7e4:	1acb      	subs	r3, r1, r3
 801b7e6:	429a      	cmp	r2, r3
 801b7e8:	f2c0 80e4 	blt.w	801b9b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	f300 80e2 	bgt.w	801b9b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801b7f2:	6967      	ldr	r7, [r4, #20]
 801b7f4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801b7f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7fa:	443b      	add	r3, r7
 801b7fc:	461f      	mov	r7, r3
 801b7fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b800:	1bdf      	subs	r7, r3, r7
 801b802:	4297      	cmp	r7, r2
 801b804:	bfa8      	it	ge
 801b806:	4617      	movge	r7, r2
 801b808:	2f00      	cmp	r7, #0
 801b80a:	f340 8166 	ble.w	801bada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801b80e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801b810:	6829      	ldr	r1, [r5, #0]
 801b812:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b816:	f9bb 3000 	ldrsh.w	r3, [fp]
 801b81a:	4411      	add	r1, r2
 801b81c:	6820      	ldr	r0, [r4, #0]
 801b81e:	4299      	cmp	r1, r3
 801b820:	dd1a      	ble.n	801b858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801b822:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801b826:	4402      	add	r2, r0
 801b828:	440b      	add	r3, r1
 801b82a:	b21b      	sxth	r3, r3
 801b82c:	429a      	cmp	r2, r3
 801b82e:	dc13      	bgt.n	801b858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801b830:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b832:	a912      	add	r1, sp, #72	; 0x48
 801b834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b836:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	9206      	str	r2, [sp, #24]
 801b83c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b83e:	9500      	str	r5, [sp, #0]
 801b840:	9205      	str	r2, [sp, #20]
 801b842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b844:	e9cd b203 	strd	fp, r2, [sp, #12]
 801b848:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801b84a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801b84e:	aa49      	add	r2, sp, #292	; 0x124
 801b850:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801b854:	4623      	mov	r3, r4
 801b856:	47c8      	blx	r9
 801b858:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801b85c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801b860:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801b864:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b868:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801b86c:	68a1      	ldr	r1, [r4, #8]
 801b86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b872:	ed94 6a08 	vldr	s12, [r4, #32]
 801b876:	edd4 6a07 	vldr	s13, [r4, #28]
 801b87a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801b87e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b882:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801b886:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b88a:	edc4 6a07 	vstr	s13, [r4, #28]
 801b88e:	441a      	add	r2, r3
 801b890:	6963      	ldr	r3, [r4, #20]
 801b892:	3301      	adds	r3, #1
 801b894:	6022      	str	r2, [r4, #0]
 801b896:	6163      	str	r3, [r4, #20]
 801b898:	69a3      	ldr	r3, [r4, #24]
 801b89a:	3b01      	subs	r3, #1
 801b89c:	61a3      	str	r3, [r4, #24]
 801b89e:	6923      	ldr	r3, [r4, #16]
 801b8a0:	440b      	add	r3, r1
 801b8a2:	68e1      	ldr	r1, [r4, #12]
 801b8a4:	428b      	cmp	r3, r1
 801b8a6:	6123      	str	r3, [r4, #16]
 801b8a8:	db15      	blt.n	801b8d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801b8aa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801b8ae:	3201      	adds	r2, #1
 801b8b0:	1a5b      	subs	r3, r3, r1
 801b8b2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b8b6:	6022      	str	r2, [r4, #0]
 801b8b8:	6123      	str	r3, [r4, #16]
 801b8ba:	edc4 6a07 	vstr	s13, [r4, #28]
 801b8be:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801b8c2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b8c6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801b8ca:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801b8ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b8d2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801b8d6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801b8da:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801b8de:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801b8e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b8e6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801b8ea:	68a9      	ldr	r1, [r5, #8]
 801b8ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b8f0:	ed95 6a08 	vldr	s12, [r5, #32]
 801b8f4:	edd5 6a07 	vldr	s13, [r5, #28]
 801b8f8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b8fc:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b900:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b904:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b908:	edc5 6a07 	vstr	s13, [r5, #28]
 801b90c:	441a      	add	r2, r3
 801b90e:	696b      	ldr	r3, [r5, #20]
 801b910:	3301      	adds	r3, #1
 801b912:	602a      	str	r2, [r5, #0]
 801b914:	616b      	str	r3, [r5, #20]
 801b916:	69ab      	ldr	r3, [r5, #24]
 801b918:	3b01      	subs	r3, #1
 801b91a:	61ab      	str	r3, [r5, #24]
 801b91c:	692b      	ldr	r3, [r5, #16]
 801b91e:	440b      	add	r3, r1
 801b920:	68e9      	ldr	r1, [r5, #12]
 801b922:	428b      	cmp	r3, r1
 801b924:	612b      	str	r3, [r5, #16]
 801b926:	db15      	blt.n	801b954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801b928:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b92c:	3201      	adds	r2, #1
 801b92e:	1a5b      	subs	r3, r3, r1
 801b930:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b934:	602a      	str	r2, [r5, #0]
 801b936:	612b      	str	r3, [r5, #16]
 801b938:	edc5 6a07 	vstr	s13, [r5, #28]
 801b93c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801b940:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b944:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b948:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801b94c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b950:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b954:	3f01      	subs	r7, #1
 801b956:	e757      	b.n	801b808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801b958:	4299      	cmp	r1, r3
 801b95a:	dc13      	bgt.n	801b984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801b95c:	429a      	cmp	r2, r3
 801b95e:	da14      	bge.n	801b98a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801b960:	2502      	movs	r5, #2
 801b962:	2703      	movs	r7, #3
 801b964:	f04f 0800 	mov.w	r8, #0
 801b968:	46a9      	mov	r9, r5
 801b96a:	f04f 0a01 	mov.w	sl, #1
 801b96e:	e6ef      	b.n	801b750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801b970:	2501      	movs	r5, #1
 801b972:	2700      	movs	r7, #0
 801b974:	46a9      	mov	r9, r5
 801b976:	46b8      	mov	r8, r7
 801b978:	f04f 0a02 	mov.w	sl, #2
 801b97c:	e6e8      	b.n	801b750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801b97e:	2501      	movs	r5, #1
 801b980:	2702      	movs	r7, #2
 801b982:	e6e1      	b.n	801b748 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801b984:	2500      	movs	r5, #0
 801b986:	2701      	movs	r7, #1
 801b988:	e7f4      	b.n	801b974 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801b98a:	2702      	movs	r7, #2
 801b98c:	2503      	movs	r5, #3
 801b98e:	f04f 0900 	mov.w	r9, #0
 801b992:	46b8      	mov	r8, r7
 801b994:	e7e9      	b.n	801b96a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801b996:	4613      	mov	r3, r2
 801b998:	e728      	b.n	801b7ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801b99a:	bf00      	nop
 801b99c:	2402625c 	.word	0x2402625c
 801b9a0:	fffd8f01 	.word	0xfffd8f01
 801b9a4:	00027100 	.word	0x00027100
 801b9a8:	0004e1ff 	.word	0x0004e1ff
 801b9ac:	0004e1fe 	.word	0x0004e1fe
 801b9b0:	24026264 	.word	0x24026264
 801b9b4:	4613      	mov	r3, r2
 801b9b6:	992b      	ldr	r1, [sp, #172]	; 0xac
 801b9b8:	469e      	mov	lr, r3
 801b9ba:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801b9bc:	469c      	mov	ip, r3
 801b9be:	9111      	str	r1, [sp, #68]	; 0x44
 801b9c0:	f04f 0900 	mov.w	r9, #0
 801b9c4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801b9c8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801b9cc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801b9d0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801b9d4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801b9d8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801b9dc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801b9e0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801b9e4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801b9e8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801b9ec:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801b9f0:	f1bc 0f00 	cmp.w	ip, #0
 801b9f4:	d147      	bne.n	801ba86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801b9f6:	eb03 0c07 	add.w	ip, r3, r7
 801b9fa:	1ad7      	subs	r7, r2, r3
 801b9fc:	f1b9 0f00 	cmp.w	r9, #0
 801ba00:	d009      	beq.n	801ba16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801ba02:	9029      	str	r0, [sp, #164]	; 0xa4
 801ba04:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801ba08:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801ba0c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801ba10:	912d      	str	r1, [sp, #180]	; 0xb4
 801ba12:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801ba16:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ba18:	f04f 0800 	mov.w	r8, #0
 801ba1c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ba20:	9111      	str	r1, [sp, #68]	; 0x44
 801ba22:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ba26:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801ba2a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ba2e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ba32:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801ba36:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801ba3a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801ba3e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ba42:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ba46:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ba4a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ba4e:	f1be 0f00 	cmp.w	lr, #0
 801ba52:	d031      	beq.n	801bab8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801ba54:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ba56:	4450      	add	r0, sl
 801ba58:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ba5c:	4431      	add	r1, r6
 801ba5e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ba62:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ba66:	4549      	cmp	r1, r9
 801ba68:	db08      	blt.n	801ba7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801ba6a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ba6e:	3001      	adds	r0, #1
 801ba70:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ba74:	eba1 0109 	sub.w	r1, r1, r9
 801ba78:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ba7c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ba80:	f04f 0801 	mov.w	r8, #1
 801ba84:	e7e3      	b.n	801ba4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801ba86:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ba88:	4450      	add	r0, sl
 801ba8a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ba8e:	4431      	add	r1, r6
 801ba90:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ba94:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801ba98:	4541      	cmp	r1, r8
 801ba9a:	db08      	blt.n	801baae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801ba9c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801baa0:	3001      	adds	r0, #1
 801baa2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801baa6:	eba1 0108 	sub.w	r1, r1, r8
 801baaa:	ee77 7a86 	vadd.f32	s15, s15, s12
 801baae:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bab2:	f04f 0901 	mov.w	r9, #1
 801bab6:	e79b      	b.n	801b9f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801bab8:	449c      	add	ip, r3
 801baba:	1aff      	subs	r7, r7, r3
 801babc:	f1b8 0f00 	cmp.w	r8, #0
 801bac0:	d009      	beq.n	801bad6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801bac2:	9019      	str	r0, [sp, #100]	; 0x64
 801bac4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801bac8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801bacc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801bad0:	911d      	str	r1, [sp, #116]	; 0x74
 801bad2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801bad6:	1ad2      	subs	r2, r2, r3
 801bad8:	e68b      	b.n	801b7f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801badc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801bade:	2b00      	cmp	r3, #0
 801bae0:	f000 80d1 	beq.w	801bc86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801bae4:	ad19      	add	r5, sp, #100	; 0x64
 801bae6:	ac39      	add	r4, sp, #228	; 0xe4
 801bae8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801baea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801baee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801baf2:	930c      	str	r3, [sp, #48]	; 0x30
 801baf4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801baf6:	6963      	ldr	r3, [r4, #20]
 801baf8:	440b      	add	r3, r1
 801bafa:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801bafe:	4408      	add	r0, r1
 801bb00:	b200      	sxth	r0, r0
 801bb02:	4283      	cmp	r3, r0
 801bb04:	900d      	str	r0, [sp, #52]	; 0x34
 801bb06:	f280 80c1 	bge.w	801bc8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801bb0a:	428b      	cmp	r3, r1
 801bb0c:	da08      	bge.n	801bb20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bb0e:	2a00      	cmp	r2, #0
 801bb10:	dd06      	ble.n	801bb20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bb12:	1acb      	subs	r3, r1, r3
 801bb14:	429a      	cmp	r2, r3
 801bb16:	f2c0 80bb 	blt.w	801bc90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	f300 80b9 	bgt.w	801bc92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801bb20:	6967      	ldr	r7, [r4, #20]
 801bb22:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801bb26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb28:	443b      	add	r3, r7
 801bb2a:	461f      	mov	r7, r3
 801bb2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb2e:	1bdf      	subs	r7, r3, r7
 801bb30:	4297      	cmp	r7, r2
 801bb32:	bfa8      	it	ge
 801bb34:	4617      	movge	r7, r2
 801bb36:	2f00      	cmp	r7, #0
 801bb38:	f340 813c 	ble.w	801bdb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801bb3c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801bb3e:	6829      	ldr	r1, [r5, #0]
 801bb40:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb44:	f9bb 3000 	ldrsh.w	r3, [fp]
 801bb48:	4411      	add	r1, r2
 801bb4a:	6820      	ldr	r0, [r4, #0]
 801bb4c:	4299      	cmp	r1, r3
 801bb4e:	dd1a      	ble.n	801bb86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801bb50:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801bb54:	4402      	add	r2, r0
 801bb56:	440b      	add	r3, r1
 801bb58:	b21b      	sxth	r3, r3
 801bb5a:	429a      	cmp	r2, r3
 801bb5c:	dc13      	bgt.n	801bb86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801bb5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bb60:	a912      	add	r1, sp, #72	; 0x48
 801bb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb64:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	9206      	str	r2, [sp, #24]
 801bb6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb6c:	9500      	str	r5, [sp, #0]
 801bb6e:	9205      	str	r2, [sp, #20]
 801bb70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bb72:	e9cd b203 	strd	fp, r2, [sp, #12]
 801bb76:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bb78:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801bb7c:	aa49      	add	r2, sp, #292	; 0x124
 801bb7e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801bb82:	4623      	mov	r3, r4
 801bb84:	47c8      	blx	r9
 801bb86:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801bb8a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801bb8e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801bb92:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bb96:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801bb9a:	68a1      	ldr	r1, [r4, #8]
 801bb9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bba0:	ed94 6a08 	vldr	s12, [r4, #32]
 801bba4:	edd4 6a07 	vldr	s13, [r4, #28]
 801bba8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801bbac:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bbb0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801bbb4:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bbb8:	edc4 6a07 	vstr	s13, [r4, #28]
 801bbbc:	441a      	add	r2, r3
 801bbbe:	6963      	ldr	r3, [r4, #20]
 801bbc0:	3301      	adds	r3, #1
 801bbc2:	6022      	str	r2, [r4, #0]
 801bbc4:	6163      	str	r3, [r4, #20]
 801bbc6:	69a3      	ldr	r3, [r4, #24]
 801bbc8:	3b01      	subs	r3, #1
 801bbca:	61a3      	str	r3, [r4, #24]
 801bbcc:	6923      	ldr	r3, [r4, #16]
 801bbce:	440b      	add	r3, r1
 801bbd0:	68e1      	ldr	r1, [r4, #12]
 801bbd2:	428b      	cmp	r3, r1
 801bbd4:	6123      	str	r3, [r4, #16]
 801bbd6:	db15      	blt.n	801bc04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801bbd8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801bbdc:	3201      	adds	r2, #1
 801bbde:	1a5b      	subs	r3, r3, r1
 801bbe0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bbe4:	6022      	str	r2, [r4, #0]
 801bbe6:	6123      	str	r3, [r4, #16]
 801bbe8:	edc4 6a07 	vstr	s13, [r4, #28]
 801bbec:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801bbf0:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bbf4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801bbf8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801bbfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bc00:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801bc04:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801bc08:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801bc0c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801bc10:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bc14:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801bc18:	68a9      	ldr	r1, [r5, #8]
 801bc1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc1e:	ed95 6a08 	vldr	s12, [r5, #32]
 801bc22:	edd5 6a07 	vldr	s13, [r5, #28]
 801bc26:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801bc2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bc2e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801bc32:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bc36:	edc5 6a07 	vstr	s13, [r5, #28]
 801bc3a:	441a      	add	r2, r3
 801bc3c:	696b      	ldr	r3, [r5, #20]
 801bc3e:	3301      	adds	r3, #1
 801bc40:	602a      	str	r2, [r5, #0]
 801bc42:	616b      	str	r3, [r5, #20]
 801bc44:	69ab      	ldr	r3, [r5, #24]
 801bc46:	3b01      	subs	r3, #1
 801bc48:	61ab      	str	r3, [r5, #24]
 801bc4a:	692b      	ldr	r3, [r5, #16]
 801bc4c:	440b      	add	r3, r1
 801bc4e:	68e9      	ldr	r1, [r5, #12]
 801bc50:	428b      	cmp	r3, r1
 801bc52:	612b      	str	r3, [r5, #16]
 801bc54:	db15      	blt.n	801bc82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801bc56:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801bc5a:	3201      	adds	r2, #1
 801bc5c:	1a5b      	subs	r3, r3, r1
 801bc5e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bc62:	602a      	str	r2, [r5, #0]
 801bc64:	612b      	str	r3, [r5, #16]
 801bc66:	edc5 6a07 	vstr	s13, [r5, #28]
 801bc6a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801bc6e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bc72:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801bc76:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801bc7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bc7e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801bc82:	3f01      	subs	r7, #1
 801bc84:	e757      	b.n	801bb36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801bc86:	ad39      	add	r5, sp, #228	; 0xe4
 801bc88:	ac19      	add	r4, sp, #100	; 0x64
 801bc8a:	e72d      	b.n	801bae8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801bc8c:	4613      	mov	r3, r2
 801bc8e:	e744      	b.n	801bb1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801bc90:	4613      	mov	r3, r2
 801bc92:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801bc94:	469e      	mov	lr, r3
 801bc96:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801bc9a:	461f      	mov	r7, r3
 801bc9c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801bca0:	f04f 0900 	mov.w	r9, #0
 801bca4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801bca8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801bcac:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801bcb0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801bcb4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801bcb8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801bcba:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801bcbe:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801bcc2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801bcc6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801bcca:	960e      	str	r6, [sp, #56]	; 0x38
 801bccc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801bcd0:	2f00      	cmp	r7, #0
 801bcd2:	d146      	bne.n	801bd62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801bcd4:	449c      	add	ip, r3
 801bcd6:	1ad7      	subs	r7, r2, r3
 801bcd8:	f1b9 0f00 	cmp.w	r9, #0
 801bcdc:	d009      	beq.n	801bcf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801bcde:	9039      	str	r0, [sp, #228]	; 0xe4
 801bce0:	913d      	str	r1, [sp, #244]	; 0xf4
 801bce2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801bce6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801bcea:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801bcee:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801bcf2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801bcf4:	f04f 0800 	mov.w	r8, #0
 801bcf8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801bcfc:	910e      	str	r1, [sp, #56]	; 0x38
 801bcfe:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801bd02:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801bd06:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801bd0a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801bd0e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801bd12:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801bd16:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801bd1a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801bd1e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801bd22:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801bd26:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801bd2a:	f1be 0f00 	cmp.w	lr, #0
 801bd2e:	d030      	beq.n	801bd92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801bd30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801bd32:	4450      	add	r0, sl
 801bd34:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801bd38:	4431      	add	r1, r6
 801bd3a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801bd3e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801bd42:	4549      	cmp	r1, r9
 801bd44:	db08      	blt.n	801bd58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801bd46:	ee77 7a85 	vadd.f32	s15, s15, s10
 801bd4a:	3001      	adds	r0, #1
 801bd4c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801bd50:	eba1 0109 	sub.w	r1, r1, r9
 801bd54:	ee37 7a06 	vadd.f32	s14, s14, s12
 801bd58:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bd5c:	f04f 0801 	mov.w	r8, #1
 801bd60:	e7e3      	b.n	801bd2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801bd62:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801bd64:	4450      	add	r0, sl
 801bd66:	ee37 7a24 	vadd.f32	s14, s14, s9
 801bd6a:	4431      	add	r1, r6
 801bd6c:	ee77 7a84 	vadd.f32	s15, s15, s8
 801bd70:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801bd74:	4541      	cmp	r1, r8
 801bd76:	db08      	blt.n	801bd8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801bd78:	ee76 6a85 	vadd.f32	s13, s13, s10
 801bd7c:	3001      	adds	r0, #1
 801bd7e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801bd82:	eba1 0108 	sub.w	r1, r1, r8
 801bd86:	ee77 7a86 	vadd.f32	s15, s15, s12
 801bd8a:	3f01      	subs	r7, #1
 801bd8c:	f04f 0901 	mov.w	r9, #1
 801bd90:	e79e      	b.n	801bcd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801bd92:	449c      	add	ip, r3
 801bd94:	1aff      	subs	r7, r7, r3
 801bd96:	f1b8 0f00 	cmp.w	r8, #0
 801bd9a:	d009      	beq.n	801bdb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801bd9c:	9019      	str	r0, [sp, #100]	; 0x64
 801bd9e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801bda2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801bda6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801bdaa:	911d      	str	r1, [sp, #116]	; 0x74
 801bdac:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801bdb0:	1ad2      	subs	r2, r2, r3
 801bdb2:	e6b5      	b.n	801bb20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bdb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	b923      	cbnz	r3, 801bdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdba:	4b04      	ldr	r3, [pc, #16]	; (801bdcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801bdbc:	6818      	ldr	r0, [r3, #0]
 801bdbe:	6803      	ldr	r3, [r0, #0]
 801bdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bdc2:	4798      	blx	r3
 801bdc4:	b05b      	add	sp, #364	; 0x16c
 801bdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdca:	bf00      	nop
 801bdcc:	24026264 	.word	0x24026264

0801bdd0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801bdd0:	b570      	push	{r4, r5, r6, lr}
 801bdd2:	4604      	mov	r4, r0
 801bdd4:	2500      	movs	r5, #0
 801bdd6:	9805      	ldr	r0, [sp, #20]
 801bdd8:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801bddc:	6061      	str	r1, [r4, #4]
 801bdde:	8263      	strh	r3, [r4, #18]
 801bde0:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801bde4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801bde8:	8025      	strh	r5, [r4, #0]
 801bdea:	7221      	strb	r1, [r4, #8]
 801bdec:	7266      	strb	r6, [r4, #9]
 801bdee:	60e0      	str	r0, [r4, #12]
 801bdf0:	8222      	strh	r2, [r4, #16]
 801bdf2:	82a3      	strh	r3, [r4, #20]
 801bdf4:	82e5      	strh	r5, [r4, #22]
 801bdf6:	8325      	strh	r5, [r4, #24]
 801bdf8:	8365      	strh	r5, [r4, #26]
 801bdfa:	83a5      	strh	r5, [r4, #28]
 801bdfc:	83e5      	strh	r5, [r4, #30]
 801bdfe:	8425      	strh	r5, [r4, #32]
 801be00:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801be04:	b32e      	cbz	r6, 801be52 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801be06:	6803      	ldr	r3, [r0, #0]
 801be08:	695b      	ldr	r3, [r3, #20]
 801be0a:	4798      	blx	r3
 801be0c:	4606      	mov	r6, r0
 801be0e:	b300      	cbz	r0, 801be52 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801be10:	68e0      	ldr	r0, [r4, #12]
 801be12:	4631      	mov	r1, r6
 801be14:	6803      	ldr	r3, [r0, #0]
 801be16:	68db      	ldr	r3, [r3, #12]
 801be18:	4798      	blx	r3
 801be1a:	4605      	mov	r5, r0
 801be1c:	b1c8      	cbz	r0, 801be52 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801be1e:	7b43      	ldrb	r3, [r0, #13]
 801be20:	7a82      	ldrb	r2, [r0, #10]
 801be22:	005b      	lsls	r3, r3, #1
 801be24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be28:	4313      	orrs	r3, r2
 801be2a:	8423      	strh	r3, [r4, #32]
 801be2c:	7a63      	ldrb	r3, [r4, #9]
 801be2e:	2b06      	cmp	r3, #6
 801be30:	d10f      	bne.n	801be52 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801be32:	68e0      	ldr	r0, [r4, #12]
 801be34:	462a      	mov	r2, r5
 801be36:	4631      	mov	r1, r6
 801be38:	6803      	ldr	r3, [r0, #0]
 801be3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be3c:	4798      	blx	r3
 801be3e:	7b6b      	ldrb	r3, [r5, #13]
 801be40:	005b      	lsls	r3, r3, #1
 801be42:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801be46:	7aab      	ldrb	r3, [r5, #10]
 801be48:	4313      	orrs	r3, r2
 801be4a:	4418      	add	r0, r3
 801be4c:	8c23      	ldrh	r3, [r4, #32]
 801be4e:	4418      	add	r0, r3
 801be50:	8420      	strh	r0, [r4, #32]
 801be52:	4620      	mov	r0, r4
 801be54:	bd70      	pop	{r4, r5, r6, pc}

0801be56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801be56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be5a:	2400      	movs	r4, #0
 801be5c:	b085      	sub	sp, #20
 801be5e:	4681      	mov	r9, r0
 801be60:	4688      	mov	r8, r1
 801be62:	4692      	mov	sl, r2
 801be64:	469b      	mov	fp, r3
 801be66:	4627      	mov	r7, r4
 801be68:	4625      	mov	r5, r4
 801be6a:	4626      	mov	r6, r4
 801be6c:	4554      	cmp	r4, sl
 801be6e:	da2a      	bge.n	801bec6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801be70:	2300      	movs	r3, #0
 801be72:	9303      	str	r3, [sp, #12]
 801be74:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801be78:	429d      	cmp	r5, r3
 801be7a:	d004      	beq.n	801be86 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801be7c:	f242 030b 	movw	r3, #8203	; 0x200b
 801be80:	429d      	cmp	r5, r3
 801be82:	bf18      	it	ne
 801be84:	462f      	movne	r7, r5
 801be86:	ab03      	add	r3, sp, #12
 801be88:	4642      	mov	r2, r8
 801be8a:	4659      	mov	r1, fp
 801be8c:	4648      	mov	r0, r9
 801be8e:	f002 ff63 	bl	801ed58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801be92:	4605      	mov	r5, r0
 801be94:	b1b8      	cbz	r0, 801bec6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801be96:	280a      	cmp	r0, #10
 801be98:	d015      	beq.n	801bec6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801be9a:	9a03      	ldr	r2, [sp, #12]
 801be9c:	b18a      	cbz	r2, 801bec2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801be9e:	7b50      	ldrb	r0, [r2, #13]
 801bea0:	4639      	mov	r1, r7
 801bea2:	7a93      	ldrb	r3, [r2, #10]
 801bea4:	0040      	lsls	r0, r0, #1
 801bea6:	8895      	ldrh	r5, [r2, #4]
 801bea8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801beac:	4303      	orrs	r3, r0
 801beae:	4640      	mov	r0, r8
 801beb0:	9301      	str	r3, [sp, #4]
 801beb2:	f8d8 3000 	ldr.w	r3, [r8]
 801beb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801beb8:	4798      	blx	r3
 801beba:	9b01      	ldr	r3, [sp, #4]
 801bebc:	4418      	add	r0, r3
 801bebe:	4406      	add	r6, r0
 801bec0:	b2b6      	uxth	r6, r6
 801bec2:	3401      	adds	r4, #1
 801bec4:	e7d2      	b.n	801be6c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801bec6:	4630      	mov	r0, r6
 801bec8:	b005      	add	sp, #20
 801beca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bece <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801bece:	2a02      	cmp	r2, #2
 801bed0:	b530      	push	{r4, r5, lr}
 801bed2:	d011      	beq.n	801bef8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801bed4:	2a03      	cmp	r2, #3
 801bed6:	d01c      	beq.n	801bf12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801bed8:	2a01      	cmp	r2, #1
 801beda:	d10c      	bne.n	801bef6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801bedc:	888b      	ldrh	r3, [r1, #4]
 801bede:	8801      	ldrh	r1, [r0, #0]
 801bee0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801bee4:	1a5b      	subs	r3, r3, r1
 801bee6:	8844      	ldrh	r4, [r0, #2]
 801bee8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801beec:	1a9b      	subs	r3, r3, r2
 801beee:	8004      	strh	r4, [r0, #0]
 801bef0:	8081      	strh	r1, [r0, #4]
 801bef2:	8043      	strh	r3, [r0, #2]
 801bef4:	80c2      	strh	r2, [r0, #6]
 801bef6:	bd30      	pop	{r4, r5, pc}
 801bef8:	88cb      	ldrh	r3, [r1, #6]
 801befa:	8842      	ldrh	r2, [r0, #2]
 801befc:	1a9b      	subs	r3, r3, r2
 801befe:	88c2      	ldrh	r2, [r0, #6]
 801bf00:	1a9b      	subs	r3, r3, r2
 801bf02:	888a      	ldrh	r2, [r1, #4]
 801bf04:	8801      	ldrh	r1, [r0, #0]
 801bf06:	8043      	strh	r3, [r0, #2]
 801bf08:	1a52      	subs	r2, r2, r1
 801bf0a:	8881      	ldrh	r1, [r0, #4]
 801bf0c:	1a52      	subs	r2, r2, r1
 801bf0e:	8002      	strh	r2, [r0, #0]
 801bf10:	e7f1      	b.n	801bef6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801bf12:	88cb      	ldrh	r3, [r1, #6]
 801bf14:	8841      	ldrh	r1, [r0, #2]
 801bf16:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801bf1a:	1a5b      	subs	r3, r3, r1
 801bf1c:	f9b0 5000 	ldrsh.w	r5, [r0]
 801bf20:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801bf24:	1a9b      	subs	r3, r3, r2
 801bf26:	8045      	strh	r5, [r0, #2]
 801bf28:	8082      	strh	r2, [r0, #4]
 801bf2a:	8003      	strh	r3, [r0, #0]
 801bf2c:	80c4      	strh	r4, [r0, #6]
 801bf2e:	e7e2      	b.n	801bef6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801bf30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf34:	b09f      	sub	sp, #124	; 0x7c
 801bf36:	9116      	str	r1, [sp, #88]	; 0x58
 801bf38:	9317      	str	r3, [sp, #92]	; 0x5c
 801bf3a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801bf3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bf3e:	8809      	ldrh	r1, [r1, #0]
 801bf40:	889b      	ldrh	r3, [r3, #4]
 801bf42:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801bf46:	440b      	add	r3, r1
 801bf48:	9212      	str	r2, [sp, #72]	; 0x48
 801bf4a:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801bf4e:	b21b      	sxth	r3, r3
 801bf50:	9011      	str	r0, [sp, #68]	; 0x44
 801bf52:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801bf56:	9310      	str	r3, [sp, #64]	; 0x40
 801bf58:	f8d8 3000 	ldr.w	r3, [r8]
 801bf5c:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 801bf60:	7b19      	ldrb	r1, [r3, #12]
 801bf62:	7adb      	ldrb	r3, [r3, #11]
 801bf64:	9114      	str	r1, [sp, #80]	; 0x50
 801bf66:	9315      	str	r3, [sp, #84]	; 0x54
 801bf68:	2a00      	cmp	r2, #0
 801bf6a:	d06a      	beq.n	801c042 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801bf6c:	f898 3010 	ldrb.w	r3, [r8, #16]
 801bf70:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801bf72:	2b06      	cmp	r3, #6
 801bf74:	bf14      	ite	ne
 801bf76:	2301      	movne	r3, #1
 801bf78:	2302      	moveq	r3, #2
 801bf7a:	4413      	add	r3, r2
 801bf7c:	f04f 0900 	mov.w	r9, #0
 801bf80:	930f      	str	r3, [sp, #60]	; 0x3c
 801bf82:	464c      	mov	r4, r9
 801bf84:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801bf88:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801bf8c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801bf90:	4293      	cmp	r3, r2
 801bf92:	f280 808f 	bge.w	801c0b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801bf96:	2300      	movs	r3, #0
 801bf98:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801bf9c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801bfa0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801bfa4:	429c      	cmp	r4, r3
 801bfa6:	d006      	beq.n	801bfb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801bfa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bfaa:	f242 020b 	movw	r2, #8203	; 0x200b
 801bfae:	4294      	cmp	r4, r2
 801bfb0:	bf18      	it	ne
 801bfb2:	4623      	movne	r3, r4
 801bfb4:	930d      	str	r3, [sp, #52]	; 0x34
 801bfb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bfb8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801bfba:	f8d8 2000 	ldr.w	r2, [r8]
 801bfbe:	428b      	cmp	r3, r1
 801bfc0:	db41      	blt.n	801c046 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801bfc2:	6813      	ldr	r3, [r2, #0]
 801bfc4:	4610      	mov	r0, r2
 801bfc6:	695b      	ldr	r3, [r3, #20]
 801bfc8:	4798      	blx	r3
 801bfca:	4604      	mov	r4, r0
 801bfcc:	f8d8 0000 	ldr.w	r0, [r8]
 801bfd0:	aa1d      	add	r2, sp, #116	; 0x74
 801bfd2:	4621      	mov	r1, r4
 801bfd4:	6803      	ldr	r3, [r0, #0]
 801bfd6:	689d      	ldr	r5, [r3, #8]
 801bfd8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801bfdc:	47a8      	blx	r5
 801bfde:	901c      	str	r0, [sp, #112]	; 0x70
 801bfe0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801bfe4:	429c      	cmp	r4, r3
 801bfe6:	f000 80ec 	beq.w	801c1c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801bfea:	f242 030b 	movw	r3, #8203	; 0x200b
 801bfee:	429c      	cmp	r4, r3
 801bff0:	f000 80e7 	beq.w	801c1c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801bff4:	2c00      	cmp	r4, #0
 801bff6:	f000 80f9 	beq.w	801c1ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801bffa:	2c0a      	cmp	r4, #10
 801bffc:	d060      	beq.n	801c0c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801bffe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c000:	b36a      	cbz	r2, 801c05e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801c002:	8894      	ldrh	r4, [r2, #4]
 801c004:	f1bb 0f00 	cmp.w	fp, #0
 801c008:	d03b      	beq.n	801c082 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801c00a:	f892 900d 	ldrb.w	r9, [r2, #13]
 801c00e:	f1bb 0f01 	cmp.w	fp, #1
 801c012:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801c016:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801c01a:	f892 900a 	ldrb.w	r9, [r2, #10]
 801c01e:	ea49 0903 	orr.w	r9, r9, r3
 801c022:	d134      	bne.n	801c08e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801c024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c026:	eba6 0609 	sub.w	r6, r6, r9
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d14f      	bne.n	801c0ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801c02e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c030:	eb09 0306 	add.w	r3, r9, r6
 801c034:	4413      	add	r3, r2
 801c036:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c038:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c03c:	4293      	cmp	r3, r2
 801c03e:	da51      	bge.n	801c0e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801c040:	e038      	b.n	801c0b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801c042:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c044:	e79a      	b.n	801bf7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801c046:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801c04a:	4659      	mov	r1, fp
 801c04c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801c04e:	9301      	str	r3, [sp, #4]
 801c050:	ab1d      	add	r3, sp, #116	; 0x74
 801c052:	9300      	str	r3, [sp, #0]
 801c054:	ab1c      	add	r3, sp, #112	; 0x70
 801c056:	f002 fec8 	bl	801edea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801c05a:	4604      	mov	r4, r0
 801c05c:	e7c0      	b.n	801bfe0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801c05e:	f8d8 0000 	ldr.w	r0, [r8]
 801c062:	6803      	ldr	r3, [r0, #0]
 801c064:	691b      	ldr	r3, [r3, #16]
 801c066:	4798      	blx	r3
 801c068:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c06c:	4298      	cmp	r0, r3
 801c06e:	f000 80a8 	beq.w	801c1c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c072:	f242 030b 	movw	r3, #8203	; 0x200b
 801c076:	4298      	cmp	r0, r3
 801c078:	f000 80a3 	beq.w	801c1c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c07c:	f1bb 0f00 	cmp.w	fp, #0
 801c080:	d100      	bne.n	801c084 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801c082:	444e      	add	r6, r9
 801c084:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c086:	2a00      	cmp	r2, #0
 801c088:	d1bf      	bne.n	801c00a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801c08a:	4691      	mov	r9, r2
 801c08c:	e099      	b.n	801c1c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c08e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c090:	2b00      	cmp	r3, #0
 801c092:	f000 80ad 	beq.w	801c1f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801c096:	f1bb 0f00 	cmp.w	fp, #0
 801c09a:	d118      	bne.n	801c0ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801c09c:	f8d8 0000 	ldr.w	r0, [r8]
 801c0a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c0a2:	6803      	ldr	r3, [r0, #0]
 801c0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0a6:	4798      	blx	r3
 801c0a8:	4406      	add	r6, r0
 801c0aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c0ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c0ae:	1af3      	subs	r3, r6, r3
 801c0b0:	4293      	cmp	r3, r2
 801c0b2:	dd17      	ble.n	801c0e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801c0b4:	2c00      	cmp	r4, #0
 801c0b6:	f000 8099 	beq.w	801c1ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801c0ba:	2c0a      	cmp	r4, #10
 801c0bc:	f040 8087 	bne.w	801c1ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 801c0c0:	240a      	movs	r4, #10
 801c0c2:	fab4 f084 	clz	r0, r4
 801c0c6:	0940      	lsrs	r0, r0, #5
 801c0c8:	b01f      	add	sp, #124	; 0x7c
 801c0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ce:	f8d8 0000 	ldr.w	r0, [r8]
 801c0d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c0d4:	6803      	ldr	r3, [r0, #0]
 801c0d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0d8:	4798      	blx	r3
 801c0da:	f1bb 0f01 	cmp.w	fp, #1
 801c0de:	eba6 0600 	sub.w	r6, r6, r0
 801c0e2:	d0a4      	beq.n	801c02e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801c0e4:	981c      	ldr	r0, [sp, #112]	; 0x70
 801c0e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c0e8:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801c0ec:	f9b3 7000 	ldrsh.w	r7, [r3]
 801c0f0:	7b43      	ldrb	r3, [r0, #13]
 801c0f2:	4431      	add	r1, r6
 801c0f4:	015b      	lsls	r3, r3, #5
 801c0f6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c0fa:	7983      	ldrb	r3, [r0, #6]
 801c0fc:	4313      	orrs	r3, r2
 801c0fe:	440b      	add	r3, r1
 801c100:	42bb      	cmp	r3, r7
 801c102:	db5e      	blt.n	801c1c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c106:	4299      	cmp	r1, r3
 801c108:	da5b      	bge.n	801c1c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c10a:	f8d8 0000 	ldr.w	r0, [r8]
 801c10e:	42b7      	cmp	r7, r6
 801c110:	6803      	ldr	r3, [r0, #0]
 801c112:	bfcc      	ite	gt
 801c114:	1bbf      	subgt	r7, r7, r6
 801c116:	2700      	movle	r7, #0
 801c118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c11a:	bfc8      	it	gt
 801c11c:	b2bf      	uxthgt	r7, r7
 801c11e:	4798      	blx	r3
 801c120:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c122:	7b5a      	ldrb	r2, [r3, #13]
 801c124:	00d1      	lsls	r1, r2, #3
 801c126:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801c12a:	7a19      	ldrb	r1, [r3, #8]
 801c12c:	4329      	orrs	r1, r5
 801c12e:	0655      	lsls	r5, r2, #25
 801c130:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801c132:	bf48      	it	mi
 801c134:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801c138:	4405      	add	r5, r0
 801c13a:	bf48      	it	mi
 801c13c:	b209      	sxthmi	r1, r1
 801c13e:	1a6d      	subs	r5, r5, r1
 801c140:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c142:	b2ad      	uxth	r5, r5
 801c144:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801c148:	fa0f fa85 	sxth.w	sl, r5
 801c14c:	4551      	cmp	r1, sl
 801c14e:	dd3c      	ble.n	801c1ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801c150:	0112      	lsls	r2, r2, #4
 801c152:	79d8      	ldrb	r0, [r3, #7]
 801c154:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c158:	4302      	orrs	r2, r0
 801c15a:	4492      	add	sl, r2
 801c15c:	4551      	cmp	r1, sl
 801c15e:	dc30      	bgt.n	801c1c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c160:	1b4d      	subs	r5, r1, r5
 801c162:	468a      	mov	sl, r1
 801c164:	b22d      	sxth	r5, r5
 801c166:	9319      	str	r3, [sp, #100]	; 0x64
 801c168:	b2ad      	uxth	r5, r5
 801c16a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c16c:	f8d8 0000 	ldr.w	r0, [r8]
 801c170:	681a      	ldr	r2, [r3, #0]
 801c172:	6801      	ldr	r1, [r0, #0]
 801c174:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801c176:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c178:	9313      	str	r3, [sp, #76]	; 0x4c
 801c17a:	9218      	str	r2, [sp, #96]	; 0x60
 801c17c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801c17e:	4788      	blx	r1
 801c180:	f898 1006 	ldrb.w	r1, [r8, #6]
 801c184:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c186:	910b      	str	r1, [sp, #44]	; 0x2c
 801c188:	f898 100e 	ldrb.w	r1, [r8, #14]
 801c18c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c18e:	910a      	str	r1, [sp, #40]	; 0x28
 801c190:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801c194:	9109      	str	r1, [sp, #36]	; 0x24
 801c196:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801c19a:	9305      	str	r3, [sp, #20]
 801c19c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c19e:	9206      	str	r2, [sp, #24]
 801c1a0:	9304      	str	r3, [sp, #16]
 801c1a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c1a4:	f8cd a004 	str.w	sl, [sp, #4]
 801c1a8:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801c1ac:	4437      	add	r7, r6
 801c1ae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c1b0:	b23f      	sxth	r7, r7
 801c1b2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801c1b6:	9700      	str	r7, [sp, #0]
 801c1b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c1ba:	681a      	ldr	r2, [r3, #0]
 801c1bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c1be:	685b      	ldr	r3, [r3, #4]
 801c1c0:	47a8      	blx	r5
 801c1c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1c4:	3301      	adds	r3, #1
 801c1c6:	930e      	str	r3, [sp, #56]	; 0x38
 801c1c8:	e6e0      	b.n	801bf8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801c1ca:	2500      	movs	r5, #0
 801c1cc:	e7cb      	b.n	801c166 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801c1ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c1d0:	3501      	adds	r5, #1
 801c1d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c1d4:	429d      	cmp	r5, r3
 801c1d6:	f6bf af74 	bge.w	801c0c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801c1da:	4659      	mov	r1, fp
 801c1dc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801c1de:	f7ec fe8d 	bl	8008efc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c1e2:	4604      	mov	r4, r0
 801c1e4:	b110      	cbz	r0, 801c1ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801c1e6:	280a      	cmp	r0, #10
 801c1e8:	d1f2      	bne.n	801c1d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801c1ea:	e769      	b.n	801c0c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801c1ec:	2400      	movs	r4, #0
 801c1ee:	e768      	b.n	801c0c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801c1f0:	f1bb 0f00 	cmp.w	fp, #0
 801c1f4:	f43f af59 	beq.w	801c0aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801c1f8:	e774      	b.n	801c0e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801c1fa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801c1fa:	b530      	push	{r4, r5, lr}
 801c1fc:	8ac4      	ldrh	r4, [r0, #22]
 801c1fe:	8b45      	ldrh	r5, [r0, #26]
 801c200:	8343      	strh	r3, [r0, #26]
 801c202:	442c      	add	r4, r5
 801c204:	1ae4      	subs	r4, r4, r3
 801c206:	8b83      	ldrh	r3, [r0, #28]
 801c208:	82c4      	strh	r4, [r0, #22]
 801c20a:	8b04      	ldrh	r4, [r0, #24]
 801c20c:	4422      	add	r2, r4
 801c20e:	440c      	add	r4, r1
 801c210:	1a59      	subs	r1, r3, r1
 801c212:	83c2      	strh	r2, [r0, #30]
 801c214:	8304      	strh	r4, [r0, #24]
 801c216:	8381      	strh	r1, [r0, #28]
 801c218:	bd30      	pop	{r4, r5, pc}

0801c21a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801c21a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c21e:	4604      	mov	r4, r0
 801c220:	8a47      	ldrh	r7, [r0, #18]
 801c222:	68c0      	ldr	r0, [r0, #12]
 801c224:	b085      	sub	sp, #20
 801c226:	6803      	ldr	r3, [r0, #0]
 801c228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c22a:	4798      	blx	r3
 801c22c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801c230:	7a63      	ldrb	r3, [r4, #9]
 801c232:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801c236:	3b01      	subs	r3, #1
 801c238:	42b7      	cmp	r7, r6
 801c23a:	bfac      	ite	ge
 801c23c:	f04f 0900 	movge.w	r9, #0
 801c240:	f04f 0901 	movlt.w	r9, #1
 801c244:	2b05      	cmp	r3, #5
 801c246:	d804      	bhi.n	801c252 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801c248:	e8df f003 	tbb	[pc, r3]
 801c24c:	470f0854 	.word	0x470f0854
 801c250:	4c4c      	.short	0x4c4c
 801c252:	2500      	movs	r5, #0
 801c254:	46a9      	mov	r9, r5
 801c256:	462e      	mov	r6, r5
 801c258:	462f      	mov	r7, r5
 801c25a:	e00e      	b.n	801c27a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801c25c:	42b7      	cmp	r7, r6
 801c25e:	f04f 0500 	mov.w	r5, #0
 801c262:	bfb4      	ite	lt
 801c264:	2600      	movlt	r6, #0
 801c266:	2601      	movge	r6, #1
 801c268:	e7f6      	b.n	801c258 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801c26a:	42b7      	cmp	r7, r6
 801c26c:	464d      	mov	r5, r9
 801c26e:	f04f 0900 	mov.w	r9, #0
 801c272:	bfb4      	ite	lt
 801c274:	2600      	movlt	r6, #0
 801c276:	2601      	movge	r6, #1
 801c278:	464f      	mov	r7, r9
 801c27a:	f04f 0800 	mov.w	r8, #0
 801c27e:	f8a4 8016 	strh.w	r8, [r4, #22]
 801c282:	f8a4 8018 	strh.w	r8, [r4, #24]
 801c286:	f8cd 8004 	str.w	r8, [sp, #4]
 801c28a:	2300      	movs	r3, #0
 801c28c:	9303      	str	r3, [sp, #12]
 801c28e:	8823      	ldrh	r3, [r4, #0]
 801c290:	2b20      	cmp	r3, #32
 801c292:	d033      	beq.n	801c2fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801c294:	f242 010b 	movw	r1, #8203	; 0x200b
 801c298:	1a5a      	subs	r2, r3, r1
 801c29a:	f1d2 0a00 	rsbs	sl, r2, #0
 801c29e:	eb4a 0a02 	adc.w	sl, sl, r2
 801c2a2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c2a6:	4293      	cmp	r3, r2
 801c2a8:	d008      	beq.n	801c2bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801c2aa:	428b      	cmp	r3, r1
 801c2ac:	9a01      	ldr	r2, [sp, #4]
 801c2ae:	bf0e      	itee	eq
 801c2b0:	f04f 0a01 	moveq.w	sl, #1
 801c2b4:	461a      	movne	r2, r3
 801c2b6:	f04f 0a00 	movne.w	sl, #0
 801c2ba:	9201      	str	r2, [sp, #4]
 801c2bc:	ab03      	add	r3, sp, #12
 801c2be:	68e2      	ldr	r2, [r4, #12]
 801c2c0:	7a21      	ldrb	r1, [r4, #8]
 801c2c2:	6860      	ldr	r0, [r4, #4]
 801c2c4:	f002 fd48 	bl	801ed58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c2c8:	8020      	strh	r0, [r4, #0]
 801c2ca:	b9d8      	cbnz	r0, 801c304 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801c2cc:	8ba2      	ldrh	r2, [r4, #28]
 801c2ce:	2300      	movs	r3, #0
 801c2d0:	4611      	mov	r1, r2
 801c2d2:	4620      	mov	r0, r4
 801c2d4:	f7ff ff91 	bl	801c1fa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801c2d8:	e06e      	b.n	801c3b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801c2da:	2500      	movs	r5, #0
 801c2dc:	2701      	movs	r7, #1
 801c2de:	46a9      	mov	r9, r5
 801c2e0:	462e      	mov	r6, r5
 801c2e2:	e7ca      	b.n	801c27a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801c2e4:	42b7      	cmp	r7, r6
 801c2e6:	f04f 0500 	mov.w	r5, #0
 801c2ea:	bfb4      	ite	lt
 801c2ec:	2700      	movlt	r7, #0
 801c2ee:	2701      	movge	r7, #1
 801c2f0:	462e      	mov	r6, r5
 801c2f2:	e7c2      	b.n	801c27a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801c2f4:	2500      	movs	r5, #0
 801c2f6:	2601      	movs	r6, #1
 801c2f8:	46a9      	mov	r9, r5
 801c2fa:	e7ad      	b.n	801c258 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801c2fc:	9301      	str	r3, [sp, #4]
 801c2fe:	f04f 0a01 	mov.w	sl, #1
 801c302:	e7db      	b.n	801c2bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801c304:	8b63      	ldrh	r3, [r4, #26]
 801c306:	280a      	cmp	r0, #10
 801c308:	f103 0301 	add.w	r3, r3, #1
 801c30c:	8363      	strh	r3, [r4, #26]
 801c30e:	d0dd      	beq.n	801c2cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801c310:	9a03      	ldr	r2, [sp, #12]
 801c312:	bb62      	cbnz	r2, 801c36e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801c314:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c318:	4298      	cmp	r0, r3
 801c31a:	d003      	beq.n	801c324 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801c31c:	f242 030b 	movw	r3, #8203	; 0x200b
 801c320:	4298      	cmp	r0, r3
 801c322:	d1b2      	bne.n	801c28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c324:	8823      	ldrh	r3, [r4, #0]
 801c326:	8ba1      	ldrh	r1, [r4, #28]
 801c328:	2b20      	cmp	r3, #32
 801c32a:	d003      	beq.n	801c334 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801c32c:	f242 000b 	movw	r0, #8203	; 0x200b
 801c330:	4283      	cmp	r3, r0
 801c332:	d131      	bne.n	801c398 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801c334:	f1ba 0f00 	cmp.w	sl, #0
 801c338:	bf0a      	itet	eq
 801c33a:	4688      	moveq	r8, r1
 801c33c:	4650      	movne	r0, sl
 801c33e:	2001      	moveq	r0, #1
 801c340:	440a      	add	r2, r1
 801c342:	8b23      	ldrh	r3, [r4, #24]
 801c344:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801c348:	b292      	uxth	r2, r2
 801c34a:	83a2      	strh	r2, [r4, #28]
 801c34c:	4413      	add	r3, r2
 801c34e:	f1b9 0f00 	cmp.w	r9, #0
 801c352:	d102      	bne.n	801c35a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801c354:	2d00      	cmp	r5, #0
 801c356:	d042      	beq.n	801c3de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801c358:	b300      	cbz	r0, 801c39c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801c35a:	8c21      	ldrh	r1, [r4, #32]
 801c35c:	4419      	add	r1, r3
 801c35e:	458c      	cmp	ip, r1
 801c360:	da37      	bge.n	801c3d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801c362:	8ae1      	ldrh	r1, [r4, #22]
 801c364:	2900      	cmp	r1, #0
 801c366:	d034      	beq.n	801c3d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801c368:	4563      	cmp	r3, ip
 801c36a:	dd8e      	ble.n	801c28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c36c:	e01d      	b.n	801c3aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801c36e:	8893      	ldrh	r3, [r2, #4]
 801c370:	9901      	ldr	r1, [sp, #4]
 801c372:	8023      	strh	r3, [r4, #0]
 801c374:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801c378:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801c37c:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 801c380:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801c384:	ea4b 0b00 	orr.w	fp, fp, r0
 801c388:	68e0      	ldr	r0, [r4, #12]
 801c38a:	6803      	ldr	r3, [r0, #0]
 801c38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c38e:	4798      	blx	r3
 801c390:	eb0b 0200 	add.w	r2, fp, r0
 801c394:	b292      	uxth	r2, r2
 801c396:	e7c5      	b.n	801c324 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801c398:	2000      	movs	r0, #0
 801c39a:	e7d1      	b.n	801c340 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801c39c:	4563      	cmp	r3, ip
 801c39e:	f77f af74 	ble.w	801c28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c3a2:	8ae3      	ldrh	r3, [r4, #22]
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	f43f af70 	beq.w	801c28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c3aa:	2301      	movs	r3, #1
 801c3ac:	8c22      	ldrh	r2, [r4, #32]
 801c3ae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801c3b2:	8be3      	ldrh	r3, [r4, #30]
 801c3b4:	4413      	add	r3, r2
 801c3b6:	83e3      	strh	r3, [r4, #30]
 801c3b8:	68e0      	ldr	r0, [r4, #12]
 801c3ba:	6803      	ldr	r3, [r0, #0]
 801c3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3be:	4798      	blx	r3
 801c3c0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801c3c4:	4418      	add	r0, r3
 801c3c6:	8a63      	ldrh	r3, [r4, #18]
 801c3c8:	1a18      	subs	r0, r3, r0
 801c3ca:	8260      	strh	r0, [r4, #18]
 801c3cc:	b005      	add	sp, #20
 801c3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3d2:	2300      	movs	r3, #0
 801c3d4:	4611      	mov	r1, r2
 801c3d6:	4620      	mov	r0, r4
 801c3d8:	f7ff ff0f 	bl	801c1fa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801c3dc:	e755      	b.n	801c28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c3de:	4563      	cmp	r3, ip
 801c3e0:	dd14      	ble.n	801c40c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801c3e2:	b117      	cbz	r7, 801c3ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801c3e4:	2301      	movs	r3, #1
 801c3e6:	460a      	mov	r2, r1
 801c3e8:	e772      	b.n	801c2d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801c3ea:	2e00      	cmp	r6, #0
 801c3ec:	f43f af4d 	beq.w	801c28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c3f0:	2800      	cmp	r0, #0
 801c3f2:	f47f af4a 	bne.w	801c28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c3f6:	f1ba 0f00 	cmp.w	sl, #0
 801c3fa:	d002      	beq.n	801c402 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801c3fc:	2301      	movs	r3, #1
 801c3fe:	4642      	mov	r2, r8
 801c400:	e767      	b.n	801c2d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801c402:	8ae3      	ldrh	r3, [r4, #22]
 801c404:	2b00      	cmp	r3, #0
 801c406:	f43f af40 	beq.w	801c28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c40a:	e7d5      	b.n	801c3b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801c40c:	2800      	cmp	r0, #0
 801c40e:	f47f af3c 	bne.w	801c28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c412:	f1ba 0f00 	cmp.w	sl, #0
 801c416:	f43f af38 	beq.w	801c28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c41a:	2301      	movs	r3, #1
 801c41c:	4642      	mov	r2, r8
 801c41e:	e7da      	b.n	801c3d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801c420 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801c420:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c422:	4605      	mov	r5, r0
 801c424:	b08f      	sub	sp, #60	; 0x3c
 801c426:	4617      	mov	r7, r2
 801c428:	461c      	mov	r4, r3
 801c42a:	460e      	mov	r6, r1
 801c42c:	b1d1      	cbz	r1, 801c464 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	4620      	mov	r0, r4
 801c432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c434:	4798      	blx	r3
 801c436:	4240      	negs	r0, r0
 801c438:	9603      	str	r6, [sp, #12]
 801c43a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c43e:	b200      	sxth	r0, r0
 801c440:	9700      	str	r7, [sp, #0]
 801c442:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801c446:	4629      	mov	r1, r5
 801c448:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801c44c:	2401      	movs	r4, #1
 801c44e:	a805      	add	r0, sp, #20
 801c450:	f7ff fcbe 	bl	801bdd0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801c454:	a805      	add	r0, sp, #20
 801c456:	f7ff fee0 	bl	801c21a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801c45a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801c45e:	b163      	cbz	r3, 801c47a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801c460:	3401      	adds	r4, #1
 801c462:	e7f7      	b.n	801c454 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801c464:	2401      	movs	r4, #1
 801c466:	f002 fd43 	bl	801eef0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c46a:	280a      	cmp	r0, #10
 801c46c:	4628      	mov	r0, r5
 801c46e:	bf08      	it	eq
 801c470:	3401      	addeq	r4, #1
 801c472:	f002 fd3d 	bl	801eef0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c476:	2800      	cmp	r0, #0
 801c478:	d1f7      	bne.n	801c46a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801c47a:	b2a0      	uxth	r0, r4
 801c47c:	b00f      	add	sp, #60	; 0x3c
 801c47e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c480 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801c480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c484:	b0e3      	sub	sp, #396	; 0x18c
 801c486:	461c      	mov	r4, r3
 801c488:	4683      	mov	fp, r0
 801c48a:	4688      	mov	r8, r1
 801c48c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801c48e:	2b00      	cmp	r3, #0
 801c490:	f000 810f 	beq.w	801c6b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801c494:	6823      	ldr	r3, [r4, #0]
 801c496:	2b00      	cmp	r3, #0
 801c498:	f000 810b 	beq.w	801c6b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801c49c:	7ba3      	ldrb	r3, [r4, #14]
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	f000 8107 	beq.w	801c6b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801c4a4:	ad0a      	add	r5, sp, #40	; 0x28
 801c4a6:	6810      	ldr	r0, [r2, #0]
 801c4a8:	6851      	ldr	r1, [r2, #4]
 801c4aa:	462b      	mov	r3, r5
 801c4ac:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801c4b0:	c303      	stmia	r3!, {r0, r1}
 801c4b2:	2100      	movs	r1, #0
 801c4b4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801c4b8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c4bc:	4628      	mov	r0, r5
 801c4be:	910c      	str	r1, [sp, #48]	; 0x30
 801c4c0:	a90c      	add	r1, sp, #48	; 0x30
 801c4c2:	79a2      	ldrb	r2, [r4, #6]
 801c4c4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c4c8:	f7ff fd01 	bl	801bece <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801c4cc:	a90c      	add	r1, sp, #48	; 0x30
 801c4ce:	79a2      	ldrb	r2, [r4, #6]
 801c4d0:	4608      	mov	r0, r1
 801c4d2:	f7ff fcfc 	bl	801bece <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801c4d6:	a817      	add	r0, sp, #92	; 0x5c
 801c4d8:	f002 f8de 	bl	801e698 <_ZN8touchgfx12TextProviderC1Ev>
 801c4dc:	6820      	ldr	r0, [r4, #0]
 801c4de:	6803      	ldr	r3, [r0, #0]
 801c4e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c4e2:	4798      	blx	r3
 801c4e4:	4606      	mov	r6, r0
 801c4e6:	6820      	ldr	r0, [r4, #0]
 801c4e8:	6803      	ldr	r3, [r0, #0]
 801c4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c4ec:	4798      	blx	r3
 801c4ee:	4633      	mov	r3, r6
 801c4f0:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801c4f2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801c4f4:	9000      	str	r0, [sp, #0]
 801c4f6:	a817      	add	r0, sp, #92	; 0x5c
 801c4f8:	f002 f929 	bl	801e74e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c4fc:	6820      	ldr	r0, [r4, #0]
 801c4fe:	f894 a004 	ldrb.w	sl, [r4, #4]
 801c502:	6803      	ldr	r3, [r0, #0]
 801c504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c506:	4798      	blx	r3
 801c508:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801c50c:	6823      	ldr	r3, [r4, #0]
 801c50e:	4607      	mov	r7, r0
 801c510:	4406      	add	r6, r0
 801c512:	a830      	add	r0, sp, #192	; 0xc0
 801c514:	f893 9009 	ldrb.w	r9, [r3, #9]
 801c518:	f002 f8be 	bl	801e698 <_ZN8touchgfx12TextProviderC1Ev>
 801c51c:	7c23      	ldrb	r3, [r4, #16]
 801c51e:	b17b      	cbz	r3, 801c540 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801c520:	6820      	ldr	r0, [r4, #0]
 801c522:	6803      	ldr	r3, [r0, #0]
 801c524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c526:	4798      	blx	r3
 801c528:	9009      	str	r0, [sp, #36]	; 0x24
 801c52a:	6820      	ldr	r0, [r4, #0]
 801c52c:	6802      	ldr	r2, [r0, #0]
 801c52e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801c530:	4790      	blx	r2
 801c532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c534:	9000      	str	r0, [sp, #0]
 801c536:	a830      	add	r0, sp, #192	; 0xc0
 801c538:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801c53a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801c53c:	f002 f907 	bl	801e74e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c540:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801c544:	a80e      	add	r0, sp, #56	; 0x38
 801c546:	7be2      	ldrb	r2, [r4, #15]
 801c548:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801c54c:	1a8a      	subs	r2, r1, r2
 801c54e:	7c21      	ldrb	r1, [r4, #16]
 801c550:	9103      	str	r1, [sp, #12]
 801c552:	b292      	uxth	r2, r2
 801c554:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801c558:	9102      	str	r1, [sp, #8]
 801c55a:	6821      	ldr	r1, [r4, #0]
 801c55c:	9101      	str	r1, [sp, #4]
 801c55e:	7961      	ldrb	r1, [r4, #5]
 801c560:	9100      	str	r1, [sp, #0]
 801c562:	a930      	add	r1, sp, #192	; 0xc0
 801c564:	f7ff fc34 	bl	801bdd0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801c568:	2e00      	cmp	r6, #0
 801c56a:	dc5b      	bgt.n	801c624 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801c56c:	af17      	add	r7, sp, #92	; 0x5c
 801c56e:	f04f 0900 	mov.w	r9, #0
 801c572:	7c23      	ldrb	r3, [r4, #16]
 801c574:	2b00      	cmp	r3, #0
 801c576:	f000 80ae 	beq.w	801c6d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801c57a:	a80e      	add	r0, sp, #56	; 0x38
 801c57c:	f7ff fe4d 	bl	801c21a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801c580:	f1ba 0f00 	cmp.w	sl, #0
 801c584:	f000 80a2 	beq.w	801c6cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801c588:	7c23      	ldrb	r3, [r4, #16]
 801c58a:	2264      	movs	r2, #100	; 0x64
 801c58c:	4639      	mov	r1, r7
 801c58e:	a849      	add	r0, sp, #292	; 0x124
 801c590:	9309      	str	r3, [sp, #36]	; 0x24
 801c592:	f00b fafd 	bl	8027b90 <memcpy>
 801c596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c598:	2b00      	cmp	r3, #0
 801c59a:	f000 80a4 	beq.w	801c6e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801c59e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801c5a2:	7922      	ldrb	r2, [r4, #4]
 801c5a4:	2a01      	cmp	r2, #1
 801c5a6:	f040 8087 	bne.w	801c6b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801c5aa:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801c5ae:	1ac0      	subs	r0, r0, r3
 801c5b0:	2302      	movs	r3, #2
 801c5b2:	fb90 f0f3 	sdiv	r0, r0, r3
 801c5b6:	b200      	sxth	r0, r0
 801c5b8:	7c23      	ldrb	r3, [r4, #16]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	f000 8088 	beq.w	801c6d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 801c5c0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801c5c4:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 801c5c8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801c5cc:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801c5d0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801c5d4:	2100      	movs	r1, #0
 801c5d6:	4410      	add	r0, r2
 801c5d8:	4642      	mov	r2, r8
 801c5da:	b200      	sxth	r0, r0
 801c5dc:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801c5e0:	9000      	str	r0, [sp, #0]
 801c5e2:	4658      	mov	r0, fp
 801c5e4:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801c5e8:	f7ff fca2 	bl	801bf30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801c5ec:	2800      	cmp	r0, #0
 801c5ee:	d160      	bne.n	801c6b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801c5f0:	b2b2      	uxth	r2, r6
 801c5f2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801c5f6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801c5fa:	4413      	add	r3, r2
 801c5fc:	1a8a      	subs	r2, r1, r2
 801c5fe:	b21b      	sxth	r3, r3
 801c600:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801c604:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801c608:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c60c:	2a00      	cmp	r2, #0
 801c60e:	d150      	bne.n	801c6b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801c610:	6822      	ldr	r2, [r4, #0]
 801c612:	8869      	ldrh	r1, [r5, #2]
 801c614:	7a12      	ldrb	r2, [r2, #8]
 801c616:	1a9b      	subs	r3, r3, r2
 801c618:	88ea      	ldrh	r2, [r5, #6]
 801c61a:	440a      	add	r2, r1
 801c61c:	b212      	sxth	r2, r2
 801c61e:	4293      	cmp	r3, r2
 801c620:	dda7      	ble.n	801c572 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801c622:	e046      	b.n	801c6b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801c624:	7c23      	ldrb	r3, [r4, #16]
 801c626:	444f      	add	r7, r9
 801c628:	b1c3      	cbz	r3, 801c65c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801c62a:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801c62e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801c632:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c636:	443b      	add	r3, r7
 801c638:	4293      	cmp	r3, r2
 801c63a:	da97      	bge.n	801c56c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801c63c:	a80e      	add	r0, sp, #56	; 0x38
 801c63e:	f7ff fdec 	bl	801c21a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801c642:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801c646:	3b01      	subs	r3, #1
 801c648:	b29b      	uxth	r3, r3
 801c64a:	454b      	cmp	r3, r9
 801c64c:	9309      	str	r3, [sp, #36]	; 0x24
 801c64e:	d021      	beq.n	801c694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801c650:	7961      	ldrb	r1, [r4, #5]
 801c652:	a817      	add	r0, sp, #92	; 0x5c
 801c654:	f7ec fc52 	bl	8008efc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c65a:	e7f4      	b.n	801c646 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801c65c:	fa1f f986 	uxth.w	r9, r6
 801c660:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801c664:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c668:	443b      	add	r3, r7
 801c66a:	4293      	cmp	r3, r2
 801c66c:	f6bf af7e 	bge.w	801c56c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801c670:	a817      	add	r0, sp, #92	; 0x5c
 801c672:	f002 fc3d 	bl	801eef0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c676:	b1e0      	cbz	r0, 801c6b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801c678:	280a      	cmp	r0, #10
 801c67a:	d1f1      	bne.n	801c660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801c67c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801c680:	444b      	add	r3, r9
 801c682:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c686:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801c68a:	eba3 0309 	sub.w	r3, r3, r9
 801c68e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c692:	e7e5      	b.n	801c660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801c694:	b2b3      	uxth	r3, r6
 801c696:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801c69a:	441a      	add	r2, r3
 801c69c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801c6a0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801c6a4:	1ad3      	subs	r3, r2, r3
 801c6a6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c6aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d1bd      	bne.n	801c62e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801c6b2:	b063      	add	sp, #396	; 0x18c
 801c6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6b8:	2a02      	cmp	r2, #2
 801c6ba:	d105      	bne.n	801c6c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801c6bc:	7be2      	ldrb	r2, [r4, #15]
 801c6be:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801c6c2:	1a80      	subs	r0, r0, r2
 801c6c4:	1ac0      	subs	r0, r0, r3
 801c6c6:	e776      	b.n	801c5b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801c6c8:	2000      	movs	r0, #0
 801c6ca:	e775      	b.n	801c5b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801c6cc:	7be0      	ldrb	r0, [r4, #15]
 801c6ce:	e773      	b.n	801c5b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801c6d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c6d4:	e776      	b.n	801c5c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801c6d6:	f1ba 0f00 	cmp.w	sl, #0
 801c6da:	d0f7      	beq.n	801c6cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801c6dc:	2264      	movs	r2, #100	; 0x64
 801c6de:	4639      	mov	r1, r7
 801c6e0:	a849      	add	r0, sp, #292	; 0x124
 801c6e2:	f00b fa55 	bl	8027b90 <memcpy>
 801c6e6:	2300      	movs	r3, #0
 801c6e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c6ec:	6821      	ldr	r1, [r4, #0]
 801c6ee:	a849      	add	r0, sp, #292	; 0x124
 801c6f0:	f7ff fbb1 	bl	801be56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801c6f4:	b203      	sxth	r3, r0
 801c6f6:	e754      	b.n	801c5a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801c6f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801c6f8:	2b03      	cmp	r3, #3
 801c6fa:	d818      	bhi.n	801c72e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801c6fc:	e8df f003 	tbb	[pc, r3]
 801c700:	130d0602 	.word	0x130d0602
 801c704:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c708:	1850      	adds	r0, r2, r1
 801c70a:	4770      	bx	lr
 801c70c:	8803      	ldrh	r3, [r0, #0]
 801c70e:	8880      	ldrh	r0, [r0, #4]
 801c710:	4418      	add	r0, r3
 801c712:	b200      	sxth	r0, r0
 801c714:	1a80      	subs	r0, r0, r2
 801c716:	3801      	subs	r0, #1
 801c718:	4770      	bx	lr
 801c71a:	8803      	ldrh	r3, [r0, #0]
 801c71c:	8880      	ldrh	r0, [r0, #4]
 801c71e:	4418      	add	r0, r3
 801c720:	b200      	sxth	r0, r0
 801c722:	1a40      	subs	r0, r0, r1
 801c724:	e7f7      	b.n	801c716 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801c726:	f9b0 0000 	ldrsh.w	r0, [r0]
 801c72a:	4410      	add	r0, r2
 801c72c:	4770      	bx	lr
 801c72e:	2000      	movs	r0, #0
 801c730:	4770      	bx	lr

0801c732 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801c732:	2b03      	cmp	r3, #3
 801c734:	d817      	bhi.n	801c766 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801c736:	e8df f003 	tbb	[pc, r3]
 801c73a:	0602      	.short	0x0602
 801c73c:	1009      	.short	0x1009
 801c73e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801c742:	1850      	adds	r0, r2, r1
 801c744:	4770      	bx	lr
 801c746:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c74a:	e7fa      	b.n	801c742 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801c74c:	8843      	ldrh	r3, [r0, #2]
 801c74e:	88c0      	ldrh	r0, [r0, #6]
 801c750:	4418      	add	r0, r3
 801c752:	b200      	sxth	r0, r0
 801c754:	1a80      	subs	r0, r0, r2
 801c756:	3801      	subs	r0, #1
 801c758:	4770      	bx	lr
 801c75a:	8843      	ldrh	r3, [r0, #2]
 801c75c:	88c0      	ldrh	r0, [r0, #6]
 801c75e:	4418      	add	r0, r3
 801c760:	b200      	sxth	r0, r0
 801c762:	1a40      	subs	r0, r0, r1
 801c764:	e7f7      	b.n	801c756 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801c766:	2000      	movs	r0, #0
 801c768:	4770      	bx	lr
	...

0801c76c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801c76c:	4b01      	ldr	r3, [pc, #4]	; (801c774 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801c76e:	2200      	movs	r2, #0
 801c770:	601a      	str	r2, [r3, #0]
 801c772:	4770      	bx	lr
 801c774:	2402626c 	.word	0x2402626c

0801c778 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801c778:	4603      	mov	r3, r0
 801c77a:	b1c8      	cbz	r0, 801c7b0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801c77c:	0c02      	lsrs	r2, r0, #16
 801c77e:	0412      	lsls	r2, r2, #16
 801c780:	b9a2      	cbnz	r2, 801c7ac <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801c782:	0403      	lsls	r3, r0, #16
 801c784:	2010      	movs	r0, #16
 801c786:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c78a:	bf04      	itt	eq
 801c78c:	021b      	lsleq	r3, r3, #8
 801c78e:	3008      	addeq	r0, #8
 801c790:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c794:	bf04      	itt	eq
 801c796:	011b      	lsleq	r3, r3, #4
 801c798:	3004      	addeq	r0, #4
 801c79a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c79e:	bf04      	itt	eq
 801c7a0:	009b      	lsleq	r3, r3, #2
 801c7a2:	3002      	addeq	r0, #2
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	db04      	blt.n	801c7b2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801c7a8:	3001      	adds	r0, #1
 801c7aa:	4770      	bx	lr
 801c7ac:	2000      	movs	r0, #0
 801c7ae:	e7ea      	b.n	801c786 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801c7b0:	2020      	movs	r0, #32
 801c7b2:	4770      	bx	lr

0801c7b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7b8:	b087      	sub	sp, #28
 801c7ba:	4681      	mov	r9, r0
 801c7bc:	4698      	mov	r8, r3
 801c7be:	4610      	mov	r0, r2
 801c7c0:	460d      	mov	r5, r1
 801c7c2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801c7c6:	b981      	cbnz	r1, 801c7ea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801c7c8:	b14b      	cbz	r3, 801c7de <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801c7ca:	460b      	mov	r3, r1
 801c7cc:	464a      	mov	r2, r9
 801c7ce:	4641      	mov	r1, r8
 801c7d0:	e9cd 4700 	strd	r4, r7, [sp]
 801c7d4:	f7ff ffee 	bl	801c7b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c7d8:	b007      	add	sp, #28
 801c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7de:	f04f 33ff 	mov.w	r3, #4294967295
 801c7e2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801c7e6:	603b      	str	r3, [r7, #0]
 801c7e8:	e7f6      	b.n	801c7d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801c7ea:	fa32 fa01 	lsrs.w	sl, r2, r1
 801c7ee:	d107      	bne.n	801c800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801c7f0:	fb09 f602 	mul.w	r6, r9, r2
 801c7f4:	fbb6 f0f4 	udiv	r0, r6, r4
 801c7f8:	fb04 6610 	mls	r6, r4, r0, r6
 801c7fc:	603e      	str	r6, [r7, #0]
 801c7fe:	e7eb      	b.n	801c7d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801c800:	2601      	movs	r6, #1
 801c802:	fa09 fb01 	lsl.w	fp, r9, r1
 801c806:	408e      	lsls	r6, r1
 801c808:	fbbb f3f4 	udiv	r3, fp, r4
 801c80c:	3e01      	subs	r6, #1
 801c80e:	9302      	str	r3, [sp, #8]
 801c810:	fb0a f303 	mul.w	r3, sl, r3
 801c814:	4016      	ands	r6, r2
 801c816:	9303      	str	r3, [sp, #12]
 801c818:	4630      	mov	r0, r6
 801c81a:	f7ff ffad 	bl	801c778 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c81e:	464a      	mov	r2, r9
 801c820:	460b      	mov	r3, r1
 801c822:	4601      	mov	r1, r0
 801c824:	4630      	mov	r0, r6
 801c826:	e9cd 4700 	strd	r4, r7, [sp]
 801c82a:	f7ff ffc3 	bl	801c7b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c82e:	9b02      	ldr	r3, [sp, #8]
 801c830:	4606      	mov	r6, r0
 801c832:	eb05 0108 	add.w	r1, r5, r8
 801c836:	fb04 bb13 	mls	fp, r4, r3, fp
 801c83a:	4658      	mov	r0, fp
 801c83c:	f7ff ff9c 	bl	801c778 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c840:	ab05      	add	r3, sp, #20
 801c842:	465a      	mov	r2, fp
 801c844:	e9cd 4300 	strd	r4, r3, [sp]
 801c848:	4603      	mov	r3, r0
 801c84a:	4650      	mov	r0, sl
 801c84c:	f7ff ffb2 	bl	801c7b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c850:	6839      	ldr	r1, [r7, #0]
 801c852:	9a05      	ldr	r2, [sp, #20]
 801c854:	9b03      	ldr	r3, [sp, #12]
 801c856:	4411      	add	r1, r2
 801c858:	fbb1 f2f4 	udiv	r2, r1, r4
 801c85c:	18d3      	adds	r3, r2, r3
 801c85e:	fb04 1412 	mls	r4, r4, r2, r1
 801c862:	441e      	add	r6, r3
 801c864:	603c      	str	r4, [r7, #0]
 801c866:	4430      	add	r0, r6
 801c868:	e7b6      	b.n	801c7d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801c86a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801c86a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c86e:	b085      	sub	sp, #20
 801c870:	f1b0 0900 	subs.w	r9, r0, #0
 801c874:	461d      	mov	r5, r3
 801c876:	4617      	mov	r7, r2
 801c878:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c87a:	bfbb      	ittet	lt
 801c87c:	f1c9 0900 	rsblt	r9, r9, #0
 801c880:	f04f 36ff 	movlt.w	r6, #4294967295
 801c884:	2601      	movge	r6, #1
 801c886:	6823      	ldrlt	r3, [r4, #0]
 801c888:	bfbc      	itt	lt
 801c88a:	425b      	neglt	r3, r3
 801c88c:	6023      	strlt	r3, [r4, #0]
 801c88e:	2a00      	cmp	r2, #0
 801c890:	da04      	bge.n	801c89c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801c892:	6823      	ldr	r3, [r4, #0]
 801c894:	4257      	negs	r7, r2
 801c896:	4276      	negs	r6, r6
 801c898:	425b      	negs	r3, r3
 801c89a:	6023      	str	r3, [r4, #0]
 801c89c:	2d00      	cmp	r5, #0
 801c89e:	4638      	mov	r0, r7
 801c8a0:	bfba      	itte	lt
 801c8a2:	426d      	neglt	r5, r5
 801c8a4:	f04f 38ff 	movlt.w	r8, #4294967295
 801c8a8:	f04f 0801 	movge.w	r8, #1
 801c8ac:	f7ff ff64 	bl	801c778 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c8b0:	ab03      	add	r3, sp, #12
 801c8b2:	463a      	mov	r2, r7
 801c8b4:	e9cd 5300 	strd	r5, r3, [sp]
 801c8b8:	4603      	mov	r3, r0
 801c8ba:	4648      	mov	r0, r9
 801c8bc:	f7ff ff7a 	bl	801c7b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c8c0:	6823      	ldr	r3, [r4, #0]
 801c8c2:	9a03      	ldr	r2, [sp, #12]
 801c8c4:	4546      	cmp	r6, r8
 801c8c6:	441a      	add	r2, r3
 801c8c8:	fb92 f3f5 	sdiv	r3, r2, r5
 801c8cc:	4418      	add	r0, r3
 801c8ce:	fb05 2313 	mls	r3, r5, r3, r2
 801c8d2:	bf18      	it	ne
 801c8d4:	4240      	negne	r0, r0
 801c8d6:	1c72      	adds	r2, r6, #1
 801c8d8:	6023      	str	r3, [r4, #0]
 801c8da:	d105      	bne.n	801c8e8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	f1c3 0200 	rsb	r2, r3, #0
 801c8e2:	db0b      	blt.n	801c8fc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801c8e4:	6022      	str	r2, [r4, #0]
 801c8e6:	e006      	b.n	801c8f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c8e8:	2e01      	cmp	r6, #1
 801c8ea:	d104      	bne.n	801c8f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	da02      	bge.n	801c8f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c8f0:	442b      	add	r3, r5
 801c8f2:	3801      	subs	r0, #1
 801c8f4:	6023      	str	r3, [r4, #0]
 801c8f6:	b005      	add	sp, #20
 801c8f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c8fc:	3801      	subs	r0, #1
 801c8fe:	1b52      	subs	r2, r2, r5
 801c900:	e7f0      	b.n	801c8e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801c904 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801c904:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801c908:	4c1c      	ldr	r4, [pc, #112]	; (801c97c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801c90a:	4605      	mov	r5, r0
 801c90c:	6807      	ldr	r7, [r0, #0]
 801c90e:	69a3      	ldr	r3, [r4, #24]
 801c910:	b92b      	cbnz	r3, 801c91e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801c912:	6840      	ldr	r0, [r0, #4]
 801c914:	e9c5 7000 	strd	r7, r0, [r5]
 801c918:	b004      	add	sp, #16
 801c91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c91e:	f04f 0802 	mov.w	r8, #2
 801c922:	68a2      	ldr	r2, [r4, #8]
 801c924:	ae04      	add	r6, sp, #16
 801c926:	6820      	ldr	r0, [r4, #0]
 801c928:	fb93 f1f8 	sdiv	r1, r3, r8
 801c92c:	440a      	add	r2, r1
 801c92e:	69e1      	ldr	r1, [r4, #28]
 801c930:	f846 2d04 	str.w	r2, [r6, #-4]!
 801c934:	463a      	mov	r2, r7
 801c936:	9600      	str	r6, [sp, #0]
 801c938:	f7ff ff97 	bl	801c86a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c93c:	69a3      	ldr	r3, [r4, #24]
 801c93e:	4607      	mov	r7, r0
 801c940:	686a      	ldr	r2, [r5, #4]
 801c942:	6a21      	ldr	r1, [r4, #32]
 801c944:	9600      	str	r6, [sp, #0]
 801c946:	6860      	ldr	r0, [r4, #4]
 801c948:	f7ff ff8f 	bl	801c86a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c94c:	69a3      	ldr	r3, [r4, #24]
 801c94e:	6962      	ldr	r2, [r4, #20]
 801c950:	4407      	add	r7, r0
 801c952:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c954:	9600      	str	r6, [sp, #0]
 801c956:	68e0      	ldr	r0, [r4, #12]
 801c958:	fb93 f8f8 	sdiv	r8, r3, r8
 801c95c:	4442      	add	r2, r8
 801c95e:	9203      	str	r2, [sp, #12]
 801c960:	682a      	ldr	r2, [r5, #0]
 801c962:	f7ff ff82 	bl	801c86a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c966:	4680      	mov	r8, r0
 801c968:	9600      	str	r6, [sp, #0]
 801c96a:	69a3      	ldr	r3, [r4, #24]
 801c96c:	686a      	ldr	r2, [r5, #4]
 801c96e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801c970:	6920      	ldr	r0, [r4, #16]
 801c972:	f7ff ff7a 	bl	801c86a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c976:	4440      	add	r0, r8
 801c978:	e7cc      	b.n	801c914 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801c97a:	bf00      	nop
 801c97c:	24026270 	.word	0x24026270

0801c980 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801c980:	4b07      	ldr	r3, [pc, #28]	; (801c9a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801c982:	781b      	ldrb	r3, [r3, #0]
 801c984:	2b01      	cmp	r3, #1
 801c986:	d109      	bne.n	801c99c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801c988:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c98c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c990:	8003      	strh	r3, [r0, #0]
 801c992:	4b04      	ldr	r3, [pc, #16]	; (801c9a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801c994:	881b      	ldrh	r3, [r3, #0]
 801c996:	3b01      	subs	r3, #1
 801c998:	1a9b      	subs	r3, r3, r2
 801c99a:	800b      	strh	r3, [r1, #0]
 801c99c:	4770      	bx	lr
 801c99e:	bf00      	nop
 801c9a0:	2402625c 	.word	0x2402625c
 801c9a4:	24026258 	.word	0x24026258

0801c9a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c9a8:	4b07      	ldr	r3, [pc, #28]	; (801c9c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c9aa:	b510      	push	{r4, lr}
 801c9ac:	781b      	ldrb	r3, [r3, #0]
 801c9ae:	2b01      	cmp	r3, #1
 801c9b0:	d108      	bne.n	801c9c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c9b2:	4b06      	ldr	r3, [pc, #24]	; (801c9cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c9b4:	880c      	ldrh	r4, [r1, #0]
 801c9b6:	881b      	ldrh	r3, [r3, #0]
 801c9b8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c9bc:	3b01      	subs	r3, #1
 801c9be:	1b1b      	subs	r3, r3, r4
 801c9c0:	8003      	strh	r3, [r0, #0]
 801c9c2:	800a      	strh	r2, [r1, #0]
 801c9c4:	bd10      	pop	{r4, pc}
 801c9c6:	bf00      	nop
 801c9c8:	2402625c 	.word	0x2402625c
 801c9cc:	24026258 	.word	0x24026258

0801c9d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801c9d0:	4b0a      	ldr	r3, [pc, #40]	; (801c9fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801c9d2:	b510      	push	{r4, lr}
 801c9d4:	781b      	ldrb	r3, [r3, #0]
 801c9d6:	2b01      	cmp	r3, #1
 801c9d8:	d10e      	bne.n	801c9f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801c9da:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c9de:	8843      	ldrh	r3, [r0, #2]
 801c9e0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c9e4:	18ca      	adds	r2, r1, r3
 801c9e6:	4b06      	ldr	r3, [pc, #24]	; (801ca00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801c9e8:	8044      	strh	r4, [r0, #2]
 801c9ea:	881b      	ldrh	r3, [r3, #0]
 801c9ec:	1a9b      	subs	r3, r3, r2
 801c9ee:	8003      	strh	r3, [r0, #0]
 801c9f0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c9f4:	8081      	strh	r1, [r0, #4]
 801c9f6:	80c3      	strh	r3, [r0, #6]
 801c9f8:	bd10      	pop	{r4, pc}
 801c9fa:	bf00      	nop
 801c9fc:	2402625c 	.word	0x2402625c
 801ca00:	24026258 	.word	0x24026258

0801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ca04:	4b08      	ldr	r3, [pc, #32]	; (801ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801ca06:	781b      	ldrb	r3, [r3, #0]
 801ca08:	2b01      	cmp	r3, #1
 801ca0a:	d10c      	bne.n	801ca26 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801ca0c:	8803      	ldrh	r3, [r0, #0]
 801ca0e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801ca12:	8842      	ldrh	r2, [r0, #2]
 801ca14:	8002      	strh	r2, [r0, #0]
 801ca16:	185a      	adds	r2, r3, r1
 801ca18:	4b04      	ldr	r3, [pc, #16]	; (801ca2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801ca1a:	881b      	ldrh	r3, [r3, #0]
 801ca1c:	1a9b      	subs	r3, r3, r2
 801ca1e:	8043      	strh	r3, [r0, #2]
 801ca20:	88c3      	ldrh	r3, [r0, #6]
 801ca22:	80c1      	strh	r1, [r0, #6]
 801ca24:	8083      	strh	r3, [r0, #4]
 801ca26:	4770      	bx	lr
 801ca28:	2402625c 	.word	0x2402625c
 801ca2c:	24026258 	.word	0x24026258

0801ca30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ca30:	4b07      	ldr	r3, [pc, #28]	; (801ca50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ca32:	b510      	push	{r4, lr}
 801ca34:	781b      	ldrb	r3, [r3, #0]
 801ca36:	2b01      	cmp	r3, #1
 801ca38:	d108      	bne.n	801ca4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ca3a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ca3e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ca42:	8003      	strh	r3, [r0, #0]
 801ca44:	8893      	ldrh	r3, [r2, #4]
 801ca46:	3b01      	subs	r3, #1
 801ca48:	1b1b      	subs	r3, r3, r4
 801ca4a:	800b      	strh	r3, [r1, #0]
 801ca4c:	bd10      	pop	{r4, pc}
 801ca4e:	bf00      	nop
 801ca50:	2402625c 	.word	0x2402625c

0801ca54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801ca54:	4b0b      	ldr	r3, [pc, #44]	; (801ca84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801ca56:	781b      	ldrb	r3, [r3, #0]
 801ca58:	2b01      	cmp	r3, #1
 801ca5a:	d111      	bne.n	801ca80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801ca5c:	680b      	ldr	r3, [r1, #0]
 801ca5e:	ed90 7a00 	vldr	s14, [r0]
 801ca62:	6003      	str	r3, [r0, #0]
 801ca64:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801ca68:	eddf 6a07 	vldr	s13, [pc, #28]	; 801ca88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801ca6c:	ee07 3a90 	vmov	s15, r3
 801ca70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ca78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ca7c:	edc1 7a00 	vstr	s15, [r1]
 801ca80:	4770      	bx	lr
 801ca82:	bf00      	nop
 801ca84:	2402625c 	.word	0x2402625c
 801ca88:	38d1b717 	.word	0x38d1b717

0801ca8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ca8c:	4b0a      	ldr	r3, [pc, #40]	; (801cab8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ca8e:	460a      	mov	r2, r1
 801ca90:	b510      	push	{r4, lr}
 801ca92:	781b      	ldrb	r3, [r3, #0]
 801ca94:	2b01      	cmp	r3, #1
 801ca96:	d10d      	bne.n	801cab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801ca98:	8881      	ldrh	r1, [r0, #4]
 801ca9a:	8803      	ldrh	r3, [r0, #0]
 801ca9c:	440b      	add	r3, r1
 801ca9e:	4601      	mov	r1, r0
 801caa0:	3b01      	subs	r3, #1
 801caa2:	f821 3b02 	strh.w	r3, [r1], #2
 801caa6:	f7ff ffc3 	bl	801ca30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801caaa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801caae:	88c2      	ldrh	r2, [r0, #6]
 801cab0:	80c3      	strh	r3, [r0, #6]
 801cab2:	8082      	strh	r2, [r0, #4]
 801cab4:	bd10      	pop	{r4, pc}
 801cab6:	bf00      	nop
 801cab8:	2402625c 	.word	0x2402625c

0801cabc <_ZN8touchgfx11Application13requestRedrawEv>:
 801cabc:	4b06      	ldr	r3, [pc, #24]	; (801cad8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801cabe:	2100      	movs	r1, #0
 801cac0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cac4:	4b05      	ldr	r3, [pc, #20]	; (801cadc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801cac6:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801caca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cace:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801cad2:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801cad6:	4770      	bx	lr
 801cad8:	24026258 	.word	0x24026258
 801cadc:	2402625a 	.word	0x2402625a

0801cae0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801cae0:	4b03      	ldr	r3, [pc, #12]	; (801caf0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801cae2:	6818      	ldr	r0, [r3, #0]
 801cae4:	b110      	cbz	r0, 801caec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801cae6:	6803      	ldr	r3, [r0, #0]
 801cae8:	699b      	ldr	r3, [r3, #24]
 801caea:	4718      	bx	r3
 801caec:	4770      	bx	lr
 801caee:	bf00      	nop
 801caf0:	240262a0 	.word	0x240262a0

0801caf4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801caf4:	4770      	bx	lr
	...

0801caf8 <_ZN8touchgfx11Application4drawEv>:
 801caf8:	4b09      	ldr	r3, [pc, #36]	; (801cb20 <_ZN8touchgfx11Application4drawEv+0x28>)
 801cafa:	b507      	push	{r0, r1, r2, lr}
 801cafc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cb00:	2100      	movs	r1, #0
 801cb02:	4b08      	ldr	r3, [pc, #32]	; (801cb24 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801cb04:	9100      	str	r1, [sp, #0]
 801cb06:	4669      	mov	r1, sp
 801cb08:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cb0c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cb10:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cb14:	6803      	ldr	r3, [r0, #0]
 801cb16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb18:	4798      	blx	r3
 801cb1a:	b003      	add	sp, #12
 801cb1c:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb20:	24026258 	.word	0x24026258
 801cb24:	2402625a 	.word	0x2402625a

0801cb28 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801cb28:	4b03      	ldr	r3, [pc, #12]	; (801cb38 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801cb2a:	6818      	ldr	r0, [r3, #0]
 801cb2c:	b110      	cbz	r0, 801cb34 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801cb2e:	6803      	ldr	r3, [r0, #0]
 801cb30:	69db      	ldr	r3, [r3, #28]
 801cb32:	4718      	bx	r3
 801cb34:	4770      	bx	lr
 801cb36:	bf00      	nop
 801cb38:	240262a0 	.word	0x240262a0

0801cb3c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801cb3c:	4b03      	ldr	r3, [pc, #12]	; (801cb4c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801cb3e:	6818      	ldr	r0, [r3, #0]
 801cb40:	b110      	cbz	r0, 801cb48 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801cb42:	6803      	ldr	r3, [r0, #0]
 801cb44:	6a1b      	ldr	r3, [r3, #32]
 801cb46:	4718      	bx	r3
 801cb48:	4770      	bx	lr
 801cb4a:	bf00      	nop
 801cb4c:	240262a0 	.word	0x240262a0

0801cb50 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801cb50:	2300      	movs	r3, #0
 801cb52:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801cb56:	4770      	bx	lr

0801cb58 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801cb58:	4b03      	ldr	r3, [pc, #12]	; (801cb68 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801cb5a:	6818      	ldr	r0, [r3, #0]
 801cb5c:	b110      	cbz	r0, 801cb64 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801cb5e:	6803      	ldr	r3, [r0, #0]
 801cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb62:	4718      	bx	r3
 801cb64:	4770      	bx	lr
 801cb66:	bf00      	nop
 801cb68:	240262a0 	.word	0x240262a0

0801cb6c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801cb6c:	b510      	push	{r4, lr}
 801cb6e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801cb72:	888a      	ldrh	r2, [r1, #4]
 801cb74:	f9b0 3000 	ldrsh.w	r3, [r0]
 801cb78:	4422      	add	r2, r4
 801cb7a:	b212      	sxth	r2, r2
 801cb7c:	4293      	cmp	r3, r2
 801cb7e:	da15      	bge.n	801cbac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801cb80:	8882      	ldrh	r2, [r0, #4]
 801cb82:	4413      	add	r3, r2
 801cb84:	b21b      	sxth	r3, r3
 801cb86:	429c      	cmp	r4, r3
 801cb88:	da10      	bge.n	801cbac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801cb8a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801cb8e:	88c9      	ldrh	r1, [r1, #6]
 801cb90:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801cb94:	4419      	add	r1, r3
 801cb96:	b209      	sxth	r1, r1
 801cb98:	428a      	cmp	r2, r1
 801cb9a:	da07      	bge.n	801cbac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801cb9c:	88c0      	ldrh	r0, [r0, #6]
 801cb9e:	4410      	add	r0, r2
 801cba0:	b200      	sxth	r0, r0
 801cba2:	4283      	cmp	r3, r0
 801cba4:	bfac      	ite	ge
 801cba6:	2000      	movge	r0, #0
 801cba8:	2001      	movlt	r0, #1
 801cbaa:	bd10      	pop	{r4, pc}
 801cbac:	2000      	movs	r0, #0
 801cbae:	e7fc      	b.n	801cbaa <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801cbb0 <_ZN8touchgfx4Rect10restrictToEss>:
 801cbb0:	f9b0 3000 	ldrsh.w	r3, [r0]
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	b510      	push	{r4, lr}
 801cbb8:	da04      	bge.n	801cbc4 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801cbba:	8884      	ldrh	r4, [r0, #4]
 801cbbc:	4423      	add	r3, r4
 801cbbe:	8083      	strh	r3, [r0, #4]
 801cbc0:	2300      	movs	r3, #0
 801cbc2:	8003      	strh	r3, [r0, #0]
 801cbc4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801cbc8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801cbcc:	1b09      	subs	r1, r1, r4
 801cbce:	428b      	cmp	r3, r1
 801cbd0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801cbd4:	bfc8      	it	gt
 801cbd6:	8081      	strhgt	r1, [r0, #4]
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	da04      	bge.n	801cbe6 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801cbdc:	88c1      	ldrh	r1, [r0, #6]
 801cbde:	440b      	add	r3, r1
 801cbe0:	80c3      	strh	r3, [r0, #6]
 801cbe2:	2300      	movs	r3, #0
 801cbe4:	8043      	strh	r3, [r0, #2]
 801cbe6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801cbea:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801cbee:	1a52      	subs	r2, r2, r1
 801cbf0:	4293      	cmp	r3, r2
 801cbf2:	bfc8      	it	gt
 801cbf4:	80c2      	strhgt	r2, [r0, #6]
 801cbf6:	bd10      	pop	{r4, pc}

0801cbf8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801cbf8:	4b10      	ldr	r3, [pc, #64]	; (801cc3c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801cbfa:	b510      	push	{r4, lr}
 801cbfc:	460c      	mov	r4, r1
 801cbfe:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cc02:	4b0f      	ldr	r3, [pc, #60]	; (801cc40 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801cc04:	4620      	mov	r0, r4
 801cc06:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cc0a:	f7ff ffd1 	bl	801cbb0 <_ZN8touchgfx4Rect10restrictToEss>
 801cc0e:	4b0d      	ldr	r3, [pc, #52]	; (801cc44 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801cc10:	6818      	ldr	r0, [r3, #0]
 801cc12:	b190      	cbz	r0, 801cc3a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801cc14:	6803      	ldr	r3, [r0, #0]
 801cc16:	4621      	mov	r1, r4
 801cc18:	689b      	ldr	r3, [r3, #8]
 801cc1a:	4798      	blx	r3
 801cc1c:	4b0a      	ldr	r3, [pc, #40]	; (801cc48 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801cc1e:	6818      	ldr	r0, [r3, #0]
 801cc20:	b118      	cbz	r0, 801cc2a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801cc22:	6803      	ldr	r3, [r0, #0]
 801cc24:	4621      	mov	r1, r4
 801cc26:	689b      	ldr	r3, [r3, #8]
 801cc28:	4798      	blx	r3
 801cc2a:	4b08      	ldr	r3, [pc, #32]	; (801cc4c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801cc2c:	4621      	mov	r1, r4
 801cc2e:	6818      	ldr	r0, [r3, #0]
 801cc30:	6803      	ldr	r3, [r0, #0]
 801cc32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc36:	69db      	ldr	r3, [r3, #28]
 801cc38:	4718      	bx	r3
 801cc3a:	bd10      	pop	{r4, pc}
 801cc3c:	2402625a 	.word	0x2402625a
 801cc40:	24026258 	.word	0x24026258
 801cc44:	240262a0 	.word	0x240262a0
 801cc48:	2402629c 	.word	0x2402629c
 801cc4c:	24026264 	.word	0x24026264

0801cc50 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc52:	4606      	mov	r6, r0
 801cc54:	4608      	mov	r0, r1
 801cc56:	460f      	mov	r7, r1
 801cc58:	f7fc fc31 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc5c:	b9e8      	cbnz	r0, 801cc9a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801cc5e:	f9b7 5000 	ldrsh.w	r5, [r7]
 801cc62:	f9b6 4000 	ldrsh.w	r4, [r6]
 801cc66:	42a5      	cmp	r5, r4
 801cc68:	db17      	blt.n	801cc9a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801cc6a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801cc6e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801cc72:	429a      	cmp	r2, r3
 801cc74:	db11      	blt.n	801cc9a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801cc76:	88b9      	ldrh	r1, [r7, #4]
 801cc78:	440d      	add	r5, r1
 801cc7a:	88b1      	ldrh	r1, [r6, #4]
 801cc7c:	440c      	add	r4, r1
 801cc7e:	b22d      	sxth	r5, r5
 801cc80:	b224      	sxth	r4, r4
 801cc82:	42a5      	cmp	r5, r4
 801cc84:	dc09      	bgt.n	801cc9a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801cc86:	88f8      	ldrh	r0, [r7, #6]
 801cc88:	4410      	add	r0, r2
 801cc8a:	88f2      	ldrh	r2, [r6, #6]
 801cc8c:	4413      	add	r3, r2
 801cc8e:	b200      	sxth	r0, r0
 801cc90:	b21b      	sxth	r3, r3
 801cc92:	4298      	cmp	r0, r3
 801cc94:	bfcc      	ite	gt
 801cc96:	2000      	movgt	r0, #0
 801cc98:	2001      	movle	r0, #1
 801cc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cc9c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc9e:	4604      	mov	r4, r0
 801cca0:	4608      	mov	r0, r1
 801cca2:	460d      	mov	r5, r1
 801cca4:	f7fc fc0b 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801cca8:	b978      	cbnz	r0, 801ccca <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801ccaa:	4620      	mov	r0, r4
 801ccac:	f7fc fc07 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801ccb0:	f9b5 6000 	ldrsh.w	r6, [r5]
 801ccb4:	b150      	cbz	r0, 801cccc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801ccb6:	8026      	strh	r6, [r4, #0]
 801ccb8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801ccbc:	8063      	strh	r3, [r4, #2]
 801ccbe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801ccc2:	80a3      	strh	r3, [r4, #4]
 801ccc4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ccc8:	80e3      	strh	r3, [r4, #6]
 801ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cccc:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ccd0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801ccd4:	42b1      	cmp	r1, r6
 801ccd6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ccda:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801ccde:	460f      	mov	r7, r1
 801cce0:	88ed      	ldrh	r5, [r5, #6]
 801cce2:	bfa8      	it	ge
 801cce4:	4637      	movge	r7, r6
 801cce6:	4293      	cmp	r3, r2
 801cce8:	4618      	mov	r0, r3
 801ccea:	4466      	add	r6, ip
 801ccec:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801ccf0:	bfa8      	it	ge
 801ccf2:	4610      	movge	r0, r2
 801ccf4:	442a      	add	r2, r5
 801ccf6:	88e5      	ldrh	r5, [r4, #6]
 801ccf8:	4461      	add	r1, ip
 801ccfa:	b236      	sxth	r6, r6
 801ccfc:	8027      	strh	r7, [r4, #0]
 801ccfe:	442b      	add	r3, r5
 801cd00:	b209      	sxth	r1, r1
 801cd02:	b212      	sxth	r2, r2
 801cd04:	8060      	strh	r0, [r4, #2]
 801cd06:	b21b      	sxth	r3, r3
 801cd08:	428e      	cmp	r6, r1
 801cd0a:	bfac      	ite	ge
 801cd0c:	ebc7 0106 	rsbge	r1, r7, r6
 801cd10:	ebc7 0101 	rsblt	r1, r7, r1
 801cd14:	429a      	cmp	r2, r3
 801cd16:	bfac      	ite	ge
 801cd18:	ebc0 0202 	rsbge	r2, r0, r2
 801cd1c:	ebc0 0203 	rsblt	r2, r0, r3
 801cd20:	80a1      	strh	r1, [r4, #4]
 801cd22:	80e2      	strh	r2, [r4, #6]
 801cd24:	e7d1      	b.n	801ccca <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801cd28 <_ZN8touchgfx11Application11getInstanceEv>:
 801cd28:	4b01      	ldr	r3, [pc, #4]	; (801cd30 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801cd2a:	6818      	ldr	r0, [r3, #0]
 801cd2c:	4770      	bx	lr
 801cd2e:	bf00      	nop
 801cd30:	240262b0 	.word	0x240262b0

0801cd34 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801cd34:	2300      	movs	r3, #0
 801cd36:	b510      	push	{r4, lr}
 801cd38:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801cd3c:	4604      	mov	r4, r0
 801cd3e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801cd42:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801cd46:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801cd4a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801cd4e:	429a      	cmp	r2, r3
 801cd50:	d90e      	bls.n	801cd70 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801cd52:	18e2      	adds	r2, r4, r3
 801cd54:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801cd58:	b122      	cbz	r2, 801cd64 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801cd5a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801cd5e:	6803      	ldr	r3, [r0, #0]
 801cd60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd62:	4798      	blx	r3
 801cd64:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801cd68:	3301      	adds	r3, #1
 801cd6a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801cd6e:	e7ea      	b.n	801cd46 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801cd70:	bd10      	pop	{r4, pc}

0801cd72 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801cd72:	2300      	movs	r3, #0
 801cd74:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801cd78:	30a4      	adds	r0, #164	; 0xa4
 801cd7a:	f820 3c24 	strh.w	r3, [r0, #-36]
 801cd7e:	f802 3b01 	strb.w	r3, [r2], #1
 801cd82:	4282      	cmp	r2, r0
 801cd84:	d1fb      	bne.n	801cd7e <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801cd86:	4770      	bx	lr

0801cd88 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801cd88:	b570      	push	{r4, r5, r6, lr}
 801cd8a:	4c0b      	ldr	r4, [pc, #44]	; (801cdb8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801cd8c:	4605      	mov	r5, r0
 801cd8e:	460e      	mov	r6, r1
 801cd90:	6820      	ldr	r0, [r4, #0]
 801cd92:	b110      	cbz	r0, 801cd9a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801cd94:	6803      	ldr	r3, [r0, #0]
 801cd96:	695b      	ldr	r3, [r3, #20]
 801cd98:	4798      	blx	r3
 801cd9a:	1d28      	adds	r0, r5, #4
 801cd9c:	f7ff ffe9 	bl	801cd72 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801cda0:	6026      	str	r6, [r4, #0]
 801cda2:	6833      	ldr	r3, [r6, #0]
 801cda4:	4630      	mov	r0, r6
 801cda6:	68db      	ldr	r3, [r3, #12]
 801cda8:	4798      	blx	r3
 801cdaa:	682b      	ldr	r3, [r5, #0]
 801cdac:	4628      	mov	r0, r5
 801cdae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cdb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cdb4:	4718      	bx	r3
 801cdb6:	bf00      	nop
 801cdb8:	240262a0 	.word	0x240262a0

0801cdbc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801cdbc:	2300      	movs	r3, #0
 801cdbe:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801cdc2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801cdc6:	461a      	mov	r2, r3
 801cdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdca:	461c      	mov	r4, r3
 801cdcc:	461d      	mov	r5, r3
 801cdce:	459c      	cmp	ip, r3
 801cdd0:	dd1a      	ble.n	801ce08 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801cdd2:	18c6      	adds	r6, r0, r3
 801cdd4:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801cdd8:	b16e      	cbz	r6, 801cdf6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801cdda:	429a      	cmp	r2, r3
 801cddc:	d008      	beq.n	801cdf0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801cdde:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801cde2:	fa1f fe82 	uxth.w	lr, r2
 801cde6:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801cdea:	1887      	adds	r7, r0, r2
 801cdec:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801cdf0:	3201      	adds	r2, #1
 801cdf2:	3301      	adds	r3, #1
 801cdf4:	e7eb      	b.n	801cdce <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801cdf6:	4299      	cmp	r1, r3
 801cdf8:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801cdfc:	bfa8      	it	ge
 801cdfe:	3501      	addge	r5, #1
 801ce00:	429e      	cmp	r6, r3
 801ce02:	bfc8      	it	gt
 801ce04:	3401      	addgt	r4, #1
 801ce06:	e7f4      	b.n	801cdf2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801ce08:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801ce0c:	1b49      	subs	r1, r1, r5
 801ce0e:	1b1b      	subs	r3, r3, r4
 801ce10:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801ce14:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801ce18:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801ce1c:	4293      	cmp	r3, r2
 801ce1e:	dd03      	ble.n	801ce28 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801ce20:	3b01      	subs	r3, #1
 801ce22:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801ce26:	e7f7      	b.n	801ce18 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801ce28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801ce2c <_ZN8touchgfx11Application15handleTickEventEv>:
 801ce2c:	b570      	push	{r4, r5, r6, lr}
 801ce2e:	4d16      	ldr	r5, [pc, #88]	; (801ce88 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801ce30:	4604      	mov	r4, r0
 801ce32:	6828      	ldr	r0, [r5, #0]
 801ce34:	b140      	cbz	r0, 801ce48 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ce36:	7a03      	ldrb	r3, [r0, #8]
 801ce38:	b933      	cbnz	r3, 801ce48 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ce3a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801ce3e:	6803      	ldr	r3, [r0, #0]
 801ce40:	689b      	ldr	r3, [r3, #8]
 801ce42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ce46:	4718      	bx	r3
 801ce48:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801ce4c:	4e0f      	ldr	r6, [pc, #60]	; (801ce8c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801ce4e:	b973      	cbnz	r3, 801ce6e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ce50:	b168      	cbz	r0, 801ce6e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ce52:	7a03      	ldrb	r3, [r0, #8]
 801ce54:	b15b      	cbz	r3, 801ce6e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ce56:	6830      	ldr	r0, [r6, #0]
 801ce58:	b110      	cbz	r0, 801ce60 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801ce5a:	6803      	ldr	r3, [r0, #0]
 801ce5c:	691b      	ldr	r3, [r3, #16]
 801ce5e:	4798      	blx	r3
 801ce60:	6828      	ldr	r0, [r5, #0]
 801ce62:	6803      	ldr	r3, [r0, #0]
 801ce64:	68db      	ldr	r3, [r3, #12]
 801ce66:	4798      	blx	r3
 801ce68:	2301      	movs	r3, #1
 801ce6a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801ce6e:	3404      	adds	r4, #4
 801ce70:	4620      	mov	r0, r4
 801ce72:	f7ff ff5f 	bl	801cd34 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801ce76:	4620      	mov	r0, r4
 801ce78:	f7ff ffa0 	bl	801cdbc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801ce7c:	6830      	ldr	r0, [r6, #0]
 801ce7e:	b110      	cbz	r0, 801ce86 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801ce80:	6803      	ldr	r3, [r0, #0]
 801ce82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce84:	e7dd      	b.n	801ce42 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801ce86:	bd70      	pop	{r4, r5, r6, pc}
 801ce88:	240262a4 	.word	0x240262a4
 801ce8c:	240262a0 	.word	0x240262a0

0801ce90 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801ce90:	4603      	mov	r3, r0
 801ce92:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801ce96:	2200      	movs	r2, #0
 801ce98:	801a      	strh	r2, [r3, #0]
 801ce9a:	3308      	adds	r3, #8
 801ce9c:	f823 2c06 	strh.w	r2, [r3, #-6]
 801cea0:	f823 2c04 	strh.w	r2, [r3, #-4]
 801cea4:	f823 2c02 	strh.w	r2, [r3, #-2]
 801cea8:	428b      	cmp	r3, r1
 801ceaa:	d1f5      	bne.n	801ce98 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801ceac:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801ceb0:	4770      	bx	lr
	...

0801ceb4 <_ZN8touchgfx11ApplicationC1Ev>:
 801ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ceb6:	4b1d      	ldr	r3, [pc, #116]	; (801cf2c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801ceb8:	4606      	mov	r6, r0
 801ceba:	4604      	mov	r4, r0
 801cebc:	2500      	movs	r5, #0
 801cebe:	f846 3b04 	str.w	r3, [r6], #4
 801cec2:	22a8      	movs	r2, #168	; 0xa8
 801cec4:	2100      	movs	r1, #0
 801cec6:	4630      	mov	r0, r6
 801cec8:	f00a fe70 	bl	8027bac <memset>
 801cecc:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801ced0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801ced4:	4f16      	ldr	r7, [pc, #88]	; (801cf30 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801ced6:	f7ff ffdb 	bl	801ce90 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ceda:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801cede:	f7ff ffd7 	bl	801ce90 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801cee2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801cee6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801ceea:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801ceee:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801cef2:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801cef6:	490f      	ldr	r1, [pc, #60]	; (801cf34 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801cef8:	480f      	ldr	r0, [pc, #60]	; (801cf38 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801cefa:	f00a fc8f 	bl	802781c <CRC_Lock>
 801cefe:	4b0f      	ldr	r3, [pc, #60]	; (801cf3c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801cf00:	b158      	cbz	r0, 801cf1a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801cf02:	801d      	strh	r5, [r3, #0]
 801cf04:	2300      	movs	r3, #0
 801cf06:	4a0e      	ldr	r2, [pc, #56]	; (801cf40 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801cf08:	4630      	mov	r0, r6
 801cf0a:	6013      	str	r3, [r2, #0]
 801cf0c:	4a0d      	ldr	r2, [pc, #52]	; (801cf44 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801cf0e:	603b      	str	r3, [r7, #0]
 801cf10:	6013      	str	r3, [r2, #0]
 801cf12:	f7ff ff2e 	bl	801cd72 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801cf16:	4620      	mov	r0, r4
 801cf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cf1e:	2002      	movs	r0, #2
 801cf20:	801a      	strh	r2, [r3, #0]
 801cf22:	6038      	str	r0, [r7, #0]
 801cf24:	f001 fa3e 	bl	801e3a4 <_ZN8touchgfx6Screen4drawEv>
 801cf28:	e7ec      	b.n	801cf04 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801cf2a:	bf00      	nop
 801cf2c:	0802c668 	.word	0x0802c668
 801cf30:	240262a0 	.word	0x240262a0
 801cf34:	b5e8b5cd 	.word	0xb5e8b5cd
 801cf38:	f407a5c2 	.word	0xf407a5c2
 801cf3c:	24000068 	.word	0x24000068
 801cf40:	240262b0 	.word	0x240262b0
 801cf44:	240262a4 	.word	0x240262a4

0801cf48 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801cf48:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801cf4c:	3b01      	subs	r3, #1
 801cf4e:	b29b      	uxth	r3, r3
 801cf50:	428b      	cmp	r3, r1
 801cf52:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801cf56:	b510      	push	{r4, lr}
 801cf58:	d908      	bls.n	801cf6c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801cf5a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801cf5e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801cf62:	681a      	ldr	r2, [r3, #0]
 801cf64:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801cf68:	685a      	ldr	r2, [r3, #4]
 801cf6a:	6062      	str	r2, [r4, #4]
 801cf6c:	bd10      	pop	{r4, pc}
	...

0801cf70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801cf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf74:	b08f      	sub	sp, #60	; 0x3c
 801cf76:	4b8f      	ldr	r3, [pc, #572]	; (801d1b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801cf78:	4683      	mov	fp, r0
 801cf7a:	ac0a      	add	r4, sp, #40	; 0x28
 801cf7c:	e884 0006 	stmia.w	r4, {r1, r2}
 801cf80:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cf84:	4620      	mov	r0, r4
 801cf86:	4b8c      	ldr	r3, [pc, #560]	; (801d1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801cf88:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cf8c:	f7ff fe10 	bl	801cbb0 <_ZN8touchgfx4Rect10restrictToEss>
 801cf90:	4620      	mov	r0, r4
 801cf92:	f7fc fa94 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801cf96:	2800      	cmp	r0, #0
 801cf98:	d16a      	bne.n	801d070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801cf9a:	9403      	str	r4, [sp, #12]
 801cf9c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801cfa0:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801cfa4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801cfa8:	9301      	str	r3, [sp, #4]
 801cfaa:	35a4      	adds	r5, #164	; 0xa4
 801cfac:	b15c      	cbz	r4, 801cfc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801cfae:	4629      	mov	r1, r5
 801cfb0:	9803      	ldr	r0, [sp, #12]
 801cfb2:	f7ff fe4d 	bl	801cc50 <_ZNK8touchgfx4Rect8includesERKS0_>
 801cfb6:	3c01      	subs	r4, #1
 801cfb8:	b118      	cbz	r0, 801cfc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801cfba:	b2a1      	uxth	r1, r4
 801cfbc:	9801      	ldr	r0, [sp, #4]
 801cfbe:	f7ff ffc3 	bl	801cf48 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cfc2:	3d08      	subs	r5, #8
 801cfc4:	e7f2      	b.n	801cfac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801cfc6:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801cfca:	f108 33ff 	add.w	r3, r8, #4294967295
 801cfce:	f8cd 8010 	str.w	r8, [sp, #16]
 801cfd2:	9302      	str	r3, [sp, #8]
 801cfd4:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801cfd8:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801cfdc:	9306      	str	r3, [sp, #24]
 801cfde:	445c      	add	r4, fp
 801cfe0:	2500      	movs	r5, #0
 801cfe2:	4626      	mov	r6, r4
 801cfe4:	f8cd 8014 	str.w	r8, [sp, #20]
 801cfe8:	462f      	mov	r7, r5
 801cfea:	9b05      	ldr	r3, [sp, #20]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d073      	beq.n	801d0d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801cff0:	9903      	ldr	r1, [sp, #12]
 801cff2:	4630      	mov	r0, r6
 801cff4:	f7ff fdba 	bl	801cb6c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cff8:	b350      	cbz	r0, 801d050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801cffa:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801cffe:	f9b6 c000 	ldrsh.w	ip, [r6]
 801d002:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801d006:	45e6      	cmp	lr, ip
 801d008:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801d00c:	db33      	blt.n	801d076 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801d00e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d012:	88b3      	ldrh	r3, [r6, #4]
 801d014:	4472      	add	r2, lr
 801d016:	4463      	add	r3, ip
 801d018:	b212      	sxth	r2, r2
 801d01a:	b21b      	sxth	r3, r3
 801d01c:	429a      	cmp	r2, r3
 801d01e:	dc2a      	bgt.n	801d076 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801d020:	fa1f f289 	uxth.w	r2, r9
 801d024:	88f3      	ldrh	r3, [r6, #6]
 801d026:	45ca      	cmp	sl, r9
 801d028:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801d02c:	4413      	add	r3, r2
 801d02e:	fa1f fc8a 	uxth.w	ip, sl
 801d032:	b29b      	uxth	r3, r3
 801d034:	fa0f fe83 	sxth.w	lr, r3
 801d038:	db0f      	blt.n	801d05a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801d03a:	eba3 030c 	sub.w	r3, r3, ip
 801d03e:	1ac9      	subs	r1, r1, r3
 801d040:	b209      	sxth	r1, r1
 801d042:	2900      	cmp	r1, #0
 801d044:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d048:	dd12      	ble.n	801d070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d04a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801d04e:	4605      	mov	r5, r0
 801d050:	9b05      	ldr	r3, [sp, #20]
 801d052:	3e08      	subs	r6, #8
 801d054:	3b01      	subs	r3, #1
 801d056:	9305      	str	r3, [sp, #20]
 801d058:	e7c7      	b.n	801cfea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801d05a:	4461      	add	r1, ip
 801d05c:	b209      	sxth	r1, r1
 801d05e:	4571      	cmp	r1, lr
 801d060:	dc38      	bgt.n	801d0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801d062:	eba2 020c 	sub.w	r2, r2, ip
 801d066:	b212      	sxth	r2, r2
 801d068:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801d06c:	2a00      	cmp	r2, #0
 801d06e:	dcee      	bgt.n	801d04e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801d070:	b00f      	add	sp, #60	; 0x3c
 801d072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d076:	45ca      	cmp	sl, r9
 801d078:	db2c      	blt.n	801d0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801d07a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801d07e:	449a      	add	sl, r3
 801d080:	88f3      	ldrh	r3, [r6, #6]
 801d082:	4499      	add	r9, r3
 801d084:	fa0f fa8a 	sxth.w	sl, sl
 801d088:	fa0f f989 	sxth.w	r9, r9
 801d08c:	45ca      	cmp	sl, r9
 801d08e:	dc21      	bgt.n	801d0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801d090:	fa1f f28c 	uxth.w	r2, ip
 801d094:	88b3      	ldrh	r3, [r6, #4]
 801d096:	45e6      	cmp	lr, ip
 801d098:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d09c:	4413      	add	r3, r2
 801d09e:	fa1f f98e 	uxth.w	r9, lr
 801d0a2:	b29b      	uxth	r3, r3
 801d0a4:	fa0f fa83 	sxth.w	sl, r3
 801d0a8:	db0a      	blt.n	801d0c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801d0aa:	eba3 0309 	sub.w	r3, r3, r9
 801d0ae:	1ac9      	subs	r1, r1, r3
 801d0b0:	b209      	sxth	r1, r1
 801d0b2:	2900      	cmp	r1, #0
 801d0b4:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801d0b8:	ddda      	ble.n	801d070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d0ba:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d0be:	e7c6      	b.n	801d04e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801d0c0:	4449      	add	r1, r9
 801d0c2:	b209      	sxth	r1, r1
 801d0c4:	4551      	cmp	r1, sl
 801d0c6:	dc05      	bgt.n	801d0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801d0c8:	eba2 0209 	sub.w	r2, r2, r9
 801d0cc:	b212      	sxth	r2, r2
 801d0ce:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801d0d2:	e7cb      	b.n	801d06c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801d0d4:	4607      	mov	r7, r0
 801d0d6:	e7bb      	b.n	801d050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801d0d8:	2d00      	cmp	r5, #0
 801d0da:	d181      	bne.n	801cfe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801d0dc:	2f00      	cmp	r7, #0
 801d0de:	f000 81dd 	beq.w	801d49c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801d0e2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801d0e6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801d0ea:	b2b3      	uxth	r3, r6
 801d0ec:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d0f0:	b2b9      	uxth	r1, r7
 801d0f2:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801d0f6:	441a      	add	r2, r3
 801d0f8:	448a      	add	sl, r1
 801d0fa:	9105      	str	r1, [sp, #20]
 801d0fc:	b292      	uxth	r2, r2
 801d0fe:	fa1f fa8a 	uxth.w	sl, sl
 801d102:	fa0f f882 	sxth.w	r8, r2
 801d106:	fa0f f98a 	sxth.w	r9, sl
 801d10a:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801d10e:	9b04      	ldr	r3, [sp, #16]
 801d110:	2b00      	cmp	r3, #0
 801d112:	d053      	beq.n	801d1bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801d114:	9903      	ldr	r1, [sp, #12]
 801d116:	4620      	mov	r0, r4
 801d118:	f7ff fd28 	bl	801cb6c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d11c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801d120:	b1c0      	cbz	r0, 801d154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801d122:	f9b4 e000 	ldrsh.w	lr, [r4]
 801d126:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d12a:	4576      	cmp	r6, lr
 801d12c:	dc23      	bgt.n	801d176 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801d12e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801d132:	44f4      	add	ip, lr
 801d134:	fa0f fc8c 	sxth.w	ip, ip
 801d138:	45e0      	cmp	r8, ip
 801d13a:	db1c      	blt.n	801d176 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801d13c:	428f      	cmp	r7, r1
 801d13e:	fa1f fc81 	uxth.w	ip, r1
 801d142:	88e1      	ldrh	r1, [r4, #6]
 801d144:	dc0d      	bgt.n	801d162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801d146:	ebaa 0c0c 	sub.w	ip, sl, ip
 801d14a:	f8a4 9002 	strh.w	r9, [r4, #2]
 801d14e:	eba1 010c 	sub.w	r1, r1, ip
 801d152:	80e1      	strh	r1, [r4, #6]
 801d154:	4628      	mov	r0, r5
 801d156:	9904      	ldr	r1, [sp, #16]
 801d158:	3c08      	subs	r4, #8
 801d15a:	4605      	mov	r5, r0
 801d15c:	3901      	subs	r1, #1
 801d15e:	9104      	str	r1, [sp, #16]
 801d160:	e7d3      	b.n	801d10a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801d162:	4461      	add	r1, ip
 801d164:	b209      	sxth	r1, r1
 801d166:	4549      	cmp	r1, r9
 801d168:	dcf5      	bgt.n	801d156 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d16a:	9905      	ldr	r1, [sp, #20]
 801d16c:	eba1 0c0c 	sub.w	ip, r1, ip
 801d170:	f8a4 c006 	strh.w	ip, [r4, #6]
 801d174:	e7ee      	b.n	801d154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801d176:	428f      	cmp	r7, r1
 801d178:	dced      	bgt.n	801d156 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d17a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801d17e:	4461      	add	r1, ip
 801d180:	b209      	sxth	r1, r1
 801d182:	4589      	cmp	r9, r1
 801d184:	dbe7      	blt.n	801d156 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d186:	4576      	cmp	r6, lr
 801d188:	fa1f fc8e 	uxth.w	ip, lr
 801d18c:	88a1      	ldrh	r1, [r4, #4]
 801d18e:	dc07      	bgt.n	801d1a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801d190:	eba2 0c0c 	sub.w	ip, r2, ip
 801d194:	f8a4 8000 	strh.w	r8, [r4]
 801d198:	eba1 010c 	sub.w	r1, r1, ip
 801d19c:	80a1      	strh	r1, [r4, #4]
 801d19e:	e7d9      	b.n	801d154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801d1a0:	4461      	add	r1, ip
 801d1a2:	b209      	sxth	r1, r1
 801d1a4:	4588      	cmp	r8, r1
 801d1a6:	dbd6      	blt.n	801d156 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d1a8:	eba3 0c0c 	sub.w	ip, r3, ip
 801d1ac:	f8a4 c004 	strh.w	ip, [r4, #4]
 801d1b0:	e7d0      	b.n	801d154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801d1b2:	bf00      	nop
 801d1b4:	2402625a 	.word	0x2402625a
 801d1b8:	24026258 	.word	0x24026258
 801d1bc:	2d00      	cmp	r5, #0
 801d1be:	f000 816d 	beq.w	801d49c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801d1c2:	9b06      	ldr	r3, [sp, #24]
 801d1c4:	445b      	add	r3, fp
 801d1c6:	461c      	mov	r4, r3
 801d1c8:	9b02      	ldr	r3, [sp, #8]
 801d1ca:	3301      	adds	r3, #1
 801d1cc:	f000 8166 	beq.w	801d49c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801d1d0:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801d1d4:	9803      	ldr	r0, [sp, #12]
 801d1d6:	4629      	mov	r1, r5
 801d1d8:	f7ff fd3a 	bl	801cc50 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d1dc:	b120      	cbz	r0, 801d1e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801d1de:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d1e2:	9801      	ldr	r0, [sp, #4]
 801d1e4:	f7ff feb0 	bl	801cf48 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d1e8:	9903      	ldr	r1, [sp, #12]
 801d1ea:	4628      	mov	r0, r5
 801d1ec:	f7ff fcbe 	bl	801cb6c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d1f0:	2800      	cmp	r0, #0
 801d1f2:	f000 809c 	beq.w	801d32e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801d1f6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801d1fa:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801d1fe:	fa1f f189 	uxth.w	r1, r9
 801d202:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801d206:	9309      	str	r3, [sp, #36]	; 0x24
 801d208:	eb01 0c03 	add.w	ip, r1, r3
 801d20c:	b283      	uxth	r3, r0
 801d20e:	4548      	cmp	r0, r9
 801d210:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801d214:	fa1f fa8c 	uxth.w	sl, ip
 801d218:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801d21c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801d220:	eb03 050c 	add.w	r5, r3, ip
 801d224:	b2ad      	uxth	r5, r5
 801d226:	9505      	str	r5, [sp, #20]
 801d228:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801d22c:	9504      	str	r5, [sp, #16]
 801d22e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801d232:	f340 8099 	ble.w	801d368 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801d236:	1a5b      	subs	r3, r3, r1
 801d238:	4596      	cmp	lr, r2
 801d23a:	fa0f f08a 	sxth.w	r0, sl
 801d23e:	b29b      	uxth	r3, r3
 801d240:	b21e      	sxth	r6, r3
 801d242:	dd2e      	ble.n	801d2a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801d244:	9f02      	ldr	r7, [sp, #8]
 801d246:	fa1f fe8e 	uxth.w	lr, lr
 801d24a:	b292      	uxth	r2, r2
 801d24c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801d250:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801d254:	9f04      	ldr	r7, [sp, #16]
 801d256:	ebae 0102 	sub.w	r1, lr, r2
 801d25a:	44a6      	add	lr, r4
 801d25c:	1a3f      	subs	r7, r7, r0
 801d25e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801d262:	b289      	uxth	r1, r1
 801d264:	4402      	add	r2, r0
 801d266:	fa0f fe8e 	sxth.w	lr, lr
 801d26a:	b20d      	sxth	r5, r1
 801d26c:	b212      	sxth	r2, r2
 801d26e:	436f      	muls	r7, r5
 801d270:	ebae 0202 	sub.w	r2, lr, r2
 801d274:	4372      	muls	r2, r6
 801d276:	4297      	cmp	r7, r2
 801d278:	db09      	blt.n	801d28e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801d27a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801d27e:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801d282:	449c      	add	ip, r3
 801d284:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d288:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801d28c:	e686      	b.n	801cf9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d28e:	4421      	add	r1, r4
 801d290:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801d294:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801d298:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d29c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d2a0:	e67c      	b.n	801cf9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d2a2:	9f04      	ldr	r7, [sp, #16]
 801d2a4:	42b8      	cmp	r0, r7
 801d2a6:	da27      	bge.n	801d2f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801d2a8:	9902      	ldr	r1, [sp, #8]
 801d2aa:	1a3f      	subs	r7, r7, r0
 801d2ac:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801d2b0:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801d2b4:	eb05 010e 	add.w	r1, r5, lr
 801d2b8:	fa1f f881 	uxth.w	r8, r1
 801d2bc:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801d2c0:	4411      	add	r1, r2
 801d2c2:	fa0f f988 	sxth.w	r9, r8
 801d2c6:	eba2 020e 	sub.w	r2, r2, lr
 801d2ca:	eba1 0108 	sub.w	r1, r1, r8
 801d2ce:	4372      	muls	r2, r6
 801d2d0:	b289      	uxth	r1, r1
 801d2d2:	fa0f f881 	sxth.w	r8, r1
 801d2d6:	fb08 f707 	mul.w	r7, r8, r7
 801d2da:	42ba      	cmp	r2, r7
 801d2dc:	dc06      	bgt.n	801d2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801d2de:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801d2e2:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801d2e6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801d2ea:	e7ca      	b.n	801d282 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801d2ec:	4429      	add	r1, r5
 801d2ee:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801d2f2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d2f6:	e651      	b.n	801cf9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d2f8:	9805      	ldr	r0, [sp, #20]
 801d2fa:	2d06      	cmp	r5, #6
 801d2fc:	ebaa 0000 	sub.w	r0, sl, r0
 801d300:	b280      	uxth	r0, r0
 801d302:	fa0f fe80 	sxth.w	lr, r0
 801d306:	d817      	bhi.n	801d338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801d308:	9b04      	ldr	r3, [sp, #16]
 801d30a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801d30e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801d312:	1c6b      	adds	r3, r5, #1
 801d314:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801d318:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801d31c:	9b01      	ldr	r3, [sp, #4]
 801d31e:	9801      	ldr	r0, [sp, #4]
 801d320:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d324:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801d328:	805a      	strh	r2, [r3, #2]
 801d32a:	809e      	strh	r6, [r3, #4]
 801d32c:	80d9      	strh	r1, [r3, #6]
 801d32e:	9b02      	ldr	r3, [sp, #8]
 801d330:	3c08      	subs	r4, #8
 801d332:	3b01      	subs	r3, #1
 801d334:	9302      	str	r3, [sp, #8]
 801d336:	e747      	b.n	801d1c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801d338:	9a02      	ldr	r2, [sp, #8]
 801d33a:	45b6      	cmp	lr, r6
 801d33c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801d340:	db0d      	blt.n	801d35e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801d342:	449c      	add	ip, r3
 801d344:	445a      	add	r2, fp
 801d346:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801d34a:	fa1f fc8c 	uxth.w	ip, ip
 801d34e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801d352:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801d356:	448c      	add	ip, r1
 801d358:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801d35c:	e61e      	b.n	801cf9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d35e:	445a      	add	r2, fp
 801d360:	4484      	add	ip, r0
 801d362:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801d366:	e78f      	b.n	801d288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d368:	fa1f f18e 	uxth.w	r1, lr
 801d36c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801d370:	b293      	uxth	r3, r2
 801d372:	4596      	cmp	lr, r2
 801d374:	eb01 0806 	add.w	r8, r1, r6
 801d378:	9306      	str	r3, [sp, #24]
 801d37a:	fa1f f888 	uxth.w	r8, r8
 801d37e:	9f06      	ldr	r7, [sp, #24]
 801d380:	fa0f f388 	sxth.w	r3, r8
 801d384:	9307      	str	r3, [sp, #28]
 801d386:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801d38a:	443b      	add	r3, r7
 801d38c:	b29b      	uxth	r3, r3
 801d38e:	9308      	str	r3, [sp, #32]
 801d390:	da24      	bge.n	801d3dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801d392:	9905      	ldr	r1, [sp, #20]
 801d394:	eba3 0308 	sub.w	r3, r3, r8
 801d398:	eba2 020e 	sub.w	r2, r2, lr
 801d39c:	eba9 0000 	sub.w	r0, r9, r0
 801d3a0:	ebaa 0401 	sub.w	r4, sl, r1
 801d3a4:	b29b      	uxth	r3, r3
 801d3a6:	b2a4      	uxth	r4, r4
 801d3a8:	b219      	sxth	r1, r3
 801d3aa:	b225      	sxth	r5, r4
 801d3ac:	4348      	muls	r0, r1
 801d3ae:	436a      	muls	r2, r5
 801d3b0:	4282      	cmp	r2, r0
 801d3b2:	9a02      	ldr	r2, [sp, #8]
 801d3b4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801d3b8:	445a      	add	r2, fp
 801d3ba:	dc06      	bgt.n	801d3ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801d3bc:	9b07      	ldr	r3, [sp, #28]
 801d3be:	44a4      	add	ip, r4
 801d3c0:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801d3c4:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801d3c8:	e75e      	b.n	801d288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d3ca:	9904      	ldr	r1, [sp, #16]
 801d3cc:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801d3d0:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801d3d4:	4433      	add	r3, r6
 801d3d6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d3da:	e5df      	b.n	801cf9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d3dc:	9f06      	ldr	r7, [sp, #24]
 801d3de:	9b04      	ldr	r3, [sp, #16]
 801d3e0:	1bc9      	subs	r1, r1, r7
 801d3e2:	fa0f f78a 	sxth.w	r7, sl
 801d3e6:	b289      	uxth	r1, r1
 801d3e8:	429f      	cmp	r7, r3
 801d3ea:	fa0f fe81 	sxth.w	lr, r1
 801d3ee:	dd23      	ble.n	801d438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801d3f0:	9a05      	ldr	r2, [sp, #20]
 801d3f2:	eba9 0000 	sub.w	r0, r9, r0
 801d3f6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d3fa:	ebaa 0202 	sub.w	r2, sl, r2
 801d3fe:	9d07      	ldr	r5, [sp, #28]
 801d400:	fb0e f000 	mul.w	r0, lr, r0
 801d404:	b292      	uxth	r2, r2
 801d406:	eba5 0a03 	sub.w	sl, r5, r3
 801d40a:	9b02      	ldr	r3, [sp, #8]
 801d40c:	b214      	sxth	r4, r2
 801d40e:	00db      	lsls	r3, r3, #3
 801d410:	fb04 fa0a 	mul.w	sl, r4, sl
 801d414:	445b      	add	r3, fp
 801d416:	4550      	cmp	r0, sl
 801d418:	db03      	blt.n	801d422 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801d41a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801d41e:	4494      	add	ip, r2
 801d420:	e732      	b.n	801d288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d422:	9a04      	ldr	r2, [sp, #16]
 801d424:	4431      	add	r1, r6
 801d426:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801d42a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801d42e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801d432:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d436:	e75c      	b.n	801d2f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801d438:	9b08      	ldr	r3, [sp, #32]
 801d43a:	2d06      	cmp	r5, #6
 801d43c:	eba3 0308 	sub.w	r3, r3, r8
 801d440:	b29b      	uxth	r3, r3
 801d442:	b218      	sxth	r0, r3
 801d444:	d813      	bhi.n	801d46e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801d446:	9b07      	ldr	r3, [sp, #28]
 801d448:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801d44c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801d450:	1c6b      	adds	r3, r5, #1
 801d452:	9901      	ldr	r1, [sp, #4]
 801d454:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801d458:	9b01      	ldr	r3, [sp, #4]
 801d45a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801d45e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d462:	805a      	strh	r2, [r3, #2]
 801d464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d466:	f8a3 e006 	strh.w	lr, [r3, #6]
 801d46a:	809a      	strh	r2, [r3, #4]
 801d46c:	e75f      	b.n	801d32e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801d46e:	9c02      	ldr	r4, [sp, #8]
 801d470:	4570      	cmp	r0, lr
 801d472:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801d476:	db0d      	blt.n	801d494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801d478:	4431      	add	r1, r6
 801d47a:	9b06      	ldr	r3, [sp, #24]
 801d47c:	445c      	add	r4, fp
 801d47e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801d482:	b289      	uxth	r1, r1
 801d484:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801d488:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d48c:	4419      	add	r1, r3
 801d48e:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801d492:	e583      	b.n	801cf9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d494:	445c      	add	r4, fp
 801d496:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801d49a:	e79b      	b.n	801d3d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801d49c:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801d4a0:	2e07      	cmp	r6, #7
 801d4a2:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801d4a6:	d812      	bhi.n	801d4ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 801d4a8:	1c75      	adds	r5, r6, #1
 801d4aa:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801d4ae:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801d4b2:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801d4b6:	9d01      	ldr	r5, [sp, #4]
 801d4b8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801d4bc:	442c      	add	r4, r5
 801d4be:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801d4c2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801d4c6:	8061      	strh	r1, [r4, #2]
 801d4c8:	80a2      	strh	r2, [r4, #4]
 801d4ca:	80e3      	strh	r3, [r4, #6]
 801d4cc:	e5d0      	b.n	801d070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d4ce:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801d4d2:	3e01      	subs	r6, #1
 801d4d4:	445c      	add	r4, fp
 801d4d6:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801d4da:	f04f 37ff 	mov.w	r7, #4294967295
 801d4de:	2500      	movs	r5, #0
 801d4e0:	9305      	str	r3, [sp, #20]
 801d4e2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801d4e6:	1e72      	subs	r2, r6, #1
 801d4e8:	9302      	str	r3, [sp, #8]
 801d4ea:	4691      	mov	r9, r2
 801d4ec:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801d4f0:	9304      	str	r3, [sp, #16]
 801d4f2:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801d4f6:	f1b9 3fff 	cmp.w	r9, #4294967295
 801d4fa:	6818      	ldr	r0, [r3, #0]
 801d4fc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801d500:	9207      	str	r2, [sp, #28]
 801d502:	bf16      	itet	ne
 801d504:	9905      	ldrne	r1, [sp, #20]
 801d506:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801d50a:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801d50e:	9306      	str	r3, [sp, #24]
 801d510:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801d514:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801d518:	fb18 f801 	smulbb	r8, r8, r1
 801d51c:	6859      	ldr	r1, [r3, #4]
 801d51e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d522:	4671      	mov	r1, lr
 801d524:	a80c      	add	r0, sp, #48	; 0x30
 801d526:	f7ff fbb9 	bl	801cc9c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d52a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801d52e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801d532:	f04f 0c08 	mov.w	ip, #8
 801d536:	9b04      	ldr	r3, [sp, #16]
 801d538:	9a02      	ldr	r2, [sp, #8]
 801d53a:	fb10 f001 	smulbb	r0, r0, r1
 801d53e:	fb02 8803 	mla	r8, r2, r3, r8
 801d542:	eba0 0108 	sub.w	r1, r0, r8
 801d546:	fb90 f0fc 	sdiv	r0, r0, ip
 801d54a:	4288      	cmp	r0, r1
 801d54c:	dc20      	bgt.n	801d590 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801d54e:	4551      	cmp	r1, sl
 801d550:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801d554:	da03      	bge.n	801d55e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801d556:	b1d9      	cbz	r1, 801d590 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801d558:	468a      	mov	sl, r1
 801d55a:	464f      	mov	r7, r9
 801d55c:	4635      	mov	r5, r6
 801d55e:	f109 39ff 	add.w	r9, r9, #4294967295
 801d562:	f119 0f02 	cmn.w	r9, #2
 801d566:	d1c6      	bne.n	801d4f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801d568:	4616      	mov	r6, r2
 801d56a:	3201      	adds	r2, #1
 801d56c:	f1a4 0408 	sub.w	r4, r4, #8
 801d570:	d1b7      	bne.n	801d4e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801d572:	9b01      	ldr	r3, [sp, #4]
 801d574:	b2ac      	uxth	r4, r5
 801d576:	00ed      	lsls	r5, r5, #3
 801d578:	1958      	adds	r0, r3, r5
 801d57a:	1c7b      	adds	r3, r7, #1
 801d57c:	d10b      	bne.n	801d596 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801d57e:	4601      	mov	r1, r0
 801d580:	9803      	ldr	r0, [sp, #12]
 801d582:	f7ff fb8b 	bl	801cc9c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d586:	4621      	mov	r1, r4
 801d588:	9801      	ldr	r0, [sp, #4]
 801d58a:	f7ff fcdd 	bl	801cf48 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d58e:	e505      	b.n	801cf9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d590:	464f      	mov	r7, r9
 801d592:	4635      	mov	r5, r6
 801d594:	e7ed      	b.n	801d572 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801d596:	9b01      	ldr	r3, [sp, #4]
 801d598:	00ff      	lsls	r7, r7, #3
 801d59a:	445d      	add	r5, fp
 801d59c:	19d9      	adds	r1, r3, r7
 801d59e:	445f      	add	r7, fp
 801d5a0:	f7ff fb7c 	bl	801cc9c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d5a4:	9b03      	ldr	r3, [sp, #12]
 801d5a6:	cb03      	ldmia	r3!, {r0, r1}
 801d5a8:	9b03      	ldr	r3, [sp, #12]
 801d5aa:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801d5ae:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801d5b2:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801d5b6:	6869      	ldr	r1, [r5, #4]
 801d5b8:	c303      	stmia	r3!, {r0, r1}
 801d5ba:	e7e4      	b.n	801d586 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0801d5bc <_ZN8touchgfx11Application10invalidateEv>:
 801d5bc:	4b09      	ldr	r3, [pc, #36]	; (801d5e4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801d5be:	b082      	sub	sp, #8
 801d5c0:	2100      	movs	r1, #0
 801d5c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d5c6:	4b08      	ldr	r3, [pc, #32]	; (801d5e8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801d5c8:	9100      	str	r1, [sp, #0]
 801d5ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d5ce:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d5d2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d5d6:	ab02      	add	r3, sp, #8
 801d5d8:	e913 0006 	ldmdb	r3, {r1, r2}
 801d5dc:	b002      	add	sp, #8
 801d5de:	f7ff bcc7 	b.w	801cf70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d5e2:	bf00      	nop
 801d5e4:	24026258 	.word	0x24026258
 801d5e8:	2402625a 	.word	0x2402625a

0801d5ec <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5f0:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801d5f4:	b09b      	sub	sp, #108	; 0x6c
 801d5f6:	4604      	mov	r4, r0
 801d5f8:	4630      	mov	r0, r6
 801d5fa:	f7fb ff60 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801d5fe:	4605      	mov	r5, r0
 801d600:	b940      	cbnz	r0, 801d614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801d602:	4620      	mov	r0, r4
 801d604:	e896 0006 	ldmia.w	r6, {r1, r2}
 801d608:	f7ff fcb2 	bl	801cf70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d60c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801d610:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801d614:	4bc8      	ldr	r3, [pc, #800]	; (801d938 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d03e      	beq.n	801d69a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801d61c:	4dc7      	ldr	r5, [pc, #796]	; (801d93c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801d61e:	4628      	mov	r0, r5
 801d620:	f7fb ff4d 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801d624:	4606      	mov	r6, r0
 801d626:	2800      	cmp	r0, #0
 801d628:	d137      	bne.n	801d69a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801d62a:	4628      	mov	r0, r5
 801d62c:	f7ff f9d0 	bl	801c9d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d630:	6829      	ldr	r1, [r5, #0]
 801d632:	686a      	ldr	r2, [r5, #4]
 801d634:	4620      	mov	r0, r4
 801d636:	f7ff fc9b 	bl	801cf70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d63a:	802e      	strh	r6, [r5, #0]
 801d63c:	806e      	strh	r6, [r5, #2]
 801d63e:	80ae      	strh	r6, [r5, #4]
 801d640:	80ee      	strh	r6, [r5, #6]
 801d642:	ae09      	add	r6, sp, #36	; 0x24
 801d644:	4630      	mov	r0, r6
 801d646:	f7ff fc23 	bl	801ce90 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d64a:	4abd      	ldr	r2, [pc, #756]	; (801d940 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801d64c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801d650:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801d654:	8815      	ldrh	r5, [r2, #0]
 801d656:	9202      	str	r2, [sp, #8]
 801d658:	462b      	mov	r3, r5
 801d65a:	429f      	cmp	r7, r3
 801d65c:	d924      	bls.n	801d6a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801d65e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801d662:	2907      	cmp	r1, #7
 801d664:	d816      	bhi.n	801d694 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801d666:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801d66a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801d66e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801d672:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801d676:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801d67a:	1c4a      	adds	r2, r1, #1
 801d67c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801d680:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801d684:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801d688:	f8a2 9002 	strh.w	r9, [r2, #2]
 801d68c:	f8a2 e004 	strh.w	lr, [r2, #4]
 801d690:	f8a2 c006 	strh.w	ip, [r2, #6]
 801d694:	3301      	adds	r3, #1
 801d696:	b29b      	uxth	r3, r3
 801d698:	e7df      	b.n	801d65a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801d69a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d1cf      	bne.n	801d642 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801d6a2:	b01b      	add	sp, #108	; 0x6c
 801d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6a8:	462f      	mov	r7, r5
 801d6aa:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801d6ae:	42bb      	cmp	r3, r7
 801d6b0:	d90b      	bls.n	801d6ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801d6b2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801d6b6:	3701      	adds	r7, #1
 801d6b8:	4620      	mov	r0, r4
 801d6ba:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801d6be:	b2bf      	uxth	r7, r7
 801d6c0:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801d6c4:	f7ff fc54 	bl	801cf70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d6c8:	e7ef      	b.n	801d6aa <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801d6ca:	4a9e      	ldr	r2, [pc, #632]	; (801d944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801d6cc:	6813      	ldr	r3, [r2, #0]
 801d6ce:	4690      	mov	r8, r2
 801d6d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801d6d4:	2b01      	cmp	r3, #1
 801d6d6:	f040 80e4 	bne.w	801d8a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801d6da:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801d6de:	4629      	mov	r1, r5
 801d6e0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801d6e4:	2500      	movs	r5, #0
 801d6e6:	33ae      	adds	r3, #174	; 0xae
 801d6e8:	428f      	cmp	r7, r1
 801d6ea:	f103 0308 	add.w	r3, r3, #8
 801d6ee:	dd0a      	ble.n	801d706 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801d6f0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801d6f4:	3101      	adds	r1, #1
 801d6f6:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801d6fa:	4402      	add	r2, r0
 801d6fc:	b212      	sxth	r2, r2
 801d6fe:	4295      	cmp	r5, r2
 801d700:	bfb8      	it	lt
 801d702:	4615      	movlt	r5, r2
 801d704:	e7f0      	b.n	801d6e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801d706:	4b90      	ldr	r3, [pc, #576]	; (801d948 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801d708:	f8df b238 	ldr.w	fp, [pc, #568]	; 801d944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801d70c:	881b      	ldrh	r3, [r3, #0]
 801d70e:	46d8      	mov	r8, fp
 801d710:	2b0f      	cmp	r3, #15
 801d712:	bf8c      	ite	hi
 801d714:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801d718:	f04f 0a01 	movls.w	sl, #1
 801d71c:	2300      	movs	r3, #0
 801d71e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801d722:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801d726:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801d72a:	4438      	add	r0, r7
 801d72c:	b207      	sxth	r7, r0
 801d72e:	f8db 0000 	ldr.w	r0, [fp]
 801d732:	42bd      	cmp	r5, r7
 801d734:	6803      	ldr	r3, [r0, #0]
 801d736:	f340 8084 	ble.w	801d842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801d73a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d73e:	4798      	blx	r3
 801d740:	eb07 030a 	add.w	r3, r7, sl
 801d744:	4298      	cmp	r0, r3
 801d746:	da07      	bge.n	801d758 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801d748:	4285      	cmp	r5, r0
 801d74a:	dd05      	ble.n	801d758 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801d74c:	4287      	cmp	r7, r0
 801d74e:	dd6d      	ble.n	801d82c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801d750:	2f00      	cmp	r7, #0
 801d752:	dd6b      	ble.n	801d82c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801d754:	4628      	mov	r0, r5
 801d756:	e004      	b.n	801d762 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801d758:	4287      	cmp	r7, r0
 801d75a:	dcfb      	bgt.n	801d754 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801d75c:	42a8      	cmp	r0, r5
 801d75e:	bfa8      	it	ge
 801d760:	4628      	movge	r0, r5
 801d762:	4b7a      	ldr	r3, [pc, #488]	; (801d94c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801d764:	1bc0      	subs	r0, r0, r7
 801d766:	2200      	movs	r2, #0
 801d768:	f8ad 7016 	strh.w	r7, [sp, #22]
 801d76c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d770:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d774:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d778:	9b02      	ldr	r3, [sp, #8]
 801d77a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d77e:	881f      	ldrh	r7, [r3, #0]
 801d780:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801d784:	42bb      	cmp	r3, r7
 801d786:	d9cc      	bls.n	801d722 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801d788:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801d78c:	ab07      	add	r3, sp, #28
 801d78e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801d792:	6851      	ldr	r1, [r2, #4]
 801d794:	c303      	stmia	r3!, {r0, r1}
 801d796:	a905      	add	r1, sp, #20
 801d798:	a807      	add	r0, sp, #28
 801d79a:	f7ff f9e7 	bl	801cb6c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d79e:	2800      	cmp	r0, #0
 801d7a0:	d04c      	beq.n	801d83c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801d7a2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801d7a6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801d7aa:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801d7ae:	4686      	mov	lr, r0
 801d7b0:	4290      	cmp	r0, r2
 801d7b2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801d7b6:	4448      	add	r0, r9
 801d7b8:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801d7bc:	bfb8      	it	lt
 801d7be:	4696      	movlt	lr, r2
 801d7c0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d7c4:	444a      	add	r2, r9
 801d7c6:	b280      	uxth	r0, r0
 801d7c8:	4299      	cmp	r1, r3
 801d7ca:	468c      	mov	ip, r1
 801d7cc:	b292      	uxth	r2, r2
 801d7ce:	9303      	str	r3, [sp, #12]
 801d7d0:	bfb8      	it	lt
 801d7d2:	469c      	movlt	ip, r3
 801d7d4:	b203      	sxth	r3, r0
 801d7d6:	fa0f f982 	sxth.w	r9, r2
 801d7da:	f8ad e01c 	strh.w	lr, [sp, #28]
 801d7de:	f8ad c01e 	strh.w	ip, [sp, #30]
 801d7e2:	454b      	cmp	r3, r9
 801d7e4:	bfb8      	it	lt
 801d7e6:	4602      	movlt	r2, r0
 801d7e8:	9b03      	ldr	r3, [sp, #12]
 801d7ea:	eba2 020e 	sub.w	r2, r2, lr
 801d7ee:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d7f2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d7f6:	4411      	add	r1, r2
 801d7f8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d7fc:	4413      	add	r3, r2
 801d7fe:	b289      	uxth	r1, r1
 801d800:	b29b      	uxth	r3, r3
 801d802:	b208      	sxth	r0, r1
 801d804:	b21a      	sxth	r2, r3
 801d806:	4290      	cmp	r0, r2
 801d808:	bfb8      	it	lt
 801d80a:	460b      	movlt	r3, r1
 801d80c:	eba3 030c 	sub.w	r3, r3, ip
 801d810:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d814:	a807      	add	r0, sp, #28
 801d816:	f7fb fe52 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801d81a:	b920      	cbnz	r0, 801d826 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801d81c:	6823      	ldr	r3, [r4, #0]
 801d81e:	a907      	add	r1, sp, #28
 801d820:	4620      	mov	r0, r4
 801d822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d824:	4798      	blx	r3
 801d826:	3701      	adds	r7, #1
 801d828:	b2bf      	uxth	r7, r7
 801d82a:	e7a9      	b.n	801d780 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801d82c:	f8d8 0000 	ldr.w	r0, [r8]
 801d830:	2101      	movs	r1, #1
 801d832:	6803      	ldr	r3, [r0, #0]
 801d834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d838:	4798      	blx	r3
 801d83a:	e772      	b.n	801d722 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801d83c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801d840:	e7e8      	b.n	801d814 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801d842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d844:	4798      	blx	r3
 801d846:	4b42      	ldr	r3, [pc, #264]	; (801d950 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801d848:	781b      	ldrb	r3, [r3, #0]
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	f43f af29 	beq.w	801d6a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801d850:	2300      	movs	r3, #0
 801d852:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801d856:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801d85a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801d85e:	9b02      	ldr	r3, [sp, #8]
 801d860:	881b      	ldrh	r3, [r3, #0]
 801d862:	429d      	cmp	r5, r3
 801d864:	f67f af1d 	bls.w	801d6a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801d868:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801d86c:	2907      	cmp	r1, #7
 801d86e:	d815      	bhi.n	801d89c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801d870:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801d874:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801d878:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801d87c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801d880:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801d884:	1c4a      	adds	r2, r1, #1
 801d886:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801d88a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801d88e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801d892:	f8a2 e002 	strh.w	lr, [r2, #2]
 801d896:	f8a2 c004 	strh.w	ip, [r2, #4]
 801d89a:	80d7      	strh	r7, [r2, #6]
 801d89c:	3301      	adds	r3, #1
 801d89e:	b29b      	uxth	r3, r3
 801d8a0:	e7df      	b.n	801d862 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801d8a2:	2b02      	cmp	r3, #2
 801d8a4:	f040 8135 	bne.w	801db12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801d8a8:	4b2a      	ldr	r3, [pc, #168]	; (801d954 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801d8aa:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801d8ae:	781b      	ldrb	r3, [r3, #0]
 801d8b0:	2b01      	cmp	r3, #1
 801d8b2:	f000 809c 	beq.w	801d9ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801d8b6:	9b02      	ldr	r3, [sp, #8]
 801d8b8:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801d8bc:	f8b3 b000 	ldrh.w	fp, [r3]
 801d8c0:	f10b 0b01 	add.w	fp, fp, #1
 801d8c4:	fa1f fb8b 	uxth.w	fp, fp
 801d8c8:	2a00      	cmp	r2, #0
 801d8ca:	d0bc      	beq.n	801d846 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d8cc:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801d8d0:	4659      	mov	r1, fp
 801d8d2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801d8d6:	f04f 0800 	mov.w	r8, #0
 801d8da:	441d      	add	r5, r3
 801d8dc:	b22d      	sxth	r5, r5
 801d8de:	b28b      	uxth	r3, r1
 801d8e0:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801d8e4:	429a      	cmp	r2, r3
 801d8e6:	f240 80c0 	bls.w	801da6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801d8ea:	4427      	add	r7, r4
 801d8ec:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801d8f0:	4608      	mov	r0, r1
 801d8f2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801d8f6:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 801d8fa:	4563      	cmp	r3, ip
 801d8fc:	f340 80a2 	ble.w	801da44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801d900:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 801d904:	4465      	add	r5, ip
 801d906:	b22d      	sxth	r5, r5
 801d908:	429d      	cmp	r5, r3
 801d90a:	bfa8      	it	ge
 801d90c:	461d      	movge	r5, r3
 801d90e:	3101      	adds	r1, #1
 801d910:	4680      	mov	r8, r0
 801d912:	e7e4      	b.n	801d8de <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801d914:	d10b      	bne.n	801d92e <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801d916:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801d91a:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801d91e:	458c      	cmp	ip, r1
 801d920:	bfb4      	ite	lt
 801d922:	469c      	movlt	ip, r3
 801d924:	46bc      	movge	ip, r7
 801d926:	4572      	cmp	r2, lr
 801d928:	bfb8      	it	lt
 801d92a:	4672      	movlt	r2, lr
 801d92c:	e087      	b.n	801da3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801d92e:	428a      	cmp	r2, r1
 801d930:	46bc      	mov	ip, r7
 801d932:	bfb8      	it	lt
 801d934:	460a      	movlt	r2, r1
 801d936:	e082      	b.n	801da3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801d938:	2402629c 	.word	0x2402629c
 801d93c:	240262a8 	.word	0x240262a8
 801d940:	24000068 	.word	0x24000068
 801d944:	24026264 	.word	0x24026264
 801d948:	2402625a 	.word	0x2402625a
 801d94c:	24026258 	.word	0x24026258
 801d950:	24026262 	.word	0x24026262
 801d954:	2402625c 	.word	0x2402625c
 801d958:	1961      	adds	r1, r4, r5
 801d95a:	ab07      	add	r3, sp, #28
 801d95c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801d960:	6849      	ldr	r1, [r1, #4]
 801d962:	c303      	stmia	r3!, {r0, r1}
 801d964:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d968:	a807      	add	r0, sp, #28
 801d96a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d96e:	2b13      	cmp	r3, #19
 801d970:	440b      	add	r3, r1
 801d972:	bfd8      	it	le
 801d974:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801d978:	1a9b      	subs	r3, r3, r2
 801d97a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d97e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d982:	f7ff f83f 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d986:	a807      	add	r0, sp, #28
 801d988:	f7fb fd99 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801d98c:	bb78      	cbnz	r0, 801d9ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801d98e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801d992:	4425      	add	r5, r4
 801d994:	f8d8 0000 	ldr.w	r0, [r8]
 801d998:	f1bc 0f14 	cmp.w	ip, #20
 801d99c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d9a0:	f8d0 e000 	ldr.w	lr, [r0]
 801d9a4:	bfa8      	it	ge
 801d9a6:	f04f 0c14 	movge.w	ip, #20
 801d9aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801d9ae:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d9b2:	fa1f fc8c 	uxth.w	ip, ip
 801d9b6:	f8cd c000 	str.w	ip, [sp]
 801d9ba:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801d9be:	47d0      	blx	sl
 801d9c0:	4682      	mov	sl, r0
 801d9c2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d9c6:	a807      	add	r0, sp, #28
 801d9c8:	f7ff f802 	bl	801c9d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d9cc:	6823      	ldr	r3, [r4, #0]
 801d9ce:	4620      	mov	r0, r4
 801d9d0:	a907      	add	r1, sp, #28
 801d9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9d4:	4798      	blx	r3
 801d9d6:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801d9da:	eba0 000a 	sub.w	r0, r0, sl
 801d9de:	b200      	sxth	r0, r0
 801d9e0:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801d9e4:	b918      	cbnz	r0, 801d9ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801d9e6:	b2b9      	uxth	r1, r7
 801d9e8:	4648      	mov	r0, r9
 801d9ea:	f7ff faad 	bl	801cf48 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d9ee:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801d9f2:	f1bb 0f00 	cmp.w	fp, #0
 801d9f6:	f43f af26 	beq.w	801d846 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d9fa:	9b02      	ldr	r3, [sp, #8]
 801d9fc:	2700      	movs	r7, #0
 801d9fe:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801da02:	881b      	ldrh	r3, [r3, #0]
 801da04:	3301      	adds	r3, #1
 801da06:	b29b      	uxth	r3, r3
 801da08:	b299      	uxth	r1, r3
 801da0a:	00fd      	lsls	r5, r7, #3
 801da0c:	458b      	cmp	fp, r1
 801da0e:	d9a3      	bls.n	801d958 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801da10:	4425      	add	r5, r4
 801da12:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801da16:	469c      	mov	ip, r3
 801da18:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801da1c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801da20:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801da24:	4408      	add	r0, r1
 801da26:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801da2a:	4471      	add	r1, lr
 801da2c:	b200      	sxth	r0, r0
 801da2e:	b209      	sxth	r1, r1
 801da30:	4288      	cmp	r0, r1
 801da32:	f6bf af6f 	bge.w	801d914 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801da36:	4586      	cmp	lr, r0
 801da38:	4672      	mov	r2, lr
 801da3a:	bfb8      	it	lt
 801da3c:	4602      	movlt	r2, r0
 801da3e:	3301      	adds	r3, #1
 801da40:	4667      	mov	r7, ip
 801da42:	e7e1      	b.n	801da08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801da44:	d10c      	bne.n	801da60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801da46:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801da4a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801da4e:	4287      	cmp	r7, r0
 801da50:	bfb4      	ite	lt
 801da52:	4608      	movlt	r0, r1
 801da54:	4640      	movge	r0, r8
 801da56:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801da5a:	443b      	add	r3, r7
 801da5c:	b21b      	sxth	r3, r3
 801da5e:	e753      	b.n	801d908 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801da60:	4565      	cmp	r5, ip
 801da62:	4640      	mov	r0, r8
 801da64:	bfa8      	it	ge
 801da66:	4665      	movge	r5, ip
 801da68:	e751      	b.n	801d90e <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801da6a:	eb09 0007 	add.w	r0, r9, r7
 801da6e:	4427      	add	r7, r4
 801da70:	9203      	str	r2, [sp, #12]
 801da72:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801da76:	f1ba 0f13 	cmp.w	sl, #19
 801da7a:	bfde      	ittt	le
 801da7c:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801da80:	4455      	addle	r5, sl
 801da82:	b22d      	sxthle	r5, r5
 801da84:	f7fb fd1b 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801da88:	9a03      	ldr	r2, [sp, #12]
 801da8a:	2800      	cmp	r0, #0
 801da8c:	f47f af1c 	bne.w	801d8c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801da90:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801da94:	fa1f fa8a 	uxth.w	sl, sl
 801da98:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801da9c:	1aad      	subs	r5, r5, r2
 801da9e:	4829      	ldr	r0, [pc, #164]	; (801db44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801daa0:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801daa4:	2d14      	cmp	r5, #20
 801daa6:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801daaa:	6800      	ldr	r0, [r0, #0]
 801daac:	bfa8      	it	ge
 801daae:	2514      	movge	r5, #20
 801dab0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801dab4:	f8ad 201e 	strh.w	r2, [sp, #30]
 801dab8:	b289      	uxth	r1, r1
 801daba:	f8ad 3020 	strh.w	r3, [sp, #32]
 801dabe:	b2ad      	uxth	r5, r5
 801dac0:	f8d0 c000 	ldr.w	ip, [r0]
 801dac4:	b292      	uxth	r2, r2
 801dac6:	4555      	cmp	r5, sl
 801dac8:	bf94      	ite	ls
 801daca:	9500      	strls	r5, [sp, #0]
 801dacc:	f8cd a000 	strhi.w	sl, [sp]
 801dad0:	b29b      	uxth	r3, r3
 801dad2:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801dad6:	47a8      	blx	r5
 801dad8:	6823      	ldr	r3, [r4, #0]
 801dada:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801dade:	a907      	add	r1, sp, #28
 801dae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dae2:	4620      	mov	r0, r4
 801dae4:	4798      	blx	r3
 801dae6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801daea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801daee:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801daf2:	1a5b      	subs	r3, r3, r1
 801daf4:	440a      	add	r2, r1
 801daf6:	b21b      	sxth	r3, r3
 801daf8:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801dafc:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801db00:	2b00      	cmp	r3, #0
 801db02:	f47f aed8 	bne.w	801d8b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801db06:	fa1f f188 	uxth.w	r1, r8
 801db0a:	4648      	mov	r0, r9
 801db0c:	f7ff fa1c 	bl	801cf48 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801db10:	e6d1      	b.n	801d8b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801db12:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801db16:	42ab      	cmp	r3, r5
 801db18:	f67f ae95 	bls.w	801d846 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801db1c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801db20:	ab07      	add	r3, sp, #28
 801db22:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801db26:	6851      	ldr	r1, [r2, #4]
 801db28:	c303      	stmia	r3!, {r0, r1}
 801db2a:	a807      	add	r0, sp, #28
 801db2c:	f7fb fcc7 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801db30:	b920      	cbnz	r0, 801db3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801db32:	6823      	ldr	r3, [r4, #0]
 801db34:	a907      	add	r1, sp, #28
 801db36:	4620      	mov	r0, r4
 801db38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db3a:	4798      	blx	r3
 801db3c:	3501      	adds	r5, #1
 801db3e:	b2ad      	uxth	r5, r5
 801db40:	e7e7      	b.n	801db12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801db42:	bf00      	nop
 801db44:	24026264 	.word	0x24026264

0801db48 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801db48:	4b03      	ldr	r3, [pc, #12]	; (801db58 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801db4a:	2200      	movs	r2, #0
 801db4c:	801a      	strh	r2, [r3, #0]
 801db4e:	805a      	strh	r2, [r3, #2]
 801db50:	809a      	strh	r2, [r3, #4]
 801db52:	80da      	strh	r2, [r3, #6]
 801db54:	4770      	bx	lr
 801db56:	bf00      	nop
 801db58:	240262a8 	.word	0x240262a8

0801db5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801db5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db60:	b09d      	sub	sp, #116	; 0x74
 801db62:	4606      	mov	r6, r0
 801db64:	4614      	mov	r4, r2
 801db66:	468a      	mov	sl, r1
 801db68:	a803      	add	r0, sp, #12
 801db6a:	461d      	mov	r5, r3
 801db6c:	f000 fd94 	bl	801e698 <_ZN8touchgfx12TextProviderC1Ev>
 801db70:	6833      	ldr	r3, [r6, #0]
 801db72:	4630      	mov	r0, r6
 801db74:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801db78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801db7a:	4798      	blx	r3
 801db7c:	6833      	ldr	r3, [r6, #0]
 801db7e:	4607      	mov	r7, r0
 801db80:	4630      	mov	r0, r6
 801db82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801db84:	4798      	blx	r3
 801db86:	462a      	mov	r2, r5
 801db88:	2500      	movs	r5, #0
 801db8a:	4621      	mov	r1, r4
 801db8c:	9000      	str	r0, [sp, #0]
 801db8e:	463b      	mov	r3, r7
 801db90:	462c      	mov	r4, r5
 801db92:	46a9      	mov	r9, r5
 801db94:	46a8      	mov	r8, r5
 801db96:	a803      	add	r0, sp, #12
 801db98:	f000 fdd9 	bl	801e74e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801db9c:	2300      	movs	r3, #0
 801db9e:	9302      	str	r3, [sp, #8]
 801dba0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801dba4:	429c      	cmp	r4, r3
 801dba6:	d002      	beq.n	801dbae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801dba8:	455c      	cmp	r4, fp
 801dbaa:	bf18      	it	ne
 801dbac:	4625      	movne	r5, r4
 801dbae:	ab02      	add	r3, sp, #8
 801dbb0:	4632      	mov	r2, r6
 801dbb2:	4651      	mov	r1, sl
 801dbb4:	a803      	add	r0, sp, #12
 801dbb6:	f001 f8cf 	bl	801ed58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801dbba:	4604      	mov	r4, r0
 801dbbc:	b108      	cbz	r0, 801dbc2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801dbbe:	280a      	cmp	r0, #10
 801dbc0:	d10a      	bne.n	801dbd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801dbc2:	45c1      	cmp	r9, r8
 801dbc4:	bf38      	it	cc
 801dbc6:	46c1      	movcc	r9, r8
 801dbc8:	f04f 0800 	mov.w	r8, #0
 801dbcc:	2c00      	cmp	r4, #0
 801dbce:	d1e5      	bne.n	801db9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801dbd0:	4648      	mov	r0, r9
 801dbd2:	b01d      	add	sp, #116	; 0x74
 801dbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbd8:	9a02      	ldr	r2, [sp, #8]
 801dbda:	2a00      	cmp	r2, #0
 801dbdc:	d0de      	beq.n	801db9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801dbde:	7b57      	ldrb	r7, [r2, #13]
 801dbe0:	4629      	mov	r1, r5
 801dbe2:	6833      	ldr	r3, [r6, #0]
 801dbe4:	007f      	lsls	r7, r7, #1
 801dbe6:	8894      	ldrh	r4, [r2, #4]
 801dbe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dbea:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801dbee:	7a97      	ldrb	r7, [r2, #10]
 801dbf0:	4307      	orrs	r7, r0
 801dbf2:	4630      	mov	r0, r6
 801dbf4:	4798      	blx	r3
 801dbf6:	4438      	add	r0, r7
 801dbf8:	4480      	add	r8, r0
 801dbfa:	fa1f f888 	uxth.w	r8, r8
 801dbfe:	e7e5      	b.n	801dbcc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801dc00 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801dc00:	b508      	push	{r3, lr}
 801dc02:	6803      	ldr	r3, [r0, #0]
 801dc04:	68db      	ldr	r3, [r3, #12]
 801dc06:	4798      	blx	r3
 801dc08:	b128      	cbz	r0, 801dc16 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801dc0a:	7b43      	ldrb	r3, [r0, #13]
 801dc0c:	7a80      	ldrb	r0, [r0, #10]
 801dc0e:	005b      	lsls	r3, r3, #1
 801dc10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dc14:	4318      	orrs	r0, r3
 801dc16:	bd08      	pop	{r3, pc}

0801dc18 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801dc18:	b40e      	push	{r1, r2, r3}
 801dc1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc1c:	b09e      	sub	sp, #120	; 0x78
 801dc1e:	4605      	mov	r5, r0
 801dc20:	ab23      	add	r3, sp, #140	; 0x8c
 801dc22:	a805      	add	r0, sp, #20
 801dc24:	f853 4b04 	ldr.w	r4, [r3], #4
 801dc28:	9303      	str	r3, [sp, #12]
 801dc2a:	f000 fd35 	bl	801e698 <_ZN8touchgfx12TextProviderC1Ev>
 801dc2e:	682b      	ldr	r3, [r5, #0]
 801dc30:	4628      	mov	r0, r5
 801dc32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dc34:	4798      	blx	r3
 801dc36:	682b      	ldr	r3, [r5, #0]
 801dc38:	4606      	mov	r6, r0
 801dc3a:	4628      	mov	r0, r5
 801dc3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc3e:	4798      	blx	r3
 801dc40:	4633      	mov	r3, r6
 801dc42:	4621      	mov	r1, r4
 801dc44:	ae1e      	add	r6, sp, #120	; 0x78
 801dc46:	2400      	movs	r4, #0
 801dc48:	9000      	str	r0, [sp, #0]
 801dc4a:	9a03      	ldr	r2, [sp, #12]
 801dc4c:	a805      	add	r0, sp, #20
 801dc4e:	f000 fd7e 	bl	801e74e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801dc52:	f846 4d68 	str.w	r4, [r6, #-104]!
 801dc56:	462a      	mov	r2, r5
 801dc58:	4633      	mov	r3, r6
 801dc5a:	4621      	mov	r1, r4
 801dc5c:	a805      	add	r0, sp, #20
 801dc5e:	f001 f87b 	bl	801ed58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801dc62:	b300      	cbz	r0, 801dca6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801dc64:	280a      	cmp	r0, #10
 801dc66:	d01a      	beq.n	801dc9e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801dc68:	9f04      	ldr	r7, [sp, #16]
 801dc6a:	b1c7      	cbz	r7, 801dc9e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801dc6c:	7b78      	ldrb	r0, [r7, #13]
 801dc6e:	7a3b      	ldrb	r3, [r7, #8]
 801dc70:	00c1      	lsls	r1, r0, #3
 801dc72:	88ea      	ldrh	r2, [r5, #6]
 801dc74:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dc78:	4319      	orrs	r1, r3
 801dc7a:	0643      	lsls	r3, r0, #25
 801dc7c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801dc80:	bf48      	it	mi
 801dc82:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801dc86:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801dc8a:	bf48      	it	mi
 801dc8c:	b219      	sxthmi	r1, r3
 801dc8e:	79fb      	ldrb	r3, [r7, #7]
 801dc90:	4303      	orrs	r3, r0
 801dc92:	4413      	add	r3, r2
 801dc94:	1a5b      	subs	r3, r3, r1
 801dc96:	b21b      	sxth	r3, r3
 801dc98:	429c      	cmp	r4, r3
 801dc9a:	bfb8      	it	lt
 801dc9c:	461c      	movlt	r4, r3
 801dc9e:	4633      	mov	r3, r6
 801dca0:	462a      	mov	r2, r5
 801dca2:	2100      	movs	r1, #0
 801dca4:	e7da      	b.n	801dc5c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801dca6:	b2a0      	uxth	r0, r4
 801dca8:	b01e      	add	sp, #120	; 0x78
 801dcaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dcae:	b003      	add	sp, #12
 801dcb0:	4770      	bx	lr

0801dcb2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801dcb2:	7a43      	ldrb	r3, [r0, #9]
 801dcb4:	8880      	ldrh	r0, [r0, #4]
 801dcb6:	4418      	add	r0, r3
 801dcb8:	b280      	uxth	r0, r0
 801dcba:	4770      	bx	lr

0801dcbc <_ZNK8touchgfx4Font13getFontHeightEv>:
 801dcbc:	6803      	ldr	r3, [r0, #0]
 801dcbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcc0:	4718      	bx	r3

0801dcc2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801dcc2:	b40e      	push	{r1, r2, r3}
 801dcc4:	b570      	push	{r4, r5, r6, lr}
 801dcc6:	b09d      	sub	sp, #116	; 0x74
 801dcc8:	4604      	mov	r4, r0
 801dcca:	ab21      	add	r3, sp, #132	; 0x84
 801dccc:	a803      	add	r0, sp, #12
 801dcce:	f853 5b04 	ldr.w	r5, [r3], #4
 801dcd2:	9302      	str	r3, [sp, #8]
 801dcd4:	f000 fce0 	bl	801e698 <_ZN8touchgfx12TextProviderC1Ev>
 801dcd8:	6823      	ldr	r3, [r4, #0]
 801dcda:	4620      	mov	r0, r4
 801dcdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dcde:	4798      	blx	r3
 801dce0:	6823      	ldr	r3, [r4, #0]
 801dce2:	4606      	mov	r6, r0
 801dce4:	4620      	mov	r0, r4
 801dce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dce8:	2401      	movs	r4, #1
 801dcea:	4798      	blx	r3
 801dcec:	4633      	mov	r3, r6
 801dcee:	9000      	str	r0, [sp, #0]
 801dcf0:	4629      	mov	r1, r5
 801dcf2:	9a02      	ldr	r2, [sp, #8]
 801dcf4:	a803      	add	r0, sp, #12
 801dcf6:	f000 fd2a 	bl	801e74e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801dcfa:	a803      	add	r0, sp, #12
 801dcfc:	f001 f8f8 	bl	801eef0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801dd00:	b2a3      	uxth	r3, r4
 801dd02:	b138      	cbz	r0, 801dd14 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801dd04:	280a      	cmp	r0, #10
 801dd06:	a803      	add	r0, sp, #12
 801dd08:	bf04      	itt	eq
 801dd0a:	3301      	addeq	r3, #1
 801dd0c:	b21c      	sxtheq	r4, r3
 801dd0e:	f001 f8ef 	bl	801eef0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801dd12:	e7f5      	b.n	801dd00 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801dd14:	4618      	mov	r0, r3
 801dd16:	b01d      	add	sp, #116	; 0x74
 801dd18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dd1c:	b003      	add	sp, #12
 801dd1e:	4770      	bx	lr

0801dd20 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801dd20:	b40e      	push	{r1, r2, r3}
 801dd22:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd24:	b09e      	sub	sp, #120	; 0x78
 801dd26:	4604      	mov	r4, r0
 801dd28:	ab23      	add	r3, sp, #140	; 0x8c
 801dd2a:	a805      	add	r0, sp, #20
 801dd2c:	f853 5b04 	ldr.w	r5, [r3], #4
 801dd30:	9303      	str	r3, [sp, #12]
 801dd32:	f000 fcb1 	bl	801e698 <_ZN8touchgfx12TextProviderC1Ev>
 801dd36:	6823      	ldr	r3, [r4, #0]
 801dd38:	4620      	mov	r0, r4
 801dd3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dd3c:	4798      	blx	r3
 801dd3e:	6823      	ldr	r3, [r4, #0]
 801dd40:	4606      	mov	r6, r0
 801dd42:	4620      	mov	r0, r4
 801dd44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dd46:	4798      	blx	r3
 801dd48:	4633      	mov	r3, r6
 801dd4a:	4629      	mov	r1, r5
 801dd4c:	9000      	str	r0, [sp, #0]
 801dd4e:	9a03      	ldr	r2, [sp, #12]
 801dd50:	a805      	add	r0, sp, #20
 801dd52:	f000 fcfc 	bl	801e74e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801dd56:	ad1e      	add	r5, sp, #120	; 0x78
 801dd58:	2100      	movs	r1, #0
 801dd5a:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801dd5e:	4622      	mov	r2, r4
 801dd60:	a805      	add	r0, sp, #20
 801dd62:	f845 1d68 	str.w	r1, [r5, #-104]!
 801dd66:	462b      	mov	r3, r5
 801dd68:	f000 fff6 	bl	801ed58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801dd6c:	b1d8      	cbz	r0, 801dda6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801dd6e:	280a      	cmp	r0, #10
 801dd70:	d012      	beq.n	801dd98 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801dd72:	9804      	ldr	r0, [sp, #16]
 801dd74:	b180      	cbz	r0, 801dd98 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801dd76:	7b47      	ldrb	r7, [r0, #13]
 801dd78:	88e2      	ldrh	r2, [r4, #6]
 801dd7a:	00fb      	lsls	r3, r7, #3
 801dd7c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801dd80:	7a03      	ldrb	r3, [r0, #8]
 801dd82:	430b      	orrs	r3, r1
 801dd84:	0679      	lsls	r1, r7, #25
 801dd86:	bf44      	itt	mi
 801dd88:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dd8c:	b21b      	sxthmi	r3, r3
 801dd8e:	1ad3      	subs	r3, r2, r3
 801dd90:	b21b      	sxth	r3, r3
 801dd92:	429e      	cmp	r6, r3
 801dd94:	bfa8      	it	ge
 801dd96:	461e      	movge	r6, r3
 801dd98:	462b      	mov	r3, r5
 801dd9a:	4622      	mov	r2, r4
 801dd9c:	2100      	movs	r1, #0
 801dd9e:	a805      	add	r0, sp, #20
 801dda0:	f000 ffda 	bl	801ed58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801dda4:	e7e2      	b.n	801dd6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801dda6:	4630      	mov	r0, r6
 801dda8:	b01e      	add	sp, #120	; 0x78
 801ddaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ddae:	b003      	add	sp, #12
 801ddb0:	4770      	bx	lr

0801ddb2 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ddb2:	b513      	push	{r0, r1, r4, lr}
 801ddb4:	6803      	ldr	r3, [r0, #0]
 801ddb6:	2400      	movs	r4, #0
 801ddb8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ddbc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ddc0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ddc4:	4669      	mov	r1, sp
 801ddc6:	691b      	ldr	r3, [r3, #16]
 801ddc8:	9400      	str	r4, [sp, #0]
 801ddca:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ddce:	4798      	blx	r3
 801ddd0:	b002      	add	sp, #8
 801ddd2:	bd10      	pop	{r4, pc}

0801ddd4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ddd4:	b538      	push	{r3, r4, r5, lr}
 801ddd6:	680b      	ldr	r3, [r1, #0]
 801ddd8:	460c      	mov	r4, r1
 801ddda:	4605      	mov	r5, r0
 801dddc:	68db      	ldr	r3, [r3, #12]
 801ddde:	4798      	blx	r3
 801dde0:	6823      	ldr	r3, [r4, #0]
 801dde2:	4620      	mov	r0, r4
 801dde4:	4629      	mov	r1, r5
 801dde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dde8:	4798      	blx	r3
 801ddea:	4628      	mov	r0, r5
 801ddec:	bd38      	pop	{r3, r4, r5, pc}

0801ddee <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ddee:	b410      	push	{r4}
 801ddf0:	880a      	ldrh	r2, [r1, #0]
 801ddf2:	8884      	ldrh	r4, [r0, #4]
 801ddf4:	4422      	add	r2, r4
 801ddf6:	800a      	strh	r2, [r1, #0]
 801ddf8:	884a      	ldrh	r2, [r1, #2]
 801ddfa:	88c4      	ldrh	r4, [r0, #6]
 801ddfc:	4422      	add	r2, r4
 801ddfe:	804a      	strh	r2, [r1, #2]
 801de00:	6940      	ldr	r0, [r0, #20]
 801de02:	b120      	cbz	r0, 801de0e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801de04:	6803      	ldr	r3, [r0, #0]
 801de06:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de0c:	4718      	bx	r3
 801de0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de12:	4770      	bx	lr

0801de14 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801de14:	b570      	push	{r4, r5, r6, lr}
 801de16:	8882      	ldrh	r2, [r0, #4]
 801de18:	460c      	mov	r4, r1
 801de1a:	880b      	ldrh	r3, [r1, #0]
 801de1c:	4605      	mov	r5, r0
 801de1e:	4413      	add	r3, r2
 801de20:	800b      	strh	r3, [r1, #0]
 801de22:	884b      	ldrh	r3, [r1, #2]
 801de24:	88c2      	ldrh	r2, [r0, #6]
 801de26:	4413      	add	r3, r2
 801de28:	804b      	strh	r3, [r1, #2]
 801de2a:	1d01      	adds	r1, r0, #4
 801de2c:	4620      	mov	r0, r4
 801de2e:	f7fb fb03 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 801de32:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801de36:	2b00      	cmp	r3, #0
 801de38:	dd0b      	ble.n	801de52 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801de3a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801de3e:	2b00      	cmp	r3, #0
 801de40:	dd07      	ble.n	801de52 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801de42:	6968      	ldr	r0, [r5, #20]
 801de44:	b128      	cbz	r0, 801de52 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801de46:	6803      	ldr	r3, [r0, #0]
 801de48:	4621      	mov	r1, r4
 801de4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de50:	4718      	bx	r3
 801de52:	bd70      	pop	{r4, r5, r6, pc}

0801de54 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801de54:	b570      	push	{r4, r5, r6, lr}
 801de56:	8882      	ldrh	r2, [r0, #4]
 801de58:	460c      	mov	r4, r1
 801de5a:	880b      	ldrh	r3, [r1, #0]
 801de5c:	4605      	mov	r5, r0
 801de5e:	4413      	add	r3, r2
 801de60:	800b      	strh	r3, [r1, #0]
 801de62:	884b      	ldrh	r3, [r1, #2]
 801de64:	88c2      	ldrh	r2, [r0, #6]
 801de66:	4413      	add	r3, r2
 801de68:	804b      	strh	r3, [r1, #2]
 801de6a:	1d01      	adds	r1, r0, #4
 801de6c:	4620      	mov	r0, r4
 801de6e:	f7fb fae3 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 801de72:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801de76:	2b00      	cmp	r3, #0
 801de78:	dd18      	ble.n	801deac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801de7a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801de7e:	2b00      	cmp	r3, #0
 801de80:	dd14      	ble.n	801deac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801de82:	6968      	ldr	r0, [r5, #20]
 801de84:	b128      	cbz	r0, 801de92 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801de86:	6803      	ldr	r3, [r0, #0]
 801de88:	4621      	mov	r1, r4
 801de8a:	691b      	ldr	r3, [r3, #16]
 801de8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de90:	4718      	bx	r3
 801de92:	4b07      	ldr	r3, [pc, #28]	; (801deb0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	3304      	adds	r3, #4
 801de98:	429d      	cmp	r5, r3
 801de9a:	d107      	bne.n	801deac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801de9c:	f7fe ff44 	bl	801cd28 <_ZN8touchgfx11Application11getInstanceEv>
 801dea0:	6821      	ldr	r1, [r4, #0]
 801dea2:	6862      	ldr	r2, [r4, #4]
 801dea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dea8:	f7ff b862 	b.w	801cf70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801deac:	bd70      	pop	{r4, r5, r6, pc}
 801deae:	bf00      	nop
 801deb0:	240262a0 	.word	0x240262a0

0801deb4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801deb4:	b570      	push	{r4, r5, r6, lr}
 801deb6:	4604      	mov	r4, r0
 801deb8:	4616      	mov	r6, r2
 801deba:	460d      	mov	r5, r1
 801debc:	b901      	cbnz	r1, 801dec0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801debe:	b192      	cbz	r2, 801dee6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801dec0:	6823      	ldr	r3, [r4, #0]
 801dec2:	4620      	mov	r0, r4
 801dec4:	699b      	ldr	r3, [r3, #24]
 801dec6:	4798      	blx	r3
 801dec8:	88e2      	ldrh	r2, [r4, #6]
 801deca:	88a1      	ldrh	r1, [r4, #4]
 801decc:	4620      	mov	r0, r4
 801dece:	4432      	add	r2, r6
 801ded0:	4429      	add	r1, r5
 801ded2:	b212      	sxth	r2, r2
 801ded4:	b209      	sxth	r1, r1
 801ded6:	f7e9 fab4 	bl	8007442 <_ZN8touchgfx8Drawable5setXYEss>
 801deda:	6823      	ldr	r3, [r4, #0]
 801dedc:	4620      	mov	r0, r4
 801dede:	699b      	ldr	r3, [r3, #24]
 801dee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dee4:	4718      	bx	r3
 801dee6:	bd70      	pop	{r4, r5, r6, pc}

0801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801dee8:	b510      	push	{r4, lr}
 801deea:	2300      	movs	r3, #0
 801deec:	4604      	mov	r4, r0
 801deee:	4608      	mov	r0, r1
 801def0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801def4:	8023      	strh	r3, [r4, #0]
 801def6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801defa:	8063      	strh	r3, [r4, #2]
 801defc:	6803      	ldr	r3, [r0, #0]
 801defe:	80a1      	strh	r1, [r4, #4]
 801df00:	4621      	mov	r1, r4
 801df02:	80e2      	strh	r2, [r4, #6]
 801df04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df06:	4798      	blx	r3
 801df08:	4620      	mov	r0, r4
 801df0a:	bd10      	pop	{r4, pc}

0801df0c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801df0c:	b530      	push	{r4, r5, lr}
 801df0e:	8083      	strh	r3, [r0, #4]
 801df10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801df14:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801df18:	80c3      	strh	r3, [r0, #6]
 801df1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801df1e:	6141      	str	r1, [r0, #20]
 801df20:	7203      	strb	r3, [r0, #8]
 801df22:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801df26:	8302      	strh	r2, [r0, #24]
 801df28:	7243      	strb	r3, [r0, #9]
 801df2a:	7a83      	ldrb	r3, [r0, #10]
 801df2c:	f365 0306 	bfi	r3, r5, #0, #7
 801df30:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801df34:	f365 13c7 	bfi	r3, r5, #7, #1
 801df38:	7283      	strb	r3, [r0, #10]
 801df3a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801df3e:	72c3      	strb	r3, [r0, #11]
 801df40:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801df44:	7303      	strb	r3, [r0, #12]
 801df46:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801df4a:	81c3      	strh	r3, [r0, #14]
 801df4c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801df50:	8203      	strh	r3, [r0, #16]
 801df52:	4b01      	ldr	r3, [pc, #4]	; (801df58 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801df54:	6003      	str	r3, [r0, #0]
 801df56:	bd30      	pop	{r4, r5, pc}
 801df58:	0802c71c 	.word	0x0802c71c

0801df5c <_ZNK8touchgfx9ConstFont4findEt>:
 801df5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df5e:	6944      	ldr	r4, [r0, #20]
 801df60:	b3bc      	cbz	r4, 801dfd2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801df62:	88a3      	ldrh	r3, [r4, #4]
 801df64:	8b02      	ldrh	r2, [r0, #24]
 801df66:	1acb      	subs	r3, r1, r3
 801df68:	f102 32ff 	add.w	r2, r2, #4294967295
 801df6c:	d431      	bmi.n	801dfd2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801df6e:	4293      	cmp	r3, r2
 801df70:	dd0c      	ble.n	801df8c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801df72:	230e      	movs	r3, #14
 801df74:	fb03 4302 	mla	r3, r3, r2, r4
 801df78:	889b      	ldrh	r3, [r3, #4]
 801df7a:	1a5b      	subs	r3, r3, r1
 801df7c:	1ad3      	subs	r3, r2, r3
 801df7e:	429a      	cmp	r2, r3
 801df80:	db27      	blt.n	801dfd2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801df82:	2b00      	cmp	r3, #0
 801df84:	bfbc      	itt	lt
 801df86:	2302      	movlt	r3, #2
 801df88:	fb92 f3f3 	sdivlt	r3, r2, r3
 801df8c:	2500      	movs	r5, #0
 801df8e:	260e      	movs	r6, #14
 801df90:	4295      	cmp	r5, r2
 801df92:	dc1e      	bgt.n	801dfd2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801df94:	fb06 4003 	mla	r0, r6, r3, r4
 801df98:	8887      	ldrh	r7, [r0, #4]
 801df9a:	42b9      	cmp	r1, r7
 801df9c:	d01a      	beq.n	801dfd4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801df9e:	d20d      	bcs.n	801dfbc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801dfa0:	1e5a      	subs	r2, r3, #1
 801dfa2:	4295      	cmp	r5, r2
 801dfa4:	dc15      	bgt.n	801dfd2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dfa6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801dfaa:	1a5b      	subs	r3, r3, r1
 801dfac:	1ad3      	subs	r3, r2, r3
 801dfae:	429a      	cmp	r2, r3
 801dfb0:	db0f      	blt.n	801dfd2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dfb2:	429d      	cmp	r5, r3
 801dfb4:	ddec      	ble.n	801df90 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dfb6:	1953      	adds	r3, r2, r5
 801dfb8:	105b      	asrs	r3, r3, #1
 801dfba:	e7e9      	b.n	801df90 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dfbc:	1c5d      	adds	r5, r3, #1
 801dfbe:	42aa      	cmp	r2, r5
 801dfc0:	db07      	blt.n	801dfd2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dfc2:	8a43      	ldrh	r3, [r0, #18]
 801dfc4:	1acb      	subs	r3, r1, r3
 801dfc6:	442b      	add	r3, r5
 801dfc8:	429d      	cmp	r5, r3
 801dfca:	dc02      	bgt.n	801dfd2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dfcc:	429a      	cmp	r2, r3
 801dfce:	dadf      	bge.n	801df90 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dfd0:	e7f1      	b.n	801dfb6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801dfd2:	2000      	movs	r0, #0
 801dfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dfd6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801dfd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfd8:	4604      	mov	r4, r0
 801dfda:	4617      	mov	r7, r2
 801dfdc:	461e      	mov	r6, r3
 801dfde:	b911      	cbnz	r1, 801dfe6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801dfe0:	2500      	movs	r5, #0
 801dfe2:	4628      	mov	r0, r5
 801dfe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfe6:	290a      	cmp	r1, #10
 801dfe8:	d0fa      	beq.n	801dfe0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dfea:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801dfee:	4291      	cmp	r1, r2
 801dff0:	d0f6      	beq.n	801dfe0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dff2:	f242 020b 	movw	r2, #8203	; 0x200b
 801dff6:	4291      	cmp	r1, r2
 801dff8:	d0f2      	beq.n	801dfe0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dffa:	f7ff ffaf 	bl	801df5c <_ZNK8touchgfx9ConstFont4findEt>
 801dffe:	4605      	mov	r5, r0
 801e000:	b950      	cbnz	r0, 801e018 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801e002:	6823      	ldr	r3, [r4, #0]
 801e004:	4620      	mov	r0, r4
 801e006:	691b      	ldr	r3, [r3, #16]
 801e008:	4798      	blx	r3
 801e00a:	4601      	mov	r1, r0
 801e00c:	4620      	mov	r0, r4
 801e00e:	f7ff ffa5 	bl	801df5c <_ZNK8touchgfx9ConstFont4findEt>
 801e012:	4605      	mov	r5, r0
 801e014:	2800      	cmp	r0, #0
 801e016:	d0e3      	beq.n	801dfe0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e018:	6823      	ldr	r3, [r4, #0]
 801e01a:	4629      	mov	r1, r5
 801e01c:	4620      	mov	r0, r4
 801e01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e020:	4798      	blx	r3
 801e022:	6038      	str	r0, [r7, #0]
 801e024:	6823      	ldr	r3, [r4, #0]
 801e026:	4620      	mov	r0, r4
 801e028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e02a:	4798      	blx	r3
 801e02c:	7030      	strb	r0, [r6, #0]
 801e02e:	e7d8      	b.n	801dfe2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801e030 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801e030:	b538      	push	{r3, r4, r5, lr}
 801e032:	4605      	mov	r5, r0
 801e034:	f001 fd62 	bl	801fafc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e038:	4604      	mov	r4, r0
 801e03a:	4628      	mov	r0, r5
 801e03c:	f001 fca2 	bl	801f984 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e040:	2800      	cmp	r0, #0
 801e042:	bf14      	ite	ne
 801e044:	2002      	movne	r0, #2
 801e046:	2000      	moveq	r0, #0
 801e048:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801e04c:	b280      	uxth	r0, r0
 801e04e:	bd38      	pop	{r3, r4, r5, pc}

0801e050 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801e050:	b538      	push	{r3, r4, r5, lr}
 801e052:	4605      	mov	r5, r0
 801e054:	f001 fd52 	bl	801fafc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e058:	4604      	mov	r4, r0
 801e05a:	4628      	mov	r0, r5
 801e05c:	f001 fc92 	bl	801f984 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e060:	2800      	cmp	r0, #0
 801e062:	bf14      	ite	ne
 801e064:	2002      	movne	r0, #2
 801e066:	2000      	moveq	r0, #0
 801e068:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801e06c:	f040 0001 	orr.w	r0, r0, #1
 801e070:	b280      	uxth	r0, r0
 801e072:	bd38      	pop	{r3, r4, r5, pc}

0801e074 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801e074:	2000      	movs	r0, #0
 801e076:	4770      	bx	lr

0801e078 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801e078:	2001      	movs	r0, #1
 801e07a:	4770      	bx	lr

0801e07c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801e07c:	2002      	movs	r0, #2
 801e07e:	4770      	bx	lr

0801e080 <_ZN8touchgfx12GestureEventD1Ev>:
 801e080:	4770      	bx	lr

0801e082 <_ZN8touchgfx9DragEventD1Ev>:
 801e082:	4770      	bx	lr

0801e084 <_ZN8touchgfx10ClickEventD1Ev>:
 801e084:	4770      	bx	lr

0801e086 <_ZN8touchgfx10ClickEventD0Ev>:
 801e086:	b510      	push	{r4, lr}
 801e088:	4604      	mov	r4, r0
 801e08a:	210c      	movs	r1, #12
 801e08c:	f009 fccf 	bl	8027a2e <_ZdlPvj>
 801e090:	4620      	mov	r0, r4
 801e092:	bd10      	pop	{r4, pc}

0801e094 <_ZN8touchgfx9DragEventD0Ev>:
 801e094:	b510      	push	{r4, lr}
 801e096:	4604      	mov	r4, r0
 801e098:	2110      	movs	r1, #16
 801e09a:	f009 fcc8 	bl	8027a2e <_ZdlPvj>
 801e09e:	4620      	mov	r0, r4
 801e0a0:	bd10      	pop	{r4, pc}

0801e0a2 <_ZN8touchgfx12GestureEventD0Ev>:
 801e0a2:	b510      	push	{r4, lr}
 801e0a4:	4604      	mov	r4, r0
 801e0a6:	210c      	movs	r1, #12
 801e0a8:	f009 fcc1 	bl	8027a2e <_ZdlPvj>
 801e0ac:	4620      	mov	r0, r4
 801e0ae:	bd10      	pop	{r4, pc}

0801e0b0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801e0b0:	b530      	push	{r4, r5, lr}
 801e0b2:	460d      	mov	r5, r1
 801e0b4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801e0b6:	b087      	sub	sp, #28
 801e0b8:	4604      	mov	r4, r0
 801e0ba:	b301      	cbz	r1, 801e0fe <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801e0bc:	a801      	add	r0, sp, #4
 801e0be:	f7ff ff13 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e0c2:	892a      	ldrh	r2, [r5, #8]
 801e0c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e0c8:	7928      	ldrb	r0, [r5, #4]
 801e0ca:	1ad2      	subs	r2, r2, r3
 801e0cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801e0ce:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801e0d2:	441a      	add	r2, r3
 801e0d4:	896b      	ldrh	r3, [r5, #10]
 801e0d6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801e0da:	f88d 0010 	strb.w	r0, [sp, #16]
 801e0de:	1b5b      	subs	r3, r3, r5
 801e0e0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801e0e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e0e4:	442b      	add	r3, r5
 801e0e6:	4d07      	ldr	r5, [pc, #28]	; (801e104 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801e0e8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801e0ec:	a903      	add	r1, sp, #12
 801e0ee:	9503      	str	r5, [sp, #12]
 801e0f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e0f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e0f8:	6803      	ldr	r3, [r0, #0]
 801e0fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e0fc:	4798      	blx	r3
 801e0fe:	b007      	add	sp, #28
 801e100:	bd30      	pop	{r4, r5, pc}
 801e102:	bf00      	nop
 801e104:	0802c7a4 	.word	0x0802c7a4

0801e108 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801e108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e10c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801e10e:	b08a      	sub	sp, #40	; 0x28
 801e110:	4604      	mov	r4, r0
 801e112:	460d      	mov	r5, r1
 801e114:	b113      	cbz	r3, 801e11c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801e116:	790b      	ldrb	r3, [r1, #4]
 801e118:	2b00      	cmp	r3, #0
 801e11a:	d044      	beq.n	801e1a6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e11c:	f104 0804 	add.w	r8, r4, #4
 801e120:	a803      	add	r0, sp, #12
 801e122:	4641      	mov	r1, r8
 801e124:	f7ff fee0 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e128:	792b      	ldrb	r3, [r5, #4]
 801e12a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801e12e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801e132:	b983      	cbnz	r3, 801e156 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801e134:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801e138:	892a      	ldrh	r2, [r5, #8]
 801e13a:	88e9      	ldrh	r1, [r5, #6]
 801e13c:	4640      	mov	r0, r8
 801e13e:	1b92      	subs	r2, r2, r6
 801e140:	9301      	str	r3, [sp, #4]
 801e142:	1bc9      	subs	r1, r1, r7
 801e144:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801e148:	b212      	sxth	r2, r2
 801e14a:	9300      	str	r3, [sp, #0]
 801e14c:	b209      	sxth	r1, r1
 801e14e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801e152:	f7fb f88f 	bl	8019274 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801e156:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e158:	b329      	cbz	r1, 801e1a6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e15a:	a805      	add	r0, sp, #20
 801e15c:	f7ff fec4 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e160:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801e164:	792b      	ldrb	r3, [r5, #4]
 801e166:	a907      	add	r1, sp, #28
 801e168:	1abf      	subs	r7, r7, r2
 801e16a:	88ea      	ldrh	r2, [r5, #6]
 801e16c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e16e:	4417      	add	r7, r2
 801e170:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801e172:	f88d 3020 	strb.w	r3, [sp, #32]
 801e176:	4417      	add	r7, r2
 801e178:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801e17c:	1ab6      	subs	r6, r6, r2
 801e17e:	892a      	ldrh	r2, [r5, #8]
 801e180:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801e184:	4416      	add	r6, r2
 801e186:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e188:	4416      	add	r6, r2
 801e18a:	4a08      	ldr	r2, [pc, #32]	; (801e1ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801e18c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801e190:	2600      	movs	r6, #0
 801e192:	9207      	str	r2, [sp, #28]
 801e194:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801e198:	6803      	ldr	r3, [r0, #0]
 801e19a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e19c:	4798      	blx	r3
 801e19e:	792b      	ldrb	r3, [r5, #4]
 801e1a0:	b10b      	cbz	r3, 801e1a6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e1a2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801e1a6:	b00a      	add	sp, #40	; 0x28
 801e1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1ac:	0802c77c 	.word	0x0802c77c

0801e1b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1b4:	460c      	mov	r4, r1
 801e1b6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801e1b8:	b088      	sub	sp, #32
 801e1ba:	4605      	mov	r5, r0
 801e1bc:	2900      	cmp	r1, #0
 801e1be:	d06d      	beq.n	801e29c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801e1c0:	4668      	mov	r0, sp
 801e1c2:	f7ff fe91 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e1c6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801e1c8:	88e3      	ldrh	r3, [r4, #6]
 801e1ca:	f9bd 8000 	ldrsh.w	r8, [sp]
 801e1ce:	440b      	add	r3, r1
 801e1d0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801e1d4:	b21b      	sxth	r3, r3
 801e1d6:	4543      	cmp	r3, r8
 801e1d8:	db31      	blt.n	801e23e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e1da:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801e1de:	44c4      	add	ip, r8
 801e1e0:	fa0f fc8c 	sxth.w	ip, ip
 801e1e4:	4563      	cmp	r3, ip
 801e1e6:	da2a      	bge.n	801e23e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e1e8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801e1ea:	8926      	ldrh	r6, [r4, #8]
 801e1ec:	4416      	add	r6, r2
 801e1ee:	b236      	sxth	r6, r6
 801e1f0:	42be      	cmp	r6, r7
 801e1f2:	db24      	blt.n	801e23e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e1f4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801e1f8:	4438      	add	r0, r7
 801e1fa:	b200      	sxth	r0, r0
 801e1fc:	4286      	cmp	r6, r0
 801e1fe:	da1e      	bge.n	801e23e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e200:	8963      	ldrh	r3, [r4, #10]
 801e202:	4419      	add	r1, r3
 801e204:	b209      	sxth	r1, r1
 801e206:	4541      	cmp	r1, r8
 801e208:	db08      	blt.n	801e21c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e20a:	4561      	cmp	r1, ip
 801e20c:	da06      	bge.n	801e21c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e20e:	89a3      	ldrh	r3, [r4, #12]
 801e210:	441a      	add	r2, r3
 801e212:	b212      	sxth	r2, r2
 801e214:	42ba      	cmp	r2, r7
 801e216:	db01      	blt.n	801e21c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e218:	4282      	cmp	r2, r0
 801e21a:	db10      	blt.n	801e23e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e21c:	4b21      	ldr	r3, [pc, #132]	; (801e2a4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801e21e:	a904      	add	r1, sp, #16
 801e220:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e222:	9304      	str	r3, [sp, #16]
 801e224:	2302      	movs	r3, #2
 801e226:	f88d 3014 	strb.w	r3, [sp, #20]
 801e22a:	2300      	movs	r3, #0
 801e22c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e230:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e234:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e238:	6803      	ldr	r3, [r0, #0]
 801e23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e23c:	4798      	blx	r3
 801e23e:	1d29      	adds	r1, r5, #4
 801e240:	a802      	add	r0, sp, #8
 801e242:	f7ff fe51 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e246:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e24a:	88e0      	ldrh	r0, [r4, #6]
 801e24c:	eba3 0808 	sub.w	r8, r3, r8
 801e250:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e254:	7921      	ldrb	r1, [r4, #4]
 801e256:	fa1f f888 	uxth.w	r8, r8
 801e25a:	1bdf      	subs	r7, r3, r7
 801e25c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801e260:	b2bb      	uxth	r3, r7
 801e262:	4440      	add	r0, r8
 801e264:	8922      	ldrh	r2, [r4, #8]
 801e266:	8967      	ldrh	r7, [r4, #10]
 801e268:	4460      	add	r0, ip
 801e26a:	89a4      	ldrh	r4, [r4, #12]
 801e26c:	441a      	add	r2, r3
 801e26e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801e270:	44b8      	add	r8, r7
 801e272:	4423      	add	r3, r4
 801e274:	f8ad 0016 	strh.w	r0, [sp, #22]
 801e278:	4432      	add	r2, r6
 801e27a:	44e0      	add	r8, ip
 801e27c:	4433      	add	r3, r6
 801e27e:	4c0a      	ldr	r4, [pc, #40]	; (801e2a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801e280:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e282:	f88d 1014 	strb.w	r1, [sp, #20]
 801e286:	a904      	add	r1, sp, #16
 801e288:	9404      	str	r4, [sp, #16]
 801e28a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e28e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801e292:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e296:	6803      	ldr	r3, [r0, #0]
 801e298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e29a:	4798      	blx	r3
 801e29c:	b008      	add	sp, #32
 801e29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2a2:	bf00      	nop
 801e2a4:	0802c77c 	.word	0x0802c77c
 801e2a8:	0802c790 	.word	0x0802c790

0801e2ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801e2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e2ae:	4604      	mov	r4, r0
 801e2b0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801e2b4:	3201      	adds	r2, #1
 801e2b6:	d112      	bne.n	801e2de <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801e2b8:	2500      	movs	r5, #0
 801e2ba:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e2be:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e2c2:	6803      	ldr	r3, [r0, #0]
 801e2c4:	9500      	str	r5, [sp, #0]
 801e2c6:	466d      	mov	r5, sp
 801e2c8:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e2cc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e2d0:	4629      	mov	r1, r5
 801e2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e2d4:	4798      	blx	r3
 801e2d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e2da:	e884 0003 	stmia.w	r4, {r0, r1}
 801e2de:	4620      	mov	r0, r4
 801e2e0:	b003      	add	sp, #12
 801e2e2:	bd30      	pop	{r4, r5, pc}

0801e2e4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801e2e4:	b513      	push	{r0, r1, r4, lr}
 801e2e6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801e2ea:	4604      	mov	r4, r0
 801e2ec:	3301      	adds	r3, #1
 801e2ee:	d109      	bne.n	801e304 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801e2f0:	4601      	mov	r1, r0
 801e2f2:	4668      	mov	r0, sp
 801e2f4:	f7ff fdf8 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e2f8:	f8bd 3000 	ldrh.w	r3, [sp]
 801e2fc:	8423      	strh	r3, [r4, #32]
 801e2fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e302:	8463      	strh	r3, [r4, #34]	; 0x22
 801e304:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801e308:	b002      	add	sp, #8
 801e30a:	bd10      	pop	{r4, pc}

0801e30c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801e30c:	b513      	push	{r0, r1, r4, lr}
 801e30e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801e312:	4604      	mov	r4, r0
 801e314:	3301      	adds	r3, #1
 801e316:	d109      	bne.n	801e32c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801e318:	4601      	mov	r1, r0
 801e31a:	4668      	mov	r0, sp
 801e31c:	f7ff fde4 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e320:	f8bd 3000 	ldrh.w	r3, [sp]
 801e324:	8423      	strh	r3, [r4, #32]
 801e326:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e32a:	8463      	strh	r3, [r4, #34]	; 0x22
 801e32c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801e330:	b002      	add	sp, #8
 801e332:	bd10      	pop	{r4, pc}

0801e334 <_ZN8touchgfx6ScreenC1Ev>:
 801e334:	b570      	push	{r4, r5, r6, lr}
 801e336:	4b17      	ldr	r3, [pc, #92]	; (801e394 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801e338:	4605      	mov	r5, r0
 801e33a:	4a17      	ldr	r2, [pc, #92]	; (801e398 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801e33c:	2101      	movs	r1, #1
 801e33e:	f845 3b04 	str.w	r3, [r5], #4
 801e342:	2300      	movs	r3, #0
 801e344:	6042      	str	r2, [r0, #4]
 801e346:	4604      	mov	r4, r0
 801e348:	8103      	strh	r3, [r0, #8]
 801e34a:	8143      	strh	r3, [r0, #10]
 801e34c:	8183      	strh	r3, [r0, #12]
 801e34e:	81c3      	strh	r3, [r0, #14]
 801e350:	8203      	strh	r3, [r0, #16]
 801e352:	8243      	strh	r3, [r0, #18]
 801e354:	8283      	strh	r3, [r0, #20]
 801e356:	82c3      	strh	r3, [r0, #22]
 801e358:	6203      	str	r3, [r0, #32]
 801e35a:	8483      	strh	r3, [r0, #36]	; 0x24
 801e35c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801e35e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801e362:	6343      	str	r3, [r0, #52]	; 0x34
 801e364:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801e368:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801e36c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801e370:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801e374:	4b09      	ldr	r3, [pc, #36]	; (801e39c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801e376:	4628      	mov	r0, r5
 801e378:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e37c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801e37e:	4a08      	ldr	r2, [pc, #32]	; (801e3a0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801e380:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e384:	4798      	blx	r3
 801e386:	6863      	ldr	r3, [r4, #4]
 801e388:	4628      	mov	r0, r5
 801e38a:	4631      	mov	r1, r6
 801e38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e38e:	4798      	blx	r3
 801e390:	4620      	mov	r0, r4
 801e392:	bd70      	pop	{r4, r5, r6, pc}
 801e394:	0802c7b8 	.word	0x0802c7b8
 801e398:	0802c0f8 	.word	0x0802c0f8
 801e39c:	2402625a 	.word	0x2402625a
 801e3a0:	24026258 	.word	0x24026258

0801e3a4 <_ZN8touchgfx6Screen4drawEv>:
 801e3a4:	4b09      	ldr	r3, [pc, #36]	; (801e3cc <_ZN8touchgfx6Screen4drawEv+0x28>)
 801e3a6:	b507      	push	{r0, r1, r2, lr}
 801e3a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e3ac:	2100      	movs	r1, #0
 801e3ae:	4b08      	ldr	r3, [pc, #32]	; (801e3d0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801e3b0:	9100      	str	r1, [sp, #0]
 801e3b2:	4669      	mov	r1, sp
 801e3b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e3b8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e3bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e3c0:	6803      	ldr	r3, [r0, #0]
 801e3c2:	689b      	ldr	r3, [r3, #8]
 801e3c4:	4798      	blx	r3
 801e3c6:	b003      	add	sp, #12
 801e3c8:	f85d fb04 	ldr.w	pc, [sp], #4
 801e3cc:	24026258 	.word	0x24026258
 801e3d0:	2402625a 	.word	0x2402625a

0801e3d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801e3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3d8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e3dc:	b089      	sub	sp, #36	; 0x24
 801e3de:	4680      	mov	r8, r0
 801e3e0:	460c      	mov	r4, r1
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	4615      	mov	r5, r2
 801e3e6:	dd0e      	ble.n	801e406 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e3e8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	dd0a      	ble.n	801e406 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e3f0:	4628      	mov	r0, r5
 801e3f2:	f7ff ff5b 	bl	801e2ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e3f6:	4621      	mov	r1, r4
 801e3f8:	f7fe fbb8 	bl	801cb6c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e3fc:	69eb      	ldr	r3, [r5, #28]
 801e3fe:	b928      	cbnz	r0, 801e40c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801e400:	461d      	mov	r5, r3
 801e402:	2b00      	cmp	r3, #0
 801e404:	d1f4      	bne.n	801e3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801e406:	b009      	add	sp, #36	; 0x24
 801e408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e40c:	ae04      	add	r6, sp, #16
 801e40e:	2b00      	cmp	r3, #0
 801e410:	f000 80b5 	beq.w	801e57e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e414:	682b      	ldr	r3, [r5, #0]
 801e416:	4629      	mov	r1, r5
 801e418:	a802      	add	r0, sp, #8
 801e41a:	68db      	ldr	r3, [r3, #12]
 801e41c:	4798      	blx	r3
 801e41e:	4628      	mov	r0, r5
 801e420:	f7ff ff60 	bl	801e2e4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e424:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801e428:	4407      	add	r7, r0
 801e42a:	4628      	mov	r0, r5
 801e42c:	f7ff ff6e 	bl	801e30c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e430:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e434:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801e438:	b23f      	sxth	r7, r7
 801e43a:	4418      	add	r0, r3
 801e43c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801e440:	4621      	mov	r1, r4
 801e442:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e446:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e44a:	4630      	mov	r0, r6
 801e44c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e450:	f8ad 7010 	strh.w	r7, [sp, #16]
 801e454:	f7fa fff0 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 801e458:	4628      	mov	r0, r5
 801e45a:	f7ff ff27 	bl	801e2ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e45e:	ab06      	add	r3, sp, #24
 801e460:	4602      	mov	r2, r0
 801e462:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e466:	e883 0003 	stmia.w	r3, {r0, r1}
 801e46a:	4611      	mov	r1, r2
 801e46c:	4618      	mov	r0, r3
 801e46e:	f7fa ffe3 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 801e472:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801e476:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e47a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801e47e:	4299      	cmp	r1, r3
 801e480:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801e484:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801e488:	d10b      	bne.n	801e4a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e48a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e48e:	4552      	cmp	r2, sl
 801e490:	d107      	bne.n	801e4a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e492:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e496:	455a      	cmp	r2, fp
 801e498:	d103      	bne.n	801e4a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e49a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e49e:	454a      	cmp	r2, r9
 801e4a0:	d06d      	beq.n	801e57e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e4a2:	f1bb 0f00 	cmp.w	fp, #0
 801e4a6:	dd65      	ble.n	801e574 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e4a8:	f1b9 0f00 	cmp.w	r9, #0
 801e4ac:	dd62      	ble.n	801e574 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e4ae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e4b2:	fa1f f08a 	uxth.w	r0, sl
 801e4b6:	4552      	cmp	r2, sl
 801e4b8:	9000      	str	r0, [sp, #0]
 801e4ba:	da12      	bge.n	801e4e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801e4bc:	9301      	str	r3, [sp, #4]
 801e4be:	9b00      	ldr	r3, [sp, #0]
 801e4c0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e4c4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e4c8:	1a9a      	subs	r2, r3, r2
 801e4ca:	f8ad 1010 	strh.w	r1, [sp, #16]
 801e4ce:	4631      	mov	r1, r6
 801e4d0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e4d4:	4640      	mov	r0, r8
 801e4d6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801e4da:	69ea      	ldr	r2, [r5, #28]
 801e4dc:	f7ff ff7a 	bl	801e3d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e4e0:	9b01      	ldr	r3, [sp, #4]
 801e4e2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e4e6:	b29f      	uxth	r7, r3
 801e4e8:	429a      	cmp	r2, r3
 801e4ea:	da0d      	bge.n	801e508 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801e4ec:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e4f0:	1aba      	subs	r2, r7, r2
 801e4f2:	f8ad a012 	strh.w	sl, [sp, #18]
 801e4f6:	4631      	mov	r1, r6
 801e4f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e4fc:	4640      	mov	r0, r8
 801e4fe:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e502:	69ea      	ldr	r2, [r5, #28]
 801e504:	f7ff ff66 	bl	801e3d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e508:	8822      	ldrh	r2, [r4, #0]
 801e50a:	445f      	add	r7, fp
 801e50c:	88a3      	ldrh	r3, [r4, #4]
 801e50e:	b2bf      	uxth	r7, r7
 801e510:	4413      	add	r3, r2
 801e512:	b23a      	sxth	r2, r7
 801e514:	b29b      	uxth	r3, r3
 801e516:	b219      	sxth	r1, r3
 801e518:	4291      	cmp	r1, r2
 801e51a:	dd0d      	ble.n	801e538 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801e51c:	1bdb      	subs	r3, r3, r7
 801e51e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e522:	f8ad a012 	strh.w	sl, [sp, #18]
 801e526:	4631      	mov	r1, r6
 801e528:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e52c:	4640      	mov	r0, r8
 801e52e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e532:	69ea      	ldr	r2, [r5, #28]
 801e534:	f7ff ff4e 	bl	801e3d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e538:	88e2      	ldrh	r2, [r4, #6]
 801e53a:	8863      	ldrh	r3, [r4, #2]
 801e53c:	4413      	add	r3, r2
 801e53e:	9a00      	ldr	r2, [sp, #0]
 801e540:	444a      	add	r2, r9
 801e542:	b29b      	uxth	r3, r3
 801e544:	fa1f f982 	uxth.w	r9, r2
 801e548:	b219      	sxth	r1, r3
 801e54a:	fa0f f289 	sxth.w	r2, r9
 801e54e:	428a      	cmp	r2, r1
 801e550:	da15      	bge.n	801e57e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e552:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e556:	eba3 0309 	sub.w	r3, r3, r9
 801e55a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e55e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e562:	4631      	mov	r1, r6
 801e564:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e568:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e56c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e570:	69ea      	ldr	r2, [r5, #28]
 801e572:	e001      	b.n	801e578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801e574:	69ea      	ldr	r2, [r5, #28]
 801e576:	4621      	mov	r1, r4
 801e578:	4640      	mov	r0, r8
 801e57a:	f7ff ff2b 	bl	801e3d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e57e:	4628      	mov	r0, r5
 801e580:	f7ff fe94 	bl	801e2ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e584:	6861      	ldr	r1, [r4, #4]
 801e586:	4602      	mov	r2, r0
 801e588:	4633      	mov	r3, r6
 801e58a:	6820      	ldr	r0, [r4, #0]
 801e58c:	c303      	stmia	r3!, {r0, r1}
 801e58e:	4611      	mov	r1, r2
 801e590:	4630      	mov	r0, r6
 801e592:	f7fa ff51 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 801e596:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	f77f af33 	ble.w	801e406 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e5a0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	f77f af2e 	ble.w	801e406 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e5aa:	4628      	mov	r0, r5
 801e5ac:	f7ff fe9a 	bl	801e2e4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e5b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e5b4:	1a18      	subs	r0, r3, r0
 801e5b6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e5ba:	4628      	mov	r0, r5
 801e5bc:	f7ff fea6 	bl	801e30c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e5c0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e5c4:	4631      	mov	r1, r6
 801e5c6:	1a18      	subs	r0, r3, r0
 801e5c8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e5cc:	4628      	mov	r0, r5
 801e5ce:	682b      	ldr	r3, [r5, #0]
 801e5d0:	689b      	ldr	r3, [r3, #8]
 801e5d2:	4798      	blx	r3
 801e5d4:	e717      	b.n	801e406 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801e5d6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801e5d6:	b570      	push	{r4, r5, r6, lr}
 801e5d8:	1d06      	adds	r6, r0, #4
 801e5da:	b086      	sub	sp, #24
 801e5dc:	460c      	mov	r4, r1
 801e5de:	2300      	movs	r3, #0
 801e5e0:	4631      	mov	r1, r6
 801e5e2:	4605      	mov	r5, r0
 801e5e4:	a802      	add	r0, sp, #8
 801e5e6:	9301      	str	r3, [sp, #4]
 801e5e8:	f7ff fc7e 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e5ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e5f0:	8822      	ldrh	r2, [r4, #0]
 801e5f2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801e5f6:	1ad2      	subs	r2, r2, r3
 801e5f8:	8863      	ldrh	r3, [r4, #2]
 801e5fa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e5fe:	1a5b      	subs	r3, r3, r1
 801e600:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e604:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e608:	aa01      	add	r2, sp, #4
 801e60a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e60e:	4630      	mov	r0, r6
 801e610:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e614:	a904      	add	r1, sp, #16
 801e616:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e61a:	f7fa ffe5 	bl	80195e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801e61e:	9a01      	ldr	r2, [sp, #4]
 801e620:	b11a      	cbz	r2, 801e62a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801e622:	4621      	mov	r1, r4
 801e624:	4628      	mov	r0, r5
 801e626:	f7ff fed5 	bl	801e3d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e62a:	b006      	add	sp, #24
 801e62c:	bd70      	pop	{r4, r5, r6, pc}

0801e62e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801e62e:	4602      	mov	r2, r0
 801e630:	b530      	push	{r4, r5, lr}
 801e632:	4604      	mov	r4, r0
 801e634:	b085      	sub	sp, #20
 801e636:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801e63a:	460d      	mov	r5, r1
 801e63c:	466b      	mov	r3, sp
 801e63e:	6851      	ldr	r1, [r2, #4]
 801e640:	c303      	stmia	r3!, {r0, r1}
 801e642:	4629      	mov	r1, r5
 801e644:	4668      	mov	r0, sp
 801e646:	f7fa fef7 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 801e64a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801e64e:	b12b      	cbz	r3, 801e65c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801e650:	4669      	mov	r1, sp
 801e652:	4620      	mov	r0, r4
 801e654:	f7ff ffbf 	bl	801e5d6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801e658:	b005      	add	sp, #20
 801e65a:	bd30      	pop	{r4, r5, pc}
 801e65c:	3404      	adds	r4, #4
 801e65e:	a802      	add	r0, sp, #8
 801e660:	4621      	mov	r1, r4
 801e662:	f7ff fc41 	bl	801dee8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e666:	f8bd 3000 	ldrh.w	r3, [sp]
 801e66a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801e66e:	4669      	mov	r1, sp
 801e670:	4620      	mov	r0, r4
 801e672:	1a9b      	subs	r3, r3, r2
 801e674:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e678:	f8ad 3000 	strh.w	r3, [sp]
 801e67c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e680:	1a9b      	subs	r3, r3, r2
 801e682:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e686:	f7fa ff76 	bl	8019576 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801e68a:	e7e5      	b.n	801e658 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801e68c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801e68c:	460b      	mov	r3, r1
 801e68e:	680a      	ldr	r2, [r1, #0]
 801e690:	1d01      	adds	r1, r0, #4
 801e692:	6992      	ldr	r2, [r2, #24]
 801e694:	4618      	mov	r0, r3
 801e696:	4710      	bx	r2

0801e698 <_ZN8touchgfx12TextProviderC1Ev>:
 801e698:	b538      	push	{r3, r4, r5, lr}
 801e69a:	2500      	movs	r5, #0
 801e69c:	2302      	movs	r3, #2
 801e69e:	4604      	mov	r4, r0
 801e6a0:	220e      	movs	r2, #14
 801e6a2:	7403      	strb	r3, [r0, #16]
 801e6a4:	4629      	mov	r1, r5
 801e6a6:	6145      	str	r5, [r0, #20]
 801e6a8:	7605      	strb	r5, [r0, #24]
 801e6aa:	83c5      	strh	r5, [r0, #30]
 801e6ac:	8405      	strh	r5, [r0, #32]
 801e6ae:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e6b0:	8705      	strh	r5, [r0, #56]	; 0x38
 801e6b2:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801e6b4:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801e6b8:	e9c0 5500 	strd	r5, r5, [r0]
 801e6bc:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801e6c0:	304c      	adds	r0, #76	; 0x4c
 801e6c2:	f009 fa73 	bl	8027bac <memset>
 801e6c6:	2301      	movs	r3, #1
 801e6c8:	4620      	mov	r0, r4
 801e6ca:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801e6ce:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e6d2:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801e6d6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801e6da:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801e6de:	f7ea fcb3 	bl	8009048 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801e6e2:	4620      	mov	r0, r4
 801e6e4:	bd38      	pop	{r3, r4, r5, pc}

0801e6e6 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801e6e6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e6e8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e6ec:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801e6ee:	fab0 f080 	clz	r0, r0
 801e6f2:	0940      	lsrs	r0, r0, #5
 801e6f4:	4770      	bx	lr

0801e6f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801e6f6:	b530      	push	{r4, r5, lr}
 801e6f8:	2500      	movs	r5, #0
 801e6fa:	2401      	movs	r4, #1
 801e6fc:	6843      	ldr	r3, [r0, #4]
 801e6fe:	b913      	cbnz	r3, 801e706 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801e700:	6803      	ldr	r3, [r0, #0]
 801e702:	b313      	cbz	r3, 801e74a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e704:	6043      	str	r3, [r0, #4]
 801e706:	7e03      	ldrb	r3, [r0, #24]
 801e708:	b143      	cbz	r3, 801e71c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801e70a:	6943      	ldr	r3, [r0, #20]
 801e70c:	b12b      	cbz	r3, 801e71a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e70e:	881a      	ldrh	r2, [r3, #0]
 801e710:	b11a      	cbz	r2, 801e71a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e712:	1c9a      	adds	r2, r3, #2
 801e714:	6142      	str	r2, [r0, #20]
 801e716:	8818      	ldrh	r0, [r3, #0]
 801e718:	bd30      	pop	{r4, r5, pc}
 801e71a:	7605      	strb	r5, [r0, #24]
 801e71c:	6843      	ldr	r3, [r0, #4]
 801e71e:	8819      	ldrh	r1, [r3, #0]
 801e720:	b199      	cbz	r1, 801e74a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e722:	1c9a      	adds	r2, r3, #2
 801e724:	2902      	cmp	r1, #2
 801e726:	6042      	str	r2, [r0, #4]
 801e728:	d1f5      	bne.n	801e716 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801e72a:	7c03      	ldrb	r3, [r0, #16]
 801e72c:	2b01      	cmp	r3, #1
 801e72e:	d8e5      	bhi.n	801e6fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e730:	1c5a      	adds	r2, r3, #1
 801e732:	3302      	adds	r3, #2
 801e734:	7402      	strb	r2, [r0, #16]
 801e736:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801e73a:	6143      	str	r3, [r0, #20]
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d0dd      	beq.n	801e6fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e740:	881b      	ldrh	r3, [r3, #0]
 801e742:	2b00      	cmp	r3, #0
 801e744:	d0da      	beq.n	801e6fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e746:	7604      	strb	r4, [r0, #24]
 801e748:	e7d8      	b.n	801e6fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e74a:	2000      	movs	r0, #0
 801e74c:	e7e4      	b.n	801e718 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801e74e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801e74e:	6001      	str	r1, [r0, #0]
 801e750:	2100      	movs	r1, #0
 801e752:	b430      	push	{r4, r5}
 801e754:	6041      	str	r1, [r0, #4]
 801e756:	6815      	ldr	r5, [r2, #0]
 801e758:	6085      	str	r5, [r0, #8]
 801e75a:	6852      	ldr	r2, [r2, #4]
 801e75c:	6443      	str	r3, [r0, #68]	; 0x44
 801e75e:	9b02      	ldr	r3, [sp, #8]
 801e760:	60c2      	str	r2, [r0, #12]
 801e762:	7401      	strb	r1, [r0, #16]
 801e764:	6141      	str	r1, [r0, #20]
 801e766:	7601      	strb	r1, [r0, #24]
 801e768:	8701      	strh	r1, [r0, #56]	; 0x38
 801e76a:	8401      	strh	r1, [r0, #32]
 801e76c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801e770:	6483      	str	r3, [r0, #72]	; 0x48
 801e772:	bc30      	pop	{r4, r5}
 801e774:	f7ea bc68 	b.w	8009048 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801e778 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801e778:	b408      	push	{r3}
 801e77a:	b510      	push	{r4, lr}
 801e77c:	b085      	sub	sp, #20
 801e77e:	ac07      	add	r4, sp, #28
 801e780:	f854 3b04 	ldr.w	r3, [r4], #4
 801e784:	9300      	str	r3, [sp, #0]
 801e786:	4613      	mov	r3, r2
 801e788:	4622      	mov	r2, r4
 801e78a:	9403      	str	r4, [sp, #12]
 801e78c:	f7ff ffdf 	bl	801e74e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e790:	b005      	add	sp, #20
 801e792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e796:	b001      	add	sp, #4
 801e798:	4770      	bx	lr

0801e79a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801e79a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e79c:	4605      	mov	r5, r0
 801e79e:	4608      	mov	r0, r1
 801e7a0:	b1f1      	cbz	r1, 801e7e0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801e7a2:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801e7a6:	460b      	mov	r3, r1
 801e7a8:	f101 0708 	add.w	r7, r1, #8
 801e7ac:	4622      	mov	r2, r4
 801e7ae:	6818      	ldr	r0, [r3, #0]
 801e7b0:	3308      	adds	r3, #8
 801e7b2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e7b6:	4626      	mov	r6, r4
 801e7b8:	42bb      	cmp	r3, r7
 801e7ba:	c603      	stmia	r6!, {r0, r1}
 801e7bc:	4634      	mov	r4, r6
 801e7be:	d1f6      	bne.n	801e7ae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801e7c0:	6818      	ldr	r0, [r3, #0]
 801e7c2:	6030      	str	r0, [r6, #0]
 801e7c4:	4610      	mov	r0, r2
 801e7c6:	889b      	ldrh	r3, [r3, #4]
 801e7c8:	80b3      	strh	r3, [r6, #4]
 801e7ca:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801e7ce:	015b      	lsls	r3, r3, #5
 801e7d0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e7d4:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801e7d8:	430b      	orrs	r3, r1
 801e7da:	425b      	negs	r3, r3
 801e7dc:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801e7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e7e2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801e7e2:	b538      	push	{r3, r4, r5, lr}
 801e7e4:	460c      	mov	r4, r1
 801e7e6:	6811      	ldr	r1, [r2, #0]
 801e7e8:	4610      	mov	r0, r2
 801e7ea:	68cd      	ldr	r5, [r1, #12]
 801e7ec:	4619      	mov	r1, r3
 801e7ee:	47a8      	blx	r5
 801e7f0:	2800      	cmp	r0, #0
 801e7f2:	bf08      	it	eq
 801e7f4:	4620      	moveq	r0, r4
 801e7f6:	bd38      	pop	{r3, r4, r5, pc}

0801e7f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801e7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7fa:	4604      	mov	r4, r0
 801e7fc:	4615      	mov	r5, r2
 801e7fe:	4608      	mov	r0, r1
 801e800:	b93a      	cbnz	r2, 801e812 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801e802:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801e806:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801e80a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801e80e:	4628      	mov	r0, r5
 801e810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e812:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801e816:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801e81a:	8893      	ldrh	r3, [r2, #4]
 801e81c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801e820:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801e824:	79ee      	ldrb	r6, [r5, #7]
 801e826:	4316      	orrs	r6, r2
 801e828:	19da      	adds	r2, r3, r7
 801e82a:	b291      	uxth	r1, r2
 801e82c:	b2b7      	uxth	r7, r6
 801e82e:	291d      	cmp	r1, #29
 801e830:	d87b      	bhi.n	801e92a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801e832:	2201      	movs	r2, #1
 801e834:	10f6      	asrs	r6, r6, #3
 801e836:	408a      	lsls	r2, r1
 801e838:	4974      	ldr	r1, [pc, #464]	; (801ea0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801e83a:	420a      	tst	r2, r1
 801e83c:	d12e      	bne.n	801e89c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801e83e:	f412 7f60 	tst.w	r2, #896	; 0x380
 801e842:	d072      	beq.n	801e92a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801e844:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801e848:	462b      	mov	r3, r5
 801e84a:	f105 0e08 	add.w	lr, r5, #8
 801e84e:	4615      	mov	r5, r2
 801e850:	6818      	ldr	r0, [r3, #0]
 801e852:	3308      	adds	r3, #8
 801e854:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e858:	4694      	mov	ip, r2
 801e85a:	4573      	cmp	r3, lr
 801e85c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801e860:	4662      	mov	r2, ip
 801e862:	d1f5      	bne.n	801e850 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801e864:	6818      	ldr	r0, [r3, #0]
 801e866:	f8cc 0000 	str.w	r0, [ip]
 801e86a:	889b      	ldrh	r3, [r3, #4]
 801e86c:	f8ac 3004 	strh.w	r3, [ip, #4]
 801e870:	b2b3      	uxth	r3, r6
 801e872:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801e876:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801e87a:	1aca      	subs	r2, r1, r3
 801e87c:	1bcf      	subs	r7, r1, r7
 801e87e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801e882:	b292      	uxth	r2, r2
 801e884:	1afb      	subs	r3, r7, r3
 801e886:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801e88a:	10d2      	asrs	r2, r2, #3
 801e88c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801e890:	4302      	orrs	r2, r0
 801e892:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801e896:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801e89a:	e7b8      	b.n	801e80e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e89c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e89e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e8a2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801e8a4:	f640 6333 	movw	r3, #3635	; 0xe33
 801e8a8:	4299      	cmp	r1, r3
 801e8aa:	d110      	bne.n	801e8ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801e8ac:	6803      	ldr	r3, [r0, #0]
 801e8ae:	68db      	ldr	r3, [r3, #12]
 801e8b0:	4798      	blx	r3
 801e8b2:	7b41      	ldrb	r1, [r0, #13]
 801e8b4:	00cb      	lsls	r3, r1, #3
 801e8b6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e8ba:	7a03      	ldrb	r3, [r0, #8]
 801e8bc:	0648      	lsls	r0, r1, #25
 801e8be:	ea43 0302 	orr.w	r3, r3, r2
 801e8c2:	bf44      	itt	mi
 801e8c4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e8c8:	b21b      	sxthmi	r3, r3
 801e8ca:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e8ce:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801e8d2:	462a      	mov	r2, r5
 801e8d4:	f105 0c08 	add.w	ip, r5, #8
 801e8d8:	443b      	add	r3, r7
 801e8da:	4433      	add	r3, r6
 801e8dc:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801e8e0:	b29b      	uxth	r3, r3
 801e8e2:	4635      	mov	r5, r6
 801e8e4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e8e8:	6810      	ldr	r0, [r2, #0]
 801e8ea:	3208      	adds	r2, #8
 801e8ec:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801e8f0:	4637      	mov	r7, r6
 801e8f2:	4562      	cmp	r2, ip
 801e8f4:	c703      	stmia	r7!, {r0, r1}
 801e8f6:	463e      	mov	r6, r7
 801e8f8:	d1f6      	bne.n	801e8e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801e8fa:	6810      	ldr	r0, [r2, #0]
 801e8fc:	6038      	str	r0, [r7, #0]
 801e8fe:	8892      	ldrh	r2, [r2, #4]
 801e900:	80ba      	strh	r2, [r7, #4]
 801e902:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e906:	10db      	asrs	r3, r3, #3
 801e908:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e90c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e910:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e914:	4313      	orrs	r3, r2
 801e916:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801e91a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e91e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801e922:	1a9b      	subs	r3, r3, r2
 801e924:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801e928:	e771      	b.n	801e80e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e92a:	f023 0204 	bic.w	r2, r3, #4
 801e92e:	f640 611b 	movw	r1, #3611	; 0xe1b
 801e932:	428a      	cmp	r2, r1
 801e934:	d003      	beq.n	801e93e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801e936:	f640 621d 	movw	r2, #3613	; 0xe1d
 801e93a:	4293      	cmp	r3, r2
 801e93c:	d120      	bne.n	801e980 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801e93e:	3b01      	subs	r3, #1
 801e940:	4602      	mov	r2, r0
 801e942:	4629      	mov	r1, r5
 801e944:	4620      	mov	r0, r4
 801e946:	b29b      	uxth	r3, r3
 801e948:	f7ff ff4b 	bl	801e7e2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e94c:	7b41      	ldrb	r1, [r0, #13]
 801e94e:	00cb      	lsls	r3, r1, #3
 801e950:	0649      	lsls	r1, r1, #25
 801e952:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e956:	7a03      	ldrb	r3, [r0, #8]
 801e958:	ea43 0302 	orr.w	r3, r3, r2
 801e95c:	bf44      	itt	mi
 801e95e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e962:	b21b      	sxthmi	r3, r3
 801e964:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e968:	7b6b      	ldrb	r3, [r5, #13]
 801e96a:	7aaa      	ldrb	r2, [r5, #10]
 801e96c:	005b      	lsls	r3, r3, #1
 801e96e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e972:	4313      	orrs	r3, r2
 801e974:	115a      	asrs	r2, r3, #5
 801e976:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801e97a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801e97e:	e035      	b.n	801e9ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801e980:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801e984:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801e988:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801e98c:	7a2a      	ldrb	r2, [r5, #8]
 801e98e:	ea42 0201 	orr.w	r2, r2, r1
 801e992:	f640 6109 	movw	r1, #3593	; 0xe09
 801e996:	bf1c      	itt	ne
 801e998:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801e99c:	b212      	sxthne	r2, r2
 801e99e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801e9a2:	f023 0210 	bic.w	r2, r3, #16
 801e9a6:	428a      	cmp	r2, r1
 801e9a8:	d003      	beq.n	801e9b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801e9aa:	f640 6213 	movw	r2, #3603	; 0xe13
 801e9ae:	4293      	cmp	r3, r2
 801e9b0:	d129      	bne.n	801ea06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801e9b2:	7b6e      	ldrb	r6, [r5, #13]
 801e9b4:	4629      	mov	r1, r5
 801e9b6:	0076      	lsls	r6, r6, #1
 801e9b8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801e9bc:	7aae      	ldrb	r6, [r5, #10]
 801e9be:	4316      	orrs	r6, r2
 801e9c0:	f640 6213 	movw	r2, #3603	; 0xe13
 801e9c4:	4293      	cmp	r3, r2
 801e9c6:	4602      	mov	r2, r0
 801e9c8:	4620      	mov	r0, r4
 801e9ca:	bf16      	itet	ne
 801e9cc:	f103 33ff 	addne.w	r3, r3, #4294967295
 801e9d0:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801e9d4:	b29b      	uxthne	r3, r3
 801e9d6:	f7ff ff04 	bl	801e7e2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e9da:	7b43      	ldrb	r3, [r0, #13]
 801e9dc:	7a82      	ldrb	r2, [r0, #10]
 801e9de:	005b      	lsls	r3, r3, #1
 801e9e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e9e4:	4313      	orrs	r3, r2
 801e9e6:	1af6      	subs	r6, r6, r3
 801e9e8:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801e9ec:	7b69      	ldrb	r1, [r5, #13]
 801e9ee:	00cb      	lsls	r3, r1, #3
 801e9f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e9f4:	7a2b      	ldrb	r3, [r5, #8]
 801e9f6:	4313      	orrs	r3, r2
 801e9f8:	064a      	lsls	r2, r1, #25
 801e9fa:	bf44      	itt	mi
 801e9fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ea00:	b21b      	sxthmi	r3, r3
 801ea02:	1bdb      	subs	r3, r3, r7
 801ea04:	e747      	b.n	801e896 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801ea06:	2300      	movs	r3, #0
 801ea08:	e7b7      	b.n	801e97a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801ea0a:	bf00      	nop
 801ea0c:	3fc00079 	.word	0x3fc00079

0801ea10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ea10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ea14:	4604      	mov	r4, r0
 801ea16:	b942      	cbnz	r2, 801ea2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801ea18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ea1c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801ea20:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801ea24:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ea28:	e047      	b.n	801eaba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ea2a:	7b51      	ldrb	r1, [r2, #13]
 801ea2c:	8893      	ldrh	r3, [r2, #4]
 801ea2e:	010d      	lsls	r5, r1, #4
 801ea30:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801ea34:	79d5      	ldrb	r5, [r2, #7]
 801ea36:	4305      	orrs	r5, r0
 801ea38:	2d04      	cmp	r5, #4
 801ea3a:	bfcc      	ite	gt
 801ea3c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801ea40:	f04f 0e01 	movle.w	lr, #1
 801ea44:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801ea48:	f200 80ab 	bhi.w	801eba2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801ea4c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801ea50:	4283      	cmp	r3, r0
 801ea52:	d216      	bcs.n	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ea54:	f240 605b 	movw	r0, #1627	; 0x65b
 801ea58:	4283      	cmp	r3, r0
 801ea5a:	d859      	bhi.n	801eb10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801ea5c:	f240 6057 	movw	r0, #1623	; 0x657
 801ea60:	4283      	cmp	r3, r0
 801ea62:	d20e      	bcs.n	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ea64:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ea68:	d24a      	bcs.n	801eb00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801ea6a:	f240 604e 	movw	r0, #1614	; 0x64e
 801ea6e:	4283      	cmp	r3, r0
 801ea70:	d207      	bcs.n	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ea72:	f240 601a 	movw	r0, #1562	; 0x61a
 801ea76:	4283      	cmp	r3, r0
 801ea78:	d02a      	beq.n	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ea7a:	d821      	bhi.n	801eac0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801ea7c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801ea80:	d35b      	bcc.n	801eb3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ea82:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801ea86:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ea8a:	f040 80d0 	bne.w	801ec2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ea8e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801ea92:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ea96:	f040 80ca 	bne.w	801ec2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ea9a:	00cb      	lsls	r3, r1, #3
 801ea9c:	0649      	lsls	r1, r1, #25
 801ea9e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801eaa2:	7a13      	ldrb	r3, [r2, #8]
 801eaa4:	ea43 0300 	orr.w	r3, r3, r0
 801eaa8:	bf44      	itt	mi
 801eaaa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801eaae:	b21b      	sxthmi	r3, r3
 801eab0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801eab4:	1b5d      	subs	r5, r3, r5
 801eab6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801eaba:	4610      	mov	r0, r2
 801eabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eac0:	f240 604b 	movw	r0, #1611	; 0x64b
 801eac4:	4283      	cmp	r3, r0
 801eac6:	d338      	bcc.n	801eb3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801eac8:	f240 604c 	movw	r0, #1612	; 0x64c
 801eacc:	4283      	cmp	r3, r0
 801eace:	d9d8      	bls.n	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ead0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801ead4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801ead8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801eadc:	f040 80f3 	bne.w	801ecc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801eae0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801eae4:	f040 80ef 	bne.w	801ecc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801eae8:	00cb      	lsls	r3, r1, #3
 801eaea:	064e      	lsls	r6, r1, #25
 801eaec:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801eaf0:	7a13      	ldrb	r3, [r2, #8]
 801eaf2:	ea43 0300 	orr.w	r3, r3, r0
 801eaf6:	bf44      	itt	mi
 801eaf8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801eafc:	b21b      	sxthmi	r3, r3
 801eafe:	e7d9      	b.n	801eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801eb00:	f240 6054 	movw	r0, #1620	; 0x654
 801eb04:	4283      	cmp	r3, r0
 801eb06:	d8e3      	bhi.n	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801eb08:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801eb0c:	d9e0      	bls.n	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801eb0e:	e7b8      	b.n	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801eb10:	f240 6074 	movw	r0, #1652	; 0x674
 801eb14:	4283      	cmp	r3, r0
 801eb16:	d0b4      	beq.n	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801eb18:	d82d      	bhi.n	801eb76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801eb1a:	f240 605e 	movw	r0, #1630	; 0x65e
 801eb1e:	4283      	cmp	r3, r0
 801eb20:	d804      	bhi.n	801eb2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801eb22:	f240 605d 	movw	r0, #1629	; 0x65d
 801eb26:	4283      	cmp	r3, r0
 801eb28:	d3d2      	bcc.n	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801eb2a:	e7aa      	b.n	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801eb2c:	f240 605f 	movw	r0, #1631	; 0x65f
 801eb30:	4283      	cmp	r3, r0
 801eb32:	d0cd      	beq.n	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801eb34:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801eb38:	d0a3      	beq.n	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801eb3a:	00cb      	lsls	r3, r1, #3
 801eb3c:	0649      	lsls	r1, r1, #25
 801eb3e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801eb42:	7a13      	ldrb	r3, [r2, #8]
 801eb44:	ea43 0300 	orr.w	r3, r3, r0
 801eb48:	bf44      	itt	mi
 801eb4a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801eb4e:	b21b      	sxthmi	r3, r3
 801eb50:	1b5d      	subs	r5, r3, r5
 801eb52:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801eb56:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801eb5a:	7b53      	ldrb	r3, [r2, #13]
 801eb5c:	015b      	lsls	r3, r3, #5
 801eb5e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801eb62:	7993      	ldrb	r3, [r2, #6]
 801eb64:	430b      	orrs	r3, r1
 801eb66:	2105      	movs	r1, #5
 801eb68:	005b      	lsls	r3, r3, #1
 801eb6a:	fb93 f3f1 	sdiv	r3, r3, r1
 801eb6e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801eb72:	440b      	add	r3, r1
 801eb74:	e756      	b.n	801ea24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801eb76:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801eb7a:	4283      	cmp	r3, r0
 801eb7c:	d809      	bhi.n	801eb92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801eb7e:	f240 60df 	movw	r0, #1759	; 0x6df
 801eb82:	4283      	cmp	r3, r0
 801eb84:	f4bf af7d 	bcs.w	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801eb88:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801eb8c:	2b05      	cmp	r3, #5
 801eb8e:	d8d4      	bhi.n	801eb3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801eb90:	e777      	b.n	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801eb92:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801eb96:	4283      	cmp	r3, r0
 801eb98:	d09a      	beq.n	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801eb9a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801eb9e:	4283      	cmp	r3, r0
 801eba0:	e7ca      	b.n	801eb38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801eba2:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801eba6:	d22b      	bcs.n	801ec00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801eba8:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ebac:	4283      	cmp	r3, r0
 801ebae:	d28f      	bcs.n	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ebb0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ebb4:	4283      	cmp	r3, r0
 801ebb6:	d816      	bhi.n	801ebe6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801ebb8:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ebbc:	4283      	cmp	r3, r0
 801ebbe:	f4bf af60 	bcs.w	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ebc2:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ebc6:	4283      	cmp	r3, r0
 801ebc8:	d80a      	bhi.n	801ebe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801ebca:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ebce:	4283      	cmp	r3, r0
 801ebd0:	f4bf af57 	bcs.w	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ebd4:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ebd8:	4283      	cmp	r3, r0
 801ebda:	f43f af79 	beq.w	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ebde:	e7ac      	b.n	801eb3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ebe0:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ebe4:	e7f8      	b.n	801ebd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801ebe6:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ebea:	4283      	cmp	r3, r0
 801ebec:	d802      	bhi.n	801ebf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801ebee:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ebf2:	e798      	b.n	801eb26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801ebf4:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ebf8:	4283      	cmp	r3, r0
 801ebfa:	f47f af42 	bne.w	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ebfe:	e767      	b.n	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ec00:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ec04:	4283      	cmp	r3, r0
 801ec06:	f43f af63 	beq.w	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ec0a:	d802      	bhi.n	801ec12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801ec0c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ec10:	e7f2      	b.n	801ebf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801ec12:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ec16:	4283      	cmp	r3, r0
 801ec18:	d805      	bhi.n	801ec26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801ec1a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ec1e:	4283      	cmp	r3, r0
 801ec20:	f4ff af2f 	bcc.w	801ea82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ec24:	e754      	b.n	801ead0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ec26:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ec2a:	4283      	cmp	r3, r0
 801ec2c:	e7af      	b.n	801eb8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801ec2e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ec32:	4617      	mov	r7, r2
 801ec34:	f102 0808 	add.w	r8, r2, #8
 801ec38:	4666      	mov	r6, ip
 801ec3a:	6838      	ldr	r0, [r7, #0]
 801ec3c:	3708      	adds	r7, #8
 801ec3e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ec42:	46e6      	mov	lr, ip
 801ec44:	4547      	cmp	r7, r8
 801ec46:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ec4a:	46f4      	mov	ip, lr
 801ec4c:	d1f5      	bne.n	801ec3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801ec4e:	6838      	ldr	r0, [r7, #0]
 801ec50:	f8ce 0000 	str.w	r0, [lr]
 801ec54:	88b9      	ldrh	r1, [r7, #4]
 801ec56:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ec5a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ec5e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ec62:	d009      	beq.n	801ec78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801ec64:	7b51      	ldrb	r1, [r2, #13]
 801ec66:	7992      	ldrb	r2, [r2, #6]
 801ec68:	0149      	lsls	r1, r1, #5
 801ec6a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ec6e:	4311      	orrs	r1, r2
 801ec70:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ec74:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ec78:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ec7c:	b2ad      	uxth	r5, r5
 801ec7e:	d00d      	beq.n	801ec9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801ec80:	442b      	add	r3, r5
 801ec82:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ec86:	b29b      	uxth	r3, r3
 801ec88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ec8c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ec90:	10db      	asrs	r3, r3, #3
 801ec92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ec96:	4313      	orrs	r3, r2
 801ec98:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ec9c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801eca0:	00cb      	lsls	r3, r1, #3
 801eca2:	064f      	lsls	r7, r1, #25
 801eca4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801eca8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ecac:	ea43 0302 	orr.w	r3, r3, r2
 801ecb0:	bf44      	itt	mi
 801ecb2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ecb6:	b21b      	sxthmi	r3, r3
 801ecb8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ecbc:	1b5b      	subs	r3, r3, r5
 801ecbe:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801ecc2:	4632      	mov	r2, r6
 801ecc4:	e6f9      	b.n	801eaba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ecc6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ecca:	4617      	mov	r7, r2
 801eccc:	f102 0908 	add.w	r9, r2, #8
 801ecd0:	4666      	mov	r6, ip
 801ecd2:	6838      	ldr	r0, [r7, #0]
 801ecd4:	3708      	adds	r7, #8
 801ecd6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ecda:	46e0      	mov	r8, ip
 801ecdc:	454f      	cmp	r7, r9
 801ecde:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ece2:	46c4      	mov	ip, r8
 801ece4:	d1f5      	bne.n	801ecd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801ece6:	6838      	ldr	r0, [r7, #0]
 801ece8:	f8c8 0000 	str.w	r0, [r8]
 801ecec:	88b9      	ldrh	r1, [r7, #4]
 801ecee:	f8a8 1004 	strh.w	r1, [r8, #4]
 801ecf2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ecf6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ecfa:	d009      	beq.n	801ed10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801ecfc:	7b51      	ldrb	r1, [r2, #13]
 801ecfe:	7992      	ldrb	r2, [r2, #6]
 801ed00:	0149      	lsls	r1, r1, #5
 801ed02:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ed06:	4311      	orrs	r1, r2
 801ed08:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ed0c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ed10:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ed14:	d00e      	beq.n	801ed34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801ed16:	eba3 030e 	sub.w	r3, r3, lr
 801ed1a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ed1e:	b29b      	uxth	r3, r3
 801ed20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ed24:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ed28:	10db      	asrs	r3, r3, #3
 801ed2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ed2e:	4313      	orrs	r3, r2
 801ed30:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ed34:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801ed38:	00cb      	lsls	r3, r1, #3
 801ed3a:	0648      	lsls	r0, r1, #25
 801ed3c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ed40:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ed44:	ea43 0302 	orr.w	r3, r3, r2
 801ed48:	bf44      	itt	mi
 801ed4a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ed4e:	b21b      	sxthmi	r3, r3
 801ed50:	1b5d      	subs	r5, r3, r5
 801ed52:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ed56:	e7b4      	b.n	801ecc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801ed58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ed58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed5c:	461e      	mov	r6, r3
 801ed5e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ed60:	4604      	mov	r4, r0
 801ed62:	4617      	mov	r7, r2
 801ed64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ed68:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ed6c:	f7ea f8c6 	bl	8008efc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ed70:	4605      	mov	r5, r0
 801ed72:	b918      	cbnz	r0, 801ed7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801ed74:	6030      	str	r0, [r6, #0]
 801ed76:	4628      	mov	r0, r5
 801ed78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed7c:	683b      	ldr	r3, [r7, #0]
 801ed7e:	4601      	mov	r1, r0
 801ed80:	4638      	mov	r0, r7
 801ed82:	68db      	ldr	r3, [r3, #12]
 801ed84:	4798      	blx	r3
 801ed86:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ed8a:	4602      	mov	r2, r0
 801ed8c:	6030      	str	r0, [r6, #0]
 801ed8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ed92:	d213      	bcs.n	801edbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801ed94:	4643      	mov	r3, r8
 801ed96:	4639      	mov	r1, r7
 801ed98:	4620      	mov	r0, r4
 801ed9a:	f7ff fe39 	bl	801ea10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ed9e:	6030      	str	r0, [r6, #0]
 801eda0:	6833      	ldr	r3, [r6, #0]
 801eda2:	b143      	cbz	r3, 801edb6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801eda4:	7b5a      	ldrb	r2, [r3, #13]
 801eda6:	7a9b      	ldrb	r3, [r3, #10]
 801eda8:	0052      	lsls	r2, r2, #1
 801edaa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801edae:	4313      	orrs	r3, r2
 801edb0:	bf0c      	ite	eq
 801edb2:	2301      	moveq	r3, #1
 801edb4:	2300      	movne	r3, #0
 801edb6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801edba:	e7dc      	b.n	801ed76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801edbc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801edc0:	b29b      	uxth	r3, r3
 801edc2:	2b7f      	cmp	r3, #127	; 0x7f
 801edc4:	d804      	bhi.n	801edd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801edc6:	4639      	mov	r1, r7
 801edc8:	4620      	mov	r0, r4
 801edca:	f7ff fd15 	bl	801e7f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801edce:	e7e6      	b.n	801ed9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801edd0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d0e3      	beq.n	801eda0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801edd8:	f640 1302 	movw	r3, #2306	; 0x902
 801eddc:	429d      	cmp	r5, r3
 801edde:	d1df      	bne.n	801eda0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ede0:	4601      	mov	r1, r0
 801ede2:	4620      	mov	r0, r4
 801ede4:	f7ff fcd9 	bl	801e79a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ede8:	e7d9      	b.n	801ed9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801edea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801edea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edee:	461e      	mov	r6, r3
 801edf0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801edf2:	4604      	mov	r4, r0
 801edf4:	4617      	mov	r7, r2
 801edf6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801edfa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801edfe:	f7ea f87d 	bl	8008efc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ee02:	4605      	mov	r5, r0
 801ee04:	b918      	cbnz	r0, 801ee0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801ee06:	6030      	str	r0, [r6, #0]
 801ee08:	4628      	mov	r0, r5
 801ee0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee0e:	683b      	ldr	r3, [r7, #0]
 801ee10:	4601      	mov	r1, r0
 801ee12:	4638      	mov	r0, r7
 801ee14:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ee18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ee1c:	47c8      	blx	r9
 801ee1e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ee22:	4602      	mov	r2, r0
 801ee24:	6030      	str	r0, [r6, #0]
 801ee26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ee2a:	d213      	bcs.n	801ee54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801ee2c:	4643      	mov	r3, r8
 801ee2e:	4639      	mov	r1, r7
 801ee30:	4620      	mov	r0, r4
 801ee32:	f7ff fded 	bl	801ea10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ee36:	6030      	str	r0, [r6, #0]
 801ee38:	6833      	ldr	r3, [r6, #0]
 801ee3a:	b143      	cbz	r3, 801ee4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801ee3c:	7b5a      	ldrb	r2, [r3, #13]
 801ee3e:	7a9b      	ldrb	r3, [r3, #10]
 801ee40:	0052      	lsls	r2, r2, #1
 801ee42:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ee46:	4313      	orrs	r3, r2
 801ee48:	bf0c      	ite	eq
 801ee4a:	2301      	moveq	r3, #1
 801ee4c:	2300      	movne	r3, #0
 801ee4e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ee52:	e7d9      	b.n	801ee08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801ee54:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ee58:	b29b      	uxth	r3, r3
 801ee5a:	2b7f      	cmp	r3, #127	; 0x7f
 801ee5c:	d804      	bhi.n	801ee68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801ee5e:	4639      	mov	r1, r7
 801ee60:	4620      	mov	r0, r4
 801ee62:	f7ff fcc9 	bl	801e7f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ee66:	e7e6      	b.n	801ee36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801ee68:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	d0e3      	beq.n	801ee38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801ee70:	f640 1302 	movw	r3, #2306	; 0x902
 801ee74:	429d      	cmp	r5, r3
 801ee76:	d1df      	bne.n	801ee38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801ee78:	4601      	mov	r1, r0
 801ee7a:	4620      	mov	r0, r4
 801ee7c:	f7ff fc8d 	bl	801e79a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ee80:	e7d9      	b.n	801ee36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801ee82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ee82:	b510      	push	{r4, lr}
 801ee84:	4604      	mov	r4, r0
 801ee86:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801ee8a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ee8c:	b1e1      	cbz	r1, 801eec8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801ee8e:	2b0a      	cmp	r3, #10
 801ee90:	d02d      	beq.n	801eeee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ee92:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801ee94:	3901      	subs	r1, #1
 801ee96:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ee9a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801ee9c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801eea0:	1c51      	adds	r1, r2, #1
 801eea2:	b289      	uxth	r1, r1
 801eea4:	2901      	cmp	r1, #1
 801eea6:	bf8a      	itet	hi
 801eea8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801eeac:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801eeae:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801eeb0:	1c5a      	adds	r2, r3, #1
 801eeb2:	8722      	strh	r2, [r4, #56]	; 0x38
 801eeb4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801eeb6:	4413      	add	r3, r2
 801eeb8:	b29b      	uxth	r3, r3
 801eeba:	2b09      	cmp	r3, #9
 801eebc:	bf88      	it	hi
 801eebe:	3b0a      	subhi	r3, #10
 801eec0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eec4:	8458      	strh	r0, [r3, #34]	; 0x22
 801eec6:	e7de      	b.n	801ee86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801eec8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801eeca:	2b0a      	cmp	r3, #10
 801eecc:	d00f      	beq.n	801eeee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801eece:	4620      	mov	r0, r4
 801eed0:	f7ff fc11 	bl	801e6f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801eed4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801eed6:	1c5a      	adds	r2, r3, #1
 801eed8:	8722      	strh	r2, [r4, #56]	; 0x38
 801eeda:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801eedc:	4413      	add	r3, r2
 801eede:	b29b      	uxth	r3, r3
 801eee0:	2b09      	cmp	r3, #9
 801eee2:	bf88      	it	hi
 801eee4:	3b0a      	subhi	r3, #10
 801eee6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eeea:	8458      	strh	r0, [r3, #34]	; 0x22
 801eeec:	e7ec      	b.n	801eec8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801eeee:	bd10      	pop	{r4, pc}

0801eef0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801eef0:	b538      	push	{r3, r4, r5, lr}
 801eef2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801eef4:	4604      	mov	r4, r0
 801eef6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801eefa:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801eefc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801eefe:	3a01      	subs	r2, #1
 801ef00:	8702      	strh	r2, [r0, #56]	; 0x38
 801ef02:	1c5a      	adds	r2, r3, #1
 801ef04:	b292      	uxth	r2, r2
 801ef06:	2a09      	cmp	r2, #9
 801ef08:	bf8a      	itet	hi
 801ef0a:	3b09      	subhi	r3, #9
 801ef0c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801ef0e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801ef10:	f7ff ffb7 	bl	801ee82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ef14:	8c23      	ldrh	r3, [r4, #32]
 801ef16:	2b01      	cmp	r3, #1
 801ef18:	bf9c      	itt	ls
 801ef1a:	3301      	addls	r3, #1
 801ef1c:	8423      	strhls	r3, [r4, #32]
 801ef1e:	8be3      	ldrh	r3, [r4, #30]
 801ef20:	b90b      	cbnz	r3, 801ef26 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801ef22:	2302      	movs	r3, #2
 801ef24:	83e3      	strh	r3, [r4, #30]
 801ef26:	8be3      	ldrh	r3, [r4, #30]
 801ef28:	4628      	mov	r0, r5
 801ef2a:	3b01      	subs	r3, #1
 801ef2c:	b29b      	uxth	r3, r3
 801ef2e:	83e3      	strh	r3, [r4, #30]
 801ef30:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ef34:	8365      	strh	r5, [r4, #26]
 801ef36:	bd38      	pop	{r3, r4, r5, pc}

0801ef38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ef38:	428a      	cmp	r2, r1
 801ef3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef3e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801ef40:	d932      	bls.n	801efa8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801ef42:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801ef44:	1a54      	subs	r4, r2, r1
 801ef46:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801ef4a:	19ee      	adds	r6, r5, r7
 801ef4c:	fa1f fe84 	uxth.w	lr, r4
 801ef50:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801ef54:	3e01      	subs	r6, #1
 801ef56:	b2b4      	uxth	r4, r6
 801ef58:	eba4 090e 	sub.w	r9, r4, lr
 801ef5c:	fa1f f989 	uxth.w	r9, r9
 801ef60:	2c09      	cmp	r4, #9
 801ef62:	4626      	mov	r6, r4
 801ef64:	bf88      	it	hi
 801ef66:	f1a4 060a 	subhi.w	r6, r4, #10
 801ef6a:	f1bc 0f00 	cmp.w	ip, #0
 801ef6e:	f104 34ff 	add.w	r4, r4, #4294967295
 801ef72:	bf08      	it	eq
 801ef74:	f04f 0c02 	moveq.w	ip, #2
 801ef78:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ef7c:	b2a4      	uxth	r4, r4
 801ef7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ef82:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801ef86:	454c      	cmp	r4, r9
 801ef88:	fa1f fc8c 	uxth.w	ip, ip
 801ef8c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ef90:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801ef94:	d1e4      	bne.n	801ef60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801ef96:	eba5 050e 	sub.w	r5, r5, lr
 801ef9a:	eb0e 0408 	add.w	r4, lr, r8
 801ef9e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801efa2:	8705      	strh	r5, [r0, #56]	; 0x38
 801efa4:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801efa8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801efaa:	250a      	movs	r5, #10
 801efac:	1a64      	subs	r4, r4, r1
 801efae:	4439      	add	r1, r7
 801efb0:	b289      	uxth	r1, r1
 801efb2:	8704      	strh	r4, [r0, #56]	; 0x38
 801efb4:	2909      	cmp	r1, #9
 801efb6:	bf88      	it	hi
 801efb8:	390a      	subhi	r1, #10
 801efba:	86c1      	strh	r1, [r0, #54]	; 0x36
 801efbc:	b18a      	cbz	r2, 801efe2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801efbe:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801efc0:	3a01      	subs	r2, #1
 801efc2:	3101      	adds	r1, #1
 801efc4:	b292      	uxth	r2, r2
 801efc6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801efca:	8701      	strh	r1, [r0, #56]	; 0x38
 801efcc:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801efce:	b901      	cbnz	r1, 801efd2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801efd0:	86c5      	strh	r5, [r0, #54]	; 0x36
 801efd2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801efd4:	3901      	subs	r1, #1
 801efd6:	b289      	uxth	r1, r1
 801efd8:	86c1      	strh	r1, [r0, #54]	; 0x36
 801efda:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801efde:	844c      	strh	r4, [r1, #34]	; 0x22
 801efe0:	e7ec      	b.n	801efbc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801efe2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801efe6:	f7ff bf4c 	b.w	801ee82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801efea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801efea:	b570      	push	{r4, r5, r6, lr}
 801efec:	2500      	movs	r5, #0
 801efee:	4295      	cmp	r5, r2
 801eff0:	d011      	beq.n	801f016 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801eff2:	8bc4      	ldrh	r4, [r0, #30]
 801eff4:	f831 6b02 	ldrh.w	r6, [r1], #2
 801eff8:	4414      	add	r4, r2
 801effa:	3c01      	subs	r4, #1
 801effc:	1b64      	subs	r4, r4, r5
 801effe:	b2a4      	uxth	r4, r4
 801f000:	2c01      	cmp	r4, #1
 801f002:	bf88      	it	hi
 801f004:	3c02      	subhi	r4, #2
 801f006:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f00a:	8b64      	ldrh	r4, [r4, #26]
 801f00c:	42b4      	cmp	r4, r6
 801f00e:	d117      	bne.n	801f040 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801f010:	3501      	adds	r5, #1
 801f012:	b2ad      	uxth	r5, r5
 801f014:	e7eb      	b.n	801efee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801f016:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f01a:	2400      	movs	r4, #0
 801f01c:	4413      	add	r3, r2
 801f01e:	b2a2      	uxth	r2, r4
 801f020:	429a      	cmp	r2, r3
 801f022:	da0f      	bge.n	801f044 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801f024:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801f026:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801f02a:	3401      	adds	r4, #1
 801f02c:	4432      	add	r2, r6
 801f02e:	b292      	uxth	r2, r2
 801f030:	2a09      	cmp	r2, #9
 801f032:	bf88      	it	hi
 801f034:	3a0a      	subhi	r2, #10
 801f036:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f03a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801f03c:	42aa      	cmp	r2, r5
 801f03e:	d0ee      	beq.n	801f01e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801f040:	2000      	movs	r0, #0
 801f042:	bd70      	pop	{r4, r5, r6, pc}
 801f044:	2001      	movs	r0, #1
 801f046:	e7fc      	b.n	801f042 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801f048 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801f048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f04c:	4605      	mov	r5, r0
 801f04e:	4616      	mov	r6, r2
 801f050:	1c8c      	adds	r4, r1, #2
 801f052:	8809      	ldrh	r1, [r1, #0]
 801f054:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801f058:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801f05c:	42b3      	cmp	r3, r6
 801f05e:	d124      	bne.n	801f0aa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801f060:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801f064:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801f068:	f001 070f 	and.w	r7, r1, #15
 801f06c:	4652      	mov	r2, sl
 801f06e:	f8cd 8000 	str.w	r8, [sp]
 801f072:	464b      	mov	r3, r9
 801f074:	4621      	mov	r1, r4
 801f076:	4628      	mov	r0, r5
 801f078:	f7ff ffb7 	bl	801efea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801f07c:	4683      	mov	fp, r0
 801f07e:	b168      	cbz	r0, 801f09c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801f080:	eb0a 0109 	add.w	r1, sl, r9
 801f084:	463a      	mov	r2, r7
 801f086:	4628      	mov	r0, r5
 801f088:	4441      	add	r1, r8
 801f08a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801f08e:	4649      	mov	r1, r9
 801f090:	f7ff ff52 	bl	801ef38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801f094:	4658      	mov	r0, fp
 801f096:	b003      	add	sp, #12
 801f098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f09c:	eb07 010a 	add.w	r1, r7, sl
 801f0a0:	4449      	add	r1, r9
 801f0a2:	4441      	add	r1, r8
 801f0a4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801f0a8:	e7d2      	b.n	801f050 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801f0aa:	f04f 0b00 	mov.w	fp, #0
 801f0ae:	e7f1      	b.n	801f094 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801f0b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801f0b0:	b570      	push	{r4, r5, r6, lr}
 801f0b2:	8810      	ldrh	r0, [r2, #0]
 801f0b4:	4298      	cmp	r0, r3
 801f0b6:	d817      	bhi.n	801f0e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f0b8:	1e48      	subs	r0, r1, #1
 801f0ba:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801f0be:	4298      	cmp	r0, r3
 801f0c0:	d312      	bcc.n	801f0e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f0c2:	2400      	movs	r4, #0
 801f0c4:	428c      	cmp	r4, r1
 801f0c6:	d20f      	bcs.n	801f0e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f0c8:	1860      	adds	r0, r4, r1
 801f0ca:	1040      	asrs	r0, r0, #1
 801f0cc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801f0d0:	0085      	lsls	r5, r0, #2
 801f0d2:	42b3      	cmp	r3, r6
 801f0d4:	d902      	bls.n	801f0dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801f0d6:	3001      	adds	r0, #1
 801f0d8:	b284      	uxth	r4, r0
 801f0da:	e7f3      	b.n	801f0c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801f0dc:	d201      	bcs.n	801f0e2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801f0de:	b281      	uxth	r1, r0
 801f0e0:	e7f0      	b.n	801f0c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801f0e2:	442a      	add	r2, r5
 801f0e4:	8850      	ldrh	r0, [r2, #2]
 801f0e6:	bd70      	pop	{r4, r5, r6, pc}
 801f0e8:	2000      	movs	r0, #0
 801f0ea:	e7fc      	b.n	801f0e6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801f0ec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801f0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0f0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801f0f2:	4604      	mov	r4, r0
 801f0f4:	260b      	movs	r6, #11
 801f0f6:	886f      	ldrh	r7, [r5, #2]
 801f0f8:	087f      	lsrs	r7, r7, #1
 801f0fa:	3e01      	subs	r6, #1
 801f0fc:	d013      	beq.n	801f126 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801f0fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801f100:	462a      	mov	r2, r5
 801f102:	4639      	mov	r1, r7
 801f104:	4620      	mov	r0, r4
 801f106:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f10a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801f10e:	4643      	mov	r3, r8
 801f110:	f7ff ffce 	bl	801f0b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801f114:	b138      	cbz	r0, 801f126 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801f116:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801f11a:	4642      	mov	r2, r8
 801f11c:	4620      	mov	r0, r4
 801f11e:	f7ff ff93 	bl	801f048 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801f122:	2800      	cmp	r0, #0
 801f124:	d1e9      	bne.n	801f0fa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801f126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801f12c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801f12c:	b570      	push	{r4, r5, r6, lr}
 801f12e:	694a      	ldr	r2, [r1, #20]
 801f130:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801f132:	684b      	ldr	r3, [r1, #4]
 801f134:	1b54      	subs	r4, r2, r5
 801f136:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801f138:	f000 8106 	beq.w	801f348 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801f13c:	1b9b      	subs	r3, r3, r6
 801f13e:	d003      	beq.n	801f148 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f140:	4363      	muls	r3, r4
 801f142:	2210      	movs	r2, #16
 801f144:	fb93 f3f2 	sdiv	r3, r3, r2
 801f148:	680c      	ldr	r4, [r1, #0]
 801f14a:	698a      	ldr	r2, [r1, #24]
 801f14c:	1b65      	subs	r5, r4, r5
 801f14e:	f000 80fd 	beq.w	801f34c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801f152:	1b92      	subs	r2, r2, r6
 801f154:	d003      	beq.n	801f15e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f156:	436a      	muls	r2, r5
 801f158:	2410      	movs	r4, #16
 801f15a:	fb92 f2f4 	sdiv	r2, r2, r4
 801f15e:	1a9b      	subs	r3, r3, r2
 801f160:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801f388 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801f164:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f168:	460a      	mov	r2, r1
 801f16a:	ee07 3a90 	vmov	s15, r3
 801f16e:	f100 040c 	add.w	r4, r0, #12
 801f172:	4603      	mov	r3, r0
 801f174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f178:	ee67 7a84 	vmul.f32	s15, s15, s8
 801f17c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801f180:	eeb1 6a43 	vneg.f32	s12, s6
 801f184:	edd2 7a02 	vldr	s15, [r2, #8]
 801f188:	3214      	adds	r2, #20
 801f18a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801f18e:	ece3 6a01 	vstmia	r3!, {s13}
 801f192:	429c      	cmp	r4, r3
 801f194:	ed52 7a02 	vldr	s15, [r2, #-8]
 801f198:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f19c:	edc3 7a02 	vstr	s15, [r3, #8]
 801f1a0:	ed52 7a01 	vldr	s15, [r2, #-4]
 801f1a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f1a8:	edc3 7a05 	vstr	s15, [r3, #20]
 801f1ac:	d1ea      	bne.n	801f184 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801f1ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f1b0:	698b      	ldr	r3, [r1, #24]
 801f1b2:	edd0 4a02 	vldr	s9, [r0, #8]
 801f1b6:	1a9b      	subs	r3, r3, r2
 801f1b8:	edd0 3a00 	vldr	s7, [r0]
 801f1bc:	edd0 6a01 	vldr	s13, [r0, #4]
 801f1c0:	ee07 3a90 	vmov	s15, r3
 801f1c4:	684b      	ldr	r3, [r1, #4]
 801f1c6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801f1ca:	ed90 5a05 	vldr	s10, [r0, #20]
 801f1ce:	1a9b      	subs	r3, r3, r2
 801f1d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f1d4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801f1d8:	ed90 2a03 	vldr	s4, [r0, #12]
 801f1dc:	ee07 3a10 	vmov	s14, r3
 801f1e0:	edd0 5a04 	vldr	s11, [r0, #16]
 801f1e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801f1e8:	ed90 1a07 	vldr	s2, [r0, #28]
 801f1ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f1f0:	edd0 2a06 	vldr	s5, [r0, #24]
 801f1f4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801f1f8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801f1fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f200:	ee32 5a45 	vsub.f32	s10, s4, s10
 801f204:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f208:	ee67 7a83 	vmul.f32	s15, s15, s6
 801f20c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801f210:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f212:	694a      	ldr	r2, [r1, #20]
 801f214:	1b13      	subs	r3, r2, r4
 801f216:	ee07 3a10 	vmov	s14, r3
 801f21a:	680b      	ldr	r3, [r1, #0]
 801f21c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f220:	1b1b      	subs	r3, r3, r4
 801f222:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f226:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801f22a:	ee07 3a10 	vmov	s14, r3
 801f22e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f232:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f236:	eee6 4a87 	vfma.f32	s9, s13, s14
 801f23a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801f23e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801f242:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f244:	698b      	ldr	r3, [r1, #24]
 801f246:	1a9b      	subs	r3, r3, r2
 801f248:	ee06 3a90 	vmov	s13, r3
 801f24c:	684b      	ldr	r3, [r1, #4]
 801f24e:	1a9b      	subs	r3, r3, r2
 801f250:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f254:	ee07 3a10 	vmov	s14, r3
 801f258:	ee66 6a84 	vmul.f32	s13, s13, s8
 801f25c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f260:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801f264:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f268:	eee5 6a87 	vfma.f32	s13, s11, s14
 801f26c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801f270:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801f274:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f276:	694a      	ldr	r2, [r1, #20]
 801f278:	1b13      	subs	r3, r2, r4
 801f27a:	ee07 3a10 	vmov	s14, r3
 801f27e:	680b      	ldr	r3, [r1, #0]
 801f280:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f284:	1b1b      	subs	r3, r3, r4
 801f286:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f28a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801f28e:	ee07 3a10 	vmov	s14, r3
 801f292:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f296:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f29a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f29e:	edd0 5a08 	vldr	s11, [r0, #32]
 801f2a2:	ee31 1a65 	vsub.f32	s2, s2, s11
 801f2a6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801f2aa:	ee25 5a06 	vmul.f32	s10, s10, s12
 801f2ae:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801f2b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f2b4:	698b      	ldr	r3, [r1, #24]
 801f2b6:	1a9b      	subs	r3, r3, r2
 801f2b8:	ee07 3a10 	vmov	s14, r3
 801f2bc:	684b      	ldr	r3, [r1, #4]
 801f2be:	1a9b      	subs	r3, r3, r2
 801f2c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f2c4:	ee01 3a90 	vmov	s3, r3
 801f2c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f2cc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801f2d0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801f2d4:	ee61 1a84 	vmul.f32	s3, s3, s8
 801f2d8:	eea1 7a21 	vfma.f32	s14, s2, s3
 801f2dc:	ee27 7a03 	vmul.f32	s14, s14, s6
 801f2e0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801f2e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f2e6:	694a      	ldr	r2, [r1, #20]
 801f2e8:	1b13      	subs	r3, r2, r4
 801f2ea:	ee03 3a10 	vmov	s6, r3
 801f2ee:	680b      	ldr	r3, [r1, #0]
 801f2f0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f2f4:	1b1b      	subs	r3, r3, r4
 801f2f6:	ee23 3a04 	vmul.f32	s6, s6, s8
 801f2fa:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801f2fe:	ee03 3a10 	vmov	s6, r3
 801f302:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f306:	ee23 4a04 	vmul.f32	s8, s6, s8
 801f30a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801f30e:	ee25 6a86 	vmul.f32	s12, s11, s12
 801f312:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801f316:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801f31a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801f31e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801f322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f326:	dd13      	ble.n	801f350 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801f328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f32c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801f330:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f332:	eee3 7a87 	vfma.f32	s15, s7, s14
 801f336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f33e:	dd15      	ble.n	801f36c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801f340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f344:	6403      	str	r3, [r0, #64]	; 0x40
 801f346:	bd70      	pop	{r4, r5, r6, pc}
 801f348:	4623      	mov	r3, r4
 801f34a:	e6fd      	b.n	801f148 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f34c:	462a      	mov	r2, r5
 801f34e:	e706      	b.n	801f15e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f350:	d502      	bpl.n	801f358 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801f352:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f356:	e7e9      	b.n	801f32c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801f358:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801f35c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801f360:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801f364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f368:	dade      	bge.n	801f328 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801f36a:	e7f2      	b.n	801f352 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801f36c:	d502      	bpl.n	801f374 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801f36e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f372:	e7e7      	b.n	801f344 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801f374:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801f378:	eee3 4a86 	vfma.f32	s9, s7, s12
 801f37c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801f380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f384:	dadc      	bge.n	801f340 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801f386:	e7f2      	b.n	801f36e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801f388:	3d800000 	.word	0x3d800000

0801f38c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801f38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f390:	2714      	movs	r7, #20
 801f392:	435f      	muls	r7, r3
 801f394:	eb02 0c07 	add.w	ip, r2, r7
 801f398:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801f39c:	f115 0e0f 	adds.w	lr, r5, #15
 801f3a0:	f100 80a2 	bmi.w	801f4e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801f3a4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801f3a8:	9c08      	ldr	r4, [sp, #32]
 801f3aa:	2614      	movs	r6, #20
 801f3ac:	f8c0 e014 	str.w	lr, [r0, #20]
 801f3b0:	4366      	muls	r6, r4
 801f3b2:	eb02 0806 	add.w	r8, r2, r6
 801f3b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f3ba:	f115 040f 	adds.w	r4, r5, #15
 801f3be:	f100 809f 	bmi.w	801f500 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801f3c2:	1124      	asrs	r4, r4, #4
 801f3c4:	eba4 040e 	sub.w	r4, r4, lr
 801f3c8:	6184      	str	r4, [r0, #24]
 801f3ca:	2c00      	cmp	r4, #0
 801f3cc:	f000 808a 	beq.w	801f4e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801f3d0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801f3d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801f3d8:	5995      	ldr	r5, [r2, r6]
 801f3da:	eba4 0809 	sub.w	r8, r4, r9
 801f3de:	59d4      	ldr	r4, [r2, r7]
 801f3e0:	eba5 0a04 	sub.w	sl, r5, r4
 801f3e4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801f3e8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801f3ec:	fb0e fe05 	mul.w	lr, lr, r5
 801f3f0:	fb0a ee19 	mls	lr, sl, r9, lr
 801f3f4:	fb08 e404 	mla	r4, r8, r4, lr
 801f3f8:	3c01      	subs	r4, #1
 801f3fa:	19a4      	adds	r4, r4, r6
 801f3fc:	f100 808c 	bmi.w	801f518 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801f400:	fb94 fef6 	sdiv	lr, r4, r6
 801f404:	fb06 441e 	mls	r4, r6, lr, r4
 801f408:	f8c0 e000 	str.w	lr, [r0]
 801f40c:	6104      	str	r4, [r0, #16]
 801f40e:	2d00      	cmp	r5, #0
 801f410:	f2c0 8095 	blt.w	801f53e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801f414:	fb95 f4f6 	sdiv	r4, r5, r6
 801f418:	fb06 5514 	mls	r5, r6, r4, r5
 801f41c:	6044      	str	r4, [r0, #4]
 801f41e:	6085      	str	r5, [r0, #8]
 801f420:	60c6      	str	r6, [r0, #12]
 801f422:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f426:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f42a:	6945      	ldr	r5, [r0, #20]
 801f42c:	59d2      	ldr	r2, [r2, r7]
 801f42e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801f432:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801f560 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801f436:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801f43a:	ee07 4a10 	vmov	s14, r4
 801f43e:	6804      	ldr	r4, [r0, #0]
 801f440:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801f444:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f448:	ee07 2a90 	vmov	s15, r2
 801f44c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801f450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f454:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f458:	edd3 6a00 	vldr	s13, [r3]
 801f45c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f460:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801f464:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f468:	edc0 6a07 	vstr	s13, [r0, #28]
 801f46c:	edd0 6a01 	vldr	s13, [r0, #4]
 801f470:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801f474:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f478:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801f47c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f480:	ed80 6a08 	vstr	s12, [r0, #32]
 801f484:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801f486:	6242      	str	r2, [r0, #36]	; 0x24
 801f488:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801f48c:	ed93 6a03 	vldr	s12, [r3, #12]
 801f490:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f494:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801f498:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f49c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801f4a0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801f4a4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801f4a8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f4ac:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801f4b0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f4b2:	6302      	str	r2, [r0, #48]	; 0x30
 801f4b4:	ed93 6a06 	vldr	s12, [r3, #24]
 801f4b8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801f4bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f4c0:	eeb0 7a46 	vmov.f32	s14, s12
 801f4c4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801f4c8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f4cc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801f4d0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801f4d4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801f4d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f4dc:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801f4e0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801f4e2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f4e8:	2410      	movs	r4, #16
 801f4ea:	f1c5 0501 	rsb	r5, r5, #1
 801f4ee:	fb9e fef4 	sdiv	lr, lr, r4
 801f4f2:	f015 050f 	ands.w	r5, r5, #15
 801f4f6:	bf18      	it	ne
 801f4f8:	2501      	movne	r5, #1
 801f4fa:	ebae 0e05 	sub.w	lr, lr, r5
 801f4fe:	e753      	b.n	801f3a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801f500:	f04f 0910 	mov.w	r9, #16
 801f504:	f1c5 0501 	rsb	r5, r5, #1
 801f508:	fb94 f4f9 	sdiv	r4, r4, r9
 801f50c:	f015 050f 	ands.w	r5, r5, #15
 801f510:	bf18      	it	ne
 801f512:	2501      	movne	r5, #1
 801f514:	1b64      	subs	r4, r4, r5
 801f516:	e755      	b.n	801f3c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801f518:	4264      	negs	r4, r4
 801f51a:	fb94 fef6 	sdiv	lr, r4, r6
 801f51e:	f1ce 0800 	rsb	r8, lr, #0
 801f522:	fb06 441e 	mls	r4, r6, lr, r4
 801f526:	f8c0 8000 	str.w	r8, [r0]
 801f52a:	6104      	str	r4, [r0, #16]
 801f52c:	2c00      	cmp	r4, #0
 801f52e:	f43f af6e 	beq.w	801f40e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801f532:	ea6f 0e0e 	mvn.w	lr, lr
 801f536:	1b34      	subs	r4, r6, r4
 801f538:	f8c0 e000 	str.w	lr, [r0]
 801f53c:	e766      	b.n	801f40c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801f53e:	426d      	negs	r5, r5
 801f540:	fb95 f4f6 	sdiv	r4, r5, r6
 801f544:	f1c4 0e00 	rsb	lr, r4, #0
 801f548:	fb06 5514 	mls	r5, r6, r4, r5
 801f54c:	f8c0 e004 	str.w	lr, [r0, #4]
 801f550:	6085      	str	r5, [r0, #8]
 801f552:	2d00      	cmp	r5, #0
 801f554:	f43f af64 	beq.w	801f420 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801f558:	43e4      	mvns	r4, r4
 801f55a:	1b75      	subs	r5, r6, r5
 801f55c:	6044      	str	r4, [r0, #4]
 801f55e:	e75e      	b.n	801f41e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801f560:	3d800000 	.word	0x3d800000

0801f564 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801f564:	4b01      	ldr	r3, [pc, #4]	; (801f56c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801f566:	6018      	str	r0, [r3, #0]
 801f568:	4770      	bx	lr
 801f56a:	bf00      	nop
 801f56c:	240262c4 	.word	0x240262c4

0801f570 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801f570:	4b06      	ldr	r3, [pc, #24]	; (801f58c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801f572:	881a      	ldrh	r2, [r3, #0]
 801f574:	4282      	cmp	r2, r0
 801f576:	d807      	bhi.n	801f588 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801f578:	4b05      	ldr	r3, [pc, #20]	; (801f590 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801f57a:	881b      	ldrh	r3, [r3, #0]
 801f57c:	4413      	add	r3, r2
 801f57e:	4298      	cmp	r0, r3
 801f580:	bfac      	ite	ge
 801f582:	2000      	movge	r0, #0
 801f584:	2001      	movlt	r0, #1
 801f586:	4770      	bx	lr
 801f588:	2000      	movs	r0, #0
 801f58a:	4770      	bx	lr
 801f58c:	240262e4 	.word	0x240262e4
 801f590:	240262e8 	.word	0x240262e8

0801f594 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801f594:	b508      	push	{r3, lr}
 801f596:	4601      	mov	r1, r0
 801f598:	f7ff ffea 	bl	801f570 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f59c:	b118      	cbz	r0, 801f5a6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801f59e:	4b02      	ldr	r3, [pc, #8]	; (801f5a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801f5a0:	681b      	ldr	r3, [r3, #0]
 801f5a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801f5a6:	bd08      	pop	{r3, pc}
 801f5a8:	240262c8 	.word	0x240262c8

0801f5ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801f5ac:	b538      	push	{r3, r4, r5, lr}
 801f5ae:	4604      	mov	r4, r0
 801f5b0:	f7ff ffde 	bl	801f570 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f5b4:	b188      	cbz	r0, 801f5da <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801f5b6:	4b09      	ldr	r3, [pc, #36]	; (801f5dc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801f5b8:	881a      	ldrh	r2, [r3, #0]
 801f5ba:	4b09      	ldr	r3, [pc, #36]	; (801f5e0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801f5bc:	1aa4      	subs	r4, r4, r2
 801f5be:	220e      	movs	r2, #14
 801f5c0:	681d      	ldr	r5, [r3, #0]
 801f5c2:	4362      	muls	r2, r4
 801f5c4:	18ac      	adds	r4, r5, r2
 801f5c6:	7b23      	ldrb	r3, [r4, #12]
 801f5c8:	f013 0320 	ands.w	r3, r3, #32
 801f5cc:	bf17      	itett	ne
 801f5ce:	680b      	ldrne	r3, [r1, #0]
 801f5d0:	4618      	moveq	r0, r3
 801f5d2:	50ab      	strne	r3, [r5, r2]
 801f5d4:	684b      	ldrne	r3, [r1, #4]
 801f5d6:	bf18      	it	ne
 801f5d8:	6063      	strne	r3, [r4, #4]
 801f5da:	bd38      	pop	{r3, r4, r5, pc}
 801f5dc:	240262e4 	.word	0x240262e4
 801f5e0:	240262cc 	.word	0x240262cc

0801f5e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801f5e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f5e8:	4606      	mov	r6, r0
 801f5ea:	460c      	mov	r4, r1
 801f5ec:	f7ff ffc0 	bl	801f570 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f5f0:	b918      	cbnz	r0, 801f5fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801f5f2:	2000      	movs	r0, #0
 801f5f4:	b002      	add	sp, #8
 801f5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5fa:	4608      	mov	r0, r1
 801f5fc:	f7f9 ff5f 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801f600:	2800      	cmp	r0, #0
 801f602:	d1f6      	bne.n	801f5f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f604:	4b3f      	ldr	r3, [pc, #252]	; (801f704 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801f606:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801f708 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801f60a:	881d      	ldrh	r5, [r3, #0]
 801f60c:	f8d9 a000 	ldr.w	sl, [r9]
 801f610:	46c8      	mov	r8, r9
 801f612:	1b73      	subs	r3, r6, r5
 801f614:	250e      	movs	r5, #14
 801f616:	435d      	muls	r5, r3
 801f618:	eb0a 0705 	add.w	r7, sl, r5
 801f61c:	7b3b      	ldrb	r3, [r7, #12]
 801f61e:	f013 0f20 	tst.w	r3, #32
 801f622:	d0e6      	beq.n	801f5f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f624:	4621      	mov	r1, r4
 801f626:	4638      	mov	r0, r7
 801f628:	f7fd fb12 	bl	801cc50 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f62c:	2800      	cmp	r0, #0
 801f62e:	d1e1      	bne.n	801f5f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f630:	4639      	mov	r1, r7
 801f632:	4620      	mov	r0, r4
 801f634:	f7fd fb0c 	bl	801cc50 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f638:	b108      	cbz	r0, 801f63e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801f63a:	4621      	mov	r1, r4
 801f63c:	e020      	b.n	801f680 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801f63e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f642:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801f646:	429a      	cmp	r2, r3
 801f648:	d11e      	bne.n	801f688 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f64a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f64e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801f652:	429a      	cmp	r2, r3
 801f654:	d118      	bne.n	801f688 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f656:	6820      	ldr	r0, [r4, #0]
 801f658:	466b      	mov	r3, sp
 801f65a:	6861      	ldr	r1, [r4, #4]
 801f65c:	c303      	stmia	r3!, {r0, r1}
 801f65e:	4639      	mov	r1, r7
 801f660:	4668      	mov	r0, sp
 801f662:	f7fd fb1b 	bl	801cc9c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f666:	f8d9 3000 	ldr.w	r3, [r9]
 801f66a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801f66e:	442b      	add	r3, r5
 801f670:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f674:	4413      	add	r3, r2
 801f676:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801f67a:	4293      	cmp	r3, r2
 801f67c:	dc04      	bgt.n	801f688 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f67e:	4669      	mov	r1, sp
 801f680:	4630      	mov	r0, r6
 801f682:	f7ff ff93 	bl	801f5ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801f686:	e7b5      	b.n	801f5f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f688:	f8d8 3000 	ldr.w	r3, [r8]
 801f68c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f690:	442b      	add	r3, r5
 801f692:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f696:	4291      	cmp	r1, r2
 801f698:	d119      	bne.n	801f6ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f69a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f69e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f6a2:	4291      	cmp	r1, r2
 801f6a4:	d113      	bne.n	801f6ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f6a6:	6820      	ldr	r0, [r4, #0]
 801f6a8:	466a      	mov	r2, sp
 801f6aa:	6861      	ldr	r1, [r4, #4]
 801f6ac:	c203      	stmia	r2!, {r0, r1}
 801f6ae:	4619      	mov	r1, r3
 801f6b0:	4668      	mov	r0, sp
 801f6b2:	f7fd faf3 	bl	801cc9c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f6b6:	f8d8 3000 	ldr.w	r3, [r8]
 801f6ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f6be:	442b      	add	r3, r5
 801f6c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f6c4:	4413      	add	r3, r2
 801f6c6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f6ca:	4293      	cmp	r3, r2
 801f6cc:	ddd7      	ble.n	801f67e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801f6ce:	4620      	mov	r0, r4
 801f6d0:	f7f9 fef5 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801f6d4:	b990      	cbnz	r0, 801f6fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801f6d6:	88a7      	ldrh	r7, [r4, #4]
 801f6d8:	88e3      	ldrh	r3, [r4, #6]
 801f6da:	fb17 f703 	smulbb	r7, r7, r3
 801f6de:	f8d8 3000 	ldr.w	r3, [r8]
 801f6e2:	441d      	add	r5, r3
 801f6e4:	4628      	mov	r0, r5
 801f6e6:	f7f9 feea 	bl	80194be <_ZNK8touchgfx4Rect7isEmptyEv>
 801f6ea:	b948      	cbnz	r0, 801f700 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801f6ec:	88ab      	ldrh	r3, [r5, #4]
 801f6ee:	88ea      	ldrh	r2, [r5, #6]
 801f6f0:	fb13 f302 	smulbb	r3, r3, r2
 801f6f4:	42bb      	cmp	r3, r7
 801f6f6:	f6bf af7c 	bge.w	801f5f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f6fa:	e79e      	b.n	801f63a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801f6fc:	2700      	movs	r7, #0
 801f6fe:	e7ee      	b.n	801f6de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801f700:	2300      	movs	r3, #0
 801f702:	e7f7      	b.n	801f6f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801f704:	240262e4 	.word	0x240262e4
 801f708:	240262cc 	.word	0x240262cc

0801f70c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f70e:	4c24      	ldr	r4, [pc, #144]	; (801f7a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801f710:	6823      	ldr	r3, [r4, #0]
 801f712:	2b00      	cmp	r3, #0
 801f714:	d042      	beq.n	801f79c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f716:	4a23      	ldr	r2, [pc, #140]	; (801f7a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801f718:	4d23      	ldr	r5, [pc, #140]	; (801f7a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801f71a:	8811      	ldrh	r1, [r2, #0]
 801f71c:	f8b5 c000 	ldrh.w	ip, [r5]
 801f720:	4822      	ldr	r0, [pc, #136]	; (801f7ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801f722:	4461      	add	r1, ip
 801f724:	1c4a      	adds	r2, r1, #1
 801f726:	008f      	lsls	r7, r1, #2
 801f728:	f022 0201 	bic.w	r2, r2, #1
 801f72c:	19de      	adds	r6, r3, r7
 801f72e:	0412      	lsls	r2, r2, #16
 801f730:	6006      	str	r6, [r0, #0]
 801f732:	4e1f      	ldr	r6, [pc, #124]	; (801f7b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801f734:	0c12      	lsrs	r2, r2, #16
 801f736:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801f73a:	19da      	adds	r2, r3, r7
 801f73c:	6032      	str	r2, [r6, #0]
 801f73e:	220e      	movs	r2, #14
 801f740:	fb02 f20c 	mul.w	r2, r2, ip
 801f744:	3203      	adds	r2, #3
 801f746:	f022 0203 	bic.w	r2, r2, #3
 801f74a:	443a      	add	r2, r7
 801f74c:	4f19      	ldr	r7, [pc, #100]	; (801f7b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f74e:	4413      	add	r3, r2
 801f750:	603b      	str	r3, [r7, #0]
 801f752:	2300      	movs	r3, #0
 801f754:	4f18      	ldr	r7, [pc, #96]	; (801f7b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f756:	469c      	mov	ip, r3
 801f758:	803b      	strh	r3, [r7, #0]
 801f75a:	4f18      	ldr	r7, [pc, #96]	; (801f7bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f75c:	683f      	ldr	r7, [r7, #0]
 801f75e:	1aba      	subs	r2, r7, r2
 801f760:	4f17      	ldr	r7, [pc, #92]	; (801f7c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f762:	603a      	str	r2, [r7, #0]
 801f764:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801f768:	4a16      	ldr	r2, [pc, #88]	; (801f7c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f76a:	8013      	strh	r3, [r2, #0]
 801f76c:	428b      	cmp	r3, r1
 801f76e:	d10d      	bne.n	801f78c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801f770:	882d      	ldrh	r5, [r5, #0]
 801f772:	2300      	movs	r3, #0
 801f774:	6830      	ldr	r0, [r6, #0]
 801f776:	240e      	movs	r4, #14
 801f778:	429d      	cmp	r5, r3
 801f77a:	d90f      	bls.n	801f79c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f77c:	fb04 0203 	mla	r2, r4, r3, r0
 801f780:	3301      	adds	r3, #1
 801f782:	7b11      	ldrb	r1, [r2, #12]
 801f784:	f36f 1145 	bfc	r1, #5, #1
 801f788:	7311      	strb	r1, [r2, #12]
 801f78a:	e7f5      	b.n	801f778 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801f78c:	6822      	ldr	r2, [r4, #0]
 801f78e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801f792:	6802      	ldr	r2, [r0, #0]
 801f794:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801f798:	3301      	adds	r3, #1
 801f79a:	e7e7      	b.n	801f76c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801f79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f79e:	bf00      	nop
 801f7a0:	240262c8 	.word	0x240262c8
 801f7a4:	240262e4 	.word	0x240262e4
 801f7a8:	240262e8 	.word	0x240262e8
 801f7ac:	240262dc 	.word	0x240262dc
 801f7b0:	240262cc 	.word	0x240262cc
 801f7b4:	240262d4 	.word	0x240262d4
 801f7b8:	240262e6 	.word	0x240262e6
 801f7bc:	240262d0 	.word	0x240262d0
 801f7c0:	240262e0 	.word	0x240262e0
 801f7c4:	240262d8 	.word	0x240262d8

0801f7c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801f7c8:	4b06      	ldr	r3, [pc, #24]	; (801f7e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801f7ca:	681b      	ldr	r3, [r3, #0]
 801f7cc:	b943      	cbnz	r3, 801f7e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f7ce:	b139      	cbz	r1, 801f7e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f7d0:	4b05      	ldr	r3, [pc, #20]	; (801f7e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801f7d2:	801a      	strh	r2, [r3, #0]
 801f7d4:	4b05      	ldr	r3, [pc, #20]	; (801f7ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801f7d6:	6019      	str	r1, [r3, #0]
 801f7d8:	4b05      	ldr	r3, [pc, #20]	; (801f7f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801f7da:	6018      	str	r0, [r3, #0]
 801f7dc:	f7ff bf96 	b.w	801f70c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801f7e0:	4770      	bx	lr
 801f7e2:	bf00      	nop
 801f7e4:	240262d4 	.word	0x240262d4
 801f7e8:	240262e8 	.word	0x240262e8
 801f7ec:	240262d0 	.word	0x240262d0
 801f7f0:	240262c8 	.word	0x240262c8

0801f7f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801f7f4:	b470      	push	{r4, r5, r6}
 801f7f6:	4c07      	ldr	r4, [pc, #28]	; (801f814 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801f7f8:	4605      	mov	r5, r0
 801f7fa:	4610      	mov	r0, r2
 801f7fc:	9a03      	ldr	r2, [sp, #12]
 801f7fe:	6826      	ldr	r6, [r4, #0]
 801f800:	b936      	cbnz	r6, 801f810 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801f802:	6025      	str	r5, [r4, #0]
 801f804:	4c04      	ldr	r4, [pc, #16]	; (801f818 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801f806:	8021      	strh	r1, [r4, #0]
 801f808:	4619      	mov	r1, r3
 801f80a:	bc70      	pop	{r4, r5, r6}
 801f80c:	f7ff bfdc 	b.w	801f7c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801f810:	bc70      	pop	{r4, r5, r6}
 801f812:	4770      	bx	lr
 801f814:	240262ec 	.word	0x240262ec
 801f818:	240262e4 	.word	0x240262e4

0801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801f81c:	4a12      	ldr	r2, [pc, #72]	; (801f868 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801f81e:	8803      	ldrh	r3, [r0, #0]
 801f820:	8812      	ldrh	r2, [r2, #0]
 801f822:	4293      	cmp	r3, r2
 801f824:	d207      	bcs.n	801f836 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801f826:	4a11      	ldr	r2, [pc, #68]	; (801f86c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801f828:	2114      	movs	r1, #20
 801f82a:	6812      	ldr	r2, [r2, #0]
 801f82c:	fb01 2303 	mla	r3, r1, r3, r2
 801f830:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801f834:	4770      	bx	lr
 801f836:	490e      	ldr	r1, [pc, #56]	; (801f870 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801f838:	8809      	ldrh	r1, [r1, #0]
 801f83a:	4411      	add	r1, r2
 801f83c:	428b      	cmp	r3, r1
 801f83e:	da04      	bge.n	801f84a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801f840:	1a9b      	subs	r3, r3, r2
 801f842:	4a0c      	ldr	r2, [pc, #48]	; (801f874 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801f844:	210e      	movs	r1, #14
 801f846:	6812      	ldr	r2, [r2, #0]
 801f848:	e7f0      	b.n	801f82c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801f84a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f84e:	4293      	cmp	r3, r2
 801f850:	d108      	bne.n	801f864 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801f852:	4b09      	ldr	r3, [pc, #36]	; (801f878 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801f854:	781b      	ldrb	r3, [r3, #0]
 801f856:	b91b      	cbnz	r3, 801f860 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801f858:	4b08      	ldr	r3, [pc, #32]	; (801f87c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801f85a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f85e:	4770      	bx	lr
 801f860:	4b07      	ldr	r3, [pc, #28]	; (801f880 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801f862:	e7fa      	b.n	801f85a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801f864:	2000      	movs	r0, #0
 801f866:	4770      	bx	lr
 801f868:	240262e4 	.word	0x240262e4
 801f86c:	240262ec 	.word	0x240262ec
 801f870:	240262e8 	.word	0x240262e8
 801f874:	240262cc 	.word	0x240262cc
 801f878:	2402625c 	.word	0x2402625c
 801f87c:	2402625e 	.word	0x2402625e
 801f880:	24026260 	.word	0x24026260

0801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801f884:	4a12      	ldr	r2, [pc, #72]	; (801f8d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801f886:	8803      	ldrh	r3, [r0, #0]
 801f888:	8812      	ldrh	r2, [r2, #0]
 801f88a:	4293      	cmp	r3, r2
 801f88c:	d207      	bcs.n	801f89e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801f88e:	4a11      	ldr	r2, [pc, #68]	; (801f8d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801f890:	2114      	movs	r1, #20
 801f892:	6812      	ldr	r2, [r2, #0]
 801f894:	fb01 2303 	mla	r3, r1, r3, r2
 801f898:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801f89c:	4770      	bx	lr
 801f89e:	490e      	ldr	r1, [pc, #56]	; (801f8d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801f8a0:	8809      	ldrh	r1, [r1, #0]
 801f8a2:	4411      	add	r1, r2
 801f8a4:	428b      	cmp	r3, r1
 801f8a6:	da04      	bge.n	801f8b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801f8a8:	1a9b      	subs	r3, r3, r2
 801f8aa:	4a0c      	ldr	r2, [pc, #48]	; (801f8dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801f8ac:	210e      	movs	r1, #14
 801f8ae:	6812      	ldr	r2, [r2, #0]
 801f8b0:	e7f0      	b.n	801f894 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801f8b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f8b6:	4293      	cmp	r3, r2
 801f8b8:	d108      	bne.n	801f8cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801f8ba:	4b09      	ldr	r3, [pc, #36]	; (801f8e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801f8bc:	781b      	ldrb	r3, [r3, #0]
 801f8be:	b91b      	cbnz	r3, 801f8c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801f8c0:	4b08      	ldr	r3, [pc, #32]	; (801f8e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801f8c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f8c6:	4770      	bx	lr
 801f8c8:	4b07      	ldr	r3, [pc, #28]	; (801f8e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801f8ca:	e7fa      	b.n	801f8c2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801f8cc:	2000      	movs	r0, #0
 801f8ce:	4770      	bx	lr
 801f8d0:	240262e4 	.word	0x240262e4
 801f8d4:	240262ec 	.word	0x240262ec
 801f8d8:	240262e8 	.word	0x240262e8
 801f8dc:	240262cc 	.word	0x240262cc
 801f8e0:	2402625c 	.word	0x2402625c
 801f8e4:	24026260 	.word	0x24026260
 801f8e8:	2402625e 	.word	0x2402625e

0801f8ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801f8ec:	4a1f      	ldr	r2, [pc, #124]	; (801f96c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801f8ee:	b510      	push	{r4, lr}
 801f8f0:	880b      	ldrh	r3, [r1, #0]
 801f8f2:	8812      	ldrh	r2, [r2, #0]
 801f8f4:	4293      	cmp	r3, r2
 801f8f6:	d213      	bcs.n	801f920 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801f8f8:	4a1d      	ldr	r2, [pc, #116]	; (801f970 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801f8fa:	2114      	movs	r1, #20
 801f8fc:	6812      	ldr	r2, [r2, #0]
 801f8fe:	fb01 2303 	mla	r3, r1, r3, r2
 801f902:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801f906:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801f90a:	8a1a      	ldrh	r2, [r3, #16]
 801f90c:	8a5b      	ldrh	r3, [r3, #18]
 801f90e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f912:	8004      	strh	r4, [r0, #0]
 801f914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f918:	8041      	strh	r1, [r0, #2]
 801f91a:	8082      	strh	r2, [r0, #4]
 801f91c:	80c3      	strh	r3, [r0, #6]
 801f91e:	e00e      	b.n	801f93e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801f920:	4914      	ldr	r1, [pc, #80]	; (801f974 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801f922:	8809      	ldrh	r1, [r1, #0]
 801f924:	4411      	add	r1, r2
 801f926:	428b      	cmp	r3, r1
 801f928:	da0a      	bge.n	801f940 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801f92a:	1a9b      	subs	r3, r3, r2
 801f92c:	4a12      	ldr	r2, [pc, #72]	; (801f978 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801f92e:	210e      	movs	r1, #14
 801f930:	6812      	ldr	r2, [r2, #0]
 801f932:	fb01 2303 	mla	r3, r1, r3, r2
 801f936:	681a      	ldr	r2, [r3, #0]
 801f938:	6002      	str	r2, [r0, #0]
 801f93a:	685a      	ldr	r2, [r3, #4]
 801f93c:	6042      	str	r2, [r0, #4]
 801f93e:	bd10      	pop	{r4, pc}
 801f940:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f944:	4293      	cmp	r3, r2
 801f946:	d10b      	bne.n	801f960 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801f948:	4b0c      	ldr	r3, [pc, #48]	; (801f97c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801f94a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f94e:	4b0c      	ldr	r3, [pc, #48]	; (801f980 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801f950:	8081      	strh	r1, [r0, #4]
 801f952:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f956:	2300      	movs	r3, #0
 801f958:	80c2      	strh	r2, [r0, #6]
 801f95a:	8003      	strh	r3, [r0, #0]
 801f95c:	8043      	strh	r3, [r0, #2]
 801f95e:	e7ee      	b.n	801f93e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801f960:	2300      	movs	r3, #0
 801f962:	8003      	strh	r3, [r0, #0]
 801f964:	8043      	strh	r3, [r0, #2]
 801f966:	8083      	strh	r3, [r0, #4]
 801f968:	e7d8      	b.n	801f91c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801f96a:	bf00      	nop
 801f96c:	240262e4 	.word	0x240262e4
 801f970:	240262ec 	.word	0x240262ec
 801f974:	240262e8 	.word	0x240262e8
 801f978:	240262cc 	.word	0x240262cc
 801f97c:	24026258 	.word	0x24026258
 801f980:	2402625a 	.word	0x2402625a

0801f984 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801f984:	4a17      	ldr	r2, [pc, #92]	; (801f9e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801f986:	8803      	ldrh	r3, [r0, #0]
 801f988:	8812      	ldrh	r2, [r2, #0]
 801f98a:	4293      	cmp	r3, r2
 801f98c:	d213      	bcs.n	801f9b6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801f98e:	4a16      	ldr	r2, [pc, #88]	; (801f9e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801f990:	2114      	movs	r1, #20
 801f992:	6812      	ldr	r2, [r2, #0]
 801f994:	fb01 2303 	mla	r3, r1, r3, r2
 801f998:	8a1a      	ldrh	r2, [r3, #16]
 801f99a:	8919      	ldrh	r1, [r3, #8]
 801f99c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f9a0:	428a      	cmp	r2, r1
 801f9a2:	db1d      	blt.n	801f9e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801f9a4:	8a58      	ldrh	r0, [r3, #18]
 801f9a6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801f9aa:	895b      	ldrh	r3, [r3, #10]
 801f9ac:	4298      	cmp	r0, r3
 801f9ae:	bfac      	ite	ge
 801f9b0:	2000      	movge	r0, #0
 801f9b2:	2001      	movlt	r0, #1
 801f9b4:	4770      	bx	lr
 801f9b6:	490d      	ldr	r1, [pc, #52]	; (801f9ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801f9b8:	8809      	ldrh	r1, [r1, #0]
 801f9ba:	4411      	add	r1, r2
 801f9bc:	428b      	cmp	r3, r1
 801f9be:	da0d      	bge.n	801f9dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801f9c0:	1a9b      	subs	r3, r3, r2
 801f9c2:	4a0b      	ldr	r2, [pc, #44]	; (801f9f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801f9c4:	210e      	movs	r1, #14
 801f9c6:	6812      	ldr	r2, [r2, #0]
 801f9c8:	fb01 2303 	mla	r3, r1, r3, r2
 801f9cc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801f9d0:	891a      	ldrh	r2, [r3, #8]
 801f9d2:	4291      	cmp	r1, r2
 801f9d4:	db04      	blt.n	801f9e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801f9d6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801f9da:	e7e6      	b.n	801f9aa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801f9dc:	2000      	movs	r0, #0
 801f9de:	4770      	bx	lr
 801f9e0:	2001      	movs	r0, #1
 801f9e2:	4770      	bx	lr
 801f9e4:	240262e4 	.word	0x240262e4
 801f9e8:	240262ec 	.word	0x240262ec
 801f9ec:	240262e8 	.word	0x240262e8
 801f9f0:	240262cc 	.word	0x240262cc

0801f9f4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801f9f4:	4a12      	ldr	r2, [pc, #72]	; (801fa40 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801f9f6:	8803      	ldrh	r3, [r0, #0]
 801f9f8:	8811      	ldrh	r1, [r2, #0]
 801f9fa:	428b      	cmp	r3, r1
 801f9fc:	d20b      	bcs.n	801fa16 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801f9fe:	4a11      	ldr	r2, [pc, #68]	; (801fa44 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fa00:	6812      	ldr	r2, [r2, #0]
 801fa02:	b112      	cbz	r2, 801fa0a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801fa04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fa08:	b9c0      	cbnz	r0, 801fa3c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801fa0a:	4a0f      	ldr	r2, [pc, #60]	; (801fa48 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801fa0c:	6811      	ldr	r1, [r2, #0]
 801fa0e:	2214      	movs	r2, #20
 801fa10:	4353      	muls	r3, r2
 801fa12:	58c8      	ldr	r0, [r1, r3]
 801fa14:	4770      	bx	lr
 801fa16:	4a0d      	ldr	r2, [pc, #52]	; (801fa4c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801fa18:	8812      	ldrh	r2, [r2, #0]
 801fa1a:	440a      	add	r2, r1
 801fa1c:	4293      	cmp	r3, r2
 801fa1e:	da04      	bge.n	801fa2a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801fa20:	4a08      	ldr	r2, [pc, #32]	; (801fa44 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fa22:	6812      	ldr	r2, [r2, #0]
 801fa24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fa28:	4770      	bx	lr
 801fa2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fa2e:	4293      	cmp	r3, r2
 801fa30:	d103      	bne.n	801fa3a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801fa32:	4b07      	ldr	r3, [pc, #28]	; (801fa50 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801fa38:	4770      	bx	lr
 801fa3a:	2000      	movs	r0, #0
 801fa3c:	4770      	bx	lr
 801fa3e:	bf00      	nop
 801fa40:	240262e4 	.word	0x240262e4
 801fa44:	240262c8 	.word	0x240262c8
 801fa48:	240262ec 	.word	0x240262ec
 801fa4c:	240262e8 	.word	0x240262e8
 801fa50:	24026264 	.word	0x24026264

0801fa54 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801fa54:	4b24      	ldr	r3, [pc, #144]	; (801fae8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801fa56:	8802      	ldrh	r2, [r0, #0]
 801fa58:	8818      	ldrh	r0, [r3, #0]
 801fa5a:	4282      	cmp	r2, r0
 801fa5c:	d221      	bcs.n	801faa2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801fa5e:	4b23      	ldr	r3, [pc, #140]	; (801faec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801fa60:	6819      	ldr	r1, [r3, #0]
 801fa62:	2314      	movs	r3, #20
 801fa64:	fb03 1302 	mla	r3, r3, r2, r1
 801fa68:	6858      	ldr	r0, [r3, #4]
 801fa6a:	2800      	cmp	r0, #0
 801fa6c:	d03a      	beq.n	801fae4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801fa6e:	4920      	ldr	r1, [pc, #128]	; (801faf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801fa70:	6809      	ldr	r1, [r1, #0]
 801fa72:	2900      	cmp	r1, #0
 801fa74:	d036      	beq.n	801fae4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801fa76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fa7a:	2900      	cmp	r1, #0
 801fa7c:	d032      	beq.n	801fae4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801fa7e:	891a      	ldrh	r2, [r3, #8]
 801fa80:	8958      	ldrh	r0, [r3, #10]
 801fa82:	4350      	muls	r0, r2
 801fa84:	7c5a      	ldrb	r2, [r3, #17]
 801fa86:	7cdb      	ldrb	r3, [r3, #19]
 801fa88:	0952      	lsrs	r2, r2, #5
 801fa8a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801fa8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801fa92:	2b0b      	cmp	r3, #11
 801fa94:	bf18      	it	ne
 801fa96:	0040      	lslne	r0, r0, #1
 801fa98:	3003      	adds	r0, #3
 801fa9a:	f020 0003 	bic.w	r0, r0, #3
 801fa9e:	4408      	add	r0, r1
 801faa0:	4770      	bx	lr
 801faa2:	4b14      	ldr	r3, [pc, #80]	; (801faf4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801faa4:	881b      	ldrh	r3, [r3, #0]
 801faa6:	4403      	add	r3, r0
 801faa8:	429a      	cmp	r2, r3
 801faaa:	da1a      	bge.n	801fae2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801faac:	4b12      	ldr	r3, [pc, #72]	; (801faf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801faae:	1a10      	subs	r0, r2, r0
 801fab0:	210e      	movs	r1, #14
 801fab2:	681b      	ldr	r3, [r3, #0]
 801fab4:	fb01 3000 	mla	r0, r1, r0, r3
 801fab8:	7b03      	ldrb	r3, [r0, #12]
 801faba:	f003 031f 	and.w	r3, r3, #31
 801fabe:	2b0b      	cmp	r3, #11
 801fac0:	d10b      	bne.n	801fada <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801fac2:	8903      	ldrh	r3, [r0, #8]
 801fac4:	8940      	ldrh	r0, [r0, #10]
 801fac6:	4358      	muls	r0, r3
 801fac8:	4b09      	ldr	r3, [pc, #36]	; (801faf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801faca:	3003      	adds	r0, #3
 801facc:	6819      	ldr	r1, [r3, #0]
 801face:	f020 0303 	bic.w	r3, r0, #3
 801fad2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801fad6:	4418      	add	r0, r3
 801fad8:	4770      	bx	lr
 801fada:	2b0d      	cmp	r3, #13
 801fadc:	d101      	bne.n	801fae2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801fade:	300d      	adds	r0, #13
 801fae0:	4770      	bx	lr
 801fae2:	2000      	movs	r0, #0
 801fae4:	4770      	bx	lr
 801fae6:	bf00      	nop
 801fae8:	240262e4 	.word	0x240262e4
 801faec:	240262ec 	.word	0x240262ec
 801faf0:	240262c8 	.word	0x240262c8
 801faf4:	240262e8 	.word	0x240262e8
 801faf8:	240262cc 	.word	0x240262cc

0801fafc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801fafc:	4a17      	ldr	r2, [pc, #92]	; (801fb5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801fafe:	b510      	push	{r4, lr}
 801fb00:	8803      	ldrh	r3, [r0, #0]
 801fb02:	8812      	ldrh	r2, [r2, #0]
 801fb04:	4293      	cmp	r3, r2
 801fb06:	d20c      	bcs.n	801fb22 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801fb08:	4a15      	ldr	r2, [pc, #84]	; (801fb60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801fb0a:	2114      	movs	r1, #20
 801fb0c:	6812      	ldr	r2, [r2, #0]
 801fb0e:	fb01 2303 	mla	r3, r1, r3, r2
 801fb12:	7c58      	ldrb	r0, [r3, #17]
 801fb14:	0942      	lsrs	r2, r0, #5
 801fb16:	7cd8      	ldrb	r0, [r3, #19]
 801fb18:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801fb1c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801fb20:	bd10      	pop	{r4, pc}
 801fb22:	4910      	ldr	r1, [pc, #64]	; (801fb64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801fb24:	8809      	ldrh	r1, [r1, #0]
 801fb26:	4411      	add	r1, r2
 801fb28:	428b      	cmp	r3, r1
 801fb2a:	da09      	bge.n	801fb40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801fb2c:	1a9b      	subs	r3, r3, r2
 801fb2e:	4a0e      	ldr	r2, [pc, #56]	; (801fb68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801fb30:	210e      	movs	r1, #14
 801fb32:	6812      	ldr	r2, [r2, #0]
 801fb34:	fb01 2303 	mla	r3, r1, r3, r2
 801fb38:	7b18      	ldrb	r0, [r3, #12]
 801fb3a:	f000 001f 	and.w	r0, r0, #31
 801fb3e:	e7ef      	b.n	801fb20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801fb40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fb44:	4293      	cmp	r3, r2
 801fb46:	d106      	bne.n	801fb56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801fb48:	f7e4 f9ee 	bl	8003f28 <_ZN8touchgfx3HAL3lcdEv>
 801fb4c:	6803      	ldr	r3, [r0, #0]
 801fb4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb54:	4718      	bx	r3
 801fb56:	2000      	movs	r0, #0
 801fb58:	e7e2      	b.n	801fb20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801fb5a:	bf00      	nop
 801fb5c:	240262e4 	.word	0x240262e4
 801fb60:	240262ec 	.word	0x240262ec
 801fb64:	240262e8 	.word	0x240262e8
 801fb68:	240262cc 	.word	0x240262cc

0801fb6c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801fb6c:	2018      	movs	r0, #24
 801fb6e:	4770      	bx	lr

0801fb70 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801fb70:	2001      	movs	r0, #1
 801fb72:	4770      	bx	lr

0801fb74 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801fb74:	4b02      	ldr	r3, [pc, #8]	; (801fb80 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801fb76:	8818      	ldrh	r0, [r3, #0]
 801fb78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb7c:	b280      	uxth	r0, r0
 801fb7e:	4770      	bx	lr
 801fb80:	2402625e 	.word	0x2402625e

0801fb84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801fb84:	2bff      	cmp	r3, #255	; 0xff
 801fb86:	d040      	beq.n	801fc0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801fb88:	2a2c      	cmp	r2, #44	; 0x2c
 801fb8a:	d02a      	beq.n	801fbe2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801fb8c:	d80f      	bhi.n	801fbae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801fb8e:	2a08      	cmp	r2, #8
 801fb90:	d037      	beq.n	801fc02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801fb92:	d805      	bhi.n	801fba0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801fb94:	2a04      	cmp	r2, #4
 801fb96:	d032      	beq.n	801fbfe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801fb98:	2a05      	cmp	r2, #5
 801fb9a:	d02e      	beq.n	801fbfa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801fb9c:	2000      	movs	r0, #0
 801fb9e:	4770      	bx	lr
 801fba0:	2a0a      	cmp	r2, #10
 801fba2:	d02e      	beq.n	801fc02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801fba4:	d301      	bcc.n	801fbaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801fba6:	2a0b      	cmp	r2, #11
 801fba8:	d1f8      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fbaa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801fbac:	4770      	bx	lr
 801fbae:	2a30      	cmp	r2, #48	; 0x30
 801fbb0:	d029      	beq.n	801fc06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801fbb2:	d808      	bhi.n	801fbc6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801fbb4:	2a2e      	cmp	r2, #46	; 0x2e
 801fbb6:	684b      	ldr	r3, [r1, #4]
 801fbb8:	d01a      	beq.n	801fbf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801fbba:	d90b      	bls.n	801fbd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801fbbc:	781b      	ldrb	r3, [r3, #0]
 801fbbe:	2b00      	cmp	r3, #0
 801fbc0:	d1ec      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fbc2:	6a00      	ldr	r0, [r0, #32]
 801fbc4:	4770      	bx	lr
 801fbc6:	2a32      	cmp	r2, #50	; 0x32
 801fbc8:	d01d      	beq.n	801fc06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801fbca:	d301      	bcc.n	801fbd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801fbcc:	2a33      	cmp	r2, #51	; 0x33
 801fbce:	d1e5      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fbd0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801fbd2:	4770      	bx	lr
 801fbd4:	781b      	ldrb	r3, [r3, #0]
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	d0f3      	beq.n	801fbc2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801fbda:	2b01      	cmp	r3, #1
 801fbdc:	d1de      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fbde:	6900      	ldr	r0, [r0, #16]
 801fbe0:	4770      	bx	lr
 801fbe2:	684b      	ldr	r3, [r1, #4]
 801fbe4:	781b      	ldrb	r3, [r3, #0]
 801fbe6:	b133      	cbz	r3, 801fbf6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801fbe8:	2b01      	cmp	r3, #1
 801fbea:	d1d7      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fbec:	6880      	ldr	r0, [r0, #8]
 801fbee:	4770      	bx	lr
 801fbf0:	781b      	ldrb	r3, [r3, #0]
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	d1d2      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fbf6:	6980      	ldr	r0, [r0, #24]
 801fbf8:	4770      	bx	lr
 801fbfa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801fbfc:	4770      	bx	lr
 801fbfe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801fc00:	4770      	bx	lr
 801fc02:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801fc04:	4770      	bx	lr
 801fc06:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801fc08:	4770      	bx	lr
 801fc0a:	2a2c      	cmp	r2, #44	; 0x2c
 801fc0c:	d02a      	beq.n	801fc64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801fc0e:	d80f      	bhi.n	801fc30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801fc10:	2a08      	cmp	r2, #8
 801fc12:	d035      	beq.n	801fc80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801fc14:	d805      	bhi.n	801fc22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801fc16:	2a04      	cmp	r2, #4
 801fc18:	d030      	beq.n	801fc7c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801fc1a:	2a05      	cmp	r2, #5
 801fc1c:	d1be      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc1e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801fc20:	4770      	bx	lr
 801fc22:	2a0a      	cmp	r2, #10
 801fc24:	d02c      	beq.n	801fc80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801fc26:	d301      	bcc.n	801fc2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801fc28:	2a0b      	cmp	r2, #11
 801fc2a:	d1b7      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc2c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801fc2e:	4770      	bx	lr
 801fc30:	2a30      	cmp	r2, #48	; 0x30
 801fc32:	d027      	beq.n	801fc84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801fc34:	d808      	bhi.n	801fc48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801fc36:	2a2e      	cmp	r2, #46	; 0x2e
 801fc38:	684b      	ldr	r3, [r1, #4]
 801fc3a:	d01a      	beq.n	801fc72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801fc3c:	d90b      	bls.n	801fc56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801fc3e:	781b      	ldrb	r3, [r3, #0]
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	d1ab      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc44:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fc46:	4770      	bx	lr
 801fc48:	2a32      	cmp	r2, #50	; 0x32
 801fc4a:	d01b      	beq.n	801fc84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801fc4c:	d301      	bcc.n	801fc52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801fc4e:	2a33      	cmp	r2, #51	; 0x33
 801fc50:	d1a4      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc52:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801fc54:	4770      	bx	lr
 801fc56:	781b      	ldrb	r3, [r3, #0]
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	d0f3      	beq.n	801fc44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801fc5c:	2b01      	cmp	r3, #1
 801fc5e:	d19d      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc60:	6940      	ldr	r0, [r0, #20]
 801fc62:	4770      	bx	lr
 801fc64:	684b      	ldr	r3, [r1, #4]
 801fc66:	781b      	ldrb	r3, [r3, #0]
 801fc68:	b133      	cbz	r3, 801fc78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801fc6a:	2b01      	cmp	r3, #1
 801fc6c:	d196      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc6e:	68c0      	ldr	r0, [r0, #12]
 801fc70:	4770      	bx	lr
 801fc72:	781b      	ldrb	r3, [r3, #0]
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	d191      	bne.n	801fb9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc78:	69c0      	ldr	r0, [r0, #28]
 801fc7a:	4770      	bx	lr
 801fc7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801fc7e:	4770      	bx	lr
 801fc80:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801fc82:	4770      	bx	lr
 801fc84:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801fc86:	4770      	bx	lr

0801fc88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc8c:	b085      	sub	sp, #20
 801fc8e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fc90:	9203      	str	r2, [sp, #12]
 801fc92:	6870      	ldr	r0, [r6, #4]
 801fc94:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801fc98:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801fc9c:	9101      	str	r1, [sp, #4]
 801fc9e:	fa1f f885 	uxth.w	r8, r5
 801fca2:	43ed      	mvns	r5, r5
 801fca4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fca8:	b2ed      	uxtb	r5, r5
 801fcaa:	fb00 2404 	mla	r4, r0, r4, r2
 801fcae:	6832      	ldr	r2, [r6, #0]
 801fcb0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcb4:	4414      	add	r4, r2
 801fcb6:	f8dc 2000 	ldr.w	r2, [ip]
 801fcba:	9202      	str	r2, [sp, #8]
 801fcbc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fcc0:	f102 0e04 	add.w	lr, r2, #4
 801fcc4:	9a01      	ldr	r2, [sp, #4]
 801fcc6:	2a00      	cmp	r2, #0
 801fcc8:	dc03      	bgt.n	801fcd2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fcca:	9a03      	ldr	r2, [sp, #12]
 801fccc:	2a00      	cmp	r2, #0
 801fcce:	f340 8116 	ble.w	801fefe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801fcd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fcd4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801fcd8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fcdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fcde:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801fce2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	dd0e      	ble.n	801fd08 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fcea:	1406      	asrs	r6, r0, #16
 801fcec:	d405      	bmi.n	801fcfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fcee:	4556      	cmp	r6, sl
 801fcf0:	da03      	bge.n	801fcfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fcf2:	1416      	asrs	r6, r2, #16
 801fcf4:	d401      	bmi.n	801fcfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fcf6:	454e      	cmp	r6, r9
 801fcf8:	db07      	blt.n	801fd0a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fcfa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fcfc:	3b01      	subs	r3, #1
 801fcfe:	3403      	adds	r4, #3
 801fd00:	4430      	add	r0, r6
 801fd02:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fd04:	4432      	add	r2, r6
 801fd06:	e7ee      	b.n	801fce6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801fd08:	d063      	beq.n	801fdd2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fd0a:	1e5e      	subs	r6, r3, #1
 801fd0c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801fd0e:	fb07 0706 	mla	r7, r7, r6, r0
 801fd12:	143f      	asrs	r7, r7, #16
 801fd14:	d454      	bmi.n	801fdc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fd16:	4557      	cmp	r7, sl
 801fd18:	da52      	bge.n	801fdc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fd1a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801fd1c:	fb07 2606 	mla	r6, r7, r6, r2
 801fd20:	1436      	asrs	r6, r6, #16
 801fd22:	d44d      	bmi.n	801fdc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fd24:	454e      	cmp	r6, r9
 801fd26:	da4b      	bge.n	801fdc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fd28:	1ce6      	adds	r6, r4, #3
 801fd2a:	4699      	mov	r9, r3
 801fd2c:	f1b9 0f00 	cmp.w	r9, #0
 801fd30:	f106 0603 	add.w	r6, r6, #3
 801fd34:	dd48      	ble.n	801fdc8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801fd36:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801fd3a:	1417      	asrs	r7, r2, #16
 801fd3c:	9902      	ldr	r1, [sp, #8]
 801fd3e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801fd42:	f109 39ff 	add.w	r9, r9, #4294967295
 801fd46:	fb0b 1707 	mla	r7, fp, r7, r1
 801fd4a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801fd4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fd50:	f817 700a 	ldrb.w	r7, [r7, sl]
 801fd54:	fb1b fb05 	smulbb	fp, fp, r5
 801fd58:	4408      	add	r0, r1
 801fd5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fd5c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fd60:	440a      	add	r2, r1
 801fd62:	eb0e 0a07 	add.w	sl, lr, r7
 801fd66:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801fd6a:	fb07 b708 	mla	r7, r7, r8, fp
 801fd6e:	b2bf      	uxth	r7, r7
 801fd70:	f107 0b01 	add.w	fp, r7, #1
 801fd74:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fd78:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801fd7c:	fb1b fb05 	smulbb	fp, fp, r5
 801fd80:	123f      	asrs	r7, r7, #8
 801fd82:	f806 7c06 	strb.w	r7, [r6, #-6]
 801fd86:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801fd8a:	fb07 b708 	mla	r7, r7, r8, fp
 801fd8e:	b2bf      	uxth	r7, r7
 801fd90:	f107 0b01 	add.w	fp, r7, #1
 801fd94:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fd98:	123f      	asrs	r7, r7, #8
 801fd9a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801fd9e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801fda2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801fda6:	fb1a fa05 	smulbb	sl, sl, r5
 801fdaa:	fb07 a708 	mla	r7, r7, r8, sl
 801fdae:	b2bf      	uxth	r7, r7
 801fdb0:	f107 0a01 	add.w	sl, r7, #1
 801fdb4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801fdb8:	123f      	asrs	r7, r7, #8
 801fdba:	f806 7c04 	strb.w	r7, [r6, #-4]
 801fdbe:	e7b5      	b.n	801fd2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801fdc0:	2700      	movs	r7, #0
 801fdc2:	1bde      	subs	r6, r3, r7
 801fdc4:	2e00      	cmp	r6, #0
 801fdc6:	dc42      	bgt.n	801fe4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801fdc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fdcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fdd0:	441c      	add	r4, r3
 801fdd2:	9b01      	ldr	r3, [sp, #4]
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	f340 8092 	ble.w	801fefe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801fdda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fdde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fde0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fde4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fde8:	eef0 6a62 	vmov.f32	s13, s5
 801fdec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fdf0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fdf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdf8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801fdfc:	eef0 6a43 	vmov.f32	s13, s6
 801fe00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe04:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801fe08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe0c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe10:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe20:	ee12 2a90 	vmov	r2, s5
 801fe24:	eef0 2a47 	vmov.f32	s5, s14
 801fe28:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe2c:	ee13 2a10 	vmov	r2, s6
 801fe30:	9311      	str	r3, [sp, #68]	; 0x44
 801fe32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe34:	eeb0 3a67 	vmov.f32	s6, s15
 801fe38:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe3c:	9312      	str	r3, [sp, #72]	; 0x48
 801fe3e:	9b01      	ldr	r3, [sp, #4]
 801fe40:	9a03      	ldr	r2, [sp, #12]
 801fe42:	3b01      	subs	r3, #1
 801fe44:	9301      	str	r3, [sp, #4]
 801fe46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe48:	bf08      	it	eq
 801fe4a:	4613      	moveq	r3, r2
 801fe4c:	e73a      	b.n	801fcc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fe4e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801fe52:	d44e      	bmi.n	801fef2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fe54:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801fe58:	4556      	cmp	r6, sl
 801fe5a:	dd4a      	ble.n	801fef2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fe5c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801fe60:	d447      	bmi.n	801fef2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fe62:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801fe66:	4559      	cmp	r1, fp
 801fe68:	dd43      	ble.n	801fef2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fe6a:	fa0f f986 	sxth.w	r9, r6
 801fe6e:	9902      	ldr	r1, [sp, #8]
 801fe70:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801fe74:	fb0b 1909 	mla	r9, fp, r9, r1
 801fe78:	f814 b006 	ldrb.w	fp, [r4, r6]
 801fe7c:	f819 900a 	ldrb.w	r9, [r9, sl]
 801fe80:	fb1b fb05 	smulbb	fp, fp, r5
 801fe84:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fe88:	eb0e 0a09 	add.w	sl, lr, r9
 801fe8c:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801fe90:	fb09 b908 	mla	r9, r9, r8, fp
 801fe94:	fa1f f989 	uxth.w	r9, r9
 801fe98:	f109 0b01 	add.w	fp, r9, #1
 801fe9c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fea0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fea4:	f804 9006 	strb.w	r9, [r4, r6]
 801fea8:	4426      	add	r6, r4
 801feaa:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801feae:	f896 b001 	ldrb.w	fp, [r6, #1]
 801feb2:	fb1b fb05 	smulbb	fp, fp, r5
 801feb6:	fb09 b908 	mla	r9, r9, r8, fp
 801feba:	fa1f f989 	uxth.w	r9, r9
 801febe:	f109 0b01 	add.w	fp, r9, #1
 801fec2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fec6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801feca:	f886 9001 	strb.w	r9, [r6, #1]
 801fece:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fed2:	f896 a002 	ldrb.w	sl, [r6, #2]
 801fed6:	fb1a fa05 	smulbb	sl, sl, r5
 801feda:	fb09 a908 	mla	r9, r9, r8, sl
 801fede:	fa1f f989 	uxth.w	r9, r9
 801fee2:	f109 0a01 	add.w	sl, r9, #1
 801fee6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801feea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801feee:	f886 9002 	strb.w	r9, [r6, #2]
 801fef2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fef4:	3701      	adds	r7, #1
 801fef6:	4408      	add	r0, r1
 801fef8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fefa:	440a      	add	r2, r1
 801fefc:	e761      	b.n	801fdc2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fefe:	b005      	add	sp, #20
 801ff00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff08:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ff0a:	4693      	mov	fp, r2
 801ff0c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ff0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ff12:	6868      	ldr	r0, [r5, #4]
 801ff14:	6877      	ldr	r7, [r6, #4]
 801ff16:	9100      	str	r1, [sp, #0]
 801ff18:	3704      	adds	r7, #4
 801ff1a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ff1e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801ff22:	fb00 2404 	mla	r4, r0, r4, r2
 801ff26:	682a      	ldr	r2, [r5, #0]
 801ff28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ff2c:	4414      	add	r4, r2
 801ff2e:	6832      	ldr	r2, [r6, #0]
 801ff30:	9201      	str	r2, [sp, #4]
 801ff32:	9a00      	ldr	r2, [sp, #0]
 801ff34:	2a00      	cmp	r2, #0
 801ff36:	dc03      	bgt.n	801ff40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ff38:	f1bb 0f00 	cmp.w	fp, #0
 801ff3c:	f340 80bc 	ble.w	80200b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ff40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ff42:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801ff46:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ff4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ff4c:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801ff50:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	dd0c      	ble.n	801ff72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ff58:	1405      	asrs	r5, r0, #16
 801ff5a:	d405      	bmi.n	801ff68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ff5c:	4555      	cmp	r5, sl
 801ff5e:	da03      	bge.n	801ff68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ff60:	1415      	asrs	r5, r2, #16
 801ff62:	d401      	bmi.n	801ff68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ff64:	454d      	cmp	r5, r9
 801ff66:	db05      	blt.n	801ff74 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ff68:	4440      	add	r0, r8
 801ff6a:	4472      	add	r2, lr
 801ff6c:	3b01      	subs	r3, #1
 801ff6e:	3403      	adds	r4, #3
 801ff70:	e7f0      	b.n	801ff54 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ff72:	d03f      	beq.n	801fff4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801ff74:	1e5d      	subs	r5, r3, #1
 801ff76:	fb08 0c05 	mla	ip, r8, r5, r0
 801ff7a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ff7e:	d42e      	bmi.n	801ffde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ff80:	45d4      	cmp	ip, sl
 801ff82:	da2c      	bge.n	801ffde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ff84:	fb0e 2505 	mla	r5, lr, r5, r2
 801ff88:	142d      	asrs	r5, r5, #16
 801ff8a:	d428      	bmi.n	801ffde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ff8c:	454d      	cmp	r5, r9
 801ff8e:	da26      	bge.n	801ffde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ff90:	1ce5      	adds	r5, r4, #3
 801ff92:	469c      	mov	ip, r3
 801ff94:	f1bc 0f00 	cmp.w	ip, #0
 801ff98:	f105 0503 	add.w	r5, r5, #3
 801ff9c:	dd25      	ble.n	801ffea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ff9e:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ffa2:	ea4f 4922 	mov.w	r9, r2, asr #16
 801ffa6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ffaa:	4472      	add	r2, lr
 801ffac:	468a      	mov	sl, r1
 801ffae:	9901      	ldr	r1, [sp, #4]
 801ffb0:	fb0a 1909 	mla	r9, sl, r9, r1
 801ffb4:	1401      	asrs	r1, r0, #16
 801ffb6:	4440      	add	r0, r8
 801ffb8:	f819 9001 	ldrb.w	r9, [r9, r1]
 801ffbc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ffc0:	eb07 0a09 	add.w	sl, r7, r9
 801ffc4:	f817 9009 	ldrb.w	r9, [r7, r9]
 801ffc8:	f805 9c06 	strb.w	r9, [r5, #-6]
 801ffcc:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ffd0:	f805 9c05 	strb.w	r9, [r5, #-5]
 801ffd4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ffd8:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ffdc:	e7da      	b.n	801ff94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ffde:	2500      	movs	r5, #0
 801ffe0:	eba3 0c05 	sub.w	ip, r3, r5
 801ffe4:	f1bc 0f00 	cmp.w	ip, #0
 801ffe8:	dc3b      	bgt.n	8020062 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ffea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fff2:	441c      	add	r4, r3
 801fff4:	9b00      	ldr	r3, [sp, #0]
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	dd5e      	ble.n	80200b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801fffa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020000:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020004:	eeb0 6a62 	vmov.f32	s12, s5
 8020008:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802000c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020010:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020014:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8020018:	eeb0 6a43 	vmov.f32	s12, s6
 802001c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020020:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8020024:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020028:	ee61 7a27 	vmul.f32	s15, s2, s15
 802002c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020030:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020034:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020038:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802003c:	ee12 2a90 	vmov	r2, s5
 8020040:	eef0 2a47 	vmov.f32	s5, s14
 8020044:	fb92 f8f3 	sdiv	r8, r2, r3
 8020048:	ee13 2a10 	vmov	r2, s6
 802004c:	eeb0 3a67 	vmov.f32	s6, s15
 8020050:	fb92 fef3 	sdiv	lr, r2, r3
 8020054:	9b00      	ldr	r3, [sp, #0]
 8020056:	3b01      	subs	r3, #1
 8020058:	9300      	str	r3, [sp, #0]
 802005a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802005c:	bf08      	it	eq
 802005e:	465b      	moveq	r3, fp
 8020060:	e767      	b.n	801ff32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020062:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020066:	d423      	bmi.n	80200b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020068:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802006c:	45cc      	cmp	ip, r9
 802006e:	dd1f      	ble.n	80200b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020070:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020074:	d41c      	bmi.n	80200b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020076:	68f1      	ldr	r1, [r6, #12]
 8020078:	4551      	cmp	r1, sl
 802007a:	dd19      	ble.n	80200b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802007c:	fa0f fc8c 	sxth.w	ip, ip
 8020080:	9901      	ldr	r1, [sp, #4]
 8020082:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8020086:	f81c c009 	ldrb.w	ip, [ip, r9]
 802008a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802008e:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8020092:	eb07 090c 	add.w	r9, r7, ip
 8020096:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 802009a:	f804 a00c 	strb.w	sl, [r4, ip]
 802009e:	44a4      	add	ip, r4
 80200a0:	f899 a001 	ldrb.w	sl, [r9, #1]
 80200a4:	f88c a001 	strb.w	sl, [ip, #1]
 80200a8:	f899 9002 	ldrb.w	r9, [r9, #2]
 80200ac:	f88c 9002 	strb.w	r9, [ip, #2]
 80200b0:	4440      	add	r0, r8
 80200b2:	4472      	add	r2, lr
 80200b4:	3501      	adds	r5, #1
 80200b6:	e793      	b.n	801ffe0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80200b8:	b003      	add	sp, #12
 80200ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080200be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200c2:	b085      	sub	sp, #20
 80200c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80200c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80200ca:	9202      	str	r2, [sp, #8]
 80200cc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80200d0:	6860      	ldr	r0, [r4, #4]
 80200d2:	9203      	str	r2, [sp, #12]
 80200d4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80200d8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80200dc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80200e0:	fb00 2505 	mla	r5, r0, r5, r2
 80200e4:	6822      	ldr	r2, [r4, #0]
 80200e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80200ea:	4415      	add	r5, r2
 80200ec:	f8dc 2000 	ldr.w	r2, [ip]
 80200f0:	9200      	str	r2, [sp, #0]
 80200f2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80200f6:	3204      	adds	r2, #4
 80200f8:	9201      	str	r2, [sp, #4]
 80200fa:	2900      	cmp	r1, #0
 80200fc:	dc03      	bgt.n	8020106 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80200fe:	9a02      	ldr	r2, [sp, #8]
 8020100:	2a00      	cmp	r2, #0
 8020102:	f340 8127 	ble.w	8020354 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020106:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020108:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802010c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020110:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020112:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020116:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802011a:	2b00      	cmp	r3, #0
 802011c:	dd0d      	ble.n	802013a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802011e:	1422      	asrs	r2, r4, #16
 8020120:	d405      	bmi.n	802012e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020122:	4542      	cmp	r2, r8
 8020124:	da03      	bge.n	802012e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020126:	1402      	asrs	r2, r0, #16
 8020128:	d401      	bmi.n	802012e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802012a:	42ba      	cmp	r2, r7
 802012c:	db06      	blt.n	802013c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802012e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020130:	4474      	add	r4, lr
 8020132:	3b01      	subs	r3, #1
 8020134:	3503      	adds	r5, #3
 8020136:	4410      	add	r0, r2
 8020138:	e7ef      	b.n	802011a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802013a:	d075      	beq.n	8020228 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 802013c:	1e5a      	subs	r2, r3, #1
 802013e:	fb0e 4602 	mla	r6, lr, r2, r4
 8020142:	1436      	asrs	r6, r6, #16
 8020144:	d465      	bmi.n	8020212 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020146:	4546      	cmp	r6, r8
 8020148:	da63      	bge.n	8020212 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802014a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802014c:	fb06 0202 	mla	r2, r6, r2, r0
 8020150:	1412      	asrs	r2, r2, #16
 8020152:	d45e      	bmi.n	8020212 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020154:	42ba      	cmp	r2, r7
 8020156:	da5c      	bge.n	8020212 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020158:	1cef      	adds	r7, r5, #3
 802015a:	4699      	mov	r9, r3
 802015c:	f1b9 0f00 	cmp.w	r9, #0
 8020160:	dd5d      	ble.n	802021e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8020162:	1402      	asrs	r2, r0, #16
 8020164:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020168:	1426      	asrs	r6, r4, #16
 802016a:	4692      	mov	sl, r2
 802016c:	9a00      	ldr	r2, [sp, #0]
 802016e:	fb08 220a 	mla	r2, r8, sl, r2
 8020172:	5d92      	ldrb	r2, [r2, r6]
 8020174:	9e01      	ldr	r6, [sp, #4]
 8020176:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 802017a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 802017e:	d041      	beq.n	8020204 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020180:	9a03      	ldr	r2, [sp, #12]
 8020182:	fa5f fb86 	uxtb.w	fp, r6
 8020186:	fb02 f808 	mul.w	r8, r2, r8
 802018a:	f108 0201 	add.w	r2, r8, #1
 802018e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8020192:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8020196:	1212      	asrs	r2, r2, #8
 8020198:	fa1f fa82 	uxth.w	sl, r2
 802019c:	43d2      	mvns	r2, r2
 802019e:	fb1b fb0a 	smulbb	fp, fp, sl
 80201a2:	b2d2      	uxtb	r2, r2
 80201a4:	fb08 b802 	mla	r8, r8, r2, fp
 80201a8:	fa1f f888 	uxth.w	r8, r8
 80201ac:	f108 0b01 	add.w	fp, r8, #1
 80201b0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80201b4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80201b8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80201bc:	fb1b fb0a 	smulbb	fp, fp, sl
 80201c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80201c4:	fb16 fa0a 	smulbb	sl, r6, sl
 80201c8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80201cc:	f807 8c03 	strb.w	r8, [r7, #-3]
 80201d0:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80201d4:	fb06 aa02 	mla	sl, r6, r2, sl
 80201d8:	fb08 b802 	mla	r8, r8, r2, fp
 80201dc:	fa1f fa8a 	uxth.w	sl, sl
 80201e0:	fa1f f888 	uxth.w	r8, r8
 80201e4:	f10a 0601 	add.w	r6, sl, #1
 80201e8:	f108 0b01 	add.w	fp, r8, #1
 80201ec:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80201f0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80201f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80201f8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80201fc:	f807 ac01 	strb.w	sl, [r7, #-1]
 8020200:	f807 8c02 	strb.w	r8, [r7, #-2]
 8020204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020206:	4474      	add	r4, lr
 8020208:	3703      	adds	r7, #3
 802020a:	f109 39ff 	add.w	r9, r9, #4294967295
 802020e:	4410      	add	r0, r2
 8020210:	e7a4      	b.n	802015c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020212:	f04f 0800 	mov.w	r8, #0
 8020216:	eba3 0208 	sub.w	r2, r3, r8
 802021a:	2a00      	cmp	r2, #0
 802021c:	dc3b      	bgt.n	8020296 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802021e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020222:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020226:	441d      	add	r5, r3
 8020228:	2900      	cmp	r1, #0
 802022a:	f340 8093 	ble.w	8020354 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802022e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020234:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020238:	3901      	subs	r1, #1
 802023a:	eeb0 6a62 	vmov.f32	s12, s5
 802023e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020242:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020246:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802024a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802024e:	eeb0 6a43 	vmov.f32	s12, s6
 8020252:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020256:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802025a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802025e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020262:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020266:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802026a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802026e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020272:	ee12 2a90 	vmov	r2, s5
 8020276:	eef0 2a47 	vmov.f32	s5, s14
 802027a:	fb92 fef3 	sdiv	lr, r2, r3
 802027e:	ee13 2a10 	vmov	r2, s6
 8020282:	eeb0 3a67 	vmov.f32	s6, s15
 8020286:	fb92 f3f3 	sdiv	r3, r2, r3
 802028a:	9a02      	ldr	r2, [sp, #8]
 802028c:	9312      	str	r3, [sp, #72]	; 0x48
 802028e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020290:	bf08      	it	eq
 8020292:	4613      	moveq	r3, r2
 8020294:	e731      	b.n	80200fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020296:	1427      	asrs	r7, r4, #16
 8020298:	d456      	bmi.n	8020348 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802029a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 802029e:	42be      	cmp	r6, r7
 80202a0:	dd52      	ble.n	8020348 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80202a2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80202a6:	d44f      	bmi.n	8020348 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80202a8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80202ac:	454a      	cmp	r2, r9
 80202ae:	dd4b      	ble.n	8020348 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80202b0:	9a00      	ldr	r2, [sp, #0]
 80202b2:	b236      	sxth	r6, r6
 80202b4:	fb09 2606 	mla	r6, r9, r6, r2
 80202b8:	5df2      	ldrb	r2, [r6, r7]
 80202ba:	9e01      	ldr	r6, [sp, #4]
 80202bc:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80202c0:	0e3a      	lsrs	r2, r7, #24
 80202c2:	d041      	beq.n	8020348 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80202c4:	9e03      	ldr	r6, [sp, #12]
 80202c6:	fa5f fb87 	uxtb.w	fp, r7
 80202ca:	4372      	muls	r2, r6
 80202cc:	1c56      	adds	r6, r2, #1
 80202ce:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80202d2:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80202d6:	1212      	asrs	r2, r2, #8
 80202d8:	f815 9006 	ldrb.w	r9, [r5, r6]
 80202dc:	fa1f fa82 	uxth.w	sl, r2
 80202e0:	43d2      	mvns	r2, r2
 80202e2:	fb1b fb0a 	smulbb	fp, fp, sl
 80202e6:	b2d2      	uxtb	r2, r2
 80202e8:	fb09 b902 	mla	r9, r9, r2, fp
 80202ec:	fa1f f989 	uxth.w	r9, r9
 80202f0:	f109 0b01 	add.w	fp, r9, #1
 80202f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80202f8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80202fc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020300:	fb1b fb0a 	smulbb	fp, fp, sl
 8020304:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020308:	fb17 fa0a 	smulbb	sl, r7, sl
 802030c:	f805 9006 	strb.w	r9, [r5, r6]
 8020310:	442e      	add	r6, r5
 8020312:	78b7      	ldrb	r7, [r6, #2]
 8020314:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020318:	fb07 aa02 	mla	sl, r7, r2, sl
 802031c:	fb09 b902 	mla	r9, r9, r2, fp
 8020320:	fa1f fa8a 	uxth.w	sl, sl
 8020324:	fa1f f989 	uxth.w	r9, r9
 8020328:	f10a 0701 	add.w	r7, sl, #1
 802032c:	f109 0b01 	add.w	fp, r9, #1
 8020330:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020334:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020338:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802033c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020340:	f886 a002 	strb.w	sl, [r6, #2]
 8020344:	f886 9001 	strb.w	r9, [r6, #1]
 8020348:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802034a:	4474      	add	r4, lr
 802034c:	f108 0801 	add.w	r8, r8, #1
 8020350:	4410      	add	r0, r2
 8020352:	e760      	b.n	8020216 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8020354:	b005      	add	sp, #20
 8020356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802035a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802035a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802035e:	b085      	sub	sp, #20
 8020360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020364:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020366:	9203      	str	r2, [sp, #12]
 8020368:	6868      	ldr	r0, [r5, #4]
 802036a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 802036e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8020372:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020376:	fb00 2404 	mla	r4, r0, r4, r2
 802037a:	682a      	ldr	r2, [r5, #0]
 802037c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020380:	4414      	add	r4, r2
 8020382:	f8dc 2000 	ldr.w	r2, [ip]
 8020386:	9201      	str	r2, [sp, #4]
 8020388:	f8dc 2004 	ldr.w	r2, [ip, #4]
 802038c:	3204      	adds	r2, #4
 802038e:	9202      	str	r2, [sp, #8]
 8020390:	2900      	cmp	r1, #0
 8020392:	dc03      	bgt.n	802039c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8020394:	9a03      	ldr	r2, [sp, #12]
 8020396:	2a00      	cmp	r2, #0
 8020398:	f340 8137 	ble.w	802060a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802039c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802039e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80203a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80203a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80203a8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80203ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	dd0d      	ble.n	80203d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80203b4:	1405      	asrs	r5, r0, #16
 80203b6:	d405      	bmi.n	80203c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80203b8:	4545      	cmp	r5, r8
 80203ba:	da03      	bge.n	80203c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80203bc:	1415      	asrs	r5, r2, #16
 80203be:	d401      	bmi.n	80203c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80203c0:	42bd      	cmp	r5, r7
 80203c2:	db06      	blt.n	80203d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80203c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80203c6:	4470      	add	r0, lr
 80203c8:	3b01      	subs	r3, #1
 80203ca:	3403      	adds	r4, #3
 80203cc:	442a      	add	r2, r5
 80203ce:	e7ef      	b.n	80203b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80203d0:	d070      	beq.n	80204b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80203d2:	1e5d      	subs	r5, r3, #1
 80203d4:	fb0e 0605 	mla	r6, lr, r5, r0
 80203d8:	1436      	asrs	r6, r6, #16
 80203da:	d462      	bmi.n	80204a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80203dc:	4546      	cmp	r6, r8
 80203de:	da60      	bge.n	80204a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80203e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80203e2:	fb06 2505 	mla	r5, r6, r5, r2
 80203e6:	142d      	asrs	r5, r5, #16
 80203e8:	d45b      	bmi.n	80204a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80203ea:	42bd      	cmp	r5, r7
 80203ec:	da59      	bge.n	80204a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80203ee:	1ce5      	adds	r5, r4, #3
 80203f0:	469a      	mov	sl, r3
 80203f2:	f1ba 0f00 	cmp.w	sl, #0
 80203f6:	dd58      	ble.n	80204aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80203f8:	1416      	asrs	r6, r2, #16
 80203fa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80203fe:	1407      	asrs	r7, r0, #16
 8020400:	46b1      	mov	r9, r6
 8020402:	9e01      	ldr	r6, [sp, #4]
 8020404:	fb08 6609 	mla	r6, r8, r9, r6
 8020408:	5df6      	ldrb	r6, [r6, r7]
 802040a:	9f02      	ldr	r7, [sp, #8]
 802040c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8020410:	0e37      	lsrs	r7, r6, #24
 8020412:	2fff      	cmp	r7, #255	; 0xff
 8020414:	f000 80f0 	beq.w	80205f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8020418:	fa5f f887 	uxtb.w	r8, r7
 802041c:	b3d7      	cbz	r7, 8020494 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802041e:	fa1f f788 	uxth.w	r7, r8
 8020422:	ea6f 0808 	mvn.w	r8, r8
 8020426:	fa5f fb86 	uxtb.w	fp, r6
 802042a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 802042e:	fa5f f888 	uxtb.w	r8, r8
 8020432:	fb1b fb07 	smulbb	fp, fp, r7
 8020436:	fb09 b908 	mla	r9, r9, r8, fp
 802043a:	fa1f f989 	uxth.w	r9, r9
 802043e:	f109 0b01 	add.w	fp, r9, #1
 8020442:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020446:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 802044a:	fb1b fb08 	smulbb	fp, fp, r8
 802044e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020452:	f805 9c03 	strb.w	r9, [r5, #-3]
 8020456:	f3c6 2907 	ubfx	r9, r6, #8, #8
 802045a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 802045e:	fb09 b907 	mla	r9, r9, r7, fp
 8020462:	fa1f f989 	uxth.w	r9, r9
 8020466:	f109 0b01 	add.w	fp, r9, #1
 802046a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802046e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020472:	f805 9c02 	strb.w	r9, [r5, #-2]
 8020476:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 802047a:	fb19 f808 	smulbb	r8, r9, r8
 802047e:	fb06 8607 	mla	r6, r6, r7, r8
 8020482:	b2b6      	uxth	r6, r6
 8020484:	f106 0801 	add.w	r8, r6, #1
 8020488:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 802048c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020490:	f805 8c01 	strb.w	r8, [r5, #-1]
 8020494:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020496:	4470      	add	r0, lr
 8020498:	3503      	adds	r5, #3
 802049a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802049e:	4432      	add	r2, r6
 80204a0:	e7a7      	b.n	80203f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80204a2:	2600      	movs	r6, #0
 80204a4:	1b9d      	subs	r5, r3, r6
 80204a6:	2d00      	cmp	r5, #0
 80204a8:	dc3b      	bgt.n	8020522 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80204aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80204b2:	441c      	add	r4, r3
 80204b4:	2900      	cmp	r1, #0
 80204b6:	f340 80a8 	ble.w	802060a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80204ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80204c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80204c4:	3901      	subs	r1, #1
 80204c6:	eeb0 6a62 	vmov.f32	s12, s5
 80204ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80204ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80204d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80204d6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80204da:	eeb0 6a43 	vmov.f32	s12, s6
 80204de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80204e2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80204e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80204ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80204ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80204f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80204f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80204fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80204fe:	ee12 2a90 	vmov	r2, s5
 8020502:	eef0 2a47 	vmov.f32	s5, s14
 8020506:	fb92 fef3 	sdiv	lr, r2, r3
 802050a:	ee13 2a10 	vmov	r2, s6
 802050e:	eeb0 3a67 	vmov.f32	s6, s15
 8020512:	fb92 f3f3 	sdiv	r3, r2, r3
 8020516:	9a03      	ldr	r2, [sp, #12]
 8020518:	9312      	str	r3, [sp, #72]	; 0x48
 802051a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802051c:	bf08      	it	eq
 802051e:	4613      	moveq	r3, r2
 8020520:	e736      	b.n	8020390 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020522:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020526:	d457      	bmi.n	80205d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020528:	f8dc 7008 	ldr.w	r7, [ip, #8]
 802052c:	4547      	cmp	r7, r8
 802052e:	dd53      	ble.n	80205d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020530:	ea5f 4922 	movs.w	r9, r2, asr #16
 8020534:	d450      	bmi.n	80205d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020536:	f8dc 500c 	ldr.w	r5, [ip, #12]
 802053a:	454d      	cmp	r5, r9
 802053c:	dd4c      	ble.n	80205d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802053e:	9d01      	ldr	r5, [sp, #4]
 8020540:	b23f      	sxth	r7, r7
 8020542:	fb09 5707 	mla	r7, r9, r7, r5
 8020546:	f817 5008 	ldrb.w	r5, [r7, r8]
 802054a:	9f02      	ldr	r7, [sp, #8]
 802054c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8020550:	0e2f      	lsrs	r7, r5, #24
 8020552:	2fff      	cmp	r7, #255	; 0xff
 8020554:	d045      	beq.n	80205e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8020556:	fa5f f987 	uxtb.w	r9, r7
 802055a:	b3ef      	cbz	r7, 80205d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802055c:	fa1f f889 	uxth.w	r8, r9
 8020560:	ea6f 0909 	mvn.w	r9, r9
 8020564:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8020568:	fa5f fb85 	uxtb.w	fp, r5
 802056c:	f814 a007 	ldrb.w	sl, [r4, r7]
 8020570:	fa5f f989 	uxtb.w	r9, r9
 8020574:	fb1b fb08 	smulbb	fp, fp, r8
 8020578:	fb0a ba09 	mla	sl, sl, r9, fp
 802057c:	fa1f fa8a 	uxth.w	sl, sl
 8020580:	f10a 0b01 	add.w	fp, sl, #1
 8020584:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8020588:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802058c:	f804 a007 	strb.w	sl, [r4, r7]
 8020590:	4427      	add	r7, r4
 8020592:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020596:	f3c5 4507 	ubfx	r5, r5, #16, #8
 802059a:	f897 b001 	ldrb.w	fp, [r7, #1]
 802059e:	fb1b fb09 	smulbb	fp, fp, r9
 80205a2:	fb0a ba08 	mla	sl, sl, r8, fp
 80205a6:	fa1f fa8a 	uxth.w	sl, sl
 80205aa:	f10a 0b01 	add.w	fp, sl, #1
 80205ae:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80205b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80205b6:	f887 a001 	strb.w	sl, [r7, #1]
 80205ba:	f897 a002 	ldrb.w	sl, [r7, #2]
 80205be:	fb1a f909 	smulbb	r9, sl, r9
 80205c2:	fb05 9508 	mla	r5, r5, r8, r9
 80205c6:	b2ad      	uxth	r5, r5
 80205c8:	f105 0901 	add.w	r9, r5, #1
 80205cc:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80205d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80205d4:	f887 9002 	strb.w	r9, [r7, #2]
 80205d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80205da:	4470      	add	r0, lr
 80205dc:	3601      	adds	r6, #1
 80205de:	442a      	add	r2, r5
 80205e0:	e760      	b.n	80204a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80205e2:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80205e6:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80205ea:	55e5      	strb	r5, [r4, r7]
 80205ec:	4427      	add	r7, r4
 80205ee:	0c2d      	lsrs	r5, r5, #16
 80205f0:	f887 8001 	strb.w	r8, [r7, #1]
 80205f4:	70bd      	strb	r5, [r7, #2]
 80205f6:	e7ef      	b.n	80205d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80205f8:	0a37      	lsrs	r7, r6, #8
 80205fa:	f805 6c03 	strb.w	r6, [r5, #-3]
 80205fe:	0c36      	lsrs	r6, r6, #16
 8020600:	f805 7c02 	strb.w	r7, [r5, #-2]
 8020604:	f805 6c01 	strb.w	r6, [r5, #-1]
 8020608:	e744      	b.n	8020494 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802060a:	b005      	add	sp, #20
 802060c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020610 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020614:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8020616:	9201      	str	r2, [sp, #4]
 8020618:	6870      	ldr	r0, [r6, #4]
 802061a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 802061e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8020622:	fa1f fe85 	uxth.w	lr, r5
 8020626:	43ed      	mvns	r5, r5
 8020628:	f8dc 8000 	ldr.w	r8, [ip]
 802062c:	b2ed      	uxtb	r5, r5
 802062e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8020632:	fb00 2404 	mla	r4, r0, r4, r2
 8020636:	6832      	ldr	r2, [r6, #0]
 8020638:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802063c:	4414      	add	r4, r2
 802063e:	2900      	cmp	r1, #0
 8020640:	dc03      	bgt.n	802064a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020642:	9a01      	ldr	r2, [sp, #4]
 8020644:	2a00      	cmp	r2, #0
 8020646:	f340 810d 	ble.w	8020864 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802064a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802064c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8020650:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020654:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020656:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 802065a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802065e:	2b00      	cmp	r3, #0
 8020660:	dd0e      	ble.n	8020680 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020662:	1406      	asrs	r6, r0, #16
 8020664:	d405      	bmi.n	8020672 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020666:	4556      	cmp	r6, sl
 8020668:	da03      	bge.n	8020672 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802066a:	1416      	asrs	r6, r2, #16
 802066c:	d401      	bmi.n	8020672 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802066e:	454e      	cmp	r6, r9
 8020670:	db07      	blt.n	8020682 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020672:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020674:	3b01      	subs	r3, #1
 8020676:	3403      	adds	r4, #3
 8020678:	4430      	add	r0, r6
 802067a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802067c:	4432      	add	r2, r6
 802067e:	e7ee      	b.n	802065e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020680:	d060      	beq.n	8020744 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8020682:	1e5e      	subs	r6, r3, #1
 8020684:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020686:	fb07 0706 	mla	r7, r7, r6, r0
 802068a:	143f      	asrs	r7, r7, #16
 802068c:	d451      	bmi.n	8020732 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802068e:	4557      	cmp	r7, sl
 8020690:	da4f      	bge.n	8020732 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020692:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020694:	fb07 2606 	mla	r6, r7, r6, r2
 8020698:	1436      	asrs	r6, r6, #16
 802069a:	d44a      	bmi.n	8020732 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802069c:	454e      	cmp	r6, r9
 802069e:	da48      	bge.n	8020732 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80206a0:	1ce6      	adds	r6, r4, #3
 80206a2:	4699      	mov	r9, r3
 80206a4:	f1b9 0f00 	cmp.w	r9, #0
 80206a8:	f106 0603 	add.w	r6, r6, #3
 80206ac:	dd45      	ble.n	802073a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80206ae:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80206b2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80206b6:	1417      	asrs	r7, r2, #16
 80206b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80206bc:	fb0b a707 	mla	r7, fp, r7, sl
 80206c0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80206c4:	fb1b fb05 	smulbb	fp, fp, r5
 80206c8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80206cc:	eb08 0a07 	add.w	sl, r8, r7
 80206d0:	f818 7007 	ldrb.w	r7, [r8, r7]
 80206d4:	fb07 b70e 	mla	r7, r7, lr, fp
 80206d8:	b2bf      	uxth	r7, r7
 80206da:	f107 0b01 	add.w	fp, r7, #1
 80206de:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80206e2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80206e6:	fb1b fb05 	smulbb	fp, fp, r5
 80206ea:	123f      	asrs	r7, r7, #8
 80206ec:	f806 7c06 	strb.w	r7, [r6, #-6]
 80206f0:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80206f4:	fb07 b70e 	mla	r7, r7, lr, fp
 80206f8:	b2bf      	uxth	r7, r7
 80206fa:	f107 0b01 	add.w	fp, r7, #1
 80206fe:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8020702:	123f      	asrs	r7, r7, #8
 8020704:	f806 7c05 	strb.w	r7, [r6, #-5]
 8020708:	f89a 7002 	ldrb.w	r7, [sl, #2]
 802070c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8020710:	fb1a fa05 	smulbb	sl, sl, r5
 8020714:	fb07 a70e 	mla	r7, r7, lr, sl
 8020718:	b2bf      	uxth	r7, r7
 802071a:	f107 0a01 	add.w	sl, r7, #1
 802071e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8020722:	123f      	asrs	r7, r7, #8
 8020724:	f806 7c04 	strb.w	r7, [r6, #-4]
 8020728:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802072a:	4438      	add	r0, r7
 802072c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802072e:	443a      	add	r2, r7
 8020730:	e7b8      	b.n	80206a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020732:	2700      	movs	r7, #0
 8020734:	1bde      	subs	r6, r3, r7
 8020736:	2e00      	cmp	r6, #0
 8020738:	dc3f      	bgt.n	80207ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802073a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802073e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020742:	441c      	add	r4, r3
 8020744:	2900      	cmp	r1, #0
 8020746:	f340 808d 	ble.w	8020864 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802074a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802074e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020750:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020754:	3901      	subs	r1, #1
 8020756:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802075a:	eef0 6a62 	vmov.f32	s13, s5
 802075e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020762:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020766:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802076a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 802076e:	eef0 6a43 	vmov.f32	s13, s6
 8020772:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020776:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 802077a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802077e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020782:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020786:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802078a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802078e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020792:	ee12 2a90 	vmov	r2, s5
 8020796:	eef0 2a47 	vmov.f32	s5, s14
 802079a:	fb92 f3f3 	sdiv	r3, r2, r3
 802079e:	ee13 2a10 	vmov	r2, s6
 80207a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80207a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207a6:	eeb0 3a67 	vmov.f32	s6, s15
 80207aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80207ae:	9a01      	ldr	r2, [sp, #4]
 80207b0:	9310      	str	r3, [sp, #64]	; 0x40
 80207b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207b4:	bf08      	it	eq
 80207b6:	4613      	moveq	r3, r2
 80207b8:	e741      	b.n	802063e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80207ba:	ea5f 4920 	movs.w	r9, r0, asr #16
 80207be:	d44b      	bmi.n	8020858 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80207c0:	f8dc b008 	ldr.w	fp, [ip, #8]
 80207c4:	45cb      	cmp	fp, r9
 80207c6:	dd47      	ble.n	8020858 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80207c8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80207cc:	d444      	bmi.n	8020858 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80207ce:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80207d2:	4556      	cmp	r6, sl
 80207d4:	dd40      	ble.n	8020858 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80207d6:	fa0f f68b 	sxth.w	r6, fp
 80207da:	fb0a 9906 	mla	r9, sl, r6, r9
 80207de:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80207e2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80207e6:	f814 b006 	ldrb.w	fp, [r4, r6]
 80207ea:	fb1b fb05 	smulbb	fp, fp, r5
 80207ee:	eb08 0a09 	add.w	sl, r8, r9
 80207f2:	f818 9009 	ldrb.w	r9, [r8, r9]
 80207f6:	fb09 b90e 	mla	r9, r9, lr, fp
 80207fa:	fa1f f989 	uxth.w	r9, r9
 80207fe:	f109 0b01 	add.w	fp, r9, #1
 8020802:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020806:	ea4f 2929 	mov.w	r9, r9, asr #8
 802080a:	f804 9006 	strb.w	r9, [r4, r6]
 802080e:	4426      	add	r6, r4
 8020810:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8020814:	f896 b001 	ldrb.w	fp, [r6, #1]
 8020818:	fb1b fb05 	smulbb	fp, fp, r5
 802081c:	fb09 b90e 	mla	r9, r9, lr, fp
 8020820:	fa1f f989 	uxth.w	r9, r9
 8020824:	f109 0b01 	add.w	fp, r9, #1
 8020828:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802082c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020830:	f886 9001 	strb.w	r9, [r6, #1]
 8020834:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8020838:	f896 a002 	ldrb.w	sl, [r6, #2]
 802083c:	fb1a fa05 	smulbb	sl, sl, r5
 8020840:	fb09 a90e 	mla	r9, r9, lr, sl
 8020844:	fa1f f989 	uxth.w	r9, r9
 8020848:	f109 0a01 	add.w	sl, r9, #1
 802084c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8020850:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020854:	f886 9002 	strb.w	r9, [r6, #2]
 8020858:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802085a:	3701      	adds	r7, #1
 802085c:	4430      	add	r0, r6
 802085e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020860:	4432      	add	r2, r6
 8020862:	e767      	b.n	8020734 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020864:	b003      	add	sp, #12
 8020866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802086a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802086a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802086e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020874:	9201      	str	r2, [sp, #4]
 8020876:	6868      	ldr	r0, [r5, #4]
 8020878:	9f14      	ldr	r7, [sp, #80]	; 0x50
 802087a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 802087e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8020882:	fb00 2404 	mla	r4, r0, r4, r2
 8020886:	682a      	ldr	r2, [r5, #0]
 8020888:	f8d7 8000 	ldr.w	r8, [r7]
 802088c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020890:	4414      	add	r4, r2
 8020892:	2900      	cmp	r1, #0
 8020894:	dc03      	bgt.n	802089e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020896:	9a01      	ldr	r2, [sp, #4]
 8020898:	2a00      	cmp	r2, #0
 802089a:	f340 80af 	ble.w	80209fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 802089e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80208a0:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80208a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80208a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80208aa:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80208ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80208b2:	2b00      	cmp	r3, #0
 80208b4:	dd0c      	ble.n	80208d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80208b6:	1405      	asrs	r5, r0, #16
 80208b8:	d405      	bmi.n	80208c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80208ba:	4555      	cmp	r5, sl
 80208bc:	da03      	bge.n	80208c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80208be:	1415      	asrs	r5, r2, #16
 80208c0:	d401      	bmi.n	80208c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80208c2:	454d      	cmp	r5, r9
 80208c4:	db05      	blt.n	80208d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80208c6:	4470      	add	r0, lr
 80208c8:	4462      	add	r2, ip
 80208ca:	3b01      	subs	r3, #1
 80208cc:	3403      	adds	r4, #3
 80208ce:	e7f0      	b.n	80208b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80208d0:	d038      	beq.n	8020944 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80208d2:	1e5d      	subs	r5, r3, #1
 80208d4:	fb0e 0605 	mla	r6, lr, r5, r0
 80208d8:	1436      	asrs	r6, r6, #16
 80208da:	d42a      	bmi.n	8020932 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80208dc:	4556      	cmp	r6, sl
 80208de:	da28      	bge.n	8020932 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80208e0:	fb0c 2505 	mla	r5, ip, r5, r2
 80208e4:	142d      	asrs	r5, r5, #16
 80208e6:	d424      	bmi.n	8020932 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80208e8:	454d      	cmp	r5, r9
 80208ea:	da22      	bge.n	8020932 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80208ec:	1ce6      	adds	r6, r4, #3
 80208ee:	4699      	mov	r9, r3
 80208f0:	f1b9 0f00 	cmp.w	r9, #0
 80208f4:	f106 0603 	add.w	r6, r6, #3
 80208f8:	dd1f      	ble.n	802093a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80208fa:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80208fe:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8020902:	1415      	asrs	r5, r2, #16
 8020904:	4470      	add	r0, lr
 8020906:	4462      	add	r2, ip
 8020908:	f109 39ff 	add.w	r9, r9, #4294967295
 802090c:	fb0b a505 	mla	r5, fp, r5, sl
 8020910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020914:	eb08 0a05 	add.w	sl, r8, r5
 8020918:	f818 5005 	ldrb.w	r5, [r8, r5]
 802091c:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020920:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8020924:	f806 5c05 	strb.w	r5, [r6, #-5]
 8020928:	f89a 5002 	ldrb.w	r5, [sl, #2]
 802092c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8020930:	e7de      	b.n	80208f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020932:	2600      	movs	r6, #0
 8020934:	1b9d      	subs	r5, r3, r6
 8020936:	2d00      	cmp	r5, #0
 8020938:	dc38      	bgt.n	80209ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802093a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802093e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020942:	441c      	add	r4, r3
 8020944:	2900      	cmp	r1, #0
 8020946:	dd59      	ble.n	80209fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020948:	ee30 0a04 	vadd.f32	s0, s0, s8
 802094c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802094e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020952:	3901      	subs	r1, #1
 8020954:	eeb0 6a62 	vmov.f32	s12, s5
 8020958:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802095c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020960:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020964:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8020968:	eeb0 6a43 	vmov.f32	s12, s6
 802096c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020970:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8020974:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020978:	ee61 7a27 	vmul.f32	s15, s2, s15
 802097c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020980:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020984:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020988:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802098c:	ee12 2a90 	vmov	r2, s5
 8020990:	eef0 2a47 	vmov.f32	s5, s14
 8020994:	fb92 fef3 	sdiv	lr, r2, r3
 8020998:	ee13 2a10 	vmov	r2, s6
 802099c:	eeb0 3a67 	vmov.f32	s6, s15
 80209a0:	fb92 fcf3 	sdiv	ip, r2, r3
 80209a4:	9a01      	ldr	r2, [sp, #4]
 80209a6:	bf08      	it	eq
 80209a8:	4613      	moveq	r3, r2
 80209aa:	e772      	b.n	8020892 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80209ac:	ea5f 4920 	movs.w	r9, r0, asr #16
 80209b0:	d420      	bmi.n	80209f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80209b2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80209b6:	45cb      	cmp	fp, r9
 80209b8:	dd1c      	ble.n	80209f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80209ba:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80209be:	d419      	bmi.n	80209f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80209c0:	68fd      	ldr	r5, [r7, #12]
 80209c2:	4555      	cmp	r5, sl
 80209c4:	dd16      	ble.n	80209f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80209c6:	fa0f f58b 	sxth.w	r5, fp
 80209ca:	fb0a 9505 	mla	r5, sl, r5, r9
 80209ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80209d2:	f818 9005 	ldrb.w	r9, [r8, r5]
 80209d6:	eb08 0b05 	add.w	fp, r8, r5
 80209da:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80209de:	f804 9005 	strb.w	r9, [r4, r5]
 80209e2:	4425      	add	r5, r4
 80209e4:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80209e8:	f885 9001 	strb.w	r9, [r5, #1]
 80209ec:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80209f0:	f885 9002 	strb.w	r9, [r5, #2]
 80209f4:	4470      	add	r0, lr
 80209f6:	4462      	add	r2, ip
 80209f8:	3601      	adds	r6, #1
 80209fa:	e79b      	b.n	8020934 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80209fc:	b003      	add	sp, #12
 80209fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020a02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a06:	b085      	sub	sp, #20
 8020a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020a0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020a0e:	9202      	str	r2, [sp, #8]
 8020a10:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8020a14:	6860      	ldr	r0, [r4, #4]
 8020a16:	9203      	str	r2, [sp, #12]
 8020a18:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8020a1c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8020a20:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8020a24:	fb00 2505 	mla	r5, r0, r5, r2
 8020a28:	6822      	ldr	r2, [r4, #0]
 8020a2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020a2e:	4415      	add	r5, r2
 8020a30:	f8dc 2000 	ldr.w	r2, [ip]
 8020a34:	9201      	str	r2, [sp, #4]
 8020a36:	2900      	cmp	r1, #0
 8020a38:	dc03      	bgt.n	8020a42 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020a3a:	9a02      	ldr	r2, [sp, #8]
 8020a3c:	2a00      	cmp	r2, #0
 8020a3e:	f340 8122 	ble.w	8020c86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020a42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020a44:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020a48:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020a4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020a4e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020a52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020a56:	2b00      	cmp	r3, #0
 8020a58:	dd0d      	ble.n	8020a76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020a5a:	1422      	asrs	r2, r4, #16
 8020a5c:	d405      	bmi.n	8020a6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020a5e:	4542      	cmp	r2, r8
 8020a60:	da03      	bge.n	8020a6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020a62:	1402      	asrs	r2, r0, #16
 8020a64:	d401      	bmi.n	8020a6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020a66:	42ba      	cmp	r2, r7
 8020a68:	db06      	blt.n	8020a78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020a6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020a6c:	4474      	add	r4, lr
 8020a6e:	3b01      	subs	r3, #1
 8020a70:	3503      	adds	r5, #3
 8020a72:	4410      	add	r0, r2
 8020a74:	e7ef      	b.n	8020a56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020a76:	d072      	beq.n	8020b5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8020a78:	1e5a      	subs	r2, r3, #1
 8020a7a:	fb0e 4602 	mla	r6, lr, r2, r4
 8020a7e:	1436      	asrs	r6, r6, #16
 8020a80:	d462      	bmi.n	8020b48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020a82:	4546      	cmp	r6, r8
 8020a84:	da60      	bge.n	8020b48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020a86:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020a88:	fb06 0202 	mla	r2, r6, r2, r0
 8020a8c:	1412      	asrs	r2, r2, #16
 8020a8e:	d45b      	bmi.n	8020b48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020a90:	42ba      	cmp	r2, r7
 8020a92:	da59      	bge.n	8020b48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020a94:	1cef      	adds	r7, r5, #3
 8020a96:	4699      	mov	r9, r3
 8020a98:	f1b9 0f00 	cmp.w	r9, #0
 8020a9c:	dd5a      	ble.n	8020b54 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020a9e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020aa2:	1426      	asrs	r6, r4, #16
 8020aa4:	1402      	asrs	r2, r0, #16
 8020aa6:	fb08 6202 	mla	r2, r8, r2, r6
 8020aaa:	9e01      	ldr	r6, [sp, #4]
 8020aac:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8020ab0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8020ab4:	d041      	beq.n	8020b3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020ab6:	9a03      	ldr	r2, [sp, #12]
 8020ab8:	fa5f fb86 	uxtb.w	fp, r6
 8020abc:	fb02 f808 	mul.w	r8, r2, r8
 8020ac0:	f108 0201 	add.w	r2, r8, #1
 8020ac4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8020ac8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8020acc:	1212      	asrs	r2, r2, #8
 8020ace:	fa1f fa82 	uxth.w	sl, r2
 8020ad2:	43d2      	mvns	r2, r2
 8020ad4:	fb1b fb0a 	smulbb	fp, fp, sl
 8020ad8:	b2d2      	uxtb	r2, r2
 8020ada:	fb08 b802 	mla	r8, r8, r2, fp
 8020ade:	fa1f f888 	uxth.w	r8, r8
 8020ae2:	f108 0b01 	add.w	fp, r8, #1
 8020ae6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020aea:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8020aee:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020af2:	fb1b fb0a 	smulbb	fp, fp, sl
 8020af6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020afa:	fb16 fa0a 	smulbb	sl, r6, sl
 8020afe:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8020b02:	f807 8c03 	strb.w	r8, [r7, #-3]
 8020b06:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8020b0a:	fb06 aa02 	mla	sl, r6, r2, sl
 8020b0e:	fb08 b802 	mla	r8, r8, r2, fp
 8020b12:	fa1f fa8a 	uxth.w	sl, sl
 8020b16:	fa1f f888 	uxth.w	r8, r8
 8020b1a:	f10a 0601 	add.w	r6, sl, #1
 8020b1e:	f108 0b01 	add.w	fp, r8, #1
 8020b22:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8020b26:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020b2a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020b2e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020b32:	f807 ac01 	strb.w	sl, [r7, #-1]
 8020b36:	f807 8c02 	strb.w	r8, [r7, #-2]
 8020b3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020b3c:	4474      	add	r4, lr
 8020b3e:	3703      	adds	r7, #3
 8020b40:	f109 39ff 	add.w	r9, r9, #4294967295
 8020b44:	4410      	add	r0, r2
 8020b46:	e7a7      	b.n	8020a98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020b48:	f04f 0800 	mov.w	r8, #0
 8020b4c:	eba3 0208 	sub.w	r2, r3, r8
 8020b50:	2a00      	cmp	r2, #0
 8020b52:	dc3b      	bgt.n	8020bcc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b5c:	441d      	add	r5, r3
 8020b5e:	2900      	cmp	r1, #0
 8020b60:	f340 8091 	ble.w	8020c86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020b64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b6e:	3901      	subs	r1, #1
 8020b70:	eeb0 6a62 	vmov.f32	s12, s5
 8020b74:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020b78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b80:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020b84:	eeb0 6a43 	vmov.f32	s12, s6
 8020b88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b8c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020b90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020ba0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ba4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020ba8:	ee12 2a90 	vmov	r2, s5
 8020bac:	eef0 2a47 	vmov.f32	s5, s14
 8020bb0:	fb92 fef3 	sdiv	lr, r2, r3
 8020bb4:	ee13 2a10 	vmov	r2, s6
 8020bb8:	eeb0 3a67 	vmov.f32	s6, s15
 8020bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bc0:	9a02      	ldr	r2, [sp, #8]
 8020bc2:	9312      	str	r3, [sp, #72]	; 0x48
 8020bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020bc6:	bf08      	it	eq
 8020bc8:	4613      	moveq	r3, r2
 8020bca:	e734      	b.n	8020a36 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020bcc:	1427      	asrs	r7, r4, #16
 8020bce:	d454      	bmi.n	8020c7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020bd0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020bd4:	42be      	cmp	r6, r7
 8020bd6:	dd50      	ble.n	8020c7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020bd8:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020bdc:	d44d      	bmi.n	8020c7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020bde:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020be2:	454a      	cmp	r2, r9
 8020be4:	dd49      	ble.n	8020c7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020be6:	b236      	sxth	r6, r6
 8020be8:	9a01      	ldr	r2, [sp, #4]
 8020bea:	fb09 7606 	mla	r6, r9, r6, r7
 8020bee:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020bf2:	0e3a      	lsrs	r2, r7, #24
 8020bf4:	d041      	beq.n	8020c7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020bf6:	9e03      	ldr	r6, [sp, #12]
 8020bf8:	fa5f fb87 	uxtb.w	fp, r7
 8020bfc:	4372      	muls	r2, r6
 8020bfe:	1c56      	adds	r6, r2, #1
 8020c00:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020c04:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8020c08:	1212      	asrs	r2, r2, #8
 8020c0a:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020c0e:	fa1f fa82 	uxth.w	sl, r2
 8020c12:	43d2      	mvns	r2, r2
 8020c14:	fb1b fb0a 	smulbb	fp, fp, sl
 8020c18:	b2d2      	uxtb	r2, r2
 8020c1a:	fb09 b902 	mla	r9, r9, r2, fp
 8020c1e:	fa1f f989 	uxth.w	r9, r9
 8020c22:	f109 0b01 	add.w	fp, r9, #1
 8020c26:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020c2a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020c2e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020c32:	fb1b fb0a 	smulbb	fp, fp, sl
 8020c36:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c3a:	fb17 fa0a 	smulbb	sl, r7, sl
 8020c3e:	f805 9006 	strb.w	r9, [r5, r6]
 8020c42:	442e      	add	r6, r5
 8020c44:	78b7      	ldrb	r7, [r6, #2]
 8020c46:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020c4a:	fb07 aa02 	mla	sl, r7, r2, sl
 8020c4e:	fb09 b902 	mla	r9, r9, r2, fp
 8020c52:	fa1f fa8a 	uxth.w	sl, sl
 8020c56:	fa1f f989 	uxth.w	r9, r9
 8020c5a:	f10a 0701 	add.w	r7, sl, #1
 8020c5e:	f109 0b01 	add.w	fp, r9, #1
 8020c62:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020c66:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020c6a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020c6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c72:	f886 a002 	strb.w	sl, [r6, #2]
 8020c76:	f886 9001 	strb.w	r9, [r6, #1]
 8020c7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020c7c:	4474      	add	r4, lr
 8020c7e:	f108 0801 	add.w	r8, r8, #1
 8020c82:	4410      	add	r0, r2
 8020c84:	e762      	b.n	8020b4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020c86:	b005      	add	sp, #20
 8020c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020c96:	9201      	str	r2, [sp, #4]
 8020c98:	6860      	ldr	r0, [r4, #4]
 8020c9a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8020c9e:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8020ca2:	fb00 2505 	mla	r5, r0, r5, r2
 8020ca6:	6822      	ldr	r2, [r4, #0]
 8020ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020cac:	4415      	add	r5, r2
 8020cae:	f8dc 2000 	ldr.w	r2, [ip]
 8020cb2:	9200      	str	r2, [sp, #0]
 8020cb4:	2900      	cmp	r1, #0
 8020cb6:	dc03      	bgt.n	8020cc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020cb8:	9a01      	ldr	r2, [sp, #4]
 8020cba:	2a00      	cmp	r2, #0
 8020cbc:	f340 812b 	ble.w	8020f16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020cc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020cc2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020cc6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020ccc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020cd0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020cd4:	2b00      	cmp	r3, #0
 8020cd6:	dd0e      	ble.n	8020cf6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020cd8:	1422      	asrs	r2, r4, #16
 8020cda:	d405      	bmi.n	8020ce8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020cdc:	4572      	cmp	r2, lr
 8020cde:	da03      	bge.n	8020ce8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020ce0:	1402      	asrs	r2, r0, #16
 8020ce2:	d401      	bmi.n	8020ce8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020ce4:	42ba      	cmp	r2, r7
 8020ce6:	db07      	blt.n	8020cf8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020cea:	3b01      	subs	r3, #1
 8020cec:	3503      	adds	r5, #3
 8020cee:	4414      	add	r4, r2
 8020cf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020cf2:	4410      	add	r0, r2
 8020cf4:	e7ee      	b.n	8020cd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020cf6:	d06f      	beq.n	8020dd8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020cf8:	1e5a      	subs	r2, r3, #1
 8020cfa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020cfc:	fb06 4602 	mla	r6, r6, r2, r4
 8020d00:	1436      	asrs	r6, r6, #16
 8020d02:	d45e      	bmi.n	8020dc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020d04:	4576      	cmp	r6, lr
 8020d06:	da5c      	bge.n	8020dc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020d08:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020d0a:	fb06 0202 	mla	r2, r6, r2, r0
 8020d0e:	1412      	asrs	r2, r2, #16
 8020d10:	d457      	bmi.n	8020dc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020d12:	42ba      	cmp	r2, r7
 8020d14:	da55      	bge.n	8020dc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020d16:	1cee      	adds	r6, r5, #3
 8020d18:	469a      	mov	sl, r3
 8020d1a:	f1ba 0f00 	cmp.w	sl, #0
 8020d1e:	dd56      	ble.n	8020dce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020d20:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020d24:	1427      	asrs	r7, r4, #16
 8020d26:	1402      	asrs	r2, r0, #16
 8020d28:	fb0e 7202 	mla	r2, lr, r2, r7
 8020d2c:	9f00      	ldr	r7, [sp, #0]
 8020d2e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8020d32:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8020d36:	d03c      	beq.n	8020db2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020d38:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020d3c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020d40:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020d44:	fa5f f28e 	uxtb.w	r2, lr
 8020d48:	b2ff      	uxtb	r7, r7
 8020d4a:	f000 80dd 	beq.w	8020f08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020d4e:	fa1f f882 	uxth.w	r8, r2
 8020d52:	43d2      	mvns	r2, r2
 8020d54:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8020d58:	fb17 f708 	smulbb	r7, r7, r8
 8020d5c:	b2d2      	uxtb	r2, r2
 8020d5e:	fb19 f908 	smulbb	r9, r9, r8
 8020d62:	fb0e 7702 	mla	r7, lr, r2, r7
 8020d66:	fb1b f808 	smulbb	r8, fp, r8
 8020d6a:	b2bf      	uxth	r7, r7
 8020d6c:	f107 0e01 	add.w	lr, r7, #1
 8020d70:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020d74:	123f      	asrs	r7, r7, #8
 8020d76:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020d7a:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8020d7e:	fb07 9902 	mla	r9, r7, r2, r9
 8020d82:	fa1f f989 	uxth.w	r9, r9
 8020d86:	f109 0701 	add.w	r7, r9, #1
 8020d8a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020d8e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8020d92:	fb07 8802 	mla	r8, r7, r2, r8
 8020d96:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020d9a:	fa1f f888 	uxth.w	r8, r8
 8020d9e:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020da2:	f108 0201 	add.w	r2, r8, #1
 8020da6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020daa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020dae:	f806 8c01 	strb.w	r8, [r6, #-1]
 8020db2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020db4:	3603      	adds	r6, #3
 8020db6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020dba:	4414      	add	r4, r2
 8020dbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020dbe:	4410      	add	r0, r2
 8020dc0:	e7ab      	b.n	8020d1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020dc2:	f04f 0e00 	mov.w	lr, #0
 8020dc6:	eba3 020e 	sub.w	r2, r3, lr
 8020dca:	2a00      	cmp	r2, #0
 8020dcc:	dc3d      	bgt.n	8020e4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020dce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020dd6:	441d      	add	r5, r3
 8020dd8:	2900      	cmp	r1, #0
 8020dda:	f340 809c 	ble.w	8020f16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020dde:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020de4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020de8:	3901      	subs	r1, #1
 8020dea:	eeb0 6a62 	vmov.f32	s12, s5
 8020dee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020df2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020df6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020dfa:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8020dfe:	eeb0 6a43 	vmov.f32	s12, s6
 8020e02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e06:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8020e0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e22:	ee12 2a90 	vmov	r2, s5
 8020e26:	eef0 2a47 	vmov.f32	s5, s14
 8020e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e2e:	ee13 2a10 	vmov	r2, s6
 8020e32:	930f      	str	r3, [sp, #60]	; 0x3c
 8020e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e36:	eeb0 3a67 	vmov.f32	s6, s15
 8020e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e3e:	9a01      	ldr	r2, [sp, #4]
 8020e40:	9310      	str	r3, [sp, #64]	; 0x40
 8020e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e44:	bf08      	it	eq
 8020e46:	4613      	moveq	r3, r2
 8020e48:	e734      	b.n	8020cb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8020e4a:	1427      	asrs	r7, r4, #16
 8020e4c:	d44d      	bmi.n	8020eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020e4e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020e52:	42be      	cmp	r6, r7
 8020e54:	dd49      	ble.n	8020eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020e56:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020e5a:	d446      	bmi.n	8020eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020e5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020e60:	4542      	cmp	r2, r8
 8020e62:	dd42      	ble.n	8020eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020e64:	b236      	sxth	r6, r6
 8020e66:	9a00      	ldr	r2, [sp, #0]
 8020e68:	fb08 7606 	mla	r6, r8, r6, r7
 8020e6c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020e70:	0e3a      	lsrs	r2, r7, #24
 8020e72:	d03a      	beq.n	8020eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020e74:	2aff      	cmp	r2, #255	; 0xff
 8020e76:	b2d6      	uxtb	r6, r2
 8020e78:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020e7c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020e80:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8020e84:	b2ff      	uxtb	r7, r7
 8020e86:	d037      	beq.n	8020ef8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020e88:	fa1f f986 	uxth.w	r9, r6
 8020e8c:	4472      	add	r2, lr
 8020e8e:	43f6      	mvns	r6, r6
 8020e90:	f815 8002 	ldrb.w	r8, [r5, r2]
 8020e94:	fb17 f709 	smulbb	r7, r7, r9
 8020e98:	fb1a fa09 	smulbb	sl, sl, r9
 8020e9c:	b2f6      	uxtb	r6, r6
 8020e9e:	fb1b f909 	smulbb	r9, fp, r9
 8020ea2:	fb08 7706 	mla	r7, r8, r6, r7
 8020ea6:	b2bf      	uxth	r7, r7
 8020ea8:	f107 0801 	add.w	r8, r7, #1
 8020eac:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8020eb0:	123f      	asrs	r7, r7, #8
 8020eb2:	54af      	strb	r7, [r5, r2]
 8020eb4:	442a      	add	r2, r5
 8020eb6:	7857      	ldrb	r7, [r2, #1]
 8020eb8:	fb07 aa06 	mla	sl, r7, r6, sl
 8020ebc:	fa1f fa8a 	uxth.w	sl, sl
 8020ec0:	f10a 0701 	add.w	r7, sl, #1
 8020ec4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020ec8:	7897      	ldrb	r7, [r2, #2]
 8020eca:	fb07 9906 	mla	r9, r7, r6, r9
 8020ece:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020ed2:	fa1f f989 	uxth.w	r9, r9
 8020ed6:	f882 a001 	strb.w	sl, [r2, #1]
 8020eda:	f109 0601 	add.w	r6, r9, #1
 8020ede:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020ee2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020ee6:	f882 9002 	strb.w	r9, [r2, #2]
 8020eea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020eec:	f10e 0e01 	add.w	lr, lr, #1
 8020ef0:	4414      	add	r4, r2
 8020ef2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020ef4:	4410      	add	r0, r2
 8020ef6:	e766      	b.n	8020dc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020ef8:	4472      	add	r2, lr
 8020efa:	54af      	strb	r7, [r5, r2]
 8020efc:	442a      	add	r2, r5
 8020efe:	f882 a001 	strb.w	sl, [r2, #1]
 8020f02:	f882 b002 	strb.w	fp, [r2, #2]
 8020f06:	e7f0      	b.n	8020eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020f08:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020f0c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020f10:	f806 bc01 	strb.w	fp, [r6, #-1]
 8020f14:	e74d      	b.n	8020db2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020f16:	b003      	add	sp, #12
 8020f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020f1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f20:	b087      	sub	sp, #28
 8020f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020f26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020f28:	9204      	str	r2, [sp, #16]
 8020f2a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020f2e:	6860      	ldr	r0, [r4, #4]
 8020f30:	9205      	str	r2, [sp, #20]
 8020f32:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8020f36:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8020f3a:	9101      	str	r1, [sp, #4]
 8020f3c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020f40:	fb00 2505 	mla	r5, r0, r5, r2
 8020f44:	6822      	ldr	r2, [r4, #0]
 8020f46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020f4a:	4415      	add	r5, r2
 8020f4c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020f50:	3201      	adds	r2, #1
 8020f52:	f022 0201 	bic.w	r2, r2, #1
 8020f56:	9202      	str	r2, [sp, #8]
 8020f58:	f8dc 2000 	ldr.w	r2, [ip]
 8020f5c:	9203      	str	r2, [sp, #12]
 8020f5e:	9a01      	ldr	r2, [sp, #4]
 8020f60:	2a00      	cmp	r2, #0
 8020f62:	dc03      	bgt.n	8020f6c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8020f64:	9a04      	ldr	r2, [sp, #16]
 8020f66:	2a00      	cmp	r2, #0
 8020f68:	f340 8135 	ble.w	80211d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020f6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020f6e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020f72:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020f76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020f78:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020f7c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020f80:	2b00      	cmp	r3, #0
 8020f82:	dd0d      	ble.n	8020fa0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020f84:	1422      	asrs	r2, r4, #16
 8020f86:	d405      	bmi.n	8020f94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020f88:	4542      	cmp	r2, r8
 8020f8a:	da03      	bge.n	8020f94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020f8c:	1402      	asrs	r2, r0, #16
 8020f8e:	d401      	bmi.n	8020f94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020f90:	42ba      	cmp	r2, r7
 8020f92:	db06      	blt.n	8020fa2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020f94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020f96:	4474      	add	r4, lr
 8020f98:	3b01      	subs	r3, #1
 8020f9a:	3503      	adds	r5, #3
 8020f9c:	4410      	add	r0, r2
 8020f9e:	e7ef      	b.n	8020f80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020fa0:	d077      	beq.n	8021092 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020fa2:	1e5a      	subs	r2, r3, #1
 8020fa4:	fb0e 4602 	mla	r6, lr, r2, r4
 8020fa8:	1436      	asrs	r6, r6, #16
 8020faa:	d469      	bmi.n	8021080 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020fac:	4546      	cmp	r6, r8
 8020fae:	da67      	bge.n	8021080 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020fb0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8020fb2:	fb06 0202 	mla	r2, r6, r2, r0
 8020fb6:	1412      	asrs	r2, r2, #16
 8020fb8:	d462      	bmi.n	8021080 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020fba:	42ba      	cmp	r2, r7
 8020fbc:	da60      	bge.n	8021080 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020fbe:	1cee      	adds	r6, r5, #3
 8020fc0:	4699      	mov	r9, r3
 8020fc2:	f1b9 0f00 	cmp.w	r9, #0
 8020fc6:	dd5f      	ble.n	8021088 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020fc8:	1422      	asrs	r2, r4, #16
 8020fca:	9902      	ldr	r1, [sp, #8]
 8020fcc:	1407      	asrs	r7, r0, #16
 8020fce:	fb01 2707 	mla	r7, r1, r7, r2
 8020fd2:	9903      	ldr	r1, [sp, #12]
 8020fd4:	087a      	lsrs	r2, r7, #1
 8020fd6:	5c8a      	ldrb	r2, [r1, r2]
 8020fd8:	07f9      	lsls	r1, r7, #31
 8020fda:	bf54      	ite	pl
 8020fdc:	f002 020f 	andpl.w	r2, r2, #15
 8020fe0:	1112      	asrmi	r2, r2, #4
 8020fe2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020fe6:	b2d2      	uxtb	r2, r2
 8020fe8:	2a00      	cmp	r2, #0
 8020fea:	d042      	beq.n	8021072 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020fec:	497b      	ldr	r1, [pc, #492]	; (80211dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8020fee:	680f      	ldr	r7, [r1, #0]
 8020ff0:	9905      	ldr	r1, [sp, #20]
 8020ff2:	fa5f fb87 	uxtb.w	fp, r7
 8020ff6:	434a      	muls	r2, r1
 8020ff8:	f102 0801 	add.w	r8, r2, #1
 8020ffc:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8021000:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8021004:	1212      	asrs	r2, r2, #8
 8021006:	fa1f fa82 	uxth.w	sl, r2
 802100a:	43d2      	mvns	r2, r2
 802100c:	fb1b fb0a 	smulbb	fp, fp, sl
 8021010:	b2d2      	uxtb	r2, r2
 8021012:	fb08 b802 	mla	r8, r8, r2, fp
 8021016:	fa1f f888 	uxth.w	r8, r8
 802101a:	f108 0b01 	add.w	fp, r8, #1
 802101e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021022:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8021026:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802102a:	fb1b fb0a 	smulbb	fp, fp, sl
 802102e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021032:	fb17 fa0a 	smulbb	sl, r7, sl
 8021036:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 802103a:	f806 8c03 	strb.w	r8, [r6, #-3]
 802103e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8021042:	fb07 aa02 	mla	sl, r7, r2, sl
 8021046:	fb08 b802 	mla	r8, r8, r2, fp
 802104a:	fa1f fa8a 	uxth.w	sl, sl
 802104e:	fa1f f888 	uxth.w	r8, r8
 8021052:	f10a 0701 	add.w	r7, sl, #1
 8021056:	f108 0b01 	add.w	fp, r8, #1
 802105a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802105e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021062:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021066:	ea4f 2828 	mov.w	r8, r8, asr #8
 802106a:	f806 ac01 	strb.w	sl, [r6, #-1]
 802106e:	f806 8c02 	strb.w	r8, [r6, #-2]
 8021072:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021074:	4474      	add	r4, lr
 8021076:	3603      	adds	r6, #3
 8021078:	f109 39ff 	add.w	r9, r9, #4294967295
 802107c:	4410      	add	r0, r2
 802107e:	e7a0      	b.n	8020fc2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021080:	2700      	movs	r7, #0
 8021082:	1bda      	subs	r2, r3, r7
 8021084:	2a00      	cmp	r2, #0
 8021086:	dc3e      	bgt.n	8021106 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021088:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802108c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021090:	441d      	add	r5, r3
 8021092:	9b01      	ldr	r3, [sp, #4]
 8021094:	2b00      	cmp	r3, #0
 8021096:	f340 809e 	ble.w	80211d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802109a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802109e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80210a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80210a4:	eeb0 6a62 	vmov.f32	s12, s5
 80210a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80210ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 80210b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80210b4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80210b8:	eeb0 6a43 	vmov.f32	s12, s6
 80210bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80210c0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80210c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80210c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80210cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80210d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80210d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80210d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80210dc:	ee12 2a90 	vmov	r2, s5
 80210e0:	eef0 2a47 	vmov.f32	s5, s14
 80210e4:	fb92 fef3 	sdiv	lr, r2, r3
 80210e8:	ee13 2a10 	vmov	r2, s6
 80210ec:	eeb0 3a67 	vmov.f32	s6, s15
 80210f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80210f4:	9314      	str	r3, [sp, #80]	; 0x50
 80210f6:	9b01      	ldr	r3, [sp, #4]
 80210f8:	9a04      	ldr	r2, [sp, #16]
 80210fa:	3b01      	subs	r3, #1
 80210fc:	9301      	str	r3, [sp, #4]
 80210fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021100:	bf08      	it	eq
 8021102:	4613      	moveq	r3, r2
 8021104:	e72b      	b.n	8020f5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021106:	1426      	asrs	r6, r4, #16
 8021108:	d460      	bmi.n	80211cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802110a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 802110e:	42b2      	cmp	r2, r6
 8021110:	dd5c      	ble.n	80211cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021112:	ea5f 4820 	movs.w	r8, r0, asr #16
 8021116:	d459      	bmi.n	80211cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021118:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802111c:	4542      	cmp	r2, r8
 802111e:	dd55      	ble.n	80211cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021120:	9a02      	ldr	r2, [sp, #8]
 8021122:	9903      	ldr	r1, [sp, #12]
 8021124:	fb08 6602 	mla	r6, r8, r2, r6
 8021128:	0872      	lsrs	r2, r6, #1
 802112a:	07f6      	lsls	r6, r6, #31
 802112c:	5c8a      	ldrb	r2, [r1, r2]
 802112e:	bf54      	ite	pl
 8021130:	f002 020f 	andpl.w	r2, r2, #15
 8021134:	1112      	asrmi	r2, r2, #4
 8021136:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802113a:	b2d2      	uxtb	r2, r2
 802113c:	2a00      	cmp	r2, #0
 802113e:	d045      	beq.n	80211cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021140:	4926      	ldr	r1, [pc, #152]	; (80211dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8021142:	f8d1 8000 	ldr.w	r8, [r1]
 8021146:	9905      	ldr	r1, [sp, #20]
 8021148:	fa5f fb88 	uxtb.w	fp, r8
 802114c:	434a      	muls	r2, r1
 802114e:	1c56      	adds	r6, r2, #1
 8021150:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021154:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8021158:	1212      	asrs	r2, r2, #8
 802115a:	f815 9006 	ldrb.w	r9, [r5, r6]
 802115e:	fa1f fa82 	uxth.w	sl, r2
 8021162:	43d2      	mvns	r2, r2
 8021164:	fb1b fb0a 	smulbb	fp, fp, sl
 8021168:	b2d2      	uxtb	r2, r2
 802116a:	fb09 b902 	mla	r9, r9, r2, fp
 802116e:	fa1f f989 	uxth.w	r9, r9
 8021172:	f109 0b01 	add.w	fp, r9, #1
 8021176:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802117a:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 802117e:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8021182:	fb1b fb0a 	smulbb	fp, fp, sl
 8021186:	ea4f 2929 	mov.w	r9, r9, asr #8
 802118a:	fb18 fa0a 	smulbb	sl, r8, sl
 802118e:	f805 9006 	strb.w	r9, [r5, r6]
 8021192:	442e      	add	r6, r5
 8021194:	f896 8002 	ldrb.w	r8, [r6, #2]
 8021198:	f896 9001 	ldrb.w	r9, [r6, #1]
 802119c:	fb08 aa02 	mla	sl, r8, r2, sl
 80211a0:	fb09 b902 	mla	r9, r9, r2, fp
 80211a4:	fa1f fa8a 	uxth.w	sl, sl
 80211a8:	fa1f f989 	uxth.w	r9, r9
 80211ac:	f10a 0801 	add.w	r8, sl, #1
 80211b0:	f109 0b01 	add.w	fp, r9, #1
 80211b4:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80211b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80211bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80211c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80211c4:	f886 a002 	strb.w	sl, [r6, #2]
 80211c8:	f886 9001 	strb.w	r9, [r6, #1]
 80211cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80211ce:	4474      	add	r4, lr
 80211d0:	3701      	adds	r7, #1
 80211d2:	4410      	add	r0, r2
 80211d4:	e755      	b.n	8021082 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80211d6:	b007      	add	sp, #28
 80211d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211dc:	2402626c 	.word	0x2402626c

080211e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80211e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211e4:	b085      	sub	sp, #20
 80211e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80211ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80211ec:	9203      	str	r2, [sp, #12]
 80211ee:	6860      	ldr	r0, [r4, #4]
 80211f0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80211f4:	9100      	str	r1, [sp, #0]
 80211f6:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80211fa:	fb00 2606 	mla	r6, r0, r6, r2
 80211fe:	6822      	ldr	r2, [r4, #0]
 8021200:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021204:	4416      	add	r6, r2
 8021206:	f8dc 2008 	ldr.w	r2, [ip, #8]
 802120a:	3201      	adds	r2, #1
 802120c:	f022 0201 	bic.w	r2, r2, #1
 8021210:	9201      	str	r2, [sp, #4]
 8021212:	f8dc 2000 	ldr.w	r2, [ip]
 8021216:	9202      	str	r2, [sp, #8]
 8021218:	9a00      	ldr	r2, [sp, #0]
 802121a:	2a00      	cmp	r2, #0
 802121c:	dc03      	bgt.n	8021226 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802121e:	9a03      	ldr	r2, [sp, #12]
 8021220:	2a00      	cmp	r2, #0
 8021222:	f340 8140 	ble.w	80214a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8021226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021228:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 802122c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8021230:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021232:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8021236:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 802123a:	2b00      	cmp	r3, #0
 802123c:	dd0e      	ble.n	802125c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802123e:	142a      	asrs	r2, r5, #16
 8021240:	d405      	bmi.n	802124e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021242:	4572      	cmp	r2, lr
 8021244:	da03      	bge.n	802124e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021246:	1422      	asrs	r2, r4, #16
 8021248:	d401      	bmi.n	802124e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802124a:	42ba      	cmp	r2, r7
 802124c:	db07      	blt.n	802125e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802124e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021250:	3b01      	subs	r3, #1
 8021252:	3603      	adds	r6, #3
 8021254:	4415      	add	r5, r2
 8021256:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021258:	4414      	add	r4, r2
 802125a:	e7ee      	b.n	802123a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802125c:	d072      	beq.n	8021344 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802125e:	1e5a      	subs	r2, r3, #1
 8021260:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021262:	fb00 5002 	mla	r0, r0, r2, r5
 8021266:	1400      	asrs	r0, r0, #16
 8021268:	d463      	bmi.n	8021332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802126a:	4570      	cmp	r0, lr
 802126c:	da61      	bge.n	8021332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802126e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021270:	fb00 4202 	mla	r2, r0, r2, r4
 8021274:	1412      	asrs	r2, r2, #16
 8021276:	d45c      	bmi.n	8021332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021278:	42ba      	cmp	r2, r7
 802127a:	da5a      	bge.n	8021332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802127c:	1cf0      	adds	r0, r6, #3
 802127e:	469a      	mov	sl, r3
 8021280:	f1ba 0f00 	cmp.w	sl, #0
 8021284:	dd59      	ble.n	802133a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8021286:	142a      	asrs	r2, r5, #16
 8021288:	9901      	ldr	r1, [sp, #4]
 802128a:	1427      	asrs	r7, r4, #16
 802128c:	fb01 2707 	mla	r7, r1, r7, r2
 8021290:	9902      	ldr	r1, [sp, #8]
 8021292:	087a      	lsrs	r2, r7, #1
 8021294:	5c8a      	ldrb	r2, [r1, r2]
 8021296:	07f9      	lsls	r1, r7, #31
 8021298:	bf54      	ite	pl
 802129a:	f002 020f 	andpl.w	r2, r2, #15
 802129e:	1112      	asrmi	r2, r2, #4
 80212a0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80212a4:	b2d2      	uxtb	r2, r2
 80212a6:	2a00      	cmp	r2, #0
 80212a8:	d03b      	beq.n	8021322 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80212aa:	4980      	ldr	r1, [pc, #512]	; (80214ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80212ac:	2aff      	cmp	r2, #255	; 0xff
 80212ae:	680f      	ldr	r7, [r1, #0]
 80212b0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80212b4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80212b8:	b2ff      	uxtb	r7, r7
 80212ba:	f000 80ed 	beq.w	8021498 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80212be:	fa1f f882 	uxth.w	r8, r2
 80212c2:	43d2      	mvns	r2, r2
 80212c4:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80212c8:	fb17 f708 	smulbb	r7, r7, r8
 80212cc:	b2d2      	uxtb	r2, r2
 80212ce:	fb19 f908 	smulbb	r9, r9, r8
 80212d2:	fb0e 7702 	mla	r7, lr, r2, r7
 80212d6:	fb1b f808 	smulbb	r8, fp, r8
 80212da:	b2bf      	uxth	r7, r7
 80212dc:	f107 0e01 	add.w	lr, r7, #1
 80212e0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80212e4:	123f      	asrs	r7, r7, #8
 80212e6:	f800 7c03 	strb.w	r7, [r0, #-3]
 80212ea:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80212ee:	fb07 9902 	mla	r9, r7, r2, r9
 80212f2:	fa1f f989 	uxth.w	r9, r9
 80212f6:	f109 0701 	add.w	r7, r9, #1
 80212fa:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80212fe:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8021302:	fb07 8802 	mla	r8, r7, r2, r8
 8021306:	ea4f 2929 	mov.w	r9, r9, asr #8
 802130a:	fa1f f888 	uxth.w	r8, r8
 802130e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8021312:	f108 0201 	add.w	r2, r8, #1
 8021316:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802131a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802131e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8021322:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021324:	3003      	adds	r0, #3
 8021326:	f10a 3aff 	add.w	sl, sl, #4294967295
 802132a:	4415      	add	r5, r2
 802132c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802132e:	4414      	add	r4, r2
 8021330:	e7a6      	b.n	8021280 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021332:	2700      	movs	r7, #0
 8021334:	1bda      	subs	r2, r3, r7
 8021336:	2a00      	cmp	r2, #0
 8021338:	dc40      	bgt.n	80213bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802133a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802133e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021342:	441e      	add	r6, r3
 8021344:	9b00      	ldr	r3, [sp, #0]
 8021346:	2b00      	cmp	r3, #0
 8021348:	f340 80ad 	ble.w	80214a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 802134c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021352:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021356:	eeb0 6a62 	vmov.f32	s12, s5
 802135a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802135e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021362:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021366:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802136a:	eeb0 6a43 	vmov.f32	s12, s6
 802136e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021372:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021376:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802137a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802137e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021382:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021386:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802138a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802138e:	ee12 2a90 	vmov	r2, s5
 8021392:	eef0 2a47 	vmov.f32	s5, s14
 8021396:	fb92 f3f3 	sdiv	r3, r2, r3
 802139a:	ee13 2a10 	vmov	r2, s6
 802139e:	9311      	str	r3, [sp, #68]	; 0x44
 80213a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80213a2:	eeb0 3a67 	vmov.f32	s6, s15
 80213a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80213aa:	9312      	str	r3, [sp, #72]	; 0x48
 80213ac:	9b00      	ldr	r3, [sp, #0]
 80213ae:	9a03      	ldr	r2, [sp, #12]
 80213b0:	3b01      	subs	r3, #1
 80213b2:	9300      	str	r3, [sp, #0]
 80213b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80213b6:	bf08      	it	eq
 80213b8:	4613      	moveq	r3, r2
 80213ba:	e72d      	b.n	8021218 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80213bc:	1428      	asrs	r0, r5, #16
 80213be:	d45c      	bmi.n	802147a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80213c0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80213c4:	4282      	cmp	r2, r0
 80213c6:	dd58      	ble.n	802147a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80213c8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80213cc:	d455      	bmi.n	802147a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80213ce:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80213d2:	4572      	cmp	r2, lr
 80213d4:	dd51      	ble.n	802147a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80213d6:	9a01      	ldr	r2, [sp, #4]
 80213d8:	9902      	ldr	r1, [sp, #8]
 80213da:	fb0e 0002 	mla	r0, lr, r2, r0
 80213de:	0842      	lsrs	r2, r0, #1
 80213e0:	07c0      	lsls	r0, r0, #31
 80213e2:	5c8a      	ldrb	r2, [r1, r2]
 80213e4:	bf54      	ite	pl
 80213e6:	f002 020f 	andpl.w	r2, r2, #15
 80213ea:	1112      	asrmi	r2, r2, #4
 80213ec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80213f0:	b2d2      	uxtb	r2, r2
 80213f2:	2a00      	cmp	r2, #0
 80213f4:	d041      	beq.n	802147a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80213f6:	492d      	ldr	r1, [pc, #180]	; (80214ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80213f8:	2aff      	cmp	r2, #255	; 0xff
 80213fa:	6808      	ldr	r0, [r1, #0]
 80213fc:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8021400:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021404:	fa5f fe80 	uxtb.w	lr, r0
 8021408:	ea4f 0047 	mov.w	r0, r7, lsl #1
 802140c:	d03b      	beq.n	8021486 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802140e:	fa1f f982 	uxth.w	r9, r2
 8021412:	4438      	add	r0, r7
 8021414:	43d2      	mvns	r2, r2
 8021416:	f816 8000 	ldrb.w	r8, [r6, r0]
 802141a:	fb1e fe09 	smulbb	lr, lr, r9
 802141e:	fb1a fa09 	smulbb	sl, sl, r9
 8021422:	b2d2      	uxtb	r2, r2
 8021424:	fb1b f909 	smulbb	r9, fp, r9
 8021428:	fb08 ee02 	mla	lr, r8, r2, lr
 802142c:	fa1f fe8e 	uxth.w	lr, lr
 8021430:	f10e 0801 	add.w	r8, lr, #1
 8021434:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8021438:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802143c:	f806 e000 	strb.w	lr, [r6, r0]
 8021440:	4430      	add	r0, r6
 8021442:	f890 e001 	ldrb.w	lr, [r0, #1]
 8021446:	fb0e aa02 	mla	sl, lr, r2, sl
 802144a:	fa1f fa8a 	uxth.w	sl, sl
 802144e:	f10a 0e01 	add.w	lr, sl, #1
 8021452:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8021456:	f890 e002 	ldrb.w	lr, [r0, #2]
 802145a:	fb0e 9902 	mla	r9, lr, r2, r9
 802145e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021462:	fa1f f989 	uxth.w	r9, r9
 8021466:	f880 a001 	strb.w	sl, [r0, #1]
 802146a:	f109 0201 	add.w	r2, r9, #1
 802146e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021472:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021476:	f880 9002 	strb.w	r9, [r0, #2]
 802147a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802147c:	3701      	adds	r7, #1
 802147e:	4415      	add	r5, r2
 8021480:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021482:	4414      	add	r4, r2
 8021484:	e756      	b.n	8021334 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021486:	4438      	add	r0, r7
 8021488:	f806 e000 	strb.w	lr, [r6, r0]
 802148c:	4430      	add	r0, r6
 802148e:	f880 a001 	strb.w	sl, [r0, #1]
 8021492:	f880 b002 	strb.w	fp, [r0, #2]
 8021496:	e7f0      	b.n	802147a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021498:	f800 7c03 	strb.w	r7, [r0, #-3]
 802149c:	f800 9c02 	strb.w	r9, [r0, #-2]
 80214a0:	f800 bc01 	strb.w	fp, [r0, #-1]
 80214a4:	e73d      	b.n	8021322 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80214a6:	b005      	add	sp, #20
 80214a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214ac:	2402626c 	.word	0x2402626c

080214b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80214b0:	4770      	bx	lr

080214b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80214b2:	4770      	bx	lr

080214b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80214b4:	4770      	bx	lr

080214b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80214b6:	4770      	bx	lr

080214b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80214b8:	4770      	bx	lr

080214ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80214ba:	4770      	bx	lr

080214bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80214bc:	4770      	bx	lr

080214be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80214be:	4770      	bx	lr

080214c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80214c0:	4770      	bx	lr

080214c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80214c2:	4770      	bx	lr

080214c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80214c4:	4770      	bx	lr

080214c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80214c6:	4770      	bx	lr

080214c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80214c8:	4770      	bx	lr

080214ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80214ca:	4770      	bx	lr

080214cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80214cc:	4770      	bx	lr

080214ce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80214ce:	4770      	bx	lr

080214d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80214d0:	4770      	bx	lr

080214d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80214d2:	4770      	bx	lr

080214d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80214d4:	4770      	bx	lr

080214d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80214d6:	4770      	bx	lr

080214d8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80214d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214da:	4606      	mov	r6, r0
 80214dc:	b087      	sub	sp, #28
 80214de:	4615      	mov	r5, r2
 80214e0:	461f      	mov	r7, r3
 80214e2:	b353      	cbz	r3, 802153a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80214e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	dd26      	ble.n	802153a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80214ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80214f0:	2b00      	cmp	r3, #0
 80214f2:	dd22      	ble.n	802153a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80214f4:	6808      	ldr	r0, [r1, #0]
 80214f6:	aa04      	add	r2, sp, #16
 80214f8:	6849      	ldr	r1, [r1, #4]
 80214fa:	4c1b      	ldr	r4, [pc, #108]	; (8021568 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80214fc:	c203      	stmia	r2!, {r0, r1}
 80214fe:	a804      	add	r0, sp, #16
 8021500:	f7fb fa80 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021504:	6820      	ldr	r0, [r4, #0]
 8021506:	6803      	ldr	r3, [r0, #0]
 8021508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802150a:	4798      	blx	r3
 802150c:	2fff      	cmp	r7, #255	; 0xff
 802150e:	d016      	beq.n	802153e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021510:	f010 0f08 	tst.w	r0, #8
 8021514:	6820      	ldr	r0, [r4, #0]
 8021516:	d015      	beq.n	8021544 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8021518:	2400      	movs	r4, #0
 802151a:	6801      	ldr	r1, [r0, #0]
 802151c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021520:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021524:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8021528:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802152c:	9401      	str	r4, [sp, #4]
 802152e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021532:	9400      	str	r4, [sp, #0]
 8021534:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8021536:	4629      	mov	r1, r5
 8021538:	47a0      	blx	r4
 802153a:	b007      	add	sp, #28
 802153c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802153e:	f010 0f02 	tst.w	r0, #2
 8021542:	e7e7      	b.n	8021514 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8021544:	6803      	ldr	r3, [r0, #0]
 8021546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021548:	4798      	blx	r3
 802154a:	4b08      	ldr	r3, [pc, #32]	; (802156c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 802154c:	4601      	mov	r1, r0
 802154e:	4630      	mov	r0, r6
 8021550:	881a      	ldrh	r2, [r3, #0]
 8021552:	6833      	ldr	r3, [r6, #0]
 8021554:	e9cd 5700 	strd	r5, r7, [sp]
 8021558:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 802155a:	ab04      	add	r3, sp, #16
 802155c:	47a8      	blx	r5
 802155e:	6820      	ldr	r0, [r4, #0]
 8021560:	6803      	ldr	r3, [r0, #0]
 8021562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021564:	4798      	blx	r3
 8021566:	e7e8      	b.n	802153a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021568:	24026264 	.word	0x24026264
 802156c:	2402625e 	.word	0x2402625e

08021570 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8021570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021574:	b08b      	sub	sp, #44	; 0x2c
 8021576:	460d      	mov	r5, r1
 8021578:	4616      	mov	r6, r2
 802157a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 802157e:	f1b8 0f00 	cmp.w	r8, #0
 8021582:	d047      	beq.n	8021614 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8021584:	6810      	ldr	r0, [r2, #0]
 8021586:	ac06      	add	r4, sp, #24
 8021588:	6851      	ldr	r1, [r2, #4]
 802158a:	4f51      	ldr	r7, [pc, #324]	; (80216d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 802158c:	c403      	stmia	r4!, {r0, r1}
 802158e:	6818      	ldr	r0, [r3, #0]
 8021590:	ac08      	add	r4, sp, #32
 8021592:	6859      	ldr	r1, [r3, #4]
 8021594:	c403      	stmia	r4!, {r0, r1}
 8021596:	a806      	add	r0, sp, #24
 8021598:	f7fb fa34 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802159c:	4631      	mov	r1, r6
 802159e:	a808      	add	r0, sp, #32
 80215a0:	f7fb fa74 	bl	801ca8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80215a4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80215a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80215ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80215b0:	6838      	ldr	r0, [r7, #0]
 80215b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80215b6:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80215ba:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80215be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80215c2:	440d      	add	r5, r1
 80215c4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80215c8:	440a      	add	r2, r1
 80215ca:	f8ad 2020 	strh.w	r2, [sp, #32]
 80215ce:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80215d2:	4413      	add	r3, r2
 80215d4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80215d8:	6803      	ldr	r3, [r0, #0]
 80215da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80215dc:	4798      	blx	r3
 80215de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80215e2:	d01a      	beq.n	802161a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80215e4:	f010 0f04 	tst.w	r0, #4
 80215e8:	6838      	ldr	r0, [r7, #0]
 80215ea:	d019      	beq.n	8021620 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80215ec:	2100      	movs	r1, #0
 80215ee:	6807      	ldr	r7, [r0, #0]
 80215f0:	b2a4      	uxth	r4, r4
 80215f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80215f6:	b2b6      	uxth	r6, r6
 80215f8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80215fc:	9401      	str	r4, [sp, #4]
 80215fe:	9600      	str	r6, [sp, #0]
 8021600:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021604:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8021608:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 802160c:	9102      	str	r1, [sp, #8]
 802160e:	4629      	mov	r1, r5
 8021610:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8021612:	47a0      	blx	r4
 8021614:	b00b      	add	sp, #44	; 0x2c
 8021616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802161a:	f010 0f01 	tst.w	r0, #1
 802161e:	e7e3      	b.n	80215e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8021620:	6803      	ldr	r3, [r0, #0]
 8021622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021624:	4798      	blx	r3
 8021626:	4a2b      	ldr	r2, [pc, #172]	; (80216d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8021628:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 802162c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021630:	8813      	ldrh	r3, [r2, #0]
 8021632:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8021636:	fb03 f404 	mul.w	r4, r3, r4
 802163a:	fb03 c101 	mla	r1, r3, r1, ip
 802163e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021642:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021646:	4408      	add	r0, r1
 8021648:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 802164c:	4404      	add	r4, r0
 802164e:	d02e      	beq.n	80216ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8021650:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8021654:	1b9b      	subs	r3, r3, r6
 8021656:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 802165a:	1b96      	subs	r6, r2, r6
 802165c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021660:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021664:	42a0      	cmp	r0, r4
 8021666:	d22d      	bcs.n	80216c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8021668:	eb00 0e01 	add.w	lr, r0, r1
 802166c:	4570      	cmp	r0, lr
 802166e:	d210      	bcs.n	8021692 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8021670:	f890 9000 	ldrb.w	r9, [r0]
 8021674:	f815 2b01 	ldrb.w	r2, [r5], #1
 8021678:	fb19 f90c 	smulbb	r9, r9, ip
 802167c:	fb02 9208 	mla	r2, r2, r8, r9
 8021680:	b292      	uxth	r2, r2
 8021682:	f102 0901 	add.w	r9, r2, #1
 8021686:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 802168a:	1212      	asrs	r2, r2, #8
 802168c:	f800 2b01 	strb.w	r2, [r0], #1
 8021690:	e7ec      	b.n	802166c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8021692:	4418      	add	r0, r3
 8021694:	4435      	add	r5, r6
 8021696:	e7e5      	b.n	8021664 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8021698:	8813      	ldrh	r3, [r2, #0]
 802169a:	1b9b      	subs	r3, r3, r6
 802169c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80216a0:	4418      	add	r0, r3
 80216a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80216a6:	1b9b      	subs	r3, r3, r6
 80216a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80216ac:	441d      	add	r5, r3
 80216ae:	42a0      	cmp	r0, r4
 80216b0:	d208      	bcs.n	80216c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80216b2:	eb00 0c01 	add.w	ip, r0, r1
 80216b6:	4560      	cmp	r0, ip
 80216b8:	d2ee      	bcs.n	8021698 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80216ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80216be:	f800 3b01 	strb.w	r3, [r0], #1
 80216c2:	e7f8      	b.n	80216b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80216c4:	6838      	ldr	r0, [r7, #0]
 80216c6:	6803      	ldr	r3, [r0, #0]
 80216c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80216ca:	4798      	blx	r3
 80216cc:	e7a2      	b.n	8021614 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80216ce:	bf00      	nop
 80216d0:	24026264 	.word	0x24026264
 80216d4:	2402625e 	.word	0x2402625e

080216d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80216d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216da:	2300      	movs	r3, #0
 80216dc:	b085      	sub	sp, #20
 80216de:	9300      	str	r3, [sp, #0]
 80216e0:	4b41      	ldr	r3, [pc, #260]	; (80217e8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80216e2:	781b      	ldrb	r3, [r3, #0]
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d136      	bne.n	8021756 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80216e8:	4a40      	ldr	r2, [pc, #256]	; (80217ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80216ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80216ee:	f8ad 2004 	strh.w	r2, [sp, #4]
 80216f2:	2b00      	cmp	r3, #0
 80216f4:	d131      	bne.n	802175a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80216f6:	4b3e      	ldr	r3, [pc, #248]	; (80217f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80216f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80216fc:	ac02      	add	r4, sp, #8
 80216fe:	6808      	ldr	r0, [r1, #0]
 8021700:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021704:	ab02      	add	r3, sp, #8
 8021706:	6849      	ldr	r1, [r1, #4]
 8021708:	4d3a      	ldr	r5, [pc, #232]	; (80217f4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 802170a:	c303      	stmia	r3!, {r0, r1}
 802170c:	4669      	mov	r1, sp
 802170e:	4620      	mov	r0, r4
 8021710:	f7fb f9bc 	bl	801ca8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021714:	4668      	mov	r0, sp
 8021716:	f7fb f975 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802171a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 802171e:	f8bd 2000 	ldrh.w	r2, [sp]
 8021722:	462e      	mov	r6, r5
 8021724:	6828      	ldr	r0, [r5, #0]
 8021726:	4413      	add	r3, r2
 8021728:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802172c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021730:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8021734:	4413      	add	r3, r2
 8021736:	f8ad 300a 	strh.w	r3, [sp, #10]
 802173a:	6803      	ldr	r3, [r0, #0]
 802173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802173e:	4798      	blx	r3
 8021740:	f010 0f01 	tst.w	r0, #1
 8021744:	d00b      	beq.n	802175e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8021746:	6828      	ldr	r0, [r5, #0]
 8021748:	6803      	ldr	r3, [r0, #0]
 802174a:	e894 0006 	ldmia.w	r4, {r1, r2}
 802174e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021750:	4798      	blx	r3
 8021752:	b005      	add	sp, #20
 8021754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021756:	4a26      	ldr	r2, [pc, #152]	; (80217f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8021758:	e7c7      	b.n	80216ea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 802175a:	4b24      	ldr	r3, [pc, #144]	; (80217ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 802175c:	e7cc      	b.n	80216f8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 802175e:	6830      	ldr	r0, [r6, #0]
 8021760:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8021764:	6803      	ldr	r3, [r0, #0]
 8021766:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 802176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802176c:	4798      	blx	r3
 802176e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8021772:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021776:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 802177a:	fb14 3402 	smlabb	r4, r4, r2, r3
 802177e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021782:	4404      	add	r4, r0
 8021784:	6830      	ldr	r0, [r6, #0]
 8021786:	6803      	ldr	r3, [r0, #0]
 8021788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802178a:	4798      	blx	r3
 802178c:	4917      	ldr	r1, [pc, #92]	; (80217ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 802178e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021792:	880b      	ldrh	r3, [r1, #0]
 8021794:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8021798:	fb03 c202 	mla	r2, r3, r2, ip
 802179c:	437b      	muls	r3, r7
 802179e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80217a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80217a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217aa:	4410      	add	r0, r2
 80217ac:	18c2      	adds	r2, r0, r3
 80217ae:	4290      	cmp	r0, r2
 80217b0:	d214      	bcs.n	80217dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80217b2:	eb00 0c07 	add.w	ip, r0, r7
 80217b6:	4560      	cmp	r0, ip
 80217b8:	d204      	bcs.n	80217c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80217ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80217be:	f800 3b01 	strb.w	r3, [r0], #1
 80217c2:	e7f8      	b.n	80217b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80217c4:	880b      	ldrh	r3, [r1, #0]
 80217c6:	1b5b      	subs	r3, r3, r5
 80217c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217cc:	4418      	add	r0, r3
 80217ce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80217d2:	1b5b      	subs	r3, r3, r5
 80217d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217d8:	441c      	add	r4, r3
 80217da:	e7e8      	b.n	80217ae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80217dc:	6830      	ldr	r0, [r6, #0]
 80217de:	6803      	ldr	r3, [r0, #0]
 80217e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217e2:	4798      	blx	r3
 80217e4:	e7b5      	b.n	8021752 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80217e6:	bf00      	nop
 80217e8:	2402625c 	.word	0x2402625c
 80217ec:	2402625e 	.word	0x2402625e
 80217f0:	24026260 	.word	0x24026260
 80217f4:	24026264 	.word	0x24026264

080217f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80217f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217fc:	b089      	sub	sp, #36	; 0x24
 80217fe:	4607      	mov	r7, r0
 8021800:	4689      	mov	r9, r1
 8021802:	4692      	mov	sl, r2
 8021804:	ac08      	add	r4, sp, #32
 8021806:	461e      	mov	r6, r3
 8021808:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 802180c:	4620      	mov	r0, r4
 802180e:	f7fe f8f1 	bl	801f9f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021812:	683b      	ldr	r3, [r7, #0]
 8021814:	4605      	mov	r5, r0
 8021816:	4620      	mov	r0, r4
 8021818:	f8d3 8018 	ldr.w	r8, [r3, #24]
 802181c:	f7fd fffe 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021820:	4683      	mov	fp, r0
 8021822:	4620      	mov	r0, r4
 8021824:	f7fe f82e 	bl	801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021828:	4653      	mov	r3, sl
 802182a:	464a      	mov	r2, r9
 802182c:	4639      	mov	r1, r7
 802182e:	9500      	str	r5, [sp, #0]
 8021830:	e9cd b001 	strd	fp, r0, [sp, #4]
 8021834:	a806      	add	r0, sp, #24
 8021836:	47c0      	blx	r8
 8021838:	a906      	add	r1, sp, #24
 802183a:	4630      	mov	r0, r6
 802183c:	f7fd fed2 	bl	801f5e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8021840:	4628      	mov	r0, r5
 8021842:	b009      	add	sp, #36	; 0x24
 8021844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021848 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021848:	b510      	push	{r4, lr}
 802184a:	4604      	mov	r4, r0
 802184c:	2104      	movs	r1, #4
 802184e:	f006 f8ee 	bl	8027a2e <_ZdlPvj>
 8021852:	4620      	mov	r0, r4
 8021854:	bd10      	pop	{r4, pc}

08021856 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021856:	b510      	push	{r4, lr}
 8021858:	4604      	mov	r4, r0
 802185a:	2104      	movs	r1, #4
 802185c:	f006 f8e7 	bl	8027a2e <_ZdlPvj>
 8021860:	4620      	mov	r0, r4
 8021862:	bd10      	pop	{r4, pc}

08021864 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021864:	b510      	push	{r4, lr}
 8021866:	4604      	mov	r4, r0
 8021868:	2104      	movs	r1, #4
 802186a:	f006 f8e0 	bl	8027a2e <_ZdlPvj>
 802186e:	4620      	mov	r0, r4
 8021870:	bd10      	pop	{r4, pc}

08021872 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021872:	b510      	push	{r4, lr}
 8021874:	4604      	mov	r4, r0
 8021876:	2104      	movs	r1, #4
 8021878:	f006 f8d9 	bl	8027a2e <_ZdlPvj>
 802187c:	4620      	mov	r0, r4
 802187e:	bd10      	pop	{r4, pc}

08021880 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021880:	b510      	push	{r4, lr}
 8021882:	4604      	mov	r4, r0
 8021884:	2104      	movs	r1, #4
 8021886:	f006 f8d2 	bl	8027a2e <_ZdlPvj>
 802188a:	4620      	mov	r0, r4
 802188c:	bd10      	pop	{r4, pc}

0802188e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802188e:	b510      	push	{r4, lr}
 8021890:	4604      	mov	r4, r0
 8021892:	2104      	movs	r1, #4
 8021894:	f006 f8cb 	bl	8027a2e <_ZdlPvj>
 8021898:	4620      	mov	r0, r4
 802189a:	bd10      	pop	{r4, pc}

0802189c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802189c:	b510      	push	{r4, lr}
 802189e:	4604      	mov	r4, r0
 80218a0:	2104      	movs	r1, #4
 80218a2:	f006 f8c4 	bl	8027a2e <_ZdlPvj>
 80218a6:	4620      	mov	r0, r4
 80218a8:	bd10      	pop	{r4, pc}

080218aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80218aa:	b510      	push	{r4, lr}
 80218ac:	4604      	mov	r4, r0
 80218ae:	2104      	movs	r1, #4
 80218b0:	f006 f8bd 	bl	8027a2e <_ZdlPvj>
 80218b4:	4620      	mov	r0, r4
 80218b6:	bd10      	pop	{r4, pc}

080218b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80218b8:	b510      	push	{r4, lr}
 80218ba:	4604      	mov	r4, r0
 80218bc:	2104      	movs	r1, #4
 80218be:	f006 f8b6 	bl	8027a2e <_ZdlPvj>
 80218c2:	4620      	mov	r0, r4
 80218c4:	bd10      	pop	{r4, pc}

080218c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80218c6:	b510      	push	{r4, lr}
 80218c8:	4604      	mov	r4, r0
 80218ca:	2104      	movs	r1, #4
 80218cc:	f006 f8af 	bl	8027a2e <_ZdlPvj>
 80218d0:	4620      	mov	r0, r4
 80218d2:	bd10      	pop	{r4, pc}

080218d4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80218d4:	b510      	push	{r4, lr}
 80218d6:	4604      	mov	r4, r0
 80218d8:	2104      	movs	r1, #4
 80218da:	f006 f8a8 	bl	8027a2e <_ZdlPvj>
 80218de:	4620      	mov	r0, r4
 80218e0:	bd10      	pop	{r4, pc}

080218e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80218e2:	b510      	push	{r4, lr}
 80218e4:	4604      	mov	r4, r0
 80218e6:	2104      	movs	r1, #4
 80218e8:	f006 f8a1 	bl	8027a2e <_ZdlPvj>
 80218ec:	4620      	mov	r0, r4
 80218ee:	bd10      	pop	{r4, pc}

080218f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80218f0:	b510      	push	{r4, lr}
 80218f2:	4604      	mov	r4, r0
 80218f4:	2104      	movs	r1, #4
 80218f6:	f006 f89a 	bl	8027a2e <_ZdlPvj>
 80218fa:	4620      	mov	r0, r4
 80218fc:	bd10      	pop	{r4, pc}

080218fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80218fe:	b510      	push	{r4, lr}
 8021900:	4604      	mov	r4, r0
 8021902:	2104      	movs	r1, #4
 8021904:	f006 f893 	bl	8027a2e <_ZdlPvj>
 8021908:	4620      	mov	r0, r4
 802190a:	bd10      	pop	{r4, pc}

0802190c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802190c:	b510      	push	{r4, lr}
 802190e:	4604      	mov	r4, r0
 8021910:	2104      	movs	r1, #4
 8021912:	f006 f88c 	bl	8027a2e <_ZdlPvj>
 8021916:	4620      	mov	r0, r4
 8021918:	bd10      	pop	{r4, pc}

0802191a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802191a:	b510      	push	{r4, lr}
 802191c:	4604      	mov	r4, r0
 802191e:	2104      	movs	r1, #4
 8021920:	f006 f885 	bl	8027a2e <_ZdlPvj>
 8021924:	4620      	mov	r0, r4
 8021926:	bd10      	pop	{r4, pc}

08021928 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021928:	b510      	push	{r4, lr}
 802192a:	4604      	mov	r4, r0
 802192c:	2104      	movs	r1, #4
 802192e:	f006 f87e 	bl	8027a2e <_ZdlPvj>
 8021932:	4620      	mov	r0, r4
 8021934:	bd10      	pop	{r4, pc}

08021936 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8021936:	b510      	push	{r4, lr}
 8021938:	4604      	mov	r4, r0
 802193a:	2104      	movs	r1, #4
 802193c:	f006 f877 	bl	8027a2e <_ZdlPvj>
 8021940:	4620      	mov	r0, r4
 8021942:	bd10      	pop	{r4, pc}

08021944 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021944:	b510      	push	{r4, lr}
 8021946:	4604      	mov	r4, r0
 8021948:	2104      	movs	r1, #4
 802194a:	f006 f870 	bl	8027a2e <_ZdlPvj>
 802194e:	4620      	mov	r0, r4
 8021950:	bd10      	pop	{r4, pc}

08021952 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021952:	b510      	push	{r4, lr}
 8021954:	4604      	mov	r4, r0
 8021956:	2104      	movs	r1, #4
 8021958:	f006 f869 	bl	8027a2e <_ZdlPvj>
 802195c:	4620      	mov	r0, r4
 802195e:	bd10      	pop	{r4, pc}

08021960 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021964:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8021968:	9c06      	ldr	r4, [sp, #24]
 802196a:	2800      	cmp	r0, #0
 802196c:	d06e      	beq.n	8021a4c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802196e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8021972:	2d00      	cmp	r5, #0
 8021974:	dd6a      	ble.n	8021a4c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021976:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 802197a:	f1bc 0f00 	cmp.w	ip, #0
 802197e:	dd65      	ble.n	8021a4c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021980:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8021984:	28ff      	cmp	r0, #255	; 0xff
 8021986:	f9b3 3000 	ldrsh.w	r3, [r3]
 802198a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 802198e:	fb02 3306 	mla	r3, r2, r6, r3
 8021992:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8021996:	b2e4      	uxtb	r4, r4
 8021998:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802199c:	4419      	add	r1, r3
 802199e:	fb02 f30c 	mul.w	r3, r2, ip
 80219a2:	eba2 0205 	sub.w	r2, r2, r5
 80219a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80219aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80219b2:	440b      	add	r3, r1
 80219b4:	d03e      	beq.n	8021a34 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80219b6:	fa1f fc80 	uxth.w	ip, r0
 80219ba:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80219be:	fb06 f60c 	mul.w	r6, r6, ip
 80219c2:	b280      	uxth	r0, r0
 80219c4:	fb07 f70c 	mul.w	r7, r7, ip
 80219c8:	fb04 f40c 	mul.w	r4, r4, ip
 80219cc:	4299      	cmp	r1, r3
 80219ce:	d23d      	bcs.n	8021a4c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80219d0:	eb01 0c05 	add.w	ip, r1, r5
 80219d4:	458c      	cmp	ip, r1
 80219d6:	f101 0e03 	add.w	lr, r1, #3
 80219da:	d928      	bls.n	8021a2e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80219dc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80219e0:	fb11 f100 	smulbb	r1, r1, r0
 80219e4:	4421      	add	r1, r4
 80219e6:	b289      	uxth	r1, r1
 80219e8:	f101 0801 	add.w	r8, r1, #1
 80219ec:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80219f0:	1209      	asrs	r1, r1, #8
 80219f2:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80219f6:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80219fa:	fb11 f100 	smulbb	r1, r1, r0
 80219fe:	4439      	add	r1, r7
 8021a00:	b289      	uxth	r1, r1
 8021a02:	f101 0801 	add.w	r8, r1, #1
 8021a06:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021a0a:	1209      	asrs	r1, r1, #8
 8021a0c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8021a10:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8021a14:	fb11 f100 	smulbb	r1, r1, r0
 8021a18:	4431      	add	r1, r6
 8021a1a:	b289      	uxth	r1, r1
 8021a1c:	f101 0801 	add.w	r8, r1, #1
 8021a20:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021a24:	1209      	asrs	r1, r1, #8
 8021a26:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8021a2a:	4671      	mov	r1, lr
 8021a2c:	e7d2      	b.n	80219d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8021a2e:	4411      	add	r1, r2
 8021a30:	e7cc      	b.n	80219cc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8021a32:	4411      	add	r1, r2
 8021a34:	4299      	cmp	r1, r3
 8021a36:	d209      	bcs.n	8021a4c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021a38:	1948      	adds	r0, r1, r5
 8021a3a:	4281      	cmp	r1, r0
 8021a3c:	d2f9      	bcs.n	8021a32 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8021a3e:	700c      	strb	r4, [r1, #0]
 8021a40:	3103      	adds	r1, #3
 8021a42:	f801 7c02 	strb.w	r7, [r1, #-2]
 8021a46:	f801 6c01 	strb.w	r6, [r1, #-1]
 8021a4a:	e7f6      	b.n	8021a3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8021a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021a50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a54:	b093      	sub	sp, #76	; 0x4c
 8021a56:	4699      	mov	r9, r3
 8021a58:	4617      	mov	r7, r2
 8021a5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021a5e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8021a62:	4604      	mov	r4, r0
 8021a64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021a68:	a80c      	add	r0, sp, #48	; 0x30
 8021a6a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8021a6e:	460d      	mov	r5, r1
 8021a70:	4649      	mov	r1, r9
 8021a72:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8021a76:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021a7a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8021a7e:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8021a82:	f7f7 fcd9 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 8021a86:	4639      	mov	r1, r7
 8021a88:	a80c      	add	r0, sp, #48	; 0x30
 8021a8a:	f7f7 fcd5 	bl	8019438 <_ZN8touchgfx4RectaNERKS0_>
 8021a8e:	4b78      	ldr	r3, [pc, #480]	; (8021c70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021a90:	8818      	ldrh	r0, [r3, #0]
 8021a92:	4b78      	ldr	r3, [pc, #480]	; (8021c74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8021a94:	b202      	sxth	r2, r0
 8021a96:	8819      	ldrh	r1, [r3, #0]
 8021a98:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8021a9c:	b20f      	sxth	r7, r1
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	da07      	bge.n	8021ab2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8021aa2:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8021aa6:	4463      	add	r3, ip
 8021aa8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8021aac:	2300      	movs	r3, #0
 8021aae:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8021ab2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8021ab6:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8021aba:	1ad2      	subs	r2, r2, r3
 8021abc:	4594      	cmp	ip, r2
 8021abe:	bfc4      	itt	gt
 8021ac0:	1ac2      	subgt	r2, r0, r3
 8021ac2:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8021ac6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8021aca:	2a00      	cmp	r2, #0
 8021acc:	da07      	bge.n	8021ade <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8021ace:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8021ad2:	4462      	add	r2, ip
 8021ad4:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8021ad8:	2200      	movs	r2, #0
 8021ada:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8021ade:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8021ae2:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8021ae6:	1abf      	subs	r7, r7, r2
 8021ae8:	45bc      	cmp	ip, r7
 8021aea:	f8df c190 	ldr.w	ip, [pc, #400]	; 8021c7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8021aee:	bfc8      	it	gt
 8021af0:	1a8f      	subgt	r7, r1, r2
 8021af2:	f89c c000 	ldrb.w	ip, [ip]
 8021af6:	bfc8      	it	gt
 8021af8:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8021afc:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8021b00:	f1bc 0f00 	cmp.w	ip, #0
 8021b04:	d176      	bne.n	8021bf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8021b06:	4287      	cmp	r7, r0
 8021b08:	bf14      	ite	ne
 8021b0a:	2100      	movne	r1, #0
 8021b0c:	2101      	moveq	r1, #1
 8021b0e:	2f00      	cmp	r7, #0
 8021b10:	9107      	str	r1, [sp, #28]
 8021b12:	dd73      	ble.n	8021bfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8021b14:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8021b18:	2900      	cmp	r1, #0
 8021b1a:	9104      	str	r1, [sp, #16]
 8021b1c:	dd6e      	ble.n	8021bfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8021b1e:	f8b9 1000 	ldrh.w	r1, [r9]
 8021b22:	a80e      	add	r0, sp, #56	; 0x38
 8021b24:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8021b28:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8021b2c:	1a5b      	subs	r3, r3, r1
 8021b2e:	a910      	add	r1, sp, #64	; 0x40
 8021b30:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8021b34:	b21b      	sxth	r3, r3
 8021b36:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8021b3a:	f8df a144 	ldr.w	sl, [pc, #324]	; 8021c80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8021b3e:	9305      	str	r3, [sp, #20]
 8021b40:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8021b44:	1ad2      	subs	r2, r2, r3
 8021b46:	b213      	sxth	r3, r2
 8021b48:	9306      	str	r3, [sp, #24]
 8021b4a:	9b05      	ldr	r3, [sp, #20]
 8021b4c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8021b50:	9b06      	ldr	r3, [sp, #24]
 8021b52:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021b56:	9b04      	ldr	r3, [sp, #16]
 8021b58:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8021b5c:	2300      	movs	r3, #0
 8021b5e:	9310      	str	r3, [sp, #64]	; 0x40
 8021b60:	f7fa ff94 	bl	801ca8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b64:	4640      	mov	r0, r8
 8021b66:	f7fa ff4d 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b6a:	a810      	add	r0, sp, #64	; 0x40
 8021b6c:	f7fa ff4a 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b70:	4b41      	ldr	r3, [pc, #260]	; (8021c78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8021b72:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8021b76:	4628      	mov	r0, r5
 8021b78:	881b      	ldrh	r3, [r3, #0]
 8021b7a:	9308      	str	r3, [sp, #32]
 8021b7c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8021b80:	b21b      	sxth	r3, r3
 8021b82:	9303      	str	r3, [sp, #12]
 8021b84:	682b      	ldr	r3, [r5, #0]
 8021b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b88:	4798      	blx	r3
 8021b8a:	9a03      	ldr	r2, [sp, #12]
 8021b8c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8021b90:	4681      	mov	r9, r0
 8021b92:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8021b96:	fb13 f302 	smulbb	r3, r3, r2
 8021b9a:	2203      	movs	r2, #3
 8021b9c:	f8da 0000 	ldr.w	r0, [sl]
 8021ba0:	fb15 3302 	smlabb	r3, r5, r2, r3
 8021ba4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8021ba6:	920b      	str	r2, [sp, #44]	; 0x2c
 8021ba8:	441d      	add	r5, r3
 8021baa:	6803      	ldr	r3, [r0, #0]
 8021bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021bae:	4798      	blx	r3
 8021bb0:	9009      	str	r0, [sp, #36]	; 0x24
 8021bb2:	f8da 0000 	ldr.w	r0, [sl]
 8021bb6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021bba:	6803      	ldr	r3, [r0, #0]
 8021bbc:	910a      	str	r1, [sp, #40]	; 0x28
 8021bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021bc0:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8021bc4:	4798      	blx	r3
 8021bc6:	f010 0f01 	tst.w	r0, #1
 8021bca:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8021bce:	d01e      	beq.n	8021c0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8021bd0:	f8da 0000 	ldr.w	r0, [sl]
 8021bd4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021bd8:	6803      	ldr	r3, [r0, #0]
 8021bda:	9200      	str	r2, [sp, #0]
 8021bdc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8021bde:	462b      	mov	r3, r5
 8021be0:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021be4:	47b0      	blx	r6
 8021be6:	9b05      	ldr	r3, [sp, #20]
 8021be8:	80a7      	strh	r7, [r4, #4]
 8021bea:	8023      	strh	r3, [r4, #0]
 8021bec:	9b06      	ldr	r3, [sp, #24]
 8021bee:	8063      	strh	r3, [r4, #2]
 8021bf0:	9b04      	ldr	r3, [sp, #16]
 8021bf2:	e007      	b.n	8021c04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8021bf4:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8021bf8:	4288      	cmp	r0, r1
 8021bfa:	e785      	b.n	8021b08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8021bfc:	2300      	movs	r3, #0
 8021bfe:	8023      	strh	r3, [r4, #0]
 8021c00:	8063      	strh	r3, [r4, #2]
 8021c02:	80a3      	strh	r3, [r4, #4]
 8021c04:	4620      	mov	r0, r4
 8021c06:	80e3      	strh	r3, [r4, #6]
 8021c08:	b013      	add	sp, #76	; 0x4c
 8021c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c0e:	fb09 f606 	mul.w	r6, r9, r6
 8021c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c14:	fb11 6602 	smlabb	r6, r1, r2, r6
 8021c18:	9a07      	ldr	r2, [sp, #28]
 8021c1a:	4433      	add	r3, r6
 8021c1c:	461e      	mov	r6, r3
 8021c1e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8021c22:	b16a      	cbz	r2, 8021c40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8021c24:	9a08      	ldr	r2, [sp, #32]
 8021c26:	4593      	cmp	fp, r2
 8021c28:	d10a      	bne.n	8021c40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8021c2a:	f8da 0000 	ldr.w	r0, [sl]
 8021c2e:	fb09 f303 	mul.w	r3, r9, r3
 8021c32:	4629      	mov	r1, r5
 8021c34:	6802      	ldr	r2, [r0, #0]
 8021c36:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8021c3a:	4632      	mov	r2, r6
 8021c3c:	47d0      	blx	sl
 8021c3e:	e7d2      	b.n	8021be6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8021c40:	9a03      	ldr	r2, [sp, #12]
 8021c42:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8021c80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8021c46:	fb02 5803 	mla	r8, r2, r3, r5
 8021c4a:	4545      	cmp	r5, r8
 8021c4c:	d2cb      	bcs.n	8021be6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8021c4e:	f8db 0000 	ldr.w	r0, [fp]
 8021c52:	4629      	mov	r1, r5
 8021c54:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8021c58:	6802      	ldr	r2, [r0, #0]
 8021c5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021c5e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8021c62:	4632      	mov	r2, r6
 8021c64:	47d0      	blx	sl
 8021c66:	9b03      	ldr	r3, [sp, #12]
 8021c68:	444e      	add	r6, r9
 8021c6a:	441d      	add	r5, r3
 8021c6c:	e7ed      	b.n	8021c4a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8021c6e:	bf00      	nop
 8021c70:	24026258 	.word	0x24026258
 8021c74:	2402625a 	.word	0x2402625a
 8021c78:	2402625e 	.word	0x2402625e
 8021c7c:	2402625c 	.word	0x2402625c
 8021c80:	24026264 	.word	0x24026264

08021c84 <_ZN8touchgfx8LCD24bppC1Ev>:
 8021c84:	2200      	movs	r2, #0
 8021c86:	490c      	ldr	r1, [pc, #48]	; (8021cb8 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8021c88:	6042      	str	r2, [r0, #4]
 8021c8a:	6001      	str	r1, [r0, #0]
 8021c8c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021c90:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021c94:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8021c98:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021c9c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8021ca0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021ca4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8021ca8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8021cac:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8021cb0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021cb4:	4770      	bx	lr
 8021cb6:	bf00      	nop
 8021cb8:	0802c97c 	.word	0x0802c97c

08021cbc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cc0:	b091      	sub	sp, #68	; 0x44
 8021cc2:	4607      	mov	r7, r0
 8021cc4:	4688      	mov	r8, r1
 8021cc6:	6810      	ldr	r0, [r2, #0]
 8021cc8:	6851      	ldr	r1, [r2, #4]
 8021cca:	ac0c      	add	r4, sp, #48	; 0x30
 8021ccc:	4616      	mov	r6, r2
 8021cce:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8021cd2:	4d64      	ldr	r5, [pc, #400]	; (8021e64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021cd4:	f8df a190 	ldr.w	sl, [pc, #400]	; 8021e68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8021cd8:	c403      	stmia	r4!, {r0, r1}
 8021cda:	6818      	ldr	r0, [r3, #0]
 8021cdc:	ac0e      	add	r4, sp, #56	; 0x38
 8021cde:	6859      	ldr	r1, [r3, #4]
 8021ce0:	c403      	stmia	r4!, {r0, r1}
 8021ce2:	a80c      	add	r0, sp, #48	; 0x30
 8021ce4:	f7fa fe8e 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ce8:	4631      	mov	r1, r6
 8021cea:	a80e      	add	r0, sp, #56	; 0x38
 8021cec:	f7fa fece 	bl	801ca8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021cf0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021cf4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021cf8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021cfc:	6828      	ldr	r0, [r5, #0]
 8021cfe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021d02:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8021d06:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8021d0a:	440f      	add	r7, r1
 8021d0c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021d10:	440a      	add	r2, r1
 8021d12:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021d16:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021d1a:	4413      	add	r3, r2
 8021d1c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021d20:	6803      	ldr	r3, [r0, #0]
 8021d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d24:	4798      	blx	r3
 8021d26:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021d2a:	6828      	ldr	r0, [r5, #0]
 8021d2c:	d01f      	beq.n	8021d6e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8021d2e:	2201      	movs	r2, #1
 8021d30:	2500      	movs	r5, #0
 8021d32:	6801      	ldr	r1, [r0, #0]
 8021d34:	b2a4      	uxth	r4, r4
 8021d36:	b2b6      	uxth	r6, r6
 8021d38:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021d3c:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8021d40:	250b      	movs	r5, #11
 8021d42:	9507      	str	r5, [sp, #28]
 8021d44:	f8ba 5000 	ldrh.w	r5, [sl]
 8021d48:	f8cd 9010 	str.w	r9, [sp, #16]
 8021d4c:	9602      	str	r6, [sp, #8]
 8021d4e:	9401      	str	r4, [sp, #4]
 8021d50:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8021d54:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021d58:	9203      	str	r2, [sp, #12]
 8021d5a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021d5e:	9200      	str	r2, [sp, #0]
 8021d60:	4642      	mov	r2, r8
 8021d62:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8021d64:	4639      	mov	r1, r7
 8021d66:	47a0      	blx	r4
 8021d68:	b011      	add	sp, #68	; 0x44
 8021d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d6e:	6803      	ldr	r3, [r0, #0]
 8021d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021d72:	4798      	blx	r3
 8021d74:	f8ba 5000 	ldrh.w	r5, [sl]
 8021d78:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021d7c:	f04f 0e04 	mov.w	lr, #4
 8021d80:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021d84:	436e      	muls	r6, r5
 8021d86:	fb05 2303 	mla	r3, r5, r3, r2
 8021d8a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021d8e:	1b2d      	subs	r5, r5, r4
 8021d90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021d98:	4418      	add	r0, r3
 8021d9a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021d9e:	1982      	adds	r2, r0, r6
 8021da0:	1b1b      	subs	r3, r3, r4
 8021da2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8021da8:	4290      	cmp	r0, r2
 8021daa:	d254      	bcs.n	8021e56 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8021dac:	eb00 0a04 	add.w	sl, r0, r4
 8021db0:	4550      	cmp	r0, sl
 8021db2:	d24c      	bcs.n	8021e4e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8021db4:	f817 1b01 	ldrb.w	r1, [r7], #1
 8021db8:	fb1e e101 	smlabb	r1, lr, r1, lr
 8021dbc:	eb08 0c01 	add.w	ip, r8, r1
 8021dc0:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021dc4:	b173      	cbz	r3, 8021de4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8021dc6:	2bff      	cmp	r3, #255	; 0xff
 8021dc8:	f818 b001 	ldrb.w	fp, [r8, r1]
 8021dcc:	d10c      	bne.n	8021de8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021dce:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021dd2:	d109      	bne.n	8021de8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021dd4:	f880 b000 	strb.w	fp, [r0]
 8021dd8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021ddc:	7043      	strb	r3, [r0, #1]
 8021dde:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8021de2:	7083      	strb	r3, [r0, #2]
 8021de4:	3003      	adds	r0, #3
 8021de6:	e7e3      	b.n	8021db0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8021de8:	fb09 f103 	mul.w	r1, r9, r3
 8021dec:	1c4b      	adds	r3, r1, #1
 8021dee:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021df2:	7801      	ldrb	r1, [r0, #0]
 8021df4:	121b      	asrs	r3, r3, #8
 8021df6:	b29e      	uxth	r6, r3
 8021df8:	43db      	mvns	r3, r3
 8021dfa:	fb1b fb06 	smulbb	fp, fp, r6
 8021dfe:	b2db      	uxtb	r3, r3
 8021e00:	fb01 b103 	mla	r1, r1, r3, fp
 8021e04:	b289      	uxth	r1, r1
 8021e06:	f101 0b01 	add.w	fp, r1, #1
 8021e0a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021e0e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021e12:	fb1b fb03 	smulbb	fp, fp, r3
 8021e16:	1209      	asrs	r1, r1, #8
 8021e18:	7001      	strb	r1, [r0, #0]
 8021e1a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021e1e:	fb01 b106 	mla	r1, r1, r6, fp
 8021e22:	b289      	uxth	r1, r1
 8021e24:	f101 0b01 	add.w	fp, r1, #1
 8021e28:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021e2c:	1209      	asrs	r1, r1, #8
 8021e2e:	7041      	strb	r1, [r0, #1]
 8021e30:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8021e34:	f890 c002 	ldrb.w	ip, [r0, #2]
 8021e38:	fb1c f303 	smulbb	r3, ip, r3
 8021e3c:	fb01 3606 	mla	r6, r1, r6, r3
 8021e40:	b2b6      	uxth	r6, r6
 8021e42:	1c73      	adds	r3, r6, #1
 8021e44:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021e48:	1236      	asrs	r6, r6, #8
 8021e4a:	7086      	strb	r6, [r0, #2]
 8021e4c:	e7ca      	b.n	8021de4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8021e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021e50:	4428      	add	r0, r5
 8021e52:	441f      	add	r7, r3
 8021e54:	e7a8      	b.n	8021da8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8021e56:	4b03      	ldr	r3, [pc, #12]	; (8021e64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021e58:	6818      	ldr	r0, [r3, #0]
 8021e5a:	6803      	ldr	r3, [r0, #0]
 8021e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e5e:	4798      	blx	r3
 8021e60:	e782      	b.n	8021d68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8021e62:	bf00      	nop
 8021e64:	24026264 	.word	0x24026264
 8021e68:	2402625e 	.word	0x2402625e

08021e6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e70:	b091      	sub	sp, #68	; 0x44
 8021e72:	4680      	mov	r8, r0
 8021e74:	460e      	mov	r6, r1
 8021e76:	6810      	ldr	r0, [r2, #0]
 8021e78:	6851      	ldr	r1, [r2, #4]
 8021e7a:	ad0c      	add	r5, sp, #48	; 0x30
 8021e7c:	4614      	mov	r4, r2
 8021e7e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8021e82:	f8df 9198 	ldr.w	r9, [pc, #408]	; 802201c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8021e86:	f8df a198 	ldr.w	sl, [pc, #408]	; 8022020 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8021e8a:	c503      	stmia	r5!, {r0, r1}
 8021e8c:	6818      	ldr	r0, [r3, #0]
 8021e8e:	ad0e      	add	r5, sp, #56	; 0x38
 8021e90:	6859      	ldr	r1, [r3, #4]
 8021e92:	c503      	stmia	r5!, {r0, r1}
 8021e94:	a80c      	add	r0, sp, #48	; 0x30
 8021e96:	f7fa fdb5 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e9a:	4621      	mov	r1, r4
 8021e9c:	a80e      	add	r0, sp, #56	; 0x38
 8021e9e:	f7fa fdf5 	bl	801ca8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021ea2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021ea6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021eaa:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021eae:	f8d9 0000 	ldr.w	r0, [r9]
 8021eb2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021eb6:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8021eba:	eb08 0401 	add.w	r4, r8, r1
 8021ebe:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021ec2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8021ec6:	440a      	add	r2, r1
 8021ec8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021ecc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021ed0:	4413      	add	r3, r2
 8021ed2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021ed6:	6803      	ldr	r3, [r0, #0]
 8021ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021eda:	4798      	blx	r3
 8021edc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021ee0:	f8d9 0000 	ldr.w	r0, [r9]
 8021ee4:	d022      	beq.n	8021f2c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8021ee6:	2200      	movs	r2, #0
 8021ee8:	f04f 0c01 	mov.w	ip, #1
 8021eec:	6801      	ldr	r1, [r0, #0]
 8021eee:	b2ad      	uxth	r5, r5
 8021ef0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021ef4:	e9cd c208 	strd	ip, r2, [sp, #32]
 8021ef8:	f04f 0c0b 	mov.w	ip, #11
 8021efc:	f8cd c01c 	str.w	ip, [sp, #28]
 8021f00:	f8ba c000 	ldrh.w	ip, [sl]
 8021f04:	9704      	str	r7, [sp, #16]
 8021f06:	9502      	str	r5, [sp, #8]
 8021f08:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8021f0c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021f10:	9203      	str	r2, [sp, #12]
 8021f12:	fa1f f288 	uxth.w	r2, r8
 8021f16:	9201      	str	r2, [sp, #4]
 8021f18:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021f1c:	9200      	str	r2, [sp, #0]
 8021f1e:	4632      	mov	r2, r6
 8021f20:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8021f22:	4621      	mov	r1, r4
 8021f24:	47a8      	blx	r5
 8021f26:	b011      	add	sp, #68	; 0x44
 8021f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f2c:	6803      	ldr	r3, [r0, #0]
 8021f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021f30:	4798      	blx	r3
 8021f32:	f8ba 2000 	ldrh.w	r2, [sl]
 8021f36:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021f3a:	f04f 0e03 	mov.w	lr, #3
 8021f3e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8021f42:	4355      	muls	r5, r2
 8021f44:	fa1f fc87 	uxth.w	ip, r7
 8021f48:	fb02 1303 	mla	r3, r2, r3, r1
 8021f4c:	eba2 0208 	sub.w	r2, r2, r8
 8021f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021f54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021f5c:	4418      	add	r0, r3
 8021f5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8021f60:	1943      	adds	r3, r0, r5
 8021f62:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8021f66:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8021f6a:	eba2 0208 	sub.w	r2, r2, r8
 8021f6e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021f72:	b2ad      	uxth	r5, r5
 8021f74:	4298      	cmp	r0, r3
 8021f76:	d24a      	bcs.n	802200e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8021f78:	eb00 0908 	add.w	r9, r0, r8
 8021f7c:	4621      	mov	r1, r4
 8021f7e:	4548      	cmp	r0, r9
 8021f80:	460c      	mov	r4, r1
 8021f82:	d240      	bcs.n	8022006 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8021f84:	f04f 0a04 	mov.w	sl, #4
 8021f88:	7824      	ldrb	r4, [r4, #0]
 8021f8a:	2fff      	cmp	r7, #255	; 0xff
 8021f8c:	f101 0101 	add.w	r1, r1, #1
 8021f90:	fb1e a404 	smlabb	r4, lr, r4, sl
 8021f94:	eb06 0a04 	add.w	sl, r6, r4
 8021f98:	f816 b004 	ldrb.w	fp, [r6, r4]
 8021f9c:	d02b      	beq.n	8021ff6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8021f9e:	7804      	ldrb	r4, [r0, #0]
 8021fa0:	fb14 f405 	smulbb	r4, r4, r5
 8021fa4:	fb0b 440c 	mla	r4, fp, ip, r4
 8021fa8:	b2a4      	uxth	r4, r4
 8021faa:	f104 0b01 	add.w	fp, r4, #1
 8021fae:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021fb2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021fb6:	fb1b fb05 	smulbb	fp, fp, r5
 8021fba:	1224      	asrs	r4, r4, #8
 8021fbc:	7004      	strb	r4, [r0, #0]
 8021fbe:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8021fc2:	fb04 b40c 	mla	r4, r4, ip, fp
 8021fc6:	b2a4      	uxth	r4, r4
 8021fc8:	f104 0b01 	add.w	fp, r4, #1
 8021fcc:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021fd0:	1224      	asrs	r4, r4, #8
 8021fd2:	7044      	strb	r4, [r0, #1]
 8021fd4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8021fd8:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021fdc:	fb1a fa05 	smulbb	sl, sl, r5
 8021fe0:	fb04 a40c 	mla	r4, r4, ip, sl
 8021fe4:	b2a4      	uxth	r4, r4
 8021fe6:	f104 0a01 	add.w	sl, r4, #1
 8021fea:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021fee:	1224      	asrs	r4, r4, #8
 8021ff0:	7084      	strb	r4, [r0, #2]
 8021ff2:	3003      	adds	r0, #3
 8021ff4:	e7c3      	b.n	8021f7e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8021ff6:	f880 b000 	strb.w	fp, [r0]
 8021ffa:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8021ffe:	7044      	strb	r4, [r0, #1]
 8022000:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022004:	e7f4      	b.n	8021ff0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8022006:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022008:	4420      	add	r0, r4
 802200a:	188c      	adds	r4, r1, r2
 802200c:	e7b2      	b.n	8021f74 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 802200e:	4b03      	ldr	r3, [pc, #12]	; (802201c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022010:	6818      	ldr	r0, [r3, #0]
 8022012:	6803      	ldr	r3, [r0, #0]
 8022014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022016:	4798      	blx	r3
 8022018:	e785      	b.n	8021f26 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 802201a:	bf00      	nop
 802201c:	24026264 	.word	0x24026264
 8022020:	2402625e 	.word	0x2402625e

08022024 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022024:	b430      	push	{r4, r5}
 8022026:	780d      	ldrb	r5, [r1, #0]
 8022028:	f89d 4008 	ldrb.w	r4, [sp, #8]
 802202c:	b11d      	cbz	r5, 8022036 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 802202e:	2d01      	cmp	r5, #1
 8022030:	d005      	beq.n	802203e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8022032:	bc30      	pop	{r4, r5}
 8022034:	4770      	bx	lr
 8022036:	9402      	str	r4, [sp, #8]
 8022038:	bc30      	pop	{r4, r5}
 802203a:	f7ff be3f 	b.w	8021cbc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802203e:	9402      	str	r4, [sp, #8]
 8022040:	bc30      	pop	{r4, r5}
 8022042:	f7ff bf13 	b.w	8021e6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08022048 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8022048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802204c:	4605      	mov	r5, r0
 802204e:	b08f      	sub	sp, #60	; 0x3c
 8022050:	460c      	mov	r4, r1
 8022052:	461f      	mov	r7, r3
 8022054:	2b00      	cmp	r3, #0
 8022056:	d052      	beq.n	80220fe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8022058:	6808      	ldr	r0, [r1, #0]
 802205a:	ab0a      	add	r3, sp, #40	; 0x28
 802205c:	6849      	ldr	r1, [r1, #4]
 802205e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8022228 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8022062:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 802222c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8022066:	c303      	stmia	r3!, {r0, r1}
 8022068:	6810      	ldr	r0, [r2, #0]
 802206a:	ab0c      	add	r3, sp, #48	; 0x30
 802206c:	6851      	ldr	r1, [r2, #4]
 802206e:	c303      	stmia	r3!, {r0, r1}
 8022070:	a80a      	add	r0, sp, #40	; 0x28
 8022072:	f7fa fcc7 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022076:	4621      	mov	r1, r4
 8022078:	a80c      	add	r0, sp, #48	; 0x30
 802207a:	f7fa fd07 	bl	801ca8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802207e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8022082:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022086:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802208a:	f8d8 0000 	ldr.w	r0, [r8]
 802208e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022092:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8022096:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 802209a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 802209e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80220a2:	440a      	add	r2, r1
 80220a4:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80220a8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80220ac:	4413      	add	r3, r2
 80220ae:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80220b2:	6803      	ldr	r3, [r0, #0]
 80220b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80220b6:	4798      	blx	r3
 80220b8:	2fff      	cmp	r7, #255	; 0xff
 80220ba:	d023      	beq.n	8022104 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 80220bc:	f010 0f04 	tst.w	r0, #4
 80220c0:	f8d8 0000 	ldr.w	r0, [r8]
 80220c4:	d021      	beq.n	802210a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 80220c6:	2100      	movs	r1, #0
 80220c8:	f04f 0e01 	mov.w	lr, #1
 80220cc:	f8d0 c000 	ldr.w	ip, [r0]
 80220d0:	b2a4      	uxth	r4, r4
 80220d2:	9106      	str	r1, [sp, #24]
 80220d4:	b2b6      	uxth	r6, r6
 80220d6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80220da:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80220de:	e9cd e107 	strd	lr, r1, [sp, #28]
 80220e2:	f8b9 e000 	ldrh.w	lr, [r9]
 80220e6:	9703      	str	r7, [sp, #12]
 80220e8:	9401      	str	r4, [sp, #4]
 80220ea:	9600      	str	r6, [sp, #0]
 80220ec:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80220f0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80220f4:	9102      	str	r1, [sp, #8]
 80220f6:	4629      	mov	r1, r5
 80220f8:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 80220fc:	47a0      	blx	r4
 80220fe:	b00f      	add	sp, #60	; 0x3c
 8022100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022104:	f010 0f01 	tst.w	r0, #1
 8022108:	e7da      	b.n	80220c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 802210a:	6803      	ldr	r3, [r0, #0]
 802210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802210e:	4798      	blx	r3
 8022110:	f8b9 1000 	ldrh.w	r1, [r9]
 8022114:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022118:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 802211c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8022120:	434c      	muls	r4, r1
 8022122:	2fff      	cmp	r7, #255	; 0xff
 8022124:	fb01 2303 	mla	r3, r1, r3, r2
 8022128:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802212c:	eba1 0106 	sub.w	r1, r1, r6
 8022130:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022134:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022138:	4418      	add	r0, r3
 802213a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802213e:	eba3 0606 	sub.w	r6, r3, r6
 8022142:	4404      	add	r4, r0
 8022144:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8022148:	d04a      	beq.n	80221e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 802214a:	43fa      	mvns	r2, r7
 802214c:	b2bb      	uxth	r3, r7
 802214e:	b2d7      	uxtb	r7, r2
 8022150:	42a0      	cmp	r0, r4
 8022152:	d263      	bcs.n	802221c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8022154:	eb00 0e0c 	add.w	lr, r0, ip
 8022158:	4586      	cmp	lr, r0
 802215a:	f100 0803 	add.w	r8, r0, #3
 802215e:	d93a      	bls.n	80221d6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8022160:	f835 2b02 	ldrh.w	r2, [r5], #2
 8022164:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8022168:	00d0      	lsls	r0, r2, #3
 802216a:	fb19 f907 	smulbb	r9, r9, r7
 802216e:	b2c0      	uxtb	r0, r0
 8022170:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022174:	fb00 9003 	mla	r0, r0, r3, r9
 8022178:	b280      	uxth	r0, r0
 802217a:	f100 0901 	add.w	r9, r0, #1
 802217e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8022182:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8022186:	fb19 f907 	smulbb	r9, r9, r7
 802218a:	1200      	asrs	r0, r0, #8
 802218c:	f808 0c03 	strb.w	r0, [r8, #-3]
 8022190:	10d0      	asrs	r0, r2, #3
 8022192:	1212      	asrs	r2, r2, #8
 8022194:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022198:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802219c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80221a0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80221a4:	fb00 9003 	mla	r0, r0, r3, r9
 80221a8:	b280      	uxth	r0, r0
 80221aa:	f100 0901 	add.w	r9, r0, #1
 80221ae:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80221b2:	1200      	asrs	r0, r0, #8
 80221b4:	f808 0c02 	strb.w	r0, [r8, #-2]
 80221b8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80221bc:	fb10 f007 	smulbb	r0, r0, r7
 80221c0:	fb02 0203 	mla	r2, r2, r3, r0
 80221c4:	b292      	uxth	r2, r2
 80221c6:	1c50      	adds	r0, r2, #1
 80221c8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80221cc:	4640      	mov	r0, r8
 80221ce:	1212      	asrs	r2, r2, #8
 80221d0:	f808 2c01 	strb.w	r2, [r8, #-1]
 80221d4:	e7c0      	b.n	8022158 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80221d6:	4408      	add	r0, r1
 80221d8:	4435      	add	r5, r6
 80221da:	e7b9      	b.n	8022150 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80221dc:	4408      	add	r0, r1
 80221de:	4435      	add	r5, r6
 80221e0:	42a0      	cmp	r0, r4
 80221e2:	d21b      	bcs.n	802221c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80221e4:	eb00 070c 	add.w	r7, r0, ip
 80221e8:	42b8      	cmp	r0, r7
 80221ea:	d2f7      	bcs.n	80221dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80221ec:	f835 3b02 	ldrh.w	r3, [r5], #2
 80221f0:	3003      	adds	r0, #3
 80221f2:	00da      	lsls	r2, r3, #3
 80221f4:	b2d2      	uxtb	r2, r2
 80221f6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80221fa:	f800 2c03 	strb.w	r2, [r0, #-3]
 80221fe:	10da      	asrs	r2, r3, #3
 8022200:	121b      	asrs	r3, r3, #8
 8022202:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022206:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802220a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802220e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022212:	f800 2c02 	strb.w	r2, [r0, #-2]
 8022216:	f800 3c01 	strb.w	r3, [r0, #-1]
 802221a:	e7e5      	b.n	80221e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 802221c:	4b02      	ldr	r3, [pc, #8]	; (8022228 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 802221e:	6818      	ldr	r0, [r3, #0]
 8022220:	6803      	ldr	r3, [r0, #0]
 8022222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022224:	4798      	blx	r3
 8022226:	e76a      	b.n	80220fe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8022228:	24026264 	.word	0x24026264
 802222c:	2402625e 	.word	0x2402625e

08022230 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022234:	b08a      	sub	sp, #40	; 0x28
 8022236:	460d      	mov	r5, r1
 8022238:	4604      	mov	r4, r0
 802223a:	461e      	mov	r6, r3
 802223c:	6808      	ldr	r0, [r1, #0]
 802223e:	ab06      	add	r3, sp, #24
 8022240:	6849      	ldr	r1, [r1, #4]
 8022242:	4f5d      	ldr	r7, [pc, #372]	; (80223b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8022244:	c303      	stmia	r3!, {r0, r1}
 8022246:	6810      	ldr	r0, [r2, #0]
 8022248:	ab08      	add	r3, sp, #32
 802224a:	6851      	ldr	r1, [r2, #4]
 802224c:	c303      	stmia	r3!, {r0, r1}
 802224e:	a806      	add	r0, sp, #24
 8022250:	f7fa fbd8 	bl	801ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022254:	4629      	mov	r1, r5
 8022256:	a808      	add	r0, sp, #32
 8022258:	f7fa fc18 	bl	801ca8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802225c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8022260:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8022264:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8022268:	6838      	ldr	r0, [r7, #0]
 802226a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802226e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8022272:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8022276:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802227a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802227e:	440a      	add	r2, r1
 8022280:	f8ad 2020 	strh.w	r2, [sp, #32]
 8022284:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8022288:	4413      	add	r3, r2
 802228a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 802228e:	6803      	ldr	r3, [r0, #0]
 8022290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022292:	4798      	blx	r3
 8022294:	2eff      	cmp	r6, #255	; 0xff
 8022296:	d119      	bne.n	80222cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8022298:	f010 0f20 	tst.w	r0, #32
 802229c:	6838      	ldr	r0, [r7, #0]
 802229e:	d018      	beq.n	80222d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80222a0:	b2ad      	uxth	r5, r5
 80222a2:	2700      	movs	r7, #0
 80222a4:	6801      	ldr	r1, [r0, #0]
 80222a6:	9501      	str	r5, [sp, #4]
 80222a8:	fa1f f588 	uxth.w	r5, r8
 80222ac:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80222b0:	9500      	str	r5, [sp, #0]
 80222b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80222b6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80222ba:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80222be:	9602      	str	r6, [sp, #8]
 80222c0:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80222c2:	4621      	mov	r1, r4
 80222c4:	47a8      	blx	r5
 80222c6:	b00a      	add	sp, #40	; 0x28
 80222c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80222cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80222d0:	e7e4      	b.n	802229c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80222d2:	6803      	ldr	r3, [r0, #0]
 80222d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80222d6:	4798      	blx	r3
 80222d8:	4b38      	ldr	r3, [pc, #224]	; (80223bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80222da:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80222de:	f8b3 c000 	ldrh.w	ip, [r3]
 80222e2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80222e6:	fb0c f505 	mul.w	r5, ip, r5
 80222ea:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80222ee:	fb0c 2303 	mla	r3, ip, r3, r2
 80222f2:	ebac 0c08 	sub.w	ip, ip, r8
 80222f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80222fa:	ebae 0e08 	sub.w	lr, lr, r8
 80222fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022302:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022306:	4418      	add	r0, r3
 8022308:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 802230c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8022310:	4405      	add	r5, r0
 8022312:	42a8      	cmp	r0, r5
 8022314:	d24a      	bcs.n	80223ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8022316:	eb00 0803 	add.w	r8, r0, r3
 802231a:	4540      	cmp	r0, r8
 802231c:	d243      	bcs.n	80223a6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 802231e:	78e2      	ldrb	r2, [r4, #3]
 8022320:	b15a      	cbz	r2, 802233a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8022322:	2aff      	cmp	r2, #255	; 0xff
 8022324:	f894 9000 	ldrb.w	r9, [r4]
 8022328:	d10a      	bne.n	8022340 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 802232a:	2eff      	cmp	r6, #255	; 0xff
 802232c:	d108      	bne.n	8022340 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 802232e:	f880 9000 	strb.w	r9, [r0]
 8022332:	7862      	ldrb	r2, [r4, #1]
 8022334:	7042      	strb	r2, [r0, #1]
 8022336:	78a2      	ldrb	r2, [r4, #2]
 8022338:	7082      	strb	r2, [r0, #2]
 802233a:	3003      	adds	r0, #3
 802233c:	3404      	adds	r4, #4
 802233e:	e7ec      	b.n	802231a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8022340:	4372      	muls	r2, r6
 8022342:	1c51      	adds	r1, r2, #1
 8022344:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8022348:	1209      	asrs	r1, r1, #8
 802234a:	fa1f fa81 	uxth.w	sl, r1
 802234e:	43c9      	mvns	r1, r1
 8022350:	fb19 f90a 	smulbb	r9, r9, sl
 8022354:	b2ca      	uxtb	r2, r1
 8022356:	7801      	ldrb	r1, [r0, #0]
 8022358:	fb01 9902 	mla	r9, r1, r2, r9
 802235c:	fa1f f989 	uxth.w	r9, r9
 8022360:	f109 0101 	add.w	r1, r9, #1
 8022364:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8022368:	ea4f 2929 	mov.w	r9, r9, asr #8
 802236c:	f880 9000 	strb.w	r9, [r0]
 8022370:	f890 9001 	ldrb.w	r9, [r0, #1]
 8022374:	7861      	ldrb	r1, [r4, #1]
 8022376:	fb19 f902 	smulbb	r9, r9, r2
 802237a:	fb01 910a 	mla	r1, r1, sl, r9
 802237e:	b289      	uxth	r1, r1
 8022380:	f101 0901 	add.w	r9, r1, #1
 8022384:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8022388:	1209      	asrs	r1, r1, #8
 802238a:	7041      	strb	r1, [r0, #1]
 802238c:	7881      	ldrb	r1, [r0, #2]
 802238e:	f894 9002 	ldrb.w	r9, [r4, #2]
 8022392:	fb11 f202 	smulbb	r2, r1, r2
 8022396:	fb09 220a 	mla	r2, r9, sl, r2
 802239a:	b292      	uxth	r2, r2
 802239c:	1c51      	adds	r1, r2, #1
 802239e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80223a2:	1212      	asrs	r2, r2, #8
 80223a4:	e7c8      	b.n	8022338 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80223a6:	4460      	add	r0, ip
 80223a8:	4474      	add	r4, lr
 80223aa:	e7b2      	b.n	8022312 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80223ac:	6838      	ldr	r0, [r7, #0]
 80223ae:	6803      	ldr	r3, [r0, #0]
 80223b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80223b2:	4798      	blx	r3
 80223b4:	e787      	b.n	80222c6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80223b6:	bf00      	nop
 80223b8:	24026264 	.word	0x24026264
 80223bc:	2402625e 	.word	0x2402625e

080223c0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80223c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80223c4:	b085      	sub	sp, #20
 80223c6:	4606      	mov	r6, r0
 80223c8:	460c      	mov	r4, r1
 80223ca:	4691      	mov	r9, r2
 80223cc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80223d0:	4698      	mov	r8, r3
 80223d2:	b31d      	cbz	r5, 802241c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80223d4:	4608      	mov	r0, r1
 80223d6:	f7fd fa21 	bl	801f81c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80223da:	4607      	mov	r7, r0
 80223dc:	4620      	mov	r0, r4
 80223de:	f7fd fa51 	bl	801f884 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80223e2:	f8ad 000e 	strh.w	r0, [sp, #14]
 80223e6:	4620      	mov	r0, r4
 80223e8:	f8ad 9008 	strh.w	r9, [sp, #8]
 80223ec:	f8ad 800a 	strh.w	r8, [sp, #10]
 80223f0:	f8ad 700c 	strh.w	r7, [sp, #12]
 80223f4:	f7fd fb82 	bl	801fafc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80223f8:	280b      	cmp	r0, #11
 80223fa:	d80f      	bhi.n	802241c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80223fc:	e8df f000 	tbb	[pc, r0]
 8022400:	0e062920 	.word	0x0e062920
 8022404:	0e0e0e0e 	.word	0x0e0e0e0e
 8022408:	110e0e0e 	.word	0x110e0e0e
 802240c:	4620      	mov	r0, r4
 802240e:	f7fd faf1 	bl	801f9f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022412:	462b      	mov	r3, r5
 8022414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022416:	a902      	add	r1, sp, #8
 8022418:	f7ff ff0a 	bl	8022230 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802241c:	b005      	add	sp, #20
 802241e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022422:	4620      	mov	r0, r4
 8022424:	f7fd fae6 	bl	801f9f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022428:	4606      	mov	r6, r0
 802242a:	4620      	mov	r0, r4
 802242c:	f7fd fb12 	bl	801fa54 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022430:	9500      	str	r5, [sp, #0]
 8022432:	4601      	mov	r1, r0
 8022434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022436:	aa02      	add	r2, sp, #8
 8022438:	4630      	mov	r0, r6
 802243a:	f7ff fdf3 	bl	8022024 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802243e:	e7ed      	b.n	802241c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8022440:	4620      	mov	r0, r4
 8022442:	f7fd fad7 	bl	801f9f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022446:	462b      	mov	r3, r5
 8022448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802244a:	a902      	add	r1, sp, #8
 802244c:	f7ff fdfc 	bl	8022048 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8022450:	e7e4      	b.n	802241c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8022452:	6833      	ldr	r3, [r6, #0]
 8022454:	4620      	mov	r0, r4
 8022456:	68df      	ldr	r7, [r3, #12]
 8022458:	f7fd facc 	bl	801f9f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 802245c:	2300      	movs	r3, #0
 802245e:	4601      	mov	r1, r0
 8022460:	aa02      	add	r2, sp, #8
 8022462:	4630      	mov	r0, r6
 8022464:	e9cd 5300 	strd	r5, r3, [sp]
 8022468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802246a:	47b8      	blx	r7
 802246c:	e7d6      	b.n	802241c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0802246e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802246e:	b4f0      	push	{r4, r5, r6, r7}
 8022470:	4616      	mov	r6, r2
 8022472:	461c      	mov	r4, r3
 8022474:	460d      	mov	r5, r1
 8022476:	9a04      	ldr	r2, [sp, #16]
 8022478:	2e01      	cmp	r6, #1
 802247a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802247e:	d00e      	beq.n	802249e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8022480:	d303      	bcc.n	802248a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8022482:	2e02      	cmp	r6, #2
 8022484:	d006      	beq.n	8022494 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8022486:	bcf0      	pop	{r4, r5, r6, r7}
 8022488:	4770      	bx	lr
 802248a:	4621      	mov	r1, r4
 802248c:	4628      	mov	r0, r5
 802248e:	bcf0      	pop	{r4, r5, r6, r7}
 8022490:	f7ff bdda 	b.w	8022048 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8022494:	4621      	mov	r1, r4
 8022496:	4628      	mov	r0, r5
 8022498:	bcf0      	pop	{r4, r5, r6, r7}
 802249a:	f7ff bec9 	b.w	8022230 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802249e:	6805      	ldr	r5, [r0, #0]
 80224a0:	2600      	movs	r6, #0
 80224a2:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80224a6:	68ed      	ldr	r5, [r5, #12]
 80224a8:	4613      	mov	r3, r2
 80224aa:	4622      	mov	r2, r4
 80224ac:	46ac      	mov	ip, r5
 80224ae:	bcf0      	pop	{r4, r5, r6, r7}
 80224b0:	4760      	bx	ip
	...

080224b4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80224b4:	b160      	cbz	r0, 80224d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80224b6:	2903      	cmp	r1, #3
 80224b8:	d818      	bhi.n	80224ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80224ba:	e8df f001 	tbb	[pc, r1]
 80224be:	1902      	.short	0x1902
 80224c0:	1b06      	.short	0x1b06
 80224c2:	4b0e      	ldr	r3, [pc, #56]	; (80224fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80224c4:	8818      	ldrh	r0, [r3, #0]
 80224c6:	4240      	negs	r0, r0
 80224c8:	4770      	bx	lr
 80224ca:	4b0c      	ldr	r3, [pc, #48]	; (80224fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80224cc:	8818      	ldrh	r0, [r3, #0]
 80224ce:	4770      	bx	lr
 80224d0:	2903      	cmp	r1, #3
 80224d2:	d80b      	bhi.n	80224ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80224d4:	a301      	add	r3, pc, #4	; (adr r3, 80224dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80224d6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80224da:	bf00      	nop
 80224dc:	080224f1 	.word	0x080224f1
 80224e0:	080224cb 	.word	0x080224cb
 80224e4:	080224f5 	.word	0x080224f5
 80224e8:	080224c3 	.word	0x080224c3
 80224ec:	2000      	movs	r0, #0
 80224ee:	4770      	bx	lr
 80224f0:	2001      	movs	r0, #1
 80224f2:	4770      	bx	lr
 80224f4:	f04f 30ff 	mov.w	r0, #4294967295
 80224f8:	4770      	bx	lr
 80224fa:	bf00      	nop
 80224fc:	2402625e 	.word	0x2402625e

08022500 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8022500:	b160      	cbz	r0, 802251c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8022502:	2903      	cmp	r1, #3
 8022504:	d818      	bhi.n	8022538 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8022506:	e8df f001 	tbb	[pc, r1]
 802250a:	0219      	.short	0x0219
 802250c:	051b      	.short	0x051b
 802250e:	4b0e      	ldr	r3, [pc, #56]	; (8022548 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8022510:	8818      	ldrh	r0, [r3, #0]
 8022512:	4770      	bx	lr
 8022514:	4b0c      	ldr	r3, [pc, #48]	; (8022548 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8022516:	8818      	ldrh	r0, [r3, #0]
 8022518:	4240      	negs	r0, r0
 802251a:	4770      	bx	lr
 802251c:	2903      	cmp	r1, #3
 802251e:	d80b      	bhi.n	8022538 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8022520:	a301      	add	r3, pc, #4	; (adr r3, 8022528 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8022522:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022526:	bf00      	nop
 8022528:	0802250f 	.word	0x0802250f
 802252c:	08022541 	.word	0x08022541
 8022530:	08022515 	.word	0x08022515
 8022534:	0802253d 	.word	0x0802253d
 8022538:	2000      	movs	r0, #0
 802253a:	4770      	bx	lr
 802253c:	2001      	movs	r0, #1
 802253e:	4770      	bx	lr
 8022540:	f04f 30ff 	mov.w	r0, #4294967295
 8022544:	4770      	bx	lr
 8022546:	bf00      	nop
 8022548:	2402625e 	.word	0x2402625e

0802254c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 802254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022550:	b097      	sub	sp, #92	; 0x5c
 8022552:	910b      	str	r1, [sp, #44]	; 0x2c
 8022554:	a912      	add	r1, sp, #72	; 0x48
 8022556:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 802255a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 802255e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8022562:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8022566:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 802256a:	e881 000c 	stmia.w	r1, {r2, r3}
 802256e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8022572:	930a      	str	r3, [sp, #40]	; 0x28
 8022574:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8022578:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 802257c:	9311      	str	r3, [sp, #68]	; 0x44
 802257e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8022582:	798d      	ldrb	r5, [r1, #6]
 8022584:	930c      	str	r3, [sp, #48]	; 0x30
 8022586:	7b4b      	ldrb	r3, [r1, #13]
 8022588:	0158      	lsls	r0, r3, #5
 802258a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 802258e:	4328      	orrs	r0, r5
 8022590:	9009      	str	r0, [sp, #36]	; 0x24
 8022592:	f000 817c 	beq.w	802288e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022596:	011b      	lsls	r3, r3, #4
 8022598:	79c8      	ldrb	r0, [r1, #7]
 802259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802259e:	4303      	orrs	r3, r0
 80225a0:	930e      	str	r3, [sp, #56]	; 0x38
 80225a2:	f000 8174 	beq.w	802288e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80225a6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80225aa:	b29b      	uxth	r3, r3
 80225ac:	2f00      	cmp	r7, #0
 80225ae:	f000 8116 	beq.w	80227de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80225b2:	1aff      	subs	r7, r7, r3
 80225b4:	b2bf      	uxth	r7, r7
 80225b6:	043b      	lsls	r3, r7, #16
 80225b8:	d502      	bpl.n	80225c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80225ba:	1bf6      	subs	r6, r6, r7
 80225bc:	2700      	movs	r7, #0
 80225be:	b236      	sxth	r6, r6
 80225c0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80225c4:	a812      	add	r0, sp, #72	; 0x48
 80225c6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80225ca:	428e      	cmp	r6, r1
 80225cc:	b28b      	uxth	r3, r1
 80225ce:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80225d2:	bfbf      	itttt	lt
 80225d4:	18ff      	addlt	r7, r7, r3
 80225d6:	1bbe      	sublt	r6, r7, r6
 80225d8:	b2b7      	uxthlt	r7, r6
 80225da:	460e      	movlt	r6, r1
 80225dc:	8891      	ldrh	r1, [r2, #4]
 80225de:	440b      	add	r3, r1
 80225e0:	4631      	mov	r1, r6
 80225e2:	b21b      	sxth	r3, r3
 80225e4:	9310      	str	r3, [sp, #64]	; 0x40
 80225e6:	88d3      	ldrh	r3, [r2, #6]
 80225e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80225ea:	449a      	add	sl, r3
 80225ec:	fa0f f38a 	sxth.w	r3, sl
 80225f0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80225f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80225f6:	4bb5      	ldr	r3, [pc, #724]	; (80228cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80225f8:	f893 b000 	ldrb.w	fp, [r3]
 80225fc:	f10b 3cff 	add.w	ip, fp, #4294967295
 8022600:	f1dc 0300 	rsbs	r3, ip, #0
 8022604:	eb43 030c 	adc.w	r3, r3, ip
 8022608:	930d      	str	r3, [sp, #52]	; 0x34
 802260a:	464b      	mov	r3, r9
 802260c:	f7fa f874 	bl	801c6f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022610:	4631      	mov	r1, r6
 8022612:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8022616:	464b      	mov	r3, r9
 8022618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802261a:	a812      	add	r0, sp, #72	; 0x48
 802261c:	f7fa f889 	bl	801c732 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022620:	a916      	add	r1, sp, #88	; 0x58
 8022622:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022626:	a815      	add	r0, sp, #84	; 0x54
 8022628:	f7fa f9aa 	bl	801c980 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802262c:	f1b9 0f00 	cmp.w	r9, #0
 8022630:	f040 80d8 	bne.w	80227e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8022634:	f1bb 0f01 	cmp.w	fp, #1
 8022638:	f040 80dc 	bne.w	80227f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 802263c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802263e:	b153      	cbz	r3, 8022656 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8022640:	2508      	movs	r5, #8
 8022642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022644:	fb95 f3f8 	sdiv	r3, r5, r8
 8022648:	1e5d      	subs	r5, r3, #1
 802264a:	4415      	add	r5, r2
 802264c:	fb95 f5f3 	sdiv	r5, r5, r3
 8022650:	fb15 f503 	smulbb	r5, r5, r3
 8022654:	b2ad      	uxth	r5, r5
 8022656:	b907      	cbnz	r7, 802265a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022658:	b16c      	cbz	r4, 8022676 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 802265a:	fb04 7305 	mla	r3, r4, r5, r7
 802265e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022660:	ebaa 0a04 	sub.w	sl, sl, r4
 8022664:	fb08 f303 	mul.w	r3, r8, r3
 8022668:	fa1f fa8a 	uxth.w	sl, sl
 802266c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8022670:	f003 0407 	and.w	r4, r3, #7
 8022674:	9226      	str	r2, [sp, #152]	; 0x98
 8022676:	4649      	mov	r1, r9
 8022678:	980d      	ldr	r0, [sp, #52]	; 0x34
 802267a:	f7ff ff1b 	bl	80224b4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 802267e:	4683      	mov	fp, r0
 8022680:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022682:	f7ff ff3d 	bl	8022500 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8022686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802268a:	4681      	mov	r9, r0
 802268c:	1a9b      	subs	r3, r3, r2
 802268e:	459a      	cmp	sl, r3
 8022690:	bfa8      	it	ge
 8022692:	469a      	movge	sl, r3
 8022694:	f1ba 0f00 	cmp.w	sl, #0
 8022698:	f340 80f9 	ble.w	802288e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802269c:	1bf6      	subs	r6, r6, r7
 802269e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80226a0:	1b9e      	subs	r6, r3, r6
 80226a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226a4:	429e      	cmp	r6, r3
 80226a6:	bfd4      	ite	le
 80226a8:	ebc7 0706 	rsble	r7, r7, r6
 80226ac:	ebc7 0703 	rsbgt	r7, r7, r3
 80226b0:	2f00      	cmp	r7, #0
 80226b2:	f340 80ec 	ble.w	802288e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80226b6:	1bed      	subs	r5, r5, r7
 80226b8:	fb08 f305 	mul.w	r3, r8, r5
 80226bc:	930d      	str	r3, [sp, #52]	; 0x34
 80226be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80226c0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80226c4:	930e      	str	r3, [sp, #56]	; 0x38
 80226c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80226c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80226cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80226ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80226d0:	b2db      	uxtb	r3, r3
 80226d2:	9310      	str	r3, [sp, #64]	; 0x40
 80226d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80226d6:	2b00      	cmp	r3, #0
 80226d8:	f040 80de 	bne.w	8022898 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80226dc:	4b7c      	ldr	r3, [pc, #496]	; (80228d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80226de:	6818      	ldr	r0, [r3, #0]
 80226e0:	6803      	ldr	r3, [r0, #0]
 80226e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226e4:	4798      	blx	r3
 80226e6:	2301      	movs	r3, #1
 80226e8:	4a7a      	ldr	r2, [pc, #488]	; (80228d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80226ea:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80226ee:	fb07 9b1b 	mls	fp, r7, fp, r9
 80226f2:	fa03 f308 	lsl.w	r3, r3, r8
 80226f6:	8811      	ldrh	r1, [r2, #0]
 80226f8:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80226fc:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8022700:	3b01      	subs	r3, #1
 8022702:	fb06 bb07 	mla	fp, r6, r7, fp
 8022706:	b2db      	uxtb	r3, r3
 8022708:	930a      	str	r3, [sp, #40]	; 0x28
 802270a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 802270e:	fb01 2303 	mla	r3, r1, r3, r2
 8022712:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022716:	18c3      	adds	r3, r0, r3
 8022718:	9309      	str	r3, [sp, #36]	; 0x24
 802271a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802271c:	781a      	ldrb	r2, [r3, #0]
 802271e:	4122      	asrs	r2, r4
 8022720:	b2d2      	uxtb	r2, r2
 8022722:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8022726:	f0c0 80d7 	bcc.w	80228d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 802272a:	46be      	mov	lr, r7
 802272c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802272e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022732:	f0c0 80ba 	bcc.w	80228aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8022736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022738:	4013      	ands	r3, r2
 802273a:	d041      	beq.n	80227c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 802273c:	20ff      	movs	r0, #255	; 0xff
 802273e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022740:	fb90 f5f5 	sdiv	r5, r0, r5
 8022744:	436b      	muls	r3, r5
 8022746:	2bfe      	cmp	r3, #254	; 0xfe
 8022748:	dd03      	ble.n	8022752 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 802274a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802274c:	4285      	cmp	r5, r0
 802274e:	f000 80a5 	beq.w	802289c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8022752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022754:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022756:	fb15 f303 	smulbb	r3, r5, r3
 802275a:	b29b      	uxth	r3, r3
 802275c:	1c5d      	adds	r5, r3, #1
 802275e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8022762:	780d      	ldrb	r5, [r1, #0]
 8022764:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022768:	fa1f fc83 	uxth.w	ip, r3
 802276c:	43db      	mvns	r3, r3
 802276e:	fb10 f90c 	smulbb	r9, r0, ip
 8022772:	b2db      	uxtb	r3, r3
 8022774:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022776:	fb05 9503 	mla	r5, r5, r3, r9
 802277a:	b2ad      	uxth	r5, r5
 802277c:	f105 0901 	add.w	r9, r5, #1
 8022780:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8022784:	fb10 f90c 	smulbb	r9, r0, ip
 8022788:	980e      	ldr	r0, [sp, #56]	; 0x38
 802278a:	122d      	asrs	r5, r5, #8
 802278c:	fb10 fc0c 	smulbb	ip, r0, ip
 8022790:	700d      	strb	r5, [r1, #0]
 8022792:	784d      	ldrb	r5, [r1, #1]
 8022794:	fb05 9503 	mla	r5, r5, r3, r9
 8022798:	b2ad      	uxth	r5, r5
 802279a:	f105 0901 	add.w	r9, r5, #1
 802279e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80227a2:	122d      	asrs	r5, r5, #8
 80227a4:	704d      	strb	r5, [r1, #1]
 80227a6:	788d      	ldrb	r5, [r1, #2]
 80227a8:	fb05 cc03 	mla	ip, r5, r3, ip
 80227ac:	fa1f fc8c 	uxth.w	ip, ip
 80227b0:	f10c 0301 	add.w	r3, ip, #1
 80227b4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80227b8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80227bc:	f881 c002 	strb.w	ip, [r1, #2]
 80227c0:	4444      	add	r4, r8
 80227c2:	4431      	add	r1, r6
 80227c4:	b2a4      	uxth	r4, r4
 80227c6:	2c07      	cmp	r4, #7
 80227c8:	bf89      	itett	hi
 80227ca:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80227cc:	fa42 f208 	asrls.w	r2, r2, r8
 80227d0:	2400      	movhi	r4, #0
 80227d2:	785a      	ldrbhi	r2, [r3, #1]
 80227d4:	bf8a      	itet	hi
 80227d6:	3301      	addhi	r3, #1
 80227d8:	b2d2      	uxtbls	r2, r2
 80227da:	9326      	strhi	r3, [sp, #152]	; 0x98
 80227dc:	e7a7      	b.n	802272e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80227de:	441e      	add	r6, r3
 80227e0:	b236      	sxth	r6, r6
 80227e2:	e6ed      	b.n	80225c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80227e4:	f1b9 0f01 	cmp.w	r9, #1
 80227e8:	f47f af28 	bne.w	802263c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80227ec:	f1bb 0f01 	cmp.w	fp, #1
 80227f0:	f47f af24 	bne.w	802263c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80227f4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80228d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80227f8:	f8db 0000 	ldr.w	r0, [fp]
 80227fc:	6803      	ldr	r3, [r0, #0]
 80227fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022800:	4798      	blx	r3
 8022802:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8022806:	465a      	mov	r2, fp
 8022808:	d006      	beq.n	8022818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 802280a:	f1b8 0f04 	cmp.w	r8, #4
 802280e:	d141      	bne.n	8022894 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8022810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022812:	3300      	adds	r3, #0
 8022814:	bf18      	it	ne
 8022816:	2301      	movne	r3, #1
 8022818:	0580      	lsls	r0, r0, #22
 802281a:	d566      	bpl.n	80228ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 802281c:	f1b8 0f08 	cmp.w	r8, #8
 8022820:	d163      	bne.n	80228ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022822:	2b00      	cmp	r3, #0
 8022824:	bf0c      	ite	eq
 8022826:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802282a:	f44f 7180 	movne.w	r1, #256	; 0x100
 802282e:	2f00      	cmp	r7, #0
 8022830:	f47f af04 	bne.w	802263c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022834:	2c00      	cmp	r4, #0
 8022836:	f47f af01 	bne.w	802263c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802283a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802283c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802283e:	18f3      	adds	r3, r6, r3
 8022840:	4283      	cmp	r3, r0
 8022842:	f73f aefb 	bgt.w	802263c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022846:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802284a:	4403      	add	r3, r0
 802284c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802284e:	4283      	cmp	r3, r0
 8022850:	f73f aef4 	bgt.w	802263c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022854:	f1b8 0f08 	cmp.w	r8, #8
 8022858:	6810      	ldr	r0, [r2, #0]
 802285a:	f04f 0600 	mov.w	r6, #0
 802285e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8022862:	bf18      	it	ne
 8022864:	3501      	addne	r5, #1
 8022866:	6804      	ldr	r4, [r0, #0]
 8022868:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 802286c:	bf18      	it	ne
 802286e:	f025 0501 	bicne.w	r5, r5, #1
 8022872:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8022876:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022878:	bf18      	it	ne
 802287a:	b2ad      	uxthne	r5, r5
 802287c:	9104      	str	r1, [sp, #16]
 802287e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022880:	e9cd 5a00 	strd	r5, sl, [sp]
 8022884:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8022888:	9926      	ldr	r1, [sp, #152]	; 0x98
 802288a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 802288c:	47a0      	blx	r4
 802288e:	b017      	add	sp, #92	; 0x5c
 8022890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022894:	2300      	movs	r3, #0
 8022896:	e7bf      	b.n	8022818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8022898:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802289a:	e724      	b.n	80226e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 802289c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802289e:	700b      	strb	r3, [r1, #0]
 80228a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80228a2:	704b      	strb	r3, [r1, #1]
 80228a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80228a6:	708b      	strb	r3, [r1, #2]
 80228a8:	e78a      	b.n	80227c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80228aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80228ac:	b153      	cbz	r3, 80228c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80228ae:	441c      	add	r4, r3
 80228b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80228b2:	b2a4      	uxth	r4, r4
 80228b4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80228b8:	f004 0407 	and.w	r4, r4, #7
 80228bc:	781a      	ldrb	r2, [r3, #0]
 80228be:	9326      	str	r3, [sp, #152]	; 0x98
 80228c0:	4122      	asrs	r2, r4
 80228c2:	b2d2      	uxtb	r2, r2
 80228c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228c6:	445b      	add	r3, fp
 80228c8:	9309      	str	r3, [sp, #36]	; 0x24
 80228ca:	e72a      	b.n	8022722 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80228cc:	2402625c 	.word	0x2402625c
 80228d0:	24026264 	.word	0x24026264
 80228d4:	2402625e 	.word	0x2402625e
 80228d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80228da:	2b00      	cmp	r3, #0
 80228dc:	d1d7      	bne.n	802288e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80228de:	4b06      	ldr	r3, [pc, #24]	; (80228f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80228e0:	6818      	ldr	r0, [r3, #0]
 80228e2:	6803      	ldr	r3, [r0, #0]
 80228e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228e6:	4798      	blx	r3
 80228e8:	e7d1      	b.n	802288e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80228ea:	2b00      	cmp	r3, #0
 80228ec:	f43f aea6 	beq.w	802263c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80228f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80228f4:	e79b      	b.n	802282e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80228f6:	bf00      	nop
 80228f8:	24026264 	.word	0x24026264

080228fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80228fc:	b538      	push	{r3, r4, r5, lr}
 80228fe:	4c15      	ldr	r4, [pc, #84]	; (8022954 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022900:	4605      	mov	r5, r0
 8022902:	7823      	ldrb	r3, [r4, #0]
 8022904:	f3bf 8f5b 	dmb	ish
 8022908:	07da      	lsls	r2, r3, #31
 802290a:	d40b      	bmi.n	8022924 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802290c:	4620      	mov	r0, r4
 802290e:	f005 f890 	bl	8027a32 <__cxa_guard_acquire>
 8022912:	b138      	cbz	r0, 8022924 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022914:	4620      	mov	r0, r4
 8022916:	f005 f898 	bl	8027a4a <__cxa_guard_release>
 802291a:	4a0f      	ldr	r2, [pc, #60]	; (8022958 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802291c:	490f      	ldr	r1, [pc, #60]	; (802295c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802291e:	4810      	ldr	r0, [pc, #64]	; (8022960 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022920:	f005 f880 	bl	8027a24 <__aeabi_atexit>
 8022924:	4c0f      	ldr	r4, [pc, #60]	; (8022964 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8022926:	7823      	ldrb	r3, [r4, #0]
 8022928:	f3bf 8f5b 	dmb	ish
 802292c:	07db      	lsls	r3, r3, #31
 802292e:	d40b      	bmi.n	8022948 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022930:	4620      	mov	r0, r4
 8022932:	f005 f87e 	bl	8027a32 <__cxa_guard_acquire>
 8022936:	b138      	cbz	r0, 8022948 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022938:	4620      	mov	r0, r4
 802293a:	f005 f886 	bl	8027a4a <__cxa_guard_release>
 802293e:	4a06      	ldr	r2, [pc, #24]	; (8022958 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022940:	4909      	ldr	r1, [pc, #36]	; (8022968 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022942:	480a      	ldr	r0, [pc, #40]	; (802296c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022944:	f005 f86e 	bl	8027a24 <__aeabi_atexit>
 8022948:	4b05      	ldr	r3, [pc, #20]	; (8022960 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802294a:	612b      	str	r3, [r5, #16]
 802294c:	4b07      	ldr	r3, [pc, #28]	; (802296c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802294e:	616b      	str	r3, [r5, #20]
 8022950:	bd38      	pop	{r3, r4, r5, pc}
 8022952:	bf00      	nop
 8022954:	24026330 	.word	0x24026330
 8022958:	24000000 	.word	0x24000000
 802295c:	080214d3 	.word	0x080214d3
 8022960:	240000ac 	.word	0x240000ac
 8022964:	24026334 	.word	0x24026334
 8022968:	080214d1 	.word	0x080214d1
 802296c:	240000b0 	.word	0x240000b0

08022970 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022970:	b538      	push	{r3, r4, r5, lr}
 8022972:	4c15      	ldr	r4, [pc, #84]	; (80229c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022974:	4605      	mov	r5, r0
 8022976:	7823      	ldrb	r3, [r4, #0]
 8022978:	f3bf 8f5b 	dmb	ish
 802297c:	07da      	lsls	r2, r3, #31
 802297e:	d40b      	bmi.n	8022998 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022980:	4620      	mov	r0, r4
 8022982:	f005 f856 	bl	8027a32 <__cxa_guard_acquire>
 8022986:	b138      	cbz	r0, 8022998 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022988:	4620      	mov	r0, r4
 802298a:	f005 f85e 	bl	8027a4a <__cxa_guard_release>
 802298e:	4a0f      	ldr	r2, [pc, #60]	; (80229cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022990:	490f      	ldr	r1, [pc, #60]	; (80229d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8022992:	4810      	ldr	r0, [pc, #64]	; (80229d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022994:	f005 f846 	bl	8027a24 <__aeabi_atexit>
 8022998:	4c0f      	ldr	r4, [pc, #60]	; (80229d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802299a:	7823      	ldrb	r3, [r4, #0]
 802299c:	f3bf 8f5b 	dmb	ish
 80229a0:	07db      	lsls	r3, r3, #31
 80229a2:	d40b      	bmi.n	80229bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80229a4:	4620      	mov	r0, r4
 80229a6:	f005 f844 	bl	8027a32 <__cxa_guard_acquire>
 80229aa:	b138      	cbz	r0, 80229bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80229ac:	4620      	mov	r0, r4
 80229ae:	f005 f84c 	bl	8027a4a <__cxa_guard_release>
 80229b2:	4a06      	ldr	r2, [pc, #24]	; (80229cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80229b4:	4909      	ldr	r1, [pc, #36]	; (80229dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80229b6:	480a      	ldr	r0, [pc, #40]	; (80229e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80229b8:	f005 f834 	bl	8027a24 <__aeabi_atexit>
 80229bc:	4b05      	ldr	r3, [pc, #20]	; (80229d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80229be:	60ab      	str	r3, [r5, #8]
 80229c0:	4b07      	ldr	r3, [pc, #28]	; (80229e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80229c2:	60eb      	str	r3, [r5, #12]
 80229c4:	bd38      	pop	{r3, r4, r5, pc}
 80229c6:	bf00      	nop
 80229c8:	24026310 	.word	0x24026310
 80229cc:	24000000 	.word	0x24000000
 80229d0:	080214d7 	.word	0x080214d7
 80229d4:	2400008c 	.word	0x2400008c
 80229d8:	24026314 	.word	0x24026314
 80229dc:	080214d5 	.word	0x080214d5
 80229e0:	24000090 	.word	0x24000090

080229e4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80229e4:	b510      	push	{r4, lr}
 80229e6:	4604      	mov	r4, r0
 80229e8:	f7ff ff88 	bl	80228fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80229ec:	4620      	mov	r0, r4
 80229ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229f2:	f7ff bfbd 	b.w	8022970 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080229f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80229f8:	b538      	push	{r3, r4, r5, lr}
 80229fa:	4c15      	ldr	r4, [pc, #84]	; (8022a50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80229fc:	4605      	mov	r5, r0
 80229fe:	7823      	ldrb	r3, [r4, #0]
 8022a00:	f3bf 8f5b 	dmb	ish
 8022a04:	07da      	lsls	r2, r3, #31
 8022a06:	d40b      	bmi.n	8022a20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022a08:	4620      	mov	r0, r4
 8022a0a:	f005 f812 	bl	8027a32 <__cxa_guard_acquire>
 8022a0e:	b138      	cbz	r0, 8022a20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022a10:	4620      	mov	r0, r4
 8022a12:	f005 f81a 	bl	8027a4a <__cxa_guard_release>
 8022a16:	4a0f      	ldr	r2, [pc, #60]	; (8022a54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022a18:	490f      	ldr	r1, [pc, #60]	; (8022a58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8022a1a:	4810      	ldr	r0, [pc, #64]	; (8022a5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022a1c:	f005 f802 	bl	8027a24 <__aeabi_atexit>
 8022a20:	4c0f      	ldr	r4, [pc, #60]	; (8022a60 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8022a22:	7823      	ldrb	r3, [r4, #0]
 8022a24:	f3bf 8f5b 	dmb	ish
 8022a28:	07db      	lsls	r3, r3, #31
 8022a2a:	d40b      	bmi.n	8022a44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022a2c:	4620      	mov	r0, r4
 8022a2e:	f005 f800 	bl	8027a32 <__cxa_guard_acquire>
 8022a32:	b138      	cbz	r0, 8022a44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022a34:	4620      	mov	r0, r4
 8022a36:	f005 f808 	bl	8027a4a <__cxa_guard_release>
 8022a3a:	4a06      	ldr	r2, [pc, #24]	; (8022a54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022a3c:	4909      	ldr	r1, [pc, #36]	; (8022a64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8022a3e:	480a      	ldr	r0, [pc, #40]	; (8022a68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022a40:	f004 fff0 	bl	8027a24 <__aeabi_atexit>
 8022a44:	4b05      	ldr	r3, [pc, #20]	; (8022a5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022a46:	622b      	str	r3, [r5, #32]
 8022a48:	4b07      	ldr	r3, [pc, #28]	; (8022a68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022a4a:	626b      	str	r3, [r5, #36]	; 0x24
 8022a4c:	bd38      	pop	{r3, r4, r5, pc}
 8022a4e:	bf00      	nop
 8022a50:	24026338 	.word	0x24026338
 8022a54:	24000000 	.word	0x24000000
 8022a58:	080214cb 	.word	0x080214cb
 8022a5c:	240000b4 	.word	0x240000b4
 8022a60:	2402633c 	.word	0x2402633c
 8022a64:	080214c9 	.word	0x080214c9
 8022a68:	240000b8 	.word	0x240000b8

08022a6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022a6c:	b538      	push	{r3, r4, r5, lr}
 8022a6e:	4c15      	ldr	r4, [pc, #84]	; (8022ac4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022a70:	4605      	mov	r5, r0
 8022a72:	7823      	ldrb	r3, [r4, #0]
 8022a74:	f3bf 8f5b 	dmb	ish
 8022a78:	07da      	lsls	r2, r3, #31
 8022a7a:	d40b      	bmi.n	8022a94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022a7c:	4620      	mov	r0, r4
 8022a7e:	f004 ffd8 	bl	8027a32 <__cxa_guard_acquire>
 8022a82:	b138      	cbz	r0, 8022a94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022a84:	4620      	mov	r0, r4
 8022a86:	f004 ffe0 	bl	8027a4a <__cxa_guard_release>
 8022a8a:	4a0f      	ldr	r2, [pc, #60]	; (8022ac8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022a8c:	490f      	ldr	r1, [pc, #60]	; (8022acc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8022a8e:	4810      	ldr	r0, [pc, #64]	; (8022ad0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022a90:	f004 ffc8 	bl	8027a24 <__aeabi_atexit>
 8022a94:	4c0f      	ldr	r4, [pc, #60]	; (8022ad4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8022a96:	7823      	ldrb	r3, [r4, #0]
 8022a98:	f3bf 8f5b 	dmb	ish
 8022a9c:	07db      	lsls	r3, r3, #31
 8022a9e:	d40b      	bmi.n	8022ab8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022aa0:	4620      	mov	r0, r4
 8022aa2:	f004 ffc6 	bl	8027a32 <__cxa_guard_acquire>
 8022aa6:	b138      	cbz	r0, 8022ab8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022aa8:	4620      	mov	r0, r4
 8022aaa:	f004 ffce 	bl	8027a4a <__cxa_guard_release>
 8022aae:	4a06      	ldr	r2, [pc, #24]	; (8022ac8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022ab0:	4909      	ldr	r1, [pc, #36]	; (8022ad8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8022ab2:	480a      	ldr	r0, [pc, #40]	; (8022adc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022ab4:	f004 ffb6 	bl	8027a24 <__aeabi_atexit>
 8022ab8:	4b05      	ldr	r3, [pc, #20]	; (8022ad0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022aba:	61ab      	str	r3, [r5, #24]
 8022abc:	4b07      	ldr	r3, [pc, #28]	; (8022adc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022abe:	61eb      	str	r3, [r5, #28]
 8022ac0:	bd38      	pop	{r3, r4, r5, pc}
 8022ac2:	bf00      	nop
 8022ac4:	24026318 	.word	0x24026318
 8022ac8:	24000000 	.word	0x24000000
 8022acc:	080214cf 	.word	0x080214cf
 8022ad0:	24000094 	.word	0x24000094
 8022ad4:	2402631c 	.word	0x2402631c
 8022ad8:	080214cd 	.word	0x080214cd
 8022adc:	24000098 	.word	0x24000098

08022ae0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022ae0:	b510      	push	{r4, lr}
 8022ae2:	4604      	mov	r4, r0
 8022ae4:	f7ff ff88 	bl	80229f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022ae8:	4620      	mov	r0, r4
 8022aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022aee:	f7ff bfbd 	b.w	8022a6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022af4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8022af4:	b538      	push	{r3, r4, r5, lr}
 8022af6:	4c15      	ldr	r4, [pc, #84]	; (8022b4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8022af8:	4605      	mov	r5, r0
 8022afa:	7823      	ldrb	r3, [r4, #0]
 8022afc:	f3bf 8f5b 	dmb	ish
 8022b00:	07da      	lsls	r2, r3, #31
 8022b02:	d40b      	bmi.n	8022b1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022b04:	4620      	mov	r0, r4
 8022b06:	f004 ff94 	bl	8027a32 <__cxa_guard_acquire>
 8022b0a:	b138      	cbz	r0, 8022b1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022b0c:	4620      	mov	r0, r4
 8022b0e:	f004 ff9c 	bl	8027a4a <__cxa_guard_release>
 8022b12:	4a0f      	ldr	r2, [pc, #60]	; (8022b50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8022b14:	490f      	ldr	r1, [pc, #60]	; (8022b54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8022b16:	4810      	ldr	r0, [pc, #64]	; (8022b58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8022b18:	f004 ff84 	bl	8027a24 <__aeabi_atexit>
 8022b1c:	4c0f      	ldr	r4, [pc, #60]	; (8022b5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8022b1e:	7823      	ldrb	r3, [r4, #0]
 8022b20:	f3bf 8f5b 	dmb	ish
 8022b24:	07db      	lsls	r3, r3, #31
 8022b26:	d40b      	bmi.n	8022b40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022b28:	4620      	mov	r0, r4
 8022b2a:	f004 ff82 	bl	8027a32 <__cxa_guard_acquire>
 8022b2e:	b138      	cbz	r0, 8022b40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022b30:	4620      	mov	r0, r4
 8022b32:	f004 ff8a 	bl	8027a4a <__cxa_guard_release>
 8022b36:	4a06      	ldr	r2, [pc, #24]	; (8022b50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8022b38:	4909      	ldr	r1, [pc, #36]	; (8022b60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8022b3a:	480a      	ldr	r0, [pc, #40]	; (8022b64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022b3c:	f004 ff72 	bl	8027a24 <__aeabi_atexit>
 8022b40:	4b05      	ldr	r3, [pc, #20]	; (8022b58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8022b42:	632b      	str	r3, [r5, #48]	; 0x30
 8022b44:	4b07      	ldr	r3, [pc, #28]	; (8022b64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022b46:	636b      	str	r3, [r5, #52]	; 0x34
 8022b48:	bd38      	pop	{r3, r4, r5, pc}
 8022b4a:	bf00      	nop
 8022b4c:	24026320 	.word	0x24026320
 8022b50:	24000000 	.word	0x24000000
 8022b54:	080214c3 	.word	0x080214c3
 8022b58:	2400009c 	.word	0x2400009c
 8022b5c:	24026324 	.word	0x24026324
 8022b60:	080214c1 	.word	0x080214c1
 8022b64:	240000a0 	.word	0x240000a0

08022b68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8022b68:	b538      	push	{r3, r4, r5, lr}
 8022b6a:	4c15      	ldr	r4, [pc, #84]	; (8022bc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8022b6c:	4605      	mov	r5, r0
 8022b6e:	7823      	ldrb	r3, [r4, #0]
 8022b70:	f3bf 8f5b 	dmb	ish
 8022b74:	07da      	lsls	r2, r3, #31
 8022b76:	d40b      	bmi.n	8022b90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022b78:	4620      	mov	r0, r4
 8022b7a:	f004 ff5a 	bl	8027a32 <__cxa_guard_acquire>
 8022b7e:	b138      	cbz	r0, 8022b90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022b80:	4620      	mov	r0, r4
 8022b82:	f004 ff62 	bl	8027a4a <__cxa_guard_release>
 8022b86:	4a0f      	ldr	r2, [pc, #60]	; (8022bc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022b88:	490f      	ldr	r1, [pc, #60]	; (8022bc8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8022b8a:	4810      	ldr	r0, [pc, #64]	; (8022bcc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8022b8c:	f004 ff4a 	bl	8027a24 <__aeabi_atexit>
 8022b90:	4c0f      	ldr	r4, [pc, #60]	; (8022bd0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8022b92:	7823      	ldrb	r3, [r4, #0]
 8022b94:	f3bf 8f5b 	dmb	ish
 8022b98:	07db      	lsls	r3, r3, #31
 8022b9a:	d40b      	bmi.n	8022bb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8022b9c:	4620      	mov	r0, r4
 8022b9e:	f004 ff48 	bl	8027a32 <__cxa_guard_acquire>
 8022ba2:	b138      	cbz	r0, 8022bb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8022ba4:	4620      	mov	r0, r4
 8022ba6:	f004 ff50 	bl	8027a4a <__cxa_guard_release>
 8022baa:	4a06      	ldr	r2, [pc, #24]	; (8022bc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022bac:	4909      	ldr	r1, [pc, #36]	; (8022bd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8022bae:	480a      	ldr	r0, [pc, #40]	; (8022bd8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022bb0:	f004 ff38 	bl	8027a24 <__aeabi_atexit>
 8022bb4:	4b05      	ldr	r3, [pc, #20]	; (8022bcc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8022bb6:	62ab      	str	r3, [r5, #40]	; 0x28
 8022bb8:	4b07      	ldr	r3, [pc, #28]	; (8022bd8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022bba:	62eb      	str	r3, [r5, #44]	; 0x2c
 8022bbc:	bd38      	pop	{r3, r4, r5, pc}
 8022bbe:	bf00      	nop
 8022bc0:	240262f8 	.word	0x240262f8
 8022bc4:	24000000 	.word	0x24000000
 8022bc8:	080214c7 	.word	0x080214c7
 8022bcc:	24000074 	.word	0x24000074
 8022bd0:	240262fc 	.word	0x240262fc
 8022bd4:	080214c5 	.word	0x080214c5
 8022bd8:	24000078 	.word	0x24000078

08022bdc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8022bdc:	b510      	push	{r4, lr}
 8022bde:	4604      	mov	r4, r0
 8022be0:	f7ff ff88 	bl	8022af4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8022be4:	4620      	mov	r0, r4
 8022be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022bea:	f7ff bfbd 	b.w	8022b68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08022bf0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022bf0:	b538      	push	{r3, r4, r5, lr}
 8022bf2:	4c15      	ldr	r4, [pc, #84]	; (8022c48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022bf4:	4605      	mov	r5, r0
 8022bf6:	7823      	ldrb	r3, [r4, #0]
 8022bf8:	f3bf 8f5b 	dmb	ish
 8022bfc:	07da      	lsls	r2, r3, #31
 8022bfe:	d40b      	bmi.n	8022c18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022c00:	4620      	mov	r0, r4
 8022c02:	f004 ff16 	bl	8027a32 <__cxa_guard_acquire>
 8022c06:	b138      	cbz	r0, 8022c18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022c08:	4620      	mov	r0, r4
 8022c0a:	f004 ff1e 	bl	8027a4a <__cxa_guard_release>
 8022c0e:	4a0f      	ldr	r2, [pc, #60]	; (8022c4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022c10:	490f      	ldr	r1, [pc, #60]	; (8022c50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8022c12:	4810      	ldr	r0, [pc, #64]	; (8022c54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022c14:	f004 ff06 	bl	8027a24 <__aeabi_atexit>
 8022c18:	4c0f      	ldr	r4, [pc, #60]	; (8022c58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8022c1a:	7823      	ldrb	r3, [r4, #0]
 8022c1c:	f3bf 8f5b 	dmb	ish
 8022c20:	07db      	lsls	r3, r3, #31
 8022c22:	d40b      	bmi.n	8022c3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022c24:	4620      	mov	r0, r4
 8022c26:	f004 ff04 	bl	8027a32 <__cxa_guard_acquire>
 8022c2a:	b138      	cbz	r0, 8022c3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022c2c:	4620      	mov	r0, r4
 8022c2e:	f004 ff0c 	bl	8027a4a <__cxa_guard_release>
 8022c32:	4a06      	ldr	r2, [pc, #24]	; (8022c4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022c34:	4909      	ldr	r1, [pc, #36]	; (8022c5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8022c36:	480a      	ldr	r0, [pc, #40]	; (8022c60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022c38:	f004 fef4 	bl	8027a24 <__aeabi_atexit>
 8022c3c:	4b05      	ldr	r3, [pc, #20]	; (8022c54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022c3e:	642b      	str	r3, [r5, #64]	; 0x40
 8022c40:	4b07      	ldr	r3, [pc, #28]	; (8022c60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022c42:	646b      	str	r3, [r5, #68]	; 0x44
 8022c44:	bd38      	pop	{r3, r4, r5, pc}
 8022c46:	bf00      	nop
 8022c48:	24026328 	.word	0x24026328
 8022c4c:	24000000 	.word	0x24000000
 8022c50:	080214bb 	.word	0x080214bb
 8022c54:	240000a4 	.word	0x240000a4
 8022c58:	2402632c 	.word	0x2402632c
 8022c5c:	080214b9 	.word	0x080214b9
 8022c60:	240000a8 	.word	0x240000a8

08022c64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022c64:	b538      	push	{r3, r4, r5, lr}
 8022c66:	4c15      	ldr	r4, [pc, #84]	; (8022cbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8022c68:	4605      	mov	r5, r0
 8022c6a:	7823      	ldrb	r3, [r4, #0]
 8022c6c:	f3bf 8f5b 	dmb	ish
 8022c70:	07da      	lsls	r2, r3, #31
 8022c72:	d40b      	bmi.n	8022c8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022c74:	4620      	mov	r0, r4
 8022c76:	f004 fedc 	bl	8027a32 <__cxa_guard_acquire>
 8022c7a:	b138      	cbz	r0, 8022c8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022c7c:	4620      	mov	r0, r4
 8022c7e:	f004 fee4 	bl	8027a4a <__cxa_guard_release>
 8022c82:	4a0f      	ldr	r2, [pc, #60]	; (8022cc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022c84:	490f      	ldr	r1, [pc, #60]	; (8022cc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8022c86:	4810      	ldr	r0, [pc, #64]	; (8022cc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022c88:	f004 fecc 	bl	8027a24 <__aeabi_atexit>
 8022c8c:	4c0f      	ldr	r4, [pc, #60]	; (8022ccc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8022c8e:	7823      	ldrb	r3, [r4, #0]
 8022c90:	f3bf 8f5b 	dmb	ish
 8022c94:	07db      	lsls	r3, r3, #31
 8022c96:	d40b      	bmi.n	8022cb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022c98:	4620      	mov	r0, r4
 8022c9a:	f004 feca 	bl	8027a32 <__cxa_guard_acquire>
 8022c9e:	b138      	cbz	r0, 8022cb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022ca0:	4620      	mov	r0, r4
 8022ca2:	f004 fed2 	bl	8027a4a <__cxa_guard_release>
 8022ca6:	4a06      	ldr	r2, [pc, #24]	; (8022cc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022ca8:	4909      	ldr	r1, [pc, #36]	; (8022cd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8022caa:	480a      	ldr	r0, [pc, #40]	; (8022cd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022cac:	f004 feba 	bl	8027a24 <__aeabi_atexit>
 8022cb0:	4b05      	ldr	r3, [pc, #20]	; (8022cc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022cb2:	63ab      	str	r3, [r5, #56]	; 0x38
 8022cb4:	4b07      	ldr	r3, [pc, #28]	; (8022cd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022cb6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022cb8:	bd38      	pop	{r3, r4, r5, pc}
 8022cba:	bf00      	nop
 8022cbc:	24026308 	.word	0x24026308
 8022cc0:	24000000 	.word	0x24000000
 8022cc4:	080214bf 	.word	0x080214bf
 8022cc8:	24000084 	.word	0x24000084
 8022ccc:	2402630c 	.word	0x2402630c
 8022cd0:	080214bd 	.word	0x080214bd
 8022cd4:	24000088 	.word	0x24000088

08022cd8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8022cd8:	b510      	push	{r4, lr}
 8022cda:	4604      	mov	r4, r0
 8022cdc:	f7ff ff88 	bl	8022bf0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022ce0:	4620      	mov	r0, r4
 8022ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022ce6:	f7ff bfbd 	b.w	8022c64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08022cec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8022cec:	b538      	push	{r3, r4, r5, lr}
 8022cee:	4c15      	ldr	r4, [pc, #84]	; (8022d44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022cf0:	4605      	mov	r5, r0
 8022cf2:	7823      	ldrb	r3, [r4, #0]
 8022cf4:	f3bf 8f5b 	dmb	ish
 8022cf8:	07da      	lsls	r2, r3, #31
 8022cfa:	d40b      	bmi.n	8022d14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022cfc:	4620      	mov	r0, r4
 8022cfe:	f004 fe98 	bl	8027a32 <__cxa_guard_acquire>
 8022d02:	b138      	cbz	r0, 8022d14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022d04:	4620      	mov	r0, r4
 8022d06:	f004 fea0 	bl	8027a4a <__cxa_guard_release>
 8022d0a:	4a0f      	ldr	r2, [pc, #60]	; (8022d48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022d0c:	490f      	ldr	r1, [pc, #60]	; (8022d4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8022d0e:	4810      	ldr	r0, [pc, #64]	; (8022d50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022d10:	f004 fe88 	bl	8027a24 <__aeabi_atexit>
 8022d14:	4c0f      	ldr	r4, [pc, #60]	; (8022d54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022d16:	7823      	ldrb	r3, [r4, #0]
 8022d18:	f3bf 8f5b 	dmb	ish
 8022d1c:	07db      	lsls	r3, r3, #31
 8022d1e:	d40b      	bmi.n	8022d38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022d20:	4620      	mov	r0, r4
 8022d22:	f004 fe86 	bl	8027a32 <__cxa_guard_acquire>
 8022d26:	b138      	cbz	r0, 8022d38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022d28:	4620      	mov	r0, r4
 8022d2a:	f004 fe8e 	bl	8027a4a <__cxa_guard_release>
 8022d2e:	4a06      	ldr	r2, [pc, #24]	; (8022d48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022d30:	4909      	ldr	r1, [pc, #36]	; (8022d58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022d32:	480a      	ldr	r0, [pc, #40]	; (8022d5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022d34:	f004 fe76 	bl	8027a24 <__aeabi_atexit>
 8022d38:	4b05      	ldr	r3, [pc, #20]	; (8022d50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022d3a:	652b      	str	r3, [r5, #80]	; 0x50
 8022d3c:	4b07      	ldr	r3, [pc, #28]	; (8022d5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022d3e:	656b      	str	r3, [r5, #84]	; 0x54
 8022d40:	bd38      	pop	{r3, r4, r5, pc}
 8022d42:	bf00      	nop
 8022d44:	24026300 	.word	0x24026300
 8022d48:	24000000 	.word	0x24000000
 8022d4c:	080214b3 	.word	0x080214b3
 8022d50:	2400007c 	.word	0x2400007c
 8022d54:	24026304 	.word	0x24026304
 8022d58:	080214b1 	.word	0x080214b1
 8022d5c:	24000080 	.word	0x24000080

08022d60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022d60:	b538      	push	{r3, r4, r5, lr}
 8022d62:	4c15      	ldr	r4, [pc, #84]	; (8022db8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022d64:	4605      	mov	r5, r0
 8022d66:	7823      	ldrb	r3, [r4, #0]
 8022d68:	f3bf 8f5b 	dmb	ish
 8022d6c:	07da      	lsls	r2, r3, #31
 8022d6e:	d40b      	bmi.n	8022d88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022d70:	4620      	mov	r0, r4
 8022d72:	f004 fe5e 	bl	8027a32 <__cxa_guard_acquire>
 8022d76:	b138      	cbz	r0, 8022d88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022d78:	4620      	mov	r0, r4
 8022d7a:	f004 fe66 	bl	8027a4a <__cxa_guard_release>
 8022d7e:	4a0f      	ldr	r2, [pc, #60]	; (8022dbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022d80:	490f      	ldr	r1, [pc, #60]	; (8022dc0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022d82:	4810      	ldr	r0, [pc, #64]	; (8022dc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022d84:	f004 fe4e 	bl	8027a24 <__aeabi_atexit>
 8022d88:	4c0f      	ldr	r4, [pc, #60]	; (8022dc8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022d8a:	7823      	ldrb	r3, [r4, #0]
 8022d8c:	f3bf 8f5b 	dmb	ish
 8022d90:	07db      	lsls	r3, r3, #31
 8022d92:	d40b      	bmi.n	8022dac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022d94:	4620      	mov	r0, r4
 8022d96:	f004 fe4c 	bl	8027a32 <__cxa_guard_acquire>
 8022d9a:	b138      	cbz	r0, 8022dac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022d9c:	4620      	mov	r0, r4
 8022d9e:	f004 fe54 	bl	8027a4a <__cxa_guard_release>
 8022da2:	4a06      	ldr	r2, [pc, #24]	; (8022dbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022da4:	4909      	ldr	r1, [pc, #36]	; (8022dcc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022da6:	480a      	ldr	r0, [pc, #40]	; (8022dd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022da8:	f004 fe3c 	bl	8027a24 <__aeabi_atexit>
 8022dac:	4b05      	ldr	r3, [pc, #20]	; (8022dc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022dae:	64ab      	str	r3, [r5, #72]	; 0x48
 8022db0:	4b07      	ldr	r3, [pc, #28]	; (8022dd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022db2:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022db4:	bd38      	pop	{r3, r4, r5, pc}
 8022db6:	bf00      	nop
 8022db8:	240262f0 	.word	0x240262f0
 8022dbc:	24000000 	.word	0x24000000
 8022dc0:	080214b7 	.word	0x080214b7
 8022dc4:	2400006c 	.word	0x2400006c
 8022dc8:	240262f4 	.word	0x240262f4
 8022dcc:	080214b5 	.word	0x080214b5
 8022dd0:	24000070 	.word	0x24000070

08022dd4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8022dd4:	b510      	push	{r4, lr}
 8022dd6:	4604      	mov	r4, r0
 8022dd8:	f7ff ff88 	bl	8022cec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022ddc:	4620      	mov	r0, r4
 8022dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022de2:	f7ff bfbd 	b.w	8022d60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08022de6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8022de6:	b510      	push	{r4, lr}
 8022de8:	4604      	mov	r4, r0
 8022dea:	f7ff fff3 	bl	8022dd4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8022dee:	4620      	mov	r0, r4
 8022df0:	f7ff ff72 	bl	8022cd8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8022df4:	4620      	mov	r0, r4
 8022df6:	f7ff fe73 	bl	8022ae0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8022dfa:	4620      	mov	r0, r4
 8022dfc:	f7ff fdf2 	bl	80229e4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8022e00:	4620      	mov	r0, r4
 8022e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022e06:	f7ff bee9 	b.w	8022bdc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08022e0a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8022e0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e0e:	b087      	sub	sp, #28
 8022e10:	788d      	ldrb	r5, [r1, #2]
 8022e12:	f891 9000 	ldrb.w	r9, [r1]
 8022e16:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8022e1a:	9501      	str	r5, [sp, #4]
 8022e1c:	784d      	ldrb	r5, [r1, #1]
 8022e1e:	9203      	str	r2, [sp, #12]
 8022e20:	9502      	str	r5, [sp, #8]
 8022e22:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8022e26:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8022e2a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8022e2e:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8022e32:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8022e36:	fb06 0708 	mla	r7, r6, r8, r0
 8022e3a:	2e00      	cmp	r6, #0
 8022e3c:	eb02 0a07 	add.w	sl, r2, r7
 8022e40:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8022e44:	9d01      	ldr	r5, [sp, #4]
 8022e46:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8022e4a:	ea45 0509 	orr.w	r5, r5, r9
 8022e4e:	9505      	str	r5, [sp, #20]
 8022e50:	f2c0 80b2 	blt.w	8022fb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8022e54:	45b3      	cmp	fp, r6
 8022e56:	f340 80af 	ble.w	8022fb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8022e5a:	2800      	cmp	r0, #0
 8022e5c:	f2c0 80aa 	blt.w	8022fb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8022e60:	4580      	cmp	r8, r0
 8022e62:	f340 80a7 	ble.w	8022fb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8022e66:	9a03      	ldr	r2, [sp, #12]
 8022e68:	5dd7      	ldrb	r7, [r2, r7]
 8022e6a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022e6e:	441f      	add	r7, r3
 8022e70:	1c42      	adds	r2, r0, #1
 8022e72:	f100 80a4 	bmi.w	8022fbe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022e76:	4590      	cmp	r8, r2
 8022e78:	f340 80a1 	ble.w	8022fbe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022e7c:	2c00      	cmp	r4, #0
 8022e7e:	f000 809e 	beq.w	8022fbe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022e82:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8022e86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022e8a:	441d      	add	r5, r3
 8022e8c:	3601      	adds	r6, #1
 8022e8e:	f100 809a 	bmi.w	8022fc6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022e92:	45b3      	cmp	fp, r6
 8022e94:	f340 8097 	ble.w	8022fc6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022e98:	f1bc 0f00 	cmp.w	ip, #0
 8022e9c:	f000 8093 	beq.w	8022fc6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022ea0:	2800      	cmp	r0, #0
 8022ea2:	f2c0 808e 	blt.w	8022fc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8022ea6:	4580      	cmp	r8, r0
 8022ea8:	f340 808b 	ble.w	8022fc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8022eac:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8022eb0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022eb4:	441e      	add	r6, r3
 8022eb6:	3001      	adds	r0, #1
 8022eb8:	f100 8088 	bmi.w	8022fcc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8022ebc:	4580      	cmp	r8, r0
 8022ebe:	f340 8085 	ble.w	8022fcc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8022ec2:	2c00      	cmp	r4, #0
 8022ec4:	f000 8082 	beq.w	8022fcc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8022ec8:	44d0      	add	r8, sl
 8022eca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022ece:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ed2:	4413      	add	r3, r2
 8022ed4:	b2a4      	uxth	r4, r4
 8022ed6:	f895 a000 	ldrb.w	sl, [r5]
 8022eda:	fa1f fc8c 	uxth.w	ip, ip
 8022ede:	fb04 fb0c 	mul.w	fp, r4, ip
 8022ee2:	0124      	lsls	r4, r4, #4
 8022ee4:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8022ee8:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8022eec:	eba4 040b 	sub.w	r4, r4, fp
 8022ef0:	fa1f f08c 	uxth.w	r0, ip
 8022ef4:	b2a2      	uxth	r2, r4
 8022ef6:	783c      	ldrb	r4, [r7, #0]
 8022ef8:	eba8 0800 	sub.w	r8, r8, r0
 8022efc:	fa1f fc8e 	uxth.w	ip, lr
 8022f00:	fb02 fa0a 	mul.w	sl, r2, sl
 8022f04:	ea6f 0e0e 	mvn.w	lr, lr
 8022f08:	fa1f f888 	uxth.w	r8, r8
 8022f0c:	fa5f fe8e 	uxtb.w	lr, lr
 8022f10:	fb08 aa04 	mla	sl, r8, r4, sl
 8022f14:	7834      	ldrb	r4, [r6, #0]
 8022f16:	fb19 f90e 	smulbb	r9, r9, lr
 8022f1a:	fb00 aa04 	mla	sl, r0, r4, sl
 8022f1e:	781c      	ldrb	r4, [r3, #0]
 8022f20:	fb0b a404 	mla	r4, fp, r4, sl
 8022f24:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022f28:	fb04 990c 	mla	r9, r4, ip, r9
 8022f2c:	fa1f f989 	uxth.w	r9, r9
 8022f30:	f109 0401 	add.w	r4, r9, #1
 8022f34:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022f38:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022f3c:	f881 9000 	strb.w	r9, [r1]
 8022f40:	f895 9001 	ldrb.w	r9, [r5, #1]
 8022f44:	787c      	ldrb	r4, [r7, #1]
 8022f46:	fb02 f909 	mul.w	r9, r2, r9
 8022f4a:	fb08 9904 	mla	r9, r8, r4, r9
 8022f4e:	7874      	ldrb	r4, [r6, #1]
 8022f50:	fb00 9904 	mla	r9, r0, r4, r9
 8022f54:	785c      	ldrb	r4, [r3, #1]
 8022f56:	fb0b 9404 	mla	r4, fp, r4, r9
 8022f5a:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8022f5e:	9c02      	ldr	r4, [sp, #8]
 8022f60:	fb14 f90e 	smulbb	r9, r4, lr
 8022f64:	fb0a 940c 	mla	r4, sl, ip, r9
 8022f68:	b2a4      	uxth	r4, r4
 8022f6a:	f104 0901 	add.w	r9, r4, #1
 8022f6e:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8022f72:	1224      	asrs	r4, r4, #8
 8022f74:	704c      	strb	r4, [r1, #1]
 8022f76:	78ad      	ldrb	r5, [r5, #2]
 8022f78:	78bc      	ldrb	r4, [r7, #2]
 8022f7a:	436a      	muls	r2, r5
 8022f7c:	789b      	ldrb	r3, [r3, #2]
 8022f7e:	fb08 2204 	mla	r2, r8, r4, r2
 8022f82:	78b4      	ldrb	r4, [r6, #2]
 8022f84:	fb00 2004 	mla	r0, r0, r4, r2
 8022f88:	fb0b 0b03 	mla	fp, fp, r3, r0
 8022f8c:	9b01      	ldr	r3, [sp, #4]
 8022f8e:	fb13 fe0e 	smulbb	lr, r3, lr
 8022f92:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8022f96:	fb0b ec0c 	mla	ip, fp, ip, lr
 8022f9a:	fa1f fc8c 	uxth.w	ip, ip
 8022f9e:	f10c 0e01 	add.w	lr, ip, #1
 8022fa2:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8022fa6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022faa:	f881 c002 	strb.w	ip, [r1, #2]
 8022fae:	b007      	add	sp, #28
 8022fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fb4:	af05      	add	r7, sp, #20
 8022fb6:	e75b      	b.n	8022e70 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8022fb8:	ad05      	add	r5, sp, #20
 8022fba:	462f      	mov	r7, r5
 8022fbc:	e766      	b.n	8022e8c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8022fbe:	ad05      	add	r5, sp, #20
 8022fc0:	e764      	b.n	8022e8c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8022fc2:	ae05      	add	r6, sp, #20
 8022fc4:	e777      	b.n	8022eb6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8022fc6:	ab05      	add	r3, sp, #20
 8022fc8:	461e      	mov	r6, r3
 8022fca:	e783      	b.n	8022ed4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8022fcc:	ab05      	add	r3, sp, #20
 8022fce:	e781      	b.n	8022ed4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08022fd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fd4:	b093      	sub	sp, #76	; 0x4c
 8022fd6:	9210      	str	r2, [sp, #64]	; 0x40
 8022fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8022fda:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022fdc:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8022fe0:	9011      	str	r0, [sp, #68]	; 0x44
 8022fe2:	930e      	str	r3, [sp, #56]	; 0x38
 8022fe4:	6850      	ldr	r0, [r2, #4]
 8022fe6:	910d      	str	r1, [sp, #52]	; 0x34
 8022fe8:	6812      	ldr	r2, [r2, #0]
 8022fea:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022fee:	fb00 1303 	mla	r3, r0, r3, r1
 8022ff2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ff6:	18d3      	adds	r3, r2, r3
 8022ff8:	930a      	str	r3, [sp, #40]	; 0x28
 8022ffa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022ffc:	681b      	ldr	r3, [r3, #0]
 8022ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8023000:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023002:	685c      	ldr	r4, [r3, #4]
 8023004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023006:	3404      	adds	r4, #4
 8023008:	43db      	mvns	r3, r3
 802300a:	b2db      	uxtb	r3, r3
 802300c:	930b      	str	r3, [sp, #44]	; 0x2c
 802300e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023010:	2b00      	cmp	r3, #0
 8023012:	dc03      	bgt.n	802301c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023014:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023016:	2b00      	cmp	r3, #0
 8023018:	f340 8250 	ble.w	80234bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802301c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802301e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023022:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023026:	1e48      	subs	r0, r1, #1
 8023028:	1e55      	subs	r5, r2, #1
 802302a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802302c:	2b00      	cmp	r3, #0
 802302e:	f340 80ee 	ble.w	802320e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023032:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8023034:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023036:	1436      	asrs	r6, r6, #16
 8023038:	ea4f 4323 	mov.w	r3, r3, asr #16
 802303c:	d406      	bmi.n	802304c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802303e:	4286      	cmp	r6, r0
 8023040:	da04      	bge.n	802304c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023042:	2b00      	cmp	r3, #0
 8023044:	db02      	blt.n	802304c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023046:	42ab      	cmp	r3, r5
 8023048:	f2c0 80e2 	blt.w	8023210 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802304c:	3601      	adds	r6, #1
 802304e:	f100 80cf 	bmi.w	80231f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023052:	42b1      	cmp	r1, r6
 8023054:	f2c0 80cc 	blt.w	80231f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023058:	3301      	adds	r3, #1
 802305a:	f100 80c9 	bmi.w	80231f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802305e:	429a      	cmp	r2, r3
 8023060:	f2c0 80c6 	blt.w	80231f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023064:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8023068:	f1bb 0f00 	cmp.w	fp, #0
 802306c:	f340 80f1 	ble.w	8023252 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8023070:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023072:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023074:	9824      	ldr	r0, [sp, #144]	; 0x90
 8023076:	141d      	asrs	r5, r3, #16
 8023078:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802307a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802307e:	68c7      	ldr	r7, [r0, #12]
 8023080:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8023082:	1418      	asrs	r0, r3, #16
 8023084:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8023088:	6892      	ldr	r2, [r2, #8]
 802308a:	f100 8137 	bmi.w	80232fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802308e:	f102 3cff 	add.w	ip, r2, #4294967295
 8023092:	4560      	cmp	r0, ip
 8023094:	f280 8132 	bge.w	80232fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023098:	2d00      	cmp	r5, #0
 802309a:	f2c0 812f 	blt.w	80232fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802309e:	f107 3cff 	add.w	ip, r7, #4294967295
 80230a2:	4565      	cmp	r5, ip
 80230a4:	f280 812a 	bge.w	80232fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80230a8:	b212      	sxth	r2, r2
 80230aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80230ac:	fb05 0002 	mla	r0, r5, r2, r0
 80230b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80230b2:	f817 c000 	ldrb.w	ip, [r7, r0]
 80230b6:	4405      	add	r5, r0
 80230b8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80230bc:	eb04 0e0c 	add.w	lr, r4, ip
 80230c0:	f1b8 0f00 	cmp.w	r8, #0
 80230c4:	f000 810c 	beq.w	80232e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80230c8:	786f      	ldrb	r7, [r5, #1]
 80230ca:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80230ce:	4427      	add	r7, r4
 80230d0:	2900      	cmp	r1, #0
 80230d2:	f000 810d 	beq.w	80232f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80230d6:	18a8      	adds	r0, r5, r2
 80230d8:	5caa      	ldrb	r2, [r5, r2]
 80230da:	7840      	ldrb	r0, [r0, #1]
 80230dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80230e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80230e4:	4422      	add	r2, r4
 80230e6:	4420      	add	r0, r4
 80230e8:	fa1f f388 	uxth.w	r3, r8
 80230ec:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80230f0:	b289      	uxth	r1, r1
 80230f2:	f897 c000 	ldrb.w	ip, [r7]
 80230f6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80230fa:	fb03 f901 	mul.w	r9, r3, r1
 80230fe:	011b      	lsls	r3, r3, #4
 8023100:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023104:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8023108:	eba3 0309 	sub.w	r3, r3, r9
 802310c:	b289      	uxth	r1, r1
 802310e:	b29b      	uxth	r3, r3
 8023110:	eba8 0801 	sub.w	r8, r8, r1
 8023114:	fb03 fc0c 	mul.w	ip, r3, ip
 8023118:	fa1f f888 	uxth.w	r8, r8
 802311c:	930f      	str	r3, [sp, #60]	; 0x3c
 802311e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023120:	fb08 cc0a 	mla	ip, r8, sl, ip
 8023124:	f892 a000 	ldrb.w	sl, [r2]
 8023128:	fb01 cc0a 	mla	ip, r1, sl, ip
 802312c:	f890 a000 	ldrb.w	sl, [r0]
 8023130:	fb09 cc0a 	mla	ip, r9, sl, ip
 8023134:	f896 a000 	ldrb.w	sl, [r6]
 8023138:	fb1a fa03 	smulbb	sl, sl, r3
 802313c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023142:	fb0c ac05 	mla	ip, ip, r5, sl
 8023146:	fa1f fc8c 	uxth.w	ip, ip
 802314a:	f10c 0a01 	add.w	sl, ip, #1
 802314e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8023152:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023156:	f886 a000 	strb.w	sl, [r6]
 802315a:	f897 c001 	ldrb.w	ip, [r7, #1]
 802315e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8023162:	fb03 fc0c 	mul.w	ip, r3, ip
 8023166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023168:	fb08 cc0a 	mla	ip, r8, sl, ip
 802316c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023170:	fb01 cc0a 	mla	ip, r1, sl, ip
 8023174:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023178:	fb09 cc0a 	mla	ip, r9, sl, ip
 802317c:	f896 a001 	ldrb.w	sl, [r6, #1]
 8023180:	fb1a fa03 	smulbb	sl, sl, r3
 8023184:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802318a:	fb0c ac05 	mla	ip, ip, r5, sl
 802318e:	fa1f fc8c 	uxth.w	ip, ip
 8023192:	f10c 0a01 	add.w	sl, ip, #1
 8023196:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 802319a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802319e:	f886 c001 	strb.w	ip, [r6, #1]
 80231a2:	78bf      	ldrb	r7, [r7, #2]
 80231a4:	f89e c002 	ldrb.w	ip, [lr, #2]
 80231a8:	437b      	muls	r3, r7
 80231aa:	fb08 330c 	mla	r3, r8, ip, r3
 80231ae:	f892 c002 	ldrb.w	ip, [r2, #2]
 80231b2:	7882      	ldrb	r2, [r0, #2]
 80231b4:	fb01 310c 	mla	r1, r1, ip, r3
 80231b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80231ba:	fb09 1902 	mla	r9, r9, r2, r1
 80231be:	78b1      	ldrb	r1, [r6, #2]
 80231c0:	fb11 f103 	smulbb	r1, r1, r3
 80231c4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80231c8:	fb09 1505 	mla	r5, r9, r5, r1
 80231cc:	b2ad      	uxth	r5, r5
 80231ce:	1c6b      	adds	r3, r5, #1
 80231d0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80231d4:	122d      	asrs	r5, r5, #8
 80231d6:	70b5      	strb	r5, [r6, #2]
 80231d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80231da:	3603      	adds	r6, #3
 80231dc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80231de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80231e2:	4413      	add	r3, r2
 80231e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80231e6:	931d      	str	r3, [sp, #116]	; 0x74
 80231e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80231ea:	4413      	add	r3, r2
 80231ec:	931e      	str	r3, [sp, #120]	; 0x78
 80231ee:	e73b      	b.n	8023068 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80231f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80231f2:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80231f4:	4433      	add	r3, r6
 80231f6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80231f8:	931d      	str	r3, [sp, #116]	; 0x74
 80231fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80231fc:	4433      	add	r3, r6
 80231fe:	931e      	str	r3, [sp, #120]	; 0x78
 8023200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023202:	3b01      	subs	r3, #1
 8023204:	9309      	str	r3, [sp, #36]	; 0x24
 8023206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023208:	3303      	adds	r3, #3
 802320a:	930a      	str	r3, [sp, #40]	; 0x28
 802320c:	e70d      	b.n	802302a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802320e:	d028      	beq.n	8023262 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023212:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023214:	3b01      	subs	r3, #1
 8023216:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8023218:	fb00 5003 	mla	r0, r0, r3, r5
 802321c:	1400      	asrs	r0, r0, #16
 802321e:	f53f af21 	bmi.w	8023064 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023222:	3901      	subs	r1, #1
 8023224:	4288      	cmp	r0, r1
 8023226:	f6bf af1d 	bge.w	8023064 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802322a:	9920      	ldr	r1, [sp, #128]	; 0x80
 802322c:	981e      	ldr	r0, [sp, #120]	; 0x78
 802322e:	fb01 0303 	mla	r3, r1, r3, r0
 8023232:	141b      	asrs	r3, r3, #16
 8023234:	f53f af16 	bmi.w	8023064 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023238:	3a01      	subs	r2, #1
 802323a:	4293      	cmp	r3, r2
 802323c:	f6bf af12 	bge.w	8023064 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023242:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8023246:	1cdf      	adds	r7, r3, #3
 8023248:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 802324c:	f1b9 0f00 	cmp.w	r9, #0
 8023250:	dc73      	bgt.n	802333a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023256:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802325a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802325e:	441a      	add	r2, r3
 8023260:	920a      	str	r2, [sp, #40]	; 0x28
 8023262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023264:	2b00      	cmp	r3, #0
 8023266:	f340 8129 	ble.w	80234bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802326a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802326e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023270:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023274:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023278:	eef0 6a62 	vmov.f32	s13, s5
 802327c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023280:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023284:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023288:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 802328c:	eef0 6a43 	vmov.f32	s13, s6
 8023290:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023294:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8023298:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802329c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80232a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80232a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80232a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80232ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80232b0:	ee12 2a90 	vmov	r2, s5
 80232b4:	eef0 2a47 	vmov.f32	s5, s14
 80232b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80232bc:	ee13 2a10 	vmov	r2, s6
 80232c0:	931f      	str	r3, [sp, #124]	; 0x7c
 80232c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80232c4:	eeb0 3a67 	vmov.f32	s6, s15
 80232c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80232cc:	9320      	str	r3, [sp, #128]	; 0x80
 80232ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80232d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80232d2:	3b01      	subs	r3, #1
 80232d4:	930d      	str	r3, [sp, #52]	; 0x34
 80232d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80232d8:	bf08      	it	eq
 80232da:	4613      	moveq	r3, r2
 80232dc:	9309      	str	r3, [sp, #36]	; 0x24
 80232de:	e696      	b.n	802300e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80232e0:	b149      	cbz	r1, 80232f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80232e2:	5caa      	ldrb	r2, [r5, r2]
 80232e4:	4670      	mov	r0, lr
 80232e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80232ea:	4422      	add	r2, r4
 80232ec:	4677      	mov	r7, lr
 80232ee:	e6fb      	b.n	80230e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80232f0:	4670      	mov	r0, lr
 80232f2:	4672      	mov	r2, lr
 80232f4:	e6f8      	b.n	80230e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80232f6:	4670      	mov	r0, lr
 80232f8:	4672      	mov	r2, lr
 80232fa:	e7f7      	b.n	80232ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80232fc:	f110 0c01 	adds.w	ip, r0, #1
 8023300:	f53f af6a 	bmi.w	80231d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023304:	4562      	cmp	r2, ip
 8023306:	f6ff af67 	blt.w	80231d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802330a:	f115 0c01 	adds.w	ip, r5, #1
 802330e:	f53f af63 	bmi.w	80231d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023312:	4567      	cmp	r7, ip
 8023314:	f6ff af60 	blt.w	80231d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802331a:	b23f      	sxth	r7, r7
 802331c:	b212      	sxth	r2, r2
 802331e:	9002      	str	r0, [sp, #8]
 8023320:	9701      	str	r7, [sp, #4]
 8023322:	9200      	str	r2, [sp, #0]
 8023324:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023328:	e9cd 1305 	strd	r1, r3, [sp, #20]
 802332c:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8023330:	4623      	mov	r3, r4
 8023332:	4631      	mov	r1, r6
 8023334:	f7ff fd69 	bl	8022e0a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8023338:	e74e      	b.n	80231d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802333a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802333c:	981e      	ldr	r0, [sp, #120]	; 0x78
 802333e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023342:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8023344:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8023346:	1400      	asrs	r0, r0, #16
 8023348:	142d      	asrs	r5, r5, #16
 802334a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802334c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023350:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023354:	fb02 5000 	mla	r0, r2, r0, r5
 8023358:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802335a:	f815 e000 	ldrb.w	lr, [r5, r0]
 802335e:	eb05 0c00 	add.w	ip, r5, r0
 8023362:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023366:	eb04 060e 	add.w	r6, r4, lr
 802336a:	2b00      	cmp	r3, #0
 802336c:	f000 8097 	beq.w	802349e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8023370:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023378:	4425      	add	r5, r4
 802337a:	2900      	cmp	r1, #0
 802337c:	f000 8098 	beq.w	80234b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8023380:	eb0c 0002 	add.w	r0, ip, r2
 8023384:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023388:	7840      	ldrb	r0, [r0, #1]
 802338a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802338e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023392:	4422      	add	r2, r4
 8023394:	4420      	add	r0, r4
 8023396:	b29b      	uxth	r3, r3
 8023398:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802339c:	b289      	uxth	r1, r1
 802339e:	f895 e000 	ldrb.w	lr, [r5]
 80233a2:	3703      	adds	r7, #3
 80233a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80233a8:	fb03 f801 	mul.w	r8, r3, r1
 80233ac:	011b      	lsls	r3, r3, #4
 80233ae:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80233b2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80233b6:	eba3 0308 	sub.w	r3, r3, r8
 80233ba:	b289      	uxth	r1, r1
 80233bc:	b29b      	uxth	r3, r3
 80233be:	ebac 0c01 	sub.w	ip, ip, r1
 80233c2:	fb03 fe0e 	mul.w	lr, r3, lr
 80233c6:	fa1f fc8c 	uxth.w	ip, ip
 80233ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80233cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80233ce:	fb0c ee0b 	mla	lr, ip, fp, lr
 80233d2:	f892 b000 	ldrb.w	fp, [r2]
 80233d6:	fb01 ee0b 	mla	lr, r1, fp, lr
 80233da:	f890 b000 	ldrb.w	fp, [r0]
 80233de:	fb08 ee0b 	mla	lr, r8, fp, lr
 80233e2:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80233e6:	fb1b fb03 	smulbb	fp, fp, r3
 80233ea:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80233ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80233f0:	fb0e be0a 	mla	lr, lr, sl, fp
 80233f4:	fa1f fe8e 	uxth.w	lr, lr
 80233f8:	f10e 0b01 	add.w	fp, lr, #1
 80233fc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8023400:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023404:	f807 ec06 	strb.w	lr, [r7, #-6]
 8023408:	f895 e001 	ldrb.w	lr, [r5, #1]
 802340c:	f896 b001 	ldrb.w	fp, [r6, #1]
 8023410:	fb03 fe0e 	mul.w	lr, r3, lr
 8023414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023416:	fb0c ee0b 	mla	lr, ip, fp, lr
 802341a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802341e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023422:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023426:	fb08 ee0b 	mla	lr, r8, fp, lr
 802342a:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 802342e:	fb1b fb03 	smulbb	fp, fp, r3
 8023432:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8023436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023438:	fb0e be0a 	mla	lr, lr, sl, fp
 802343c:	fa1f fe8e 	uxth.w	lr, lr
 8023440:	f10e 0b01 	add.w	fp, lr, #1
 8023444:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8023448:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802344c:	f807 ec05 	strb.w	lr, [r7, #-5]
 8023450:	78ad      	ldrb	r5, [r5, #2]
 8023452:	78b6      	ldrb	r6, [r6, #2]
 8023454:	436b      	muls	r3, r5
 8023456:	7895      	ldrb	r5, [r2, #2]
 8023458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802345a:	fb0c 3306 	mla	r3, ip, r6, r3
 802345e:	fb01 3305 	mla	r3, r1, r5, r3
 8023462:	7885      	ldrb	r5, [r0, #2]
 8023464:	fb08 3805 	mla	r8, r8, r5, r3
 8023468:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 802346c:	fb13 f302 	smulbb	r3, r3, r2
 8023470:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8023474:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023476:	fb08 380a 	mla	r8, r8, sl, r3
 802347a:	fa1f f888 	uxth.w	r8, r8
 802347e:	f108 0301 	add.w	r3, r8, #1
 8023482:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8023486:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023488:	4413      	add	r3, r2
 802348a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802348c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023490:	931d      	str	r3, [sp, #116]	; 0x74
 8023492:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023494:	f807 8c04 	strb.w	r8, [r7, #-4]
 8023498:	4413      	add	r3, r2
 802349a:	931e      	str	r3, [sp, #120]	; 0x78
 802349c:	e6d6      	b.n	802324c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802349e:	b151      	cbz	r1, 80234b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80234a0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80234a4:	4630      	mov	r0, r6
 80234a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80234aa:	4422      	add	r2, r4
 80234ac:	4635      	mov	r5, r6
 80234ae:	e772      	b.n	8023396 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80234b0:	4630      	mov	r0, r6
 80234b2:	4632      	mov	r2, r6
 80234b4:	e76f      	b.n	8023396 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80234b6:	4630      	mov	r0, r6
 80234b8:	4632      	mov	r2, r6
 80234ba:	e7f7      	b.n	80234ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80234bc:	b013      	add	sp, #76	; 0x4c
 80234be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080234c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80234c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80234c6:	784c      	ldrb	r4, [r1, #1]
 80234c8:	f891 a002 	ldrb.w	sl, [r1, #2]
 80234cc:	0224      	lsls	r4, r4, #8
 80234ce:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80234d2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80234d6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80234da:	f891 a000 	ldrb.w	sl, [r1]
 80234de:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80234e2:	ea44 040a 	orr.w	r4, r4, sl
 80234e6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80234ea:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 80234ee:	9401      	str	r4, [sp, #4]
 80234f0:	fb05 c70e 	mla	r7, r5, lr, ip
 80234f4:	2d00      	cmp	r5, #0
 80234f6:	eb02 0807 	add.w	r8, r2, r7
 80234fa:	db72      	blt.n	80235e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80234fc:	45a9      	cmp	r9, r5
 80234fe:	dd70      	ble.n	80235e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8023500:	f1bc 0f00 	cmp.w	ip, #0
 8023504:	db6b      	blt.n	80235de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8023506:	45e6      	cmp	lr, ip
 8023508:	dd69      	ble.n	80235de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 802350a:	5dd7      	ldrb	r7, [r2, r7]
 802350c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023510:	441f      	add	r7, r3
 8023512:	f11c 0201 	adds.w	r2, ip, #1
 8023516:	d467      	bmi.n	80235e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023518:	4596      	cmp	lr, r2
 802351a:	dd65      	ble.n	80235e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802351c:	2800      	cmp	r0, #0
 802351e:	d063      	beq.n	80235e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023520:	f898 4001 	ldrb.w	r4, [r8, #1]
 8023524:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023528:	441c      	add	r4, r3
 802352a:	3501      	adds	r5, #1
 802352c:	d460      	bmi.n	80235f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 802352e:	45a9      	cmp	r9, r5
 8023530:	dd5e      	ble.n	80235f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023532:	2e00      	cmp	r6, #0
 8023534:	d05c      	beq.n	80235f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023536:	f1bc 0f00 	cmp.w	ip, #0
 802353a:	db57      	blt.n	80235ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802353c:	45e6      	cmp	lr, ip
 802353e:	dd55      	ble.n	80235ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8023540:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023548:	441d      	add	r5, r3
 802354a:	f11c 0201 	adds.w	r2, ip, #1
 802354e:	d452      	bmi.n	80235f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023550:	4596      	cmp	lr, r2
 8023552:	dd50      	ble.n	80235f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023554:	2800      	cmp	r0, #0
 8023556:	d04e      	beq.n	80235f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023558:	44c6      	add	lr, r8
 802355a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802355e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023562:	4413      	add	r3, r2
 8023564:	b280      	uxth	r0, r0
 8023566:	f897 8000 	ldrb.w	r8, [r7]
 802356a:	b2b2      	uxth	r2, r6
 802356c:	fb00 f602 	mul.w	r6, r0, r2
 8023570:	0100      	lsls	r0, r0, #4
 8023572:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8023576:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 802357a:	1b80      	subs	r0, r0, r6
 802357c:	fa1f fc82 	uxth.w	ip, r2
 8023580:	b282      	uxth	r2, r0
 8023582:	7820      	ldrb	r0, [r4, #0]
 8023584:	ebae 0e0c 	sub.w	lr, lr, ip
 8023588:	4350      	muls	r0, r2
 802358a:	fa1f fe8e 	uxth.w	lr, lr
 802358e:	fb0e 0808 	mla	r8, lr, r8, r0
 8023592:	7828      	ldrb	r0, [r5, #0]
 8023594:	fb0c 8800 	mla	r8, ip, r0, r8
 8023598:	7818      	ldrb	r0, [r3, #0]
 802359a:	fb06 8000 	mla	r0, r6, r0, r8
 802359e:	1200      	asrs	r0, r0, #8
 80235a0:	7008      	strb	r0, [r1, #0]
 80235a2:	7860      	ldrb	r0, [r4, #1]
 80235a4:	f897 8001 	ldrb.w	r8, [r7, #1]
 80235a8:	4350      	muls	r0, r2
 80235aa:	fb0e 0808 	mla	r8, lr, r8, r0
 80235ae:	7868      	ldrb	r0, [r5, #1]
 80235b0:	fb0c 8800 	mla	r8, ip, r0, r8
 80235b4:	7858      	ldrb	r0, [r3, #1]
 80235b6:	fb06 8000 	mla	r0, r6, r0, r8
 80235ba:	1200      	asrs	r0, r0, #8
 80235bc:	7048      	strb	r0, [r1, #1]
 80235be:	78a0      	ldrb	r0, [r4, #2]
 80235c0:	78bf      	ldrb	r7, [r7, #2]
 80235c2:	4350      	muls	r0, r2
 80235c4:	78aa      	ldrb	r2, [r5, #2]
 80235c6:	fb0e 0007 	mla	r0, lr, r7, r0
 80235ca:	fb0c 0c02 	mla	ip, ip, r2, r0
 80235ce:	789a      	ldrb	r2, [r3, #2]
 80235d0:	fb06 c202 	mla	r2, r6, r2, ip
 80235d4:	1212      	asrs	r2, r2, #8
 80235d6:	708a      	strb	r2, [r1, #2]
 80235d8:	b002      	add	sp, #8
 80235da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235de:	af01      	add	r7, sp, #4
 80235e0:	e797      	b.n	8023512 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80235e2:	ac01      	add	r4, sp, #4
 80235e4:	4627      	mov	r7, r4
 80235e6:	e7a0      	b.n	802352a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80235e8:	ac01      	add	r4, sp, #4
 80235ea:	e79e      	b.n	802352a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80235ec:	ad01      	add	r5, sp, #4
 80235ee:	e7ac      	b.n	802354a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80235f0:	ab01      	add	r3, sp, #4
 80235f2:	461d      	mov	r5, r3
 80235f4:	e7b6      	b.n	8023564 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80235f6:	ab01      	add	r3, sp, #4
 80235f8:	e7b4      	b.n	8023564 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080235fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80235fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235fe:	b08d      	sub	sp, #52	; 0x34
 8023600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023604:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8023608:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802360a:	900b      	str	r0, [sp, #44]	; 0x2c
 802360c:	9306      	str	r3, [sp, #24]
 802360e:	6850      	ldr	r0, [r2, #4]
 8023610:	6812      	ldr	r2, [r2, #0]
 8023612:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023614:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8023618:	fb00 1303 	mla	r3, r0, r3, r1
 802361c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023620:	18d3      	adds	r3, r2, r3
 8023622:	9307      	str	r3, [sp, #28]
 8023624:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023626:	681b      	ldr	r3, [r3, #0]
 8023628:	9308      	str	r3, [sp, #32]
 802362a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802362c:	685d      	ldr	r5, [r3, #4]
 802362e:	3504      	adds	r5, #4
 8023630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023632:	2b00      	cmp	r3, #0
 8023634:	dc03      	bgt.n	802363e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023638:	2b00      	cmp	r3, #0
 802363a:	f340 81e6 	ble.w	8023a0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 802363e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023640:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023644:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023648:	1e48      	subs	r0, r1, #1
 802364a:	1e56      	subs	r6, r2, #1
 802364c:	9b06      	ldr	r3, [sp, #24]
 802364e:	2b00      	cmp	r3, #0
 8023650:	f340 80bd 	ble.w	80237ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8023654:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023656:	1427      	asrs	r7, r4, #16
 8023658:	ea4f 4323 	mov.w	r3, r3, asr #16
 802365c:	d406      	bmi.n	802366c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802365e:	4287      	cmp	r7, r0
 8023660:	da04      	bge.n	802366c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023662:	2b00      	cmp	r3, #0
 8023664:	db02      	blt.n	802366c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023666:	42b3      	cmp	r3, r6
 8023668:	f2c0 80b2 	blt.w	80237d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802366c:	3701      	adds	r7, #1
 802366e:	f100 80a1 	bmi.w	80237b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023672:	42b9      	cmp	r1, r7
 8023674:	f2c0 809e 	blt.w	80237b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023678:	3301      	adds	r3, #1
 802367a:	f100 809b 	bmi.w	80237b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802367e:	429a      	cmp	r2, r3
 8023680:	f2c0 8098 	blt.w	80237b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023684:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8023688:	f1bb 0f00 	cmp.w	fp, #0
 802368c:	f340 80bf 	ble.w	802380e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023690:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023692:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023694:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023696:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802369a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 802369e:	1420      	asrs	r0, r4, #16
 80236a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80236a2:	ea4f 4723 	mov.w	r7, r3, asr #16
 80236a6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80236aa:	6892      	ldr	r2, [r2, #8]
 80236ac:	f100 8103 	bmi.w	80238b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80236b0:	f102 3eff 	add.w	lr, r2, #4294967295
 80236b4:	4570      	cmp	r0, lr
 80236b6:	f280 80fe 	bge.w	80238b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80236ba:	2f00      	cmp	r7, #0
 80236bc:	f2c0 80fb 	blt.w	80238b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80236c0:	f10c 3eff 	add.w	lr, ip, #4294967295
 80236c4:	4577      	cmp	r7, lr
 80236c6:	f280 80f6 	bge.w	80238b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80236ca:	b212      	sxth	r2, r2
 80236cc:	fb07 0002 	mla	r0, r7, r2, r0
 80236d0:	9f08      	ldr	r7, [sp, #32]
 80236d2:	f817 8000 	ldrb.w	r8, [r7, r0]
 80236d6:	eb07 0e00 	add.w	lr, r7, r0
 80236da:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80236de:	eb05 0c08 	add.w	ip, r5, r8
 80236e2:	2b00      	cmp	r3, #0
 80236e4:	f000 80d8 	beq.w	8023898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80236e8:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80236ec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80236f0:	442f      	add	r7, r5
 80236f2:	2900      	cmp	r1, #0
 80236f4:	f000 80d9 	beq.w	80238aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80236f8:	eb0e 0002 	add.w	r0, lr, r2
 80236fc:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023700:	7840      	ldrb	r0, [r0, #1]
 8023702:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802370a:	442a      	add	r2, r5
 802370c:	4428      	add	r0, r5
 802370e:	b29b      	uxth	r3, r3
 8023710:	f815 a008 	ldrb.w	sl, [r5, r8]
 8023714:	b289      	uxth	r1, r1
 8023716:	f897 8000 	ldrb.w	r8, [r7]
 802371a:	fb03 f901 	mul.w	r9, r3, r1
 802371e:	011b      	lsls	r3, r3, #4
 8023720:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023724:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023728:	eba3 0309 	sub.w	r3, r3, r9
 802372c:	b289      	uxth	r1, r1
 802372e:	b29b      	uxth	r3, r3
 8023730:	ebae 0e01 	sub.w	lr, lr, r1
 8023734:	fb03 f808 	mul.w	r8, r3, r8
 8023738:	fa1f fe8e 	uxth.w	lr, lr
 802373c:	fb0e 880a 	mla	r8, lr, sl, r8
 8023740:	f892 a000 	ldrb.w	sl, [r2]
 8023744:	fb01 880a 	mla	r8, r1, sl, r8
 8023748:	f890 a000 	ldrb.w	sl, [r0]
 802374c:	fb09 880a 	mla	r8, r9, sl, r8
 8023750:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023754:	f886 8000 	strb.w	r8, [r6]
 8023758:	f897 8001 	ldrb.w	r8, [r7, #1]
 802375c:	f89c a001 	ldrb.w	sl, [ip, #1]
 8023760:	fb03 f808 	mul.w	r8, r3, r8
 8023764:	fb0e 880a 	mla	r8, lr, sl, r8
 8023768:	f892 a001 	ldrb.w	sl, [r2, #1]
 802376c:	fb01 880a 	mla	r8, r1, sl, r8
 8023770:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023774:	fb09 880a 	mla	r8, r9, sl, r8
 8023778:	ea4f 2828 	mov.w	r8, r8, asr #8
 802377c:	f886 8001 	strb.w	r8, [r6, #1]
 8023780:	78bf      	ldrb	r7, [r7, #2]
 8023782:	f89c c002 	ldrb.w	ip, [ip, #2]
 8023786:	437b      	muls	r3, r7
 8023788:	7892      	ldrb	r2, [r2, #2]
 802378a:	fb0e 330c 	mla	r3, lr, ip, r3
 802378e:	fb01 3102 	mla	r1, r1, r2, r3
 8023792:	7882      	ldrb	r2, [r0, #2]
 8023794:	fb09 1902 	mla	r9, r9, r2, r1
 8023798:	ea4f 2929 	mov.w	r9, r9, asr #8
 802379c:	f886 9002 	strb.w	r9, [r6, #2]
 80237a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80237a2:	3603      	adds	r6, #3
 80237a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80237a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80237aa:	441c      	add	r4, r3
 80237ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80237ae:	4413      	add	r3, r2
 80237b0:	9318      	str	r3, [sp, #96]	; 0x60
 80237b2:	e769      	b.n	8023688 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80237b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80237b6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80237b8:	441c      	add	r4, r3
 80237ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80237bc:	443b      	add	r3, r7
 80237be:	9318      	str	r3, [sp, #96]	; 0x60
 80237c0:	9b06      	ldr	r3, [sp, #24]
 80237c2:	3b01      	subs	r3, #1
 80237c4:	9306      	str	r3, [sp, #24]
 80237c6:	9b07      	ldr	r3, [sp, #28]
 80237c8:	3303      	adds	r3, #3
 80237ca:	9307      	str	r3, [sp, #28]
 80237cc:	e73e      	b.n	802364c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80237ce:	d026      	beq.n	802381e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80237d0:	9b06      	ldr	r3, [sp, #24]
 80237d2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80237d4:	3b01      	subs	r3, #1
 80237d6:	fb00 4003 	mla	r0, r0, r3, r4
 80237da:	1400      	asrs	r0, r0, #16
 80237dc:	f53f af52 	bmi.w	8023684 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80237e0:	3901      	subs	r1, #1
 80237e2:	4288      	cmp	r0, r1
 80237e4:	f6bf af4e 	bge.w	8023684 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80237e8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80237ea:	9818      	ldr	r0, [sp, #96]	; 0x60
 80237ec:	fb01 0303 	mla	r3, r1, r3, r0
 80237f0:	141b      	asrs	r3, r3, #16
 80237f2:	f53f af47 	bmi.w	8023684 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80237f6:	3a01      	subs	r2, #1
 80237f8:	4293      	cmp	r3, r2
 80237fa:	f6bf af43 	bge.w	8023684 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80237fe:	9b07      	ldr	r3, [sp, #28]
 8023800:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023804:	f103 0803 	add.w	r8, r3, #3
 8023808:	f1ba 0f00 	cmp.w	sl, #0
 802380c:	dc71      	bgt.n	80238f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802380e:	9b06      	ldr	r3, [sp, #24]
 8023810:	9a07      	ldr	r2, [sp, #28]
 8023812:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023816:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802381a:	441a      	add	r2, r3
 802381c:	9207      	str	r2, [sp, #28]
 802381e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023820:	2b00      	cmp	r3, #0
 8023822:	f340 80f2 	ble.w	8023a0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023826:	ee30 0a04 	vadd.f32	s0, s0, s8
 802382a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802382c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023830:	eeb0 6a62 	vmov.f32	s12, s5
 8023834:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023838:	ee31 1a05 	vadd.f32	s2, s2, s10
 802383c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023840:	ee16 4a10 	vmov	r4, s12
 8023844:	eeb0 6a43 	vmov.f32	s12, s6
 8023848:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802384c:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8023850:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023854:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023858:	ee77 2a62 	vsub.f32	s5, s14, s5
 802385c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023860:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023864:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023868:	ee12 2a90 	vmov	r2, s5
 802386c:	eef0 2a47 	vmov.f32	s5, s14
 8023870:	fb92 f3f3 	sdiv	r3, r2, r3
 8023874:	ee13 2a10 	vmov	r2, s6
 8023878:	9319      	str	r3, [sp, #100]	; 0x64
 802387a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802387c:	eeb0 3a67 	vmov.f32	s6, s15
 8023880:	fb92 f3f3 	sdiv	r3, r2, r3
 8023884:	931a      	str	r3, [sp, #104]	; 0x68
 8023886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802388a:	3b01      	subs	r3, #1
 802388c:	9309      	str	r3, [sp, #36]	; 0x24
 802388e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023890:	bf08      	it	eq
 8023892:	4613      	moveq	r3, r2
 8023894:	9306      	str	r3, [sp, #24]
 8023896:	e6cb      	b.n	8023630 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8023898:	b151      	cbz	r1, 80238b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802389a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 802389e:	4660      	mov	r0, ip
 80238a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80238a4:	442a      	add	r2, r5
 80238a6:	4667      	mov	r7, ip
 80238a8:	e731      	b.n	802370e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80238aa:	4660      	mov	r0, ip
 80238ac:	4662      	mov	r2, ip
 80238ae:	e72e      	b.n	802370e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80238b0:	4660      	mov	r0, ip
 80238b2:	4662      	mov	r2, ip
 80238b4:	e7f7      	b.n	80238a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80238b6:	f110 0e01 	adds.w	lr, r0, #1
 80238ba:	f53f af71 	bmi.w	80237a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80238be:	4572      	cmp	r2, lr
 80238c0:	f6ff af6e 	blt.w	80237a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80238c4:	f117 0e01 	adds.w	lr, r7, #1
 80238c8:	f53f af6a 	bmi.w	80237a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80238cc:	45f4      	cmp	ip, lr
 80238ce:	f6ff af67 	blt.w	80237a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80238d2:	b212      	sxth	r2, r2
 80238d4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80238d8:	fa0f f38c 	sxth.w	r3, ip
 80238dc:	9200      	str	r2, [sp, #0]
 80238de:	4631      	mov	r1, r6
 80238e0:	9a08      	ldr	r2, [sp, #32]
 80238e2:	9301      	str	r3, [sp, #4]
 80238e4:	462b      	mov	r3, r5
 80238e6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80238ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80238ec:	f7ff fde9 	bl	80234c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80238f0:	e756      	b.n	80237a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80238f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80238f4:	1426      	asrs	r6, r4, #16
 80238f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80238f8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80238fc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023900:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023902:	1400      	asrs	r0, r0, #16
 8023904:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023908:	fb02 6000 	mla	r0, r2, r0, r6
 802390c:	9e08      	ldr	r6, [sp, #32]
 802390e:	f816 e000 	ldrb.w	lr, [r6, r0]
 8023912:	eb06 0c00 	add.w	ip, r6, r0
 8023916:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802391a:	eb05 070e 	add.w	r7, r5, lr
 802391e:	2b00      	cmp	r3, #0
 8023920:	d064      	beq.n	80239ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023922:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8023926:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802392a:	442e      	add	r6, r5
 802392c:	2900      	cmp	r1, #0
 802392e:	d066      	beq.n	80239fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8023930:	eb0c 0002 	add.w	r0, ip, r2
 8023934:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023938:	7840      	ldrb	r0, [r0, #1]
 802393a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802393e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023942:	442a      	add	r2, r5
 8023944:	4428      	add	r0, r5
 8023946:	b29b      	uxth	r3, r3
 8023948:	f815 b00e 	ldrb.w	fp, [r5, lr]
 802394c:	b289      	uxth	r1, r1
 802394e:	f896 e000 	ldrb.w	lr, [r6]
 8023952:	f108 0803 	add.w	r8, r8, #3
 8023956:	f10a 3aff 	add.w	sl, sl, #4294967295
 802395a:	fb03 f901 	mul.w	r9, r3, r1
 802395e:	011b      	lsls	r3, r3, #4
 8023960:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023964:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8023968:	eba3 0309 	sub.w	r3, r3, r9
 802396c:	b289      	uxth	r1, r1
 802396e:	b29b      	uxth	r3, r3
 8023970:	ebac 0c01 	sub.w	ip, ip, r1
 8023974:	fb03 fe0e 	mul.w	lr, r3, lr
 8023978:	fa1f fc8c 	uxth.w	ip, ip
 802397c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023980:	f892 b000 	ldrb.w	fp, [r2]
 8023984:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023988:	f890 b000 	ldrb.w	fp, [r0]
 802398c:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023990:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023994:	f808 ec06 	strb.w	lr, [r8, #-6]
 8023998:	f896 e001 	ldrb.w	lr, [r6, #1]
 802399c:	f897 b001 	ldrb.w	fp, [r7, #1]
 80239a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80239a4:	fb0c ee0b 	mla	lr, ip, fp, lr
 80239a8:	f892 b001 	ldrb.w	fp, [r2, #1]
 80239ac:	fb01 ee0b 	mla	lr, r1, fp, lr
 80239b0:	f890 b001 	ldrb.w	fp, [r0, #1]
 80239b4:	fb09 ee0b 	mla	lr, r9, fp, lr
 80239b8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80239bc:	f808 ec05 	strb.w	lr, [r8, #-5]
 80239c0:	78b6      	ldrb	r6, [r6, #2]
 80239c2:	78bf      	ldrb	r7, [r7, #2]
 80239c4:	4373      	muls	r3, r6
 80239c6:	7896      	ldrb	r6, [r2, #2]
 80239c8:	7882      	ldrb	r2, [r0, #2]
 80239ca:	fb0c 3307 	mla	r3, ip, r7, r3
 80239ce:	fb01 3306 	mla	r3, r1, r6, r3
 80239d2:	fb09 3902 	mla	r9, r9, r2, r3
 80239d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80239d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80239da:	441c      	add	r4, r3
 80239dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80239de:	ea4f 2929 	mov.w	r9, r9, asr #8
 80239e2:	4413      	add	r3, r2
 80239e4:	f808 9c04 	strb.w	r9, [r8, #-4]
 80239e8:	9318      	str	r3, [sp, #96]	; 0x60
 80239ea:	e70d      	b.n	8023808 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80239ec:	b151      	cbz	r1, 8023a04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80239ee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80239f2:	4638      	mov	r0, r7
 80239f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80239f8:	442a      	add	r2, r5
 80239fa:	463e      	mov	r6, r7
 80239fc:	e7a3      	b.n	8023946 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80239fe:	4638      	mov	r0, r7
 8023a00:	463a      	mov	r2, r7
 8023a02:	e7a0      	b.n	8023946 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8023a04:	4638      	mov	r0, r7
 8023a06:	463a      	mov	r2, r7
 8023a08:	e7f7      	b.n	80239fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8023a0a:	b00d      	add	sp, #52	; 0x34
 8023a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023a10 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8023a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a14:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8023a18:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8023a1c:	2d00      	cmp	r5, #0
 8023a1e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8023a22:	fb05 700c 	mla	r0, r5, ip, r7
 8023a26:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8023a2a:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8023a2e:	eb02 0800 	add.w	r8, r2, r0
 8023a32:	f2c0 8118 	blt.w	8023c66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8023a36:	45a9      	cmp	r9, r5
 8023a38:	f340 8115 	ble.w	8023c66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8023a3c:	2f00      	cmp	r7, #0
 8023a3e:	f2c0 8110 	blt.w	8023c62 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8023a42:	45bc      	cmp	ip, r7
 8023a44:	f340 810d 	ble.w	8023c62 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8023a48:	5c12      	ldrb	r2, [r2, r0]
 8023a4a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023a4e:	1c7a      	adds	r2, r7, #1
 8023a50:	f100 810c 	bmi.w	8023c6c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8023a54:	4594      	cmp	ip, r2
 8023a56:	f340 8109 	ble.w	8023c6c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8023a5a:	2c00      	cmp	r4, #0
 8023a5c:	f000 8108 	beq.w	8023c70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8023a60:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023a64:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023a68:	3501      	adds	r5, #1
 8023a6a:	f100 8105 	bmi.w	8023c78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8023a6e:	45a9      	cmp	r9, r5
 8023a70:	f340 8102 	ble.w	8023c78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8023a74:	f1be 0f00 	cmp.w	lr, #0
 8023a78:	f000 8101 	beq.w	8023c7e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8023a7c:	2f00      	cmp	r7, #0
 8023a7e:	f2c0 80f9 	blt.w	8023c74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8023a82:	45bc      	cmp	ip, r7
 8023a84:	f340 80f6 	ble.w	8023c74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8023a88:	f818 200c 	ldrb.w	r2, [r8, ip]
 8023a8c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023a90:	3701      	adds	r7, #1
 8023a92:	f100 80f7 	bmi.w	8023c84 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8023a96:	45bc      	cmp	ip, r7
 8023a98:	f340 80f4 	ble.w	8023c84 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8023a9c:	2c00      	cmp	r4, #0
 8023a9e:	f000 80f3 	beq.w	8023c88 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8023aa2:	44c4      	add	ip, r8
 8023aa4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8023aa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023aac:	fa1f fc84 	uxth.w	ip, r4
 8023ab0:	fa1f f48e 	uxth.w	r4, lr
 8023ab4:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023ab8:	fb04 fe0c 	mul.w	lr, r4, ip
 8023abc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8023ac0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8023ac4:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8023ac8:	ebac 070e 	sub.w	r7, ip, lr
 8023acc:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8023ad0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8023ad4:	b2a4      	uxth	r4, r4
 8023ad6:	b2bf      	uxth	r7, r7
 8023ad8:	1b1b      	subs	r3, r3, r4
 8023ada:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023ade:	fb07 fc0a 	mul.w	ip, r7, sl
 8023ae2:	b29b      	uxth	r3, r3
 8023ae4:	fb03 cc0b 	mla	ip, r3, fp, ip
 8023ae8:	9300      	str	r3, [sp, #0]
 8023aea:	fb04 cc09 	mla	ip, r4, r9, ip
 8023aee:	fb0e cc08 	mla	ip, lr, r8, ip
 8023af2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023af6:	9301      	str	r3, [sp, #4]
 8023af8:	2b00      	cmp	r3, #0
 8023afa:	f000 80af 	beq.w	8023c5c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8023afe:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023b02:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023b06:	fb0b fc0c 	mul.w	ip, fp, ip
 8023b0a:	fb0b f606 	mul.w	r6, fp, r6
 8023b0e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023b12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b16:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023b1a:	44dc      	add	ip, fp
 8023b1c:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8023b20:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023b24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b28:	fb0a fb0b 	mul.w	fp, sl, fp
 8023b2c:	fb0a fa00 	mul.w	sl, sl, r0
 8023b30:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8023b34:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8023b38:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8023b3c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8023b40:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8023b44:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b48:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8023b4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023b50:	0a36      	lsrs	r6, r6, #8
 8023b52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b56:	44dc      	add	ip, fp
 8023b58:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023b5c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023b60:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023b64:	fb09 fb0b 	mul.w	fp, r9, fp
 8023b68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b6c:	fb09 f905 	mul.w	r9, r9, r5
 8023b70:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8023b74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023b78:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8023b7c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b80:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023b84:	fb0c fc07 	mul.w	ip, ip, r7
 8023b88:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8023b8c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8023b90:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b94:	4458      	add	r0, fp
 8023b96:	fb08 f505 	mul.w	r5, r8, r5
 8023b9a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023b9e:	fb08 f802 	mul.w	r8, r8, r2
 8023ba2:	0a00      	lsrs	r0, r0, #8
 8023ba4:	0a2a      	lsrs	r2, r5, #8
 8023ba6:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8023baa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023bae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023bb2:	4415      	add	r5, r2
 8023bb4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023bb8:	0a2d      	lsrs	r5, r5, #8
 8023bba:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023bbe:	9a00      	ldr	r2, [sp, #0]
 8023bc0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023bc4:	fb03 cc02 	mla	ip, r3, r2, ip
 8023bc8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023bcc:	9b01      	ldr	r3, [sp, #4]
 8023bce:	fb05 c50e 	mla	r5, r5, lr, ip
 8023bd2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023bd6:	fb00 5004 	mla	r0, r0, r4, r5
 8023bda:	0a00      	lsrs	r0, r0, #8
 8023bdc:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8023be0:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8023be4:	4378      	muls	r0, r7
 8023be6:	fb02 0006 	mla	r0, r2, r6, r0
 8023bea:	fb0e 0e08 	mla	lr, lr, r8, r0
 8023bee:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8023bf2:	fb04 e000 	mla	r0, r4, r0, lr
 8023bf6:	0a00      	lsrs	r0, r0, #8
 8023bf8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023bfc:	4328      	orrs	r0, r5
 8023bfe:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8023c02:	b2ad      	uxth	r5, r5
 8023c04:	b2c4      	uxtb	r4, r0
 8023c06:	436b      	muls	r3, r5
 8023c08:	fb14 f405 	smulbb	r4, r4, r5
 8023c0c:	1c5a      	adds	r2, r3, #1
 8023c0e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023c12:	780b      	ldrb	r3, [r1, #0]
 8023c14:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8023c18:	b2d2      	uxtb	r2, r2
 8023c1a:	fb03 4302 	mla	r3, r3, r2, r4
 8023c1e:	b29b      	uxth	r3, r3
 8023c20:	1c5c      	adds	r4, r3, #1
 8023c22:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8023c26:	784c      	ldrb	r4, [r1, #1]
 8023c28:	fb14 f402 	smulbb	r4, r4, r2
 8023c2c:	121b      	asrs	r3, r3, #8
 8023c2e:	700b      	strb	r3, [r1, #0]
 8023c30:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8023c34:	fb03 4305 	mla	r3, r3, r5, r4
 8023c38:	b29b      	uxth	r3, r3
 8023c3a:	1c5c      	adds	r4, r3, #1
 8023c3c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8023c40:	0c04      	lsrs	r4, r0, #16
 8023c42:	7888      	ldrb	r0, [r1, #2]
 8023c44:	121b      	asrs	r3, r3, #8
 8023c46:	fb10 f002 	smulbb	r0, r0, r2
 8023c4a:	704b      	strb	r3, [r1, #1]
 8023c4c:	fb04 0005 	mla	r0, r4, r5, r0
 8023c50:	b280      	uxth	r0, r0
 8023c52:	1c43      	adds	r3, r0, #1
 8023c54:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023c58:	1200      	asrs	r0, r0, #8
 8023c5a:	7088      	strb	r0, [r1, #2]
 8023c5c:	b003      	add	sp, #12
 8023c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c62:	2600      	movs	r6, #0
 8023c64:	e6f3      	b.n	8023a4e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8023c66:	2000      	movs	r0, #0
 8023c68:	4606      	mov	r6, r0
 8023c6a:	e6fd      	b.n	8023a68 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023c6c:	2000      	movs	r0, #0
 8023c6e:	e6fb      	b.n	8023a68 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023c70:	4620      	mov	r0, r4
 8023c72:	e6f9      	b.n	8023a68 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023c74:	2500      	movs	r5, #0
 8023c76:	e70b      	b.n	8023a90 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8023c78:	2200      	movs	r2, #0
 8023c7a:	4615      	mov	r5, r2
 8023c7c:	e716      	b.n	8023aac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8023c7e:	4672      	mov	r2, lr
 8023c80:	4675      	mov	r5, lr
 8023c82:	e713      	b.n	8023aac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8023c84:	2200      	movs	r2, #0
 8023c86:	e711      	b.n	8023aac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8023c88:	4622      	mov	r2, r4
 8023c8a:	e70f      	b.n	8023aac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08023c8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c90:	b09f      	sub	sp, #124	; 0x7c
 8023c92:	921b      	str	r2, [sp, #108]	; 0x6c
 8023c94:	9309      	str	r3, [sp, #36]	; 0x24
 8023c96:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023c98:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8023c9c:	901d      	str	r0, [sp, #116]	; 0x74
 8023c9e:	931c      	str	r3, [sp, #112]	; 0x70
 8023ca0:	6850      	ldr	r0, [r2, #4]
 8023ca2:	9119      	str	r1, [sp, #100]	; 0x64
 8023ca4:	6812      	ldr	r2, [r2, #0]
 8023ca6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8023ca8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023cac:	fb00 1303 	mla	r3, r0, r3, r1
 8023cb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023cb4:	18d3      	adds	r3, r2, r3
 8023cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8023cb8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023cba:	681b      	ldr	r3, [r3, #0]
 8023cbc:	9312      	str	r3, [sp, #72]	; 0x48
 8023cbe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023cc0:	685e      	ldr	r6, [r3, #4]
 8023cc2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8023cc6:	3604      	adds	r6, #4
 8023cc8:	930d      	str	r3, [sp, #52]	; 0x34
 8023cca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023ccc:	2b00      	cmp	r3, #0
 8023cce:	dc03      	bgt.n	8023cd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023cd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023cd2:	2b00      	cmp	r3, #0
 8023cd4:	f340 8378 	ble.w	80243c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8023cd8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023cda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023cde:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023ce2:	1e48      	subs	r0, r1, #1
 8023ce4:	1e57      	subs	r7, r2, #1
 8023ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ce8:	2b00      	cmp	r3, #0
 8023cea:	f340 818c 	ble.w	8024006 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023cee:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023cf0:	142b      	asrs	r3, r5, #16
 8023cf2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023cf6:	d406      	bmi.n	8023d06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023cf8:	4584      	cmp	ip, r0
 8023cfa:	da04      	bge.n	8023d06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023cfc:	2b00      	cmp	r3, #0
 8023cfe:	db02      	blt.n	8023d06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023d00:	42bb      	cmp	r3, r7
 8023d02:	f2c0 8181 	blt.w	8024008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8023d06:	f11c 0c01 	adds.w	ip, ip, #1
 8023d0a:	f100 816f 	bmi.w	8023fec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023d0e:	4561      	cmp	r1, ip
 8023d10:	f2c0 816c 	blt.w	8023fec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023d14:	3301      	adds	r3, #1
 8023d16:	f100 8169 	bmi.w	8023fec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023d1a:	429a      	cmp	r2, r3
 8023d1c:	f2c0 8166 	blt.w	8023fec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d22:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023d24:	931a      	str	r3, [sp, #104]	; 0x68
 8023d26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023d28:	2b00      	cmp	r3, #0
 8023d2a:	f340 818c 	ble.w	8024046 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8023d2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d30:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023d34:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023d38:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023d3c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023d3e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023d42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d44:	141b      	asrs	r3, r3, #16
 8023d46:	f100 81d0 	bmi.w	80240ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023d4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8023d4e:	4543      	cmp	r3, r8
 8023d50:	f280 81cb 	bge.w	80240ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023d54:	f1bc 0f00 	cmp.w	ip, #0
 8023d58:	f2c0 81c7 	blt.w	80240ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023d5c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023d60:	45c4      	cmp	ip, r8
 8023d62:	f280 81c2 	bge.w	80240ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023d66:	b200      	sxth	r0, r0
 8023d68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023d6a:	fb0c 3300 	mla	r3, ip, r0, r3
 8023d6e:	eb04 0803 	add.w	r8, r4, r3
 8023d72:	5ce3      	ldrb	r3, [r4, r3]
 8023d74:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023d78:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023d7c:	2a00      	cmp	r2, #0
 8023d7e:	f000 81a9 	beq.w	80240d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023d82:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023d86:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023d8a:	940e      	str	r4, [sp, #56]	; 0x38
 8023d8c:	0e24      	lsrs	r4, r4, #24
 8023d8e:	9415      	str	r4, [sp, #84]	; 0x54
 8023d90:	b179      	cbz	r1, 8023db2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023d92:	eb08 0c00 	add.w	ip, r8, r0
 8023d96:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023d9a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023d9e:	900a      	str	r0, [sp, #40]	; 0x28
 8023da0:	0e00      	lsrs	r0, r0, #24
 8023da2:	9013      	str	r0, [sp, #76]	; 0x4c
 8023da4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023da8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023dac:	900f      	str	r0, [sp, #60]	; 0x3c
 8023dae:	0e00      	lsrs	r0, r0, #24
 8023db0:	9016      	str	r0, [sp, #88]	; 0x58
 8023db2:	b292      	uxth	r2, r2
 8023db4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023db6:	b289      	uxth	r1, r1
 8023db8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023dba:	fb02 f901 	mul.w	r9, r2, r1
 8023dbe:	0112      	lsls	r2, r2, #4
 8023dc0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023dc4:	eba2 0809 	sub.w	r8, r2, r9
 8023dc8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023dcc:	b289      	uxth	r1, r1
 8023dce:	fa1f f888 	uxth.w	r8, r8
 8023dd2:	1a52      	subs	r2, r2, r1
 8023dd4:	fb08 f000 	mul.w	r0, r8, r0
 8023dd8:	b292      	uxth	r2, r2
 8023dda:	fb02 000e 	mla	r0, r2, lr, r0
 8023dde:	fb01 0004 	mla	r0, r1, r4, r0
 8023de2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023de4:	fb09 0004 	mla	r0, r9, r4, r0
 8023de8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023dec:	2800      	cmp	r0, #0
 8023dee:	f000 80f2 	beq.w	8023fd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023df2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023df6:	d01b      	beq.n	8023e30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8023df8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023dfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e00:	fb0e fa0a 	mul.w	sl, lr, sl
 8023e04:	fb0e fe03 	mul.w	lr, lr, r3
 8023e08:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023e0c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023e10:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023e14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e18:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023e1c:	4453      	add	r3, sl
 8023e1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e22:	0a1b      	lsrs	r3, r3, #8
 8023e24:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023e28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e2c:	ea43 030c 	orr.w	r3, r3, ip
 8023e30:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023e32:	2cff      	cmp	r4, #255	; 0xff
 8023e34:	d021      	beq.n	8023e7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023e36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023e38:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023e3c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023e3e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023e42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023e44:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023e48:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023e4a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023e4e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023e52:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e5a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023e5e:	44de      	add	lr, fp
 8023e60:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e6c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e74:	ea4e 040a 	orr.w	r4, lr, sl
 8023e78:	940e      	str	r4, [sp, #56]	; 0x38
 8023e7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023e7c:	2cff      	cmp	r4, #255	; 0xff
 8023e7e:	d021      	beq.n	8023ec4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023e80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023e82:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023e86:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023e88:	fb04 fb0b 	mul.w	fp, r4, fp
 8023e8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023e8e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023e92:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023e94:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023e98:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023e9c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023ea0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ea4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023ea8:	44de      	add	lr, fp
 8023eaa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023eae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023eb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023eb6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023eba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ebe:	ea4e 040a 	orr.w	r4, lr, sl
 8023ec2:	940a      	str	r4, [sp, #40]	; 0x28
 8023ec4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023ec6:	2cff      	cmp	r4, #255	; 0xff
 8023ec8:	d021      	beq.n	8023f0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8023eca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023ecc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023ed0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023ed2:	fb04 fb0b 	mul.w	fp, r4, fp
 8023ed6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023ed8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023edc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023ede:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ee2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023ee6:	fb04 fa0a 	mul.w	sl, r4, sl
 8023eea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023eee:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023ef2:	44de      	add	lr, fp
 8023ef4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ef8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023efc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023f04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f08:	ea4e 040a 	orr.w	r4, lr, sl
 8023f0c:	940f      	str	r4, [sp, #60]	; 0x3c
 8023f0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023f10:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023f14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f18:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023f1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023f1e:	fb08 fc0c 	mul.w	ip, r8, ip
 8023f22:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023f26:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023f2a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023f2c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023f30:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023f34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023f36:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023f3a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023f3e:	fb08 f80e 	mul.w	r8, r8, lr
 8023f42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f46:	fb02 8303 	mla	r3, r2, r3, r8
 8023f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023f4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f50:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023f54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023f56:	fb01 330a 	mla	r3, r1, sl, r3
 8023f5a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023f5e:	fb09 3901 	mla	r9, r9, r1, r3
 8023f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023f64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023f66:	4343      	muls	r3, r0
 8023f68:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023f6c:	1c58      	adds	r0, r3, #1
 8023f6e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023f72:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023f76:	ea4c 0c09 	orr.w	ip, ip, r9
 8023f7a:	783b      	ldrb	r3, [r7, #0]
 8023f7c:	fa5f f28c 	uxtb.w	r2, ip
 8023f80:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023f84:	fb12 f201 	smulbb	r2, r2, r1
 8023f88:	b2c0      	uxtb	r0, r0
 8023f8a:	fb03 2300 	mla	r3, r3, r0, r2
 8023f8e:	b29b      	uxth	r3, r3
 8023f90:	1c5a      	adds	r2, r3, #1
 8023f92:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023f96:	787a      	ldrb	r2, [r7, #1]
 8023f98:	fb12 f200 	smulbb	r2, r2, r0
 8023f9c:	121b      	asrs	r3, r3, #8
 8023f9e:	703b      	strb	r3, [r7, #0]
 8023fa0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023fa4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023fa8:	fb03 2301 	mla	r3, r3, r1, r2
 8023fac:	b29b      	uxth	r3, r3
 8023fae:	1c5a      	adds	r2, r3, #1
 8023fb0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023fb4:	121b      	asrs	r3, r3, #8
 8023fb6:	707b      	strb	r3, [r7, #1]
 8023fb8:	78bb      	ldrb	r3, [r7, #2]
 8023fba:	fb13 f000 	smulbb	r0, r3, r0
 8023fbe:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023fc2:	fa1f fc8c 	uxth.w	ip, ip
 8023fc6:	f10c 0301 	add.w	r3, ip, #1
 8023fca:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023fce:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023fd2:	f887 c002 	strb.w	ip, [r7, #2]
 8023fd6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023fd8:	3703      	adds	r7, #3
 8023fda:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023fdc:	441a      	add	r2, r3
 8023fde:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023fe0:	441d      	add	r5, r3
 8023fe2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023fe4:	9229      	str	r2, [sp, #164]	; 0xa4
 8023fe6:	3b01      	subs	r3, #1
 8023fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8023fea:	e69c      	b.n	8023d26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023fec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023fee:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023ff0:	441c      	add	r4, r3
 8023ff2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ff4:	441d      	add	r5, r3
 8023ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ff8:	9429      	str	r4, [sp, #164]	; 0xa4
 8023ffa:	3b01      	subs	r3, #1
 8023ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8023ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024000:	3303      	adds	r3, #3
 8024002:	930c      	str	r3, [sp, #48]	; 0x30
 8024004:	e66f      	b.n	8023ce6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024006:	d026      	beq.n	8024056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802400a:	982b      	ldr	r0, [sp, #172]	; 0xac
 802400c:	3b01      	subs	r3, #1
 802400e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024010:	fb00 4003 	mla	r0, r0, r3, r4
 8024014:	1400      	asrs	r0, r0, #16
 8024016:	f53f ae83 	bmi.w	8023d20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802401a:	3901      	subs	r1, #1
 802401c:	4288      	cmp	r0, r1
 802401e:	f6bf ae7f 	bge.w	8023d20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024022:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8024024:	fb01 5303 	mla	r3, r1, r3, r5
 8024028:	141b      	asrs	r3, r3, #16
 802402a:	f53f ae79 	bmi.w	8023d20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802402e:	3a01      	subs	r2, #1
 8024030:	4293      	cmp	r3, r2
 8024032:	f6bf ae75 	bge.w	8023d20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024038:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802403c:	f103 0e03 	add.w	lr, r3, #3
 8024040:	f1bb 0f00 	cmp.w	fp, #0
 8024044:	dc71      	bgt.n	802412a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024048:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802404c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802404e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024052:	4423      	add	r3, r4
 8024054:	930c      	str	r3, [sp, #48]	; 0x30
 8024056:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024058:	2b00      	cmp	r3, #0
 802405a:	f340 81b5 	ble.w	80243c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802405e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024062:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024064:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024068:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802406c:	eef0 6a62 	vmov.f32	s13, s5
 8024070:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024074:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024078:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802407c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8024080:	eef0 6a43 	vmov.f32	s13, s6
 8024084:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024088:	ee16 5a90 	vmov	r5, s13
 802408c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024090:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024094:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024098:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802409c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80240a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80240a4:	ee12 2a90 	vmov	r2, s5
 80240a8:	eef0 2a47 	vmov.f32	s5, s14
 80240ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80240b0:	ee13 2a10 	vmov	r2, s6
 80240b4:	932b      	str	r3, [sp, #172]	; 0xac
 80240b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80240b8:	eeb0 3a67 	vmov.f32	s6, s15
 80240bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80240c0:	932c      	str	r3, [sp, #176]	; 0xb0
 80240c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80240c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80240c6:	3b01      	subs	r3, #1
 80240c8:	9319      	str	r3, [sp, #100]	; 0x64
 80240ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80240cc:	bf08      	it	eq
 80240ce:	4613      	moveq	r3, r2
 80240d0:	9309      	str	r3, [sp, #36]	; 0x24
 80240d2:	e5fa      	b.n	8023cca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80240d4:	2900      	cmp	r1, #0
 80240d6:	f43f ae6c 	beq.w	8023db2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80240da:	f818 0000 	ldrb.w	r0, [r8, r0]
 80240de:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80240e2:	900a      	str	r0, [sp, #40]	; 0x28
 80240e4:	0e00      	lsrs	r0, r0, #24
 80240e6:	9013      	str	r0, [sp, #76]	; 0x4c
 80240e8:	e663      	b.n	8023db2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80240ea:	f113 0801 	adds.w	r8, r3, #1
 80240ee:	f53f af72 	bmi.w	8023fd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80240f2:	4540      	cmp	r0, r8
 80240f4:	f6ff af6f 	blt.w	8023fd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80240f8:	f11c 0801 	adds.w	r8, ip, #1
 80240fc:	f53f af6b 	bmi.w	8023fd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024100:	45c6      	cmp	lr, r8
 8024102:	f6ff af68 	blt.w	8023fd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024106:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8024108:	b200      	sxth	r0, r0
 802410a:	9302      	str	r3, [sp, #8]
 802410c:	fa0f f38e 	sxth.w	r3, lr
 8024110:	9000      	str	r0, [sp, #0]
 8024112:	9301      	str	r3, [sp, #4]
 8024114:	4633      	mov	r3, r6
 8024116:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024118:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802411c:	e9cd c203 	strd	ip, r2, [sp, #12]
 8024120:	4639      	mov	r1, r7
 8024122:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024124:	f7ff fc74 	bl	8023a10 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8024128:	e755      	b.n	8023fd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802412a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802412c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024130:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024132:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024136:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024138:	1427      	asrs	r7, r4, #16
 802413a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802413c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024140:	142b      	asrs	r3, r5, #16
 8024142:	fb01 7303 	mla	r3, r1, r3, r7
 8024146:	18e7      	adds	r7, r4, r3
 8024148:	5ce3      	ldrb	r3, [r4, r3]
 802414a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802414e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024152:	2a00      	cmp	r2, #0
 8024154:	f000 812e 	beq.w	80243b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8024158:	f897 8001 	ldrb.w	r8, [r7, #1]
 802415c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8024160:	9410      	str	r4, [sp, #64]	; 0x40
 8024162:	0e24      	lsrs	r4, r4, #24
 8024164:	9417      	str	r4, [sp, #92]	; 0x5c
 8024166:	b170      	cbz	r0, 8024186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8024168:	eb07 0801 	add.w	r8, r7, r1
 802416c:	5c79      	ldrb	r1, [r7, r1]
 802416e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024172:	910b      	str	r1, [sp, #44]	; 0x2c
 8024174:	0e09      	lsrs	r1, r1, #24
 8024176:	9114      	str	r1, [sp, #80]	; 0x50
 8024178:	f898 1001 	ldrb.w	r1, [r8, #1]
 802417c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024180:	9111      	str	r1, [sp, #68]	; 0x44
 8024182:	0e09      	lsrs	r1, r1, #24
 8024184:	9118      	str	r1, [sp, #96]	; 0x60
 8024186:	b292      	uxth	r2, r2
 8024188:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802418a:	b280      	uxth	r0, r0
 802418c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802418e:	fb02 f900 	mul.w	r9, r2, r0
 8024192:	0112      	lsls	r2, r2, #4
 8024194:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024198:	eba2 0809 	sub.w	r8, r2, r9
 802419c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80241a0:	b280      	uxth	r0, r0
 80241a2:	fa1f f888 	uxth.w	r8, r8
 80241a6:	1a12      	subs	r2, r2, r0
 80241a8:	fb08 f101 	mul.w	r1, r8, r1
 80241ac:	b292      	uxth	r2, r2
 80241ae:	fb02 110c 	mla	r1, r2, ip, r1
 80241b2:	fb00 1104 	mla	r1, r0, r4, r1
 80241b6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80241b8:	fb09 1104 	mla	r1, r9, r4, r1
 80241bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80241c0:	2900      	cmp	r1, #0
 80241c2:	f000 80ec 	beq.w	802439e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80241c6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80241ca:	d019      	beq.n	8024200 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80241cc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80241d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80241d4:	fb0c fa0a 	mul.w	sl, ip, sl
 80241d8:	fb0c fc03 	mul.w	ip, ip, r3
 80241dc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80241e0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80241e4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80241e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80241ec:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80241f0:	4453      	add	r3, sl
 80241f2:	0a3f      	lsrs	r7, r7, #8
 80241f4:	0a1b      	lsrs	r3, r3, #8
 80241f6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80241fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80241fe:	433b      	orrs	r3, r7
 8024200:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024202:	2cff      	cmp	r4, #255	; 0xff
 8024204:	d020      	beq.n	8024248 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8024206:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024208:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802420c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802420e:	4367      	muls	r7, r4
 8024210:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024212:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024216:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802421a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802421c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024220:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024224:	fb04 fa0a 	mul.w	sl, r4, sl
 8024228:	44bc      	add	ip, r7
 802422a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802422e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024232:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024236:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802423a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802423e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024242:	ea4c 040a 	orr.w	r4, ip, sl
 8024246:	9410      	str	r4, [sp, #64]	; 0x40
 8024248:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802424a:	2cff      	cmp	r4, #255	; 0xff
 802424c:	d020      	beq.n	8024290 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 802424e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024250:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024254:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024256:	4367      	muls	r7, r4
 8024258:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802425a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802425e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024262:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024264:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024268:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802426c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024270:	44bc      	add	ip, r7
 8024272:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024276:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802427a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802427e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024282:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024286:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802428a:	ea4c 040a 	orr.w	r4, ip, sl
 802428e:	940b      	str	r4, [sp, #44]	; 0x2c
 8024290:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024292:	2cff      	cmp	r4, #255	; 0xff
 8024294:	d020      	beq.n	80242d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8024296:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024298:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802429c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802429e:	4367      	muls	r7, r4
 80242a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80242a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80242a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80242aa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80242ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80242b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80242b8:	44bc      	add	ip, r7
 80242ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80242be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80242c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80242d2:	ea4c 040a 	orr.w	r4, ip, sl
 80242d6:	9411      	str	r4, [sp, #68]	; 0x44
 80242d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80242da:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80242de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80242e2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80242e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80242e8:	fb08 f707 	mul.w	r7, r8, r7
 80242ec:	fb02 770c 	mla	r7, r2, ip, r7
 80242f0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80242f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80242f6:	fb00 770c 	mla	r7, r0, ip, r7
 80242fa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80242fe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024300:	fb09 770c 	mla	r7, r9, ip, r7
 8024304:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024308:	fb08 f80c 	mul.w	r8, r8, ip
 802430c:	0a3f      	lsrs	r7, r7, #8
 802430e:	fb02 8303 	mla	r3, r2, r3, r8
 8024312:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024314:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024318:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802431c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802431e:	fb00 330a 	mla	r3, r0, sl, r3
 8024322:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024326:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024328:	fb09 3c0c 	mla	ip, r9, ip, r3
 802432c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802432e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024332:	434b      	muls	r3, r1
 8024334:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024338:	1c59      	adds	r1, r3, #1
 802433a:	ea47 070c 	orr.w	r7, r7, ip
 802433e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024342:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8024346:	b2fa      	uxtb	r2, r7
 8024348:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802434c:	fb12 f200 	smulbb	r2, r2, r0
 8024350:	b2c9      	uxtb	r1, r1
 8024352:	fb03 2301 	mla	r3, r3, r1, r2
 8024356:	b29b      	uxth	r3, r3
 8024358:	1c5a      	adds	r2, r3, #1
 802435a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802435e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8024362:	fb12 f201 	smulbb	r2, r2, r1
 8024366:	121b      	asrs	r3, r3, #8
 8024368:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802436c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8024370:	0c3f      	lsrs	r7, r7, #16
 8024372:	fb03 2300 	mla	r3, r3, r0, r2
 8024376:	b29b      	uxth	r3, r3
 8024378:	1c5a      	adds	r2, r3, #1
 802437a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802437e:	121b      	asrs	r3, r3, #8
 8024380:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8024384:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024388:	fb13 f101 	smulbb	r1, r3, r1
 802438c:	fb07 1700 	mla	r7, r7, r0, r1
 8024390:	b2bf      	uxth	r7, r7
 8024392:	1c7b      	adds	r3, r7, #1
 8024394:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024398:	123f      	asrs	r7, r7, #8
 802439a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802439e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80243a0:	f10e 0e03 	add.w	lr, lr, #3
 80243a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80243a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80243aa:	441a      	add	r2, r3
 80243ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243ae:	9229      	str	r2, [sp, #164]	; 0xa4
 80243b0:	441d      	add	r5, r3
 80243b2:	e645      	b.n	8024040 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80243b4:	2800      	cmp	r0, #0
 80243b6:	f43f aee6 	beq.w	8024186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80243ba:	5c79      	ldrb	r1, [r7, r1]
 80243bc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80243c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80243c2:	0e09      	lsrs	r1, r1, #24
 80243c4:	9114      	str	r1, [sp, #80]	; 0x50
 80243c6:	e6de      	b.n	8024186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80243c8:	b01f      	add	sp, #124	; 0x7c
 80243ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080243ce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80243ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243d2:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80243d6:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80243da:	2d00      	cmp	r5, #0
 80243dc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80243e0:	fb05 700e 	mla	r0, r5, lr, r7
 80243e4:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80243e8:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80243ec:	eb02 0800 	add.w	r8, r2, r0
 80243f0:	f2c0 8105 	blt.w	80245fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80243f4:	45a9      	cmp	r9, r5
 80243f6:	f340 8102 	ble.w	80245fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80243fa:	2f00      	cmp	r7, #0
 80243fc:	f2c0 80fd 	blt.w	80245fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8024400:	45be      	cmp	lr, r7
 8024402:	f340 80fa 	ble.w	80245fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8024406:	5c12      	ldrb	r2, [r2, r0]
 8024408:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802440c:	1c7a      	adds	r2, r7, #1
 802440e:	f100 80f9 	bmi.w	8024604 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8024412:	4596      	cmp	lr, r2
 8024414:	f340 80f6 	ble.w	8024604 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8024418:	2c00      	cmp	r4, #0
 802441a:	f000 80f5 	beq.w	8024608 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 802441e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024422:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024426:	3501      	adds	r5, #1
 8024428:	f100 80f2 	bmi.w	8024610 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 802442c:	45a9      	cmp	r9, r5
 802442e:	f340 80ef 	ble.w	8024610 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8024432:	f1bc 0f00 	cmp.w	ip, #0
 8024436:	f000 80ee 	beq.w	8024616 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 802443a:	2f00      	cmp	r7, #0
 802443c:	f2c0 80e6 	blt.w	802460c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8024440:	45be      	cmp	lr, r7
 8024442:	f340 80e3 	ble.w	802460c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8024446:	f818 200e 	ldrb.w	r2, [r8, lr]
 802444a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802444e:	3701      	adds	r7, #1
 8024450:	f100 80e4 	bmi.w	802461c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8024454:	45be      	cmp	lr, r7
 8024456:	f340 80e1 	ble.w	802461c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 802445a:	2c00      	cmp	r4, #0
 802445c:	f000 80e0 	beq.w	8024620 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8024460:	44c6      	add	lr, r8
 8024462:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802446a:	b2a3      	uxth	r3, r4
 802446c:	fa1f fc8c 	uxth.w	ip, ip
 8024470:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024474:	fb0c fe03 	mul.w	lr, ip, r3
 8024478:	011b      	lsls	r3, r3, #4
 802447a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802447e:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8024482:	eba3 070e 	sub.w	r7, r3, lr
 8024486:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802448a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802448e:	fa1f f48c 	uxth.w	r4, ip
 8024492:	b2bf      	uxth	r7, r7
 8024494:	1b1b      	subs	r3, r3, r4
 8024496:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802449a:	fb07 fc0a 	mul.w	ip, r7, sl
 802449e:	b29b      	uxth	r3, r3
 80244a0:	fb03 cc0b 	mla	ip, r3, fp, ip
 80244a4:	9300      	str	r3, [sp, #0]
 80244a6:	fb04 cc09 	mla	ip, r4, r9, ip
 80244aa:	fb0e cc08 	mla	ip, lr, r8, ip
 80244ae:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80244b2:	9301      	str	r3, [sp, #4]
 80244b4:	2b00      	cmp	r3, #0
 80244b6:	f000 809d 	beq.w	80245f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80244ba:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80244be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80244c2:	fb0b fc0c 	mul.w	ip, fp, ip
 80244c6:	fb0b f606 	mul.w	r6, fp, r6
 80244ca:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80244ce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80244d2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80244d6:	44dc      	add	ip, fp
 80244d8:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80244dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80244e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80244e4:	fb0a fb0b 	mul.w	fp, sl, fp
 80244e8:	fb0a fa00 	mul.w	sl, sl, r0
 80244ec:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80244f0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80244f4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80244f8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80244fc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024500:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024504:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024508:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802450c:	0a36      	lsrs	r6, r6, #8
 802450e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024512:	44dc      	add	ip, fp
 8024514:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024518:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802451c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024520:	fb09 fb0b 	mul.w	fp, r9, fp
 8024524:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024528:	fb09 f905 	mul.w	r9, r9, r5
 802452c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8024530:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024534:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8024538:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802453c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024540:	fb0c fc07 	mul.w	ip, ip, r7
 8024544:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8024548:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802454c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024550:	4458      	add	r0, fp
 8024552:	fb08 f505 	mul.w	r5, r8, r5
 8024556:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802455a:	fb08 f802 	mul.w	r8, r8, r2
 802455e:	0a00      	lsrs	r0, r0, #8
 8024560:	0a2a      	lsrs	r2, r5, #8
 8024562:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8024566:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802456a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802456e:	4415      	add	r5, r2
 8024570:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024574:	0a2d      	lsrs	r5, r5, #8
 8024576:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802457a:	9a00      	ldr	r2, [sp, #0]
 802457c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024580:	fb03 cc02 	mla	ip, r3, r2, ip
 8024584:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024588:	9b01      	ldr	r3, [sp, #4]
 802458a:	fb05 c50e 	mla	r5, r5, lr, ip
 802458e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024592:	43db      	mvns	r3, r3
 8024594:	fb00 5004 	mla	r0, r0, r4, r5
 8024598:	b2db      	uxtb	r3, r3
 802459a:	0a00      	lsrs	r0, r0, #8
 802459c:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80245a0:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80245a4:	4378      	muls	r0, r7
 80245a6:	fb02 0006 	mla	r0, r2, r6, r0
 80245aa:	780a      	ldrb	r2, [r1, #0]
 80245ac:	fb0e 0e08 	mla	lr, lr, r8, r0
 80245b0:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80245b4:	fb04 e000 	mla	r0, r4, r0, lr
 80245b8:	fb02 f403 	mul.w	r4, r2, r3
 80245bc:	0a00      	lsrs	r0, r0, #8
 80245be:	1c62      	adds	r2, r4, #1
 80245c0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80245c4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80245c8:	4328      	orrs	r0, r5
 80245ca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80245ce:	700a      	strb	r2, [r1, #0]
 80245d0:	784a      	ldrb	r2, [r1, #1]
 80245d2:	435a      	muls	r2, r3
 80245d4:	1c54      	adds	r4, r2, #1
 80245d6:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80245da:	0a02      	lsrs	r2, r0, #8
 80245dc:	0c00      	lsrs	r0, r0, #16
 80245de:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80245e2:	704a      	strb	r2, [r1, #1]
 80245e4:	788a      	ldrb	r2, [r1, #2]
 80245e6:	4353      	muls	r3, r2
 80245e8:	1c5a      	adds	r2, r3, #1
 80245ea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80245ee:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80245f2:	7088      	strb	r0, [r1, #2]
 80245f4:	b003      	add	sp, #12
 80245f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245fa:	2600      	movs	r6, #0
 80245fc:	e706      	b.n	802440c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80245fe:	2000      	movs	r0, #0
 8024600:	4606      	mov	r6, r0
 8024602:	e710      	b.n	8024426 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8024604:	2000      	movs	r0, #0
 8024606:	e70e      	b.n	8024426 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8024608:	4620      	mov	r0, r4
 802460a:	e70c      	b.n	8024426 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802460c:	2500      	movs	r5, #0
 802460e:	e71e      	b.n	802444e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8024610:	2200      	movs	r2, #0
 8024612:	4615      	mov	r5, r2
 8024614:	e729      	b.n	802446a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8024616:	4662      	mov	r2, ip
 8024618:	4665      	mov	r5, ip
 802461a:	e726      	b.n	802446a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802461c:	2200      	movs	r2, #0
 802461e:	e724      	b.n	802446a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8024620:	4622      	mov	r2, r4
 8024622:	e722      	b.n	802446a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08024624 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024628:	b09b      	sub	sp, #108	; 0x6c
 802462a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802462e:	9218      	str	r2, [sp, #96]	; 0x60
 8024630:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024632:	9019      	str	r0, [sp, #100]	; 0x64
 8024634:	9116      	str	r1, [sp, #88]	; 0x58
 8024636:	6850      	ldr	r0, [r2, #4]
 8024638:	9307      	str	r3, [sp, #28]
 802463a:	6812      	ldr	r2, [r2, #0]
 802463c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 802463e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024642:	fb00 1303 	mla	r3, r0, r3, r1
 8024646:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802464a:	18d3      	adds	r3, r2, r3
 802464c:	930a      	str	r3, [sp, #40]	; 0x28
 802464e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024650:	681b      	ldr	r3, [r3, #0]
 8024652:	930f      	str	r3, [sp, #60]	; 0x3c
 8024654:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024656:	685e      	ldr	r6, [r3, #4]
 8024658:	3604      	adds	r6, #4
 802465a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802465c:	2b00      	cmp	r3, #0
 802465e:	dc03      	bgt.n	8024668 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8024660:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024662:	2b00      	cmp	r3, #0
 8024664:	f340 834f 	ble.w	8024d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8024668:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802466a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802466e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024672:	1e48      	subs	r0, r1, #1
 8024674:	1e57      	subs	r7, r2, #1
 8024676:	9b07      	ldr	r3, [sp, #28]
 8024678:	2b00      	cmp	r3, #0
 802467a:	f340 8178 	ble.w	802496e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802467e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024680:	142b      	asrs	r3, r5, #16
 8024682:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024686:	d406      	bmi.n	8024696 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024688:	4584      	cmp	ip, r0
 802468a:	da04      	bge.n	8024696 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802468c:	2b00      	cmp	r3, #0
 802468e:	db02      	blt.n	8024696 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024690:	42bb      	cmp	r3, r7
 8024692:	f2c0 816d 	blt.w	8024970 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8024696:	f11c 0c01 	adds.w	ip, ip, #1
 802469a:	f100 815b 	bmi.w	8024954 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802469e:	4561      	cmp	r1, ip
 80246a0:	f2c0 8158 	blt.w	8024954 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80246a4:	3301      	adds	r3, #1
 80246a6:	f100 8155 	bmi.w	8024954 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80246aa:	429a      	cmp	r2, r3
 80246ac:	f2c0 8152 	blt.w	8024954 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80246b0:	9b07      	ldr	r3, [sp, #28]
 80246b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80246b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80246b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80246b8:	2b00      	cmp	r3, #0
 80246ba:	f340 8178 	ble.w	80249ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80246be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80246c0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80246c4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80246c8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80246cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80246ce:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80246d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80246d4:	141b      	asrs	r3, r3, #16
 80246d6:	f100 81ba 	bmi.w	8024a4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80246da:	f101 38ff 	add.w	r8, r1, #4294967295
 80246de:	4543      	cmp	r3, r8
 80246e0:	f280 81b5 	bge.w	8024a4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80246e4:	f1bc 0f00 	cmp.w	ip, #0
 80246e8:	f2c0 81b1 	blt.w	8024a4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80246ec:	f10e 38ff 	add.w	r8, lr, #4294967295
 80246f0:	45c4      	cmp	ip, r8
 80246f2:	f280 81ac 	bge.w	8024a4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80246f6:	b209      	sxth	r1, r1
 80246f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80246fa:	fb0c 3301 	mla	r3, ip, r1, r3
 80246fe:	eb04 0803 	add.w	r8, r4, r3
 8024702:	5ce3      	ldrb	r3, [r4, r3]
 8024704:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024708:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802470c:	2a00      	cmp	r2, #0
 802470e:	f000 8193 	beq.w	8024a38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8024712:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024716:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802471a:	940b      	str	r4, [sp, #44]	; 0x2c
 802471c:	0e24      	lsrs	r4, r4, #24
 802471e:	9412      	str	r4, [sp, #72]	; 0x48
 8024720:	b178      	cbz	r0, 8024742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024722:	eb08 0c01 	add.w	ip, r8, r1
 8024726:	f818 1001 	ldrb.w	r1, [r8, r1]
 802472a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802472e:	9108      	str	r1, [sp, #32]
 8024730:	0e09      	lsrs	r1, r1, #24
 8024732:	9110      	str	r1, [sp, #64]	; 0x40
 8024734:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024738:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802473c:	910c      	str	r1, [sp, #48]	; 0x30
 802473e:	0e09      	lsrs	r1, r1, #24
 8024740:	9113      	str	r1, [sp, #76]	; 0x4c
 8024742:	b292      	uxth	r2, r2
 8024744:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024746:	b280      	uxth	r0, r0
 8024748:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802474a:	fb02 f900 	mul.w	r9, r2, r0
 802474e:	0112      	lsls	r2, r2, #4
 8024750:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024754:	eba2 0809 	sub.w	r8, r2, r9
 8024758:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802475c:	b280      	uxth	r0, r0
 802475e:	fa1f f888 	uxth.w	r8, r8
 8024762:	1a12      	subs	r2, r2, r0
 8024764:	fb08 f101 	mul.w	r1, r8, r1
 8024768:	b292      	uxth	r2, r2
 802476a:	fb02 110e 	mla	r1, r2, lr, r1
 802476e:	fb00 1104 	mla	r1, r0, r4, r1
 8024772:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024774:	fb09 1104 	mla	r1, r9, r4, r1
 8024778:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802477c:	2900      	cmp	r1, #0
 802477e:	f000 80de 	beq.w	802493e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024782:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024786:	d01b      	beq.n	80247c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8024788:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802478c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024790:	fb0e fa0a 	mul.w	sl, lr, sl
 8024794:	fb0e fe03 	mul.w	lr, lr, r3
 8024798:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802479c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80247a0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80247a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80247a8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80247ac:	4453      	add	r3, sl
 80247ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247b2:	0a1b      	lsrs	r3, r3, #8
 80247b4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80247b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80247bc:	ea43 030c 	orr.w	r3, r3, ip
 80247c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80247c2:	2cff      	cmp	r4, #255	; 0xff
 80247c4:	d021      	beq.n	802480a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80247c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80247c8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80247cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80247ce:	fb04 fb0b 	mul.w	fp, r4, fp
 80247d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80247d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80247d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80247da:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80247de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80247e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80247e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80247ea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80247ee:	44de      	add	lr, fp
 80247f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80247f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80247f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80247fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024800:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024804:	ea4e 040a 	orr.w	r4, lr, sl
 8024808:	940b      	str	r4, [sp, #44]	; 0x2c
 802480a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802480c:	2cff      	cmp	r4, #255	; 0xff
 802480e:	d021      	beq.n	8024854 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024810:	9c08      	ldr	r4, [sp, #32]
 8024812:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024816:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024818:	fb04 fb0b 	mul.w	fp, r4, fp
 802481c:	9c08      	ldr	r4, [sp, #32]
 802481e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024822:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024824:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024828:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802482c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024830:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024834:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024838:	44de      	add	lr, fp
 802483a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802483e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024842:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024846:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802484a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802484e:	ea4e 040a 	orr.w	r4, lr, sl
 8024852:	9408      	str	r4, [sp, #32]
 8024854:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024856:	2cff      	cmp	r4, #255	; 0xff
 8024858:	d021      	beq.n	802489e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802485a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802485c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024860:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024862:	fb04 fb0b 	mul.w	fp, r4, fp
 8024866:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024868:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802486c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802486e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024872:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024876:	fb04 fa0a 	mul.w	sl, r4, sl
 802487a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802487e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024882:	44de      	add	lr, fp
 8024884:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024888:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802488c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024890:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024894:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024898:	ea4e 040a 	orr.w	r4, lr, sl
 802489c:	940c      	str	r4, [sp, #48]	; 0x30
 802489e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80248a0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80248a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248a8:	43c9      	mvns	r1, r1
 80248aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80248ae:	9c08      	ldr	r4, [sp, #32]
 80248b0:	b2c9      	uxtb	r1, r1
 80248b2:	fb08 fc0c 	mul.w	ip, r8, ip
 80248b6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80248ba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80248be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80248c0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80248c4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80248c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80248ca:	fb09 cc0e 	mla	ip, r9, lr, ip
 80248ce:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80248d2:	fb08 f80e 	mul.w	r8, r8, lr
 80248d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248da:	fb02 8303 	mla	r3, r2, r3, r8
 80248de:	9a08      	ldr	r2, [sp, #32]
 80248e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248e4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80248e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80248ea:	fb00 330a 	mla	r3, r0, sl, r3
 80248ee:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80248f2:	fb09 3900 	mla	r9, r9, r0, r3
 80248f6:	783b      	ldrb	r3, [r7, #0]
 80248f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80248fc:	fb03 f201 	mul.w	r2, r3, r1
 8024900:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024904:	1c53      	adds	r3, r2, #1
 8024906:	ea4c 0c09 	orr.w	ip, ip, r9
 802490a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802490e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024912:	703b      	strb	r3, [r7, #0]
 8024914:	787b      	ldrb	r3, [r7, #1]
 8024916:	434b      	muls	r3, r1
 8024918:	1c5a      	adds	r2, r3, #1
 802491a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802491e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024922:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024926:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802492a:	707b      	strb	r3, [r7, #1]
 802492c:	78bb      	ldrb	r3, [r7, #2]
 802492e:	4359      	muls	r1, r3
 8024930:	1c4b      	adds	r3, r1, #1
 8024932:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024936:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802493a:	f887 c002 	strb.w	ip, [r7, #2]
 802493e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024940:	3703      	adds	r7, #3
 8024942:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024944:	441a      	add	r2, r3
 8024946:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024948:	441d      	add	r5, r3
 802494a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802494c:	9225      	str	r2, [sp, #148]	; 0x94
 802494e:	3b01      	subs	r3, #1
 8024950:	9317      	str	r3, [sp, #92]	; 0x5c
 8024952:	e6b0      	b.n	80246b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024954:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024956:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024958:	441c      	add	r4, r3
 802495a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802495c:	441d      	add	r5, r3
 802495e:	9b07      	ldr	r3, [sp, #28]
 8024960:	9425      	str	r4, [sp, #148]	; 0x94
 8024962:	3b01      	subs	r3, #1
 8024964:	9307      	str	r3, [sp, #28]
 8024966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024968:	3303      	adds	r3, #3
 802496a:	930a      	str	r3, [sp, #40]	; 0x28
 802496c:	e683      	b.n	8024676 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802496e:	d026      	beq.n	80249be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8024970:	9b07      	ldr	r3, [sp, #28]
 8024972:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024974:	3b01      	subs	r3, #1
 8024976:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024978:	fb00 4003 	mla	r0, r0, r3, r4
 802497c:	1400      	asrs	r0, r0, #16
 802497e:	f53f ae97 	bmi.w	80246b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024982:	3901      	subs	r1, #1
 8024984:	4288      	cmp	r0, r1
 8024986:	f6bf ae93 	bge.w	80246b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802498a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802498c:	fb01 5303 	mla	r3, r1, r3, r5
 8024990:	141b      	asrs	r3, r3, #16
 8024992:	f53f ae8d 	bmi.w	80246b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024996:	3a01      	subs	r2, #1
 8024998:	4293      	cmp	r3, r2
 802499a:	f6bf ae89 	bge.w	80246b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802499e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249a0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80249a4:	f103 0e03 	add.w	lr, r3, #3
 80249a8:	f1bb 0f00 	cmp.w	fp, #0
 80249ac:	dc6d      	bgt.n	8024a8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80249ae:	9b07      	ldr	r3, [sp, #28]
 80249b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80249b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80249ba:	4423      	add	r3, r4
 80249bc:	930a      	str	r3, [sp, #40]	; 0x28
 80249be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80249c0:	2b00      	cmp	r3, #0
 80249c2:	f340 81a0 	ble.w	8024d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80249c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80249ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80249cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80249d0:	eeb0 6a62 	vmov.f32	s12, s5
 80249d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80249d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80249dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80249e0:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80249e4:	eeb0 6a43 	vmov.f32	s12, s6
 80249e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80249ec:	ee16 5a10 	vmov	r5, s12
 80249f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80249f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80249f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80249fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024a00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024a04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024a08:	ee12 2a90 	vmov	r2, s5
 8024a0c:	eef0 2a47 	vmov.f32	s5, s14
 8024a10:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a14:	ee13 2a10 	vmov	r2, s6
 8024a18:	9327      	str	r3, [sp, #156]	; 0x9c
 8024a1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a1c:	eeb0 3a67 	vmov.f32	s6, s15
 8024a20:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a24:	9328      	str	r3, [sp, #160]	; 0xa0
 8024a26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024a28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024a2a:	3b01      	subs	r3, #1
 8024a2c:	9316      	str	r3, [sp, #88]	; 0x58
 8024a2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a30:	bf08      	it	eq
 8024a32:	4613      	moveq	r3, r2
 8024a34:	9307      	str	r3, [sp, #28]
 8024a36:	e610      	b.n	802465a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8024a38:	2800      	cmp	r0, #0
 8024a3a:	f43f ae82 	beq.w	8024742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024a3e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024a42:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024a46:	9108      	str	r1, [sp, #32]
 8024a48:	0e09      	lsrs	r1, r1, #24
 8024a4a:	9110      	str	r1, [sp, #64]	; 0x40
 8024a4c:	e679      	b.n	8024742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024a4e:	f113 0801 	adds.w	r8, r3, #1
 8024a52:	f53f af74 	bmi.w	802493e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024a56:	4541      	cmp	r1, r8
 8024a58:	f6ff af71 	blt.w	802493e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024a5c:	f11c 0801 	adds.w	r8, ip, #1
 8024a60:	f53f af6d 	bmi.w	802493e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024a64:	45c6      	cmp	lr, r8
 8024a66:	f6ff af6a 	blt.w	802493e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024a6a:	b209      	sxth	r1, r1
 8024a6c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024a70:	fa0f f38e 	sxth.w	r3, lr
 8024a74:	9100      	str	r1, [sp, #0]
 8024a76:	4639      	mov	r1, r7
 8024a78:	9301      	str	r3, [sp, #4]
 8024a7a:	4633      	mov	r3, r6
 8024a7c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8024a80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024a82:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024a84:	f7ff fca3 	bl	80243ce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8024a88:	e759      	b.n	802493e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024a8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024a8c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024a90:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024a92:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024a96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024a98:	1427      	asrs	r7, r4, #16
 8024a9a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024a9c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024aa0:	142b      	asrs	r3, r5, #16
 8024aa2:	fb01 7303 	mla	r3, r1, r3, r7
 8024aa6:	18e7      	adds	r7, r4, r3
 8024aa8:	5ce3      	ldrb	r3, [r4, r3]
 8024aaa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024aae:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024ab2:	2a00      	cmp	r2, #0
 8024ab4:	f000 811d 	beq.w	8024cf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8024ab8:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024abc:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8024ac0:	940d      	str	r4, [sp, #52]	; 0x34
 8024ac2:	0e24      	lsrs	r4, r4, #24
 8024ac4:	9414      	str	r4, [sp, #80]	; 0x50
 8024ac6:	b170      	cbz	r0, 8024ae6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024ac8:	eb07 0801 	add.w	r8, r7, r1
 8024acc:	5c79      	ldrb	r1, [r7, r1]
 8024ace:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024ad2:	9109      	str	r1, [sp, #36]	; 0x24
 8024ad4:	0e09      	lsrs	r1, r1, #24
 8024ad6:	9111      	str	r1, [sp, #68]	; 0x44
 8024ad8:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024adc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024ae0:	910e      	str	r1, [sp, #56]	; 0x38
 8024ae2:	0e09      	lsrs	r1, r1, #24
 8024ae4:	9115      	str	r1, [sp, #84]	; 0x54
 8024ae6:	b292      	uxth	r2, r2
 8024ae8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024aea:	b280      	uxth	r0, r0
 8024aec:	fb02 f900 	mul.w	r9, r2, r0
 8024af0:	0112      	lsls	r2, r2, #4
 8024af2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024af6:	eba2 0809 	sub.w	r8, r2, r9
 8024afa:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024afe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024b00:	b280      	uxth	r0, r0
 8024b02:	fa1f f888 	uxth.w	r8, r8
 8024b06:	1a09      	subs	r1, r1, r0
 8024b08:	fb08 f202 	mul.w	r2, r8, r2
 8024b0c:	b289      	uxth	r1, r1
 8024b0e:	fb01 220c 	mla	r2, r1, ip, r2
 8024b12:	fb00 2204 	mla	r2, r0, r4, r2
 8024b16:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024b18:	fb09 2204 	mla	r2, r9, r4, r2
 8024b1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024b20:	2a00      	cmp	r2, #0
 8024b22:	f000 80db 	beq.w	8024cdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8024b26:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024b2a:	d019      	beq.n	8024b60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8024b2c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024b30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b34:	fb0c fa0a 	mul.w	sl, ip, sl
 8024b38:	fb0c fc03 	mul.w	ip, ip, r3
 8024b3c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024b40:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024b44:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024b48:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b4c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024b50:	4453      	add	r3, sl
 8024b52:	0a3f      	lsrs	r7, r7, #8
 8024b54:	0a1b      	lsrs	r3, r3, #8
 8024b56:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024b5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b5e:	433b      	orrs	r3, r7
 8024b60:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024b62:	2cff      	cmp	r4, #255	; 0xff
 8024b64:	d020      	beq.n	8024ba8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8024b66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024b68:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024b6c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024b6e:	4367      	muls	r7, r4
 8024b70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024b72:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024b76:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024b7a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024b7c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024b80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b84:	fb04 fa0a 	mul.w	sl, r4, sl
 8024b88:	44bc      	add	ip, r7
 8024b8a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024b8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b92:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024b96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ba2:	ea4c 040a 	orr.w	r4, ip, sl
 8024ba6:	940d      	str	r4, [sp, #52]	; 0x34
 8024ba8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024baa:	2cff      	cmp	r4, #255	; 0xff
 8024bac:	d020      	beq.n	8024bf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8024bae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024bb0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024bb4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024bb6:	4367      	muls	r7, r4
 8024bb8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024bba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024bbe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024bc2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024bc4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024bc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024bcc:	fb04 fa0a 	mul.w	sl, r4, sl
 8024bd0:	44bc      	add	ip, r7
 8024bd2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024bd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024bda:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024bde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024be2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024be6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024bea:	ea4c 040a 	orr.w	r4, ip, sl
 8024bee:	9409      	str	r4, [sp, #36]	; 0x24
 8024bf0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024bf2:	2cff      	cmp	r4, #255	; 0xff
 8024bf4:	d020      	beq.n	8024c38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8024bf6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024bf8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024bfc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024bfe:	4367      	muls	r7, r4
 8024c00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024c02:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c06:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024c0a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024c0c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c14:	fb04 fa0a 	mul.w	sl, r4, sl
 8024c18:	44bc      	add	ip, r7
 8024c1a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c22:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c32:	ea4c 040a 	orr.w	r4, ip, sl
 8024c36:	940e      	str	r4, [sp, #56]	; 0x38
 8024c38:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024c3a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024c3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c42:	43d2      	mvns	r2, r2
 8024c44:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024c48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024c4a:	b2d2      	uxtb	r2, r2
 8024c4c:	fb08 f707 	mul.w	r7, r8, r7
 8024c50:	fb01 770c 	mla	r7, r1, ip, r7
 8024c54:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024c58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024c5a:	fb00 770c 	mla	r7, r0, ip, r7
 8024c5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024c62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024c64:	fb09 770c 	mla	r7, r9, ip, r7
 8024c68:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024c6c:	fb08 f80c 	mul.w	r8, r8, ip
 8024c70:	0a3f      	lsrs	r7, r7, #8
 8024c72:	fb01 8303 	mla	r3, r1, r3, r8
 8024c76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024c78:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024c7c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024c80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024c82:	fb00 330a 	mla	r3, r0, sl, r3
 8024c86:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024c8a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024c8e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8024c92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c96:	fb03 f102 	mul.w	r1, r3, r2
 8024c9a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024c9e:	1c4b      	adds	r3, r1, #1
 8024ca0:	ea47 070c 	orr.w	r7, r7, ip
 8024ca4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024ca8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8024cac:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024cb0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8024cb4:	4353      	muls	r3, r2
 8024cb6:	1c59      	adds	r1, r3, #1
 8024cb8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024cbc:	0a3b      	lsrs	r3, r7, #8
 8024cbe:	0c3f      	lsrs	r7, r7, #16
 8024cc0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024cc4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8024cc8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024ccc:	435a      	muls	r2, r3
 8024cce:	1c53      	adds	r3, r2, #1
 8024cd0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024cd4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024cd8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8024cdc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024cde:	f10e 0e03 	add.w	lr, lr, #3
 8024ce2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024ce4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024ce8:	441a      	add	r2, r3
 8024cea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024cec:	9225      	str	r2, [sp, #148]	; 0x94
 8024cee:	441d      	add	r5, r3
 8024cf0:	e65a      	b.n	80249a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8024cf2:	2800      	cmp	r0, #0
 8024cf4:	f43f aef7 	beq.w	8024ae6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024cf8:	5c79      	ldrb	r1, [r7, r1]
 8024cfa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024cfe:	9109      	str	r1, [sp, #36]	; 0x24
 8024d00:	0e09      	lsrs	r1, r1, #24
 8024d02:	9111      	str	r1, [sp, #68]	; 0x44
 8024d04:	e6ef      	b.n	8024ae6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024d06:	b01b      	add	sp, #108	; 0x6c
 8024d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024d0c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8024d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d10:	b08d      	sub	sp, #52	; 0x34
 8024d12:	468b      	mov	fp, r1
 8024d14:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8024d18:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8024d1c:	fb0c 5703 	mla	r7, ip, r3, r5
 8024d20:	f1bc 0f00 	cmp.w	ip, #0
 8024d24:	910b      	str	r1, [sp, #44]	; 0x2c
 8024d26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024d2a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8024d2e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8024d32:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8024d36:	eb02 0607 	add.w	r6, r2, r7
 8024d3a:	f89b 4000 	ldrb.w	r4, [fp]
 8024d3e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8024d42:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8024d46:	f2c0 80c1 	blt.w	8024ecc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8024d4a:	45e6      	cmp	lr, ip
 8024d4c:	f340 80be 	ble.w	8024ecc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8024d50:	2d00      	cmp	r5, #0
 8024d52:	f2c0 80b7 	blt.w	8024ec4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8024d56:	42ab      	cmp	r3, r5
 8024d58:	f340 80b4 	ble.w	8024ec4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8024d5c:	5dd2      	ldrb	r2, [r2, r7]
 8024d5e:	9205      	str	r2, [sp, #20]
 8024d60:	7872      	ldrb	r2, [r6, #1]
 8024d62:	9206      	str	r2, [sp, #24]
 8024d64:	78b2      	ldrb	r2, [r6, #2]
 8024d66:	9207      	str	r2, [sp, #28]
 8024d68:	1c6a      	adds	r2, r5, #1
 8024d6a:	f100 80b6 	bmi.w	8024eda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024d6e:	4293      	cmp	r3, r2
 8024d70:	f340 80b3 	ble.w	8024eda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024d74:	f1b8 0f00 	cmp.w	r8, #0
 8024d78:	f000 80af 	beq.w	8024eda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024d7c:	78f2      	ldrb	r2, [r6, #3]
 8024d7e:	9201      	str	r2, [sp, #4]
 8024d80:	7932      	ldrb	r2, [r6, #4]
 8024d82:	9202      	str	r2, [sp, #8]
 8024d84:	7972      	ldrb	r2, [r6, #5]
 8024d86:	9203      	str	r2, [sp, #12]
 8024d88:	f11c 0c01 	adds.w	ip, ip, #1
 8024d8c:	f100 80ad 	bmi.w	8024eea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8024d90:	45e6      	cmp	lr, ip
 8024d92:	f340 80aa 	ble.w	8024eea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8024d96:	f1ba 0f00 	cmp.w	sl, #0
 8024d9a:	f000 80a6 	beq.w	8024eea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8024d9e:	2d00      	cmp	r5, #0
 8024da0:	f2c0 809f 	blt.w	8024ee2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8024da4:	42ab      	cmp	r3, r5
 8024da6:	f340 809c 	ble.w	8024ee2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8024daa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8024dae:	f816 9002 	ldrb.w	r9, [r6, r2]
 8024db2:	2203      	movs	r2, #3
 8024db4:	fb03 6c02 	mla	ip, r3, r2, r6
 8024db8:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8024dbc:	f89c e002 	ldrb.w	lr, [ip, #2]
 8024dc0:	9704      	str	r7, [sp, #16]
 8024dc2:	3501      	adds	r5, #1
 8024dc4:	f100 8098 	bmi.w	8024ef8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8024dc8:	42ab      	cmp	r3, r5
 8024dca:	f340 8095 	ble.w	8024ef8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8024dce:	f1b8 0f00 	cmp.w	r8, #0
 8024dd2:	f000 8091 	beq.w	8024ef8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8024dd6:	f04f 0c03 	mov.w	ip, #3
 8024dda:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8024dde:	5cb5      	ldrb	r5, [r6, r2]
 8024de0:	fb03 620c 	mla	r2, r3, ip, r6
 8024de4:	fb03 630c 	mla	r3, r3, ip, r6
 8024de8:	7912      	ldrb	r2, [r2, #4]
 8024dea:	795e      	ldrb	r6, [r3, #5]
 8024dec:	fa1f f388 	uxth.w	r3, r8
 8024df0:	fa1f fc8a 	uxth.w	ip, sl
 8024df4:	fb03 f70c 	mul.w	r7, r3, ip
 8024df8:	011b      	lsls	r3, r3, #4
 8024dfa:	9708      	str	r7, [sp, #32]
 8024dfc:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8024e00:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8024e04:	1bdb      	subs	r3, r3, r7
 8024e06:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8024e0a:	fa1f fc8c 	uxth.w	ip, ip
 8024e0e:	b29b      	uxth	r3, r3
 8024e10:	9709      	str	r7, [sp, #36]	; 0x24
 8024e12:	ebaa 0a0c 	sub.w	sl, sl, ip
 8024e16:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024e18:	930a      	str	r3, [sp, #40]	; 0x28
 8024e1a:	fa1f fa8a 	uxth.w	sl, sl
 8024e1e:	ea6f 0807 	mvn.w	r8, r7
 8024e22:	9f01      	ldr	r7, [sp, #4]
 8024e24:	435f      	muls	r7, r3
 8024e26:	9b05      	ldr	r3, [sp, #20]
 8024e28:	fa5f f888 	uxtb.w	r8, r8
 8024e2c:	fb0a 7703 	mla	r7, sl, r3, r7
 8024e30:	9b08      	ldr	r3, [sp, #32]
 8024e32:	fb14 f408 	smulbb	r4, r4, r8
 8024e36:	fb0c 7709 	mla	r7, ip, r9, r7
 8024e3a:	fb10 f008 	smulbb	r0, r0, r8
 8024e3e:	fb11 f108 	smulbb	r1, r1, r8
 8024e42:	fb03 7705 	mla	r7, r3, r5, r7
 8024e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e48:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024e4c:	fb07 4703 	mla	r7, r7, r3, r4
 8024e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e52:	b2bf      	uxth	r7, r7
 8024e54:	1c7c      	adds	r4, r7, #1
 8024e56:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8024e5a:	1224      	asrs	r4, r4, #8
 8024e5c:	f88b 4000 	strb.w	r4, [fp]
 8024e60:	9c02      	ldr	r4, [sp, #8]
 8024e62:	435c      	muls	r4, r3
 8024e64:	9b06      	ldr	r3, [sp, #24]
 8024e66:	fb0a 4403 	mla	r4, sl, r3, r4
 8024e6a:	9b04      	ldr	r3, [sp, #16]
 8024e6c:	fb0c 4403 	mla	r4, ip, r3, r4
 8024e70:	9b08      	ldr	r3, [sp, #32]
 8024e72:	fb03 4402 	mla	r4, r3, r2, r4
 8024e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024e7a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024e7e:	fb04 0403 	mla	r4, r4, r3, r0
 8024e82:	9b03      	ldr	r3, [sp, #12]
 8024e84:	435a      	muls	r2, r3
 8024e86:	b2a4      	uxth	r4, r4
 8024e88:	4613      	mov	r3, r2
 8024e8a:	9a07      	ldr	r2, [sp, #28]
 8024e8c:	1c60      	adds	r0, r4, #1
 8024e8e:	fb0a 3a02 	mla	sl, sl, r2, r3
 8024e92:	9b08      	ldr	r3, [sp, #32]
 8024e94:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8024e98:	fb0c ac0e 	mla	ip, ip, lr, sl
 8024e9c:	1224      	asrs	r4, r4, #8
 8024e9e:	fb03 c606 	mla	r6, r3, r6, ip
 8024ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ea4:	f88b 4001 	strb.w	r4, [fp, #1]
 8024ea8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024eac:	fb06 1103 	mla	r1, r6, r3, r1
 8024eb0:	b289      	uxth	r1, r1
 8024eb2:	1c4e      	adds	r6, r1, #1
 8024eb4:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8024eb8:	1209      	asrs	r1, r1, #8
 8024eba:	f88b 1002 	strb.w	r1, [fp, #2]
 8024ebe:	b00d      	add	sp, #52	; 0x34
 8024ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ec4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024ec8:	9405      	str	r4, [sp, #20]
 8024eca:	e74d      	b.n	8024d68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8024ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024ed0:	9401      	str	r4, [sp, #4]
 8024ed2:	9405      	str	r4, [sp, #20]
 8024ed4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024ed8:	e756      	b.n	8024d88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8024eda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024ede:	9401      	str	r4, [sp, #4]
 8024ee0:	e752      	b.n	8024d88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8024ee2:	468e      	mov	lr, r1
 8024ee4:	9004      	str	r0, [sp, #16]
 8024ee6:	46a1      	mov	r9, r4
 8024ee8:	e76b      	b.n	8024dc2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8024eea:	460e      	mov	r6, r1
 8024eec:	4602      	mov	r2, r0
 8024eee:	4625      	mov	r5, r4
 8024ef0:	468e      	mov	lr, r1
 8024ef2:	9004      	str	r0, [sp, #16]
 8024ef4:	46a1      	mov	r9, r4
 8024ef6:	e779      	b.n	8024dec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8024ef8:	460e      	mov	r6, r1
 8024efa:	4602      	mov	r2, r0
 8024efc:	4625      	mov	r5, r4
 8024efe:	e775      	b.n	8024dec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08024f00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f04:	b09f      	sub	sp, #124	; 0x7c
 8024f06:	920e      	str	r2, [sp, #56]	; 0x38
 8024f08:	9307      	str	r3, [sp, #28]
 8024f0a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024f0c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024f10:	901d      	str	r0, [sp, #116]	; 0x74
 8024f12:	930c      	str	r3, [sp, #48]	; 0x30
 8024f14:	6850      	ldr	r0, [r2, #4]
 8024f16:	910b      	str	r1, [sp, #44]	; 0x2c
 8024f18:	6812      	ldr	r2, [r2, #0]
 8024f1a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024f1e:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8024f22:	fb00 1303 	mla	r3, r0, r3, r1
 8024f26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024f2a:	18d3      	adds	r3, r2, r3
 8024f2c:	9308      	str	r3, [sp, #32]
 8024f2e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024f30:	681b      	ldr	r3, [r3, #0]
 8024f32:	930a      	str	r3, [sp, #40]	; 0x28
 8024f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024f36:	43db      	mvns	r3, r3
 8024f38:	b2db      	uxtb	r3, r3
 8024f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8024f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f3e:	2b00      	cmp	r3, #0
 8024f40:	dc03      	bgt.n	8024f4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f44:	2b00      	cmp	r3, #0
 8024f46:	f340 81f5 	ble.w	8025334 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024f4a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024f4c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f50:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f54:	1e48      	subs	r0, r1, #1
 8024f56:	1e54      	subs	r4, r2, #1
 8024f58:	9b07      	ldr	r3, [sp, #28]
 8024f5a:	2b00      	cmp	r3, #0
 8024f5c:	f340 80d5 	ble.w	802510a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8024f60:	ea5f 452a 	movs.w	r5, sl, asr #16
 8024f64:	ea4f 4328 	mov.w	r3, r8, asr #16
 8024f68:	d406      	bmi.n	8024f78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024f6a:	4285      	cmp	r5, r0
 8024f6c:	da04      	bge.n	8024f78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024f6e:	2b00      	cmp	r3, #0
 8024f70:	db02      	blt.n	8024f78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024f72:	42a3      	cmp	r3, r4
 8024f74:	f2c0 80ca 	blt.w	802510c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024f78:	3501      	adds	r5, #1
 8024f7a:	f100 80bb 	bmi.w	80250f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024f7e:	42a9      	cmp	r1, r5
 8024f80:	f2c0 80b8 	blt.w	80250f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024f84:	3301      	adds	r3, #1
 8024f86:	f100 80b5 	bmi.w	80250f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024f8a:	429a      	cmp	r2, r3
 8024f8c:	f2c0 80b2 	blt.w	80250f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024f90:	9b07      	ldr	r3, [sp, #28]
 8024f92:	9d08      	ldr	r5, [sp, #32]
 8024f94:	930d      	str	r3, [sp, #52]	; 0x34
 8024f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f98:	2b00      	cmp	r3, #0
 8024f9a:	f340 80d6 	ble.w	802514a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8024f9e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8024fa0:	ea4f 4428 	mov.w	r4, r8, asr #16
 8024fa4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024fa6:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8024faa:	68c6      	ldr	r6, [r0, #12]
 8024fac:	ea5f 402a 	movs.w	r0, sl, asr #16
 8024fb0:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8024fb4:	689b      	ldr	r3, [r3, #8]
 8024fb6:	f100 810f 	bmi.w	80251d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024fba:	1e5f      	subs	r7, r3, #1
 8024fbc:	42b8      	cmp	r0, r7
 8024fbe:	f280 810b 	bge.w	80251d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024fc2:	2c00      	cmp	r4, #0
 8024fc4:	f2c0 8108 	blt.w	80251d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024fc8:	1e77      	subs	r7, r6, #1
 8024fca:	42bc      	cmp	r4, r7
 8024fcc:	f280 8104 	bge.w	80251d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024fd0:	b21b      	sxth	r3, r3
 8024fd2:	fb04 0003 	mla	r0, r4, r3, r0
 8024fd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024fd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024fdc:	1826      	adds	r6, r4, r0
 8024fde:	5c24      	ldrb	r4, [r4, r0]
 8024fe0:	78b7      	ldrb	r7, [r6, #2]
 8024fe2:	7870      	ldrb	r0, [r6, #1]
 8024fe4:	970f      	str	r7, [sp, #60]	; 0x3c
 8024fe6:	7977      	ldrb	r7, [r6, #5]
 8024fe8:	f896 e003 	ldrb.w	lr, [r6, #3]
 8024fec:	f896 c004 	ldrb.w	ip, [r6, #4]
 8024ff0:	9710      	str	r7, [sp, #64]	; 0x40
 8024ff2:	b1c9      	cbz	r1, 8025028 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8024ff4:	f04f 0b03 	mov.w	fp, #3
 8024ff8:	f06f 0904 	mvn.w	r9, #4
 8024ffc:	3605      	adds	r6, #5
 8024ffe:	fb13 930b 	smlabb	r3, r3, fp, r9
 8025002:	eb06 0b03 	add.w	fp, r6, r3
 8025006:	5cf3      	ldrb	r3, [r6, r3]
 8025008:	9311      	str	r3, [sp, #68]	; 0x44
 802500a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 802500e:	9313      	str	r3, [sp, #76]	; 0x4c
 8025010:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8025014:	9315      	str	r3, [sp, #84]	; 0x54
 8025016:	f89b 3003 	ldrb.w	r3, [fp, #3]
 802501a:	9312      	str	r3, [sp, #72]	; 0x48
 802501c:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8025020:	9314      	str	r3, [sp, #80]	; 0x50
 8025022:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8025026:	9316      	str	r3, [sp, #88]	; 0x58
 8025028:	b292      	uxth	r2, r2
 802502a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 802502c:	b289      	uxth	r1, r1
 802502e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8025032:	fb02 f601 	mul.w	r6, r2, r1
 8025036:	0112      	lsls	r2, r2, #4
 8025038:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 802503c:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8025040:	1b92      	subs	r2, r2, r6
 8025042:	b289      	uxth	r1, r1
 8025044:	b292      	uxth	r2, r2
 8025046:	eba9 0901 	sub.w	r9, r9, r1
 802504a:	fb02 fe0e 	mul.w	lr, r2, lr
 802504e:	fa1f f989 	uxth.w	r9, r9
 8025052:	fb02 fc0c 	mul.w	ip, r2, ip
 8025056:	fb09 e404 	mla	r4, r9, r4, lr
 802505a:	f895 e000 	ldrb.w	lr, [r5]
 802505e:	fb09 c000 	mla	r0, r9, r0, ip
 8025062:	fb01 4407 	mla	r4, r1, r7, r4
 8025066:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8025068:	fb06 4407 	mla	r4, r6, r7, r4
 802506c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802506e:	fb1e fe07 	smulbb	lr, lr, r7
 8025072:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025076:	fb04 e403 	mla	r4, r4, r3, lr
 802507a:	b2a4      	uxth	r4, r4
 802507c:	f104 0e01 	add.w	lr, r4, #1
 8025080:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8025084:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025086:	fb01 0004 	mla	r0, r1, r4, r0
 802508a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802508c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025090:	fb06 0004 	mla	r0, r6, r4, r0
 8025094:	786c      	ldrb	r4, [r5, #1]
 8025096:	f885 e000 	strb.w	lr, [r5]
 802509a:	fb14 f407 	smulbb	r4, r4, r7
 802509e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80250a2:	fb00 4003 	mla	r0, r0, r3, r4
 80250a6:	b280      	uxth	r0, r0
 80250a8:	1c44      	adds	r4, r0, #1
 80250aa:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80250ae:	1200      	asrs	r0, r0, #8
 80250b0:	7068      	strb	r0, [r5, #1]
 80250b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80250b4:	4342      	muls	r2, r0
 80250b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80250b8:	fb09 2200 	mla	r2, r9, r0, r2
 80250bc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80250be:	fb01 2100 	mla	r1, r1, r0, r2
 80250c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80250c4:	fb06 1602 	mla	r6, r6, r2, r1
 80250c8:	78a9      	ldrb	r1, [r5, #2]
 80250ca:	fb11 f107 	smulbb	r1, r1, r7
 80250ce:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80250d2:	fb06 1303 	mla	r3, r6, r3, r1
 80250d6:	b29b      	uxth	r3, r3
 80250d8:	1c5e      	adds	r6, r3, #1
 80250da:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80250de:	121b      	asrs	r3, r3, #8
 80250e0:	70ab      	strb	r3, [r5, #2]
 80250e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80250e4:	3503      	adds	r5, #3
 80250e6:	449a      	add	sl, r3
 80250e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80250ea:	4498      	add	r8, r3
 80250ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80250ee:	3b01      	subs	r3, #1
 80250f0:	930d      	str	r3, [sp, #52]	; 0x34
 80250f2:	e750      	b.n	8024f96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80250f4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80250f6:	449a      	add	sl, r3
 80250f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80250fa:	4498      	add	r8, r3
 80250fc:	9b07      	ldr	r3, [sp, #28]
 80250fe:	3b01      	subs	r3, #1
 8025100:	9307      	str	r3, [sp, #28]
 8025102:	9b08      	ldr	r3, [sp, #32]
 8025104:	3303      	adds	r3, #3
 8025106:	9308      	str	r3, [sp, #32]
 8025108:	e726      	b.n	8024f58 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802510a:	d026      	beq.n	802515a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802510c:	9b07      	ldr	r3, [sp, #28]
 802510e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8025110:	3b01      	subs	r3, #1
 8025112:	fb00 a003 	mla	r0, r0, r3, sl
 8025116:	1400      	asrs	r0, r0, #16
 8025118:	f53f af3a 	bmi.w	8024f90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802511c:	3901      	subs	r1, #1
 802511e:	4288      	cmp	r0, r1
 8025120:	f6bf af36 	bge.w	8024f90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025124:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8025126:	fb01 8303 	mla	r3, r1, r3, r8
 802512a:	141b      	asrs	r3, r3, #16
 802512c:	f53f af30 	bmi.w	8024f90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025130:	3a01      	subs	r2, #1
 8025132:	4293      	cmp	r3, r2
 8025134:	f6bf af2c 	bge.w	8024f90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025138:	9b08      	ldr	r3, [sp, #32]
 802513a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802513e:	1cdd      	adds	r5, r3, #3
 8025140:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8025144:	f1bc 0f00 	cmp.w	ip, #0
 8025148:	dc5f      	bgt.n	802520a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 802514a:	9b07      	ldr	r3, [sp, #28]
 802514c:	9a08      	ldr	r2, [sp, #32]
 802514e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025152:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025156:	441a      	add	r2, r3
 8025158:	9208      	str	r2, [sp, #32]
 802515a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802515c:	2b00      	cmp	r3, #0
 802515e:	f340 80e9 	ble.w	8025334 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025166:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025168:	ee30 0a04 	vadd.f32	s0, s0, s8
 802516c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025170:	eef0 6a62 	vmov.f32	s13, s5
 8025174:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025178:	ee31 1a05 	vadd.f32	s2, s2, s10
 802517c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025180:	ee16 aa90 	vmov	sl, s13
 8025184:	eef0 6a43 	vmov.f32	s13, s6
 8025188:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802518c:	ee16 8a90 	vmov	r8, s13
 8025190:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025194:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025198:	ee77 2a62 	vsub.f32	s5, s14, s5
 802519c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80251a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80251a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80251a8:	ee12 2a90 	vmov	r2, s5
 80251ac:	eef0 2a47 	vmov.f32	s5, s14
 80251b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80251b4:	ee13 2a10 	vmov	r2, s6
 80251b8:	932b      	str	r3, [sp, #172]	; 0xac
 80251ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80251bc:	eeb0 3a67 	vmov.f32	s6, s15
 80251c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80251c4:	932c      	str	r3, [sp, #176]	; 0xb0
 80251c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80251ca:	3b01      	subs	r3, #1
 80251cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80251ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80251d0:	bf08      	it	eq
 80251d2:	4613      	moveq	r3, r2
 80251d4:	9307      	str	r3, [sp, #28]
 80251d6:	e6b1      	b.n	8024f3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80251d8:	1c47      	adds	r7, r0, #1
 80251da:	d482      	bmi.n	80250e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80251dc:	42bb      	cmp	r3, r7
 80251de:	db80      	blt.n	80250e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80251e0:	1c67      	adds	r7, r4, #1
 80251e2:	f53f af7e 	bmi.w	80250e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80251e6:	42be      	cmp	r6, r7
 80251e8:	f6ff af7b 	blt.w	80250e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80251ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80251ee:	b236      	sxth	r6, r6
 80251f0:	9001      	str	r0, [sp, #4]
 80251f2:	b21b      	sxth	r3, r3
 80251f4:	9600      	str	r6, [sp, #0]
 80251f6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80251f8:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80251fc:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8025200:	4629      	mov	r1, r5
 8025202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025204:	f7ff fd82 	bl	8024d0c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8025208:	e76b      	b.n	80250e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802520a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802520c:	ea4f 402a 	mov.w	r0, sl, asr #16
 8025210:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8025214:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8025218:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 802521c:	ea4f 4128 	mov.w	r1, r8, asr #16
 8025220:	fb07 0101 	mla	r1, r7, r1, r0
 8025224:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025226:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802522a:	1844      	adds	r4, r0, r1
 802522c:	5c40      	ldrb	r0, [r0, r1]
 802522e:	78a6      	ldrb	r6, [r4, #2]
 8025230:	7861      	ldrb	r1, [r4, #1]
 8025232:	960f      	str	r6, [sp, #60]	; 0x3c
 8025234:	78e6      	ldrb	r6, [r4, #3]
 8025236:	910d      	str	r1, [sp, #52]	; 0x34
 8025238:	9610      	str	r6, [sp, #64]	; 0x40
 802523a:	f894 9004 	ldrb.w	r9, [r4, #4]
 802523e:	f894 b005 	ldrb.w	fp, [r4, #5]
 8025242:	b192      	cbz	r2, 802526a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8025244:	f06f 0604 	mvn.w	r6, #4
 8025248:	2103      	movs	r1, #3
 802524a:	3405      	adds	r4, #5
 802524c:	fb17 6701 	smlabb	r7, r7, r1, r6
 8025250:	19e6      	adds	r6, r4, r7
 8025252:	5de4      	ldrb	r4, [r4, r7]
 8025254:	9417      	str	r4, [sp, #92]	; 0x5c
 8025256:	7874      	ldrb	r4, [r6, #1]
 8025258:	9419      	str	r4, [sp, #100]	; 0x64
 802525a:	78b4      	ldrb	r4, [r6, #2]
 802525c:	941b      	str	r4, [sp, #108]	; 0x6c
 802525e:	78f4      	ldrb	r4, [r6, #3]
 8025260:	9418      	str	r4, [sp, #96]	; 0x60
 8025262:	7934      	ldrb	r4, [r6, #4]
 8025264:	941a      	str	r4, [sp, #104]	; 0x68
 8025266:	7974      	ldrb	r4, [r6, #5]
 8025268:	941c      	str	r4, [sp, #112]	; 0x70
 802526a:	b29b      	uxth	r3, r3
 802526c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802526e:	b292      	uxth	r2, r2
 8025270:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025272:	3503      	adds	r5, #3
 8025274:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025278:	fb03 f402 	mul.w	r4, r3, r2
 802527c:	011b      	lsls	r3, r3, #4
 802527e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8025282:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8025286:	1b1b      	subs	r3, r3, r4
 8025288:	b292      	uxth	r2, r2
 802528a:	b29b      	uxth	r3, r3
 802528c:	1ab6      	subs	r6, r6, r2
 802528e:	435f      	muls	r7, r3
 8025290:	b2b6      	uxth	r6, r6
 8025292:	fb03 f909 	mul.w	r9, r3, r9
 8025296:	fb03 fb0b 	mul.w	fp, r3, fp
 802529a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802529c:	fb06 7000 	mla	r0, r6, r0, r7
 80252a0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80252a2:	fb06 bb03 	mla	fp, r6, r3, fp
 80252a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80252a8:	fb02 0007 	mla	r0, r2, r7, r0
 80252ac:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80252ae:	fb02 bb03 	mla	fp, r2, r3, fp
 80252b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80252b4:	fb04 0007 	mla	r0, r4, r7, r0
 80252b8:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80252bc:	fb17 f701 	smulbb	r7, r7, r1
 80252c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80252c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80252c6:	fb00 700e 	mla	r0, r0, lr, r7
 80252ca:	fb06 9101 	mla	r1, r6, r1, r9
 80252ce:	b280      	uxth	r0, r0
 80252d0:	1c47      	adds	r7, r0, #1
 80252d2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80252d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80252d8:	1200      	asrs	r0, r0, #8
 80252da:	f805 0c06 	strb.w	r0, [r5, #-6]
 80252de:	9819      	ldr	r0, [sp, #100]	; 0x64
 80252e0:	fb02 1100 	mla	r1, r2, r0, r1
 80252e4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80252e6:	fb04 1100 	mla	r1, r4, r0, r1
 80252ea:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80252ee:	fb04 b403 	mla	r4, r4, r3, fp
 80252f2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80252f6:	fb10 f007 	smulbb	r0, r0, r7
 80252fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80252fe:	fb13 f307 	smulbb	r3, r3, r7
 8025302:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025306:	fb01 010e 	mla	r1, r1, lr, r0
 802530a:	fb04 340e 	mla	r4, r4, lr, r3
 802530e:	b289      	uxth	r1, r1
 8025310:	b2a4      	uxth	r4, r4
 8025312:	1c48      	adds	r0, r1, #1
 8025314:	1c63      	adds	r3, r4, #1
 8025316:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802531a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802531e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025320:	1209      	asrs	r1, r1, #8
 8025322:	1224      	asrs	r4, r4, #8
 8025324:	449a      	add	sl, r3
 8025326:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025328:	f805 1c05 	strb.w	r1, [r5, #-5]
 802532c:	f805 4c04 	strb.w	r4, [r5, #-4]
 8025330:	4498      	add	r8, r3
 8025332:	e707      	b.n	8025144 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8025334:	b01f      	add	sp, #124	; 0x7c
 8025336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802533a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 802533a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802533e:	b087      	sub	sp, #28
 8025340:	780d      	ldrb	r5, [r1, #0]
 8025342:	784c      	ldrb	r4, [r1, #1]
 8025344:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8025348:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 802534c:	9004      	str	r0, [sp, #16]
 802534e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8025352:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8025356:	9005      	str	r0, [sp, #20]
 8025358:	fb06 bc03 	mla	ip, r6, r3, fp
 802535c:	2e00      	cmp	r6, #0
 802535e:	7888      	ldrb	r0, [r1, #2]
 8025360:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025364:	eb02 090c 	add.w	r9, r2, ip
 8025368:	f2c0 8084 	blt.w	8025474 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 802536c:	42b7      	cmp	r7, r6
 802536e:	f340 8081 	ble.w	8025474 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8025372:	f1bb 0f00 	cmp.w	fp, #0
 8025376:	db79      	blt.n	802546c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8025378:	455b      	cmp	r3, fp
 802537a:	dd77      	ble.n	802546c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802537c:	f812 200c 	ldrb.w	r2, [r2, ip]
 8025380:	9201      	str	r2, [sp, #4]
 8025382:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025386:	9202      	str	r2, [sp, #8]
 8025388:	f899 2002 	ldrb.w	r2, [r9, #2]
 802538c:	9203      	str	r2, [sp, #12]
 802538e:	f11b 0201 	adds.w	r2, fp, #1
 8025392:	d476      	bmi.n	8025482 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8025394:	4293      	cmp	r3, r2
 8025396:	dd74      	ble.n	8025482 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8025398:	9a04      	ldr	r2, [sp, #16]
 802539a:	2a00      	cmp	r2, #0
 802539c:	d071      	beq.n	8025482 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802539e:	f899 8003 	ldrb.w	r8, [r9, #3]
 80253a2:	f899 c004 	ldrb.w	ip, [r9, #4]
 80253a6:	f899 a005 	ldrb.w	sl, [r9, #5]
 80253aa:	3601      	adds	r6, #1
 80253ac:	d471      	bmi.n	8025492 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80253ae:	42b7      	cmp	r7, r6
 80253b0:	dd6f      	ble.n	8025492 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80253b2:	9a05      	ldr	r2, [sp, #20]
 80253b4:	2a00      	cmp	r2, #0
 80253b6:	d06c      	beq.n	8025492 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80253b8:	f1bb 0f00 	cmp.w	fp, #0
 80253bc:	db65      	blt.n	802548a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80253be:	455b      	cmp	r3, fp
 80253c0:	dd63      	ble.n	802548a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80253c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80253c6:	f819 e002 	ldrb.w	lr, [r9, r2]
 80253ca:	2203      	movs	r2, #3
 80253cc:	fb03 9602 	mla	r6, r3, r2, r9
 80253d0:	7877      	ldrb	r7, [r6, #1]
 80253d2:	78b6      	ldrb	r6, [r6, #2]
 80253d4:	f11b 0b01 	adds.w	fp, fp, #1
 80253d8:	d40c      	bmi.n	80253f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80253da:	455b      	cmp	r3, fp
 80253dc:	dd0a      	ble.n	80253f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80253de:	9a04      	ldr	r2, [sp, #16]
 80253e0:	b142      	cbz	r2, 80253f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80253e2:	2203      	movs	r2, #3
 80253e4:	fb13 2002 	smlabb	r0, r3, r2, r2
 80253e8:	f819 5000 	ldrb.w	r5, [r9, r0]
 80253ec:	fb03 9002 	mla	r0, r3, r2, r9
 80253f0:	7904      	ldrb	r4, [r0, #4]
 80253f2:	7940      	ldrb	r0, [r0, #5]
 80253f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80253f8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80253fc:	fb03 fb02 	mul.w	fp, r3, r2
 8025400:	011b      	lsls	r3, r3, #4
 8025402:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8025406:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802540a:	eba3 030b 	sub.w	r3, r3, fp
 802540e:	b292      	uxth	r2, r2
 8025410:	b29b      	uxth	r3, r3
 8025412:	eba9 0902 	sub.w	r9, r9, r2
 8025416:	9304      	str	r3, [sp, #16]
 8025418:	fa1f f989 	uxth.w	r9, r9
 802541c:	fb03 f808 	mul.w	r8, r3, r8
 8025420:	9b01      	ldr	r3, [sp, #4]
 8025422:	fb09 8803 	mla	r8, r9, r3, r8
 8025426:	9b04      	ldr	r3, [sp, #16]
 8025428:	fb03 fc0c 	mul.w	ip, r3, ip
 802542c:	9b02      	ldr	r3, [sp, #8]
 802542e:	fb02 880e 	mla	r8, r2, lr, r8
 8025432:	fb09 cc03 	mla	ip, r9, r3, ip
 8025436:	9b04      	ldr	r3, [sp, #16]
 8025438:	fb0b 8805 	mla	r8, fp, r5, r8
 802543c:	fb02 c707 	mla	r7, r2, r7, ip
 8025440:	fb03 f30a 	mul.w	r3, r3, sl
 8025444:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025448:	fb0b 7404 	mla	r4, fp, r4, r7
 802544c:	f881 8000 	strb.w	r8, [r1]
 8025450:	1224      	asrs	r4, r4, #8
 8025452:	704c      	strb	r4, [r1, #1]
 8025454:	9c03      	ldr	r4, [sp, #12]
 8025456:	fb09 3904 	mla	r9, r9, r4, r3
 802545a:	fb02 9206 	mla	r2, r2, r6, r9
 802545e:	fb0b 2000 	mla	r0, fp, r0, r2
 8025462:	1200      	asrs	r0, r0, #8
 8025464:	7088      	strb	r0, [r1, #2]
 8025466:	b007      	add	sp, #28
 8025468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802546c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8025470:	9501      	str	r5, [sp, #4]
 8025472:	e78c      	b.n	802538e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8025474:	4682      	mov	sl, r0
 8025476:	46a4      	mov	ip, r4
 8025478:	46a8      	mov	r8, r5
 802547a:	9501      	str	r5, [sp, #4]
 802547c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8025480:	e793      	b.n	80253aa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8025482:	4682      	mov	sl, r0
 8025484:	46a4      	mov	ip, r4
 8025486:	46a8      	mov	r8, r5
 8025488:	e78f      	b.n	80253aa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 802548a:	4606      	mov	r6, r0
 802548c:	4627      	mov	r7, r4
 802548e:	46ae      	mov	lr, r5
 8025490:	e7a0      	b.n	80253d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8025492:	4606      	mov	r6, r0
 8025494:	4627      	mov	r7, r4
 8025496:	46ae      	mov	lr, r5
 8025498:	e7ac      	b.n	80253f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0802549a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802549a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802549e:	b09b      	sub	sp, #108	; 0x6c
 80254a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80254a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80254a4:	9019      	str	r0, [sp, #100]	; 0x64
 80254a6:	9109      	str	r1, [sp, #36]	; 0x24
 80254a8:	6850      	ldr	r0, [r2, #4]
 80254aa:	9306      	str	r3, [sp, #24]
 80254ac:	6812      	ldr	r2, [r2, #0]
 80254ae:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80254b2:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 80254b6:	fb00 1303 	mla	r3, r0, r3, r1
 80254ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80254be:	18d3      	adds	r3, r2, r3
 80254c0:	9307      	str	r3, [sp, #28]
 80254c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80254c4:	681b      	ldr	r3, [r3, #0]
 80254c6:	9308      	str	r3, [sp, #32]
 80254c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254ca:	2b00      	cmp	r3, #0
 80254cc:	dc03      	bgt.n	80254d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80254ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80254d0:	2b00      	cmp	r3, #0
 80254d2:	f340 81ab 	ble.w	802582c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80254d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80254d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80254dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80254e0:	1e48      	subs	r0, r1, #1
 80254e2:	1e55      	subs	r5, r2, #1
 80254e4:	9b06      	ldr	r3, [sp, #24]
 80254e6:	2b00      	cmp	r3, #0
 80254e8:	f340 80b1 	ble.w	802564e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80254ec:	ea5f 462b 	movs.w	r6, fp, asr #16
 80254f0:	ea4f 4324 	mov.w	r3, r4, asr #16
 80254f4:	d406      	bmi.n	8025504 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80254f6:	4286      	cmp	r6, r0
 80254f8:	da04      	bge.n	8025504 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80254fa:	2b00      	cmp	r3, #0
 80254fc:	db02      	blt.n	8025504 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80254fe:	42ab      	cmp	r3, r5
 8025500:	f2c0 80a6 	blt.w	8025650 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8025504:	3601      	adds	r6, #1
 8025506:	f100 8097 	bmi.w	8025638 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802550a:	42b1      	cmp	r1, r6
 802550c:	f2c0 8094 	blt.w	8025638 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025510:	3301      	adds	r3, #1
 8025512:	f100 8091 	bmi.w	8025638 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025516:	429a      	cmp	r2, r3
 8025518:	f2c0 808e 	blt.w	8025638 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802551c:	9b06      	ldr	r3, [sp, #24]
 802551e:	9e07      	ldr	r6, [sp, #28]
 8025520:	930a      	str	r3, [sp, #40]	; 0x28
 8025522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025524:	2b00      	cmp	r3, #0
 8025526:	f340 80b0 	ble.w	802568a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802552a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802552c:	1425      	asrs	r5, r4, #16
 802552e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025530:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8025534:	68c7      	ldr	r7, [r0, #12]
 8025536:	ea5f 402b 	movs.w	r0, fp, asr #16
 802553a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802553e:	689b      	ldr	r3, [r3, #8]
 8025540:	f100 80ea 	bmi.w	8025718 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025544:	f103 3cff 	add.w	ip, r3, #4294967295
 8025548:	4560      	cmp	r0, ip
 802554a:	f280 80e5 	bge.w	8025718 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802554e:	2d00      	cmp	r5, #0
 8025550:	f2c0 80e2 	blt.w	8025718 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025554:	f107 3cff 	add.w	ip, r7, #4294967295
 8025558:	4565      	cmp	r5, ip
 802555a:	f280 80dd 	bge.w	8025718 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802555e:	b21b      	sxth	r3, r3
 8025560:	fb05 0003 	mla	r0, r5, r3, r0
 8025564:	9d08      	ldr	r5, [sp, #32]
 8025566:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802556a:	182f      	adds	r7, r5, r0
 802556c:	5c2d      	ldrb	r5, [r5, r0]
 802556e:	7878      	ldrb	r0, [r7, #1]
 8025570:	f897 e002 	ldrb.w	lr, [r7, #2]
 8025574:	900c      	str	r0, [sp, #48]	; 0x30
 8025576:	f897 9003 	ldrb.w	r9, [r7, #3]
 802557a:	f897 8004 	ldrb.w	r8, [r7, #4]
 802557e:	f897 a005 	ldrb.w	sl, [r7, #5]
 8025582:	b1c9      	cbz	r1, 80255b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025584:	f04f 0c03 	mov.w	ip, #3
 8025588:	f06f 0004 	mvn.w	r0, #4
 802558c:	3705      	adds	r7, #5
 802558e:	fb13 030c 	smlabb	r3, r3, ip, r0
 8025592:	eb07 0c03 	add.w	ip, r7, r3
 8025596:	5cfb      	ldrb	r3, [r7, r3]
 8025598:	930d      	str	r3, [sp, #52]	; 0x34
 802559a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802559e:	930f      	str	r3, [sp, #60]	; 0x3c
 80255a0:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80255a4:	9311      	str	r3, [sp, #68]	; 0x44
 80255a6:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80255aa:	930e      	str	r3, [sp, #56]	; 0x38
 80255ac:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80255b0:	9310      	str	r3, [sp, #64]	; 0x40
 80255b2:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80255b6:	9312      	str	r3, [sp, #72]	; 0x48
 80255b8:	b292      	uxth	r2, r2
 80255ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80255bc:	b289      	uxth	r1, r1
 80255be:	fb02 f301 	mul.w	r3, r2, r1
 80255c2:	0112      	lsls	r2, r2, #4
 80255c4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80255c8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80255cc:	1ad2      	subs	r2, r2, r3
 80255ce:	b289      	uxth	r1, r1
 80255d0:	b292      	uxth	r2, r2
 80255d2:	1a7f      	subs	r7, r7, r1
 80255d4:	fb02 f909 	mul.w	r9, r2, r9
 80255d8:	b2bf      	uxth	r7, r7
 80255da:	fb02 f808 	mul.w	r8, r2, r8
 80255de:	fb02 fa0a 	mul.w	sl, r2, sl
 80255e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80255e4:	fb07 9905 	mla	r9, r7, r5, r9
 80255e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80255ea:	fb07 8800 	mla	r8, r7, r0, r8
 80255ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80255f0:	fb07 aa0e 	mla	sl, r7, lr, sl
 80255f4:	fb01 9905 	mla	r9, r1, r5, r9
 80255f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80255fa:	fb01 8800 	mla	r8, r1, r0, r8
 80255fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025600:	fb01 a102 	mla	r1, r1, r2, sl
 8025604:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025606:	fb03 9905 	mla	r9, r3, r5, r9
 802560a:	fb03 8800 	mla	r8, r3, r0, r8
 802560e:	fb03 1302 	mla	r3, r3, r2, r1
 8025612:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025616:	ea4f 2828 	mov.w	r8, r8, asr #8
 802561a:	121b      	asrs	r3, r3, #8
 802561c:	f886 9000 	strb.w	r9, [r6]
 8025620:	f886 8001 	strb.w	r8, [r6, #1]
 8025624:	70b3      	strb	r3, [r6, #2]
 8025626:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025628:	3603      	adds	r6, #3
 802562a:	449b      	add	fp, r3
 802562c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802562e:	441c      	add	r4, r3
 8025630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025632:	3b01      	subs	r3, #1
 8025634:	930a      	str	r3, [sp, #40]	; 0x28
 8025636:	e774      	b.n	8025522 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8025638:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802563a:	449b      	add	fp, r3
 802563c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802563e:	441c      	add	r4, r3
 8025640:	9b06      	ldr	r3, [sp, #24]
 8025642:	3b01      	subs	r3, #1
 8025644:	9306      	str	r3, [sp, #24]
 8025646:	9b07      	ldr	r3, [sp, #28]
 8025648:	3303      	adds	r3, #3
 802564a:	9307      	str	r3, [sp, #28]
 802564c:	e74a      	b.n	80254e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802564e:	d024      	beq.n	802569a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025650:	9b06      	ldr	r3, [sp, #24]
 8025652:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025654:	3b01      	subs	r3, #1
 8025656:	fb00 b003 	mla	r0, r0, r3, fp
 802565a:	1400      	asrs	r0, r0, #16
 802565c:	f53f af5e 	bmi.w	802551c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025660:	3901      	subs	r1, #1
 8025662:	4288      	cmp	r0, r1
 8025664:	f6bf af5a 	bge.w	802551c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025668:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802566a:	fb01 4303 	mla	r3, r1, r3, r4
 802566e:	141b      	asrs	r3, r3, #16
 8025670:	f53f af54 	bmi.w	802551c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025674:	3a01      	subs	r2, #1
 8025676:	4293      	cmp	r3, r2
 8025678:	f6bf af50 	bge.w	802551c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802567c:	9b07      	ldr	r3, [sp, #28]
 802567e:	f8dd e018 	ldr.w	lr, [sp, #24]
 8025682:	1cde      	adds	r6, r3, #3
 8025684:	f1be 0f00 	cmp.w	lr, #0
 8025688:	dc5f      	bgt.n	802574a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802568a:	9b06      	ldr	r3, [sp, #24]
 802568c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025690:	9b07      	ldr	r3, [sp, #28]
 8025692:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025696:	4423      	add	r3, r4
 8025698:	9307      	str	r3, [sp, #28]
 802569a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802569c:	2b00      	cmp	r3, #0
 802569e:	f340 80c5 	ble.w	802582c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80256a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80256a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80256a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80256ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80256b0:	eef0 6a62 	vmov.f32	s13, s5
 80256b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80256b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80256bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80256c0:	ee16 ba90 	vmov	fp, s13
 80256c4:	eef0 6a43 	vmov.f32	s13, s6
 80256c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80256cc:	ee16 4a90 	vmov	r4, s13
 80256d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80256d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80256d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80256dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80256e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80256e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80256e8:	ee12 2a90 	vmov	r2, s5
 80256ec:	eef0 2a47 	vmov.f32	s5, s14
 80256f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80256f4:	ee13 2a10 	vmov	r2, s6
 80256f8:	9327      	str	r3, [sp, #156]	; 0x9c
 80256fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80256fc:	eeb0 3a67 	vmov.f32	s6, s15
 8025700:	fb92 f3f3 	sdiv	r3, r2, r3
 8025704:	9328      	str	r3, [sp, #160]	; 0xa0
 8025706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802570a:	3b01      	subs	r3, #1
 802570c:	9309      	str	r3, [sp, #36]	; 0x24
 802570e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025710:	bf08      	it	eq
 8025712:	4613      	moveq	r3, r2
 8025714:	9306      	str	r3, [sp, #24]
 8025716:	e6d7      	b.n	80254c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025718:	f110 0c01 	adds.w	ip, r0, #1
 802571c:	d483      	bmi.n	8025626 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802571e:	4563      	cmp	r3, ip
 8025720:	db81      	blt.n	8025626 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025722:	f115 0c01 	adds.w	ip, r5, #1
 8025726:	f53f af7e 	bmi.w	8025626 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802572a:	4567      	cmp	r7, ip
 802572c:	f6ff af7b 	blt.w	8025626 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025730:	b23f      	sxth	r7, r7
 8025732:	b21b      	sxth	r3, r3
 8025734:	9700      	str	r7, [sp, #0]
 8025736:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802573a:	e9cd 0501 	strd	r0, r5, [sp, #4]
 802573e:	9a08      	ldr	r2, [sp, #32]
 8025740:	4631      	mov	r1, r6
 8025742:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025744:	f7ff fdf9 	bl	802533a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8025748:	e76d      	b.n	8025626 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802574a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802574c:	ea4f 402b 	mov.w	r0, fp, asr #16
 8025750:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025754:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025758:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802575c:	1421      	asrs	r1, r4, #16
 802575e:	930a      	str	r3, [sp, #40]	; 0x28
 8025760:	fb0c 0101 	mla	r1, ip, r1, r0
 8025764:	9808      	ldr	r0, [sp, #32]
 8025766:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802576a:	1845      	adds	r5, r0, r1
 802576c:	5c40      	ldrb	r0, [r0, r1]
 802576e:	796f      	ldrb	r7, [r5, #5]
 8025770:	7869      	ldrb	r1, [r5, #1]
 8025772:	f895 8002 	ldrb.w	r8, [r5, #2]
 8025776:	f895 a003 	ldrb.w	sl, [r5, #3]
 802577a:	f895 9004 	ldrb.w	r9, [r5, #4]
 802577e:	970c      	str	r7, [sp, #48]	; 0x30
 8025780:	b1a2      	cbz	r2, 80257ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8025782:	2703      	movs	r7, #3
 8025784:	f06f 0304 	mvn.w	r3, #4
 8025788:	3505      	adds	r5, #5
 802578a:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 802578e:	eb05 070c 	add.w	r7, r5, ip
 8025792:	f815 500c 	ldrb.w	r5, [r5, ip]
 8025796:	9513      	str	r5, [sp, #76]	; 0x4c
 8025798:	787d      	ldrb	r5, [r7, #1]
 802579a:	9515      	str	r5, [sp, #84]	; 0x54
 802579c:	78bd      	ldrb	r5, [r7, #2]
 802579e:	9517      	str	r5, [sp, #92]	; 0x5c
 80257a0:	78fd      	ldrb	r5, [r7, #3]
 80257a2:	9514      	str	r5, [sp, #80]	; 0x50
 80257a4:	793d      	ldrb	r5, [r7, #4]
 80257a6:	9516      	str	r5, [sp, #88]	; 0x58
 80257a8:	797d      	ldrb	r5, [r7, #5]
 80257aa:	9518      	str	r5, [sp, #96]	; 0x60
 80257ac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80257b0:	b292      	uxth	r2, r2
 80257b2:	3603      	adds	r6, #3
 80257b4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80257b8:	fb03 f502 	mul.w	r5, r3, r2
 80257bc:	011b      	lsls	r3, r3, #4
 80257be:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80257c2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80257c6:	1b5b      	subs	r3, r3, r5
 80257c8:	b292      	uxth	r2, r2
 80257ca:	b29b      	uxth	r3, r3
 80257cc:	1abf      	subs	r7, r7, r2
 80257ce:	fb03 f909 	mul.w	r9, r3, r9
 80257d2:	b2bf      	uxth	r7, r7
 80257d4:	fb03 fa0a 	mul.w	sl, r3, sl
 80257d8:	fb07 9901 	mla	r9, r7, r1, r9
 80257dc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80257de:	fb07 aa00 	mla	sl, r7, r0, sl
 80257e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80257e4:	fb02 9901 	mla	r9, r2, r1, r9
 80257e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80257ea:	fb02 aa00 	mla	sl, r2, r0, sl
 80257ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 80257f0:	fb05 9901 	mla	r9, r5, r1, r9
 80257f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80257f6:	fb05 aa00 	mla	sl, r5, r0, sl
 80257fa:	434b      	muls	r3, r1
 80257fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80257fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8025802:	fb07 3308 	mla	r3, r7, r8, r3
 8025806:	ea4f 2929 	mov.w	r9, r9, asr #8
 802580a:	f806 ac06 	strb.w	sl, [r6, #-6]
 802580e:	fb02 3201 	mla	r2, r2, r1, r3
 8025812:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025814:	f806 9c05 	strb.w	r9, [r6, #-5]
 8025818:	fb05 2503 	mla	r5, r5, r3, r2
 802581c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802581e:	122d      	asrs	r5, r5, #8
 8025820:	449b      	add	fp, r3
 8025822:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025824:	f806 5c04 	strb.w	r5, [r6, #-4]
 8025828:	441c      	add	r4, r3
 802582a:	e72b      	b.n	8025684 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802582c:	b01b      	add	sp, #108	; 0x6c
 802582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025832 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8025832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025836:	b087      	sub	sp, #28
 8025838:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 802583c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8025840:	fb05 7003 	mla	r0, r5, r3, r7
 8025844:	2d00      	cmp	r5, #0
 8025846:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802584a:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 802584e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8025852:	f2c0 811f 	blt.w	8025a94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8025856:	45a8      	cmp	r8, r5
 8025858:	f340 811c 	ble.w	8025a94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802585c:	2f00      	cmp	r7, #0
 802585e:	f2c0 8117 	blt.w	8025a90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8025862:	42bb      	cmp	r3, r7
 8025864:	f340 8114 	ble.w	8025a90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8025868:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 802586c:	1c7a      	adds	r2, r7, #1
 802586e:	f100 8114 	bmi.w	8025a9a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8025872:	4293      	cmp	r3, r2
 8025874:	f340 8111 	ble.w	8025a9a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8025878:	2c00      	cmp	r4, #0
 802587a:	f000 8110 	beq.w	8025a9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 802587e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8025882:	3501      	adds	r5, #1
 8025884:	f100 810f 	bmi.w	8025aa6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8025888:	45a8      	cmp	r8, r5
 802588a:	f340 810c 	ble.w	8025aa6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802588e:	f1be 0f00 	cmp.w	lr, #0
 8025892:	f000 810b 	beq.w	8025aac <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8025896:	2f00      	cmp	r7, #0
 8025898:	f2c0 8103 	blt.w	8025aa2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802589c:	42bb      	cmp	r3, r7
 802589e:	f340 8100 	ble.w	8025aa2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80258a2:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80258a6:	3701      	adds	r7, #1
 80258a8:	f100 8103 	bmi.w	8025ab2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80258ac:	42bb      	cmp	r3, r7
 80258ae:	f340 8100 	ble.w	8025ab2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80258b2:	2c00      	cmp	r4, #0
 80258b4:	f000 80ff 	beq.w	8025ab6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80258b8:	3301      	adds	r3, #1
 80258ba:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80258be:	fa1f fc84 	uxth.w	ip, r4
 80258c2:	fa1f fe8e 	uxth.w	lr, lr
 80258c6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80258ca:	fb0c f90e 	mul.w	r9, ip, lr
 80258ce:	0e13      	lsrs	r3, r2, #24
 80258d0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80258d4:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80258d8:	9302      	str	r3, [sp, #8]
 80258da:	ebac 0709 	sub.w	r7, ip, r9
 80258de:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80258e2:	fa1f f48e 	uxth.w	r4, lr
 80258e6:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80258ea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80258ee:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80258f2:	fb0a fe0e 	mul.w	lr, sl, lr
 80258f6:	1b1b      	subs	r3, r3, r4
 80258f8:	fb0a f606 	mul.w	r6, sl, r6
 80258fc:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8025900:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025904:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025908:	b29b      	uxth	r3, r3
 802590a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802590e:	b2bf      	uxth	r7, r7
 8025910:	9301      	str	r3, [sp, #4]
 8025912:	44e6      	add	lr, ip
 8025914:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8025918:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802591c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025920:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8025924:	9303      	str	r3, [sp, #12]
 8025926:	0a33      	lsrs	r3, r6, #8
 8025928:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 802592c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025930:	9304      	str	r3, [sp, #16]
 8025932:	fb0b f606 	mul.w	r6, fp, r6
 8025936:	fb0b f000 	mul.w	r0, fp, r0
 802593a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802593e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025942:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025946:	44b6      	add	lr, r6
 8025948:	f500 7680 	add.w	r6, r0, #256	; 0x100
 802594c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8025950:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8025954:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025958:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802595c:	fb08 f606 	mul.w	r6, r8, r6
 8025960:	0a03      	lsrs	r3, r0, #8
 8025962:	fb08 f505 	mul.w	r5, r8, r5
 8025966:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802596a:	0a30      	lsrs	r0, r6, #8
 802596c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025970:	9305      	str	r3, [sp, #20]
 8025972:	0e13      	lsrs	r3, r2, #24
 8025974:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025978:	fb0e fe07 	mul.w	lr, lr, r7
 802597c:	4430      	add	r0, r6
 802597e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8025982:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8025986:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802598a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802598e:	0a00      	lsrs	r0, r0, #8
 8025990:	435e      	muls	r6, r3
 8025992:	0a2d      	lsrs	r5, r5, #8
 8025994:	435a      	muls	r2, r3
 8025996:	9b03      	ldr	r3, [sp, #12]
 8025998:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 802599c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80259a0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80259a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259a8:	44b4      	add	ip, r6
 80259aa:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80259ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259b2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80259b6:	9e01      	ldr	r6, [sp, #4]
 80259b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259bc:	fb03 ee06 	mla	lr, r3, r6, lr
 80259c0:	9b04      	ldr	r3, [sp, #16]
 80259c2:	0a12      	lsrs	r2, r2, #8
 80259c4:	fb0c ee09 	mla	lr, ip, r9, lr
 80259c8:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80259cc:	9b05      	ldr	r3, [sp, #20]
 80259ce:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80259d2:	fb00 ee04 	mla	lr, r0, r4, lr
 80259d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80259da:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80259de:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80259e2:	9b01      	ldr	r3, [sp, #4]
 80259e4:	fb07 fe0e 	mul.w	lr, r7, lr
 80259e8:	fb07 f70b 	mul.w	r7, r7, fp
 80259ec:	fb03 ee06 	mla	lr, r3, r6, lr
 80259f0:	fb03 730a 	mla	r3, r3, sl, r7
 80259f4:	fb09 e202 	mla	r2, r9, r2, lr
 80259f8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80259fc:	fb04 2e0e 	mla	lr, r4, lr, r2
 8025a00:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8025a04:	fb04 3408 	mla	r4, r4, r8, r3
 8025a08:	9b02      	ldr	r3, [sp, #8]
 8025a0a:	b292      	uxth	r2, r2
 8025a0c:	fb09 4903 	mla	r9, r9, r3, r4
 8025a10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a14:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8025a18:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025a1c:	fb09 f902 	mul.w	r9, r9, r2
 8025a20:	ea40 0e0e 	orr.w	lr, r0, lr
 8025a24:	f109 0301 	add.w	r3, r9, #1
 8025a28:	fa5f f08e 	uxtb.w	r0, lr
 8025a2c:	fb10 f002 	smulbb	r0, r0, r2
 8025a30:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8025a34:	780b      	ldrb	r3, [r1, #0]
 8025a36:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8025a3a:	fa5f f989 	uxtb.w	r9, r9
 8025a3e:	fb03 0309 	mla	r3, r3, r9, r0
 8025a42:	b29b      	uxth	r3, r3
 8025a44:	1c58      	adds	r0, r3, #1
 8025a46:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025a4a:	7848      	ldrb	r0, [r1, #1]
 8025a4c:	fb10 f009 	smulbb	r0, r0, r9
 8025a50:	121b      	asrs	r3, r3, #8
 8025a52:	700b      	strb	r3, [r1, #0]
 8025a54:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8025a58:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8025a5c:	fb03 0302 	mla	r3, r3, r2, r0
 8025a60:	b29b      	uxth	r3, r3
 8025a62:	1c58      	adds	r0, r3, #1
 8025a64:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025a68:	121b      	asrs	r3, r3, #8
 8025a6a:	704b      	strb	r3, [r1, #1]
 8025a6c:	788b      	ldrb	r3, [r1, #2]
 8025a6e:	fb13 f909 	smulbb	r9, r3, r9
 8025a72:	fb0e 9e02 	mla	lr, lr, r2, r9
 8025a76:	fa1f fe8e 	uxth.w	lr, lr
 8025a7a:	f10e 0301 	add.w	r3, lr, #1
 8025a7e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8025a82:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025a86:	f881 e002 	strb.w	lr, [r1, #2]
 8025a8a:	b007      	add	sp, #28
 8025a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a90:	2600      	movs	r6, #0
 8025a92:	e6eb      	b.n	802586c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8025a94:	2000      	movs	r0, #0
 8025a96:	4606      	mov	r6, r0
 8025a98:	e6f3      	b.n	8025882 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8025a9a:	2000      	movs	r0, #0
 8025a9c:	e6f1      	b.n	8025882 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8025a9e:	4620      	mov	r0, r4
 8025aa0:	e6ef      	b.n	8025882 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8025aa2:	2500      	movs	r5, #0
 8025aa4:	e6ff      	b.n	80258a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8025aa6:	2200      	movs	r2, #0
 8025aa8:	4615      	mov	r5, r2
 8025aaa:	e708      	b.n	80258be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025aac:	4672      	mov	r2, lr
 8025aae:	4675      	mov	r5, lr
 8025ab0:	e705      	b.n	80258be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025ab2:	2200      	movs	r2, #0
 8025ab4:	e703      	b.n	80258be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025ab6:	4622      	mov	r2, r4
 8025ab8:	e701      	b.n	80258be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08025aba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025aba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025abe:	b09d      	sub	sp, #116	; 0x74
 8025ac0:	9219      	str	r2, [sp, #100]	; 0x64
 8025ac2:	9307      	str	r3, [sp, #28]
 8025ac4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025ac6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8025aca:	901b      	str	r0, [sp, #108]	; 0x6c
 8025acc:	931a      	str	r3, [sp, #104]	; 0x68
 8025ace:	6850      	ldr	r0, [r2, #4]
 8025ad0:	9117      	str	r1, [sp, #92]	; 0x5c
 8025ad2:	6812      	ldr	r2, [r2, #0]
 8025ad4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8025ad8:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8025adc:	fb00 1303 	mla	r3, r0, r3, r1
 8025ae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025ae4:	18d3      	adds	r3, r2, r3
 8025ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8025ae8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025aea:	681b      	ldr	r3, [r3, #0]
 8025aec:	9310      	str	r3, [sp, #64]	; 0x40
 8025aee:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8025af2:	930b      	str	r3, [sp, #44]	; 0x2c
 8025af4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025af6:	2b00      	cmp	r3, #0
 8025af8:	dc03      	bgt.n	8025b02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025afa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025afc:	2b00      	cmp	r3, #0
 8025afe:	f340 8368 	ble.w	80261d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025b02:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025b04:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025b08:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025b0c:	1e48      	subs	r0, r1, #1
 8025b0e:	1e57      	subs	r7, r2, #1
 8025b10:	9b07      	ldr	r3, [sp, #28]
 8025b12:	2b00      	cmp	r3, #0
 8025b14:	f340 8187 	ble.w	8025e26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025b18:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8025b1c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025b20:	d406      	bmi.n	8025b30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025b22:	4584      	cmp	ip, r0
 8025b24:	da04      	bge.n	8025b30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025b26:	2b00      	cmp	r3, #0
 8025b28:	db02      	blt.n	8025b30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025b2a:	42bb      	cmp	r3, r7
 8025b2c:	f2c0 817c 	blt.w	8025e28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025b30:	f11c 0c01 	adds.w	ip, ip, #1
 8025b34:	f100 816c 	bmi.w	8025e10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025b38:	4561      	cmp	r1, ip
 8025b3a:	f2c0 8169 	blt.w	8025e10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025b3e:	3301      	adds	r3, #1
 8025b40:	f100 8166 	bmi.w	8025e10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025b44:	429a      	cmp	r2, r3
 8025b46:	f2c0 8163 	blt.w	8025e10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025b4a:	9b07      	ldr	r3, [sp, #28]
 8025b4c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025b4e:	9318      	str	r3, [sp, #96]	; 0x60
 8025b50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025b52:	2b00      	cmp	r3, #0
 8025b54:	f340 8186 	ble.w	8025e64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025b58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025b5a:	142a      	asrs	r2, r5, #16
 8025b5c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025b60:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025b64:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025b68:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025b6c:	f100 81cb 	bmi.w	8025f06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025b70:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025b74:	4542      	cmp	r2, r8
 8025b76:	f280 81c6 	bge.w	8025f06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025b7a:	2800      	cmp	r0, #0
 8025b7c:	f2c0 81c3 	blt.w	8025f06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025b80:	f103 38ff 	add.w	r8, r3, #4294967295
 8025b84:	4540      	cmp	r0, r8
 8025b86:	f280 81be 	bge.w	8025f06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025b8a:	fa0f f38e 	sxth.w	r3, lr
 8025b8e:	fb00 2203 	mla	r2, r0, r3, r2
 8025b92:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025b94:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8025b98:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8025b9c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025ba0:	2900      	cmp	r1, #0
 8025ba2:	f000 81a6 	beq.w	8025ef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8025ba6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8025baa:	900c      	str	r0, [sp, #48]	; 0x30
 8025bac:	0e00      	lsrs	r0, r0, #24
 8025bae:	9013      	str	r0, [sp, #76]	; 0x4c
 8025bb0:	f1bc 0f00 	cmp.w	ip, #0
 8025bb4:	d00f      	beq.n	8025bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025bb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025bba:	3b01      	subs	r3, #1
 8025bbc:	009b      	lsls	r3, r3, #2
 8025bbe:	3304      	adds	r3, #4
 8025bc0:	eb08 0003 	add.w	r0, r8, r3
 8025bc4:	f858 3003 	ldr.w	r3, [r8, r3]
 8025bc8:	9308      	str	r3, [sp, #32]
 8025bca:	0e1b      	lsrs	r3, r3, #24
 8025bcc:	9311      	str	r3, [sp, #68]	; 0x44
 8025bce:	6843      	ldr	r3, [r0, #4]
 8025bd0:	930d      	str	r3, [sp, #52]	; 0x34
 8025bd2:	0e1b      	lsrs	r3, r3, #24
 8025bd4:	9314      	str	r3, [sp, #80]	; 0x50
 8025bd6:	b289      	uxth	r1, r1
 8025bd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025bda:	fa1f fc8c 	uxth.w	ip, ip
 8025bde:	0108      	lsls	r0, r1, #4
 8025be0:	fb01 f90c 	mul.w	r9, r1, ip
 8025be4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025be8:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8025bec:	eba0 0809 	sub.w	r8, r0, r9
 8025bf0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8025bf2:	fa1f f18c 	uxth.w	r1, ip
 8025bf6:	fa1f f888 	uxth.w	r8, r8
 8025bfa:	1a5b      	subs	r3, r3, r1
 8025bfc:	fb08 f000 	mul.w	r0, r8, r0
 8025c00:	b29b      	uxth	r3, r3
 8025c02:	fb03 000e 	mla	r0, r3, lr, r0
 8025c06:	fb01 0004 	mla	r0, r1, r4, r0
 8025c0a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025c0c:	fb09 0004 	mla	r0, r9, r4, r0
 8025c10:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025c14:	2800      	cmp	r0, #0
 8025c16:	f000 80f2 	beq.w	8025dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025c1a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025c1e:	d01b      	beq.n	8025c58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025c20:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8025c24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025c28:	fb0e fa0a 	mul.w	sl, lr, sl
 8025c2c:	fb0e fe02 	mul.w	lr, lr, r2
 8025c30:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8025c34:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025c38:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025c3c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025c40:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025c44:	4452      	add	r2, sl
 8025c46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c4a:	0a12      	lsrs	r2, r2, #8
 8025c4c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025c50:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025c54:	ea42 020c 	orr.w	r2, r2, ip
 8025c58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025c5a:	2cff      	cmp	r4, #255	; 0xff
 8025c5c:	d021      	beq.n	8025ca2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025c5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025c60:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025c64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025c66:	fb04 fb0b 	mul.w	fp, r4, fp
 8025c6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025c6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025c70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025c72:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025c76:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025c7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025c7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025c82:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025c86:	44de      	add	lr, fp
 8025c88:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025c8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025c90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025c94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025c98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025c9c:	ea4e 040a 	orr.w	r4, lr, sl
 8025ca0:	940c      	str	r4, [sp, #48]	; 0x30
 8025ca2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025ca4:	2cff      	cmp	r4, #255	; 0xff
 8025ca6:	d021      	beq.n	8025cec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8025ca8:	9c08      	ldr	r4, [sp, #32]
 8025caa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025cae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025cb0:	fb04 fb0b 	mul.w	fp, r4, fp
 8025cb4:	9c08      	ldr	r4, [sp, #32]
 8025cb6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025cba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025cbc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025cc0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025cc4:	fb04 fa0a 	mul.w	sl, r4, sl
 8025cc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ccc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025cd0:	44de      	add	lr, fp
 8025cd2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025cd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025cda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025cde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ce2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ce6:	ea4e 040a 	orr.w	r4, lr, sl
 8025cea:	9408      	str	r4, [sp, #32]
 8025cec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025cee:	2cff      	cmp	r4, #255	; 0xff
 8025cf0:	d021      	beq.n	8025d36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8025cf2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025cf4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025cf8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025cfa:	fb04 fb0b 	mul.w	fp, r4, fp
 8025cfe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025d00:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025d04:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025d06:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025d0a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025d0e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d12:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025d16:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025d1a:	44de      	add	lr, fp
 8025d1c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025d20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025d2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025d30:	ea4e 040a 	orr.w	r4, lr, sl
 8025d34:	940d      	str	r4, [sp, #52]	; 0x34
 8025d36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025d38:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025d3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025d40:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025d44:	9c08      	ldr	r4, [sp, #32]
 8025d46:	fb08 fc0c 	mul.w	ip, r8, ip
 8025d4a:	fb03 cc0e 	mla	ip, r3, lr, ip
 8025d4e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025d52:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025d54:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025d58:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025d5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025d5e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025d62:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025d66:	fb08 f80e 	mul.w	r8, r8, lr
 8025d6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d6e:	fb03 8202 	mla	r2, r3, r2, r8
 8025d72:	9b08      	ldr	r3, [sp, #32]
 8025d74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d78:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8025d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025d7e:	fb01 220a 	mla	r2, r1, sl, r2
 8025d82:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8025d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025d88:	fb09 2901 	mla	r9, r9, r1, r2
 8025d8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025d8e:	4343      	muls	r3, r0
 8025d90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025d94:	1c58      	adds	r0, r3, #1
 8025d96:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025d9a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025d9e:	783b      	ldrb	r3, [r7, #0]
 8025da0:	ea4c 0c09 	orr.w	ip, ip, r9
 8025da4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025da8:	fa5f f28c 	uxtb.w	r2, ip
 8025dac:	b2c0      	uxtb	r0, r0
 8025dae:	fb12 f201 	smulbb	r2, r2, r1
 8025db2:	fb03 2300 	mla	r3, r3, r0, r2
 8025db6:	b29b      	uxth	r3, r3
 8025db8:	1c5a      	adds	r2, r3, #1
 8025dba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025dbe:	787a      	ldrb	r2, [r7, #1]
 8025dc0:	fb12 f200 	smulbb	r2, r2, r0
 8025dc4:	121b      	asrs	r3, r3, #8
 8025dc6:	703b      	strb	r3, [r7, #0]
 8025dc8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025dcc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025dd0:	fb03 2301 	mla	r3, r3, r1, r2
 8025dd4:	b29b      	uxth	r3, r3
 8025dd6:	1c5a      	adds	r2, r3, #1
 8025dd8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025ddc:	121b      	asrs	r3, r3, #8
 8025dde:	707b      	strb	r3, [r7, #1]
 8025de0:	78bb      	ldrb	r3, [r7, #2]
 8025de2:	fb13 f000 	smulbb	r0, r3, r0
 8025de6:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025dea:	fa1f fc8c 	uxth.w	ip, ip
 8025dee:	f10c 0301 	add.w	r3, ip, #1
 8025df2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025df6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025dfa:	f887 c002 	strb.w	ip, [r7, #2]
 8025dfe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025e00:	3703      	adds	r7, #3
 8025e02:	441d      	add	r5, r3
 8025e04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025e06:	441e      	add	r6, r3
 8025e08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025e0a:	3b01      	subs	r3, #1
 8025e0c:	9318      	str	r3, [sp, #96]	; 0x60
 8025e0e:	e69f      	b.n	8025b50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025e10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025e12:	441d      	add	r5, r3
 8025e14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025e16:	441e      	add	r6, r3
 8025e18:	9b07      	ldr	r3, [sp, #28]
 8025e1a:	3b01      	subs	r3, #1
 8025e1c:	9307      	str	r3, [sp, #28]
 8025e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025e20:	3303      	adds	r3, #3
 8025e22:	930a      	str	r3, [sp, #40]	; 0x28
 8025e24:	e674      	b.n	8025b10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025e26:	d025      	beq.n	8025e74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8025e28:	9b07      	ldr	r3, [sp, #28]
 8025e2a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025e2c:	3b01      	subs	r3, #1
 8025e2e:	fb00 5003 	mla	r0, r0, r3, r5
 8025e32:	1400      	asrs	r0, r0, #16
 8025e34:	f53f ae89 	bmi.w	8025b4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025e38:	3901      	subs	r1, #1
 8025e3a:	4288      	cmp	r0, r1
 8025e3c:	f6bf ae85 	bge.w	8025b4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025e40:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8025e42:	fb01 6303 	mla	r3, r1, r3, r6
 8025e46:	141b      	asrs	r3, r3, #16
 8025e48:	f53f ae7f 	bmi.w	8025b4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025e4c:	3a01      	subs	r2, #1
 8025e4e:	4293      	cmp	r3, r2
 8025e50:	f6bf ae7b 	bge.w	8025b4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025e56:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025e5a:	f103 0e03 	add.w	lr, r3, #3
 8025e5e:	f1bb 0f00 	cmp.w	fp, #0
 8025e62:	dc6e      	bgt.n	8025f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025e64:	9b07      	ldr	r3, [sp, #28]
 8025e66:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025e6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025e70:	4423      	add	r3, r4
 8025e72:	930a      	str	r3, [sp, #40]	; 0x28
 8025e74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025e76:	2b00      	cmp	r3, #0
 8025e78:	f340 81ab 	ble.w	80261d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025e80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025e82:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025e86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025e8a:	eef0 6a62 	vmov.f32	s13, s5
 8025e8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025e92:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025e96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025e9a:	ee16 5a90 	vmov	r5, s13
 8025e9e:	eef0 6a43 	vmov.f32	s13, s6
 8025ea2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ea6:	ee16 6a90 	vmov	r6, s13
 8025eaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025eae:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025eb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025eb6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025eba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025ebe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025ec2:	ee12 2a90 	vmov	r2, s5
 8025ec6:	eef0 2a47 	vmov.f32	s5, s14
 8025eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8025ece:	ee13 2a10 	vmov	r2, s6
 8025ed2:	9329      	str	r3, [sp, #164]	; 0xa4
 8025ed4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025ed6:	eeb0 3a67 	vmov.f32	s6, s15
 8025eda:	fb92 f3f3 	sdiv	r3, r2, r3
 8025ede:	932a      	str	r3, [sp, #168]	; 0xa8
 8025ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025ee2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025ee4:	3b01      	subs	r3, #1
 8025ee6:	9317      	str	r3, [sp, #92]	; 0x5c
 8025ee8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025eea:	bf08      	it	eq
 8025eec:	4613      	moveq	r3, r2
 8025eee:	9307      	str	r3, [sp, #28]
 8025ef0:	e600      	b.n	8025af4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025ef2:	f1bc 0f00 	cmp.w	ip, #0
 8025ef6:	f43f ae6e 	beq.w	8025bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025efa:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025efe:	9308      	str	r3, [sp, #32]
 8025f00:	0e1b      	lsrs	r3, r3, #24
 8025f02:	9311      	str	r3, [sp, #68]	; 0x44
 8025f04:	e667      	b.n	8025bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025f06:	f112 0801 	adds.w	r8, r2, #1
 8025f0a:	f53f af78 	bmi.w	8025dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025f0e:	45c6      	cmp	lr, r8
 8025f10:	f6ff af75 	blt.w	8025dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025f14:	f110 0801 	adds.w	r8, r0, #1
 8025f18:	f53f af71 	bmi.w	8025dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025f1c:	4543      	cmp	r3, r8
 8025f1e:	f6ff af6e 	blt.w	8025dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025f22:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8025f24:	b21b      	sxth	r3, r3
 8025f26:	9201      	str	r2, [sp, #4]
 8025f28:	9300      	str	r3, [sp, #0]
 8025f2a:	fa0f f38e 	sxth.w	r3, lr
 8025f2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025f34:	e9cd c404 	strd	ip, r4, [sp, #16]
 8025f38:	4639      	mov	r1, r7
 8025f3a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025f3c:	f7ff fc79 	bl	8025832 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8025f40:	e75d      	b.n	8025dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025f42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025f44:	142f      	asrs	r7, r5, #16
 8025f46:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025f48:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025f4c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8025f50:	1433      	asrs	r3, r6, #16
 8025f52:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025f56:	fb02 7303 	mla	r3, r2, r3, r7
 8025f5a:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8025f5e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025f62:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025f66:	2900      	cmp	r1, #0
 8025f68:	f000 812a 	beq.w	80261c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8025f6c:	687c      	ldr	r4, [r7, #4]
 8025f6e:	940e      	str	r4, [sp, #56]	; 0x38
 8025f70:	0e24      	lsrs	r4, r4, #24
 8025f72:	9415      	str	r4, [sp, #84]	; 0x54
 8025f74:	b178      	cbz	r0, 8025f96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8025f76:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8025f7a:	3a01      	subs	r2, #1
 8025f7c:	0092      	lsls	r2, r2, #2
 8025f7e:	3204      	adds	r2, #4
 8025f80:	eb07 0802 	add.w	r8, r7, r2
 8025f84:	58ba      	ldr	r2, [r7, r2]
 8025f86:	9209      	str	r2, [sp, #36]	; 0x24
 8025f88:	0e12      	lsrs	r2, r2, #24
 8025f8a:	9212      	str	r2, [sp, #72]	; 0x48
 8025f8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8025f90:	920f      	str	r2, [sp, #60]	; 0x3c
 8025f92:	0e12      	lsrs	r2, r2, #24
 8025f94:	9216      	str	r2, [sp, #88]	; 0x58
 8025f96:	b289      	uxth	r1, r1
 8025f98:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025f9a:	b280      	uxth	r0, r0
 8025f9c:	fb01 f900 	mul.w	r9, r1, r0
 8025fa0:	0109      	lsls	r1, r1, #4
 8025fa2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025fa6:	eba1 0809 	sub.w	r8, r1, r9
 8025faa:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8025fae:	9915      	ldr	r1, [sp, #84]	; 0x54
 8025fb0:	b280      	uxth	r0, r0
 8025fb2:	fa1f f888 	uxth.w	r8, r8
 8025fb6:	1a12      	subs	r2, r2, r0
 8025fb8:	fb08 f101 	mul.w	r1, r8, r1
 8025fbc:	b292      	uxth	r2, r2
 8025fbe:	fb02 110c 	mla	r1, r2, ip, r1
 8025fc2:	fb00 1104 	mla	r1, r0, r4, r1
 8025fc6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025fc8:	fb09 1104 	mla	r1, r9, r4, r1
 8025fcc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025fd0:	2900      	cmp	r1, #0
 8025fd2:	f000 80ec 	beq.w	80261ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8025fd6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025fda:	d019      	beq.n	8026010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8025fdc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025fe0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025fe4:	fb0c fa0a 	mul.w	sl, ip, sl
 8025fe8:	fb0c fc03 	mul.w	ip, ip, r3
 8025fec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025ff0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025ff4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025ff8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025ffc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026000:	4453      	add	r3, sl
 8026002:	0a3f      	lsrs	r7, r7, #8
 8026004:	0a1b      	lsrs	r3, r3, #8
 8026006:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802600a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802600e:	433b      	orrs	r3, r7
 8026010:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026012:	2cff      	cmp	r4, #255	; 0xff
 8026014:	d020      	beq.n	8026058 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8026016:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026018:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802601c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802601e:	4367      	muls	r7, r4
 8026020:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026022:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026026:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802602a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802602c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026030:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026034:	fb04 fa0a 	mul.w	sl, r4, sl
 8026038:	44bc      	add	ip, r7
 802603a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802603e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026042:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026046:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802604a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802604e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026052:	ea4c 040a 	orr.w	r4, ip, sl
 8026056:	940e      	str	r4, [sp, #56]	; 0x38
 8026058:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802605a:	2cff      	cmp	r4, #255	; 0xff
 802605c:	d020      	beq.n	80260a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 802605e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026060:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026064:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026066:	4367      	muls	r7, r4
 8026068:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802606a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802606e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026072:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026074:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026078:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802607c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026080:	44bc      	add	ip, r7
 8026082:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026086:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802608a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802608e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026092:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026096:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802609a:	ea4c 040a 	orr.w	r4, ip, sl
 802609e:	9409      	str	r4, [sp, #36]	; 0x24
 80260a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80260a2:	2cff      	cmp	r4, #255	; 0xff
 80260a4:	d020      	beq.n	80260e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80260a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80260a8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80260ac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80260ae:	4367      	muls	r7, r4
 80260b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80260b2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80260b6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80260ba:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80260bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80260c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80260c4:	fb04 fa0a 	mul.w	sl, r4, sl
 80260c8:	44bc      	add	ip, r7
 80260ca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80260ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80260d2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80260d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80260da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80260de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80260e2:	ea4c 040a 	orr.w	r4, ip, sl
 80260e6:	940f      	str	r4, [sp, #60]	; 0x3c
 80260e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80260ea:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80260ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80260f2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80260f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80260f8:	fb08 f707 	mul.w	r7, r8, r7
 80260fc:	fb02 770c 	mla	r7, r2, ip, r7
 8026100:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026104:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026106:	fb00 770c 	mla	r7, r0, ip, r7
 802610a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802610e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026110:	fb09 770c 	mla	r7, r9, ip, r7
 8026114:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026118:	fb08 f80c 	mul.w	r8, r8, ip
 802611c:	0a3f      	lsrs	r7, r7, #8
 802611e:	fb02 8303 	mla	r3, r2, r3, r8
 8026122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026124:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026128:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802612c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802612e:	fb00 330a 	mla	r3, r0, sl, r3
 8026132:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026136:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026138:	fb09 3c0c 	mla	ip, r9, ip, r3
 802613c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802613e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026142:	434b      	muls	r3, r1
 8026144:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026148:	1c59      	adds	r1, r3, #1
 802614a:	ea47 070c 	orr.w	r7, r7, ip
 802614e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026152:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026156:	b2fa      	uxtb	r2, r7
 8026158:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802615c:	fb12 f200 	smulbb	r2, r2, r0
 8026160:	b2c9      	uxtb	r1, r1
 8026162:	fb03 2301 	mla	r3, r3, r1, r2
 8026166:	b29b      	uxth	r3, r3
 8026168:	1c5a      	adds	r2, r3, #1
 802616a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802616e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026172:	fb12 f201 	smulbb	r2, r2, r1
 8026176:	121b      	asrs	r3, r3, #8
 8026178:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802617c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8026180:	0c3f      	lsrs	r7, r7, #16
 8026182:	fb03 2300 	mla	r3, r3, r0, r2
 8026186:	b29b      	uxth	r3, r3
 8026188:	1c5a      	adds	r2, r3, #1
 802618a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802618e:	121b      	asrs	r3, r3, #8
 8026190:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8026194:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8026198:	fb13 f101 	smulbb	r1, r3, r1
 802619c:	fb07 1700 	mla	r7, r7, r0, r1
 80261a0:	b2bf      	uxth	r7, r7
 80261a2:	1c79      	adds	r1, r7, #1
 80261a4:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80261a8:	123f      	asrs	r7, r7, #8
 80261aa:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80261ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80261b0:	f10e 0e03 	add.w	lr, lr, #3
 80261b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80261b8:	441d      	add	r5, r3
 80261ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80261bc:	441e      	add	r6, r3
 80261be:	e64e      	b.n	8025e5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80261c0:	2800      	cmp	r0, #0
 80261c2:	f43f aee8 	beq.w	8025f96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80261c6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80261ca:	9209      	str	r2, [sp, #36]	; 0x24
 80261cc:	0e12      	lsrs	r2, r2, #24
 80261ce:	9212      	str	r2, [sp, #72]	; 0x48
 80261d0:	e6e1      	b.n	8025f96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80261d2:	b01d      	add	sp, #116	; 0x74
 80261d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080261d8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80261d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261dc:	b087      	sub	sp, #28
 80261de:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80261e2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80261e6:	fb05 7003 	mla	r0, r5, r3, r7
 80261ea:	2d00      	cmp	r5, #0
 80261ec:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80261f0:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 80261f4:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80261f8:	f2c0 810a 	blt.w	8026410 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80261fc:	45a8      	cmp	r8, r5
 80261fe:	f340 8107 	ble.w	8026410 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8026202:	2f00      	cmp	r7, #0
 8026204:	f2c0 8102 	blt.w	802640c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8026208:	42bb      	cmp	r3, r7
 802620a:	f340 80ff 	ble.w	802640c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802620e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8026212:	1c7a      	adds	r2, r7, #1
 8026214:	f100 80ff 	bmi.w	8026416 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8026218:	4293      	cmp	r3, r2
 802621a:	f340 80fc 	ble.w	8026416 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802621e:	2c00      	cmp	r4, #0
 8026220:	f000 80fb 	beq.w	802641a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8026224:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8026228:	3501      	adds	r5, #1
 802622a:	f100 80fa 	bmi.w	8026422 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802622e:	45a8      	cmp	r8, r5
 8026230:	f340 80f7 	ble.w	8026422 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8026234:	f1be 0f00 	cmp.w	lr, #0
 8026238:	f000 80f6 	beq.w	8026428 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 802623c:	2f00      	cmp	r7, #0
 802623e:	f2c0 80ee 	blt.w	802641e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8026242:	42bb      	cmp	r3, r7
 8026244:	f340 80eb 	ble.w	802641e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8026248:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802624c:	3701      	adds	r7, #1
 802624e:	f100 80ee 	bmi.w	802642e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8026252:	42bb      	cmp	r3, r7
 8026254:	f340 80eb 	ble.w	802642e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8026258:	2c00      	cmp	r4, #0
 802625a:	f000 80ea 	beq.w	8026432 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 802625e:	3301      	adds	r3, #1
 8026260:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026264:	fa1f fc84 	uxth.w	ip, r4
 8026268:	fa1f fe8e 	uxth.w	lr, lr
 802626c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026270:	fb0c f90e 	mul.w	r9, ip, lr
 8026274:	0e13      	lsrs	r3, r2, #24
 8026276:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802627a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802627e:	9302      	str	r3, [sp, #8]
 8026280:	ebac 0709 	sub.w	r7, ip, r9
 8026284:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8026288:	fa1f f48e 	uxth.w	r4, lr
 802628c:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8026290:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026294:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8026298:	fb0a fe0e 	mul.w	lr, sl, lr
 802629c:	1b1b      	subs	r3, r3, r4
 802629e:	fb0a f606 	mul.w	r6, sl, r6
 80262a2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80262a6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80262aa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80262ae:	b29b      	uxth	r3, r3
 80262b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262b4:	b2bf      	uxth	r7, r7
 80262b6:	9301      	str	r3, [sp, #4]
 80262b8:	44e6      	add	lr, ip
 80262ba:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80262be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80262c2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80262c6:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80262ca:	9303      	str	r3, [sp, #12]
 80262cc:	0a33      	lsrs	r3, r6, #8
 80262ce:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80262d2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80262d6:	9304      	str	r3, [sp, #16]
 80262d8:	fb0b f606 	mul.w	r6, fp, r6
 80262dc:	fb0b f000 	mul.w	r0, fp, r0
 80262e0:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80262e4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80262e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80262ec:	44b6      	add	lr, r6
 80262ee:	f500 7680 	add.w	r6, r0, #256	; 0x100
 80262f2:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80262f6:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80262fa:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80262fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026302:	fb08 f606 	mul.w	r6, r8, r6
 8026306:	0a03      	lsrs	r3, r0, #8
 8026308:	fb08 f505 	mul.w	r5, r8, r5
 802630c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026310:	0a30      	lsrs	r0, r6, #8
 8026312:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026316:	9305      	str	r3, [sp, #20]
 8026318:	0e13      	lsrs	r3, r2, #24
 802631a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802631e:	fb0e fe07 	mul.w	lr, lr, r7
 8026322:	4430      	add	r0, r6
 8026324:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8026328:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802632c:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8026330:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026334:	0a00      	lsrs	r0, r0, #8
 8026336:	435e      	muls	r6, r3
 8026338:	0a2d      	lsrs	r5, r5, #8
 802633a:	435a      	muls	r2, r3
 802633c:	9b03      	ldr	r3, [sp, #12]
 802633e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8026342:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026346:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802634a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802634e:	44b4      	add	ip, r6
 8026350:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8026354:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026358:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802635c:	9e01      	ldr	r6, [sp, #4]
 802635e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026362:	fb03 ee06 	mla	lr, r3, r6, lr
 8026366:	9b04      	ldr	r3, [sp, #16]
 8026368:	0a12      	lsrs	r2, r2, #8
 802636a:	fb0c ee09 	mla	lr, ip, r9, lr
 802636e:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8026372:	9b05      	ldr	r3, [sp, #20]
 8026374:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026378:	fb00 ee04 	mla	lr, r0, r4, lr
 802637c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026380:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8026384:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8026388:	9b01      	ldr	r3, [sp, #4]
 802638a:	fb07 fe0e 	mul.w	lr, r7, lr
 802638e:	fb07 f70b 	mul.w	r7, r7, fp
 8026392:	fb03 ee06 	mla	lr, r3, r6, lr
 8026396:	fb03 730a 	mla	r3, r3, sl, r7
 802639a:	fb09 e202 	mla	r2, r9, r2, lr
 802639e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80263a2:	fb04 2e0e 	mla	lr, r4, lr, r2
 80263a6:	fb04 3408 	mla	r4, r4, r8, r3
 80263aa:	9b02      	ldr	r3, [sp, #8]
 80263ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263b0:	fb09 4903 	mla	r9, r9, r3, r4
 80263b4:	780b      	ldrb	r3, [r1, #0]
 80263b6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80263ba:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80263be:	ea40 0e0e 	orr.w	lr, r0, lr
 80263c2:	fa5f f989 	uxtb.w	r9, r9
 80263c6:	fb03 f209 	mul.w	r2, r3, r9
 80263ca:	1c53      	adds	r3, r2, #1
 80263cc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80263d0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80263d4:	700b      	strb	r3, [r1, #0]
 80263d6:	784b      	ldrb	r3, [r1, #1]
 80263d8:	fb03 f309 	mul.w	r3, r3, r9
 80263dc:	1c5a      	adds	r2, r3, #1
 80263de:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80263e2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80263e6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80263ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80263ee:	704b      	strb	r3, [r1, #1]
 80263f0:	788b      	ldrb	r3, [r1, #2]
 80263f2:	fb03 f909 	mul.w	r9, r3, r9
 80263f6:	f109 0301 	add.w	r3, r9, #1
 80263fa:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80263fe:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8026402:	f881 e002 	strb.w	lr, [r1, #2]
 8026406:	b007      	add	sp, #28
 8026408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802640c:	2600      	movs	r6, #0
 802640e:	e700      	b.n	8026212 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8026410:	2000      	movs	r0, #0
 8026412:	4606      	mov	r6, r0
 8026414:	e708      	b.n	8026228 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8026416:	2000      	movs	r0, #0
 8026418:	e706      	b.n	8026228 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802641a:	4620      	mov	r0, r4
 802641c:	e704      	b.n	8026228 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802641e:	2500      	movs	r5, #0
 8026420:	e714      	b.n	802624c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8026422:	2200      	movs	r2, #0
 8026424:	4615      	mov	r5, r2
 8026426:	e71d      	b.n	8026264 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026428:	4672      	mov	r2, lr
 802642a:	4675      	mov	r5, lr
 802642c:	e71a      	b.n	8026264 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802642e:	2200      	movs	r2, #0
 8026430:	e718      	b.n	8026264 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026432:	4622      	mov	r2, r4
 8026434:	e716      	b.n	8026264 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08026436 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802643a:	b099      	sub	sp, #100	; 0x64
 802643c:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8026440:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026442:	9017      	str	r0, [sp, #92]	; 0x5c
 8026444:	9306      	str	r3, [sp, #24]
 8026446:	6850      	ldr	r0, [r2, #4]
 8026448:	6812      	ldr	r2, [r2, #0]
 802644a:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 802644e:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8026452:	fb00 1303 	mla	r3, r0, r3, r1
 8026456:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802645a:	18d3      	adds	r3, r2, r3
 802645c:	9309      	str	r3, [sp, #36]	; 0x24
 802645e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026460:	681b      	ldr	r3, [r3, #0]
 8026462:	930e      	str	r3, [sp, #56]	; 0x38
 8026464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026466:	2b00      	cmp	r3, #0
 8026468:	dc03      	bgt.n	8026472 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802646a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802646c:	2b00      	cmp	r3, #0
 802646e:	f340 8360 	ble.w	8026b32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8026472:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026474:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026478:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802647c:	1e48      	subs	r0, r1, #1
 802647e:	1e57      	subs	r7, r2, #1
 8026480:	9b06      	ldr	r3, [sp, #24]
 8026482:	2b00      	cmp	r3, #0
 8026484:	f340 817b 	ble.w	802677e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8026488:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802648c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026490:	d406      	bmi.n	80264a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026492:	4584      	cmp	ip, r0
 8026494:	da04      	bge.n	80264a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026496:	2b00      	cmp	r3, #0
 8026498:	db02      	blt.n	80264a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802649a:	42bb      	cmp	r3, r7
 802649c:	f2c0 8170 	blt.w	8026780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80264a0:	f11c 0c01 	adds.w	ip, ip, #1
 80264a4:	f100 8160 	bmi.w	8026768 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80264a8:	4561      	cmp	r1, ip
 80264aa:	f2c0 815d 	blt.w	8026768 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80264ae:	3301      	adds	r3, #1
 80264b0:	f100 815a 	bmi.w	8026768 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80264b4:	429a      	cmp	r2, r3
 80264b6:	f2c0 8157 	blt.w	8026768 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80264ba:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80264be:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80264c0:	f1b8 0f00 	cmp.w	r8, #0
 80264c4:	f340 8179 	ble.w	80267ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80264c8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80264ca:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80264ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80264d0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80264d4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80264d8:	142a      	asrs	r2, r5, #16
 80264da:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80264de:	689b      	ldr	r3, [r3, #8]
 80264e0:	f100 81be 	bmi.w	8026860 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80264e4:	f103 39ff 	add.w	r9, r3, #4294967295
 80264e8:	454a      	cmp	r2, r9
 80264ea:	f280 81b9 	bge.w	8026860 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80264ee:	f1bc 0f00 	cmp.w	ip, #0
 80264f2:	f2c0 81b5 	blt.w	8026860 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80264f6:	f10e 39ff 	add.w	r9, lr, #4294967295
 80264fa:	45cc      	cmp	ip, r9
 80264fc:	f280 81b0 	bge.w	8026860 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026500:	b21b      	sxth	r3, r3
 8026502:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026504:	fb0c 2203 	mla	r2, ip, r3, r2
 8026508:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802650c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026510:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026514:	2900      	cmp	r1, #0
 8026516:	f000 8197 	beq.w	8026848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802651a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 802651e:	940a      	str	r4, [sp, #40]	; 0x28
 8026520:	0e24      	lsrs	r4, r4, #24
 8026522:	9411      	str	r4, [sp, #68]	; 0x44
 8026524:	b180      	cbz	r0, 8026548 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8026526:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802652a:	3b01      	subs	r3, #1
 802652c:	009b      	lsls	r3, r3, #2
 802652e:	3304      	adds	r3, #4
 8026530:	eb09 0c03 	add.w	ip, r9, r3
 8026534:	f859 3003 	ldr.w	r3, [r9, r3]
 8026538:	9307      	str	r3, [sp, #28]
 802653a:	0e1b      	lsrs	r3, r3, #24
 802653c:	930f      	str	r3, [sp, #60]	; 0x3c
 802653e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026542:	930b      	str	r3, [sp, #44]	; 0x2c
 8026544:	0e1b      	lsrs	r3, r3, #24
 8026546:	9312      	str	r3, [sp, #72]	; 0x48
 8026548:	b289      	uxth	r1, r1
 802654a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802654c:	b280      	uxth	r0, r0
 802654e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026550:	fb01 fa00 	mul.w	sl, r1, r0
 8026554:	0109      	lsls	r1, r1, #4
 8026556:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802655a:	eba1 090a 	sub.w	r9, r1, sl
 802655e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8026562:	b280      	uxth	r0, r0
 8026564:	fa1f f989 	uxth.w	r9, r9
 8026568:	1a09      	subs	r1, r1, r0
 802656a:	fb09 f303 	mul.w	r3, r9, r3
 802656e:	b289      	uxth	r1, r1
 8026570:	fb01 330e 	mla	r3, r1, lr, r3
 8026574:	fb00 3304 	mla	r3, r0, r4, r3
 8026578:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802657a:	fb0a 3304 	mla	r3, sl, r4, r3
 802657e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026582:	2b00      	cmp	r3, #0
 8026584:	f000 80e8 	beq.w	8026758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026588:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802658c:	d01b      	beq.n	80265c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 802658e:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8026592:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026596:	fb0e fb0b 	mul.w	fp, lr, fp
 802659a:	fb0e fe02 	mul.w	lr, lr, r2
 802659e:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80265a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80265a6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80265aa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80265ae:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80265b2:	445a      	add	r2, fp
 80265b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265b8:	0a12      	lsrs	r2, r2, #8
 80265ba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80265be:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80265c2:	ea42 020c 	orr.w	r2, r2, ip
 80265c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80265c8:	2cff      	cmp	r4, #255	; 0xff
 80265ca:	d021      	beq.n	8026610 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80265cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80265ce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80265d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80265d4:	fb04 fc0c 	mul.w	ip, r4, ip
 80265d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80265da:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80265de:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80265e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80265e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80265e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80265ec:	fb04 fb0b 	mul.w	fp, r4, fp
 80265f0:	44e6      	add	lr, ip
 80265f2:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80265f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80265fa:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80265fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026602:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026606:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802660a:	ea4e 040b 	orr.w	r4, lr, fp
 802660e:	940a      	str	r4, [sp, #40]	; 0x28
 8026610:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026612:	2cff      	cmp	r4, #255	; 0xff
 8026614:	d021      	beq.n	802665a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026616:	9c07      	ldr	r4, [sp, #28]
 8026618:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802661c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802661e:	fb04 fc0c 	mul.w	ip, r4, ip
 8026622:	9c07      	ldr	r4, [sp, #28]
 8026624:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026628:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802662c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802662e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026632:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026636:	fb04 fb0b 	mul.w	fp, r4, fp
 802663a:	44e6      	add	lr, ip
 802663c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8026640:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026644:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8026648:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802664c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026650:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026654:	ea4e 040b 	orr.w	r4, lr, fp
 8026658:	9407      	str	r4, [sp, #28]
 802665a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802665c:	2cff      	cmp	r4, #255	; 0xff
 802665e:	d021      	beq.n	80266a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8026660:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026662:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026666:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026668:	fb04 fc0c 	mul.w	ip, r4, ip
 802666c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802666e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026672:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8026676:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026678:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802667c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026680:	fb04 fb0b 	mul.w	fp, r4, fp
 8026684:	44e6      	add	lr, ip
 8026686:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802668a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802668e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8026692:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026696:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802669a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802669e:	ea4e 040b 	orr.w	r4, lr, fp
 80266a2:	940b      	str	r4, [sp, #44]	; 0x2c
 80266a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80266a6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80266aa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80266ae:	2bff      	cmp	r3, #255	; 0xff
 80266b0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80266b4:	9c07      	ldr	r4, [sp, #28]
 80266b6:	fb09 fc0c 	mul.w	ip, r9, ip
 80266ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 80266be:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80266c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80266c4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80266c8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80266cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80266ce:	fb0a cc0e 	mla	ip, sl, lr, ip
 80266d2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80266d6:	fb09 f90e 	mul.w	r9, r9, lr
 80266da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80266de:	fb01 9202 	mla	r2, r1, r2, r9
 80266e2:	9907      	ldr	r1, [sp, #28]
 80266e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80266e8:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80266ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80266ee:	fb00 220b 	mla	r2, r0, fp, r2
 80266f2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80266f6:	fb0a 2a00 	mla	sl, sl, r0, r2
 80266fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026702:	ea4c 0c0a 	orr.w	ip, ip, sl
 8026706:	fa5f f08c 	uxtb.w	r0, ip
 802670a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802670e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026712:	f000 80a2 	beq.w	802685a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8026716:	43db      	mvns	r3, r3
 8026718:	783a      	ldrb	r2, [r7, #0]
 802671a:	f897 a002 	ldrb.w	sl, [r7, #2]
 802671e:	b2db      	uxtb	r3, r3
 8026720:	fb02 fe03 	mul.w	lr, r2, r3
 8026724:	fb0a fa03 	mul.w	sl, sl, r3
 8026728:	f10e 0201 	add.w	r2, lr, #1
 802672c:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8026730:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026734:	703a      	strb	r2, [r7, #0]
 8026736:	787a      	ldrb	r2, [r7, #1]
 8026738:	fb02 f003 	mul.w	r0, r2, r3
 802673c:	f10a 0301 	add.w	r3, sl, #1
 8026740:	1c42      	adds	r2, r0, #1
 8026742:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8026746:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802674a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802674e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026752:	707a      	strb	r2, [r7, #1]
 8026754:	f887 c002 	strb.w	ip, [r7, #2]
 8026758:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802675a:	3703      	adds	r7, #3
 802675c:	f108 38ff 	add.w	r8, r8, #4294967295
 8026760:	441d      	add	r5, r3
 8026762:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026764:	441e      	add	r6, r3
 8026766:	e6ab      	b.n	80264c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026768:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802676a:	441d      	add	r5, r3
 802676c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802676e:	441e      	add	r6, r3
 8026770:	9b06      	ldr	r3, [sp, #24]
 8026772:	3b01      	subs	r3, #1
 8026774:	9306      	str	r3, [sp, #24]
 8026776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026778:	3303      	adds	r3, #3
 802677a:	9309      	str	r3, [sp, #36]	; 0x24
 802677c:	e680      	b.n	8026480 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802677e:	d024      	beq.n	80267ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026780:	9b06      	ldr	r3, [sp, #24]
 8026782:	9825      	ldr	r0, [sp, #148]	; 0x94
 8026784:	3b01      	subs	r3, #1
 8026786:	fb00 5003 	mla	r0, r0, r3, r5
 802678a:	1400      	asrs	r0, r0, #16
 802678c:	f53f ae95 	bmi.w	80264ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026790:	3901      	subs	r1, #1
 8026792:	4288      	cmp	r0, r1
 8026794:	f6bf ae91 	bge.w	80264ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026798:	9926      	ldr	r1, [sp, #152]	; 0x98
 802679a:	fb01 6303 	mla	r3, r1, r3, r6
 802679e:	141b      	asrs	r3, r3, #16
 80267a0:	f53f ae8b 	bmi.w	80264ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80267a4:	3a01      	subs	r2, #1
 80267a6:	4293      	cmp	r3, r2
 80267a8:	f6bf ae87 	bge.w	80264ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80267ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267ae:	f8dd b018 	ldr.w	fp, [sp, #24]
 80267b2:	1cdf      	adds	r7, r3, #3
 80267b4:	f1bb 0f00 	cmp.w	fp, #0
 80267b8:	dc6e      	bgt.n	8026898 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80267ba:	9b06      	ldr	r3, [sp, #24]
 80267bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80267c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80267c6:	4423      	add	r3, r4
 80267c8:	9309      	str	r3, [sp, #36]	; 0x24
 80267ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80267cc:	2b00      	cmp	r3, #0
 80267ce:	f340 81b0 	ble.w	8026b32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80267d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80267d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80267d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80267dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80267e0:	eef0 6a62 	vmov.f32	s13, s5
 80267e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80267e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80267ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80267f0:	ee16 5a90 	vmov	r5, s13
 80267f4:	eef0 6a43 	vmov.f32	s13, s6
 80267f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80267fc:	ee16 6a90 	vmov	r6, s13
 8026800:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026804:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026808:	ee77 2a62 	vsub.f32	s5, s14, s5
 802680c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026810:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026814:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026818:	ee12 2a90 	vmov	r2, s5
 802681c:	eef0 2a47 	vmov.f32	s5, s14
 8026820:	fb92 f3f3 	sdiv	r3, r2, r3
 8026824:	ee13 2a10 	vmov	r2, s6
 8026828:	9325      	str	r3, [sp, #148]	; 0x94
 802682a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802682c:	eeb0 3a67 	vmov.f32	s6, s15
 8026830:	fb92 f3f3 	sdiv	r3, r2, r3
 8026834:	9326      	str	r3, [sp, #152]	; 0x98
 8026836:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026838:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802683a:	3b01      	subs	r3, #1
 802683c:	9315      	str	r3, [sp, #84]	; 0x54
 802683e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026840:	bf08      	it	eq
 8026842:	4613      	moveq	r3, r2
 8026844:	9306      	str	r3, [sp, #24]
 8026846:	e60d      	b.n	8026464 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8026848:	2800      	cmp	r0, #0
 802684a:	f43f ae7d 	beq.w	8026548 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802684e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8026852:	9307      	str	r3, [sp, #28]
 8026854:	0e1b      	lsrs	r3, r3, #24
 8026856:	930f      	str	r3, [sp, #60]	; 0x3c
 8026858:	e676      	b.n	8026548 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802685a:	7038      	strb	r0, [r7, #0]
 802685c:	7079      	strb	r1, [r7, #1]
 802685e:	e779      	b.n	8026754 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8026860:	f112 0901 	adds.w	r9, r2, #1
 8026864:	f53f af78 	bmi.w	8026758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026868:	454b      	cmp	r3, r9
 802686a:	f6ff af75 	blt.w	8026758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802686e:	f11c 0901 	adds.w	r9, ip, #1
 8026872:	f53f af71 	bmi.w	8026758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026876:	45ce      	cmp	lr, r9
 8026878:	f6ff af6e 	blt.w	8026758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802687c:	b21b      	sxth	r3, r3
 802687e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8026882:	fa0f f28e 	sxth.w	r2, lr
 8026886:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802688a:	9200      	str	r2, [sp, #0]
 802688c:	4639      	mov	r1, r7
 802688e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026890:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8026892:	f7ff fca1 	bl	80261d8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8026896:	e75f      	b.n	8026758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026898:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802689a:	1429      	asrs	r1, r5, #16
 802689c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802689e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80268a2:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80268a6:	1433      	asrs	r3, r6, #16
 80268a8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80268ac:	fb0c 1303 	mla	r3, ip, r3, r1
 80268b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80268b2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80268b6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80268ba:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80268be:	2a00      	cmp	r2, #0
 80268c0:	f000 8129 	beq.w	8026b16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80268c4:	684c      	ldr	r4, [r1, #4]
 80268c6:	940c      	str	r4, [sp, #48]	; 0x30
 80268c8:	0e24      	lsrs	r4, r4, #24
 80268ca:	9413      	str	r4, [sp, #76]	; 0x4c
 80268cc:	b198      	cbz	r0, 80268f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80268ce:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80268d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80268d6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80268da:	f10c 0c04 	add.w	ip, ip, #4
 80268de:	eb01 080c 	add.w	r8, r1, ip
 80268e2:	f851 100c 	ldr.w	r1, [r1, ip]
 80268e6:	9108      	str	r1, [sp, #32]
 80268e8:	0e09      	lsrs	r1, r1, #24
 80268ea:	9110      	str	r1, [sp, #64]	; 0x40
 80268ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80268f0:	910d      	str	r1, [sp, #52]	; 0x34
 80268f2:	0e09      	lsrs	r1, r1, #24
 80268f4:	9114      	str	r1, [sp, #80]	; 0x50
 80268f6:	b292      	uxth	r2, r2
 80268f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80268fa:	b280      	uxth	r0, r0
 80268fc:	fb02 f900 	mul.w	r9, r2, r0
 8026900:	0112      	lsls	r2, r2, #4
 8026902:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026906:	eba2 0809 	sub.w	r8, r2, r9
 802690a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802690e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026910:	b280      	uxth	r0, r0
 8026912:	fa1f f888 	uxth.w	r8, r8
 8026916:	1a09      	subs	r1, r1, r0
 8026918:	fb08 f202 	mul.w	r2, r8, r2
 802691c:	b289      	uxth	r1, r1
 802691e:	fb01 220e 	mla	r2, r1, lr, r2
 8026922:	fb00 2204 	mla	r2, r0, r4, r2
 8026926:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026928:	fb09 2204 	mla	r2, r9, r4, r2
 802692c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026930:	2a00      	cmp	r2, #0
 8026932:	f000 80e8 	beq.w	8026b06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8026936:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802693a:	d01b      	beq.n	8026974 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 802693c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026940:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026944:	fb0e fa0a 	mul.w	sl, lr, sl
 8026948:	fb0e fe03 	mul.w	lr, lr, r3
 802694c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026950:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026954:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026958:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802695c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026960:	4453      	add	r3, sl
 8026962:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026966:	0a1b      	lsrs	r3, r3, #8
 8026968:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802696c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026970:	ea43 030c 	orr.w	r3, r3, ip
 8026974:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026976:	2cff      	cmp	r4, #255	; 0xff
 8026978:	d021      	beq.n	80269be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 802697a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802697c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026980:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026982:	fb04 fc0c 	mul.w	ip, r4, ip
 8026986:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026988:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802698c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026990:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026992:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026996:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802699a:	fb04 fa0a 	mul.w	sl, r4, sl
 802699e:	44e6      	add	lr, ip
 80269a0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80269a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80269a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80269ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80269b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80269b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80269b8:	ea4e 040a 	orr.w	r4, lr, sl
 80269bc:	940c      	str	r4, [sp, #48]	; 0x30
 80269be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80269c0:	2cff      	cmp	r4, #255	; 0xff
 80269c2:	d021      	beq.n	8026a08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80269c4:	9c08      	ldr	r4, [sp, #32]
 80269c6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80269ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80269cc:	fb04 fc0c 	mul.w	ip, r4, ip
 80269d0:	9c08      	ldr	r4, [sp, #32]
 80269d2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80269d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80269d8:	fb04 fa0e 	mul.w	sl, r4, lr
 80269dc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80269e0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80269e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80269e8:	44e6      	add	lr, ip
 80269ea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80269ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80269f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80269f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80269fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80269fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a02:	ea4e 040a 	orr.w	r4, lr, sl
 8026a06:	9408      	str	r4, [sp, #32]
 8026a08:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a0a:	2cff      	cmp	r4, #255	; 0xff
 8026a0c:	d021      	beq.n	8026a52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8026a0e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026a10:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026a14:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a16:	fb04 fc0c 	mul.w	ip, r4, ip
 8026a1a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026a1c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026a20:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026a24:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a26:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026a2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026a2e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026a32:	44e6      	add	lr, ip
 8026a34:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026a38:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026a3c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026a40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026a44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a48:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a4c:	ea4e 040a 	orr.w	r4, lr, sl
 8026a50:	940d      	str	r4, [sp, #52]	; 0x34
 8026a52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026a54:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026a58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026a5c:	2aff      	cmp	r2, #255	; 0xff
 8026a5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026a62:	9c08      	ldr	r4, [sp, #32]
 8026a64:	fb08 fc0c 	mul.w	ip, r8, ip
 8026a68:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026a6c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026a70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026a72:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026a76:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026a7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026a7c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026a80:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026a84:	fb08 f80e 	mul.w	r8, r8, lr
 8026a88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a8c:	fb01 8303 	mla	r3, r1, r3, r8
 8026a90:	9908      	ldr	r1, [sp, #32]
 8026a92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a96:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8026a9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026a9c:	fb00 330a 	mla	r3, r0, sl, r3
 8026aa0:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8026aa4:	fb09 3e0e 	mla	lr, r9, lr, r3
 8026aa8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026aac:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026ab0:	ea4c 0c0e 	orr.w	ip, ip, lr
 8026ab4:	fa5f f08c 	uxtb.w	r0, ip
 8026ab8:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8026abc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026ac0:	d032      	beq.n	8026b28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8026ac2:	43d2      	mvns	r2, r2
 8026ac4:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8026ac8:	b2d2      	uxtb	r2, r2
 8026aca:	fb0e fe02 	mul.w	lr, lr, r2
 8026ace:	f10e 0301 	add.w	r3, lr, #1
 8026ad2:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8026ad6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026ada:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8026ade:	4350      	muls	r0, r2
 8026ae0:	f807 3c03 	strb.w	r3, [r7, #-3]
 8026ae4:	1c43      	adds	r3, r0, #1
 8026ae6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026aea:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026aee:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8026af2:	4353      	muls	r3, r2
 8026af4:	f807 1c02 	strb.w	r1, [r7, #-2]
 8026af8:	1c5a      	adds	r2, r3, #1
 8026afa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026afe:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8026b02:	f807 cc01 	strb.w	ip, [r7, #-1]
 8026b06:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026b08:	3703      	adds	r7, #3
 8026b0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026b0e:	441d      	add	r5, r3
 8026b10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b12:	441e      	add	r6, r3
 8026b14:	e64e      	b.n	80267b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026b16:	2800      	cmp	r0, #0
 8026b18:	f43f aeed 	beq.w	80268f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8026b1c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8026b20:	9108      	str	r1, [sp, #32]
 8026b22:	0e09      	lsrs	r1, r1, #24
 8026b24:	9110      	str	r1, [sp, #64]	; 0x40
 8026b26:	e6e6      	b.n	80268f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8026b28:	f807 0c03 	strb.w	r0, [r7, #-3]
 8026b2c:	f807 1c02 	strb.w	r1, [r7, #-2]
 8026b30:	e7e7      	b.n	8026b02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8026b32:	b019      	add	sp, #100	; 0x64
 8026b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026b38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8026b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b3c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8026b40:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026b44:	2c00      	cmp	r4, #0
 8026b46:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8026b4a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8026b4e:	fb00 4e03 	mla	lr, r0, r3, r4
 8026b52:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8026b56:	f2c0 80b8 	blt.w	8026cca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026b5a:	45a1      	cmp	r9, r4
 8026b5c:	f340 80b5 	ble.w	8026cca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026b60:	2800      	cmp	r0, #0
 8026b62:	f2c0 80b2 	blt.w	8026cca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026b66:	4580      	cmp	r8, r0
 8026b68:	f340 80af 	ble.w	8026cca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026b6c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8026b70:	f01e 0f01 	tst.w	lr, #1
 8026b74:	5d56      	ldrb	r6, [r2, r5]
 8026b76:	bf0c      	ite	eq
 8026b78:	f006 060f 	andeq.w	r6, r6, #15
 8026b7c:	1136      	asrne	r6, r6, #4
 8026b7e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026b82:	b2f6      	uxtb	r6, r6
 8026b84:	f114 0a01 	adds.w	sl, r4, #1
 8026b88:	f100 80a1 	bmi.w	8026cce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026b8c:	45d1      	cmp	r9, sl
 8026b8e:	f340 809e 	ble.w	8026cce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026b92:	2800      	cmp	r0, #0
 8026b94:	f2c0 809b 	blt.w	8026cce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026b98:	4580      	cmp	r8, r0
 8026b9a:	f340 8098 	ble.w	8026cce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026b9e:	2f00      	cmp	r7, #0
 8026ba0:	f000 8097 	beq.w	8026cd2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8026ba4:	f10e 0b01 	add.w	fp, lr, #1
 8026ba8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8026bac:	f01b 0f01 	tst.w	fp, #1
 8026bb0:	5d55      	ldrb	r5, [r2, r5]
 8026bb2:	bf0c      	ite	eq
 8026bb4:	f005 050f 	andeq.w	r5, r5, #15
 8026bb8:	112d      	asrne	r5, r5, #4
 8026bba:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8026bbe:	b2ed      	uxtb	r5, r5
 8026bc0:	f1bc 0f00 	cmp.w	ip, #0
 8026bc4:	f000 8089 	beq.w	8026cda <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8026bc8:	2c00      	cmp	r4, #0
 8026bca:	f100 0001 	add.w	r0, r0, #1
 8026bce:	f2c0 8082 	blt.w	8026cd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8026bd2:	45a1      	cmp	r9, r4
 8026bd4:	dd7f      	ble.n	8026cd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8026bd6:	2800      	cmp	r0, #0
 8026bd8:	db7d      	blt.n	8026cd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8026bda:	4580      	cmp	r8, r0
 8026bdc:	dd7b      	ble.n	8026cd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8026bde:	eb03 0b0e 	add.w	fp, r3, lr
 8026be2:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8026be6:	f01b 0f01 	tst.w	fp, #1
 8026bea:	5d14      	ldrb	r4, [r2, r4]
 8026bec:	bf0c      	ite	eq
 8026bee:	f004 040f 	andeq.w	r4, r4, #15
 8026bf2:	1124      	asrne	r4, r4, #4
 8026bf4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026bf8:	b2e4      	uxtb	r4, r4
 8026bfa:	f1ba 0f00 	cmp.w	sl, #0
 8026bfe:	db6f      	blt.n	8026ce0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8026c00:	45d1      	cmp	r9, sl
 8026c02:	dd6d      	ble.n	8026ce0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8026c04:	2800      	cmp	r0, #0
 8026c06:	db6b      	blt.n	8026ce0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8026c08:	4580      	cmp	r8, r0
 8026c0a:	dd69      	ble.n	8026ce0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8026c0c:	2f00      	cmp	r7, #0
 8026c0e:	d069      	beq.n	8026ce4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8026c10:	3301      	adds	r3, #1
 8026c12:	449e      	add	lr, r3
 8026c14:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026c18:	f01e 0f01 	tst.w	lr, #1
 8026c1c:	5cd0      	ldrb	r0, [r2, r3]
 8026c1e:	bf0c      	ite	eq
 8026c20:	f000 000f 	andeq.w	r0, r0, #15
 8026c24:	1100      	asrne	r0, r0, #4
 8026c26:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026c2a:	b2c3      	uxtb	r3, r0
 8026c2c:	b2ba      	uxth	r2, r7
 8026c2e:	fa1f fc8c 	uxth.w	ip, ip
 8026c32:	fb02 f00c 	mul.w	r0, r2, ip
 8026c36:	0112      	lsls	r2, r2, #4
 8026c38:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8026c3c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8026c40:	1a12      	subs	r2, r2, r0
 8026c42:	fa1f fc8c 	uxth.w	ip, ip
 8026c46:	b292      	uxth	r2, r2
 8026c48:	eba7 070c 	sub.w	r7, r7, ip
 8026c4c:	436a      	muls	r2, r5
 8026c4e:	b2bf      	uxth	r7, r7
 8026c50:	fb06 2207 	mla	r2, r6, r7, r2
 8026c54:	fb0c 2404 	mla	r4, ip, r4, r2
 8026c58:	fb00 4303 	mla	r3, r0, r3, r4
 8026c5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026c60:	b38b      	cbz	r3, 8026cc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8026c62:	4a21      	ldr	r2, [pc, #132]	; (8026ce8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8026c64:	6814      	ldr	r4, [r2, #0]
 8026c66:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8026c6a:	b2e5      	uxtb	r5, r4
 8026c6c:	4353      	muls	r3, r2
 8026c6e:	1c5a      	adds	r2, r3, #1
 8026c70:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026c74:	1212      	asrs	r2, r2, #8
 8026c76:	b290      	uxth	r0, r2
 8026c78:	43d2      	mvns	r2, r2
 8026c7a:	fb15 f500 	smulbb	r5, r5, r0
 8026c7e:	b2d3      	uxtb	r3, r2
 8026c80:	780a      	ldrb	r2, [r1, #0]
 8026c82:	fb02 5203 	mla	r2, r2, r3, r5
 8026c86:	b292      	uxth	r2, r2
 8026c88:	1c55      	adds	r5, r2, #1
 8026c8a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8026c8e:	784d      	ldrb	r5, [r1, #1]
 8026c90:	fb15 f503 	smulbb	r5, r5, r3
 8026c94:	1212      	asrs	r2, r2, #8
 8026c96:	700a      	strb	r2, [r1, #0]
 8026c98:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8026c9c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8026ca0:	fb02 5200 	mla	r2, r2, r0, r5
 8026ca4:	b292      	uxth	r2, r2
 8026ca6:	1c55      	adds	r5, r2, #1
 8026ca8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8026cac:	1212      	asrs	r2, r2, #8
 8026cae:	704a      	strb	r2, [r1, #1]
 8026cb0:	788a      	ldrb	r2, [r1, #2]
 8026cb2:	fb12 f303 	smulbb	r3, r2, r3
 8026cb6:	fb04 3300 	mla	r3, r4, r0, r3
 8026cba:	b29b      	uxth	r3, r3
 8026cbc:	1c5a      	adds	r2, r3, #1
 8026cbe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026cc2:	121b      	asrs	r3, r3, #8
 8026cc4:	708b      	strb	r3, [r1, #2]
 8026cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026cca:	2600      	movs	r6, #0
 8026ccc:	e75a      	b.n	8026b84 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8026cce:	2500      	movs	r5, #0
 8026cd0:	e776      	b.n	8026bc0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8026cd2:	463d      	mov	r5, r7
 8026cd4:	e774      	b.n	8026bc0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8026cd6:	2400      	movs	r4, #0
 8026cd8:	e78f      	b.n	8026bfa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8026cda:	4663      	mov	r3, ip
 8026cdc:	4664      	mov	r4, ip
 8026cde:	e7a5      	b.n	8026c2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8026ce0:	2300      	movs	r3, #0
 8026ce2:	e7a3      	b.n	8026c2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8026ce4:	463b      	mov	r3, r7
 8026ce6:	e7a1      	b.n	8026c2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8026ce8:	2402626c 	.word	0x2402626c

08026cec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cf0:	b097      	sub	sp, #92	; 0x5c
 8026cf2:	9214      	str	r2, [sp, #80]	; 0x50
 8026cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8026cf6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026cf8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8026cfc:	9015      	str	r0, [sp, #84]	; 0x54
 8026cfe:	910c      	str	r1, [sp, #48]	; 0x30
 8026d00:	6850      	ldr	r0, [r2, #4]
 8026d02:	930e      	str	r3, [sp, #56]	; 0x38
 8026d04:	6812      	ldr	r2, [r2, #0]
 8026d06:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8026d0a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8026d0e:	fb00 1303 	mla	r3, r0, r3, r1
 8026d12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026d16:	eb02 0a03 	add.w	sl, r2, r3
 8026d1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d1c:	689b      	ldr	r3, [r3, #8]
 8026d1e:	3301      	adds	r3, #1
 8026d20:	f023 0301 	bic.w	r3, r3, #1
 8026d24:	930f      	str	r3, [sp, #60]	; 0x3c
 8026d26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d28:	681f      	ldr	r7, [r3, #0]
 8026d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026d2c:	2b00      	cmp	r3, #0
 8026d2e:	dc03      	bgt.n	8026d38 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026d30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026d32:	2b00      	cmp	r3, #0
 8026d34:	f340 8247 	ble.w	80271c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8026d38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026d3e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026d42:	1e48      	subs	r0, r1, #1
 8026d44:	f102 3cff 	add.w	ip, r2, #4294967295
 8026d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d4a:	2b00      	cmp	r3, #0
 8026d4c:	f340 80e5 	ble.w	8026f1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026d50:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8026d54:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026d58:	d406      	bmi.n	8026d68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026d5a:	4586      	cmp	lr, r0
 8026d5c:	da04      	bge.n	8026d68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026d5e:	2b00      	cmp	r3, #0
 8026d60:	db02      	blt.n	8026d68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026d62:	4563      	cmp	r3, ip
 8026d64:	f2c0 80da 	blt.w	8026f1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8026d68:	f11e 0e01 	adds.w	lr, lr, #1
 8026d6c:	f100 80cb 	bmi.w	8026f06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026d70:	4571      	cmp	r1, lr
 8026d72:	f2c0 80c8 	blt.w	8026f06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026d76:	3301      	adds	r3, #1
 8026d78:	f100 80c5 	bmi.w	8026f06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026d7c:	429a      	cmp	r2, r3
 8026d7e:	f2c0 80c2 	blt.w	8026f06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d84:	46d0      	mov	r8, sl
 8026d86:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8026d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8026d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026d8e:	2b00      	cmp	r3, #0
 8026d90:	f340 80e3 	ble.w	8026f5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8026d94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d96:	1430      	asrs	r0, r6, #16
 8026d98:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8026d9c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026da0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026da4:	142b      	asrs	r3, r5, #16
 8026da6:	f100 812e 	bmi.w	8027006 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026daa:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026dae:	455b      	cmp	r3, fp
 8026db0:	f280 8129 	bge.w	8027006 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026db4:	2800      	cmp	r0, #0
 8026db6:	f2c0 8126 	blt.w	8027006 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026dba:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026dbe:	4558      	cmp	r0, fp
 8026dc0:	f280 8121 	bge.w	8027006 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026dc4:	fb00 3309 	mla	r3, r0, r9, r3
 8026dc8:	0858      	lsrs	r0, r3, #1
 8026dca:	07dc      	lsls	r4, r3, #31
 8026dcc:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026dd0:	bf54      	ite	pl
 8026dd2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026dd6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026dda:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026dde:	fa5f fc8c 	uxtb.w	ip, ip
 8026de2:	2a00      	cmp	r2, #0
 8026de4:	f000 80fe 	beq.w	8026fe4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8026de8:	1c58      	adds	r0, r3, #1
 8026dea:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026dee:	07c0      	lsls	r0, r0, #31
 8026df0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026df4:	bf54      	ite	pl
 8026df6:	f00e 0e0f 	andpl.w	lr, lr, #15
 8026dfa:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026dfe:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026e02:	fa5f f08e 	uxtb.w	r0, lr
 8026e06:	9010      	str	r0, [sp, #64]	; 0x40
 8026e08:	b1d9      	cbz	r1, 8026e42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8026e0a:	444b      	add	r3, r9
 8026e0c:	0858      	lsrs	r0, r3, #1
 8026e0e:	07dc      	lsls	r4, r3, #31
 8026e10:	f103 0301 	add.w	r3, r3, #1
 8026e14:	5c38      	ldrb	r0, [r7, r0]
 8026e16:	bf54      	ite	pl
 8026e18:	f000 000f 	andpl.w	r0, r0, #15
 8026e1c:	1100      	asrmi	r0, r0, #4
 8026e1e:	07dc      	lsls	r4, r3, #31
 8026e20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026e24:	b2c0      	uxtb	r0, r0
 8026e26:	900a      	str	r0, [sp, #40]	; 0x28
 8026e28:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8026e2c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8026e30:	bf54      	ite	pl
 8026e32:	f00e 030f 	andpl.w	r3, lr, #15
 8026e36:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8026e3a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026e3e:	b2db      	uxtb	r3, r3
 8026e40:	9311      	str	r3, [sp, #68]	; 0x44
 8026e42:	b292      	uxth	r2, r2
 8026e44:	b289      	uxth	r1, r1
 8026e46:	0113      	lsls	r3, r2, #4
 8026e48:	fb02 f001 	mul.w	r0, r2, r1
 8026e4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026e4e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8026e52:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8026e56:	1a1b      	subs	r3, r3, r0
 8026e58:	b289      	uxth	r1, r1
 8026e5a:	b29b      	uxth	r3, r3
 8026e5c:	ebae 0e01 	sub.w	lr, lr, r1
 8026e60:	4353      	muls	r3, r2
 8026e62:	fa1f fe8e 	uxth.w	lr, lr
 8026e66:	fb0c 320e 	mla	r2, ip, lr, r3
 8026e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e6c:	fb01 2203 	mla	r2, r1, r3, r2
 8026e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026e72:	fb00 2203 	mla	r2, r0, r3, r2
 8026e76:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026e7a:	2a00      	cmp	r2, #0
 8026e7c:	d039      	beq.n	8026ef2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026e7e:	4bc7      	ldr	r3, [pc, #796]	; (802719c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8026e80:	6819      	ldr	r1, [r3, #0]
 8026e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026e84:	fa5f fc81 	uxtb.w	ip, r1
 8026e88:	435a      	muls	r2, r3
 8026e8a:	1c53      	adds	r3, r2, #1
 8026e8c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026e90:	1212      	asrs	r2, r2, #8
 8026e92:	b290      	uxth	r0, r2
 8026e94:	43d2      	mvns	r2, r2
 8026e96:	fb1c fc00 	smulbb	ip, ip, r0
 8026e9a:	b2d3      	uxtb	r3, r2
 8026e9c:	f898 2000 	ldrb.w	r2, [r8]
 8026ea0:	fb02 c203 	mla	r2, r2, r3, ip
 8026ea4:	b292      	uxth	r2, r2
 8026ea6:	f102 0c01 	add.w	ip, r2, #1
 8026eaa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026eae:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026eb2:	fb1c fc03 	smulbb	ip, ip, r3
 8026eb6:	1212      	asrs	r2, r2, #8
 8026eb8:	f888 2000 	strb.w	r2, [r8]
 8026ebc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8026ec0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8026ec4:	fb02 c200 	mla	r2, r2, r0, ip
 8026ec8:	b292      	uxth	r2, r2
 8026eca:	f102 0c01 	add.w	ip, r2, #1
 8026ece:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026ed2:	1212      	asrs	r2, r2, #8
 8026ed4:	f888 2001 	strb.w	r2, [r8, #1]
 8026ed8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8026edc:	fb12 f303 	smulbb	r3, r2, r3
 8026ee0:	fb01 3300 	mla	r3, r1, r0, r3
 8026ee4:	b29b      	uxth	r3, r3
 8026ee6:	1c5a      	adds	r2, r3, #1
 8026ee8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026eec:	121b      	asrs	r3, r3, #8
 8026eee:	f888 3002 	strb.w	r3, [r8, #2]
 8026ef2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026ef4:	f108 0803 	add.w	r8, r8, #3
 8026ef8:	441d      	add	r5, r3
 8026efa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026efc:	441e      	add	r6, r3
 8026efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026f00:	3b01      	subs	r3, #1
 8026f02:	930d      	str	r3, [sp, #52]	; 0x34
 8026f04:	e742      	b.n	8026d8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026f06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026f08:	f10a 0a03 	add.w	sl, sl, #3
 8026f0c:	441d      	add	r5, r3
 8026f0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026f10:	441e      	add	r6, r3
 8026f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f14:	3b01      	subs	r3, #1
 8026f16:	9309      	str	r3, [sp, #36]	; 0x24
 8026f18:	e716      	b.n	8026d48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8026f1a:	d024      	beq.n	8026f66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8026f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f1e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8026f20:	3b01      	subs	r3, #1
 8026f22:	fb00 5003 	mla	r0, r0, r3, r5
 8026f26:	1400      	asrs	r0, r0, #16
 8026f28:	f53f af2b 	bmi.w	8026d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026f2c:	3901      	subs	r1, #1
 8026f2e:	4288      	cmp	r0, r1
 8026f30:	f6bf af27 	bge.w	8026d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026f34:	9924      	ldr	r1, [sp, #144]	; 0x90
 8026f36:	fb01 6303 	mla	r3, r1, r3, r6
 8026f3a:	141b      	asrs	r3, r3, #16
 8026f3c:	f53f af21 	bmi.w	8026d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026f40:	3a01      	subs	r2, #1
 8026f42:	4293      	cmp	r3, r2
 8026f44:	f6bf af1d 	bge.w	8026d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026f48:	f10a 0e03 	add.w	lr, sl, #3
 8026f4c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8026f50:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8026f54:	f1b8 0f00 	cmp.w	r8, #0
 8026f58:	dc76      	bgt.n	8027048 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8026f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f5c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026f60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026f64:	44a2      	add	sl, r4
 8026f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026f68:	2b00      	cmp	r3, #0
 8026f6a:	f340 812c 	ble.w	80271c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8026f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026f72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026f74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026f78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026f7c:	eef0 6a62 	vmov.f32	s13, s5
 8026f80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026f84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026f88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026f8c:	ee16 5a90 	vmov	r5, s13
 8026f90:	eef0 6a43 	vmov.f32	s13, s6
 8026f94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026f98:	ee16 6a90 	vmov	r6, s13
 8026f9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026fa0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026fa4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026fa8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026fac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026fb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026fb4:	ee12 2a90 	vmov	r2, s5
 8026fb8:	eef0 2a47 	vmov.f32	s5, s14
 8026fbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8026fc0:	ee13 2a10 	vmov	r2, s6
 8026fc4:	9323      	str	r3, [sp, #140]	; 0x8c
 8026fc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026fc8:	eeb0 3a67 	vmov.f32	s6, s15
 8026fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8026fd0:	9324      	str	r3, [sp, #144]	; 0x90
 8026fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026fd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026fd6:	3b01      	subs	r3, #1
 8026fd8:	930c      	str	r3, [sp, #48]	; 0x30
 8026fda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026fdc:	bf08      	it	eq
 8026fde:	4613      	moveq	r3, r2
 8026fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8026fe2:	e6a2      	b.n	8026d2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8026fe4:	2900      	cmp	r1, #0
 8026fe6:	f43f af2c 	beq.w	8026e42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8026fea:	eb09 0003 	add.w	r0, r9, r3
 8026fee:	0843      	lsrs	r3, r0, #1
 8026ff0:	07c0      	lsls	r0, r0, #31
 8026ff2:	5cfb      	ldrb	r3, [r7, r3]
 8026ff4:	bf54      	ite	pl
 8026ff6:	f003 030f 	andpl.w	r3, r3, #15
 8026ffa:	111b      	asrmi	r3, r3, #4
 8026ffc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027000:	b2db      	uxtb	r3, r3
 8027002:	930a      	str	r3, [sp, #40]	; 0x28
 8027004:	e71d      	b.n	8026e42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027006:	f113 0b01 	adds.w	fp, r3, #1
 802700a:	f53f af72 	bmi.w	8026ef2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802700e:	45dc      	cmp	ip, fp
 8027010:	f6ff af6f 	blt.w	8026ef2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027014:	f110 0b01 	adds.w	fp, r0, #1
 8027018:	f53f af6b 	bmi.w	8026ef2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802701c:	45de      	cmp	lr, fp
 802701e:	f6ff af68 	blt.w	8026ef2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027022:	9302      	str	r3, [sp, #8]
 8027024:	fa0f f38e 	sxth.w	r3, lr
 8027028:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802702a:	9301      	str	r3, [sp, #4]
 802702c:	fa0f f38c 	sxth.w	r3, ip
 8027030:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027034:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8027038:	9300      	str	r3, [sp, #0]
 802703a:	463a      	mov	r2, r7
 802703c:	464b      	mov	r3, r9
 802703e:	4641      	mov	r1, r8
 8027040:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027042:	f7ff fd79 	bl	8026b38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8027046:	e754      	b.n	8026ef2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027048:	142a      	asrs	r2, r5, #16
 802704a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802704e:	1433      	asrs	r3, r6, #16
 8027050:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027054:	fb09 2303 	mla	r3, r9, r3, r2
 8027058:	085a      	lsrs	r2, r3, #1
 802705a:	07dc      	lsls	r4, r3, #31
 802705c:	5cba      	ldrb	r2, [r7, r2]
 802705e:	bf54      	ite	pl
 8027060:	f002 020f 	andpl.w	r2, r2, #15
 8027064:	1112      	asrmi	r2, r2, #4
 8027066:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802706a:	b2d2      	uxtb	r2, r2
 802706c:	2900      	cmp	r1, #0
 802706e:	f000 8097 	beq.w	80271a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8027072:	f103 0b01 	add.w	fp, r3, #1
 8027076:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802707a:	f01b 0f01 	tst.w	fp, #1
 802707e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027082:	bf0c      	ite	eq
 8027084:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027088:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802708c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027090:	fa5f f48c 	uxtb.w	r4, ip
 8027094:	9412      	str	r4, [sp, #72]	; 0x48
 8027096:	b300      	cbz	r0, 80270da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027098:	444b      	add	r3, r9
 802709a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802709e:	07dc      	lsls	r4, r3, #31
 80270a0:	f103 0301 	add.w	r3, r3, #1
 80270a4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80270a8:	bf54      	ite	pl
 80270aa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80270ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80270b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80270b6:	fa5f f48c 	uxtb.w	r4, ip
 80270ba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80270be:	940b      	str	r4, [sp, #44]	; 0x2c
 80270c0:	07dc      	lsls	r4, r3, #31
 80270c2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80270c6:	bf54      	ite	pl
 80270c8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80270cc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80270d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80270d4:	fa5f f38c 	uxtb.w	r3, ip
 80270d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80270da:	b289      	uxth	r1, r1
 80270dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80270de:	b280      	uxth	r0, r0
 80270e0:	fb01 f300 	mul.w	r3, r1, r0
 80270e4:	0109      	lsls	r1, r1, #4
 80270e6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80270ea:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80270ee:	1ac9      	subs	r1, r1, r3
 80270f0:	b280      	uxth	r0, r0
 80270f2:	b289      	uxth	r1, r1
 80270f4:	ebac 0c00 	sub.w	ip, ip, r0
 80270f8:	4361      	muls	r1, r4
 80270fa:	fa1f fc8c 	uxth.w	ip, ip
 80270fe:	fb02 120c 	mla	r2, r2, ip, r1
 8027102:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027104:	fb00 2001 	mla	r0, r0, r1, r2
 8027108:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802710a:	fb03 0302 	mla	r3, r3, r2, r0
 802710e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027112:	2b00      	cmp	r3, #0
 8027114:	d039      	beq.n	802718a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027116:	4a21      	ldr	r2, [pc, #132]	; (802719c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027118:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802711c:	6810      	ldr	r0, [r2, #0]
 802711e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027120:	fa5f fc80 	uxtb.w	ip, r0
 8027124:	4353      	muls	r3, r2
 8027126:	1c5a      	adds	r2, r3, #1
 8027128:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802712c:	121b      	asrs	r3, r3, #8
 802712e:	b29a      	uxth	r2, r3
 8027130:	43db      	mvns	r3, r3
 8027132:	fb1c fc02 	smulbb	ip, ip, r2
 8027136:	b2db      	uxtb	r3, r3
 8027138:	fb01 c103 	mla	r1, r1, r3, ip
 802713c:	b289      	uxth	r1, r1
 802713e:	f101 0c01 	add.w	ip, r1, #1
 8027142:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8027146:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802714a:	fb1c fc03 	smulbb	ip, ip, r3
 802714e:	1209      	asrs	r1, r1, #8
 8027150:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8027154:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8027158:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802715c:	fb01 c102 	mla	r1, r1, r2, ip
 8027160:	b289      	uxth	r1, r1
 8027162:	f101 0c01 	add.w	ip, r1, #1
 8027166:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802716a:	1209      	asrs	r1, r1, #8
 802716c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8027170:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8027174:	fb11 f303 	smulbb	r3, r1, r3
 8027178:	fb00 3002 	mla	r0, r0, r2, r3
 802717c:	b280      	uxth	r0, r0
 802717e:	1c42      	adds	r2, r0, #1
 8027180:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027184:	1200      	asrs	r0, r0, #8
 8027186:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802718a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802718c:	f10e 0e03 	add.w	lr, lr, #3
 8027190:	f108 38ff 	add.w	r8, r8, #4294967295
 8027194:	441d      	add	r5, r3
 8027196:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027198:	441e      	add	r6, r3
 802719a:	e6db      	b.n	8026f54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802719c:	2402626c 	.word	0x2402626c
 80271a0:	2800      	cmp	r0, #0
 80271a2:	d09a      	beq.n	80270da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80271a4:	444b      	add	r3, r9
 80271a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80271aa:	07db      	lsls	r3, r3, #31
 80271ac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80271b0:	bf54      	ite	pl
 80271b2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80271b6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80271ba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80271be:	fa5f f38c 	uxtb.w	r3, ip
 80271c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80271c4:	e789      	b.n	80270da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80271c6:	b017      	add	sp, #92	; 0x5c
 80271c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080271cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80271cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271d0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 80271d4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80271d8:	2d00      	cmp	r5, #0
 80271da:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80271de:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80271e2:	fb04 5e03 	mla	lr, r4, r3, r5
 80271e6:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80271ea:	f2c0 80b1 	blt.w	8027350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80271ee:	45a9      	cmp	r9, r5
 80271f0:	f340 80ae 	ble.w	8027350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80271f4:	2c00      	cmp	r4, #0
 80271f6:	f2c0 80ab 	blt.w	8027350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80271fa:	45a0      	cmp	r8, r4
 80271fc:	f340 80a8 	ble.w	8027350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8027200:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8027204:	f01e 0f01 	tst.w	lr, #1
 8027208:	5d97      	ldrb	r7, [r2, r6]
 802720a:	bf0c      	ite	eq
 802720c:	f007 070f 	andeq.w	r7, r7, #15
 8027210:	113f      	asrne	r7, r7, #4
 8027212:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8027216:	b2ff      	uxtb	r7, r7
 8027218:	f115 0a01 	adds.w	sl, r5, #1
 802721c:	f100 809a 	bmi.w	8027354 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8027220:	45d1      	cmp	r9, sl
 8027222:	f340 8097 	ble.w	8027354 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8027226:	2c00      	cmp	r4, #0
 8027228:	f2c0 8094 	blt.w	8027354 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802722c:	45a0      	cmp	r8, r4
 802722e:	f340 8091 	ble.w	8027354 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8027232:	2800      	cmp	r0, #0
 8027234:	f000 8090 	beq.w	8027358 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8027238:	f10e 0b01 	add.w	fp, lr, #1
 802723c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8027240:	f01b 0f01 	tst.w	fp, #1
 8027244:	5d96      	ldrb	r6, [r2, r6]
 8027246:	bf0c      	ite	eq
 8027248:	f006 060f 	andeq.w	r6, r6, #15
 802724c:	1136      	asrne	r6, r6, #4
 802724e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027252:	b2f6      	uxtb	r6, r6
 8027254:	f1bc 0f00 	cmp.w	ip, #0
 8027258:	f000 8082 	beq.w	8027360 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 802725c:	2d00      	cmp	r5, #0
 802725e:	f104 0401 	add.w	r4, r4, #1
 8027262:	db7b      	blt.n	802735c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027264:	45a9      	cmp	r9, r5
 8027266:	dd79      	ble.n	802735c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027268:	2c00      	cmp	r4, #0
 802726a:	db77      	blt.n	802735c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802726c:	45a0      	cmp	r8, r4
 802726e:	dd75      	ble.n	802735c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027270:	eb03 0b0e 	add.w	fp, r3, lr
 8027274:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8027278:	f01b 0f01 	tst.w	fp, #1
 802727c:	5d55      	ldrb	r5, [r2, r5]
 802727e:	bf0c      	ite	eq
 8027280:	f005 050f 	andeq.w	r5, r5, #15
 8027284:	112d      	asrne	r5, r5, #4
 8027286:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802728a:	b2ed      	uxtb	r5, r5
 802728c:	f1ba 0f00 	cmp.w	sl, #0
 8027290:	db69      	blt.n	8027366 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8027292:	45d1      	cmp	r9, sl
 8027294:	dd67      	ble.n	8027366 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8027296:	2c00      	cmp	r4, #0
 8027298:	db65      	blt.n	8027366 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802729a:	45a0      	cmp	r8, r4
 802729c:	dd63      	ble.n	8027366 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802729e:	2800      	cmp	r0, #0
 80272a0:	d063      	beq.n	802736a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80272a2:	3301      	adds	r3, #1
 80272a4:	449e      	add	lr, r3
 80272a6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80272aa:	f01e 0f01 	tst.w	lr, #1
 80272ae:	5cd4      	ldrb	r4, [r2, r3]
 80272b0:	bf0c      	ite	eq
 80272b2:	f004 040f 	andeq.w	r4, r4, #15
 80272b6:	1124      	asrne	r4, r4, #4
 80272b8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80272bc:	b2e3      	uxtb	r3, r4
 80272be:	b282      	uxth	r2, r0
 80272c0:	fa1f fc8c 	uxth.w	ip, ip
 80272c4:	fb02 f40c 	mul.w	r4, r2, ip
 80272c8:	0112      	lsls	r2, r2, #4
 80272ca:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80272ce:	fa1f f08c 	uxth.w	r0, ip
 80272d2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80272d6:	1b12      	subs	r2, r2, r4
 80272d8:	ebac 0c00 	sub.w	ip, ip, r0
 80272dc:	b292      	uxth	r2, r2
 80272de:	fa1f fc8c 	uxth.w	ip, ip
 80272e2:	4372      	muls	r2, r6
 80272e4:	fb07 220c 	mla	r2, r7, ip, r2
 80272e8:	fb00 2005 	mla	r0, r0, r5, r2
 80272ec:	fb04 0303 	mla	r3, r4, r3, r0
 80272f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80272f4:	b353      	cbz	r3, 802734c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80272f6:	4a1e      	ldr	r2, [pc, #120]	; (8027370 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80272f8:	7808      	ldrb	r0, [r1, #0]
 80272fa:	6814      	ldr	r4, [r2, #0]
 80272fc:	b29a      	uxth	r2, r3
 80272fe:	43db      	mvns	r3, r3
 8027300:	b2e5      	uxtb	r5, r4
 8027302:	b2db      	uxtb	r3, r3
 8027304:	fb15 f502 	smulbb	r5, r5, r2
 8027308:	fb00 5003 	mla	r0, r0, r3, r5
 802730c:	b280      	uxth	r0, r0
 802730e:	1c45      	adds	r5, r0, #1
 8027310:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027314:	784d      	ldrb	r5, [r1, #1]
 8027316:	fb15 f503 	smulbb	r5, r5, r3
 802731a:	1200      	asrs	r0, r0, #8
 802731c:	7008      	strb	r0, [r1, #0]
 802731e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8027322:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8027326:	fb00 5002 	mla	r0, r0, r2, r5
 802732a:	b280      	uxth	r0, r0
 802732c:	1c45      	adds	r5, r0, #1
 802732e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027332:	1200      	asrs	r0, r0, #8
 8027334:	7048      	strb	r0, [r1, #1]
 8027336:	7888      	ldrb	r0, [r1, #2]
 8027338:	fb10 f303 	smulbb	r3, r0, r3
 802733c:	fb04 3202 	mla	r2, r4, r2, r3
 8027340:	b292      	uxth	r2, r2
 8027342:	1c53      	adds	r3, r2, #1
 8027344:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027348:	1212      	asrs	r2, r2, #8
 802734a:	708a      	strb	r2, [r1, #2]
 802734c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027350:	2700      	movs	r7, #0
 8027352:	e761      	b.n	8027218 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8027354:	2600      	movs	r6, #0
 8027356:	e77d      	b.n	8027254 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8027358:	4606      	mov	r6, r0
 802735a:	e77b      	b.n	8027254 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802735c:	2500      	movs	r5, #0
 802735e:	e795      	b.n	802728c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8027360:	4663      	mov	r3, ip
 8027362:	4665      	mov	r5, ip
 8027364:	e7ab      	b.n	80272be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8027366:	2300      	movs	r3, #0
 8027368:	e7a9      	b.n	80272be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802736a:	4603      	mov	r3, r0
 802736c:	e7a7      	b.n	80272be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802736e:	bf00      	nop
 8027370:	2402626c 	.word	0x2402626c

08027374 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027378:	b093      	sub	sp, #76	; 0x4c
 802737a:	461c      	mov	r4, r3
 802737c:	920c      	str	r2, [sp, #48]	; 0x30
 802737e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027380:	9011      	str	r0, [sp, #68]	; 0x44
 8027382:	9107      	str	r1, [sp, #28]
 8027384:	6850      	ldr	r0, [r2, #4]
 8027386:	6812      	ldr	r2, [r2, #0]
 8027388:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802738c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8027390:	fb00 1303 	mla	r3, r0, r3, r1
 8027394:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027398:	eb02 0b03 	add.w	fp, r2, r3
 802739c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802739e:	689b      	ldr	r3, [r3, #8]
 80273a0:	3301      	adds	r3, #1
 80273a2:	f023 0301 	bic.w	r3, r3, #1
 80273a6:	9309      	str	r3, [sp, #36]	; 0x24
 80273a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80273aa:	f8d3 8000 	ldr.w	r8, [r3]
 80273ae:	9b07      	ldr	r3, [sp, #28]
 80273b0:	2b00      	cmp	r3, #0
 80273b2:	dc03      	bgt.n	80273bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80273b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80273b6:	2b00      	cmp	r3, #0
 80273b8:	f340 822b 	ble.w	8027812 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80273bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80273be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80273c2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80273c6:	1e48      	subs	r0, r1, #1
 80273c8:	1e57      	subs	r7, r2, #1
 80273ca:	2c00      	cmp	r4, #0
 80273cc:	f340 80d7 	ble.w	802757e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80273d0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80273d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80273d8:	d406      	bmi.n	80273e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80273da:	4584      	cmp	ip, r0
 80273dc:	da04      	bge.n	80273e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80273de:	2b00      	cmp	r3, #0
 80273e0:	db02      	blt.n	80273e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80273e2:	42bb      	cmp	r3, r7
 80273e4:	f2c0 80cc 	blt.w	8027580 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80273e8:	f11c 0c01 	adds.w	ip, ip, #1
 80273ec:	f100 80bf 	bmi.w	802756e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80273f0:	4561      	cmp	r1, ip
 80273f2:	f2c0 80bc 	blt.w	802756e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80273f6:	3301      	adds	r3, #1
 80273f8:	f100 80b9 	bmi.w	802756e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80273fc:	429a      	cmp	r2, r3
 80273fe:	f2c0 80b6 	blt.w	802756e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8027402:	46a2      	mov	sl, r4
 8027404:	465f      	mov	r7, fp
 8027406:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802740a:	f1ba 0f00 	cmp.w	sl, #0
 802740e:	f340 80d4 	ble.w	80275ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027412:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8027416:	1430      	asrs	r0, r6, #16
 8027418:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802741c:	9308      	str	r3, [sp, #32]
 802741e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027420:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027424:	142b      	asrs	r3, r5, #16
 8027426:	f100 8124 	bmi.w	8027672 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802742a:	f10c 32ff 	add.w	r2, ip, #4294967295
 802742e:	4293      	cmp	r3, r2
 8027430:	f280 811f 	bge.w	8027672 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027434:	2800      	cmp	r0, #0
 8027436:	f2c0 811c 	blt.w	8027672 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802743a:	f10e 32ff 	add.w	r2, lr, #4294967295
 802743e:	4290      	cmp	r0, r2
 8027440:	f280 8117 	bge.w	8027672 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027444:	fb00 3309 	mla	r3, r0, r9, r3
 8027448:	0858      	lsrs	r0, r3, #1
 802744a:	07da      	lsls	r2, r3, #31
 802744c:	9a08      	ldr	r2, [sp, #32]
 802744e:	f818 c000 	ldrb.w	ip, [r8, r0]
 8027452:	bf54      	ite	pl
 8027454:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027458:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802745c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027460:	fa5f fc8c 	uxtb.w	ip, ip
 8027464:	2a00      	cmp	r2, #0
 8027466:	f000 80ed 	beq.w	8027644 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802746a:	1c58      	adds	r0, r3, #1
 802746c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027470:	07c0      	lsls	r0, r0, #31
 8027472:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8027476:	bf54      	ite	pl
 8027478:	f00e 0e0f 	andpl.w	lr, lr, #15
 802747c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027480:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027484:	fa5f fe8e 	uxtb.w	lr, lr
 8027488:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802748c:	b1c9      	cbz	r1, 80274c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802748e:	444b      	add	r3, r9
 8027490:	0858      	lsrs	r0, r3, #1
 8027492:	07da      	lsls	r2, r3, #31
 8027494:	f818 0000 	ldrb.w	r0, [r8, r0]
 8027498:	bf54      	ite	pl
 802749a:	f000 000f 	andpl.w	r0, r0, #15
 802749e:	1100      	asrmi	r0, r0, #4
 80274a0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80274a4:	b2c0      	uxtb	r0, r0
 80274a6:	900a      	str	r0, [sp, #40]	; 0x28
 80274a8:	1c58      	adds	r0, r3, #1
 80274aa:	0843      	lsrs	r3, r0, #1
 80274ac:	07c2      	lsls	r2, r0, #31
 80274ae:	f818 3003 	ldrb.w	r3, [r8, r3]
 80274b2:	bf54      	ite	pl
 80274b4:	f003 030f 	andpl.w	r3, r3, #15
 80274b8:	111b      	asrmi	r3, r3, #4
 80274ba:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80274be:	b2db      	uxtb	r3, r3
 80274c0:	930e      	str	r3, [sp, #56]	; 0x38
 80274c2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80274c6:	b289      	uxth	r1, r1
 80274c8:	fb02 f301 	mul.w	r3, r2, r1
 80274cc:	0112      	lsls	r2, r2, #4
 80274ce:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80274d2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80274d6:	1ad2      	subs	r2, r2, r3
 80274d8:	b289      	uxth	r1, r1
 80274da:	b292      	uxth	r2, r2
 80274dc:	1a40      	subs	r0, r0, r1
 80274de:	fa1f fe80 	uxth.w	lr, r0
 80274e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80274e4:	4342      	muls	r2, r0
 80274e6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80274ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80274ec:	fb01 c102 	mla	r1, r1, r2, ip
 80274f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80274f2:	fb03 1302 	mla	r3, r3, r2, r1
 80274f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80274fa:	b383      	cbz	r3, 802755e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80274fc:	4ac6      	ldr	r2, [pc, #792]	; (8027818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80274fe:	2bff      	cmp	r3, #255	; 0xff
 8027500:	6812      	ldr	r2, [r2, #0]
 8027502:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8027506:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802750a:	b2d2      	uxtb	r2, r2
 802750c:	f000 80ac 	beq.w	8027668 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027510:	b299      	uxth	r1, r3
 8027512:	43db      	mvns	r3, r3
 8027514:	f897 c000 	ldrb.w	ip, [r7]
 8027518:	fb12 f201 	smulbb	r2, r2, r1
 802751c:	b2db      	uxtb	r3, r3
 802751e:	fb10 f001 	smulbb	r0, r0, r1
 8027522:	fb0c 2203 	mla	r2, ip, r3, r2
 8027526:	fb1e f101 	smulbb	r1, lr, r1
 802752a:	b292      	uxth	r2, r2
 802752c:	f102 0c01 	add.w	ip, r2, #1
 8027530:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027534:	1212      	asrs	r2, r2, #8
 8027536:	703a      	strb	r2, [r7, #0]
 8027538:	787a      	ldrb	r2, [r7, #1]
 802753a:	fb02 0003 	mla	r0, r2, r3, r0
 802753e:	b280      	uxth	r0, r0
 8027540:	1c42      	adds	r2, r0, #1
 8027542:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027546:	78ba      	ldrb	r2, [r7, #2]
 8027548:	fb02 1303 	mla	r3, r2, r3, r1
 802754c:	1200      	asrs	r0, r0, #8
 802754e:	b29b      	uxth	r3, r3
 8027550:	7078      	strb	r0, [r7, #1]
 8027552:	f103 0e01 	add.w	lr, r3, #1
 8027556:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802755a:	121b      	asrs	r3, r3, #8
 802755c:	70bb      	strb	r3, [r7, #2]
 802755e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027560:	3703      	adds	r7, #3
 8027562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027566:	441d      	add	r5, r3
 8027568:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802756a:	441e      	add	r6, r3
 802756c:	e74d      	b.n	802740a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802756e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027570:	3c01      	subs	r4, #1
 8027572:	f10b 0b03 	add.w	fp, fp, #3
 8027576:	441d      	add	r5, r3
 8027578:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802757a:	441e      	add	r6, r3
 802757c:	e725      	b.n	80273ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802757e:	d021      	beq.n	80275c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8027580:	1e63      	subs	r3, r4, #1
 8027582:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027584:	fb00 5003 	mla	r0, r0, r3, r5
 8027588:	1400      	asrs	r0, r0, #16
 802758a:	f53f af3a 	bmi.w	8027402 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802758e:	3901      	subs	r1, #1
 8027590:	4288      	cmp	r0, r1
 8027592:	f6bf af36 	bge.w	8027402 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027596:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027598:	fb01 6303 	mla	r3, r1, r3, r6
 802759c:	141b      	asrs	r3, r3, #16
 802759e:	f53f af30 	bmi.w	8027402 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80275a2:	3a01      	subs	r2, #1
 80275a4:	4293      	cmp	r3, r2
 80275a6:	f6bf af2c 	bge.w	8027402 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80275aa:	f10b 0c03 	add.w	ip, fp, #3
 80275ae:	46a6      	mov	lr, r4
 80275b0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80275b4:	f1be 0f00 	cmp.w	lr, #0
 80275b8:	dc79      	bgt.n	80276ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80275ba:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80275be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80275c2:	44a3      	add	fp, r4
 80275c4:	9b07      	ldr	r3, [sp, #28]
 80275c6:	2b00      	cmp	r3, #0
 80275c8:	f340 8123 	ble.w	8027812 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80275cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80275d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80275d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80275d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80275da:	eef0 6a62 	vmov.f32	s13, s5
 80275de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80275e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80275e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80275ea:	ee16 5a90 	vmov	r5, s13
 80275ee:	eef0 6a43 	vmov.f32	s13, s6
 80275f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80275f6:	ee16 6a90 	vmov	r6, s13
 80275fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80275fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027602:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027606:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802760a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802760e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027612:	ee12 2a90 	vmov	r2, s5
 8027616:	eef0 2a47 	vmov.f32	s5, s14
 802761a:	fb92 f3f3 	sdiv	r3, r2, r3
 802761e:	ee13 2a10 	vmov	r2, s6
 8027622:	931f      	str	r3, [sp, #124]	; 0x7c
 8027624:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027626:	eeb0 3a67 	vmov.f32	s6, s15
 802762a:	fb92 f3f3 	sdiv	r3, r2, r3
 802762e:	9320      	str	r3, [sp, #128]	; 0x80
 8027630:	9b07      	ldr	r3, [sp, #28]
 8027632:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027634:	3b01      	subs	r3, #1
 8027636:	9307      	str	r3, [sp, #28]
 8027638:	bf08      	it	eq
 802763a:	4614      	moveq	r4, r2
 802763c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802763e:	bf18      	it	ne
 8027640:	461c      	movne	r4, r3
 8027642:	e6b4      	b.n	80273ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027644:	2900      	cmp	r1, #0
 8027646:	f43f af3c 	beq.w	80274c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802764a:	eb09 0003 	add.w	r0, r9, r3
 802764e:	0843      	lsrs	r3, r0, #1
 8027650:	07c0      	lsls	r0, r0, #31
 8027652:	f818 3003 	ldrb.w	r3, [r8, r3]
 8027656:	bf54      	ite	pl
 8027658:	f003 030f 	andpl.w	r3, r3, #15
 802765c:	111b      	asrmi	r3, r3, #4
 802765e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027662:	b2db      	uxtb	r3, r3
 8027664:	930a      	str	r3, [sp, #40]	; 0x28
 8027666:	e72c      	b.n	80274c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027668:	703a      	strb	r2, [r7, #0]
 802766a:	7078      	strb	r0, [r7, #1]
 802766c:	f887 e002 	strb.w	lr, [r7, #2]
 8027670:	e775      	b.n	802755e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027672:	1c5a      	adds	r2, r3, #1
 8027674:	f53f af73 	bmi.w	802755e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027678:	4594      	cmp	ip, r2
 802767a:	f6ff af70 	blt.w	802755e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802767e:	1c42      	adds	r2, r0, #1
 8027680:	f53f af6d 	bmi.w	802755e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027684:	4596      	cmp	lr, r2
 8027686:	f6ff af6a 	blt.w	802755e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802768a:	9302      	str	r3, [sp, #8]
 802768c:	fa0f f38e 	sxth.w	r3, lr
 8027690:	9a08      	ldr	r2, [sp, #32]
 8027692:	9301      	str	r3, [sp, #4]
 8027694:	fa0f f38c 	sxth.w	r3, ip
 8027698:	9105      	str	r1, [sp, #20]
 802769a:	4639      	mov	r1, r7
 802769c:	9300      	str	r3, [sp, #0]
 802769e:	464b      	mov	r3, r9
 80276a0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80276a4:	4642      	mov	r2, r8
 80276a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80276a8:	f7ff fd90 	bl	80271cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80276ac:	e757      	b.n	802755e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80276ae:	142a      	asrs	r2, r5, #16
 80276b0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80276b4:	1433      	asrs	r3, r6, #16
 80276b6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80276ba:	fb09 2303 	mla	r3, r9, r3, r2
 80276be:	085a      	lsrs	r2, r3, #1
 80276c0:	07d9      	lsls	r1, r3, #31
 80276c2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80276c6:	bf54      	ite	pl
 80276c8:	f002 020f 	andpl.w	r2, r2, #15
 80276cc:	1112      	asrmi	r2, r2, #4
 80276ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80276d2:	b2d2      	uxtb	r2, r2
 80276d4:	2800      	cmp	r0, #0
 80276d6:	f000 8085 	beq.w	80277e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80276da:	f103 0a01 	add.w	sl, r3, #1
 80276de:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80276e2:	f01a 0f01 	tst.w	sl, #1
 80276e6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80276ea:	bf0c      	ite	eq
 80276ec:	f001 010f 	andeq.w	r1, r1, #15
 80276f0:	1109      	asrne	r1, r1, #4
 80276f2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80276f6:	b2c9      	uxtb	r1, r1
 80276f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80276fa:	b1df      	cbz	r7, 8027734 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80276fc:	444b      	add	r3, r9
 80276fe:	0859      	lsrs	r1, r3, #1
 8027700:	f013 0f01 	tst.w	r3, #1
 8027704:	f103 0301 	add.w	r3, r3, #1
 8027708:	f818 1001 	ldrb.w	r1, [r8, r1]
 802770c:	bf0c      	ite	eq
 802770e:	f001 010f 	andeq.w	r1, r1, #15
 8027712:	1109      	asrne	r1, r1, #4
 8027714:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027718:	b2c9      	uxtb	r1, r1
 802771a:	910b      	str	r1, [sp, #44]	; 0x2c
 802771c:	0859      	lsrs	r1, r3, #1
 802771e:	07db      	lsls	r3, r3, #31
 8027720:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027724:	bf54      	ite	pl
 8027726:	f001 010f 	andpl.w	r1, r1, #15
 802772a:	1109      	asrmi	r1, r1, #4
 802772c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027730:	b2c9      	uxtb	r1, r1
 8027732:	9110      	str	r1, [sp, #64]	; 0x40
 8027734:	b280      	uxth	r0, r0
 8027736:	b2bf      	uxth	r7, r7
 8027738:	fb00 f307 	mul.w	r3, r0, r7
 802773c:	0100      	lsls	r0, r0, #4
 802773e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8027742:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8027746:	1ac0      	subs	r0, r0, r3
 8027748:	b2bf      	uxth	r7, r7
 802774a:	b280      	uxth	r0, r0
 802774c:	1bc9      	subs	r1, r1, r7
 802774e:	fa1f fa81 	uxth.w	sl, r1
 8027752:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027754:	4348      	muls	r0, r1
 8027756:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027758:	fb02 020a 	mla	r2, r2, sl, r0
 802775c:	fb07 2701 	mla	r7, r7, r1, r2
 8027760:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027762:	fb03 7302 	mla	r3, r3, r2, r7
 8027766:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802776a:	b393      	cbz	r3, 80277d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802776c:	4a2a      	ldr	r2, [pc, #168]	; (8027818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802776e:	2bff      	cmp	r3, #255	; 0xff
 8027770:	6811      	ldr	r1, [r2, #0]
 8027772:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8027776:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802777a:	b2c9      	uxtb	r1, r1
 802777c:	d042      	beq.n	8027804 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802777e:	b298      	uxth	r0, r3
 8027780:	43db      	mvns	r3, r3
 8027782:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8027786:	fb11 f100 	smulbb	r1, r1, r0
 802778a:	b2db      	uxtb	r3, r3
 802778c:	fb17 f700 	smulbb	r7, r7, r0
 8027790:	fb02 1103 	mla	r1, r2, r3, r1
 8027794:	fb1a f000 	smulbb	r0, sl, r0
 8027798:	b289      	uxth	r1, r1
 802779a:	1c4a      	adds	r2, r1, #1
 802779c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80277a0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80277a4:	fb02 7703 	mla	r7, r2, r3, r7
 80277a8:	1209      	asrs	r1, r1, #8
 80277aa:	b2bf      	uxth	r7, r7
 80277ac:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80277b0:	1c7a      	adds	r2, r7, #1
 80277b2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80277b6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80277ba:	fb02 0303 	mla	r3, r2, r3, r0
 80277be:	123f      	asrs	r7, r7, #8
 80277c0:	b29b      	uxth	r3, r3
 80277c2:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80277c6:	1c5a      	adds	r2, r3, #1
 80277c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80277cc:	121b      	asrs	r3, r3, #8
 80277ce:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80277d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80277d4:	f10c 0c03 	add.w	ip, ip, #3
 80277d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80277dc:	441d      	add	r5, r3
 80277de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80277e0:	441e      	add	r6, r3
 80277e2:	e6e7      	b.n	80275b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80277e4:	2f00      	cmp	r7, #0
 80277e6:	d0a5      	beq.n	8027734 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80277e8:	444b      	add	r3, r9
 80277ea:	0859      	lsrs	r1, r3, #1
 80277ec:	07db      	lsls	r3, r3, #31
 80277ee:	f818 1001 	ldrb.w	r1, [r8, r1]
 80277f2:	bf54      	ite	pl
 80277f4:	f001 010f 	andpl.w	r1, r1, #15
 80277f8:	1109      	asrmi	r1, r1, #4
 80277fa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80277fe:	b2c9      	uxtb	r1, r1
 8027800:	910b      	str	r1, [sp, #44]	; 0x2c
 8027802:	e797      	b.n	8027734 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027804:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8027808:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802780c:	f80c ac01 	strb.w	sl, [ip, #-1]
 8027810:	e7df      	b.n	80277d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8027812:	b013      	add	sp, #76	; 0x4c
 8027814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027818:	2402626c 	.word	0x2402626c

0802781c <CRC_Lock>:
 802781c:	4a20      	ldr	r2, [pc, #128]	; (80278a0 <CRC_Lock+0x84>)
 802781e:	b530      	push	{r4, r5, lr}
 8027820:	6813      	ldr	r3, [r2, #0]
 8027822:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8027826:	f24c 2540 	movw	r5, #49728	; 0xc240
 802782a:	f023 0301 	bic.w	r3, r3, #1
 802782e:	6013      	str	r3, [r2, #0]
 8027830:	4b1c      	ldr	r3, [pc, #112]	; (80278a4 <CRC_Lock+0x88>)
 8027832:	681a      	ldr	r2, [r3, #0]
 8027834:	4022      	ands	r2, r4
 8027836:	42aa      	cmp	r2, r5
 8027838:	d005      	beq.n	8027846 <CRC_Lock+0x2a>
 802783a:	681b      	ldr	r3, [r3, #0]
 802783c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8027840:	4023      	ands	r3, r4
 8027842:	4293      	cmp	r3, r2
 8027844:	d124      	bne.n	8027890 <CRC_Lock+0x74>
 8027846:	4b18      	ldr	r3, [pc, #96]	; (80278a8 <CRC_Lock+0x8c>)
 8027848:	681b      	ldr	r3, [r3, #0]
 802784a:	bb0b      	cbnz	r3, 8027890 <CRC_Lock+0x74>
 802784c:	4b17      	ldr	r3, [pc, #92]	; (80278ac <CRC_Lock+0x90>)
 802784e:	681a      	ldr	r2, [r3, #0]
 8027850:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027854:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8027858:	d00d      	beq.n	8027876 <CRC_Lock+0x5a>
 802785a:	681a      	ldr	r2, [r3, #0]
 802785c:	f240 4483 	movw	r4, #1155	; 0x483
 8027860:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027864:	42a2      	cmp	r2, r4
 8027866:	d006      	beq.n	8027876 <CRC_Lock+0x5a>
 8027868:	681b      	ldr	r3, [r3, #0]
 802786a:	f240 4285 	movw	r2, #1157	; 0x485
 802786e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027872:	4293      	cmp	r3, r2
 8027874:	d10c      	bne.n	8027890 <CRC_Lock+0x74>
 8027876:	4b0e      	ldr	r3, [pc, #56]	; (80278b0 <CRC_Lock+0x94>)
 8027878:	2201      	movs	r2, #1
 802787a:	601a      	str	r2, [r3, #0]
 802787c:	681a      	ldr	r2, [r3, #0]
 802787e:	2a00      	cmp	r2, #0
 8027880:	d1fc      	bne.n	802787c <CRC_Lock+0x60>
 8027882:	4b0c      	ldr	r3, [pc, #48]	; (80278b4 <CRC_Lock+0x98>)
 8027884:	6018      	str	r0, [r3, #0]
 8027886:	6818      	ldr	r0, [r3, #0]
 8027888:	1a43      	subs	r3, r0, r1
 802788a:	4258      	negs	r0, r3
 802788c:	4158      	adcs	r0, r3
 802788e:	bd30      	pop	{r4, r5, pc}
 8027890:	4b09      	ldr	r3, [pc, #36]	; (80278b8 <CRC_Lock+0x9c>)
 8027892:	2201      	movs	r2, #1
 8027894:	601a      	str	r2, [r3, #0]
 8027896:	681a      	ldr	r2, [r3, #0]
 8027898:	2a00      	cmp	r2, #0
 802789a:	d1fc      	bne.n	8027896 <CRC_Lock+0x7a>
 802789c:	4b07      	ldr	r3, [pc, #28]	; (80278bc <CRC_Lock+0xa0>)
 802789e:	e7f1      	b.n	8027884 <CRC_Lock+0x68>
 80278a0:	e0002000 	.word	0xe0002000
 80278a4:	e000ed00 	.word	0xe000ed00
 80278a8:	e0042000 	.word	0xe0042000
 80278ac:	5c001000 	.word	0x5c001000
 80278b0:	58024c08 	.word	0x58024c08
 80278b4:	58024c00 	.word	0x58024c00
 80278b8:	40023008 	.word	0x40023008
 80278bc:	40023000 	.word	0x40023000

080278c0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80278c0:	6101      	str	r1, [r0, #16]
 80278c2:	4770      	bx	lr

080278c4 <_ZN8touchgfx8Gestures4tickEv>:
 80278c4:	7b83      	ldrb	r3, [r0, #14]
 80278c6:	b14b      	cbz	r3, 80278dc <_ZN8touchgfx8Gestures4tickEv+0x18>
 80278c8:	8903      	ldrh	r3, [r0, #8]
 80278ca:	3301      	adds	r3, #1
 80278cc:	b29b      	uxth	r3, r3
 80278ce:	2b07      	cmp	r3, #7
 80278d0:	8103      	strh	r3, [r0, #8]
 80278d2:	bf81      	itttt	hi
 80278d4:	2300      	movhi	r3, #0
 80278d6:	8143      	strhhi	r3, [r0, #10]
 80278d8:	8183      	strhhi	r3, [r0, #12]
 80278da:	7383      	strbhi	r3, [r0, #14]
 80278dc:	4770      	bx	lr
	...

080278e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80278e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80278e4:	4698      	mov	r8, r3
 80278e6:	8883      	ldrh	r3, [r0, #4]
 80278e8:	4604      	mov	r4, r0
 80278ea:	4617      	mov	r7, r2
 80278ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80278f0:	eba8 0303 	sub.w	r3, r8, r3
 80278f4:	4a19      	ldr	r2, [pc, #100]	; (802795c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80278f6:	460e      	mov	r6, r1
 80278f8:	b21b      	sxth	r3, r3
 80278fa:	88c1      	ldrh	r1, [r0, #6]
 80278fc:	9200      	str	r2, [sp, #0]
 80278fe:	2000      	movs	r0, #0
 8027900:	2b00      	cmp	r3, #0
 8027902:	8aa2      	ldrh	r2, [r4, #20]
 8027904:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8027908:	bfb8      	it	lt
 802790a:	425b      	neglt	r3, r3
 802790c:	f88d 0004 	strb.w	r0, [sp, #4]
 8027910:	f8ad 1008 	strh.w	r1, [sp, #8]
 8027914:	b21b      	sxth	r3, r3
 8027916:	f8ad 800a 	strh.w	r8, [sp, #10]
 802791a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802791e:	4293      	cmp	r3, r2
 8027920:	dc07      	bgt.n	8027932 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8027922:	1a69      	subs	r1, r5, r1
 8027924:	b209      	sxth	r1, r1
 8027926:	2900      	cmp	r1, #0
 8027928:	bfb8      	it	lt
 802792a:	4249      	neglt	r1, r1
 802792c:	b209      	sxth	r1, r1
 802792e:	428a      	cmp	r2, r1
 8027930:	da10      	bge.n	8027954 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8027932:	6920      	ldr	r0, [r4, #16]
 8027934:	4669      	mov	r1, sp
 8027936:	eba8 0606 	sub.w	r6, r8, r6
 802793a:	1bef      	subs	r7, r5, r7
 802793c:	6803      	ldr	r3, [r0, #0]
 802793e:	685b      	ldr	r3, [r3, #4]
 8027940:	4798      	blx	r3
 8027942:	2300      	movs	r3, #0
 8027944:	2001      	movs	r0, #1
 8027946:	8166      	strh	r6, [r4, #10]
 8027948:	8123      	strh	r3, [r4, #8]
 802794a:	81a7      	strh	r7, [r4, #12]
 802794c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8027950:	80e5      	strh	r5, [r4, #6]
 8027952:	73a0      	strb	r0, [r4, #14]
 8027954:	b004      	add	sp, #16
 8027956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802795a:	bf00      	nop
 802795c:	0802c790 	.word	0x0802c790

08027960 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8027960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027962:	461e      	mov	r6, r3
 8027964:	1e4b      	subs	r3, r1, #1
 8027966:	b085      	sub	sp, #20
 8027968:	4604      	mov	r4, r0
 802796a:	2b01      	cmp	r3, #1
 802796c:	460d      	mov	r5, r1
 802796e:	4617      	mov	r7, r2
 8027970:	d84b      	bhi.n	8027a0a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8027972:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8027976:	1cd3      	adds	r3, r2, #3
 8027978:	b29b      	uxth	r3, r3
 802797a:	2b06      	cmp	r3, #6
 802797c:	d916      	bls.n	80279ac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802797e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8027a20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8027982:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8027986:	f8cd c004 	str.w	ip, [sp, #4]
 802798a:	f04f 0c00 	mov.w	ip, #0
 802798e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8027992:	6900      	ldr	r0, [r0, #16]
 8027994:	f8ad 100c 	strh.w	r1, [sp, #12]
 8027998:	a901      	add	r1, sp, #4
 802799a:	f88d c008 	strb.w	ip, [sp, #8]
 802799e:	f8ad 200a 	strh.w	r2, [sp, #10]
 80279a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80279a6:	6803      	ldr	r3, [r0, #0]
 80279a8:	689b      	ldr	r3, [r3, #8]
 80279aa:	4798      	blx	r3
 80279ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80279b0:	1cd3      	adds	r3, r2, #3
 80279b2:	b29b      	uxth	r3, r3
 80279b4:	2b06      	cmp	r3, #6
 80279b6:	d916      	bls.n	80279e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80279b8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8027a20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80279bc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80279c0:	f8cd c004 	str.w	ip, [sp, #4]
 80279c4:	f04f 0c01 	mov.w	ip, #1
 80279c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80279cc:	6920      	ldr	r0, [r4, #16]
 80279ce:	f8ad 100c 	strh.w	r1, [sp, #12]
 80279d2:	a901      	add	r1, sp, #4
 80279d4:	f88d c008 	strb.w	ip, [sp, #8]
 80279d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80279dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80279e0:	6803      	ldr	r3, [r0, #0]
 80279e2:	689b      	ldr	r3, [r3, #8]
 80279e4:	4798      	blx	r3
 80279e6:	4b0d      	ldr	r3, [pc, #52]	; (8027a1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80279e8:	a901      	add	r1, sp, #4
 80279ea:	6920      	ldr	r0, [r4, #16]
 80279ec:	9301      	str	r3, [sp, #4]
 80279ee:	2300      	movs	r3, #0
 80279f0:	f88d 5008 	strb.w	r5, [sp, #8]
 80279f4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80279f8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80279fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8027a00:	6803      	ldr	r3, [r0, #0]
 8027a02:	681b      	ldr	r3, [r3, #0]
 8027a04:	4798      	blx	r3
 8027a06:	b005      	add	sp, #20
 8027a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027a0a:	2900      	cmp	r1, #0
 8027a0c:	d1eb      	bne.n	80279e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8027a0e:	80a2      	strh	r2, [r4, #4]
 8027a10:	80c6      	strh	r6, [r0, #6]
 8027a12:	60a1      	str	r1, [r4, #8]
 8027a14:	81a1      	strh	r1, [r4, #12]
 8027a16:	73a1      	strb	r1, [r4, #14]
 8027a18:	e7e5      	b.n	80279e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8027a1a:	bf00      	nop
 8027a1c:	0802c77c 	.word	0x0802c77c
 8027a20:	0802c7a4 	.word	0x0802c7a4

08027a24 <__aeabi_atexit>:
 8027a24:	460b      	mov	r3, r1
 8027a26:	4601      	mov	r1, r0
 8027a28:	4618      	mov	r0, r3
 8027a2a:	f000 b853 	b.w	8027ad4 <__cxa_atexit>

08027a2e <_ZdlPvj>:
 8027a2e:	f000 b812 	b.w	8027a56 <_ZdlPv>

08027a32 <__cxa_guard_acquire>:
 8027a32:	6803      	ldr	r3, [r0, #0]
 8027a34:	07db      	lsls	r3, r3, #31
 8027a36:	d406      	bmi.n	8027a46 <__cxa_guard_acquire+0x14>
 8027a38:	7843      	ldrb	r3, [r0, #1]
 8027a3a:	b103      	cbz	r3, 8027a3e <__cxa_guard_acquire+0xc>
 8027a3c:	deff      	udf	#255	; 0xff
 8027a3e:	2301      	movs	r3, #1
 8027a40:	7043      	strb	r3, [r0, #1]
 8027a42:	4618      	mov	r0, r3
 8027a44:	4770      	bx	lr
 8027a46:	2000      	movs	r0, #0
 8027a48:	4770      	bx	lr

08027a4a <__cxa_guard_release>:
 8027a4a:	2301      	movs	r3, #1
 8027a4c:	6003      	str	r3, [r0, #0]
 8027a4e:	4770      	bx	lr

08027a50 <__cxa_pure_virtual>:
 8027a50:	b508      	push	{r3, lr}
 8027a52:	f000 f80f 	bl	8027a74 <_ZSt9terminatev>

08027a56 <_ZdlPv>:
 8027a56:	f000 b893 	b.w	8027b80 <free>

08027a5a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8027a5a:	b508      	push	{r3, lr}
 8027a5c:	4780      	blx	r0
 8027a5e:	f000 f80e 	bl	8027a7e <abort>
	...

08027a64 <_ZSt13get_terminatev>:
 8027a64:	4b02      	ldr	r3, [pc, #8]	; (8027a70 <_ZSt13get_terminatev+0xc>)
 8027a66:	6818      	ldr	r0, [r3, #0]
 8027a68:	f3bf 8f5b 	dmb	ish
 8027a6c:	4770      	bx	lr
 8027a6e:	bf00      	nop
 8027a70:	240000bc 	.word	0x240000bc

08027a74 <_ZSt9terminatev>:
 8027a74:	b508      	push	{r3, lr}
 8027a76:	f7ff fff5 	bl	8027a64 <_ZSt13get_terminatev>
 8027a7a:	f7ff ffee 	bl	8027a5a <_ZN10__cxxabiv111__terminateEPFvvE>

08027a7e <abort>:
 8027a7e:	b508      	push	{r3, lr}
 8027a80:	2006      	movs	r0, #6
 8027a82:	f000 fca1 	bl	80283c8 <raise>
 8027a86:	2001      	movs	r0, #1
 8027a88:	f7df fbd6 	bl	8007238 <_exit>

08027a8c <__assert_func>:
 8027a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027a8e:	4614      	mov	r4, r2
 8027a90:	461a      	mov	r2, r3
 8027a92:	4b09      	ldr	r3, [pc, #36]	; (8027ab8 <__assert_func+0x2c>)
 8027a94:	681b      	ldr	r3, [r3, #0]
 8027a96:	4605      	mov	r5, r0
 8027a98:	68d8      	ldr	r0, [r3, #12]
 8027a9a:	b14c      	cbz	r4, 8027ab0 <__assert_func+0x24>
 8027a9c:	4b07      	ldr	r3, [pc, #28]	; (8027abc <__assert_func+0x30>)
 8027a9e:	9100      	str	r1, [sp, #0]
 8027aa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027aa4:	4906      	ldr	r1, [pc, #24]	; (8027ac0 <__assert_func+0x34>)
 8027aa6:	462b      	mov	r3, r5
 8027aa8:	f000 f828 	bl	8027afc <fiprintf>
 8027aac:	f7ff ffe7 	bl	8027a7e <abort>
 8027ab0:	4b04      	ldr	r3, [pc, #16]	; (8027ac4 <__assert_func+0x38>)
 8027ab2:	461c      	mov	r4, r3
 8027ab4:	e7f3      	b.n	8027a9e <__assert_func+0x12>
 8027ab6:	bf00      	nop
 8027ab8:	240000c0 	.word	0x240000c0
 8027abc:	0802c9cc 	.word	0x0802c9cc
 8027ac0:	0802c9d9 	.word	0x0802c9d9
 8027ac4:	0802ca07 	.word	0x0802ca07

08027ac8 <atexit>:
 8027ac8:	2300      	movs	r3, #0
 8027aca:	4601      	mov	r1, r0
 8027acc:	461a      	mov	r2, r3
 8027ace:	4618      	mov	r0, r3
 8027ad0:	f000 bd6a 	b.w	80285a8 <__register_exitproc>

08027ad4 <__cxa_atexit>:
 8027ad4:	b510      	push	{r4, lr}
 8027ad6:	4c05      	ldr	r4, [pc, #20]	; (8027aec <__cxa_atexit+0x18>)
 8027ad8:	4613      	mov	r3, r2
 8027ada:	b12c      	cbz	r4, 8027ae8 <__cxa_atexit+0x14>
 8027adc:	460a      	mov	r2, r1
 8027ade:	4601      	mov	r1, r0
 8027ae0:	2002      	movs	r0, #2
 8027ae2:	f000 fd61 	bl	80285a8 <__register_exitproc>
 8027ae6:	bd10      	pop	{r4, pc}
 8027ae8:	4620      	mov	r0, r4
 8027aea:	e7fc      	b.n	8027ae6 <__cxa_atexit+0x12>
 8027aec:	080285a9 	.word	0x080285a9

08027af0 <__errno>:
 8027af0:	4b01      	ldr	r3, [pc, #4]	; (8027af8 <__errno+0x8>)
 8027af2:	6818      	ldr	r0, [r3, #0]
 8027af4:	4770      	bx	lr
 8027af6:	bf00      	nop
 8027af8:	240000c0 	.word	0x240000c0

08027afc <fiprintf>:
 8027afc:	b40e      	push	{r1, r2, r3}
 8027afe:	b503      	push	{r0, r1, lr}
 8027b00:	4601      	mov	r1, r0
 8027b02:	ab03      	add	r3, sp, #12
 8027b04:	4805      	ldr	r0, [pc, #20]	; (8027b1c <fiprintf+0x20>)
 8027b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8027b0a:	6800      	ldr	r0, [r0, #0]
 8027b0c:	9301      	str	r3, [sp, #4]
 8027b0e:	f000 f95f 	bl	8027dd0 <_vfiprintf_r>
 8027b12:	b002      	add	sp, #8
 8027b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8027b18:	b003      	add	sp, #12
 8027b1a:	4770      	bx	lr
 8027b1c:	240000c0 	.word	0x240000c0

08027b20 <__libc_init_array>:
 8027b20:	b570      	push	{r4, r5, r6, lr}
 8027b22:	4d0d      	ldr	r5, [pc, #52]	; (8027b58 <__libc_init_array+0x38>)
 8027b24:	4c0d      	ldr	r4, [pc, #52]	; (8027b5c <__libc_init_array+0x3c>)
 8027b26:	1b64      	subs	r4, r4, r5
 8027b28:	10a4      	asrs	r4, r4, #2
 8027b2a:	2600      	movs	r6, #0
 8027b2c:	42a6      	cmp	r6, r4
 8027b2e:	d109      	bne.n	8027b44 <__libc_init_array+0x24>
 8027b30:	4d0b      	ldr	r5, [pc, #44]	; (8027b60 <__libc_init_array+0x40>)
 8027b32:	4c0c      	ldr	r4, [pc, #48]	; (8027b64 <__libc_init_array+0x44>)
 8027b34:	f001 f86e 	bl	8028c14 <_init>
 8027b38:	1b64      	subs	r4, r4, r5
 8027b3a:	10a4      	asrs	r4, r4, #2
 8027b3c:	2600      	movs	r6, #0
 8027b3e:	42a6      	cmp	r6, r4
 8027b40:	d105      	bne.n	8027b4e <__libc_init_array+0x2e>
 8027b42:	bd70      	pop	{r4, r5, r6, pc}
 8027b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8027b48:	4798      	blx	r3
 8027b4a:	3601      	adds	r6, #1
 8027b4c:	e7ee      	b.n	8027b2c <__libc_init_array+0xc>
 8027b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8027b52:	4798      	blx	r3
 8027b54:	3601      	adds	r6, #1
 8027b56:	e7f2      	b.n	8027b3e <__libc_init_array+0x1e>
 8027b58:	0802cacc 	.word	0x0802cacc
 8027b5c:	0802cacc 	.word	0x0802cacc
 8027b60:	0802cacc 	.word	0x0802cacc
 8027b64:	0802cae8 	.word	0x0802cae8

08027b68 <__retarget_lock_init_recursive>:
 8027b68:	4770      	bx	lr

08027b6a <__retarget_lock_acquire_recursive>:
 8027b6a:	4770      	bx	lr

08027b6c <__retarget_lock_release>:
 8027b6c:	4770      	bx	lr

08027b6e <__retarget_lock_release_recursive>:
 8027b6e:	4770      	bx	lr

08027b70 <malloc>:
 8027b70:	4b02      	ldr	r3, [pc, #8]	; (8027b7c <malloc+0xc>)
 8027b72:	4601      	mov	r1, r0
 8027b74:	6818      	ldr	r0, [r3, #0]
 8027b76:	f000 b88d 	b.w	8027c94 <_malloc_r>
 8027b7a:	bf00      	nop
 8027b7c:	240000c0 	.word	0x240000c0

08027b80 <free>:
 8027b80:	4b02      	ldr	r3, [pc, #8]	; (8027b8c <free+0xc>)
 8027b82:	4601      	mov	r1, r0
 8027b84:	6818      	ldr	r0, [r3, #0]
 8027b86:	f000 b819 	b.w	8027bbc <_free_r>
 8027b8a:	bf00      	nop
 8027b8c:	240000c0 	.word	0x240000c0

08027b90 <memcpy>:
 8027b90:	440a      	add	r2, r1
 8027b92:	4291      	cmp	r1, r2
 8027b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8027b98:	d100      	bne.n	8027b9c <memcpy+0xc>
 8027b9a:	4770      	bx	lr
 8027b9c:	b510      	push	{r4, lr}
 8027b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027ba6:	4291      	cmp	r1, r2
 8027ba8:	d1f9      	bne.n	8027b9e <memcpy+0xe>
 8027baa:	bd10      	pop	{r4, pc}

08027bac <memset>:
 8027bac:	4402      	add	r2, r0
 8027bae:	4603      	mov	r3, r0
 8027bb0:	4293      	cmp	r3, r2
 8027bb2:	d100      	bne.n	8027bb6 <memset+0xa>
 8027bb4:	4770      	bx	lr
 8027bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8027bba:	e7f9      	b.n	8027bb0 <memset+0x4>

08027bbc <_free_r>:
 8027bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027bbe:	2900      	cmp	r1, #0
 8027bc0:	d044      	beq.n	8027c4c <_free_r+0x90>
 8027bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027bc6:	9001      	str	r0, [sp, #4]
 8027bc8:	2b00      	cmp	r3, #0
 8027bca:	f1a1 0404 	sub.w	r4, r1, #4
 8027bce:	bfb8      	it	lt
 8027bd0:	18e4      	addlt	r4, r4, r3
 8027bd2:	f000 ff67 	bl	8028aa4 <__malloc_lock>
 8027bd6:	4a1e      	ldr	r2, [pc, #120]	; (8027c50 <_free_r+0x94>)
 8027bd8:	9801      	ldr	r0, [sp, #4]
 8027bda:	6813      	ldr	r3, [r2, #0]
 8027bdc:	b933      	cbnz	r3, 8027bec <_free_r+0x30>
 8027bde:	6063      	str	r3, [r4, #4]
 8027be0:	6014      	str	r4, [r2, #0]
 8027be2:	b003      	add	sp, #12
 8027be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027be8:	f000 bf62 	b.w	8028ab0 <__malloc_unlock>
 8027bec:	42a3      	cmp	r3, r4
 8027bee:	d908      	bls.n	8027c02 <_free_r+0x46>
 8027bf0:	6825      	ldr	r5, [r4, #0]
 8027bf2:	1961      	adds	r1, r4, r5
 8027bf4:	428b      	cmp	r3, r1
 8027bf6:	bf01      	itttt	eq
 8027bf8:	6819      	ldreq	r1, [r3, #0]
 8027bfa:	685b      	ldreq	r3, [r3, #4]
 8027bfc:	1949      	addeq	r1, r1, r5
 8027bfe:	6021      	streq	r1, [r4, #0]
 8027c00:	e7ed      	b.n	8027bde <_free_r+0x22>
 8027c02:	461a      	mov	r2, r3
 8027c04:	685b      	ldr	r3, [r3, #4]
 8027c06:	b10b      	cbz	r3, 8027c0c <_free_r+0x50>
 8027c08:	42a3      	cmp	r3, r4
 8027c0a:	d9fa      	bls.n	8027c02 <_free_r+0x46>
 8027c0c:	6811      	ldr	r1, [r2, #0]
 8027c0e:	1855      	adds	r5, r2, r1
 8027c10:	42a5      	cmp	r5, r4
 8027c12:	d10b      	bne.n	8027c2c <_free_r+0x70>
 8027c14:	6824      	ldr	r4, [r4, #0]
 8027c16:	4421      	add	r1, r4
 8027c18:	1854      	adds	r4, r2, r1
 8027c1a:	42a3      	cmp	r3, r4
 8027c1c:	6011      	str	r1, [r2, #0]
 8027c1e:	d1e0      	bne.n	8027be2 <_free_r+0x26>
 8027c20:	681c      	ldr	r4, [r3, #0]
 8027c22:	685b      	ldr	r3, [r3, #4]
 8027c24:	6053      	str	r3, [r2, #4]
 8027c26:	4421      	add	r1, r4
 8027c28:	6011      	str	r1, [r2, #0]
 8027c2a:	e7da      	b.n	8027be2 <_free_r+0x26>
 8027c2c:	d902      	bls.n	8027c34 <_free_r+0x78>
 8027c2e:	230c      	movs	r3, #12
 8027c30:	6003      	str	r3, [r0, #0]
 8027c32:	e7d6      	b.n	8027be2 <_free_r+0x26>
 8027c34:	6825      	ldr	r5, [r4, #0]
 8027c36:	1961      	adds	r1, r4, r5
 8027c38:	428b      	cmp	r3, r1
 8027c3a:	bf04      	itt	eq
 8027c3c:	6819      	ldreq	r1, [r3, #0]
 8027c3e:	685b      	ldreq	r3, [r3, #4]
 8027c40:	6063      	str	r3, [r4, #4]
 8027c42:	bf04      	itt	eq
 8027c44:	1949      	addeq	r1, r1, r5
 8027c46:	6021      	streq	r1, [r4, #0]
 8027c48:	6054      	str	r4, [r2, #4]
 8027c4a:	e7ca      	b.n	8027be2 <_free_r+0x26>
 8027c4c:	b003      	add	sp, #12
 8027c4e:	bd30      	pop	{r4, r5, pc}
 8027c50:	24026344 	.word	0x24026344

08027c54 <sbrk_aligned>:
 8027c54:	b570      	push	{r4, r5, r6, lr}
 8027c56:	4e0e      	ldr	r6, [pc, #56]	; (8027c90 <sbrk_aligned+0x3c>)
 8027c58:	460c      	mov	r4, r1
 8027c5a:	6831      	ldr	r1, [r6, #0]
 8027c5c:	4605      	mov	r5, r0
 8027c5e:	b911      	cbnz	r1, 8027c66 <sbrk_aligned+0x12>
 8027c60:	f000 fb7a 	bl	8028358 <_sbrk_r>
 8027c64:	6030      	str	r0, [r6, #0]
 8027c66:	4621      	mov	r1, r4
 8027c68:	4628      	mov	r0, r5
 8027c6a:	f000 fb75 	bl	8028358 <_sbrk_r>
 8027c6e:	1c43      	adds	r3, r0, #1
 8027c70:	d00a      	beq.n	8027c88 <sbrk_aligned+0x34>
 8027c72:	1cc4      	adds	r4, r0, #3
 8027c74:	f024 0403 	bic.w	r4, r4, #3
 8027c78:	42a0      	cmp	r0, r4
 8027c7a:	d007      	beq.n	8027c8c <sbrk_aligned+0x38>
 8027c7c:	1a21      	subs	r1, r4, r0
 8027c7e:	4628      	mov	r0, r5
 8027c80:	f000 fb6a 	bl	8028358 <_sbrk_r>
 8027c84:	3001      	adds	r0, #1
 8027c86:	d101      	bne.n	8027c8c <sbrk_aligned+0x38>
 8027c88:	f04f 34ff 	mov.w	r4, #4294967295
 8027c8c:	4620      	mov	r0, r4
 8027c8e:	bd70      	pop	{r4, r5, r6, pc}
 8027c90:	24026348 	.word	0x24026348

08027c94 <_malloc_r>:
 8027c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027c98:	1ccd      	adds	r5, r1, #3
 8027c9a:	f025 0503 	bic.w	r5, r5, #3
 8027c9e:	3508      	adds	r5, #8
 8027ca0:	2d0c      	cmp	r5, #12
 8027ca2:	bf38      	it	cc
 8027ca4:	250c      	movcc	r5, #12
 8027ca6:	2d00      	cmp	r5, #0
 8027ca8:	4607      	mov	r7, r0
 8027caa:	db01      	blt.n	8027cb0 <_malloc_r+0x1c>
 8027cac:	42a9      	cmp	r1, r5
 8027cae:	d905      	bls.n	8027cbc <_malloc_r+0x28>
 8027cb0:	230c      	movs	r3, #12
 8027cb2:	603b      	str	r3, [r7, #0]
 8027cb4:	2600      	movs	r6, #0
 8027cb6:	4630      	mov	r0, r6
 8027cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027cbc:	4e2e      	ldr	r6, [pc, #184]	; (8027d78 <_malloc_r+0xe4>)
 8027cbe:	f000 fef1 	bl	8028aa4 <__malloc_lock>
 8027cc2:	6833      	ldr	r3, [r6, #0]
 8027cc4:	461c      	mov	r4, r3
 8027cc6:	bb34      	cbnz	r4, 8027d16 <_malloc_r+0x82>
 8027cc8:	4629      	mov	r1, r5
 8027cca:	4638      	mov	r0, r7
 8027ccc:	f7ff ffc2 	bl	8027c54 <sbrk_aligned>
 8027cd0:	1c43      	adds	r3, r0, #1
 8027cd2:	4604      	mov	r4, r0
 8027cd4:	d14d      	bne.n	8027d72 <_malloc_r+0xde>
 8027cd6:	6834      	ldr	r4, [r6, #0]
 8027cd8:	4626      	mov	r6, r4
 8027cda:	2e00      	cmp	r6, #0
 8027cdc:	d140      	bne.n	8027d60 <_malloc_r+0xcc>
 8027cde:	6823      	ldr	r3, [r4, #0]
 8027ce0:	4631      	mov	r1, r6
 8027ce2:	4638      	mov	r0, r7
 8027ce4:	eb04 0803 	add.w	r8, r4, r3
 8027ce8:	f000 fb36 	bl	8028358 <_sbrk_r>
 8027cec:	4580      	cmp	r8, r0
 8027cee:	d13a      	bne.n	8027d66 <_malloc_r+0xd2>
 8027cf0:	6821      	ldr	r1, [r4, #0]
 8027cf2:	3503      	adds	r5, #3
 8027cf4:	1a6d      	subs	r5, r5, r1
 8027cf6:	f025 0503 	bic.w	r5, r5, #3
 8027cfa:	3508      	adds	r5, #8
 8027cfc:	2d0c      	cmp	r5, #12
 8027cfe:	bf38      	it	cc
 8027d00:	250c      	movcc	r5, #12
 8027d02:	4629      	mov	r1, r5
 8027d04:	4638      	mov	r0, r7
 8027d06:	f7ff ffa5 	bl	8027c54 <sbrk_aligned>
 8027d0a:	3001      	adds	r0, #1
 8027d0c:	d02b      	beq.n	8027d66 <_malloc_r+0xd2>
 8027d0e:	6823      	ldr	r3, [r4, #0]
 8027d10:	442b      	add	r3, r5
 8027d12:	6023      	str	r3, [r4, #0]
 8027d14:	e00e      	b.n	8027d34 <_malloc_r+0xa0>
 8027d16:	6822      	ldr	r2, [r4, #0]
 8027d18:	1b52      	subs	r2, r2, r5
 8027d1a:	d41e      	bmi.n	8027d5a <_malloc_r+0xc6>
 8027d1c:	2a0b      	cmp	r2, #11
 8027d1e:	d916      	bls.n	8027d4e <_malloc_r+0xba>
 8027d20:	1961      	adds	r1, r4, r5
 8027d22:	42a3      	cmp	r3, r4
 8027d24:	6025      	str	r5, [r4, #0]
 8027d26:	bf18      	it	ne
 8027d28:	6059      	strne	r1, [r3, #4]
 8027d2a:	6863      	ldr	r3, [r4, #4]
 8027d2c:	bf08      	it	eq
 8027d2e:	6031      	streq	r1, [r6, #0]
 8027d30:	5162      	str	r2, [r4, r5]
 8027d32:	604b      	str	r3, [r1, #4]
 8027d34:	4638      	mov	r0, r7
 8027d36:	f104 060b 	add.w	r6, r4, #11
 8027d3a:	f000 feb9 	bl	8028ab0 <__malloc_unlock>
 8027d3e:	f026 0607 	bic.w	r6, r6, #7
 8027d42:	1d23      	adds	r3, r4, #4
 8027d44:	1af2      	subs	r2, r6, r3
 8027d46:	d0b6      	beq.n	8027cb6 <_malloc_r+0x22>
 8027d48:	1b9b      	subs	r3, r3, r6
 8027d4a:	50a3      	str	r3, [r4, r2]
 8027d4c:	e7b3      	b.n	8027cb6 <_malloc_r+0x22>
 8027d4e:	6862      	ldr	r2, [r4, #4]
 8027d50:	42a3      	cmp	r3, r4
 8027d52:	bf0c      	ite	eq
 8027d54:	6032      	streq	r2, [r6, #0]
 8027d56:	605a      	strne	r2, [r3, #4]
 8027d58:	e7ec      	b.n	8027d34 <_malloc_r+0xa0>
 8027d5a:	4623      	mov	r3, r4
 8027d5c:	6864      	ldr	r4, [r4, #4]
 8027d5e:	e7b2      	b.n	8027cc6 <_malloc_r+0x32>
 8027d60:	4634      	mov	r4, r6
 8027d62:	6876      	ldr	r6, [r6, #4]
 8027d64:	e7b9      	b.n	8027cda <_malloc_r+0x46>
 8027d66:	230c      	movs	r3, #12
 8027d68:	603b      	str	r3, [r7, #0]
 8027d6a:	4638      	mov	r0, r7
 8027d6c:	f000 fea0 	bl	8028ab0 <__malloc_unlock>
 8027d70:	e7a1      	b.n	8027cb6 <_malloc_r+0x22>
 8027d72:	6025      	str	r5, [r4, #0]
 8027d74:	e7de      	b.n	8027d34 <_malloc_r+0xa0>
 8027d76:	bf00      	nop
 8027d78:	24026344 	.word	0x24026344

08027d7c <__sfputc_r>:
 8027d7c:	6893      	ldr	r3, [r2, #8]
 8027d7e:	3b01      	subs	r3, #1
 8027d80:	2b00      	cmp	r3, #0
 8027d82:	b410      	push	{r4}
 8027d84:	6093      	str	r3, [r2, #8]
 8027d86:	da08      	bge.n	8027d9a <__sfputc_r+0x1e>
 8027d88:	6994      	ldr	r4, [r2, #24]
 8027d8a:	42a3      	cmp	r3, r4
 8027d8c:	db01      	blt.n	8027d92 <__sfputc_r+0x16>
 8027d8e:	290a      	cmp	r1, #10
 8027d90:	d103      	bne.n	8027d9a <__sfputc_r+0x1e>
 8027d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027d96:	f000 bb47 	b.w	8028428 <__swbuf_r>
 8027d9a:	6813      	ldr	r3, [r2, #0]
 8027d9c:	1c58      	adds	r0, r3, #1
 8027d9e:	6010      	str	r0, [r2, #0]
 8027da0:	7019      	strb	r1, [r3, #0]
 8027da2:	4608      	mov	r0, r1
 8027da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027da8:	4770      	bx	lr

08027daa <__sfputs_r>:
 8027daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027dac:	4606      	mov	r6, r0
 8027dae:	460f      	mov	r7, r1
 8027db0:	4614      	mov	r4, r2
 8027db2:	18d5      	adds	r5, r2, r3
 8027db4:	42ac      	cmp	r4, r5
 8027db6:	d101      	bne.n	8027dbc <__sfputs_r+0x12>
 8027db8:	2000      	movs	r0, #0
 8027dba:	e007      	b.n	8027dcc <__sfputs_r+0x22>
 8027dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027dc0:	463a      	mov	r2, r7
 8027dc2:	4630      	mov	r0, r6
 8027dc4:	f7ff ffda 	bl	8027d7c <__sfputc_r>
 8027dc8:	1c43      	adds	r3, r0, #1
 8027dca:	d1f3      	bne.n	8027db4 <__sfputs_r+0xa>
 8027dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027dd0 <_vfiprintf_r>:
 8027dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027dd4:	460d      	mov	r5, r1
 8027dd6:	b09d      	sub	sp, #116	; 0x74
 8027dd8:	4614      	mov	r4, r2
 8027dda:	4698      	mov	r8, r3
 8027ddc:	4606      	mov	r6, r0
 8027dde:	b118      	cbz	r0, 8027de8 <_vfiprintf_r+0x18>
 8027de0:	6983      	ldr	r3, [r0, #24]
 8027de2:	b90b      	cbnz	r3, 8027de8 <_vfiprintf_r+0x18>
 8027de4:	f000 fd5c 	bl	80288a0 <__sinit>
 8027de8:	4b89      	ldr	r3, [pc, #548]	; (8028010 <_vfiprintf_r+0x240>)
 8027dea:	429d      	cmp	r5, r3
 8027dec:	d11b      	bne.n	8027e26 <_vfiprintf_r+0x56>
 8027dee:	6875      	ldr	r5, [r6, #4]
 8027df0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027df2:	07d9      	lsls	r1, r3, #31
 8027df4:	d405      	bmi.n	8027e02 <_vfiprintf_r+0x32>
 8027df6:	89ab      	ldrh	r3, [r5, #12]
 8027df8:	059a      	lsls	r2, r3, #22
 8027dfa:	d402      	bmi.n	8027e02 <_vfiprintf_r+0x32>
 8027dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027dfe:	f7ff feb4 	bl	8027b6a <__retarget_lock_acquire_recursive>
 8027e02:	89ab      	ldrh	r3, [r5, #12]
 8027e04:	071b      	lsls	r3, r3, #28
 8027e06:	d501      	bpl.n	8027e0c <_vfiprintf_r+0x3c>
 8027e08:	692b      	ldr	r3, [r5, #16]
 8027e0a:	b9eb      	cbnz	r3, 8027e48 <_vfiprintf_r+0x78>
 8027e0c:	4629      	mov	r1, r5
 8027e0e:	4630      	mov	r0, r6
 8027e10:	f000 fb5c 	bl	80284cc <__swsetup_r>
 8027e14:	b1c0      	cbz	r0, 8027e48 <_vfiprintf_r+0x78>
 8027e16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027e18:	07dc      	lsls	r4, r3, #31
 8027e1a:	d50e      	bpl.n	8027e3a <_vfiprintf_r+0x6a>
 8027e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8027e20:	b01d      	add	sp, #116	; 0x74
 8027e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e26:	4b7b      	ldr	r3, [pc, #492]	; (8028014 <_vfiprintf_r+0x244>)
 8027e28:	429d      	cmp	r5, r3
 8027e2a:	d101      	bne.n	8027e30 <_vfiprintf_r+0x60>
 8027e2c:	68b5      	ldr	r5, [r6, #8]
 8027e2e:	e7df      	b.n	8027df0 <_vfiprintf_r+0x20>
 8027e30:	4b79      	ldr	r3, [pc, #484]	; (8028018 <_vfiprintf_r+0x248>)
 8027e32:	429d      	cmp	r5, r3
 8027e34:	bf08      	it	eq
 8027e36:	68f5      	ldreq	r5, [r6, #12]
 8027e38:	e7da      	b.n	8027df0 <_vfiprintf_r+0x20>
 8027e3a:	89ab      	ldrh	r3, [r5, #12]
 8027e3c:	0598      	lsls	r0, r3, #22
 8027e3e:	d4ed      	bmi.n	8027e1c <_vfiprintf_r+0x4c>
 8027e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027e42:	f7ff fe94 	bl	8027b6e <__retarget_lock_release_recursive>
 8027e46:	e7e9      	b.n	8027e1c <_vfiprintf_r+0x4c>
 8027e48:	2300      	movs	r3, #0
 8027e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8027e4c:	2320      	movs	r3, #32
 8027e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027e52:	f8cd 800c 	str.w	r8, [sp, #12]
 8027e56:	2330      	movs	r3, #48	; 0x30
 8027e58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802801c <_vfiprintf_r+0x24c>
 8027e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027e60:	f04f 0901 	mov.w	r9, #1
 8027e64:	4623      	mov	r3, r4
 8027e66:	469a      	mov	sl, r3
 8027e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027e6c:	b10a      	cbz	r2, 8027e72 <_vfiprintf_r+0xa2>
 8027e6e:	2a25      	cmp	r2, #37	; 0x25
 8027e70:	d1f9      	bne.n	8027e66 <_vfiprintf_r+0x96>
 8027e72:	ebba 0b04 	subs.w	fp, sl, r4
 8027e76:	d00b      	beq.n	8027e90 <_vfiprintf_r+0xc0>
 8027e78:	465b      	mov	r3, fp
 8027e7a:	4622      	mov	r2, r4
 8027e7c:	4629      	mov	r1, r5
 8027e7e:	4630      	mov	r0, r6
 8027e80:	f7ff ff93 	bl	8027daa <__sfputs_r>
 8027e84:	3001      	adds	r0, #1
 8027e86:	f000 80aa 	beq.w	8027fde <_vfiprintf_r+0x20e>
 8027e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027e8c:	445a      	add	r2, fp
 8027e8e:	9209      	str	r2, [sp, #36]	; 0x24
 8027e90:	f89a 3000 	ldrb.w	r3, [sl]
 8027e94:	2b00      	cmp	r3, #0
 8027e96:	f000 80a2 	beq.w	8027fde <_vfiprintf_r+0x20e>
 8027e9a:	2300      	movs	r3, #0
 8027e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8027ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027ea4:	f10a 0a01 	add.w	sl, sl, #1
 8027ea8:	9304      	str	r3, [sp, #16]
 8027eaa:	9307      	str	r3, [sp, #28]
 8027eac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027eb0:	931a      	str	r3, [sp, #104]	; 0x68
 8027eb2:	4654      	mov	r4, sl
 8027eb4:	2205      	movs	r2, #5
 8027eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027eba:	4858      	ldr	r0, [pc, #352]	; (802801c <_vfiprintf_r+0x24c>)
 8027ebc:	f7d8 fa18 	bl	80002f0 <memchr>
 8027ec0:	9a04      	ldr	r2, [sp, #16]
 8027ec2:	b9d8      	cbnz	r0, 8027efc <_vfiprintf_r+0x12c>
 8027ec4:	06d1      	lsls	r1, r2, #27
 8027ec6:	bf44      	itt	mi
 8027ec8:	2320      	movmi	r3, #32
 8027eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027ece:	0713      	lsls	r3, r2, #28
 8027ed0:	bf44      	itt	mi
 8027ed2:	232b      	movmi	r3, #43	; 0x2b
 8027ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8027edc:	2b2a      	cmp	r3, #42	; 0x2a
 8027ede:	d015      	beq.n	8027f0c <_vfiprintf_r+0x13c>
 8027ee0:	9a07      	ldr	r2, [sp, #28]
 8027ee2:	4654      	mov	r4, sl
 8027ee4:	2000      	movs	r0, #0
 8027ee6:	f04f 0c0a 	mov.w	ip, #10
 8027eea:	4621      	mov	r1, r4
 8027eec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027ef0:	3b30      	subs	r3, #48	; 0x30
 8027ef2:	2b09      	cmp	r3, #9
 8027ef4:	d94e      	bls.n	8027f94 <_vfiprintf_r+0x1c4>
 8027ef6:	b1b0      	cbz	r0, 8027f26 <_vfiprintf_r+0x156>
 8027ef8:	9207      	str	r2, [sp, #28]
 8027efa:	e014      	b.n	8027f26 <_vfiprintf_r+0x156>
 8027efc:	eba0 0308 	sub.w	r3, r0, r8
 8027f00:	fa09 f303 	lsl.w	r3, r9, r3
 8027f04:	4313      	orrs	r3, r2
 8027f06:	9304      	str	r3, [sp, #16]
 8027f08:	46a2      	mov	sl, r4
 8027f0a:	e7d2      	b.n	8027eb2 <_vfiprintf_r+0xe2>
 8027f0c:	9b03      	ldr	r3, [sp, #12]
 8027f0e:	1d19      	adds	r1, r3, #4
 8027f10:	681b      	ldr	r3, [r3, #0]
 8027f12:	9103      	str	r1, [sp, #12]
 8027f14:	2b00      	cmp	r3, #0
 8027f16:	bfbb      	ittet	lt
 8027f18:	425b      	neglt	r3, r3
 8027f1a:	f042 0202 	orrlt.w	r2, r2, #2
 8027f1e:	9307      	strge	r3, [sp, #28]
 8027f20:	9307      	strlt	r3, [sp, #28]
 8027f22:	bfb8      	it	lt
 8027f24:	9204      	strlt	r2, [sp, #16]
 8027f26:	7823      	ldrb	r3, [r4, #0]
 8027f28:	2b2e      	cmp	r3, #46	; 0x2e
 8027f2a:	d10c      	bne.n	8027f46 <_vfiprintf_r+0x176>
 8027f2c:	7863      	ldrb	r3, [r4, #1]
 8027f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8027f30:	d135      	bne.n	8027f9e <_vfiprintf_r+0x1ce>
 8027f32:	9b03      	ldr	r3, [sp, #12]
 8027f34:	1d1a      	adds	r2, r3, #4
 8027f36:	681b      	ldr	r3, [r3, #0]
 8027f38:	9203      	str	r2, [sp, #12]
 8027f3a:	2b00      	cmp	r3, #0
 8027f3c:	bfb8      	it	lt
 8027f3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8027f42:	3402      	adds	r4, #2
 8027f44:	9305      	str	r3, [sp, #20]
 8027f46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802802c <_vfiprintf_r+0x25c>
 8027f4a:	7821      	ldrb	r1, [r4, #0]
 8027f4c:	2203      	movs	r2, #3
 8027f4e:	4650      	mov	r0, sl
 8027f50:	f7d8 f9ce 	bl	80002f0 <memchr>
 8027f54:	b140      	cbz	r0, 8027f68 <_vfiprintf_r+0x198>
 8027f56:	2340      	movs	r3, #64	; 0x40
 8027f58:	eba0 000a 	sub.w	r0, r0, sl
 8027f5c:	fa03 f000 	lsl.w	r0, r3, r0
 8027f60:	9b04      	ldr	r3, [sp, #16]
 8027f62:	4303      	orrs	r3, r0
 8027f64:	3401      	adds	r4, #1
 8027f66:	9304      	str	r3, [sp, #16]
 8027f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027f6c:	482c      	ldr	r0, [pc, #176]	; (8028020 <_vfiprintf_r+0x250>)
 8027f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027f72:	2206      	movs	r2, #6
 8027f74:	f7d8 f9bc 	bl	80002f0 <memchr>
 8027f78:	2800      	cmp	r0, #0
 8027f7a:	d03f      	beq.n	8027ffc <_vfiprintf_r+0x22c>
 8027f7c:	4b29      	ldr	r3, [pc, #164]	; (8028024 <_vfiprintf_r+0x254>)
 8027f7e:	bb1b      	cbnz	r3, 8027fc8 <_vfiprintf_r+0x1f8>
 8027f80:	9b03      	ldr	r3, [sp, #12]
 8027f82:	3307      	adds	r3, #7
 8027f84:	f023 0307 	bic.w	r3, r3, #7
 8027f88:	3308      	adds	r3, #8
 8027f8a:	9303      	str	r3, [sp, #12]
 8027f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f8e:	443b      	add	r3, r7
 8027f90:	9309      	str	r3, [sp, #36]	; 0x24
 8027f92:	e767      	b.n	8027e64 <_vfiprintf_r+0x94>
 8027f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8027f98:	460c      	mov	r4, r1
 8027f9a:	2001      	movs	r0, #1
 8027f9c:	e7a5      	b.n	8027eea <_vfiprintf_r+0x11a>
 8027f9e:	2300      	movs	r3, #0
 8027fa0:	3401      	adds	r4, #1
 8027fa2:	9305      	str	r3, [sp, #20]
 8027fa4:	4619      	mov	r1, r3
 8027fa6:	f04f 0c0a 	mov.w	ip, #10
 8027faa:	4620      	mov	r0, r4
 8027fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027fb0:	3a30      	subs	r2, #48	; 0x30
 8027fb2:	2a09      	cmp	r2, #9
 8027fb4:	d903      	bls.n	8027fbe <_vfiprintf_r+0x1ee>
 8027fb6:	2b00      	cmp	r3, #0
 8027fb8:	d0c5      	beq.n	8027f46 <_vfiprintf_r+0x176>
 8027fba:	9105      	str	r1, [sp, #20]
 8027fbc:	e7c3      	b.n	8027f46 <_vfiprintf_r+0x176>
 8027fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8027fc2:	4604      	mov	r4, r0
 8027fc4:	2301      	movs	r3, #1
 8027fc6:	e7f0      	b.n	8027faa <_vfiprintf_r+0x1da>
 8027fc8:	ab03      	add	r3, sp, #12
 8027fca:	9300      	str	r3, [sp, #0]
 8027fcc:	462a      	mov	r2, r5
 8027fce:	4b16      	ldr	r3, [pc, #88]	; (8028028 <_vfiprintf_r+0x258>)
 8027fd0:	a904      	add	r1, sp, #16
 8027fd2:	4630      	mov	r0, r6
 8027fd4:	f3af 8000 	nop.w
 8027fd8:	4607      	mov	r7, r0
 8027fda:	1c78      	adds	r0, r7, #1
 8027fdc:	d1d6      	bne.n	8027f8c <_vfiprintf_r+0x1bc>
 8027fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027fe0:	07d9      	lsls	r1, r3, #31
 8027fe2:	d405      	bmi.n	8027ff0 <_vfiprintf_r+0x220>
 8027fe4:	89ab      	ldrh	r3, [r5, #12]
 8027fe6:	059a      	lsls	r2, r3, #22
 8027fe8:	d402      	bmi.n	8027ff0 <_vfiprintf_r+0x220>
 8027fea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027fec:	f7ff fdbf 	bl	8027b6e <__retarget_lock_release_recursive>
 8027ff0:	89ab      	ldrh	r3, [r5, #12]
 8027ff2:	065b      	lsls	r3, r3, #25
 8027ff4:	f53f af12 	bmi.w	8027e1c <_vfiprintf_r+0x4c>
 8027ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027ffa:	e711      	b.n	8027e20 <_vfiprintf_r+0x50>
 8027ffc:	ab03      	add	r3, sp, #12
 8027ffe:	9300      	str	r3, [sp, #0]
 8028000:	462a      	mov	r2, r5
 8028002:	4b09      	ldr	r3, [pc, #36]	; (8028028 <_vfiprintf_r+0x258>)
 8028004:	a904      	add	r1, sp, #16
 8028006:	4630      	mov	r0, r6
 8028008:	f000 f880 	bl	802810c <_printf_i>
 802800c:	e7e4      	b.n	8027fd8 <_vfiprintf_r+0x208>
 802800e:	bf00      	nop
 8028010:	0802ca64 	.word	0x0802ca64
 8028014:	0802ca84 	.word	0x0802ca84
 8028018:	0802ca44 	.word	0x0802ca44
 802801c:	0802ca0c 	.word	0x0802ca0c
 8028020:	0802ca16 	.word	0x0802ca16
 8028024:	00000000 	.word	0x00000000
 8028028:	08027dab 	.word	0x08027dab
 802802c:	0802ca12 	.word	0x0802ca12

08028030 <_printf_common>:
 8028030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028034:	4616      	mov	r6, r2
 8028036:	4699      	mov	r9, r3
 8028038:	688a      	ldr	r2, [r1, #8]
 802803a:	690b      	ldr	r3, [r1, #16]
 802803c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028040:	4293      	cmp	r3, r2
 8028042:	bfb8      	it	lt
 8028044:	4613      	movlt	r3, r2
 8028046:	6033      	str	r3, [r6, #0]
 8028048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802804c:	4607      	mov	r7, r0
 802804e:	460c      	mov	r4, r1
 8028050:	b10a      	cbz	r2, 8028056 <_printf_common+0x26>
 8028052:	3301      	adds	r3, #1
 8028054:	6033      	str	r3, [r6, #0]
 8028056:	6823      	ldr	r3, [r4, #0]
 8028058:	0699      	lsls	r1, r3, #26
 802805a:	bf42      	ittt	mi
 802805c:	6833      	ldrmi	r3, [r6, #0]
 802805e:	3302      	addmi	r3, #2
 8028060:	6033      	strmi	r3, [r6, #0]
 8028062:	6825      	ldr	r5, [r4, #0]
 8028064:	f015 0506 	ands.w	r5, r5, #6
 8028068:	d106      	bne.n	8028078 <_printf_common+0x48>
 802806a:	f104 0a19 	add.w	sl, r4, #25
 802806e:	68e3      	ldr	r3, [r4, #12]
 8028070:	6832      	ldr	r2, [r6, #0]
 8028072:	1a9b      	subs	r3, r3, r2
 8028074:	42ab      	cmp	r3, r5
 8028076:	dc26      	bgt.n	80280c6 <_printf_common+0x96>
 8028078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802807c:	1e13      	subs	r3, r2, #0
 802807e:	6822      	ldr	r2, [r4, #0]
 8028080:	bf18      	it	ne
 8028082:	2301      	movne	r3, #1
 8028084:	0692      	lsls	r2, r2, #26
 8028086:	d42b      	bmi.n	80280e0 <_printf_common+0xb0>
 8028088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802808c:	4649      	mov	r1, r9
 802808e:	4638      	mov	r0, r7
 8028090:	47c0      	blx	r8
 8028092:	3001      	adds	r0, #1
 8028094:	d01e      	beq.n	80280d4 <_printf_common+0xa4>
 8028096:	6823      	ldr	r3, [r4, #0]
 8028098:	68e5      	ldr	r5, [r4, #12]
 802809a:	6832      	ldr	r2, [r6, #0]
 802809c:	f003 0306 	and.w	r3, r3, #6
 80280a0:	2b04      	cmp	r3, #4
 80280a2:	bf08      	it	eq
 80280a4:	1aad      	subeq	r5, r5, r2
 80280a6:	68a3      	ldr	r3, [r4, #8]
 80280a8:	6922      	ldr	r2, [r4, #16]
 80280aa:	bf0c      	ite	eq
 80280ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80280b0:	2500      	movne	r5, #0
 80280b2:	4293      	cmp	r3, r2
 80280b4:	bfc4      	itt	gt
 80280b6:	1a9b      	subgt	r3, r3, r2
 80280b8:	18ed      	addgt	r5, r5, r3
 80280ba:	2600      	movs	r6, #0
 80280bc:	341a      	adds	r4, #26
 80280be:	42b5      	cmp	r5, r6
 80280c0:	d11a      	bne.n	80280f8 <_printf_common+0xc8>
 80280c2:	2000      	movs	r0, #0
 80280c4:	e008      	b.n	80280d8 <_printf_common+0xa8>
 80280c6:	2301      	movs	r3, #1
 80280c8:	4652      	mov	r2, sl
 80280ca:	4649      	mov	r1, r9
 80280cc:	4638      	mov	r0, r7
 80280ce:	47c0      	blx	r8
 80280d0:	3001      	adds	r0, #1
 80280d2:	d103      	bne.n	80280dc <_printf_common+0xac>
 80280d4:	f04f 30ff 	mov.w	r0, #4294967295
 80280d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80280dc:	3501      	adds	r5, #1
 80280de:	e7c6      	b.n	802806e <_printf_common+0x3e>
 80280e0:	18e1      	adds	r1, r4, r3
 80280e2:	1c5a      	adds	r2, r3, #1
 80280e4:	2030      	movs	r0, #48	; 0x30
 80280e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80280ea:	4422      	add	r2, r4
 80280ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80280f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80280f4:	3302      	adds	r3, #2
 80280f6:	e7c7      	b.n	8028088 <_printf_common+0x58>
 80280f8:	2301      	movs	r3, #1
 80280fa:	4622      	mov	r2, r4
 80280fc:	4649      	mov	r1, r9
 80280fe:	4638      	mov	r0, r7
 8028100:	47c0      	blx	r8
 8028102:	3001      	adds	r0, #1
 8028104:	d0e6      	beq.n	80280d4 <_printf_common+0xa4>
 8028106:	3601      	adds	r6, #1
 8028108:	e7d9      	b.n	80280be <_printf_common+0x8e>
	...

0802810c <_printf_i>:
 802810c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028110:	7e0f      	ldrb	r7, [r1, #24]
 8028112:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028114:	2f78      	cmp	r7, #120	; 0x78
 8028116:	4691      	mov	r9, r2
 8028118:	4680      	mov	r8, r0
 802811a:	460c      	mov	r4, r1
 802811c:	469a      	mov	sl, r3
 802811e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8028122:	d807      	bhi.n	8028134 <_printf_i+0x28>
 8028124:	2f62      	cmp	r7, #98	; 0x62
 8028126:	d80a      	bhi.n	802813e <_printf_i+0x32>
 8028128:	2f00      	cmp	r7, #0
 802812a:	f000 80d8 	beq.w	80282de <_printf_i+0x1d2>
 802812e:	2f58      	cmp	r7, #88	; 0x58
 8028130:	f000 80a3 	beq.w	802827a <_printf_i+0x16e>
 8028134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802813c:	e03a      	b.n	80281b4 <_printf_i+0xa8>
 802813e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028142:	2b15      	cmp	r3, #21
 8028144:	d8f6      	bhi.n	8028134 <_printf_i+0x28>
 8028146:	a101      	add	r1, pc, #4	; (adr r1, 802814c <_printf_i+0x40>)
 8028148:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802814c:	080281a5 	.word	0x080281a5
 8028150:	080281b9 	.word	0x080281b9
 8028154:	08028135 	.word	0x08028135
 8028158:	08028135 	.word	0x08028135
 802815c:	08028135 	.word	0x08028135
 8028160:	08028135 	.word	0x08028135
 8028164:	080281b9 	.word	0x080281b9
 8028168:	08028135 	.word	0x08028135
 802816c:	08028135 	.word	0x08028135
 8028170:	08028135 	.word	0x08028135
 8028174:	08028135 	.word	0x08028135
 8028178:	080282c5 	.word	0x080282c5
 802817c:	080281e9 	.word	0x080281e9
 8028180:	080282a7 	.word	0x080282a7
 8028184:	08028135 	.word	0x08028135
 8028188:	08028135 	.word	0x08028135
 802818c:	080282e7 	.word	0x080282e7
 8028190:	08028135 	.word	0x08028135
 8028194:	080281e9 	.word	0x080281e9
 8028198:	08028135 	.word	0x08028135
 802819c:	08028135 	.word	0x08028135
 80281a0:	080282af 	.word	0x080282af
 80281a4:	682b      	ldr	r3, [r5, #0]
 80281a6:	1d1a      	adds	r2, r3, #4
 80281a8:	681b      	ldr	r3, [r3, #0]
 80281aa:	602a      	str	r2, [r5, #0]
 80281ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80281b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80281b4:	2301      	movs	r3, #1
 80281b6:	e0a3      	b.n	8028300 <_printf_i+0x1f4>
 80281b8:	6820      	ldr	r0, [r4, #0]
 80281ba:	6829      	ldr	r1, [r5, #0]
 80281bc:	0606      	lsls	r6, r0, #24
 80281be:	f101 0304 	add.w	r3, r1, #4
 80281c2:	d50a      	bpl.n	80281da <_printf_i+0xce>
 80281c4:	680e      	ldr	r6, [r1, #0]
 80281c6:	602b      	str	r3, [r5, #0]
 80281c8:	2e00      	cmp	r6, #0
 80281ca:	da03      	bge.n	80281d4 <_printf_i+0xc8>
 80281cc:	232d      	movs	r3, #45	; 0x2d
 80281ce:	4276      	negs	r6, r6
 80281d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80281d4:	485e      	ldr	r0, [pc, #376]	; (8028350 <_printf_i+0x244>)
 80281d6:	230a      	movs	r3, #10
 80281d8:	e019      	b.n	802820e <_printf_i+0x102>
 80281da:	680e      	ldr	r6, [r1, #0]
 80281dc:	602b      	str	r3, [r5, #0]
 80281de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80281e2:	bf18      	it	ne
 80281e4:	b236      	sxthne	r6, r6
 80281e6:	e7ef      	b.n	80281c8 <_printf_i+0xbc>
 80281e8:	682b      	ldr	r3, [r5, #0]
 80281ea:	6820      	ldr	r0, [r4, #0]
 80281ec:	1d19      	adds	r1, r3, #4
 80281ee:	6029      	str	r1, [r5, #0]
 80281f0:	0601      	lsls	r1, r0, #24
 80281f2:	d501      	bpl.n	80281f8 <_printf_i+0xec>
 80281f4:	681e      	ldr	r6, [r3, #0]
 80281f6:	e002      	b.n	80281fe <_printf_i+0xf2>
 80281f8:	0646      	lsls	r6, r0, #25
 80281fa:	d5fb      	bpl.n	80281f4 <_printf_i+0xe8>
 80281fc:	881e      	ldrh	r6, [r3, #0]
 80281fe:	4854      	ldr	r0, [pc, #336]	; (8028350 <_printf_i+0x244>)
 8028200:	2f6f      	cmp	r7, #111	; 0x6f
 8028202:	bf0c      	ite	eq
 8028204:	2308      	moveq	r3, #8
 8028206:	230a      	movne	r3, #10
 8028208:	2100      	movs	r1, #0
 802820a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802820e:	6865      	ldr	r5, [r4, #4]
 8028210:	60a5      	str	r5, [r4, #8]
 8028212:	2d00      	cmp	r5, #0
 8028214:	bfa2      	ittt	ge
 8028216:	6821      	ldrge	r1, [r4, #0]
 8028218:	f021 0104 	bicge.w	r1, r1, #4
 802821c:	6021      	strge	r1, [r4, #0]
 802821e:	b90e      	cbnz	r6, 8028224 <_printf_i+0x118>
 8028220:	2d00      	cmp	r5, #0
 8028222:	d04d      	beq.n	80282c0 <_printf_i+0x1b4>
 8028224:	4615      	mov	r5, r2
 8028226:	fbb6 f1f3 	udiv	r1, r6, r3
 802822a:	fb03 6711 	mls	r7, r3, r1, r6
 802822e:	5dc7      	ldrb	r7, [r0, r7]
 8028230:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8028234:	4637      	mov	r7, r6
 8028236:	42bb      	cmp	r3, r7
 8028238:	460e      	mov	r6, r1
 802823a:	d9f4      	bls.n	8028226 <_printf_i+0x11a>
 802823c:	2b08      	cmp	r3, #8
 802823e:	d10b      	bne.n	8028258 <_printf_i+0x14c>
 8028240:	6823      	ldr	r3, [r4, #0]
 8028242:	07de      	lsls	r6, r3, #31
 8028244:	d508      	bpl.n	8028258 <_printf_i+0x14c>
 8028246:	6923      	ldr	r3, [r4, #16]
 8028248:	6861      	ldr	r1, [r4, #4]
 802824a:	4299      	cmp	r1, r3
 802824c:	bfde      	ittt	le
 802824e:	2330      	movle	r3, #48	; 0x30
 8028250:	f805 3c01 	strble.w	r3, [r5, #-1]
 8028254:	f105 35ff 	addle.w	r5, r5, #4294967295
 8028258:	1b52      	subs	r2, r2, r5
 802825a:	6122      	str	r2, [r4, #16]
 802825c:	f8cd a000 	str.w	sl, [sp]
 8028260:	464b      	mov	r3, r9
 8028262:	aa03      	add	r2, sp, #12
 8028264:	4621      	mov	r1, r4
 8028266:	4640      	mov	r0, r8
 8028268:	f7ff fee2 	bl	8028030 <_printf_common>
 802826c:	3001      	adds	r0, #1
 802826e:	d14c      	bne.n	802830a <_printf_i+0x1fe>
 8028270:	f04f 30ff 	mov.w	r0, #4294967295
 8028274:	b004      	add	sp, #16
 8028276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802827a:	4835      	ldr	r0, [pc, #212]	; (8028350 <_printf_i+0x244>)
 802827c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8028280:	6829      	ldr	r1, [r5, #0]
 8028282:	6823      	ldr	r3, [r4, #0]
 8028284:	f851 6b04 	ldr.w	r6, [r1], #4
 8028288:	6029      	str	r1, [r5, #0]
 802828a:	061d      	lsls	r5, r3, #24
 802828c:	d514      	bpl.n	80282b8 <_printf_i+0x1ac>
 802828e:	07df      	lsls	r7, r3, #31
 8028290:	bf44      	itt	mi
 8028292:	f043 0320 	orrmi.w	r3, r3, #32
 8028296:	6023      	strmi	r3, [r4, #0]
 8028298:	b91e      	cbnz	r6, 80282a2 <_printf_i+0x196>
 802829a:	6823      	ldr	r3, [r4, #0]
 802829c:	f023 0320 	bic.w	r3, r3, #32
 80282a0:	6023      	str	r3, [r4, #0]
 80282a2:	2310      	movs	r3, #16
 80282a4:	e7b0      	b.n	8028208 <_printf_i+0xfc>
 80282a6:	6823      	ldr	r3, [r4, #0]
 80282a8:	f043 0320 	orr.w	r3, r3, #32
 80282ac:	6023      	str	r3, [r4, #0]
 80282ae:	2378      	movs	r3, #120	; 0x78
 80282b0:	4828      	ldr	r0, [pc, #160]	; (8028354 <_printf_i+0x248>)
 80282b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80282b6:	e7e3      	b.n	8028280 <_printf_i+0x174>
 80282b8:	0659      	lsls	r1, r3, #25
 80282ba:	bf48      	it	mi
 80282bc:	b2b6      	uxthmi	r6, r6
 80282be:	e7e6      	b.n	802828e <_printf_i+0x182>
 80282c0:	4615      	mov	r5, r2
 80282c2:	e7bb      	b.n	802823c <_printf_i+0x130>
 80282c4:	682b      	ldr	r3, [r5, #0]
 80282c6:	6826      	ldr	r6, [r4, #0]
 80282c8:	6961      	ldr	r1, [r4, #20]
 80282ca:	1d18      	adds	r0, r3, #4
 80282cc:	6028      	str	r0, [r5, #0]
 80282ce:	0635      	lsls	r5, r6, #24
 80282d0:	681b      	ldr	r3, [r3, #0]
 80282d2:	d501      	bpl.n	80282d8 <_printf_i+0x1cc>
 80282d4:	6019      	str	r1, [r3, #0]
 80282d6:	e002      	b.n	80282de <_printf_i+0x1d2>
 80282d8:	0670      	lsls	r0, r6, #25
 80282da:	d5fb      	bpl.n	80282d4 <_printf_i+0x1c8>
 80282dc:	8019      	strh	r1, [r3, #0]
 80282de:	2300      	movs	r3, #0
 80282e0:	6123      	str	r3, [r4, #16]
 80282e2:	4615      	mov	r5, r2
 80282e4:	e7ba      	b.n	802825c <_printf_i+0x150>
 80282e6:	682b      	ldr	r3, [r5, #0]
 80282e8:	1d1a      	adds	r2, r3, #4
 80282ea:	602a      	str	r2, [r5, #0]
 80282ec:	681d      	ldr	r5, [r3, #0]
 80282ee:	6862      	ldr	r2, [r4, #4]
 80282f0:	2100      	movs	r1, #0
 80282f2:	4628      	mov	r0, r5
 80282f4:	f7d7 fffc 	bl	80002f0 <memchr>
 80282f8:	b108      	cbz	r0, 80282fe <_printf_i+0x1f2>
 80282fa:	1b40      	subs	r0, r0, r5
 80282fc:	6060      	str	r0, [r4, #4]
 80282fe:	6863      	ldr	r3, [r4, #4]
 8028300:	6123      	str	r3, [r4, #16]
 8028302:	2300      	movs	r3, #0
 8028304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028308:	e7a8      	b.n	802825c <_printf_i+0x150>
 802830a:	6923      	ldr	r3, [r4, #16]
 802830c:	462a      	mov	r2, r5
 802830e:	4649      	mov	r1, r9
 8028310:	4640      	mov	r0, r8
 8028312:	47d0      	blx	sl
 8028314:	3001      	adds	r0, #1
 8028316:	d0ab      	beq.n	8028270 <_printf_i+0x164>
 8028318:	6823      	ldr	r3, [r4, #0]
 802831a:	079b      	lsls	r3, r3, #30
 802831c:	d413      	bmi.n	8028346 <_printf_i+0x23a>
 802831e:	68e0      	ldr	r0, [r4, #12]
 8028320:	9b03      	ldr	r3, [sp, #12]
 8028322:	4298      	cmp	r0, r3
 8028324:	bfb8      	it	lt
 8028326:	4618      	movlt	r0, r3
 8028328:	e7a4      	b.n	8028274 <_printf_i+0x168>
 802832a:	2301      	movs	r3, #1
 802832c:	4632      	mov	r2, r6
 802832e:	4649      	mov	r1, r9
 8028330:	4640      	mov	r0, r8
 8028332:	47d0      	blx	sl
 8028334:	3001      	adds	r0, #1
 8028336:	d09b      	beq.n	8028270 <_printf_i+0x164>
 8028338:	3501      	adds	r5, #1
 802833a:	68e3      	ldr	r3, [r4, #12]
 802833c:	9903      	ldr	r1, [sp, #12]
 802833e:	1a5b      	subs	r3, r3, r1
 8028340:	42ab      	cmp	r3, r5
 8028342:	dcf2      	bgt.n	802832a <_printf_i+0x21e>
 8028344:	e7eb      	b.n	802831e <_printf_i+0x212>
 8028346:	2500      	movs	r5, #0
 8028348:	f104 0619 	add.w	r6, r4, #25
 802834c:	e7f5      	b.n	802833a <_printf_i+0x22e>
 802834e:	bf00      	nop
 8028350:	0802ca1d 	.word	0x0802ca1d
 8028354:	0802ca2e 	.word	0x0802ca2e

08028358 <_sbrk_r>:
 8028358:	b538      	push	{r3, r4, r5, lr}
 802835a:	4d06      	ldr	r5, [pc, #24]	; (8028374 <_sbrk_r+0x1c>)
 802835c:	2300      	movs	r3, #0
 802835e:	4604      	mov	r4, r0
 8028360:	4608      	mov	r0, r1
 8028362:	602b      	str	r3, [r5, #0]
 8028364:	f7de ffe0 	bl	8007328 <_sbrk>
 8028368:	1c43      	adds	r3, r0, #1
 802836a:	d102      	bne.n	8028372 <_sbrk_r+0x1a>
 802836c:	682b      	ldr	r3, [r5, #0]
 802836e:	b103      	cbz	r3, 8028372 <_sbrk_r+0x1a>
 8028370:	6023      	str	r3, [r4, #0]
 8028372:	bd38      	pop	{r3, r4, r5, pc}
 8028374:	240264e4 	.word	0x240264e4

08028378 <_raise_r>:
 8028378:	291f      	cmp	r1, #31
 802837a:	b538      	push	{r3, r4, r5, lr}
 802837c:	4604      	mov	r4, r0
 802837e:	460d      	mov	r5, r1
 8028380:	d904      	bls.n	802838c <_raise_r+0x14>
 8028382:	2316      	movs	r3, #22
 8028384:	6003      	str	r3, [r0, #0]
 8028386:	f04f 30ff 	mov.w	r0, #4294967295
 802838a:	bd38      	pop	{r3, r4, r5, pc}
 802838c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802838e:	b112      	cbz	r2, 8028396 <_raise_r+0x1e>
 8028390:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028394:	b94b      	cbnz	r3, 80283aa <_raise_r+0x32>
 8028396:	4620      	mov	r0, r4
 8028398:	f000 f830 	bl	80283fc <_getpid_r>
 802839c:	462a      	mov	r2, r5
 802839e:	4601      	mov	r1, r0
 80283a0:	4620      	mov	r0, r4
 80283a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80283a6:	f000 b817 	b.w	80283d8 <_kill_r>
 80283aa:	2b01      	cmp	r3, #1
 80283ac:	d00a      	beq.n	80283c4 <_raise_r+0x4c>
 80283ae:	1c59      	adds	r1, r3, #1
 80283b0:	d103      	bne.n	80283ba <_raise_r+0x42>
 80283b2:	2316      	movs	r3, #22
 80283b4:	6003      	str	r3, [r0, #0]
 80283b6:	2001      	movs	r0, #1
 80283b8:	e7e7      	b.n	802838a <_raise_r+0x12>
 80283ba:	2400      	movs	r4, #0
 80283bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80283c0:	4628      	mov	r0, r5
 80283c2:	4798      	blx	r3
 80283c4:	2000      	movs	r0, #0
 80283c6:	e7e0      	b.n	802838a <_raise_r+0x12>

080283c8 <raise>:
 80283c8:	4b02      	ldr	r3, [pc, #8]	; (80283d4 <raise+0xc>)
 80283ca:	4601      	mov	r1, r0
 80283cc:	6818      	ldr	r0, [r3, #0]
 80283ce:	f7ff bfd3 	b.w	8028378 <_raise_r>
 80283d2:	bf00      	nop
 80283d4:	240000c0 	.word	0x240000c0

080283d8 <_kill_r>:
 80283d8:	b538      	push	{r3, r4, r5, lr}
 80283da:	4d07      	ldr	r5, [pc, #28]	; (80283f8 <_kill_r+0x20>)
 80283dc:	2300      	movs	r3, #0
 80283de:	4604      	mov	r4, r0
 80283e0:	4608      	mov	r0, r1
 80283e2:	4611      	mov	r1, r2
 80283e4:	602b      	str	r3, [r5, #0]
 80283e6:	f7de ff17 	bl	8007218 <_kill>
 80283ea:	1c43      	adds	r3, r0, #1
 80283ec:	d102      	bne.n	80283f4 <_kill_r+0x1c>
 80283ee:	682b      	ldr	r3, [r5, #0]
 80283f0:	b103      	cbz	r3, 80283f4 <_kill_r+0x1c>
 80283f2:	6023      	str	r3, [r4, #0]
 80283f4:	bd38      	pop	{r3, r4, r5, pc}
 80283f6:	bf00      	nop
 80283f8:	240264e4 	.word	0x240264e4

080283fc <_getpid_r>:
 80283fc:	f7de bf04 	b.w	8007208 <_getpid>

08028400 <strncmp>:
 8028400:	b510      	push	{r4, lr}
 8028402:	b17a      	cbz	r2, 8028424 <strncmp+0x24>
 8028404:	4603      	mov	r3, r0
 8028406:	3901      	subs	r1, #1
 8028408:	1884      	adds	r4, r0, r2
 802840a:	f813 0b01 	ldrb.w	r0, [r3], #1
 802840e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8028412:	4290      	cmp	r0, r2
 8028414:	d101      	bne.n	802841a <strncmp+0x1a>
 8028416:	42a3      	cmp	r3, r4
 8028418:	d101      	bne.n	802841e <strncmp+0x1e>
 802841a:	1a80      	subs	r0, r0, r2
 802841c:	bd10      	pop	{r4, pc}
 802841e:	2800      	cmp	r0, #0
 8028420:	d1f3      	bne.n	802840a <strncmp+0xa>
 8028422:	e7fa      	b.n	802841a <strncmp+0x1a>
 8028424:	4610      	mov	r0, r2
 8028426:	e7f9      	b.n	802841c <strncmp+0x1c>

08028428 <__swbuf_r>:
 8028428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802842a:	460e      	mov	r6, r1
 802842c:	4614      	mov	r4, r2
 802842e:	4605      	mov	r5, r0
 8028430:	b118      	cbz	r0, 802843a <__swbuf_r+0x12>
 8028432:	6983      	ldr	r3, [r0, #24]
 8028434:	b90b      	cbnz	r3, 802843a <__swbuf_r+0x12>
 8028436:	f000 fa33 	bl	80288a0 <__sinit>
 802843a:	4b21      	ldr	r3, [pc, #132]	; (80284c0 <__swbuf_r+0x98>)
 802843c:	429c      	cmp	r4, r3
 802843e:	d12b      	bne.n	8028498 <__swbuf_r+0x70>
 8028440:	686c      	ldr	r4, [r5, #4]
 8028442:	69a3      	ldr	r3, [r4, #24]
 8028444:	60a3      	str	r3, [r4, #8]
 8028446:	89a3      	ldrh	r3, [r4, #12]
 8028448:	071a      	lsls	r2, r3, #28
 802844a:	d52f      	bpl.n	80284ac <__swbuf_r+0x84>
 802844c:	6923      	ldr	r3, [r4, #16]
 802844e:	b36b      	cbz	r3, 80284ac <__swbuf_r+0x84>
 8028450:	6923      	ldr	r3, [r4, #16]
 8028452:	6820      	ldr	r0, [r4, #0]
 8028454:	1ac0      	subs	r0, r0, r3
 8028456:	6963      	ldr	r3, [r4, #20]
 8028458:	b2f6      	uxtb	r6, r6
 802845a:	4283      	cmp	r3, r0
 802845c:	4637      	mov	r7, r6
 802845e:	dc04      	bgt.n	802846a <__swbuf_r+0x42>
 8028460:	4621      	mov	r1, r4
 8028462:	4628      	mov	r0, r5
 8028464:	f000 f988 	bl	8028778 <_fflush_r>
 8028468:	bb30      	cbnz	r0, 80284b8 <__swbuf_r+0x90>
 802846a:	68a3      	ldr	r3, [r4, #8]
 802846c:	3b01      	subs	r3, #1
 802846e:	60a3      	str	r3, [r4, #8]
 8028470:	6823      	ldr	r3, [r4, #0]
 8028472:	1c5a      	adds	r2, r3, #1
 8028474:	6022      	str	r2, [r4, #0]
 8028476:	701e      	strb	r6, [r3, #0]
 8028478:	6963      	ldr	r3, [r4, #20]
 802847a:	3001      	adds	r0, #1
 802847c:	4283      	cmp	r3, r0
 802847e:	d004      	beq.n	802848a <__swbuf_r+0x62>
 8028480:	89a3      	ldrh	r3, [r4, #12]
 8028482:	07db      	lsls	r3, r3, #31
 8028484:	d506      	bpl.n	8028494 <__swbuf_r+0x6c>
 8028486:	2e0a      	cmp	r6, #10
 8028488:	d104      	bne.n	8028494 <__swbuf_r+0x6c>
 802848a:	4621      	mov	r1, r4
 802848c:	4628      	mov	r0, r5
 802848e:	f000 f973 	bl	8028778 <_fflush_r>
 8028492:	b988      	cbnz	r0, 80284b8 <__swbuf_r+0x90>
 8028494:	4638      	mov	r0, r7
 8028496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028498:	4b0a      	ldr	r3, [pc, #40]	; (80284c4 <__swbuf_r+0x9c>)
 802849a:	429c      	cmp	r4, r3
 802849c:	d101      	bne.n	80284a2 <__swbuf_r+0x7a>
 802849e:	68ac      	ldr	r4, [r5, #8]
 80284a0:	e7cf      	b.n	8028442 <__swbuf_r+0x1a>
 80284a2:	4b09      	ldr	r3, [pc, #36]	; (80284c8 <__swbuf_r+0xa0>)
 80284a4:	429c      	cmp	r4, r3
 80284a6:	bf08      	it	eq
 80284a8:	68ec      	ldreq	r4, [r5, #12]
 80284aa:	e7ca      	b.n	8028442 <__swbuf_r+0x1a>
 80284ac:	4621      	mov	r1, r4
 80284ae:	4628      	mov	r0, r5
 80284b0:	f000 f80c 	bl	80284cc <__swsetup_r>
 80284b4:	2800      	cmp	r0, #0
 80284b6:	d0cb      	beq.n	8028450 <__swbuf_r+0x28>
 80284b8:	f04f 37ff 	mov.w	r7, #4294967295
 80284bc:	e7ea      	b.n	8028494 <__swbuf_r+0x6c>
 80284be:	bf00      	nop
 80284c0:	0802ca64 	.word	0x0802ca64
 80284c4:	0802ca84 	.word	0x0802ca84
 80284c8:	0802ca44 	.word	0x0802ca44

080284cc <__swsetup_r>:
 80284cc:	4b32      	ldr	r3, [pc, #200]	; (8028598 <__swsetup_r+0xcc>)
 80284ce:	b570      	push	{r4, r5, r6, lr}
 80284d0:	681d      	ldr	r5, [r3, #0]
 80284d2:	4606      	mov	r6, r0
 80284d4:	460c      	mov	r4, r1
 80284d6:	b125      	cbz	r5, 80284e2 <__swsetup_r+0x16>
 80284d8:	69ab      	ldr	r3, [r5, #24]
 80284da:	b913      	cbnz	r3, 80284e2 <__swsetup_r+0x16>
 80284dc:	4628      	mov	r0, r5
 80284de:	f000 f9df 	bl	80288a0 <__sinit>
 80284e2:	4b2e      	ldr	r3, [pc, #184]	; (802859c <__swsetup_r+0xd0>)
 80284e4:	429c      	cmp	r4, r3
 80284e6:	d10f      	bne.n	8028508 <__swsetup_r+0x3c>
 80284e8:	686c      	ldr	r4, [r5, #4]
 80284ea:	89a3      	ldrh	r3, [r4, #12]
 80284ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80284f0:	0719      	lsls	r1, r3, #28
 80284f2:	d42c      	bmi.n	802854e <__swsetup_r+0x82>
 80284f4:	06dd      	lsls	r5, r3, #27
 80284f6:	d411      	bmi.n	802851c <__swsetup_r+0x50>
 80284f8:	2309      	movs	r3, #9
 80284fa:	6033      	str	r3, [r6, #0]
 80284fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028500:	81a3      	strh	r3, [r4, #12]
 8028502:	f04f 30ff 	mov.w	r0, #4294967295
 8028506:	e03e      	b.n	8028586 <__swsetup_r+0xba>
 8028508:	4b25      	ldr	r3, [pc, #148]	; (80285a0 <__swsetup_r+0xd4>)
 802850a:	429c      	cmp	r4, r3
 802850c:	d101      	bne.n	8028512 <__swsetup_r+0x46>
 802850e:	68ac      	ldr	r4, [r5, #8]
 8028510:	e7eb      	b.n	80284ea <__swsetup_r+0x1e>
 8028512:	4b24      	ldr	r3, [pc, #144]	; (80285a4 <__swsetup_r+0xd8>)
 8028514:	429c      	cmp	r4, r3
 8028516:	bf08      	it	eq
 8028518:	68ec      	ldreq	r4, [r5, #12]
 802851a:	e7e6      	b.n	80284ea <__swsetup_r+0x1e>
 802851c:	0758      	lsls	r0, r3, #29
 802851e:	d512      	bpl.n	8028546 <__swsetup_r+0x7a>
 8028520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028522:	b141      	cbz	r1, 8028536 <__swsetup_r+0x6a>
 8028524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028528:	4299      	cmp	r1, r3
 802852a:	d002      	beq.n	8028532 <__swsetup_r+0x66>
 802852c:	4630      	mov	r0, r6
 802852e:	f7ff fb45 	bl	8027bbc <_free_r>
 8028532:	2300      	movs	r3, #0
 8028534:	6363      	str	r3, [r4, #52]	; 0x34
 8028536:	89a3      	ldrh	r3, [r4, #12]
 8028538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802853c:	81a3      	strh	r3, [r4, #12]
 802853e:	2300      	movs	r3, #0
 8028540:	6063      	str	r3, [r4, #4]
 8028542:	6923      	ldr	r3, [r4, #16]
 8028544:	6023      	str	r3, [r4, #0]
 8028546:	89a3      	ldrh	r3, [r4, #12]
 8028548:	f043 0308 	orr.w	r3, r3, #8
 802854c:	81a3      	strh	r3, [r4, #12]
 802854e:	6923      	ldr	r3, [r4, #16]
 8028550:	b94b      	cbnz	r3, 8028566 <__swsetup_r+0x9a>
 8028552:	89a3      	ldrh	r3, [r4, #12]
 8028554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802855c:	d003      	beq.n	8028566 <__swsetup_r+0x9a>
 802855e:	4621      	mov	r1, r4
 8028560:	4630      	mov	r0, r6
 8028562:	f000 fa5f 	bl	8028a24 <__smakebuf_r>
 8028566:	89a0      	ldrh	r0, [r4, #12]
 8028568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802856c:	f010 0301 	ands.w	r3, r0, #1
 8028570:	d00a      	beq.n	8028588 <__swsetup_r+0xbc>
 8028572:	2300      	movs	r3, #0
 8028574:	60a3      	str	r3, [r4, #8]
 8028576:	6963      	ldr	r3, [r4, #20]
 8028578:	425b      	negs	r3, r3
 802857a:	61a3      	str	r3, [r4, #24]
 802857c:	6923      	ldr	r3, [r4, #16]
 802857e:	b943      	cbnz	r3, 8028592 <__swsetup_r+0xc6>
 8028580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8028584:	d1ba      	bne.n	80284fc <__swsetup_r+0x30>
 8028586:	bd70      	pop	{r4, r5, r6, pc}
 8028588:	0781      	lsls	r1, r0, #30
 802858a:	bf58      	it	pl
 802858c:	6963      	ldrpl	r3, [r4, #20]
 802858e:	60a3      	str	r3, [r4, #8]
 8028590:	e7f4      	b.n	802857c <__swsetup_r+0xb0>
 8028592:	2000      	movs	r0, #0
 8028594:	e7f7      	b.n	8028586 <__swsetup_r+0xba>
 8028596:	bf00      	nop
 8028598:	240000c0 	.word	0x240000c0
 802859c:	0802ca64 	.word	0x0802ca64
 80285a0:	0802ca84 	.word	0x0802ca84
 80285a4:	0802ca44 	.word	0x0802ca44

080285a8 <__register_exitproc>:
 80285a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80285ac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8028668 <__register_exitproc+0xc0>
 80285b0:	4606      	mov	r6, r0
 80285b2:	f8d8 0000 	ldr.w	r0, [r8]
 80285b6:	461f      	mov	r7, r3
 80285b8:	460d      	mov	r5, r1
 80285ba:	4691      	mov	r9, r2
 80285bc:	f7ff fad5 	bl	8027b6a <__retarget_lock_acquire_recursive>
 80285c0:	4b25      	ldr	r3, [pc, #148]	; (8028658 <__register_exitproc+0xb0>)
 80285c2:	681c      	ldr	r4, [r3, #0]
 80285c4:	b934      	cbnz	r4, 80285d4 <__register_exitproc+0x2c>
 80285c6:	4c25      	ldr	r4, [pc, #148]	; (802865c <__register_exitproc+0xb4>)
 80285c8:	601c      	str	r4, [r3, #0]
 80285ca:	4b25      	ldr	r3, [pc, #148]	; (8028660 <__register_exitproc+0xb8>)
 80285cc:	b113      	cbz	r3, 80285d4 <__register_exitproc+0x2c>
 80285ce:	681b      	ldr	r3, [r3, #0]
 80285d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80285d4:	6863      	ldr	r3, [r4, #4]
 80285d6:	2b1f      	cmp	r3, #31
 80285d8:	dd07      	ble.n	80285ea <__register_exitproc+0x42>
 80285da:	f8d8 0000 	ldr.w	r0, [r8]
 80285de:	f7ff fac6 	bl	8027b6e <__retarget_lock_release_recursive>
 80285e2:	f04f 30ff 	mov.w	r0, #4294967295
 80285e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80285ea:	b34e      	cbz	r6, 8028640 <__register_exitproc+0x98>
 80285ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80285f0:	b988      	cbnz	r0, 8028616 <__register_exitproc+0x6e>
 80285f2:	4b1c      	ldr	r3, [pc, #112]	; (8028664 <__register_exitproc+0xbc>)
 80285f4:	b923      	cbnz	r3, 8028600 <__register_exitproc+0x58>
 80285f6:	f8d8 0000 	ldr.w	r0, [r8]
 80285fa:	f7ff fab7 	bl	8027b6c <__retarget_lock_release>
 80285fe:	e7f0      	b.n	80285e2 <__register_exitproc+0x3a>
 8028600:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028604:	f7ff fab4 	bl	8027b70 <malloc>
 8028608:	2800      	cmp	r0, #0
 802860a:	d0f4      	beq.n	80285f6 <__register_exitproc+0x4e>
 802860c:	2300      	movs	r3, #0
 802860e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028612:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8028616:	6863      	ldr	r3, [r4, #4]
 8028618:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802861c:	2201      	movs	r2, #1
 802861e:	409a      	lsls	r2, r3
 8028620:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028624:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8028628:	4313      	orrs	r3, r2
 802862a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802862e:	2e02      	cmp	r6, #2
 8028630:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028634:	bf02      	ittt	eq
 8028636:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802863a:	4313      	orreq	r3, r2
 802863c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8028640:	6863      	ldr	r3, [r4, #4]
 8028642:	f8d8 0000 	ldr.w	r0, [r8]
 8028646:	1c5a      	adds	r2, r3, #1
 8028648:	3302      	adds	r3, #2
 802864a:	6062      	str	r2, [r4, #4]
 802864c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028650:	f7ff fa8d 	bl	8027b6e <__retarget_lock_release_recursive>
 8028654:	2000      	movs	r0, #0
 8028656:	e7c6      	b.n	80285e6 <__register_exitproc+0x3e>
 8028658:	240264e0 	.word	0x240264e0
 802865c:	24026454 	.word	0x24026454
 8028660:	0802ca40 	.word	0x0802ca40
 8028664:	08027b71 	.word	0x08027b71
 8028668:	24000124 	.word	0x24000124

0802866c <__sflush_r>:
 802866c:	898a      	ldrh	r2, [r1, #12]
 802866e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028672:	4605      	mov	r5, r0
 8028674:	0710      	lsls	r0, r2, #28
 8028676:	460c      	mov	r4, r1
 8028678:	d458      	bmi.n	802872c <__sflush_r+0xc0>
 802867a:	684b      	ldr	r3, [r1, #4]
 802867c:	2b00      	cmp	r3, #0
 802867e:	dc05      	bgt.n	802868c <__sflush_r+0x20>
 8028680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028682:	2b00      	cmp	r3, #0
 8028684:	dc02      	bgt.n	802868c <__sflush_r+0x20>
 8028686:	2000      	movs	r0, #0
 8028688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802868c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802868e:	2e00      	cmp	r6, #0
 8028690:	d0f9      	beq.n	8028686 <__sflush_r+0x1a>
 8028692:	2300      	movs	r3, #0
 8028694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028698:	682f      	ldr	r7, [r5, #0]
 802869a:	602b      	str	r3, [r5, #0]
 802869c:	d032      	beq.n	8028704 <__sflush_r+0x98>
 802869e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80286a0:	89a3      	ldrh	r3, [r4, #12]
 80286a2:	075a      	lsls	r2, r3, #29
 80286a4:	d505      	bpl.n	80286b2 <__sflush_r+0x46>
 80286a6:	6863      	ldr	r3, [r4, #4]
 80286a8:	1ac0      	subs	r0, r0, r3
 80286aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80286ac:	b10b      	cbz	r3, 80286b2 <__sflush_r+0x46>
 80286ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80286b0:	1ac0      	subs	r0, r0, r3
 80286b2:	2300      	movs	r3, #0
 80286b4:	4602      	mov	r2, r0
 80286b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80286b8:	6a21      	ldr	r1, [r4, #32]
 80286ba:	4628      	mov	r0, r5
 80286bc:	47b0      	blx	r6
 80286be:	1c43      	adds	r3, r0, #1
 80286c0:	89a3      	ldrh	r3, [r4, #12]
 80286c2:	d106      	bne.n	80286d2 <__sflush_r+0x66>
 80286c4:	6829      	ldr	r1, [r5, #0]
 80286c6:	291d      	cmp	r1, #29
 80286c8:	d82c      	bhi.n	8028724 <__sflush_r+0xb8>
 80286ca:	4a2a      	ldr	r2, [pc, #168]	; (8028774 <__sflush_r+0x108>)
 80286cc:	40ca      	lsrs	r2, r1
 80286ce:	07d6      	lsls	r6, r2, #31
 80286d0:	d528      	bpl.n	8028724 <__sflush_r+0xb8>
 80286d2:	2200      	movs	r2, #0
 80286d4:	6062      	str	r2, [r4, #4]
 80286d6:	04d9      	lsls	r1, r3, #19
 80286d8:	6922      	ldr	r2, [r4, #16]
 80286da:	6022      	str	r2, [r4, #0]
 80286dc:	d504      	bpl.n	80286e8 <__sflush_r+0x7c>
 80286de:	1c42      	adds	r2, r0, #1
 80286e0:	d101      	bne.n	80286e6 <__sflush_r+0x7a>
 80286e2:	682b      	ldr	r3, [r5, #0]
 80286e4:	b903      	cbnz	r3, 80286e8 <__sflush_r+0x7c>
 80286e6:	6560      	str	r0, [r4, #84]	; 0x54
 80286e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80286ea:	602f      	str	r7, [r5, #0]
 80286ec:	2900      	cmp	r1, #0
 80286ee:	d0ca      	beq.n	8028686 <__sflush_r+0x1a>
 80286f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80286f4:	4299      	cmp	r1, r3
 80286f6:	d002      	beq.n	80286fe <__sflush_r+0x92>
 80286f8:	4628      	mov	r0, r5
 80286fa:	f7ff fa5f 	bl	8027bbc <_free_r>
 80286fe:	2000      	movs	r0, #0
 8028700:	6360      	str	r0, [r4, #52]	; 0x34
 8028702:	e7c1      	b.n	8028688 <__sflush_r+0x1c>
 8028704:	6a21      	ldr	r1, [r4, #32]
 8028706:	2301      	movs	r3, #1
 8028708:	4628      	mov	r0, r5
 802870a:	47b0      	blx	r6
 802870c:	1c41      	adds	r1, r0, #1
 802870e:	d1c7      	bne.n	80286a0 <__sflush_r+0x34>
 8028710:	682b      	ldr	r3, [r5, #0]
 8028712:	2b00      	cmp	r3, #0
 8028714:	d0c4      	beq.n	80286a0 <__sflush_r+0x34>
 8028716:	2b1d      	cmp	r3, #29
 8028718:	d001      	beq.n	802871e <__sflush_r+0xb2>
 802871a:	2b16      	cmp	r3, #22
 802871c:	d101      	bne.n	8028722 <__sflush_r+0xb6>
 802871e:	602f      	str	r7, [r5, #0]
 8028720:	e7b1      	b.n	8028686 <__sflush_r+0x1a>
 8028722:	89a3      	ldrh	r3, [r4, #12]
 8028724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028728:	81a3      	strh	r3, [r4, #12]
 802872a:	e7ad      	b.n	8028688 <__sflush_r+0x1c>
 802872c:	690f      	ldr	r7, [r1, #16]
 802872e:	2f00      	cmp	r7, #0
 8028730:	d0a9      	beq.n	8028686 <__sflush_r+0x1a>
 8028732:	0793      	lsls	r3, r2, #30
 8028734:	680e      	ldr	r6, [r1, #0]
 8028736:	bf08      	it	eq
 8028738:	694b      	ldreq	r3, [r1, #20]
 802873a:	600f      	str	r7, [r1, #0]
 802873c:	bf18      	it	ne
 802873e:	2300      	movne	r3, #0
 8028740:	eba6 0807 	sub.w	r8, r6, r7
 8028744:	608b      	str	r3, [r1, #8]
 8028746:	f1b8 0f00 	cmp.w	r8, #0
 802874a:	dd9c      	ble.n	8028686 <__sflush_r+0x1a>
 802874c:	6a21      	ldr	r1, [r4, #32]
 802874e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028750:	4643      	mov	r3, r8
 8028752:	463a      	mov	r2, r7
 8028754:	4628      	mov	r0, r5
 8028756:	47b0      	blx	r6
 8028758:	2800      	cmp	r0, #0
 802875a:	dc06      	bgt.n	802876a <__sflush_r+0xfe>
 802875c:	89a3      	ldrh	r3, [r4, #12]
 802875e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028762:	81a3      	strh	r3, [r4, #12]
 8028764:	f04f 30ff 	mov.w	r0, #4294967295
 8028768:	e78e      	b.n	8028688 <__sflush_r+0x1c>
 802876a:	4407      	add	r7, r0
 802876c:	eba8 0800 	sub.w	r8, r8, r0
 8028770:	e7e9      	b.n	8028746 <__sflush_r+0xda>
 8028772:	bf00      	nop
 8028774:	20400001 	.word	0x20400001

08028778 <_fflush_r>:
 8028778:	b538      	push	{r3, r4, r5, lr}
 802877a:	690b      	ldr	r3, [r1, #16]
 802877c:	4605      	mov	r5, r0
 802877e:	460c      	mov	r4, r1
 8028780:	b913      	cbnz	r3, 8028788 <_fflush_r+0x10>
 8028782:	2500      	movs	r5, #0
 8028784:	4628      	mov	r0, r5
 8028786:	bd38      	pop	{r3, r4, r5, pc}
 8028788:	b118      	cbz	r0, 8028792 <_fflush_r+0x1a>
 802878a:	6983      	ldr	r3, [r0, #24]
 802878c:	b90b      	cbnz	r3, 8028792 <_fflush_r+0x1a>
 802878e:	f000 f887 	bl	80288a0 <__sinit>
 8028792:	4b14      	ldr	r3, [pc, #80]	; (80287e4 <_fflush_r+0x6c>)
 8028794:	429c      	cmp	r4, r3
 8028796:	d11b      	bne.n	80287d0 <_fflush_r+0x58>
 8028798:	686c      	ldr	r4, [r5, #4]
 802879a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802879e:	2b00      	cmp	r3, #0
 80287a0:	d0ef      	beq.n	8028782 <_fflush_r+0xa>
 80287a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80287a4:	07d0      	lsls	r0, r2, #31
 80287a6:	d404      	bmi.n	80287b2 <_fflush_r+0x3a>
 80287a8:	0599      	lsls	r1, r3, #22
 80287aa:	d402      	bmi.n	80287b2 <_fflush_r+0x3a>
 80287ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80287ae:	f7ff f9dc 	bl	8027b6a <__retarget_lock_acquire_recursive>
 80287b2:	4628      	mov	r0, r5
 80287b4:	4621      	mov	r1, r4
 80287b6:	f7ff ff59 	bl	802866c <__sflush_r>
 80287ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80287bc:	07da      	lsls	r2, r3, #31
 80287be:	4605      	mov	r5, r0
 80287c0:	d4e0      	bmi.n	8028784 <_fflush_r+0xc>
 80287c2:	89a3      	ldrh	r3, [r4, #12]
 80287c4:	059b      	lsls	r3, r3, #22
 80287c6:	d4dd      	bmi.n	8028784 <_fflush_r+0xc>
 80287c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80287ca:	f7ff f9d0 	bl	8027b6e <__retarget_lock_release_recursive>
 80287ce:	e7d9      	b.n	8028784 <_fflush_r+0xc>
 80287d0:	4b05      	ldr	r3, [pc, #20]	; (80287e8 <_fflush_r+0x70>)
 80287d2:	429c      	cmp	r4, r3
 80287d4:	d101      	bne.n	80287da <_fflush_r+0x62>
 80287d6:	68ac      	ldr	r4, [r5, #8]
 80287d8:	e7df      	b.n	802879a <_fflush_r+0x22>
 80287da:	4b04      	ldr	r3, [pc, #16]	; (80287ec <_fflush_r+0x74>)
 80287dc:	429c      	cmp	r4, r3
 80287de:	bf08      	it	eq
 80287e0:	68ec      	ldreq	r4, [r5, #12]
 80287e2:	e7da      	b.n	802879a <_fflush_r+0x22>
 80287e4:	0802ca64 	.word	0x0802ca64
 80287e8:	0802ca84 	.word	0x0802ca84
 80287ec:	0802ca44 	.word	0x0802ca44

080287f0 <std>:
 80287f0:	2300      	movs	r3, #0
 80287f2:	b510      	push	{r4, lr}
 80287f4:	4604      	mov	r4, r0
 80287f6:	e9c0 3300 	strd	r3, r3, [r0]
 80287fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80287fe:	6083      	str	r3, [r0, #8]
 8028800:	8181      	strh	r1, [r0, #12]
 8028802:	6643      	str	r3, [r0, #100]	; 0x64
 8028804:	81c2      	strh	r2, [r0, #14]
 8028806:	6183      	str	r3, [r0, #24]
 8028808:	4619      	mov	r1, r3
 802880a:	2208      	movs	r2, #8
 802880c:	305c      	adds	r0, #92	; 0x5c
 802880e:	f7ff f9cd 	bl	8027bac <memset>
 8028812:	4b05      	ldr	r3, [pc, #20]	; (8028828 <std+0x38>)
 8028814:	6263      	str	r3, [r4, #36]	; 0x24
 8028816:	4b05      	ldr	r3, [pc, #20]	; (802882c <std+0x3c>)
 8028818:	62a3      	str	r3, [r4, #40]	; 0x28
 802881a:	4b05      	ldr	r3, [pc, #20]	; (8028830 <std+0x40>)
 802881c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802881e:	4b05      	ldr	r3, [pc, #20]	; (8028834 <std+0x44>)
 8028820:	6224      	str	r4, [r4, #32]
 8028822:	6323      	str	r3, [r4, #48]	; 0x30
 8028824:	bd10      	pop	{r4, pc}
 8028826:	bf00      	nop
 8028828:	08028abd 	.word	0x08028abd
 802882c:	08028adf 	.word	0x08028adf
 8028830:	08028b17 	.word	0x08028b17
 8028834:	08028b3b 	.word	0x08028b3b

08028838 <_cleanup_r>:
 8028838:	4901      	ldr	r1, [pc, #4]	; (8028840 <_cleanup_r+0x8>)
 802883a:	f000 b8af 	b.w	802899c <_fwalk_reent>
 802883e:	bf00      	nop
 8028840:	08028779 	.word	0x08028779

08028844 <__sfmoreglue>:
 8028844:	b570      	push	{r4, r5, r6, lr}
 8028846:	2268      	movs	r2, #104	; 0x68
 8028848:	1e4d      	subs	r5, r1, #1
 802884a:	4355      	muls	r5, r2
 802884c:	460e      	mov	r6, r1
 802884e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028852:	f7ff fa1f 	bl	8027c94 <_malloc_r>
 8028856:	4604      	mov	r4, r0
 8028858:	b140      	cbz	r0, 802886c <__sfmoreglue+0x28>
 802885a:	2100      	movs	r1, #0
 802885c:	e9c0 1600 	strd	r1, r6, [r0]
 8028860:	300c      	adds	r0, #12
 8028862:	60a0      	str	r0, [r4, #8]
 8028864:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028868:	f7ff f9a0 	bl	8027bac <memset>
 802886c:	4620      	mov	r0, r4
 802886e:	bd70      	pop	{r4, r5, r6, pc}

08028870 <__sfp_lock_acquire>:
 8028870:	4801      	ldr	r0, [pc, #4]	; (8028878 <__sfp_lock_acquire+0x8>)
 8028872:	f7ff b97a 	b.w	8027b6a <__retarget_lock_acquire_recursive>
 8028876:	bf00      	nop
 8028878:	24026342 	.word	0x24026342

0802887c <__sfp_lock_release>:
 802887c:	4801      	ldr	r0, [pc, #4]	; (8028884 <__sfp_lock_release+0x8>)
 802887e:	f7ff b976 	b.w	8027b6e <__retarget_lock_release_recursive>
 8028882:	bf00      	nop
 8028884:	24026342 	.word	0x24026342

08028888 <__sinit_lock_acquire>:
 8028888:	4801      	ldr	r0, [pc, #4]	; (8028890 <__sinit_lock_acquire+0x8>)
 802888a:	f7ff b96e 	b.w	8027b6a <__retarget_lock_acquire_recursive>
 802888e:	bf00      	nop
 8028890:	24026343 	.word	0x24026343

08028894 <__sinit_lock_release>:
 8028894:	4801      	ldr	r0, [pc, #4]	; (802889c <__sinit_lock_release+0x8>)
 8028896:	f7ff b96a 	b.w	8027b6e <__retarget_lock_release_recursive>
 802889a:	bf00      	nop
 802889c:	24026343 	.word	0x24026343

080288a0 <__sinit>:
 80288a0:	b510      	push	{r4, lr}
 80288a2:	4604      	mov	r4, r0
 80288a4:	f7ff fff0 	bl	8028888 <__sinit_lock_acquire>
 80288a8:	69a3      	ldr	r3, [r4, #24]
 80288aa:	b11b      	cbz	r3, 80288b4 <__sinit+0x14>
 80288ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80288b0:	f7ff bff0 	b.w	8028894 <__sinit_lock_release>
 80288b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80288b8:	6523      	str	r3, [r4, #80]	; 0x50
 80288ba:	4b13      	ldr	r3, [pc, #76]	; (8028908 <__sinit+0x68>)
 80288bc:	4a13      	ldr	r2, [pc, #76]	; (802890c <__sinit+0x6c>)
 80288be:	681b      	ldr	r3, [r3, #0]
 80288c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80288c2:	42a3      	cmp	r3, r4
 80288c4:	bf04      	itt	eq
 80288c6:	2301      	moveq	r3, #1
 80288c8:	61a3      	streq	r3, [r4, #24]
 80288ca:	4620      	mov	r0, r4
 80288cc:	f000 f820 	bl	8028910 <__sfp>
 80288d0:	6060      	str	r0, [r4, #4]
 80288d2:	4620      	mov	r0, r4
 80288d4:	f000 f81c 	bl	8028910 <__sfp>
 80288d8:	60a0      	str	r0, [r4, #8]
 80288da:	4620      	mov	r0, r4
 80288dc:	f000 f818 	bl	8028910 <__sfp>
 80288e0:	2200      	movs	r2, #0
 80288e2:	60e0      	str	r0, [r4, #12]
 80288e4:	2104      	movs	r1, #4
 80288e6:	6860      	ldr	r0, [r4, #4]
 80288e8:	f7ff ff82 	bl	80287f0 <std>
 80288ec:	68a0      	ldr	r0, [r4, #8]
 80288ee:	2201      	movs	r2, #1
 80288f0:	2109      	movs	r1, #9
 80288f2:	f7ff ff7d 	bl	80287f0 <std>
 80288f6:	68e0      	ldr	r0, [r4, #12]
 80288f8:	2202      	movs	r2, #2
 80288fa:	2112      	movs	r1, #18
 80288fc:	f7ff ff78 	bl	80287f0 <std>
 8028900:	2301      	movs	r3, #1
 8028902:	61a3      	str	r3, [r4, #24]
 8028904:	e7d2      	b.n	80288ac <__sinit+0xc>
 8028906:	bf00      	nop
 8028908:	0802ca08 	.word	0x0802ca08
 802890c:	08028839 	.word	0x08028839

08028910 <__sfp>:
 8028910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028912:	4607      	mov	r7, r0
 8028914:	f7ff ffac 	bl	8028870 <__sfp_lock_acquire>
 8028918:	4b1e      	ldr	r3, [pc, #120]	; (8028994 <__sfp+0x84>)
 802891a:	681e      	ldr	r6, [r3, #0]
 802891c:	69b3      	ldr	r3, [r6, #24]
 802891e:	b913      	cbnz	r3, 8028926 <__sfp+0x16>
 8028920:	4630      	mov	r0, r6
 8028922:	f7ff ffbd 	bl	80288a0 <__sinit>
 8028926:	3648      	adds	r6, #72	; 0x48
 8028928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802892c:	3b01      	subs	r3, #1
 802892e:	d503      	bpl.n	8028938 <__sfp+0x28>
 8028930:	6833      	ldr	r3, [r6, #0]
 8028932:	b30b      	cbz	r3, 8028978 <__sfp+0x68>
 8028934:	6836      	ldr	r6, [r6, #0]
 8028936:	e7f7      	b.n	8028928 <__sfp+0x18>
 8028938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802893c:	b9d5      	cbnz	r5, 8028974 <__sfp+0x64>
 802893e:	4b16      	ldr	r3, [pc, #88]	; (8028998 <__sfp+0x88>)
 8028940:	60e3      	str	r3, [r4, #12]
 8028942:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8028946:	6665      	str	r5, [r4, #100]	; 0x64
 8028948:	f7ff f90e 	bl	8027b68 <__retarget_lock_init_recursive>
 802894c:	f7ff ff96 	bl	802887c <__sfp_lock_release>
 8028950:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8028954:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8028958:	6025      	str	r5, [r4, #0]
 802895a:	61a5      	str	r5, [r4, #24]
 802895c:	2208      	movs	r2, #8
 802895e:	4629      	mov	r1, r5
 8028960:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8028964:	f7ff f922 	bl	8027bac <memset>
 8028968:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802896c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8028970:	4620      	mov	r0, r4
 8028972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028974:	3468      	adds	r4, #104	; 0x68
 8028976:	e7d9      	b.n	802892c <__sfp+0x1c>
 8028978:	2104      	movs	r1, #4
 802897a:	4638      	mov	r0, r7
 802897c:	f7ff ff62 	bl	8028844 <__sfmoreglue>
 8028980:	4604      	mov	r4, r0
 8028982:	6030      	str	r0, [r6, #0]
 8028984:	2800      	cmp	r0, #0
 8028986:	d1d5      	bne.n	8028934 <__sfp+0x24>
 8028988:	f7ff ff78 	bl	802887c <__sfp_lock_release>
 802898c:	230c      	movs	r3, #12
 802898e:	603b      	str	r3, [r7, #0]
 8028990:	e7ee      	b.n	8028970 <__sfp+0x60>
 8028992:	bf00      	nop
 8028994:	0802ca08 	.word	0x0802ca08
 8028998:	ffff0001 	.word	0xffff0001

0802899c <_fwalk_reent>:
 802899c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80289a0:	4606      	mov	r6, r0
 80289a2:	4688      	mov	r8, r1
 80289a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80289a8:	2700      	movs	r7, #0
 80289aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80289ae:	f1b9 0901 	subs.w	r9, r9, #1
 80289b2:	d505      	bpl.n	80289c0 <_fwalk_reent+0x24>
 80289b4:	6824      	ldr	r4, [r4, #0]
 80289b6:	2c00      	cmp	r4, #0
 80289b8:	d1f7      	bne.n	80289aa <_fwalk_reent+0xe>
 80289ba:	4638      	mov	r0, r7
 80289bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80289c0:	89ab      	ldrh	r3, [r5, #12]
 80289c2:	2b01      	cmp	r3, #1
 80289c4:	d907      	bls.n	80289d6 <_fwalk_reent+0x3a>
 80289c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80289ca:	3301      	adds	r3, #1
 80289cc:	d003      	beq.n	80289d6 <_fwalk_reent+0x3a>
 80289ce:	4629      	mov	r1, r5
 80289d0:	4630      	mov	r0, r6
 80289d2:	47c0      	blx	r8
 80289d4:	4307      	orrs	r7, r0
 80289d6:	3568      	adds	r5, #104	; 0x68
 80289d8:	e7e9      	b.n	80289ae <_fwalk_reent+0x12>

080289da <__swhatbuf_r>:
 80289da:	b570      	push	{r4, r5, r6, lr}
 80289dc:	460e      	mov	r6, r1
 80289de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80289e2:	2900      	cmp	r1, #0
 80289e4:	b096      	sub	sp, #88	; 0x58
 80289e6:	4614      	mov	r4, r2
 80289e8:	461d      	mov	r5, r3
 80289ea:	da08      	bge.n	80289fe <__swhatbuf_r+0x24>
 80289ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80289f0:	2200      	movs	r2, #0
 80289f2:	602a      	str	r2, [r5, #0]
 80289f4:	061a      	lsls	r2, r3, #24
 80289f6:	d410      	bmi.n	8028a1a <__swhatbuf_r+0x40>
 80289f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80289fc:	e00e      	b.n	8028a1c <__swhatbuf_r+0x42>
 80289fe:	466a      	mov	r2, sp
 8028a00:	f000 f8c2 	bl	8028b88 <_fstat_r>
 8028a04:	2800      	cmp	r0, #0
 8028a06:	dbf1      	blt.n	80289ec <__swhatbuf_r+0x12>
 8028a08:	9a01      	ldr	r2, [sp, #4]
 8028a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028a0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028a12:	425a      	negs	r2, r3
 8028a14:	415a      	adcs	r2, r3
 8028a16:	602a      	str	r2, [r5, #0]
 8028a18:	e7ee      	b.n	80289f8 <__swhatbuf_r+0x1e>
 8028a1a:	2340      	movs	r3, #64	; 0x40
 8028a1c:	2000      	movs	r0, #0
 8028a1e:	6023      	str	r3, [r4, #0]
 8028a20:	b016      	add	sp, #88	; 0x58
 8028a22:	bd70      	pop	{r4, r5, r6, pc}

08028a24 <__smakebuf_r>:
 8028a24:	898b      	ldrh	r3, [r1, #12]
 8028a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028a28:	079d      	lsls	r5, r3, #30
 8028a2a:	4606      	mov	r6, r0
 8028a2c:	460c      	mov	r4, r1
 8028a2e:	d507      	bpl.n	8028a40 <__smakebuf_r+0x1c>
 8028a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028a34:	6023      	str	r3, [r4, #0]
 8028a36:	6123      	str	r3, [r4, #16]
 8028a38:	2301      	movs	r3, #1
 8028a3a:	6163      	str	r3, [r4, #20]
 8028a3c:	b002      	add	sp, #8
 8028a3e:	bd70      	pop	{r4, r5, r6, pc}
 8028a40:	ab01      	add	r3, sp, #4
 8028a42:	466a      	mov	r2, sp
 8028a44:	f7ff ffc9 	bl	80289da <__swhatbuf_r>
 8028a48:	9900      	ldr	r1, [sp, #0]
 8028a4a:	4605      	mov	r5, r0
 8028a4c:	4630      	mov	r0, r6
 8028a4e:	f7ff f921 	bl	8027c94 <_malloc_r>
 8028a52:	b948      	cbnz	r0, 8028a68 <__smakebuf_r+0x44>
 8028a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028a58:	059a      	lsls	r2, r3, #22
 8028a5a:	d4ef      	bmi.n	8028a3c <__smakebuf_r+0x18>
 8028a5c:	f023 0303 	bic.w	r3, r3, #3
 8028a60:	f043 0302 	orr.w	r3, r3, #2
 8028a64:	81a3      	strh	r3, [r4, #12]
 8028a66:	e7e3      	b.n	8028a30 <__smakebuf_r+0xc>
 8028a68:	4b0d      	ldr	r3, [pc, #52]	; (8028aa0 <__smakebuf_r+0x7c>)
 8028a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8028a6c:	89a3      	ldrh	r3, [r4, #12]
 8028a6e:	6020      	str	r0, [r4, #0]
 8028a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028a74:	81a3      	strh	r3, [r4, #12]
 8028a76:	9b00      	ldr	r3, [sp, #0]
 8028a78:	6163      	str	r3, [r4, #20]
 8028a7a:	9b01      	ldr	r3, [sp, #4]
 8028a7c:	6120      	str	r0, [r4, #16]
 8028a7e:	b15b      	cbz	r3, 8028a98 <__smakebuf_r+0x74>
 8028a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028a84:	4630      	mov	r0, r6
 8028a86:	f000 f891 	bl	8028bac <_isatty_r>
 8028a8a:	b128      	cbz	r0, 8028a98 <__smakebuf_r+0x74>
 8028a8c:	89a3      	ldrh	r3, [r4, #12]
 8028a8e:	f023 0303 	bic.w	r3, r3, #3
 8028a92:	f043 0301 	orr.w	r3, r3, #1
 8028a96:	81a3      	strh	r3, [r4, #12]
 8028a98:	89a0      	ldrh	r0, [r4, #12]
 8028a9a:	4305      	orrs	r5, r0
 8028a9c:	81a5      	strh	r5, [r4, #12]
 8028a9e:	e7cd      	b.n	8028a3c <__smakebuf_r+0x18>
 8028aa0:	08028839 	.word	0x08028839

08028aa4 <__malloc_lock>:
 8028aa4:	4801      	ldr	r0, [pc, #4]	; (8028aac <__malloc_lock+0x8>)
 8028aa6:	f7ff b860 	b.w	8027b6a <__retarget_lock_acquire_recursive>
 8028aaa:	bf00      	nop
 8028aac:	24026341 	.word	0x24026341

08028ab0 <__malloc_unlock>:
 8028ab0:	4801      	ldr	r0, [pc, #4]	; (8028ab8 <__malloc_unlock+0x8>)
 8028ab2:	f7ff b85c 	b.w	8027b6e <__retarget_lock_release_recursive>
 8028ab6:	bf00      	nop
 8028ab8:	24026341 	.word	0x24026341

08028abc <__sread>:
 8028abc:	b510      	push	{r4, lr}
 8028abe:	460c      	mov	r4, r1
 8028ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028ac4:	f000 f894 	bl	8028bf0 <_read_r>
 8028ac8:	2800      	cmp	r0, #0
 8028aca:	bfab      	itete	ge
 8028acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8028ace:	89a3      	ldrhlt	r3, [r4, #12]
 8028ad0:	181b      	addge	r3, r3, r0
 8028ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8028ad6:	bfac      	ite	ge
 8028ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8028ada:	81a3      	strhlt	r3, [r4, #12]
 8028adc:	bd10      	pop	{r4, pc}

08028ade <__swrite>:
 8028ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ae2:	461f      	mov	r7, r3
 8028ae4:	898b      	ldrh	r3, [r1, #12]
 8028ae6:	05db      	lsls	r3, r3, #23
 8028ae8:	4605      	mov	r5, r0
 8028aea:	460c      	mov	r4, r1
 8028aec:	4616      	mov	r6, r2
 8028aee:	d505      	bpl.n	8028afc <__swrite+0x1e>
 8028af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028af4:	2302      	movs	r3, #2
 8028af6:	2200      	movs	r2, #0
 8028af8:	f000 f868 	bl	8028bcc <_lseek_r>
 8028afc:	89a3      	ldrh	r3, [r4, #12]
 8028afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028b06:	81a3      	strh	r3, [r4, #12]
 8028b08:	4632      	mov	r2, r6
 8028b0a:	463b      	mov	r3, r7
 8028b0c:	4628      	mov	r0, r5
 8028b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028b12:	f000 b817 	b.w	8028b44 <_write_r>

08028b16 <__sseek>:
 8028b16:	b510      	push	{r4, lr}
 8028b18:	460c      	mov	r4, r1
 8028b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028b1e:	f000 f855 	bl	8028bcc <_lseek_r>
 8028b22:	1c43      	adds	r3, r0, #1
 8028b24:	89a3      	ldrh	r3, [r4, #12]
 8028b26:	bf15      	itete	ne
 8028b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8028b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8028b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8028b32:	81a3      	strheq	r3, [r4, #12]
 8028b34:	bf18      	it	ne
 8028b36:	81a3      	strhne	r3, [r4, #12]
 8028b38:	bd10      	pop	{r4, pc}

08028b3a <__sclose>:
 8028b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028b3e:	f000 b813 	b.w	8028b68 <_close_r>
	...

08028b44 <_write_r>:
 8028b44:	b538      	push	{r3, r4, r5, lr}
 8028b46:	4d07      	ldr	r5, [pc, #28]	; (8028b64 <_write_r+0x20>)
 8028b48:	4604      	mov	r4, r0
 8028b4a:	4608      	mov	r0, r1
 8028b4c:	4611      	mov	r1, r2
 8028b4e:	2200      	movs	r2, #0
 8028b50:	602a      	str	r2, [r5, #0]
 8028b52:	461a      	mov	r2, r3
 8028b54:	f7de fb97 	bl	8007286 <_write>
 8028b58:	1c43      	adds	r3, r0, #1
 8028b5a:	d102      	bne.n	8028b62 <_write_r+0x1e>
 8028b5c:	682b      	ldr	r3, [r5, #0]
 8028b5e:	b103      	cbz	r3, 8028b62 <_write_r+0x1e>
 8028b60:	6023      	str	r3, [r4, #0]
 8028b62:	bd38      	pop	{r3, r4, r5, pc}
 8028b64:	240264e4 	.word	0x240264e4

08028b68 <_close_r>:
 8028b68:	b538      	push	{r3, r4, r5, lr}
 8028b6a:	4d06      	ldr	r5, [pc, #24]	; (8028b84 <_close_r+0x1c>)
 8028b6c:	2300      	movs	r3, #0
 8028b6e:	4604      	mov	r4, r0
 8028b70:	4608      	mov	r0, r1
 8028b72:	602b      	str	r3, [r5, #0]
 8028b74:	f7de fba3 	bl	80072be <_close>
 8028b78:	1c43      	adds	r3, r0, #1
 8028b7a:	d102      	bne.n	8028b82 <_close_r+0x1a>
 8028b7c:	682b      	ldr	r3, [r5, #0]
 8028b7e:	b103      	cbz	r3, 8028b82 <_close_r+0x1a>
 8028b80:	6023      	str	r3, [r4, #0]
 8028b82:	bd38      	pop	{r3, r4, r5, pc}
 8028b84:	240264e4 	.word	0x240264e4

08028b88 <_fstat_r>:
 8028b88:	b538      	push	{r3, r4, r5, lr}
 8028b8a:	4d07      	ldr	r5, [pc, #28]	; (8028ba8 <_fstat_r+0x20>)
 8028b8c:	2300      	movs	r3, #0
 8028b8e:	4604      	mov	r4, r0
 8028b90:	4608      	mov	r0, r1
 8028b92:	4611      	mov	r1, r2
 8028b94:	602b      	str	r3, [r5, #0]
 8028b96:	f7de fb9e 	bl	80072d6 <_fstat>
 8028b9a:	1c43      	adds	r3, r0, #1
 8028b9c:	d102      	bne.n	8028ba4 <_fstat_r+0x1c>
 8028b9e:	682b      	ldr	r3, [r5, #0]
 8028ba0:	b103      	cbz	r3, 8028ba4 <_fstat_r+0x1c>
 8028ba2:	6023      	str	r3, [r4, #0]
 8028ba4:	bd38      	pop	{r3, r4, r5, pc}
 8028ba6:	bf00      	nop
 8028ba8:	240264e4 	.word	0x240264e4

08028bac <_isatty_r>:
 8028bac:	b538      	push	{r3, r4, r5, lr}
 8028bae:	4d06      	ldr	r5, [pc, #24]	; (8028bc8 <_isatty_r+0x1c>)
 8028bb0:	2300      	movs	r3, #0
 8028bb2:	4604      	mov	r4, r0
 8028bb4:	4608      	mov	r0, r1
 8028bb6:	602b      	str	r3, [r5, #0]
 8028bb8:	f7de fb9d 	bl	80072f6 <_isatty>
 8028bbc:	1c43      	adds	r3, r0, #1
 8028bbe:	d102      	bne.n	8028bc6 <_isatty_r+0x1a>
 8028bc0:	682b      	ldr	r3, [r5, #0]
 8028bc2:	b103      	cbz	r3, 8028bc6 <_isatty_r+0x1a>
 8028bc4:	6023      	str	r3, [r4, #0]
 8028bc6:	bd38      	pop	{r3, r4, r5, pc}
 8028bc8:	240264e4 	.word	0x240264e4

08028bcc <_lseek_r>:
 8028bcc:	b538      	push	{r3, r4, r5, lr}
 8028bce:	4d07      	ldr	r5, [pc, #28]	; (8028bec <_lseek_r+0x20>)
 8028bd0:	4604      	mov	r4, r0
 8028bd2:	4608      	mov	r0, r1
 8028bd4:	4611      	mov	r1, r2
 8028bd6:	2200      	movs	r2, #0
 8028bd8:	602a      	str	r2, [r5, #0]
 8028bda:	461a      	mov	r2, r3
 8028bdc:	f7de fb96 	bl	800730c <_lseek>
 8028be0:	1c43      	adds	r3, r0, #1
 8028be2:	d102      	bne.n	8028bea <_lseek_r+0x1e>
 8028be4:	682b      	ldr	r3, [r5, #0]
 8028be6:	b103      	cbz	r3, 8028bea <_lseek_r+0x1e>
 8028be8:	6023      	str	r3, [r4, #0]
 8028bea:	bd38      	pop	{r3, r4, r5, pc}
 8028bec:	240264e4 	.word	0x240264e4

08028bf0 <_read_r>:
 8028bf0:	b538      	push	{r3, r4, r5, lr}
 8028bf2:	4d07      	ldr	r5, [pc, #28]	; (8028c10 <_read_r+0x20>)
 8028bf4:	4604      	mov	r4, r0
 8028bf6:	4608      	mov	r0, r1
 8028bf8:	4611      	mov	r1, r2
 8028bfa:	2200      	movs	r2, #0
 8028bfc:	602a      	str	r2, [r5, #0]
 8028bfe:	461a      	mov	r2, r3
 8028c00:	f7de fb24 	bl	800724c <_read>
 8028c04:	1c43      	adds	r3, r0, #1
 8028c06:	d102      	bne.n	8028c0e <_read_r+0x1e>
 8028c08:	682b      	ldr	r3, [r5, #0]
 8028c0a:	b103      	cbz	r3, 8028c0e <_read_r+0x1e>
 8028c0c:	6023      	str	r3, [r4, #0]
 8028c0e:	bd38      	pop	{r3, r4, r5, pc}
 8028c10:	240264e4 	.word	0x240264e4

08028c14 <_init>:
 8028c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028c16:	bf00      	nop
 8028c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028c1a:	bc08      	pop	{r3}
 8028c1c:	469e      	mov	lr, r3
 8028c1e:	4770      	bx	lr

08028c20 <_fini>:
 8028c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028c22:	bf00      	nop
 8028c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028c26:	bc08      	pop	{r3}
 8028c28:	469e      	mov	lr, r3
 8028c2a:	4770      	bx	lr
