
STM32H7B3I-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002bb38  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004498  0802bde8  0802bde8  0003bde8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  08030280  08030280  00040280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08030298  08030298  00305e98  2**0
                  CONTENTS
  5 .ARM          00000000  08030298  08030298  00305e98  2**0
                  CONTENTS
  6 .preinit_array 00000000  08030298  08030298  00305e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  08030298  08030298  00040298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000000c  080302b4  080302b4  000402b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000128  24000000  080302c0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00005a00  24000128  080303e8  00050128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000226d0  24005b28  08035de8  00055b28  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  240281f8  08035de8  000581f8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00305e98  2**0
                  CONTENTS, READONLY
 14 FramebufferSection 000bf400  24040000  24040000  00060000  2**2
                  ALLOC
 15 FontFlashSection 000001a8  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000010  900001a8  900001a8  000601a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 002a5ce0  900001b8  900001b8  000601b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 Video_RGB_Buffer 0005fa00  d0000000  d0000000  00310000  2**2
                  ALLOC
 19 .debug_line   00053989  00000000  00000000  00305ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_info   000bb04e  00000000  00000000  0035984f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00012311  00000000  00000000  0041489d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 00004480  00000000  00000000  00426bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017f356  00000000  00000000  0042b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00003f60  00000000  00000000  005aa388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00043138  00000000  00000000  005ae2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000cf  00000000  00000000  005f1420  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00012d38  00000000  00000000  005f14f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24005b28 	.word	0x24005b28
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0802bdd0 	.word	0x0802bdd0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24005b2c 	.word	0x24005b2c
 80002ec:	0802bdd0 	.word	0x0802bdd0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000740 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800070c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800070e:	e003      	b.n	8000718 <LoopCopyDataInit>

08000710 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000712:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000714:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000716:	3104      	adds	r1, #4

08000718 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800071c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800071e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000720:	d3f6      	bcc.n	8000710 <CopyDataInit>
  ldr  r2, =_sbss
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000724:	e002      	b.n	800072c <LoopFillZerobss>

08000726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000726:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000728:	f842 3b04 	str.w	r3, [r2], #4

0800072c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800072e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000730:	d3f9      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000732:	f00c f985 	bl	800ca40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000736:	f02a fad1 	bl	802acdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073a:	f005 ffd7 	bl	80066ec <main>
  bx  lr
 800073e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000740:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 8000744:	080302c0 	.word	0x080302c0
  ldr  r0, =_sdata
 8000748:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800074c:	24000128 	.word	0x24000128
  ldr  r2, =_sbss
 8000750:	24005b28 	.word	0x24005b28
  ldr  r3, = _ebss
 8000754:	240281f8 	.word	0x240281f8

08000758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC_IRQHandler>

0800075a <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800077a:	f003 fa49 	bl	8003c10 <touchgfx_components_init>
  touchgfx_init();
 800077e:	f003 fa1d 	bl	8003bbc <touchgfx_init>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}

08000786 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800078e:	f003 fa47 	bl	8003c20 <touchgfx_taskEntry>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <_ZN8touchgfx18MCUInstrumentationD1Ev>:

    /** Initialize. */
    virtual void init() = 0;

    /** Finalizes an instance of the MCUInstrumentation class. */
    virtual ~MCUInstrumentation()
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    {
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
    }
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	0802e040 	.word	0x0802e040

080007bc <_ZN8touchgfx18MCUInstrumentationD0Ev>:
    virtual ~MCUInstrumentation()
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    }
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ffe9 	bl	800079c <_ZN8touchgfx18MCUInstrumentationD1Ev>
 80007ca:	210c      	movs	r1, #12
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f02a f860 	bl	802a892 <_ZdlPvj>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
    /**
     * Sets MCU activity high.
     *
     * @param  active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
    {
        if (active) // Idle task sched out
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d011      	beq.n	8000812 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3310      	adds	r3, #16
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	4798      	blx	r3
 80007fa:	4602      	mov	r2, r0
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685a      	ldr	r2, [r3, #4]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	441a      	add	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	605a      	str	r2, [r3, #4]
        }
        else // Idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8000810:	e008      	b.n	8000824 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3310      	adds	r3, #16
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	4798      	blx	r3
 800081e:	4602      	mov	r2, r0
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	609a      	str	r2, [r3, #8]
    }
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
    /**
     * Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
    }
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
    /**
     * Sets number of consumed clock cycles.
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	605a      	str	r2, [r3, #4]
    }
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void CortexMMCUInstrumentation::init()
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 800086e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000872:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4908      	ldr	r1, [pc, #32]	; (800089c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x40>)
 800087c:	4313      	orrs	r3, r2
 800087e:	600b      	str	r3, [r1, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000edfc 	.word	0xe000edfc
 800089c:	e0001fb0 	.word	0xe0001fb0
 80008a0:	c5acce55 	.word	0xc5acce55
 80008a4:	e0001000 	.word	0xe0001000

080008a8 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1ad2      	subs	r2, r2, r3
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	085b      	lsrs	r3, r3, #1
 80008c0:	441a      	add	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
    return *((volatile unsigned int*)0xE0001004);
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x18>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e0001004 	.word	0xe0001004

080008f0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d011      	beq.n	8000926 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x36>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3310      	adds	r3, #16
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	4798      	blx	r3
 800090e:	4602      	mov	r2, r0
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	60fb      	str	r3, [r7, #12]
        cc_consumed += cc_temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	441a      	add	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8000924:	e008      	b.n	8000938 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x48>
        cc_in = getCPUCycles();
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3310      	adds	r3, #16
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	4798      	blx	r3
 8000932:	4602      	mov	r2, r0
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	609a      	str	r2, [r3, #8]
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	4a05      	ldr	r2, [pc, #20]	; (8000960 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev+0x20>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff23 	bl	800079c <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	0802e018 	.word	0x0802e018

08000964 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ffe7 	bl	8000940 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 8000972:	210c      	movs	r1, #12
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f029 ff8c 	bl	802a892 <_ZdlPvj>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
    {
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
    }
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	0802e080 	.word	0x0802e080

080009a4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    }
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffe9 	bl	8000984 <_ZN8touchgfx15TouchControllerD1Ev>
 80009b2:	2104      	movs	r1, #4
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f029 ff6c 	bl	802a892 <_ZdlPvj>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 80009cc:	2308      	movs	r3, #8
 80009ce:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <_ZN20STM32TouchController4initEv+0x30>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_ZN20STM32TouchController4initEv+0x34>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	4619      	mov	r1, r3
 80009e6:	2000      	movs	r0, #0
 80009e8:	f00b fe0c 	bl	800c604 <BSP_TS_Init>
}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	24027f66 	.word	0x24027f66
 80009f8:	24027f68 	.word	0x24027f68

080009fc <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f00b fe98 	bl	800c750 <BSP_TS_GetState>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	bf14      	ite	ne
 8000a26:	2301      	movne	r3, #1
 8000a28:	2300      	moveq	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00a      	beq.n	8000a46 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a34:	f383 8811 	msr	BASEPRI, r3
 8000a38:	f3bf 8f6f 	isb	sy
 8000a3c:	f3bf 8f4f 	dsb	sy
 8000a40:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a42:	bf00      	nop
    {
        configASSERT(0);
 8000a44:	e7fe      	b.n	8000a44 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d009      	beq.n	8000a60 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	461a      	mov	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	601a      	str	r2, [r3, #0]

        return true;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff81 	bl	8000984 <_ZN8touchgfx15TouchControllerD1Ev>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	0802e068 	.word	0x0802e068

08000a90 <_ZN20STM32TouchControllerD0Ev>:
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ffe7 	bl	8000a6c <_ZN20STM32TouchControllerD1Ev>
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f029 fef6 	bl	802a892 <_ZdlPvj>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
    for (int id = 0; id <= 4; id++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	dc16      	bgt.n	8000aee <_ZN8touchgfx4GPIO4initEv+0x3e>
    {
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f909 	bl	8000cdc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00a      	beq.n	8000ae6 <_ZN8touchgfx4GPIO4initEv+0x36>
        {
            if (GPIO_InvertedLevels[id] != 1)
 8000ad0:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <_ZN8touchgfx4GPIO4initEv+0x48>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d004      	beq.n	8000ae6 <_ZN8touchgfx4GPIO4initEv+0x36>
            {
                GPIO_InvertedLevels[id] = 1;
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <_ZN8touchgfx4GPIO4initEv+0x48>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int id = 0; id <= 4; id++)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	e7e5      	b.n	8000aba <_ZN8touchgfx4GPIO4initEv+0xa>
            }
        }
    }
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	24005b44 	.word	0x24005b44

08000afc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d84b      	bhi.n	8000ba4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
 8000b0c:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b25 	.word	0x08000b25
 8000b18:	08000b45 	.word	0x08000b45
 8000b1c:	08000b65 	.word	0x08000b65
 8000b20:	08000b85 	.word	0x08000b85
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4a21      	ldr	r2, [pc, #132]	; (8000bac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf0c      	ite	eq
 8000b30:	2301      	moveq	r3, #1
 8000b32:	2300      	movne	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3c:	481c      	ldr	r0, [pc, #112]	; (8000bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8000b3e:	f00c ffd5 	bl	800daec <HAL_GPIO_WritePin>
#endif
        break;
 8000b42:	e02f      	b.n	8000ba4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4a19      	ldr	r2, [pc, #100]	; (8000bac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	bf0c      	ite	eq
 8000b50:	2301      	moveq	r3, #1
 8000b52:	2300      	movne	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5c:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8000b5e:	f00c ffc5 	bl	800daec <HAL_GPIO_WritePin>
#endif
        break;
 8000b62:	e01f      	b.n	8000ba4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8000b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf0c      	ite	eq
 8000b70:	2301      	moveq	r3, #1
 8000b72:	2300      	movne	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb8>)
 8000b7e:	f00c ffb5 	bl	800daec <HAL_GPIO_WritePin>
#endif
        break;
 8000b82:	e00f      	b.n	8000ba4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf0c      	ite	eq
 8000b90:	2301      	moveq	r3, #1
 8000b92:	2300      	movne	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	461a      	mov	r2, r3
 8000b98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8000b9e:	f00c ffa5 	bl	800daec <HAL_GPIO_WritePin>
#endif
        break;
 8000ba2:	bf00      	nop
    }
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	24005b44 	.word	0x24005b44
 8000bb0:	58021c00 	.word	0x58021c00
 8000bb4:	58022000 	.word	0x58022000

08000bb8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d84b      	bhi.n	8000c60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
 8000bc8:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8000bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bce:	bf00      	nop
 8000bd0:	08000be1 	.word	0x08000be1
 8000bd4:	08000c01 	.word	0x08000c01
 8000bd8:	08000c21 	.word	0x08000c21
 8000bdc:	08000c41 	.word	0x08000c41
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8000bfa:	f00c ff77 	bl	800daec <HAL_GPIO_WritePin>
#endif
        break;
 8000bfe:	e02f      	b.n	8000c60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5a>
 8000c10:	2300      	movs	r3, #0
 8000c12:	461a      	mov	r2, r3
 8000c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c18:	4814      	ldr	r0, [pc, #80]	; (8000c6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8000c1a:	f00c ff67 	bl	800daec <HAL_GPIO_WritePin>
#endif
        break;
 8000c1e:	e01f      	b.n	8000c60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 8000c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e000      	b.n	8000c32 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7a>
 8000c30:	2300      	movs	r3, #0
 8000c32:	461a      	mov	r2, r3
 8000c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb8>)
 8000c3a:	f00c ff57 	bl	800daec <HAL_GPIO_WritePin>
#endif
        break;
 8000c3e:	e00f      	b.n	8000c60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 8000c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x98>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x9a>
 8000c50:	2300      	movs	r3, #0
 8000c52:	461a      	mov	r2, r3
 8000c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8000c5a:	f00c ff47 	bl	800daec <HAL_GPIO_WritePin>
#endif
        break;
 8000c5e:	bf00      	nop
    }
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	24005b44 	.word	0x24005b44
 8000c6c:	58021c00 	.word	0x58021c00
 8000c70:	58022000 	.word	0x58022000

08000c74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d823      	bhi.n	8000ccc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000ca9 	.word	0x08000ca9
 8000c94:	08000cb5 	.word	0x08000cb5
 8000c98:	08000cc1 	.word	0x08000cc1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000c9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8000ca2:	f00c ff3c 	bl	800db1e <HAL_GPIO_TogglePin>
#endif
        break;
 8000ca6:	e011      	b.n	8000ccc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8000cae:	f00c ff36 	bl	800db1e <HAL_GPIO_TogglePin>
#endif
        break;
 8000cb2:	e00b      	b.n	8000ccc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8000cba:	f00c ff30 	bl	800db1e <HAL_GPIO_TogglePin>
#endif
        break;
 8000cbe:	e005      	b.n	8000ccc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8000cc6:	f00c ff2a 	bl	800db1e <HAL_GPIO_TogglePin>
#endif
        break;
 8000cca:	bf00      	nop
    }
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	58021c00 	.word	0x58021c00
 8000cd8:	58022000 	.word	0x58022000

08000cdc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
    switch (id)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d82b      	bhi.n	8000d48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
 8000cf0:	a201      	add	r2, pc, #4	; (adr r2, 8000cf8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>)
 8000cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf6:	bf00      	nop
 8000cf8:	08000d09 	.word	0x08000d09
 8000cfc:	08000d19 	.word	0x08000d19
 8000d00:	08000d29 	.word	0x08000d29
 8000d04:	08000d39 	.word	0x08000d39
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000d08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0c:	4813      	ldr	r0, [pc, #76]	; (8000d5c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 8000d0e:	f00c fed5 	bl	800dabc <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 8000d16:	e017      	b.n	8000d48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1c:	480f      	ldr	r0, [pc, #60]	; (8000d5c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 8000d1e:	f00c fecd 	bl	800dabc <HAL_GPIO_ReadPin>
 8000d22:	4603      	mov	r3, r0
 8000d24:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 8000d26:	e00f      	b.n	8000d48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x84>)
 8000d2e:	f00c fec5 	bl	800dabc <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 8000d36:	e007      	b.n	8000d48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x6c>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x80>)
 8000d3e:	f00c febd 	bl	800dabc <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 8000d46:	bf00      	nop
    }
    return (bitstatus == GPIO_PIN_SET);
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	bf0c      	ite	eq
 8000d4e:	2301      	moveq	r3, #1
 8000d50:	2300      	movne	r3, #0
 8000d52:	b2db      	uxtb	r3, r3
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	58021c00 	.word	0x58021c00
 8000d60:	58022000 	.word	0x58022000

08000d64 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    {
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
    }
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	0802f4bc 	.word	0x0802f4bc

08000d84 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    }
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffe9 	bl	8000d64 <_ZN8touchgfx3HALD1Ev>
 8000d92:	217c      	movs	r1, #124	; 0x7c
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f029 fd7c 	bl	802a892 <_ZdlPvj>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
    {
        return instance;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
    }
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	24027f6c 	.word	0x24027f6c

08000dbc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	78fa      	ldrb	r2, [r7, #3]
 8000dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
 8000df0:	4613      	mov	r3, r2
 8000df2:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	887a      	ldrh	r2, [r7, #2]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d304      	bcc.n	8000e08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	883a      	ldrh	r2, [r7, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d205      	bcs.n	8000e14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8000e0c:	219e      	movs	r1, #158	; 0x9e
 8000e0e:	480a      	ldr	r0, [pc, #40]	; (8000e38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8000e10:	f029 ff1a 	bl	802ac48 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000e14:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8000e1c:	883b      	ldrh	r3, [r7, #0]
 8000e1e:	8013      	strh	r3, [r2, #0]
    }
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	24027f60 	.word	0x24027f60
 8000e2c:	24027f62 	.word	0x24027f62
 8000e30:	0802bde8 	.word	0x0802bde8
 8000e34:	0802be4c 	.word	0x0802be4c
 8000e38:	0802be90 	.word	0x0802be90
 8000e3c:	24027f66 	.word	0x24027f66
 8000e40:	24027f68 	.word	0x24027f68

08000e44 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d009      	beq.n	8000e6a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4610      	mov	r0, r2
 8000e64:	4798      	blx	r3
 8000e66:	4603      	mov	r3, r0
 8000e68:	e000      	b.n	8000e6c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8000e6a:	2300      	movs	r3, #0
    }
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f01a f899 	bl	801afb4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	33ac      	adds	r3, #172	; 0xac
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	4798      	blx	r3
    }
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8000ea0:	2300      	movs	r3, #0
    }
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d106      	bne.n	8000ed2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8000ec8:	f240 21d2 	movw	r1, #722	; 0x2d2
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8000ece:	f029 febb 	bl	802ac48 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf14      	ite	ne
 8000ee4:	2301      	movne	r3, #1
 8000ee6:	2300      	moveq	r3, #0
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8000eec:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	338c      	adds	r3, #140	; 0x8c
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	4798      	blx	r3
    }
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	0802bed8 	.word	0x0802bed8
 8000f08:	0802bf10 	.word	0x0802bf10
 8000f0c:	0802be90 	.word	0x0802be90
 8000f10:	24027f6a 	.word	0x24027f6a

08000f14 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bf14      	ite	ne
 8000f2a:	2301      	movne	r3, #1
 8000f2c:	2300      	moveq	r3, #0
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8000f32:	701a      	strb	r2, [r3, #0]
    }
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24027f6b 	.word	0x24027f6b

08000f44 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
    /**
     * Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	611a      	str	r2, [r3, #16]
    }
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     * This method sets a flag that determines if generic HAL should calculate MCU load
     * based on concrete MCU instrumentation.
     *
     * @param  enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	78fa      	ldrb	r2, [r7, #3]
 8000f70:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8000f88:	2300      	movs	r3, #0
    }
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d004      	beq.n	8000fb4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4798      	blx	r3
        }
    }
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8000fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3318      	adds	r3, #24
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4610      	mov	r0, r2
 8000fec:	4798      	blx	r3
 8000fee:	4603      	mov	r3, r0
    }
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800100c:	429a      	cmp	r2, r3
 800100e:	d011      	beq.n	8001034 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d11e      	bne.n	8001056 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001020:	881a      	ldrh	r2, [r3, #0]
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001024:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001026:	4a11      	ldr	r2, [pc, #68]	; (800106c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001028:	89bb      	ldrh	r3, [r7, #12]
 800102a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001032:	e010      	b.n	8001056 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00c      	beq.n	8001056 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001048:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
    }
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	24027f64 	.word	0x24027f64
 8001068:	24027f62 	.word	0x24027f62
 800106c:	24027f60 	.word	0x24027f60

08001070 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4618      	mov	r0, r3
 800107c:	f019 f9fe 	bl	801a47c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fe63 	bl	8000d64 <_ZN8touchgfx3HALD1Ev>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	0802e5c4 	.word	0x0802e5c4

080010ac <_ZN20TouchGFXGeneratedHALD0Ev>:
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ffe7 	bl	8001088 <_ZN20TouchGFXGeneratedHALD1Ev>
 80010ba:	217c      	movs	r1, #124	; 0x7c
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f029 fbe8 	bl	802a892 <_ZdlPvj>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffca 	bl	8001070 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fc5e 	bl	80049b0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    instrumentation.init();
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	337c      	adds	r3, #124	; 0x7c
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fbb1 	bl	8000860 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
    setMCUInstrumentation(&instrumentation);
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	337c      	adds	r3, #124	; 0x7c
 8001104:	4619      	mov	r1, r3
 8001106:	4610      	mov	r0, r2
 8001108:	f7ff ff1c 	bl	8000f44 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    enableMCULoadCalculation(true);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2101      	movs	r1, #1
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff25 	bl	8000f60 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3380      	adds	r3, #128	; 0x80
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	4798      	blx	r3
    enableInterrupts();
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3378      	adds	r3, #120	; 0x78
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001140:	f001 fadc 	bl	80026fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3370      	adds	r3, #112	; 0x70
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4610      	mov	r0, r2
 8001150:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8001158:	f00c fcc8 	bl	800daec <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2104      	movs	r1, #4
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8001162:	f00c fcc3 	bl	800daec <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2102      	movs	r1, #2
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 800116c:	f00c fcbe 	bl	800daec <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001170:	f001 fac4 	bl	80026fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3370      	adds	r3, #112	; 0x70
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4610      	mov	r0, r2
 8001180:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8001182:	e7f5      	b.n	8001170 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8001184:	58022800 	.word	0x58022800
 8001188:	58020000 	.word	0x58020000

0800118c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fcca 	bl	8004b30 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 fcc9 	bl	8004b4c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6839      	ldr	r1, [r7, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 fcd0 	bl	8004b78 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80011d8:	4b20      	ldr	r3, [pc, #128]	; (800125c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011e0:	f3bf 8f4f 	dsb	sy
}
 80011e4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 80011e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ec:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	0b5b      	lsrs	r3, r3, #13
 80011f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011f6:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001200:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	015a      	lsls	r2, r3, #5
 8001206:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800120a:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001210:	4912      	ldr	r1, [pc, #72]	; (800125c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8001212:	4313      	orrs	r3, r2
 8001214:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1e5a      	subs	r2, r3, #1
 800121c:	60fa      	str	r2, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d000      	beq.n	800122e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 800122c:	e7e9      	b.n	8001202 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	613a      	str	r2, [r7, #16]
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf14      	ite	ne
 8001238:	2301      	movne	r3, #1
 800123a:	2300      	moveq	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d000      	beq.n	8001244 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8001242:	e7d9      	b.n	80011f8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001244:	f3bf 8f4f 	dsb	sy
}
 8001248:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800124a:	f3bf 8f6f 	isb	sy
}
 800124e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001250:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fbdc 	bl	8004a28 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fbe0 	bl	8004a48 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fbe2 	bl	8004a64 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fbe4 	bl	8004a80 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <IdleTaskHook>:

/* USER CODE BEGIN extern C functions */
extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
        if ((int)p) //idle task sched out
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <IdleTaskHook+0x1e>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80012ce:	f7ff fd69 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2101      	movs	r1, #1
 80012d6:	4618      	mov	r0, r3
 80012d8:	f019 fe86 	bl	801afe8 <_ZN8touchgfx3HAL12setMCUActiveEb>
 80012dc:	e006      	b.n	80012ec <IdleTaskHook+0x2c>
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80012de:	f7ff fd61 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f019 fe7e 	bl	801afe8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
 80012ec:	2301      	movs	r3, #1
    }
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	4a08      	ldr	r2, [pc, #32]	; (8001324 <_ZN11TouchGFXHALD1Ev+0x2c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	337c      	adds	r3, #124	; 0x7c
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fb18 	bl	8000940 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff feb8 	bl	8001088 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0802e098 	.word	0x0802e098

08001328 <_ZN11TouchGFXHALD0Ev>:
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffe1 	bl	80012f8 <_ZN11TouchGFXHALD1Ev>
 8001336:	2188      	movs	r1, #136	; 0x88
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f029 faaa 	bl	802a892 <_ZdlPvj>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    {
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <_ZN12MJPEGDecoderD1Ev+0x1c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	601a      	str	r2, [r3, #0]
    }
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	0802e1b4 	.word	0x0802e1b4

08001368 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    }
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ffe9 	bl	8001348 <_ZN12MJPEGDecoderD1Ev>
 8001376:	2104      	movs	r1, #4
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f029 fa8a 	bl	802a892 <_ZdlPvj>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    {
        return frameNumber;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
    }
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    void setAVIFileBuffer(uint8_t* buffer, uint32_t size)
    {
        aviBuffer = buffer, aviBufferLength = size;
    }

    virtual AVIErrors getLastError()
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    {
        return lastError;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    }
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	0802e1b4 	.word	0x0802e1b4

080013dc <_ZN20HardwareMJPEGDecoderC1Ev>:
    uint32_t LastLineHeight;
    uint32_t MCU_pr_line;
    uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffe8 	bl	80013bc <_ZN12MJPEGDecoderC1Ev>
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	; 0x28
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	639a      	str	r2, [r3, #56]	; 0x38
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 8001454:	f004 ffa6 	bl	80063a4 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	2001      	movs	r0, #1
 800145e:	f014 fa94 	bl	801598a <osSemaphoreNew>
 8001462:	4603      	mov	r3, r0
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	0802e170 	.word	0x0802e170
 8001478:	24005b8c 	.word	0x24005b8c

0800147c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	2b00      	cmp	r3, #0
 8001490:	d008      	beq.n	80014a4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	1acb      	subs	r3, r1, r3
 800149e:	4413      	add	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e004      	b.n	80014ae <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4413      	add	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f02a f882 	bl	802b5bc <strncmp>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d024      	beq.n	800151e <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	4413      	add	r3, r2
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	ea41 0203 	orr.w	r2, r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	3302      	adds	r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	3303      	adds	r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	4313      	orrs	r3, r2
 800151c:	e016      	b.n	800154c <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	4413      	add	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3301      	adds	r3, #1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	431a      	orrs	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3302      	adds	r3, #2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3303      	adds	r3, #3
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	061b      	lsls	r3, r3, #24
 800154a:	4313      	orrs	r3, r2
    }
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	2b00      	cmp	r3, #0
 8001568:	d013      	beq.n	8001592 <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4413      	add	r3, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3301      	adds	r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	430b      	orrs	r3, r1
 8001590:	e00c      	b.n	80015ac <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	4413      	add	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3301      	adds	r3, #1
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	4313      	orrs	r3, r2
    }
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d033      	beq.n	8001634 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d909      	bls.n	80015ea <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2209      	movs	r2, #9
 80015da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 80015e2:	21a7      	movs	r1, #167	; 0xa7
 80015e4:	4819      	ldr	r0, [pc, #100]	; (800164c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 80015e6:	f029 fb2f 	bl	802ac48 <__assert_func>
        }

        reader->seek(offset);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	330c      	adds	r3, #12
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	4610      	mov	r0, r2
 80015fc:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3310      	adds	r3, #16
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4798      	blx	r3
 8001614:	4603      	mov	r3, r0
 8001616:	f083 0301 	eor.w	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	220d      	movs	r2, #13
 8001624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	e003      	b.n	800163c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4413      	add	r3, r2
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	0802bf60 	.word	0x0802bf60
 8001648:	0802bf74 	.word	0x0802bf74
 800164c:	0802bfb8 	.word	0x0802bfb8

08001650 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	; 0x38
 8001654:	af04      	add	r7, sp, #16
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	4611      	mov	r1, r2
 800165c:	461a      	mov	r2, r3
 800165e:	460b      	mov	r3, r1
 8001660:	80fb      	strh	r3, [r7, #6]
 8001662:	4613      	mov	r3, r2
 8001664:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d105      	bne.n	800167a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 800166e:	4b4e      	ldr	r3, [pc, #312]	; (80017a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 8001670:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 8001672:	21b9      	movs	r1, #185	; 0xb9
 8001674:	484e      	ldr	r0, [pc, #312]	; (80017b0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 8001676:	f029 fae7 	bl	802ac48 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2208      	movs	r2, #8
 8001680:	4619      	mov	r1, r3
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff ff98 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4619      	mov	r1, r3
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f7ff ff62 	bl	8001558 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8001694:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	3302      	adds	r3, #2
 800169c:	4619      	mov	r1, r3
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f7ff ff5a 	bl	8001558 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80016a4:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	3304      	adds	r3, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff ff07 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80016b4:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 80016b6:	f243 0330 	movw	r3, #12336	; 0x3030
 80016ba:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 80016bc:	f246 3364 	movw	r3, #25444	; 0x6364
 80016c0:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4413      	add	r3, r2
 80016ca:	f103 0208 	add.w	r2, r3, #8
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d255      	bcs.n	8001782 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	f243 0230 	movw	r2, #12336	; 0x3030
 80016dc:	4293      	cmp	r3, r2
 80016de:	d126      	bne.n	800172e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f246 3264 	movw	r2, #25444	; 0x6364
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d121      	bne.n	800172e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01e      	beq.n	800172e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f103 0208 	add.w	r2, r3, #8
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4619      	mov	r1, r3
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff ff57 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 800170a:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fa8e 	bl	8001c40 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	441a      	add	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d105      	bne.n	8001752 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
            currentMovieOffset += 8;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f103 0208 	add.w	r2, r3, #8
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	3301      	adds	r3, #1
 8001758:	f023 0201 	bic.w	r2, r3, #1
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	429a      	cmp	r2, r3
 800176a:	d114      	bne.n	8001796 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a1a      	ldr	r2, [r3, #32]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001780:	e009      	b.n	8001796 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a1a      	ldr	r2, [r3, #32]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8001790:	2301      	movs	r3, #1
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 8001796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800179a:	f083 0301 	eor.w	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	0802c02c 	.word	0x0802c02c
 80017ac:	0802c078 	.word	0x0802c078
 80017b0:	0802bfb8 	.word	0x0802bfb8

080017b4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 80017c4:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 80017c6:	4a38      	ldr	r2, [pc, #224]	; (80018a8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 80017c8:	21ed      	movs	r1, #237	; 0xed
 80017ca:	4838      	ldr	r0, [pc, #224]	; (80018ac <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 80017cc:	f029 fa3c 	bl	802ac48 <__assert_func>

    readData(currentMovieOffset, 8);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2208      	movs	r2, #8
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff feed 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	3304      	adds	r3, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fe6b 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80017ec:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	4413      	add	r3, r2
 80017f6:	f103 0208 	add.w	r2, r3, #8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	429a      	cmp	r2, r3
 8001800:	d243      	bcs.n	800188a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	4413      	add	r3, r2
 800180a:	f103 0208 	add.w	r2, r3, #8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	3301      	adds	r3, #1
 8001818:	f023 0201 	bic.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	619a      	str	r2, [r3, #24]
        frameNumber++;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2208      	movs	r2, #8
 8001830:	4619      	mov	r1, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fec0 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fe8a 	bl	8001558 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8001844:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	3302      	adds	r3, #2
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fe82 	bl	8001558 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8001854:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	3304      	adds	r3, #4
 800185c:	4619      	mov	r1, r3
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fe2f 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001864:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 8001866:	f243 0330 	movw	r3, #12336	; 0x3030
 800186a:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 800186c:	f246 3364 	movw	r3, #25444	; 0x6364
 8001870:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f243 0230 	movw	r2, #12336	; 0x3030
 8001878:	4293      	cmp	r3, r2
 800187a:	d1b8      	bne.n	80017ee <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f246 3264 	movw	r2, #25444	; 0x6364
 8001882:	4293      	cmp	r3, r2
 8001884:	d1b3      	bne.n	80017ee <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 8001886:	2301      	movs	r3, #1
 8001888:	e007      	b.n	800189a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1a      	ldr	r2, [r3, #32]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	619a      	str	r2, [r3, #24]
    return false;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	0802c02c 	.word	0x0802c02c
 80018a8:	0802c0d4 	.word	0x0802c0d4
 80018ac:	0802bfb8 	.word	0x0802bfb8

080018b0 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
    movieData = movie;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f834 	bl	800193c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3308      	adds	r3, #8
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6838      	ldr	r0, [r7, #0]
 80018fc:	4798      	blx	r3
 80018fe:	4602      	mov	r2, r0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f819 	bl	800193c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 8001952:	2248      	movs	r2, #72	; 0x48
 8001954:	2100      	movs	r1, #0
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fe2e 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6999      	ldr	r1, [r3, #24]
 8001960:	2304      	movs	r3, #4
 8001962:	4aa5      	ldr	r2, [pc, #660]	; (8001bf8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fd89 	bl	800147c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00a      	beq.n	8001990 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 8001982:	4b9e      	ldr	r3, [pc, #632]	; (8001bfc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 8001984:	4a9e      	ldr	r2, [pc, #632]	; (8001c00 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8001986:	f240 1135 	movw	r1, #309	; 0x135
 800198a:	489e      	ldr	r0, [pc, #632]	; (8001c04 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 800198c:	f029 f95c 	bl	802ac48 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f103 0208 	add.w	r2, r3, #8
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6999      	ldr	r1, [r3, #24]
 80019a0:	2304      	movs	r3, #4
 80019a2:	4a99      	ldr	r2, [pc, #612]	; (8001c08 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fd69 	bl	800147c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2204      	movs	r2, #4
 80019be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 80019c2:	4b92      	ldr	r3, [pc, #584]	; (8001c0c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 80019c4:	4a8e      	ldr	r2, [pc, #568]	; (8001c00 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80019c6:	f240 113d 	movw	r1, #317	; 0x13d
 80019ca:	488e      	ldr	r0, [pc, #568]	; (8001c04 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80019cc:	f029 f93c 	bl	802ac48 <__assert_func>
    }

    currentMovieOffset += 4;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	1d1a      	adds	r2, r3, #4
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6999      	ldr	r1, [r3, #24]
 80019de:	2304      	movs	r3, #4
 80019e0:	4a8b      	ldr	r2, [pc, #556]	; (8001c10 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fd4a 	bl	800147c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00a      	beq.n	8001a0e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2205      	movs	r2, #5
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 8001a00:	4b84      	ldr	r3, [pc, #528]	; (8001c14 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 8001a02:	4a7f      	ldr	r2, [pc, #508]	; (8001c00 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8001a04:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001a08:	487e      	ldr	r0, [pc, #504]	; (8001c04 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001a0a:	f029 f91d 	bl	802ac48 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	3304      	adds	r3, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fd53 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001a1c:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 8001a2a:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 8001a2c:	4a74      	ldr	r2, [pc, #464]	; (8001c00 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8001a2e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001a32:	4874      	ldr	r0, [pc, #464]	; (8001c04 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8001a34:	f029 f908 	bl	802ac48 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	3308      	adds	r3, #8
 8001a44:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 8001a46:	2304      	movs	r3, #4
 8001a48:	4a74      	ldr	r2, [pc, #464]	; (8001c1c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 8001a4a:	6979      	ldr	r1, [r7, #20]
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fd15 	bl	800147c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2206      	movs	r2, #6
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3304      	adds	r3, #4
 8001a74:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 8001a76:	2304      	movs	r3, #4
 8001a78:	4a69      	ldr	r2, [pc, #420]	; (8001c20 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8001a7a:	6979      	ldr	r1, [r7, #20]
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fcfd 	bl	800147c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf14      	ite	ne
 8001a88:	2301      	movne	r3, #1
 8001a8a:	2300      	moveq	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2207      	movs	r2, #7
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8001aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d028      	beq.n	8001afa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8001aae:	6979      	ldr	r1, [r7, #20]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fd06 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	099a      	lsrs	r2, r3, #6
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3310      	adds	r3, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fcf9 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3320      	adds	r3, #32
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fcf0 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3324      	adds	r3, #36	; 0x24
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fce7 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001af4:	4602      	mov	r2, r0
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4413      	add	r3, r2
 8001b00:	3308      	adds	r3, #8
 8001b02:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 8001b04:	220c      	movs	r2, #12
 8001b06:	6a39      	ldr	r1, [r7, #32]
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff fd55 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	f103 0108 	add.w	r1, r3, #8
 8001b14:	2304      	movs	r3, #4
 8001b16:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fcaf 	bl	800147c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00b      	beq.n	8001b3c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	6a3a      	ldr	r2, [r7, #32]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d201      	bcs.n	8001b3c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d012      	beq.n	8001b68 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	3304      	adds	r3, #4
 8001b46:	4619      	mov	r1, r3
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fcba 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	3308      	adds	r3, #8
 8001b52:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 8001b54:	6a3a      	ldr	r2, [r7, #32]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 8001b5c:	220c      	movs	r2, #12
 8001b5e:	6a39      	ldr	r1, [r7, #32]
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fd29 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001b66:	e7d2      	b.n	8001b0e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	220a      	movs	r2, #10
 8001b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8001b7a:	e05e      	b.n	8001c3a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f103 020c 	add.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fc98 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001b92:	4602      	mov	r2, r0
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	4413      	add	r3, r2
 8001b98:	f103 0208 	add.w	r2, r3, #8
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fc8b 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001bac:	4603      	mov	r3, r0
 8001bae:	3308      	adds	r3, #8
 8001bb0:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 8001bb2:	6a3a      	ldr	r2, [r7, #32]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8001bba:	2204      	movs	r2, #4
 8001bbc:	6a39      	ldr	r1, [r7, #32]
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fcfa 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fc56 	bl	800147c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d027      	beq.n	8001c30 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a3a      	ldr	r2, [r7, #32]
 8001be4:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	621a      	str	r2, [r3, #32]
 8001bf4:	e021      	b.n	8001c3a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 8001bf6:	bf00      	nop
 8001bf8:	0802c108 	.word	0x0802c108
 8001bfc:	0802c110 	.word	0x0802c110
 8001c00:	0802c12c 	.word	0x0802c12c
 8001c04:	0802bfb8 	.word	0x0802bfb8
 8001c08:	0802c15c 	.word	0x0802c15c
 8001c0c:	0802c164 	.word	0x0802c164
 8001c10:	0802c17c 	.word	0x0802c17c
 8001c14:	0802c184 	.word	0x0802c184
 8001c18:	0802c19c 	.word	0x0802c19c
 8001c1c:	0802c1a8 	.word	0x0802c1a8
 8001c20:	0802c1b0 	.word	0x0802c1b0
 8001c24:	10624dd3 	.word	0x10624dd3
 8001c28:	0802c1b8 	.word	0x0802c1b8
 8001c2c:	0802c1c0 	.word	0x0802c1c0
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	220b      	movs	r2, #11
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8001c38:	bf00      	nop
}
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
    if (length == 0)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d05f      	beq.n	8001d14 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd4>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d05d      	beq.n	8001d16 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
    {
        // Update JPEG conversion parameters
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	611a      	str	r2, [r3, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a2d      	ldr	r2, [pc, #180]	; (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001c66:	6013      	str	r3, [r2, #0]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8001c68:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
        {
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 030f 	bic.w	r3, r3, #15
 8001c7c:	3310      	adds	r3, #16
 8001c7e:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001c80:	6013      	str	r3, [r2, #0]
        }
        JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	4613      	mov	r3, r2
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	015b      	lsls	r3, r3, #5
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001c92:	605a      	str	r2, [r3, #4]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	4a20      	ldr	r2, [pc, #128]	; (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001c9c:	60d3      	str	r3, [r2, #12]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	f1c3 0310 	rsb	r3, r3, #16
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 8001cac:	6093      	str	r3, [r2, #8]

        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	481a      	ldr	r0, [pc, #104]	; (8001d20 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 8001cb6:	f000 f901 	bl	8001ebc <JPEG_Decode_DMA>
        do
        {
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4817      	ldr	r0, [pc, #92]	; (8001d20 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 8001cc2:	f000 fab5 	bl	8002230 <JPEG_OutputHandler>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001cca:	6013      	str	r3, [r2, #0]

            //If nothing to do, allow other tasks
            if (JpegProcessing_End == 2)
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xac>
            {
                SEM_WAIT(semDecodingDone);
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f013 fed8 	bl	8015a9c <osSemaphoreAcquire>
            }
        } while (JpegProcessing_End != 1);
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	bf14      	ite	ne
 8001cf4:	2301      	movne	r3, #1
 8001cf6:	2300      	moveq	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d000      	beq.n	8001d00 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>
        do
 8001cfe:	e7dc      	b.n	8001cba <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7a>

        // reset job queue and flags after frame is decoded
        external_queue.reset();
 8001d00:	480a      	ldr	r0, [pc, #40]	; (8001d2c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xec>)
 8001d02:	f000 fc07 	bl	8002514 <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>
        Jpeg_HWDecodingEnd = 0;
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
        DMA2D_CopyBufferEnd = 0;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e000      	b.n	8001d16 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd6>
        return;
 8001d14:	bf00      	nop
    }
}
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	24005bb0 	.word	0x24005bb0
 8001d20:	2400cc90 	.word	0x2400cc90
 8001d24:	24005b7c 	.word	0x24005b7c
 8001d28:	24005b8c 	.word	0x24005b8c
 8001d2c:	24005b90 	.word	0x24005b90
 8001d30:	24005b64 	.word	0x24005b64
 8001d34:	24005b74 	.word	0x24005b74

08001d38 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
    // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f7ff fc32 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff fbb0 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001d62:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	3308      	adds	r3, #8
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fc22 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001d74:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d018      	beq.n	8001dae <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
    {
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	6939      	ldr	r1, [r7, #16]
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8001d84:	f000 f89a 	bl	8001ebc <JPEG_Decode_DMA>

        do
        {
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480a      	ldr	r0, [pc, #40]	; (8001db8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8001d90:	f000 fa4e 	bl	8002230 <JPEG_OutputHandler>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8001d98:	6013      	str	r3, [r2, #0]
        } while (JpegProcessing_End == 0);
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf0c      	ite	eq
 8001da2:	2301      	moveq	r3, #1
 8001da4:	2300      	movne	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d000      	beq.n	8001dae <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
        do
 8001dac:	e7ec      	b.n	8001d88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2400cc90 	.word	0x2400cc90
 8001dbc:	24005b7c 	.word	0x24005b7c

08001dc0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	807b      	strh	r3, [r7, #2]
    assert(0);
 8001dce:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8001dd0:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8001dd2:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 8001dd8:	f028 ff36 	bl	802ac48 <__assert_func>
 8001ddc:	0802c1c8 	.word	0x0802c1c8
 8001de0:	0802c1cc 	.word	0x0802c1cc
 8001de4:	0802bfb8 	.word	0x0802bfb8

08001de8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
    if (frameNumber == 0)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	332c      	adds	r3, #44	; 0x2c
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
 8001e08:	4602      	mov	r2, r0
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf8c      	ite	hi
 8001e10:	2301      	movhi	r3, #1
 8001e12:	2300      	movls	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	332c      	adds	r3, #44	; 0x2c
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
 8001e26:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69da      	ldr	r2, [r3, #28]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	3308      	adds	r3, #8
 8001e36:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 8001e38:	2210      	movs	r2, #16
 8001e3a:	68f9      	ldr	r1, [r7, #12]
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fbbb 	bl	80015b8 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3308      	adds	r3, #8
 8001e46:	4619      	mov	r1, r3
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff fb3a 	bl	80014c2 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4413      	add	r3, r2
 8001e56:	1f1a      	subs	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	615a      	str	r2, [r3, #20]
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]

}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 8001e9a:	b490      	push	{r4, r7}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	3304      	adds	r3, #4
 8001eac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc90      	pop	{r4, r7}
 8001eba:	4770      	bx	lr

08001ebc <JPEG_Decode_DMA>:
      * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
      * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
      * @retval None
      */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
        FrameBufferAddress = output;
 8001eca:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <JPEG_Decode_DMA+0xb8>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6013      	str	r3, [r2, #0]
        Output_Is_Paused = 0;
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <JPEG_Decode_DMA+0xbc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <JPEG_Decode_DMA+0xc0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
        JPEG_OUT_Write_BufferIndex = 0;
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <JPEG_Decode_DMA+0xc4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
        JPEG_InputImageIndex = 0;
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <JPEG_Decode_DMA+0xc8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <JPEG_Decode_DMA+0xcc>)
 8001eec:	6013      	str	r3, [r2, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8001eee:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <JPEG_Decode_DMA+0xd0>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6013      	str	r3, [r2, #0]
        MCU_BlockIndex = 0;
 8001ef4:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <JPEG_Decode_DMA+0xd4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
        DMA2D_output_Is_Paused = 1;
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <JPEG_Decode_DMA+0xd8>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

        //Init buffers
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d816      	bhi.n	8001f38 <JPEG_Decode_DMA+0x7c>
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001f0a:	4923      	ldr	r1, [pc, #140]	; (8001f98 <JPEG_Decode_DMA+0xdc>)
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001f1c:	491e      	ldr	r1, [pc, #120]	; (8001f98 <JPEG_Decode_DMA+0xdc>)
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e7e5      	b.n	8001f04 <JPEG_Decode_DMA+0x48>
        }

        //Do not return from this function until done with decoding all chunks.
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <JPEG_Decode_DMA+0xc4>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4916      	ldr	r1, [pc, #88]	; (8001f98 <JPEG_Decode_DMA+0xdc>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	3304      	adds	r3, #4
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <JPEG_Decode_DMA+0xe0>)
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	01db      	lsls	r3, r3, #7
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f00c fd89 	bl	800ea7a <HAL_JPEG_Decode_DMA>

        return 0;
 8001f68:	2300      	movs	r3, #0
    }
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	24005b54 	.word	0x24005b54
 8001f78:	24005b70 	.word	0x24005b70
 8001f7c:	24005b68 	.word	0x24005b68
 8001f80:	24005b6c 	.word	0x24005b6c
 8001f84:	24005b58 	.word	0x24005b58
 8001f88:	24005b60 	.word	0x24005b60
 8001f8c:	24005b5c 	.word	0x24005b5c
 8001f90:	24005b88 	.word	0x24005b88
 8001f94:	24005b78 	.word	0x24005b78
 8001f98:	24000004 	.word	0x24000004
 8001f9c:	24005bb0 	.word	0x24005bb0

08001fa0 <HAL_JPEG_InfoReadyCallback>:
      * @param hjpeg: JPEG handle pointer
      * @param pInfo: JPEG Info Struct pointer
      * @retval None
      */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d12f      	bne.n	8002012 <HAL_JPEG_InfoReadyCallback+0x72>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_JPEG_InfoReadyCallback+0x2e>
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f023 030f 	bic.w	r3, r3, #15
 8001fc6:	f103 0210 	add.w	r2, r3, #16
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	60da      	str	r2, [r3, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_JPEG_InfoReadyCallback+0x4a>
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f023 030f 	bic.w	r3, r3, #15
 8001fe2:	f103 0210 	add.w	r2, r3, #16
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	609a      	str	r2, [r3, #8]
            }

            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001fea:	4a36      	ldr	r2, [pc, #216]	; (80020c4 <HAL_JPEG_InfoReadyCallback+0x124>)
 8001fec:	4936      	ldr	r1, [pc, #216]	; (80020c8 <HAL_JPEG_InfoReadyCallback+0x128>)
 8001fee:	6838      	ldr	r0, [r7, #0]
 8001ff0:	f004 f87e 	bl	80060f0 <TGFX_JPEG_GetDecodeColorConvertFunc>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73bb      	strb	r3, [r7, #14]
            if (status != HAL_OK)
 8001ff8:	7bbb      	ldrb	r3, [r7, #14]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d05d      	beq.n	80020ba <HAL_JPEG_InfoReadyCallback+0x11a>
            {
                assert(status == HAL_OK);
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d05a      	beq.n	80020ba <HAL_JPEG_InfoReadyCallback+0x11a>
 8002004:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_JPEG_InfoReadyCallback+0x12c>)
 8002006:	4a32      	ldr	r2, [pc, #200]	; (80020d0 <HAL_JPEG_InfoReadyCallback+0x130>)
 8002008:	f240 2131 	movw	r1, #561	; 0x231
 800200c:	4831      	ldr	r0, [pc, #196]	; (80020d4 <HAL_JPEG_InfoReadyCallback+0x134>)
 800200e:	f028 fe1b 	bl	802ac48 <__assert_func>
            }
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d11b      	bne.n	8002052 <HAL_JPEG_InfoReadyCallback+0xb2>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <HAL_JPEG_InfoReadyCallback+0x96>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f023 030f 	bic.w	r3, r3, #15
 800202e:	f103 0210 	add.w	r2, r3, #16
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	60da      	str	r2, [r3, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	2b00      	cmp	r3, #0
 8002040:	d007      	beq.n	8002052 <HAL_JPEG_InfoReadyCallback+0xb2>
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 0307 	bic.w	r3, r3, #7
 800204a:	f103 0208 	add.w	r2, r3, #8
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	609a      	str	r2, [r3, #8]
                }
            }

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11b      	bne.n	8002092 <HAL_JPEG_InfoReadyCallback+0xf2>
            {
                if ((pInfo->ImageWidth % 8) != 0)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_JPEG_InfoReadyCallback+0xd6>
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f023 0307 	bic.w	r3, r3, #7
 800206e:	f103 0208 	add.w	r2, r3, #8
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	60da      	str	r2, [r3, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_JPEG_InfoReadyCallback+0xf2>
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f023 0307 	bic.w	r3, r3, #7
 800208a:	f103 0208 	add.w	r2, r3, #8
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	609a      	str	r2, [r3, #8]
                }
            }

            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_JPEG_InfoReadyCallback+0x124>)
 8002094:	490c      	ldr	r1, [pc, #48]	; (80020c8 <HAL_JPEG_InfoReadyCallback+0x128>)
 8002096:	6838      	ldr	r0, [r7, #0]
 8002098:	f017 fc7c 	bl	8019994 <JPEG_GetDecodeColorConvertFunc>
 800209c:	4603      	mov	r3, r0
 800209e:	73fb      	strb	r3, [r7, #15]
            if (status != HAL_OK)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_JPEG_InfoReadyCallback+0x11a>
            {
                assert(status == HAL_OK);
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_JPEG_InfoReadyCallback+0x11a>
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <HAL_JPEG_InfoReadyCallback+0x12c>)
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_JPEG_InfoReadyCallback+0x130>)
 80020b0:	f240 2153 	movw	r1, #595	; 0x253
 80020b4:	4807      	ldr	r0, [pc, #28]	; (80020d4 <HAL_JPEG_InfoReadyCallback+0x134>)
 80020b6:	f028 fdc7 	bl	802ac48 <__assert_func>
            }
        }
    }
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	24005b80 	.word	0x24005b80
 80020c8:	24005b84 	.word	0x24005b84
 80020cc:	0802c228 	.word	0x0802c228
 80020d0:	0802c23c 	.word	0x0802c23c
 80020d4:	0802bfb8 	.word	0x0802bfb8

080020d8 <HAL_JPEG_GetDataCallback>:
      * @param hjpeg: JPEG handle pointer
      * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
      * @retval None
      */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
        //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
        JPEG_InputImageIndex += NbDecodedData;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_JPEG_GetDataCallback+0x5c>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <HAL_JPEG_GetDataCallback+0x5c>)
 80020ec:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_JPEG_GetDataCallback+0x5c>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_JPEG_GetDataCallback+0x60>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d218      	bcs.n	800212c <HAL_JPEG_GetDataCallback+0x54>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_JPEG_GetDataCallback+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	4413      	add	r3, r2
 8002102:	4a0e      	ldr	r2, [pc, #56]	; (800213c <HAL_JPEG_GetDataCallback+0x64>)
 8002104:	6013      	str	r3, [r2, #0]
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_JPEG_GetDataCallback+0x60>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_JPEG_GetDataCallback+0x5c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	60fb      	str	r3, [r7, #12]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_JPEG_GetDataCallback+0x64>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	bf28      	it	cs
 8002120:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8002124:	461a      	mov	r2, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f00c fe4d 	bl	800edc6 <HAL_JPEG_ConfigInputBuffer>
        }
    }
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	24005b58 	.word	0x24005b58
 8002138:	24005b5c 	.word	0x24005b5c
 800213c:	24005b60 	.word	0x24005b60

08002140 <HAL_JPEG_DataReadyCallback>:
      * @param pDataOut: pointer to the output data buffer
      * @param OutDataLength: length of output buffer in bytes
      * @retval None
      */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_JPEG_DataReadyCallback+0xac>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4927      	ldr	r1, [pc, #156]	; (80021f0 <HAL_JPEG_DataReadyCallback+0xb0>)
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_JPEG_DataReadyCallback+0xac>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4922      	ldr	r1, [pc, #136]	; (80021f0 <HAL_JPEG_DataReadyCallback+0xb0>)
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3308      	adds	r3, #8
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_JPEG_DataReadyCallback+0xac>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <HAL_JPEG_DataReadyCallback+0xac>)
 800217e:	6013      	str	r3, [r2, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <HAL_JPEG_DataReadyCallback+0xac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d902      	bls.n	800218e <HAL_JPEG_DataReadyCallback+0x4e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002188:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_JPEG_DataReadyCallback+0xac>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
        }

        //if the other buffer is full, then ui thread might be converting it
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800218e:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_JPEG_DataReadyCallback+0xac>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4917      	ldr	r1, [pc, #92]	; (80021f0 <HAL_JPEG_DataReadyCallback+0xb0>)
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <HAL_JPEG_DataReadyCallback+0x72>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80021a4:	2102      	movs	r1, #2
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f00c fcca 	bl	800eb40 <HAL_JPEG_Pause>
            Output_Is_Paused = 1;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_JPEG_DataReadyCallback+0xb4>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_JPEG_DataReadyCallback+0xac>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	490e      	ldr	r1, [pc, #56]	; (80021f0 <HAL_JPEG_DataReadyCallback+0xb0>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3304      	adds	r3, #4
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_JPEG_DataReadyCallback+0xb8>)
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	01db      	lsls	r3, r3, #7
 80021d2:	461a      	mov	r2, r3
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f00c fe08 	bl	800edea <HAL_JPEG_ConfigOutputBuffer>

        // Signal Hardware Decoding to wake up
        SEM_POST(semDecodingDone);
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_JPEG_DataReadyCallback+0xbc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f013 fcae 	bl	8015b40 <osSemaphoreRelease>
    }
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	24005b6c 	.word	0x24005b6c
 80021f0:	24000004 	.word	0x24000004
 80021f4:	24005b70 	.word	0x24005b70
 80021f8:	24005bb0 	.word	0x24005bb0
 80021fc:	24005b8c 	.word	0x24005b8c

08002200 <HAL_JPEG_ErrorCallback>:
      * @brief  JPEG Error callback
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
        __disable_irq();
        while (1)
 800220c:	e7fe      	b.n	800220c <HAL_JPEG_ErrorCallback+0xc>
	...

08002210 <HAL_JPEG_DecodeCpltCallback>:
      * @brief  JPEG Decode complete callback
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
        Jpeg_HWDecodingEnd = 1;
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]
    }
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	24005b64 	.word	0x24005b64

08002230 <JPEG_OutputHandler>:
  * @param hjpeg: JPEG handle pointer
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg, touchgfx::DMA_Interface& dma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
 800223a:	4b45      	ldr	r3, [pc, #276]	; (8002350 <JPEG_OutputHandler+0x120>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <JPEG_OutputHandler+0x1e>
 8002242:	4b44      	ldr	r3, [pc, #272]	; (8002354 <JPEG_OutputHandler+0x124>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <JPEG_OutputHandler+0x1e>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <JPEG_OutputHandler+0x20>
 800224e:	2300      	movs	r3, #0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <JPEG_OutputHandler+0x28>
    {
        return 1;
 8002254:	2301      	movs	r3, #1
 8002256:	e077      	b.n	8002348 <JPEG_OutputHandler+0x118>
    }

    // Add job to DMA2D if ready and JPEG buffer is full
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
 8002258:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <JPEG_OutputHandler+0x128>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	493f      	ldr	r1, [pc, #252]	; (800235c <JPEG_OutputHandler+0x12c>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d105      	bne.n	800227a <JPEG_OutputHandler+0x4a>
 800226e:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <JPEG_OutputHandler+0x130>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <JPEG_OutputHandler+0x4a>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <JPEG_OutputHandler+0x4c>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d02d      	beq.n	80022dc <JPEG_OutputHandler+0xac>
    {
        External_DMA2D_JobTypeDef new_job =
        {
            MCU_BlockIndex,
            &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
        };
 8002280:	4b38      	ldr	r3, [pc, #224]	; (8002364 <JPEG_OutputHandler+0x134>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60bb      	str	r3, [r7, #8]
            &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
 8002286:	4b34      	ldr	r3, [pc, #208]	; (8002358 <JPEG_OutputHandler+0x128>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4a32      	ldr	r2, [pc, #200]	; (800235c <JPEG_OutputHandler+0x12c>)
 8002294:	4413      	add	r3, r2
        };
 8002296:	60fb      	str	r3, [r7, #12]

        external_queue.push(new_job);
 8002298:	f107 0308 	add.w	r3, r7, #8
 800229c:	4619      	mov	r1, r3
 800229e:	4832      	ldr	r0, [pc, #200]	; (8002368 <JPEG_OutputHandler+0x138>)
 80022a0:	f000 f94d 	bl	800253e <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80022a4:	4b31      	ldr	r3, [pc, #196]	; (800236c <JPEG_OutputHandler+0x13c>)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <JPEG_OutputHandler+0x134>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <JPEG_OutputHandler+0x134>)
 80022b0:	6013      	str	r3, [r2, #0]

        JPEG_OUT_Read_BufferIndex++;
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <JPEG_OutputHandler+0x128>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <JPEG_OutputHandler+0x128>)
 80022ba:	6013      	str	r3, [r2, #0]
        if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80022bc:	4b26      	ldr	r3, [pc, #152]	; (8002358 <JPEG_OutputHandler+0x128>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d902      	bls.n	80022ca <JPEG_OutputHandler+0x9a>
        {
            JPEG_OUT_Read_BufferIndex = 0;
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <JPEG_OutputHandler+0x128>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
        }

        DMA2D_output_Is_Paused = 0;
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <JPEG_OutputHandler+0x130>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        // Try to start DMA2D
        dma.start();
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3310      	adds	r3, #16
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6838      	ldr	r0, [r7, #0]
 80022da:	4798      	blx	r3
    }

    // Start JPEG IP if paused and next buffer is empty
    if ((Output_Is_Paused == 1) && \
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <JPEG_OutputHandler+0x140>)
 80022de:	681b      	ldr	r3, [r3, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d117      	bne.n	8002314 <JPEG_OutputHandler+0xe4>
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <JPEG_OutputHandler+0x144>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	491c      	ldr	r1, [pc, #112]	; (800235c <JPEG_OutputHandler+0x12c>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	781b      	ldrb	r3, [r3, #0]
    if ((Output_Is_Paused == 1) && \
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10c      	bne.n	8002314 <JPEG_OutputHandler+0xe4>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <JPEG_OutputHandler+0x128>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4917      	ldr	r1, [pc, #92]	; (800235c <JPEG_OutputHandler+0x12c>)
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	781b      	ldrb	r3, [r3, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <JPEG_OutputHandler+0xe4>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <JPEG_OutputHandler+0xe6>
 8002314:	2300      	movs	r3, #0
    if ((Output_Is_Paused == 1) && \
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <JPEG_OutputHandler+0xf8>
    {
        Output_Is_Paused = 0;
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <JPEG_OutputHandler+0x140>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002320:	2102      	movs	r1, #2
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f00c fc64 	bl	800ebf0 <HAL_JPEG_Resume>
    }

    if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <JPEG_OutputHandler+0x140>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <JPEG_OutputHandler+0x10c>
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <JPEG_OutputHandler+0x130>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <JPEG_OutputHandler+0x10c>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <JPEG_OutputHandler+0x10e>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <JPEG_OutputHandler+0x116>
    {
        return 2;
 8002342:	2302      	movs	r3, #2
 8002344:	e000      	b.n	8002348 <JPEG_OutputHandler+0x118>
    }

    return 0;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	24005b64 	.word	0x24005b64
 8002354:	24005b74 	.word	0x24005b74
 8002358:	24005b68 	.word	0x24005b68
 800235c:	24000004 	.word	0x24000004
 8002360:	24005b78 	.word	0x24005b78
 8002364:	24005b88 	.word	0x24005b88
 8002368:	24005b90 	.word	0x24005b90
 800236c:	24005bb0 	.word	0x24005bb0
 8002370:	24005b70 	.word	0x24005b70
 8002374:	24005b6c 	.word	0x24005b6c

08002378 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    uint32_t xRef, yRef, refline;

    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	011a      	lsls	r2, r3, #4
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <DMA2D_CopyBuffer+0xc8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	617b      	str	r3, [r7, #20]
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	4a29      	ldr	r2, [pc, #164]	; (8002440 <DMA2D_CopyBuffer+0xc8>)
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	fbb3 f1f2 	udiv	r1, r3, r2
 80023a0:	fb01 f202 	mul.w	r2, r1, r2
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <DMA2D_CopyBuffer+0xc8>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	fb03 f202 	mul.w	r2, r3, r2
 80023b2:	4b23      	ldr	r3, [pc, #140]	; (8002440 <DMA2D_CopyBuffer+0xc8>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	6939      	ldr	r1, [r7, #16]
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80023c0:	4b20      	ldr	r3, [pc, #128]	; (8002444 <DMA2D_CopyBuffer+0xcc>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <DMA2D_CopyBuffer+0xd0>)
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <DMA2D_CopyBuffer+0xc8>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	1acb      	subs	r3, r1, r3
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d309      	bcc.n	80023ec <DMA2D_CopyBuffer+0x74>
    {
        WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <DMA2D_CopyBuffer+0xc8>)
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <DMA2D_CopyBuffer+0xc8>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	4917      	ldr	r1, [pc, #92]	; (8002444 <DMA2D_CopyBuffer+0xcc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	644b      	str	r3, [r1, #68]	; 0x44
 80023ea:	e007      	b.n	80023fc <DMA2D_CopyBuffer+0x84>
    }
    else
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <DMA2D_CopyBuffer+0xc8>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	041b      	lsls	r3, r3, #16
 80023f4:	4a13      	ldr	r2, [pc, #76]	; (8002444 <DMA2D_CopyBuffer+0xcc>)
 80023f6:	f043 0310 	orr.w	r3, r3, #16
 80023fa:	6453      	str	r3, [r2, #68]	; 0x44
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <DMA2D_CopyBuffer+0xd4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	4a10      	ldr	r2, [pc, #64]	; (8002444 <DMA2D_CopyBuffer+0xcc>)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	440b      	add	r3, r1
 8002408:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <DMA2D_CopyBuffer+0xc8>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f1c3 031e 	rsb	r3, r3, #30
 8002412:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <DMA2D_CopyBuffer+0xcc>)
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	6413      	str	r3, [r2, #64]	; 0x40

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, 0);
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <DMA2D_CopyBuffer+0xcc>)
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <DMA2D_CopyBuffer+0xcc>)
 8002420:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <DMA2D_CopyBuffer+0xd8>)
 8002422:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <DMA2D_CopyBuffer+0xcc>)
 800242c:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <DMA2D_CopyBuffer+0xcc>)
 8002430:	4a08      	ldr	r2, [pc, #32]	; (8002454 <DMA2D_CopyBuffer+0xdc>)
 8002432:	601a      	str	r2, [r3, #0]
}
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	24005bb0 	.word	0x24005bb0
 8002444:	52001000 	.word	0x52001000
 8002448:	24005b80 	.word	0x24005b80
 800244c:	24005b54 	.word	0x24005b54
 8002450:	ff09000b 	.word	0xff09000b
 8002454:	00010201 	.word	0x00010201

08002458 <DMA2D_ExternalJobCompleted>:
  * @brief  External DMA2D job complete callback
  * @param job: External job reference
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    // Mark ycbcr empty
    job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
    job.jpeg_buffer->DataBufferSize = 0;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]

    // Mark dma paused if queue is empty
    if (external_queue.is_empty())
 8002470:	480e      	ldr	r0, [pc, #56]	; (80024ac <DMA2D_ExternalJobCompleted+0x54>)
 8002472:	f000 f827 	bl	80024c4 <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <DMA2D_ExternalJobCompleted+0x2a>
    {
        DMA2D_output_Is_Paused = 1;
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <DMA2D_ExternalJobCompleted+0x58>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]
    }

    // Check if last line
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <DMA2D_ExternalJobCompleted+0x5c>)
 8002488:	6819      	ldr	r1, [r3, #0]
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <DMA2D_ExternalJobCompleted+0x60>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	1acb      	subs	r3, r1, r3
 8002490:	429a      	cmp	r2, r3
 8002492:	d302      	bcc.n	800249a <DMA2D_ExternalJobCompleted+0x42>
    {
        DMA2D_CopyBufferEnd = 1;
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <DMA2D_ExternalJobCompleted+0x64>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]
    }

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <DMA2D_ExternalJobCompleted+0x68>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f013 fb4e 	bl	8015b40 <osSemaphoreRelease>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	24005b90 	.word	0x24005b90
 80024b0:	24005b78 	.word	0x24005b78
 80024b4:	24005b80 	.word	0x24005b80
 80024b8:	24005bb0 	.word	0x24005bb0
 80024bc:	24005b74 	.word	0x24005b74
 80024c0:	24005b8c 	.word	0x24005b8c

080024c4 <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>:
    }
    External_DMA2D_JobTypeDef& front()
    {
        return buffer_[head_];
    }
    bool is_empty()
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    {
        return count_ == 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
    }
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>:
    ExternalDMAJob_Queue()
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
        : max_size_(Size), head_(0), tail_(0), count_(0)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
    {}
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>:
    bool is_full()
    {
        return count_ == max_size_;
    }
    void reset()
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
    {
        head_ = tail_ = count_ = 0;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	605a      	str	r2, [r3, #4]
    }
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>:
    void push(const External_DMA2D_JobTypeDef& job)
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
        buffer_[tail_] = job;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	3302      	adds	r3, #2
 8002550:	6839      	ldr	r1, [r7, #0]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	460a      	mov	r2, r1
 8002558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800255c:	e883 0003 	stmia.w	r3, {r0, r1}
        tail_ = (tail_ + 1) % max_size_;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	3301      	adds	r3, #1
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	fbb3 f1f2 	udiv	r1, r3, r2
 800256e:	fb01 f202 	mul.w	r2, r1, r2
 8002572:	1a9a      	subs	r2, r3, r2
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
        count_++;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60da      	str	r2, [r3, #12]
    }
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fed1 	bl	8001348 <_ZN12MJPEGDecoderD1Ev>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	0802e170 	.word	0x0802e170

080025b4 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffe7 	bl	8002590 <_ZN20HardwareMJPEGDecoderD1Ev>
 80025c2:	2148      	movs	r1, #72	; 0x48
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f028 f964 	bl	802a892 <_ZdlPvj>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_Z41__static_initialization_and_destruction_0ii>:
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d107      	bne.n	80025f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d102      	bne.n	80025f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
ExternalDMAJob_Queue<EXT_DMA2D_QUEUE_SIZE> external_queue;
 80025ee:	4803      	ldr	r0, [pc, #12]	; (80025fc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80025f0:	f7ff ff79 	bl	80024e6 <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	24005b90 	.word	0x24005b90

08002600 <_GLOBAL__sub_I_FrameBufferAddress>:
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
 8002604:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002608:	2001      	movs	r0, #1
 800260a:	f7ff ffe3 	bl	80025d4 <_Z41__static_initialization_and_destruction_0ii>
 800260e:	bd80      	pop	{r7, pc}

08002610 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002614:	2200      	movs	r2, #0
 8002616:	2101      	movs	r1, #1
 8002618:	2001      	movs	r0, #1
 800261a:	f013 f9b6 	bl	801598a <osSemaphoreNew>
 800261e:	4603      	mov	r3, r0
 8002620:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002622:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800262e:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002630:	2128      	movs	r1, #40	; 0x28
 8002632:	480e      	ldr	r0, [pc, #56]	; (800266c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002634:	f028 fb08 	bl	802ac48 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002638:	2200      	movs	r2, #0
 800263a:	2104      	movs	r1, #4
 800263c:	2001      	movs	r0, #1
 800263e:	f013 fac3 	bl	8015bc8 <osMessageQueueNew>
 8002642:	4603      	mov	r3, r0
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002646:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002658:	f028 faf6 	bl	802ac48 <__assert_func>
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}
 8002660:	24005bc4 	.word	0x24005bc4
 8002664:	0802c284 	.word	0x0802c284
 8002668:	0802c2d0 	.word	0x0802c2d0
 800266c:	0802c300 	.word	0x0802c300
 8002670:	24005bc8 	.word	0x24005bc8
 8002674:	0802c36c 	.word	0x0802c36c

08002678 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	4618      	mov	r0, r3
 8002686:	f013 fa09 	bl	8015a9c <osSemaphoreAcquire>
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	24005bc4 	.word	0x24005bc4

08002694 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f013 fa4f 	bl	8015b40 <osSemaphoreRelease>
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	24005bc4 	.word	0x24005bc4

080026ac <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f013 f9f0 	bl	8015a9c <osSemaphoreAcquire>
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	24005bc4 	.word	0x24005bc4

080026c4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f013 fa37 	bl	8015b40 <osSemaphoreRelease>
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	24005bc4 	.word	0x24005bc4

080026dc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	2300      	movs	r3, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	4903      	ldr	r1, [pc, #12]	; (80026f8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80026ea:	f013 fae1 	bl	8015cb0 <osMessageQueuePut>
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	24005bc8 	.word	0x24005bc8
 80026f8:	2400001c 	.word	0x2400001c

080026fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	1d39      	adds	r1, r7, #4
 8002708:	2300      	movs	r3, #0
 800270a:	2200      	movs	r2, #0
 800270c:	f013 fb30 	bl	8015d70 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	1d39      	adds	r1, r7, #4
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	2200      	movs	r2, #0
 800271c:	f013 fb28 	bl	8015d70 <osMessageQueueGet>
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	24005bc8 	.word	0x24005bc8

0800272c <__NVIC_EnableIRQ>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273a:	2b00      	cmp	r3, #0
 800273c:	db0b      	blt.n	8002756 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	4907      	ldr	r1, [pc, #28]	; (8002764 <__NVIC_EnableIRQ+0x38>)
 8002746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2001      	movs	r0, #1
 800274e:	fa00 f202 	lsl.w	r2, r0, r2
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000e100 	.word	0xe000e100

08002768 <__NVIC_DisableIRQ>:
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db12      	blt.n	80027a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	490a      	ldr	r1, [pc, #40]	; (80027ac <__NVIC_DisableIRQ+0x44>)
 8002782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2001      	movs	r0, #1
 800278a:	fa00 f202 	lsl.w	r2, r0, r2
 800278e:	3320      	adds	r3, #32
 8002790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002794:	f3bf 8f4f 	dsb	sy
}
 8002798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800279a:	f3bf 8f6f 	isb	sy
}
 800279e:	bf00      	nop
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
        : color(0)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    {
    }
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
    {
        return color;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
    }
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
    {
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	601a      	str	r2, [r3, #0]
    }
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	0802e244 	.word	0x0802e244

08002804 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    }
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ffe9 	bl	80027e4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002812:	2104      	movs	r1, #4
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f028 f83c 	bl	802a892 <_ZdlPvj>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3344      	adds	r3, #68	; 0x44
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
    }
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
    {
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	601a      	str	r2, [r3, #0]
    }
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	0802f594 	.word	0x0802f594

08002860 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
    }
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ffe9 	bl	8002840 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800286e:	210c      	movs	r1, #12
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f028 f80e 	bl	802a892 <_ZdlPvj>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800288a:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	721a      	strb	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	725a      	strb	r2, [r3, #9]
    {
    }
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	0802f594 	.word	0x0802f594

080028b4 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80028bc:	2301      	movs	r3, #1
    }
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    {
        if (started_by_external_job)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3da0 	ldrb.w	r3, [r3, #3488]	; 0xda0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
        {
            externalJobCompleted();
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f88a 	bl	80029f8 <_ZN8STM32DMA20externalJobCompletedEv>
            {
                started_by_external_job = true;
                externalJobExecute();
            }
        }
    }
 80028e4:	e022      	b.n	800292c <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
            executeCompleted();
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3328      	adds	r3, #40	; 0x28
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4610      	mov	r0, r2
 80028f2:	4798      	blx	r3
            if (!external_queue.is_empty() && !isRunning)
 80028f4:	480f      	ldr	r0, [pc, #60]	; (8002934 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
 80028f6:	f7ff fde5 	bl	80024c4 <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f083 0301 	eor.w	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7a1b      	ldrb	r3, [r3, #8]
 800290a:	f083 0301 	eor.w	r3, r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <_ZN8STM32DMA18signalDMAInterruptEv+0x4e>
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
                started_by_external_job = true;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
                externalJobExecute();
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f890 	bl	8002a4c <_ZN8STM32DMA18externalJobExecuteEv>
    }
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	24005b90 	.word	0x24005b90

08002938 <_ZN8STM32DMA5startEv>:

    virtual void start()
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
    {
        MUTEX_LOCK(mutexIsRunning);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 8002946:	f04f 31ff 	mov.w	r1, #4294967295
 800294a:	4618      	mov	r0, r3
 800294c:	f012 ff95 	bl	801587a <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4610      	mov	r0, r2
 800295e:	4798      	blx	r3
 8002960:	4603      	mov	r3, r0
 8002962:	f083 0301 	eor.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <_ZN8STM32DMA5startEv+0x50>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7a5b      	ldrb	r3, [r3, #9]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <_ZN8STM32DMA5startEv+0x50>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7a1b      	ldrb	r3, [r3, #8]
 800297a:	f083 0301 	eor.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <_ZN8STM32DMA5startEv+0x50>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <_ZN8STM32DMA5startEv+0x52>
 8002988:	2300      	movs	r3, #0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <_ZN8STM32DMA5startEv+0x6e>
        {
            started_by_external_job = false;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            execute();
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	3324      	adds	r3, #36	; 0x24
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4610      	mov	r0, r2
 80029a2:	4798      	blx	r3
 80029a4:	e01b      	b.n	80029de <_ZN8STM32DMA5startEv+0xa6>
        }
        else if (!external_queue.is_empty() && !isRunning)
 80029a6:	4813      	ldr	r0, [pc, #76]	; (80029f4 <_ZN8STM32DMA5startEv+0xbc>)
 80029a8:	f7ff fd8c 	bl	80024c4 <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f083 0301 	eor.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <_ZN8STM32DMA5startEv+0x92>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7a1b      	ldrb	r3, [r3, #8]
 80029bc:	f083 0301 	eor.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <_ZN8STM32DMA5startEv+0x92>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <_ZN8STM32DMA5startEv+0x94>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <_ZN8STM32DMA5startEv+0xa6>
        {
            started_by_external_job = true;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            externalJobExecute();
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f837 	bl	8002a4c <_ZN8STM32DMA18externalJobExecuteEv>
        }
        MUTEX_UNLOCK(mutexIsRunning);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 80029e4:	4618      	mov	r0, r3
 80029e6:	f012 ff93 	bl	8015910 <osMutexRelease>
    }
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	24005b90 	.word	0x24005b90

080029f8 <_ZN8STM32DMA20externalJobCompletedEv>:
     *
     * @brief Handle DMA2D when an external job has been executed
     *
     * @param None
     */
    void externalJobCompleted()
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
    {
        if (!external_queue.is_empty() && isRunning)
 8002a00:	4811      	ldr	r0, [pc, #68]	; (8002a48 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 8002a02:	f7ff fd5f 	bl	80024c4 <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f083 0301 	eor.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7a1b      	ldrb	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <_ZN8STM32DMA20externalJobCompletedEv+0x28>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00c      	beq.n	8002a3e <_ZN8STM32DMA20externalJobCompletedEv+0x46>
        {
            isRunning = false;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	721a      	strb	r2, [r3, #8]
            External_DMA2D_JobTypeDef& completed_job = external_queue.front();
 8002a2a:	4807      	ldr	r0, [pc, #28]	; (8002a48 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 8002a2c:	f000 fbba 	bl	80031a4 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 8002a30:	60f8      	str	r0, [r7, #12]
            external_queue.pop();
 8002a32:	4805      	ldr	r0, [pc, #20]	; (8002a48 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 8002a34:	f000 fbc6 	bl	80031c4 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>
            DMA2D_ExternalJobCompleted(completed_job);
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff fd0d 	bl	8002458 <DMA2D_ExternalJobCompleted>
        }
    }
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	24005b90 	.word	0x24005b90

08002a4c <_ZN8STM32DMA18externalJobExecuteEv>:
     *
     * @brief Executes an external DMA2D job
     *
     * @param None
     */
    void externalJobExecute()
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
    {
        isRunning = true;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	721a      	strb	r2, [r3, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <_ZN8STM32DMA18externalJobExecuteEv+0x24>)
 8002a5c:	f000 fba2 	bl	80031a4 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 8002a60:	60f8      	str	r0, [r7, #12]
        DMA2D_CopyBuffer(job);
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff fc88 	bl	8002378 <DMA2D_CopyBuffer>
    }
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	24005b90 	.word	0x24005b90

08002a74 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3314      	adds	r3, #20
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4798      	blx	r3
    }
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002a9e:	f7fe f981 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ffe5 	bl	8002a74 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	330c      	adds	r3, #12
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fe76 	bl	80027b0 <_ZN8touchgfx9colortypeC1Ev>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002ad0:	b5b0      	push	{r4, r5, r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	330c      	adds	r3, #12
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	f7ff fecd 	bl	8002880 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8002ae6:	4a16      	ldr	r2, [pc, #88]	; (8002b40 <_ZN8STM32DMAC1Ev+0x70>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f103 000c 	add.w	r0, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3320      	adds	r3, #32
 8002af6:	2260      	movs	r2, #96	; 0x60
 8002af8:	4619      	mov	r1, r3
 8002afa:	f018 fbc5 	bl	801b288 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3320      	adds	r3, #32
 8002b02:	245f      	movs	r4, #95	; 0x5f
 8002b04:	461d      	mov	r5, r3
 8002b06:	2c00      	cmp	r4, #0
 8002b08:	db05      	blt.n	8002b16 <_ZN8STM32DMAC1Ev+0x46>
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f7ff ffd1 	bl	8002ab2 <_ZN8touchgfx6BlitOpC1Ev>
 8002b10:	3524      	adds	r5, #36	; 0x24
 8002b12:	3c01      	subs	r4, #1
 8002b14:	e7f7      	b.n	8002b06 <_ZN8STM32DMAC1Ev+0x36>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
{
    mutexIsRunning = MUTEX_CREATE();
 8002b26:	2000      	movs	r0, #0
 8002b28:	f012 fe21 	bl	801576e <osMutexNew>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
}
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	0802e1f4 	.word	0x0802e1f4

08002b44 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <_ZN8STM32DMAD1Ev+0x30>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002b52:	205a      	movs	r0, #90	; 0x5a
 8002b54:	f7ff fe08 	bl	8002768 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	330c      	adds	r3, #12
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fb4d 	bl	80031fc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fe6b 	bl	8002840 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	0802e1f4 	.word	0x0802e1f4

08002b78 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
}
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ffdf 	bl	8002b44 <_ZN8STM32DMAD1Ev>
 8002b86:	f640 51a8 	movw	r1, #3496	; 0xda8
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f027 fe81 	bl	802a892 <_ZdlPvj>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002ba6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bac:	f043 0310 	orr.w	r3, r3, #16
 8002bb0:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bb6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bc8:	f043 0310 	orr.w	r3, r3, #16
 8002bcc:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd2:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bd4:	f023 0310 	bic.w	r3, r3, #16
 8002bd8:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <_ZN8STM32DMA10initializeEv+0x58>)
 8002bdc:	4a06      	ldr	r2, [pc, #24]	; (8002bf8 <_ZN8STM32DMA10initializeEv+0x5c>)
 8002bde:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002be0:	205a      	movs	r0, #90	; 0x5a
 8002be2:	f7ff fda3 	bl	800272c <__NVIC_EnableIRQ>
}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	2400cbd4 	.word	0x2400cbd4
 8002bf8:	08002a97 	.word	0x08002a97

08002bfc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	2b0b      	cmp	r3, #11
 8002c10:	d826      	bhi.n	8002c60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8002c12:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c55 	.word	0x08002c55
 8002c1c:	08002c4f 	.word	0x08002c4f
 8002c20:	08002c49 	.word	0x08002c49
 8002c24:	08002c61 	.word	0x08002c61
 8002c28:	08002c61 	.word	0x08002c61
 8002c2c:	08002c61 	.word	0x08002c61
 8002c30:	08002c61 	.word	0x08002c61
 8002c34:	08002c5b 	.word	0x08002c5b
 8002c38:	08002c5b 	.word	0x08002c5b
 8002c3c:	08002c5b 	.word	0x08002c5b
 8002c40:	08002c5b 	.word	0x08002c5b
 8002c44:	08002c5b 	.word	0x08002c5b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
        break;
 8002c4c:	e00e      	b.n	8002c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
        break;
 8002c52:	e00b      	b.n	8002c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002c54:	2302      	movs	r3, #2
 8002c56:	60fb      	str	r3, [r7, #12]
        break;
 8002c58:	e008      	b.n	8002c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c5a:	2305      	movs	r3, #5
 8002c5c:	60fb      	str	r3, [r7, #12]
        break;
 8002c5e:	e005      	b.n	8002c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8002c62:	4a06      	ldr	r2, [pc, #24]	; (8002c7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002c64:	2167      	movs	r1, #103	; 0x67
 8002c66:	4806      	ldr	r0, [pc, #24]	; (8002c80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002c68:	f027 ffee 	bl	802ac48 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	0802c3b0 	.word	0x0802c3b0
 8002c7c:	0802c3cc 	.word	0x0802c3cc
 8002c80:	0802c418 	.word	0x0802c418

08002c84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	2b0a      	cmp	r3, #10
 8002c98:	d821      	bhi.n	8002cde <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cd9 	.word	0x08002cd9
 8002ca4:	08002cd3 	.word	0x08002cd3
 8002ca8:	08002ccd 	.word	0x08002ccd
 8002cac:	08002cdf 	.word	0x08002cdf
 8002cb0:	08002cdf 	.word	0x08002cdf
 8002cb4:	08002cdf 	.word	0x08002cdf
 8002cb8:	08002cdf 	.word	0x08002cdf
 8002cbc:	08002cd3 	.word	0x08002cd3
 8002cc0:	08002cd3 	.word	0x08002cd3
 8002cc4:	08002cd3 	.word	0x08002cd3
 8002cc8:	08002cd3 	.word	0x08002cd3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
        break;
 8002cd0:	e00b      	b.n	8002cea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
        break;
 8002cd6:	e008      	b.n	8002cea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	60fb      	str	r3, [r7, #12]
        break;
 8002cdc:	e005      	b.n	8002cea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002ce0:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8002ce2:	2188      	movs	r1, #136	; 0x88
 8002ce4:	4805      	ldr	r0, [pc, #20]	; (8002cfc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8002ce6:	f027 ffaf 	bl	802ac48 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	0802c3b0 	.word	0x0802c3b0
 8002cf8:	0802c480 	.word	0x0802c480
 8002cfc:	0802c418 	.word	0x0802c418

08002d00 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002d08:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	7f5b      	ldrb	r3, [r3, #29]
 8002d26:	4619      	mov	r1, r3
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff67 	bl	8002bfc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002d2e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	7f9b      	ldrb	r3, [r3, #30]
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ff60 	bl	8002bfc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002d3c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	7f9b      	ldrb	r3, [r3, #30]
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ff9d 	bl	8002c84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002d4a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	8b5b      	ldrh	r3, [r3, #26]
 8002d50:	461a      	mov	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	8a9b      	ldrh	r3, [r3, #20]
 8002d56:	1ad2      	subs	r2, r2, r3
 8002d58:	4b92      	ldr	r3, [pc, #584]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	8b5b      	ldrh	r3, [r3, #26]
 8002d60:	461a      	mov	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	8a9b      	ldrh	r3, [r3, #20]
 8002d66:	1ad2      	subs	r2, r2, r3
 8002d68:	4b8e      	ldr	r3, [pc, #568]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002d6a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	8b1b      	ldrh	r3, [r3, #24]
 8002d70:	461a      	mov	r2, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	8a9b      	ldrh	r3, [r3, #20]
 8002d76:	1ad2      	subs	r2, r2, r3
 8002d78:	4b8a      	ldr	r3, [pc, #552]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002d7a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002d7c:	4a89      	ldr	r2, [pc, #548]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	8adb      	ldrh	r3, [r3, #22]
 8002d86:	461a      	mov	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	8a9b      	ldrh	r3, [r3, #20]
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	4b84      	ldr	r3, [pc, #528]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	4b82      	ldr	r3, [pc, #520]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002d9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	4b80      	ldr	r3, [pc, #512]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002da2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dac:	d037      	beq.n	8002e1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db2:	f200 80e3 	bhi.w	8002f7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dba:	d015      	beq.n	8002de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc0:	f200 80dc 	bhi.w	8002f7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	d045      	beq.n	8002e54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002dc8:	2b80      	cmp	r3, #128	; 0x80
 8002dca:	f200 80d7 	bhi.w	8002f7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	f000 80bf 	beq.w	8002f52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	f200 80d1 	bhi.w	8002f7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	f000 80a4 	beq.w	8002f28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	f000 80b6 	beq.w	8002f52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002de6:	e0c9      	b.n	8002f7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	7f1b      	ldrb	r3, [r3, #28]
 8002dec:	061b      	lsls	r3, r3, #24
 8002dee:	4619      	mov	r1, r3
 8002df0:	4a6c      	ldr	r2, [pc, #432]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002df2:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	4c69      	ldr	r4, [pc, #420]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fce4 	bl	80027cc <_ZNK8touchgfx9colortypecvmEv>
 8002e04:	4603      	mov	r3, r0
 8002e06:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e08:	4a66      	ldr	r2, [pc, #408]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e14:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002e16:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e18:	4a64      	ldr	r2, [pc, #400]	; (8002fac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002e1a:	601a      	str	r2, [r3, #0]
        break;
 8002e1c:	e0d9      	b.n	8002fd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	7f1b      	ldrb	r3, [r3, #28]
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	4619      	mov	r1, r3
 8002e26:	4a5f      	ldr	r2, [pc, #380]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e28:	4b61      	ldr	r3, [pc, #388]	; (8002fb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	330c      	adds	r3, #12
 8002e32:	4c5c      	ldr	r4, [pc, #368]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fcc9 	bl	80027cc <_ZNK8touchgfx9colortypecvmEv>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e3e:	4a59      	ldr	r2, [pc, #356]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	4b56      	ldr	r3, [pc, #344]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e4a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002e4c:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e4e:	4a57      	ldr	r2, [pc, #348]	; (8002fac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002e50:	601a      	str	r2, [r3, #0]
        break;
 8002e52:	e0be      	b.n	8002fd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7f1b      	ldrb	r3, [r3, #28]
 8002e62:	061b      	lsls	r3, r3, #24
 8002e64:	461a      	mov	r2, r3
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	4a4e      	ldr	r2, [pc, #312]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e70:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e72:	4a4c      	ldr	r2, [pc, #304]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e7e:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1d1a      	adds	r2, r3, #4
 8002e84:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e86:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d00d      	beq.n	8002eb2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8002e96:	e020      	b.n	8002eda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002e98:	4b42      	ldr	r3, [pc, #264]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	4b45      	ldr	r3, [pc, #276]	; (8002fb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	8852      	ldrh	r2, [r2, #2]
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0212      	lsls	r2, r2, #8
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4a3e      	ldr	r2, [pc, #248]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002eac:	430b      	orrs	r3, r1
 8002eae:	61d3      	str	r3, [r2, #28]
                break;
 8002eb0:	e01a      	b.n	8002ee8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	7f1b      	ldrb	r3, [r3, #28]
 8002eb6:	2bff      	cmp	r3, #255	; 0xff
 8002eb8:	d101      	bne.n	8002ebe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	8852      	ldrh	r2, [r2, #2]
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	0212      	lsls	r2, r2, #8
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	4a34      	ldr	r2, [pc, #208]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ed2:	f043 0310 	orr.w	r3, r3, #16
 8002ed6:	61d3      	str	r3, [r2, #28]
                break;
 8002ed8:	e006      	b.n	8002ee8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002edc:	4a37      	ldr	r2, [pc, #220]	; (8002fbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002ede:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002ee2:	4837      	ldr	r0, [pc, #220]	; (8002fc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002ee4:	f027 feb0 	bl	802ac48 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002eee:	f043 0320 	orr.w	r3, r3, #32
 8002ef2:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d000      	beq.n	8002f0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 8002f0a:	e7f3      	b.n	8002ef4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f0e:	2210      	movs	r2, #16
 8002f10:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002f18:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f1a:	4a24      	ldr	r2, [pc, #144]	; (8002fac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002f1c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8002f1e:	e058      	b.n	8002fd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f22:	4a28      	ldr	r2, [pc, #160]	; (8002fc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002f24:	601a      	str	r2, [r3, #0]
        break;
 8002f26:	e054      	b.n	8002fd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	7f1b      	ldrb	r3, [r3, #28]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	461a      	mov	r2, r3
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f3a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f3c:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f48:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f4c:	4a17      	ldr	r2, [pc, #92]	; (8002fac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002f4e:	601a      	str	r2, [r3, #0]
        break;
 8002f50:	e03f      	b.n	8002fd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	7f1b      	ldrb	r3, [r3, #28]
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	461a      	mov	r2, r3
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	4a11      	ldr	r2, [pc, #68]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f64:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f66:	4a0f      	ldr	r2, [pc, #60]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f72:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f76:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002f78:	601a      	str	r2, [r3, #0]
        break;
 8002f7a:	e02a      	b.n	8002fd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	7f1b      	ldrb	r3, [r3, #28]
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	461a      	mov	r2, r3
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	4a06      	ldr	r2, [pc, #24]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	7f5a      	ldrb	r2, [r3, #29]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	7f9b      	ldrb	r3, [r3, #30]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d015      	beq.n	8002fc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002f9c:	4b01      	ldr	r3, [pc, #4]	; (8002fa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002fa0:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8002fa2:	e015      	b.n	8002fd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8002fa4:	52001000 	.word	0x52001000
 8002fa8:	0002000a 	.word	0x0002000a
 8002fac:	00020201 	.word	0x00020201
 8002fb0:	00020009 	.word	0x00020009
 8002fb4:	ffff00ef 	.word	0xffff00ef
 8002fb8:	0802c4cc 	.word	0x0802c4cc
 8002fbc:	0802c4e8 	.word	0x0802c4e8
 8002fc0:	0802c418 	.word	0x0802c418
 8002fc4:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8002fca:	f240 2201 	movw	r2, #513	; 0x201
 8002fce:	601a      	str	r2, [r3, #0]
        break;
 8002fd0:	bf00      	nop
    }
}
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	52001000 	.word	0x52001000

08002fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	7f9b      	ldrb	r3, [r3, #30]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fe47 	bl	8002c84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002ff6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002ff8:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	8adb      	ldrh	r3, [r3, #22]
 8003002:	461a      	mov	r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	8a9b      	ldrh	r3, [r3, #20]
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800300e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	8b5b      	ldrh	r3, [r3, #26]
 800301c:	461a      	mov	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	8a9b      	ldrh	r3, [r3, #20]
 8003022:	1ad2      	subs	r2, r2, r3
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d12e      	bne.n	800308e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	8b5b      	ldrh	r3, [r3, #26]
 8003034:	461a      	mov	r2, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	8a9b      	ldrh	r3, [r3, #20]
 800303a:	1ad2      	subs	r2, r2, r3
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800303e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	8b5b      	ldrh	r3, [r3, #26]
 8003044:	461a      	mov	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	8a9b      	ldrh	r3, [r3, #20]
 800304a:	1ad2      	subs	r2, r2, r3
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800304e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	7f1b      	ldrb	r3, [r3, #28]
 800305a:	061b      	lsls	r3, r3, #24
 800305c:	4619      	mov	r1, r3
 800305e:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003060:	4b16      	ldr	r3, [pc, #88]	; (80030bc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8003062:	430b      	orrs	r3, r1
 8003064:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	4c13      	ldr	r4, [pc, #76]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fbad 	bl	80027cc <_ZNK8touchgfx9colortypecvmEv>
 8003072:	4603      	mov	r3, r0
 8003074:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800307c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003084:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003088:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800308a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800308c:	e010      	b.n	80030b0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	330c      	adds	r3, #12
 800309e:	4c06      	ldr	r4, [pc, #24]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fb93 	bl	80027cc <_ZNK8touchgfx9colortypecvmEv>
 80030a6:	4603      	mov	r3, r0
 80030a8:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80030aa:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030ac:	4a05      	ldr	r2, [pc, #20]	; (80030c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 80030ae:	601a      	str	r2, [r3, #0]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd90      	pop	{r4, r7, pc}
 80030b8:	52001000 	.word	0x52001000
 80030bc:	00010009 	.word	0x00010009
 80030c0:	00020201 	.word	0x00020201
 80030c4:	00030201 	.word	0x00030201

080030c8 <_ZN8touchgfx5paint8tearDownEv>:
* @fn void tearDown();
*
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d000      	beq.n	80030e4 <_ZN8touchgfx5paint8tearDownEv+0x1c>
 80030e2:	e7f3      	b.n	80030cc <_ZN8touchgfx5paint8tearDownEv+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 80030e6:	2223      	movs	r2, #35	; 0x23
 80030e8:	609a      	str	r2, [r3, #8]
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	52001000 	.word	0x52001000

080030f8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003106:	4b23      	ldr	r3, [pc, #140]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d000      	beq.n	800311e <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x26>
 800311c:	e7f3      	b.n	8003106 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0xe>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003120:	2223      	movs	r2, #35	; 0x23
 8003122:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003126:	2201      	movs	r2, #1
 8003128:	635a      	str	r2, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	4a19      	ldr	r2, [pc, #100]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6453      	str	r3, [r2, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003136:	4a17      	ldr	r2, [pc, #92]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	63d3      	str	r3, [r2, #60]	; 0x3c

    if (alpha < 0xFF)
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	2bff      	cmp	r3, #255	; 0xff
 8003140:	d018      	beq.n	8003174 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x7c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003144:	2201      	movs	r2, #1
 8003146:	625a      	str	r2, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	4619      	mov	r1, r3
 800314e:	4a11      	ldr	r2, [pc, #68]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0xa0>)
 8003152:	430b      	orrs	r3, r1
 8003154:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003156:	4a0f      	ldr	r2, [pc, #60]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800315e:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8003160:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8003166:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 800316e:	4a0b      	ldr	r2, [pc, #44]	; (800319c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0xa4>)
 8003170:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 8003172:	e008      	b.n	8003186 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x8e>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003176:	2201      	movs	r2, #1
 8003178:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color);
 800317a:	4a06      	ldr	r2, [pc, #24]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0xa8>)
 8003184:	601a      	str	r2, [r3, #0]
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	52001000 	.word	0x52001000
 8003198:	00010009 	.word	0x00010009
 800319c:	00020001 	.word	0x00020001
 80031a0:	00030001 	.word	0x00030001

080031a4 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>:
    External_DMA2D_JobTypeDef& front()
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
        return buffer_[head_];
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	3302      	adds	r3, #2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4413      	add	r3, r2
    }
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>:
    void pop()
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
        head_ = (head_ + 1) % max_size_;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	3301      	adds	r3, #1
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80031da:	fb01 f202 	mul.w	r2, r1, r2
 80031de:	1a9a      	subs	r2, r3, r2
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	605a      	str	r2, [r3, #4]
        count_--;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	1e5a      	subs	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60da      	str	r2, [r3, #12]
    }
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	4a05      	ldr	r2, [pc, #20]	; (800321c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fae9 	bl	80027e4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	0802f5e4 	.word	0x0802f5e4

08003220 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff ffe7 	bl	80031fc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800322e:	2114      	movs	r1, #20
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f027 fb2e 	bl	802a892 <_ZdlPvj>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	805a      	strh	r2, [r3, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	809a      	strh	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	80da      	strh	r2, [r3, #6]
    {
    }
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8003278:	4a04      	ldr	r2, [pc, #16]	; (800328c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6013      	str	r3, [r2, #0]
    }
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	24027fd0 	.word	0x24027fd0

08003290 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
    {
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]
    }
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	0802e478 	.word	0x0802e478

080032b0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
    }
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ffe9 	bl	8003290 <_ZN8touchgfx12FontProviderD1Ev>
 80032be:	2104      	movs	r1, #4
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f027 fae6 	bl	802a892 <_ZdlPvj>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80032de:	4a0b      	ldr	r2, [pc, #44]	; (800330c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	611a      	str	r2, [r3, #16]
    {
    }
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	0802e468 	.word	0x0802e468

08003310 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
    {
 8003318:	4a04      	ldr	r2, [pc, #16]	; (800332c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	601a      	str	r2, [r3, #0]
    }
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	0802e468 	.word	0x0802e468

08003330 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
    }
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffe9 	bl	8003310 <_ZN8touchgfx7MVPHeapD1Ev>
 800333e:	2114      	movs	r1, #20
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f027 faa6 	bl	802a892 <_ZdlPvj>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
    {
    }
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
    {
    }
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
    {
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	601a      	str	r2, [r3, #0]
    }
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	0802e440 	.word	0x0802e440

080033f4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
    }
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ffe9 	bl	80033d4 <_ZN8touchgfx15UIEventListenerD1Ev>
 8003402:	2104      	movs	r1, #4
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f027 fa44 	bl	802a892 <_ZdlPvj>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    {
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	601a      	str	r2, [r3, #0]
    }
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	0802fc94 	.word	0x0802fc94

08003434 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    }
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ffe9 	bl	8003414 <_ZN8touchgfx3LCDD1Ev>
 8003442:	2108      	movs	r1, #8
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f027 fa24 	bl	802a892 <_ZdlPvj>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
    {
    }
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003492:	6810      	ldr	r0, [r2, #0]
 8003494:	6851      	ldr	r1, [r2, #4]
 8003496:	c303      	stmia	r3!, {r0, r1}
    }
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
    {
 80034ac:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
    }
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	0802e428 	.word	0x0802e428

080034c4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
    }
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ffe9 	bl	80034a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80034d2:	2104      	movs	r1, #4
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f027 f9dc 	bl	802a892 <_ZdlPvj>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
    MCUInstrumentation()
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
          cc_in(0)
 80034ec:	4a07      	ldr	r2, [pc, #28]	; (800350c <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
    }
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	0802e040 	.word	0x0802e040

08003510 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	805a      	strh	r2, [r3, #2]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	809a      	strh	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	80da      	strh	r2, [r3, #6]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	811a      	strh	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	815a      	strh	r2, [r3, #10]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	819a      	strh	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	739a      	strb	r2, [r3, #14]
        {
        }
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ffd5 	bl	8003510 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	611a      	str	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	829a      	strh	r2, [r3, #20]
    {
    }
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800358a:	4a55      	ldr	r2, [pc, #340]	; (80036e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	611a      	str	r2, [r3, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	615a      	str	r2, [r3, #20]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	619a      	str	r2, [r3, #24]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	331c      	adds	r3, #28
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ffcc 	bl	8003556 <_ZN8touchgfx8GesturesC1Ev>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	645a      	str	r2, [r3, #68]	; 0x44
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	64da      	str	r2, [r3, #76]	; 0x4c
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3350      	adds	r3, #80	; 0x50
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fe19 	bl	8003240 <_ZN8touchgfx4RectC1Ev>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	659a      	str	r2, [r3, #88]	; 0x58
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	65da      	str	r2, [r3, #92]	; 0x5c
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	661a      	str	r2, [r3, #96]	; 0x60
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	671a      	str	r2, [r3, #112]	; 0x70
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8003696:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800369c:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800369e:	8b3b      	ldrh	r3, [r7, #24]
 80036a0:	8013      	strh	r3, [r2, #0]
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80036a8:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80036aa:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80036ac:	8bbb      	ldrh	r3, [r7, #28]
 80036ae:	8013      	strh	r3, [r2, #0]
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80036b2:	881a      	ldrh	r2, [r3, #0]
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80036b6:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80036be:	8b3a      	ldrh	r2, [r7, #24]
 80036c0:	8bbb      	ldrh	r3, [r7, #28]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	bf34      	ite	cc
 80036c6:	2301      	movcc	r3, #1
 80036c8:	2300      	movcs	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	0802f4bc 	.word	0x0802f4bc
 80036e4:	24027f6c 	.word	0x24027f6c
 80036e8:	24027f60 	.word	0x24027f60
 80036ec:	24027f66 	.word	0x24027f66
 80036f0:	24027f62 	.word	0x24027f62
 80036f4:	24027f68 	.word	0x24027f68
 80036f8:	24027f64 	.word	0x24027f64

080036fc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	4a05      	ldr	r2, [pc, #20]	; (800371c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fe61 	bl	80033d4 <_ZN8touchgfx15UIEventListenerD1Ev>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	0802fcec 	.word	0x0802fcec

08003720 <_ZN8touchgfx11ApplicationD0Ev>:
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffe7 	bl	80036fc <_ZN8touchgfx11ApplicationD1Ev>
 800372e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f027 f8ad 	bl	802a892 <_ZdlPvj>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f804 	bl	8003758 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00f      	beq.n	800378a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4610      	mov	r0, r2
 800377e:	4798      	blx	r3
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00e      	beq.n	80037ae <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3308      	adds	r3, #8
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4610      	mov	r0, r2
 80037a4:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	4a05      	ldr	r2, [pc, #20]	; (80037d8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff97 	bl	80036fc <_ZN8touchgfx11ApplicationD1Ev>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	0802e3dc 	.word	0x0802e3dc

080037dc <_ZN8touchgfx14MVPApplicationD0Ev>:
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ffe7 	bl	80037b8 <_ZN8touchgfx14MVPApplicationD1Ev>
 80037ea:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f027 f84f 	bl	802a892 <_ZdlPvj>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	4a08      	ldr	r2, [pc, #32]	; (800382c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fb3d 	bl	8003e94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ffcb 	bl	80037b8 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	0802e378 	.word	0x0802e378

08003830 <_ZN23FrontendApplicationBaseD0Ev>:
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ffe1 	bl	8003800 <_ZN23FrontendApplicationBaseD1Ev>
 800383e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f027 f825 	bl	802a892 <_ZdlPvj>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
    {
        gotoAppScreenScreenNoTransition();
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f005 fca6 	bl	80091ac <_ZN23FrontendApplicationBase31gotoAppScreenScreenNoTransitionEv>
    }
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	4a05      	ldr	r2, [pc, #20]	; (8003888 <_ZN19FrontendApplicationD1Ev+0x20>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ffc1 	bl	8003800 <_ZN23FrontendApplicationBaseD1Ev>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	0802e32c 	.word	0x0802e32c

0800388c <_ZN19FrontendApplicationD0Ev>:
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ffe7 	bl	8003868 <_ZN19FrontendApplicationD1Ev>
 800389a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f026 fff7 	bl	802a892 <_ZdlPvj>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80038bc:	4618      	mov	r0, r3
 80038be:	f006 fbc3 	bl	800a048 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f01b fced 	bl	801f2a4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
    {
        app.gotoAppScreenScreenNoTransition();
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f005 fc64 	bl	80091ac <_ZN23FrontendApplicationBase31gotoAppScreenScreenNoTransitionEv>
    }
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	f7ff fce3 	bl	80032d0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]
    {

    }
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	0802e318 	.word	0x0802e318

08003920 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
 8003924:	4801      	ldr	r0, [pc, #4]	; (800392c <__tcf_0+0xc>)
 8003926:	f000 f985 	bl	8003c34 <_ZN12FrontendHeapD1Ev>
 800392a:	bd80      	pop	{r7, pc}
 800392c:	24005bcc 	.word	0x24005bcc

08003930 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	f3bf 8f5b 	dmb	ish
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d013      	beq.n	8003978 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003950:	480b      	ldr	r0, [pc, #44]	; (8003980 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003952:	f026 ffa0 	bl	802a896 <__cxa_guard_acquire>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003966:	4807      	ldr	r0, [pc, #28]	; (8003984 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003968:	f000 f868 	bl	8003a3c <_ZN12FrontendHeapC1Ev>
 800396c:	4806      	ldr	r0, [pc, #24]	; (8003988 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800396e:	f027 f989 	bl	802ac84 <atexit>
 8003972:	4803      	ldr	r0, [pc, #12]	; (8003980 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003974:	f026 ff9b 	bl	802a8ae <__cxa_guard_release>
        return instance;
 8003978:	4b02      	ldr	r3, [pc, #8]	; (8003984 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 800397a:	4618      	mov	r0, r3
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	24007c44 	.word	0x24007c44
 8003984:	24005bcc 	.word	0x24005bcc
 8003988:	08003921 	.word	0x08003921

0800398c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	4a05      	ldr	r2, [pc, #20]	; (80039ac <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fcb7 	bl	8003310 <_ZN8touchgfx7MVPHeapD1Ev>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	0802e318 	.word	0x0802e318

080039b0 <_ZN16FrontendHeapBaseD0Ev>:
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ffe7 	bl	800398c <_ZN16FrontendHeapBaseD1Ev>
 80039be:	2114      	movs	r1, #20
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f026 ff66 	bl	802a892 <_ZdlPvj>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	f016 f90c 	bl	8019bf8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80039e0:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	0802e2e4 	.word	0x0802e2e4

080039f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f016 f8fa 	bl	8019bf8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003a04:	4a03      	ldr	r2, [pc, #12]	; (8003a14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	0802e2b0 	.word	0x0802e2b0

08003a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f016 f8e8 	bl	8019bf8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003a28:	4a03      	ldr	r2, [pc, #12]	; (8003a38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	0802e27c 	.word	0x0802e27c

08003a3c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003a3c:	b5b0      	push	{r4, r5, r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f103 0414 	add.w	r4, r3, #20
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f641 7204 	movw	r2, #7940	; 0x1f04
 8003a58:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	f641 731c 	movw	r3, #7964	; 0x1f1c
 8003a60:	440b      	add	r3, r1
                     app(model, *this)
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	462a      	mov	r2, r5
 8003a68:	4621      	mov	r1, r4
 8003a6a:	f7ff ff3f 	bl	80038ec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3314      	adds	r3, #20
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ffa9 	bl	80039d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	332c      	adds	r3, #44	; 0x2c
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ffb6 	bl	80039f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	f641 7304 	movw	r3, #7940	; 0x1f04
 8003a8e:	4413      	add	r3, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ffc1 	bl	8003a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	f641 7318 	movw	r3, #7960	; 0x1f18
 8003a9c:	4413      	add	r3, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f006 fac4 	bl	800a02c <_ZN5ModelC1Ev>
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	f641 731c 	movw	r3, #7964	; 0x1f1c
 8003aaa:	4413      	add	r3, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	f641 7118 	movw	r1, #7960	; 0x1f18
 8003ab2:	4411      	add	r1, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f006 faa2 	bl	800a000 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	f641 731c 	movw	r3, #7964	; 0x1f1c
 8003ac4:	4413      	add	r3, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f7ff ff03 	bl	80038d2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	0802e268 	.word	0x0802e268

08003adc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	8bbb      	ldrh	r3, [r7, #28]
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	8b3b      	ldrh	r3, [r7, #24]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	f7ff fd3f 	bl	800357c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8003afe:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]
    }
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	0802e5c4 	.word	0x0802e5c4

08003b14 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>:
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fce0 	bl	80034e4 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 8003b24:	4a03      	ldr	r2, [pc, #12]	; (8003b34 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev+0x20>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	0802e018 	.word	0x0802e018

08003b38 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	8bbb      	ldrh	r3, [r7, #28]
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	8b3b      	ldrh	r3, [r7, #24]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	f7ff ffc1 	bl	8003adc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003b5a:	4a06      	ldr	r2, [pc, #24]	; (8003b74 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x3c>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	337c      	adds	r3, #124	; 0x7c
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ffd5 	bl	8003b14 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>
    }
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	0802e098 	.word	0x0802e098

08003b78 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	0802e080 	.word	0x0802e080

08003b98 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff ffe8 	bl	8003b78 <_ZN8touchgfx15TouchControllerC1Ev>
 8003ba8:	4a03      	ldr	r2, [pc, #12]	; (8003bb8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	0802e068 	.word	0x0802e068

08003bbc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003bc2:	f005 f8e1 	bl	8008d88 <_ZN14BitmapDatabase11getInstanceEv>
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	f005 f8e8 	bl	8008d9c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4619      	mov	r1, r3
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f01e fa1b 	bl	8022014 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003bde:	4809      	ldr	r0, [pc, #36]	; (8003c04 <touchgfx_init+0x48>)
 8003be0:	f7ff fb46 	bl	8003270 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003be4:	2000      	movs	r0, #0
 8003be6:	f005 fff7 	bl	8009bd8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003bea:	4807      	ldr	r0, [pc, #28]	; (8003c08 <touchgfx_init+0x4c>)
 8003bec:	f01e f8ca 	bl	8021d84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003bf0:	f7ff fe9e 	bl	8003930 <_ZN12FrontendHeap11getInstanceEv>
 8003bf4:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003bf6:	4805      	ldr	r0, [pc, #20]	; (8003c0c <touchgfx_init+0x50>)
 8003bf8:	f7fd fa74 	bl	80010e4 <_ZN11TouchGFXHAL10initializeEv>
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd90      	pop	{r4, r7, pc}
 8003c04:	24008a4c 	.word	0x24008a4c
 8003c08:	24000020 	.word	0x24000020
 8003c0c:	24008a50 	.word	0x24008a50

08003c10 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <touchgfx_taskEntry+0x10>)
 8003c26:	f7fd fa7b 	bl	8001120 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	24008a50 	.word	0x24008a50

08003c34 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	4a11      	ldr	r2, [pc, #68]	; (8003c84 <_ZN12FrontendHeapD1Ev+0x50>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	f641 731c 	movw	r3, #7964	; 0x1f1c
 8003c48:	4413      	add	r3, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fe0c 	bl	8003868 <_ZN19FrontendApplicationD1Ev>
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	f641 7304 	movw	r3, #7940	; 0x1f04
 8003c56:	4413      	add	r3, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f827 	bl	8003cac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	332c      	adds	r3, #44	; 0x2c
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f844 	bl	8003cf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 f863 	bl	8003d38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fe89 	bl	800398c <_ZN16FrontendHeapBaseD1Ev>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	0802e268 	.word	0x0802e268

08003c88 <_ZN12FrontendHeapD0Ev>:
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ffcf 	bl	8003c34 <_ZN12FrontendHeapD1Ev>
 8003c96:	f242 0178 	movw	r1, #8312	; 0x2078
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f026 fdf9 	bl	802a892 <_ZdlPvj>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f015 ff9a 	bl	8019bf6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	0802e27c 	.word	0x0802e27c

08003cd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ffe7 	bl	8003cac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003cde:	2114      	movs	r1, #20
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f026 fdd6 	bl	802a892 <_ZdlPvj>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	4a05      	ldr	r2, [pc, #20]	; (8003d10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f015 ff78 	bl	8019bf6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	0802e2b0 	.word	0x0802e2b0

08003d14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ffe7 	bl	8003cf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003d22:	f641 61d8 	movw	r1, #7896	; 0x1ed8
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f026 fdb3 	bl	802a892 <_ZdlPvj>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f015 ff54 	bl	8019bf6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	0802e2e4 	.word	0x0802e2e4

08003d5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ffe7 	bl	8003d38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003d6a:	2118      	movs	r1, #24
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f026 fd90 	bl	802a892 <_ZdlPvj>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	4a05      	ldr	r2, [pc, #20]	; (8003d9c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fa7f 	bl	8003290 <_ZN8touchgfx12FontProviderD1Ev>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	0802eb20 	.word	0x0802eb20

08003da0 <_ZN23ApplicationFontProviderD0Ev>:
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ffe7 	bl	8003d7c <_ZN23ApplicationFontProviderD1Ev>
 8003dae:	2104      	movs	r1, #4
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f026 fd6e 	bl	802a892 <_ZdlPvj>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fb1f 	bl	8003414 <_ZN8touchgfx3LCDD1Ev>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	08030000 	.word	0x08030000

08003de4 <_ZN8touchgfx8LCD24bppD0Ev>:
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ffe7 	bl	8003dc0 <_ZN8touchgfx8LCD24bppD1Ev>
 8003df2:	2158      	movs	r1, #88	; 0x58
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f026 fd4c 	bl	802a892 <_ZdlPvj>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_Z41__static_initialization_and_destruction_0ii>:
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d119      	bne.n	8003e48 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d114      	bne.n	8003e48 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003e1e:	4818      	ldr	r0, [pc, #96]	; (8003e80 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003e20:	f7ff feba 	bl	8003b98 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003e24:	4817      	ldr	r0, [pc, #92]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003e26:	f7fe fe53 	bl	8002ad0 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003e2a:	4817      	ldr	r0, [pc, #92]	; (8003e88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003e2c:	f020 fb3a 	bl	80244a4 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003e30:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003e40:	4910      	ldr	r1, [pc, #64]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003e42:	4812      	ldr	r0, [pc, #72]	; (8003e8c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003e44:	f7ff fe78 	bl	8003b38 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d113      	bne.n	8003e76 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10e      	bne.n	8003e76 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003e58:	480c      	ldr	r0, [pc, #48]	; (8003e8c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003e5a:	f7fd fa4d 	bl	80012f8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003e5e:	480c      	ldr	r0, [pc, #48]	; (8003e90 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003e60:	f7ff ff8c 	bl	8003d7c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8003e64:	4808      	ldr	r0, [pc, #32]	; (8003e88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003e66:	f7ff ffab 	bl	8003dc0 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 8003e6a:	4806      	ldr	r0, [pc, #24]	; (8003e84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003e6c:	f7fe fe6a 	bl	8002b44 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003e70:	4803      	ldr	r0, [pc, #12]	; (8003e80 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003e72:	f7fc fdfb 	bl	8000a6c <_ZN20STM32TouchControllerD1Ev>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	24007c48 	.word	0x24007c48
 8003e84:	24007c4c 	.word	0x24007c4c
 8003e88:	240089f4 	.word	0x240089f4
 8003e8c:	24008a50 	.word	0x24008a50
 8003e90:	24000020 	.word	0x24000020

08003e94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	4a05      	ldr	r2, [pc, #20]	; (8003eb4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fafd 	bl	80034a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	0802e3c4 	.word	0x0802e3c4

08003eb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ffe7 	bl	8003e94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003ec6:	2110      	movs	r1, #16
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f026 fce2 	bl	802a892 <_ZdlPvj>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003ee0:	2301      	movs	r3, #1
    }
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003ef6:	230c      	movs	r3, #12
    }
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003f10:	887a      	ldrh	r2, [r7, #2]
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4413      	add	r3, r2
    }
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003f38:	887a      	ldrh	r2, [r7, #2]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	3308      	adds	r3, #8
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4413      	add	r3, r2
    }
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003f5c:	2301      	movs	r3, #1
    }
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003f72:	f641 63d0 	movw	r3, #7888	; 0x1ed0
    }
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	f641 62d0 	movw	r2, #7888	; 0x1ed0
 8003f94:	fb02 f303 	mul.w	r3, r2, r3
 8003f98:	3308      	adds	r3, #8
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4413      	add	r3, r2
    }
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13AppScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003fb6:	887b      	ldrh	r3, [r7, #2]
 8003fb8:	f641 62d0 	movw	r2, #7888	; 0x1ed0
 8003fbc:	fb02 f303 	mul.w	r3, r2, r3
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
    }
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003fda:	2301      	movs	r3, #1
    }
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003ff0:	2310      	movs	r3, #16
    }
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <_ZN8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	460b      	mov	r3, r1
 8004008:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	3308      	adds	r3, #8
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	4413      	add	r3, r2
    }
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18AppScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	3308      	adds	r3, #8
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
    }
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68d2      	ldr	r2, [r2, #12]
 8004052:	1052      	asrs	r2, r2, #1
 8004054:	1899      	adds	r1, r3, r2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	e00a      	b.n	800407e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68d2      	ldr	r2, [r2, #12]
 8004070:	1052      	asrs	r2, r2, #1
 8004072:	4413      	add	r3, r2
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6892      	ldr	r2, [r2, #8]
 800407a:	4413      	add	r3, r2
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4608      	mov	r0, r1
 8004080:	4798      	blx	r3
    }
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d010      	beq.n	80040bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d107      	bne.n	80040b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80040b2:	2300      	movs	r3, #0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d001      	beq.n	80040bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80040bc:	2300      	movs	r3, #0
    }
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <_GLOBAL__sub_I_touchgfx_init>:
 80040ca:	b580      	push	{r7, lr}
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040d2:	2001      	movs	r0, #1
 80040d4:	f7ff fe96 	bl	8003e04 <_Z41__static_initialization_and_destruction_0ii>
 80040d8:	bd80      	pop	{r7, pc}

080040da <_GLOBAL__sub_D_touchgfx_init>:
 80040da:	b580      	push	{r7, lr}
 80040dc:	af00      	add	r7, sp, #0
 80040de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040e2:	2000      	movs	r0, #0
 80040e4:	f7ff fe8e 	bl	8003e04 <_Z41__static_initialization_and_destruction_0ii>
 80040e8:	bd80      	pop	{r7, pc}

080040ea <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
        : color(col)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	601a      	str	r2, [r3, #0]
    }
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	4608      	mov	r0, r1
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	4603      	mov	r3, r0
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	460b      	mov	r3, r1
 800411c:	813b      	strh	r3, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	897a      	ldrh	r2, [r7, #10]
 8004126:	801a      	strh	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	893a      	ldrh	r2, [r7, #8]
 800412c:	805a      	strh	r2, [r3, #2]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	88fa      	ldrh	r2, [r7, #6]
 8004132:	809a      	strh	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8b3a      	ldrh	r2, [r7, #24]
 8004138:	80da      	strh	r2, [r3, #6]
    {
    }
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
    {
 8004150:	4a04      	ldr	r2, [pc, #16]	; (8004164 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	601a      	str	r2, [r3, #0]
    }
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	0802fd38 	.word	0x0802fd38

08004168 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
    }
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ffe9 	bl	8004148 <_ZN8touchgfx8DrawableD1Ev>
 8004176:	2128      	movs	r1, #40	; 0x28
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f026 fb8a 	bl	802a892 <_ZdlPvj>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3314      	adds	r3, #20
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
        }
    }
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80041b6:	2300      	movs	r3, #0
    }
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	887a      	ldrh	r2, [r7, #2]
 8004208:	809a      	strh	r2, [r3, #4]
    }
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	460b      	mov	r3, r1
 8004220:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	887a      	ldrh	r2, [r7, #2]
 8004226:	80da      	strh	r2, [r3, #6]
    }
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	811a      	strh	r2, [r3, #8]
    }
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	887a      	ldrh	r2, [r7, #2]
 8004262:	815a      	strh	r2, [r3, #10]
    }
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
    {
    }
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
    {
    }
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	807b      	strh	r3, [r7, #2]
 800431a:	4613      	mov	r3, r2
 800431c:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3354      	adds	r3, #84	; 0x54
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	8879      	ldrh	r1, [r7, #2]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800432e:	b292      	uxth	r2, r2
 8004330:	1a8a      	subs	r2, r1, r2
 8004332:	b292      	uxth	r2, r2
 8004334:	b210      	sxth	r0, r2
 8004336:	8839      	ldrh	r1, [r7, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800433e:	b292      	uxth	r2, r2
 8004340:	1a8a      	subs	r2, r1, r2
 8004342:	b292      	uxth	r2, r2
 8004344:	b212      	sxth	r2, r2
 8004346:	4601      	mov	r1, r0
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
    }
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004362:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800436a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004372:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff ffe1 	bl	8004354 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	601a      	str	r2, [r3, #0]
    }
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3320      	adds	r3, #32
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4798      	blx	r3
    }
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e4:	e002      	b.n	80043ec <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 80043e6:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
    }
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	24027f6c 	.word	0x24027f6c

080043fc <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004424:	3301      	adds	r3, #1
 8004426:	b2da      	uxtb	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	607b      	str	r3, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	817b      	strh	r3, [r7, #10]
 8004460:	4613      	mov	r3, r2
 8004462:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ff37 	bl	80042da <_ZNK8touchgfx8Drawable9isVisibleEv>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff ff3d 	bl	80042f4 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
        }
    }
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	4a05      	ldr	r2, [pc, #20]	; (80044b8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fe4d 	bl	8004148 <_ZN8touchgfx8DrawableD1Ev>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	0802e55c 	.word	0x0802e55c

080044bc <_ZN8touchgfx6WidgetD0Ev>:
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ffe7 	bl	8004498 <_ZN8touchgfx6WidgetD1Ev>
 80044ca:	2128      	movs	r1, #40	; 0x28
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f026 f9e0 	bl	802a892 <_ZdlPvj>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 80044e4:	4a06      	ldr	r2, [pc, #24]	; (8004500 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	809a      	strh	r2, [r3, #4]
    {
    }
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	0802e53c 	.word	0x0802e53c

08004504 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
    {
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]
    }
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	0802e53c 	.word	0x0802e53c

08004524 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
    }
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff ffe9 	bl	8004504 <_ZN8touchgfx15AbstractPainterD1Ev>
 8004532:	2108      	movs	r1, #8
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f026 f9ac 	bl	802a892 <_ZdlPvj>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800454c:	2300      	movs	r3, #0
    }
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	809a      	strh	r2, [r3, #4]
        return true;
 800456e:	2301      	movs	r3, #1
    }
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
    {
        return;
 8004584:	bf00      	nop
    }
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80045ca:	b590      	push	{r4, r7, lr}
 80045cc:	b085      	sub	sp, #20
 80045ce:	af02      	add	r7, sp, #8
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fdf4 	bl	80041c4 <_ZNK8touchgfx8Drawable8getWidthEv>
 80045dc:	4603      	mov	r3, r0
 80045de:	461c      	mov	r4, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fdfb 	bl	80041de <_ZNK8touchgfx8Drawable9getHeightEv>
 80045e8:	4603      	mov	r3, r0
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	4623      	mov	r3, r4
 80045ee:	2200      	movs	r2, #0
 80045f0:	2100      	movs	r1, #0
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fd88 	bl	8004108 <_ZN8touchgfx4RectC1Essss>
    }
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd90      	pop	{r4, r7, pc}

08004600 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fe fe18 	bl	8003240 <_ZN8touchgfx4RectC1Ev>
    }
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
    {
 8004622:	4a08      	ldr	r2, [pc, #32]	; (8004644 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe f8bf 	bl	80027b0 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 8004632:	6839      	ldr	r1, [r7, #0]
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f827 	bl	8004688 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	0802e528 	.word	0x0802e528

08004648 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    {
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	601a      	str	r2, [r3, #0]
    }
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	0802e528 	.word	0x0802e528

08004668 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
    }
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ffe9 	bl	8004648 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8004676:	2108      	movs	r1, #8
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f026 f90a 	bl	802a892 <_ZdlPvj>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	605a      	str	r2, [r3, #4]
    }
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff ff14 	bl	80044dc <_ZN8touchgfx15AbstractPainterC1Ev>
 80046b4:	4a26      	ldr	r2, [pc, #152]	; (8004750 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80046be:	f7ff fe81 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 80046c2:	4603      	mov	r3, r0
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	322c      	adds	r2, #44	; 0x2c
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	4790      	blx	r2
 80046ce:	4603      	mov	r3, r0
 80046d0:	461a      	mov	r2, r3
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80046de:	f7fc fb61 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff fea8 	bl	800443a <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01b      	beq.n	8004732 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80046fa:	f7fc fb53 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 80046fe:	4603      	mov	r3, r0
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fe9a 	bl	800443a <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8004706:	4603      	mov	r3, r0
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	322c      	adds	r2, #44	; 0x2c
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	4790      	blx	r2
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	4293      	cmp	r3, r2
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2da      	uxtb	r2, r3
 8004722:	7bbb      	ldrb	r3, [r7, #14]
 8004724:	4313      	orrs	r3, r2
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8004732:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa0>
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 800473a:	4a07      	ldr	r2, [pc, #28]	; (8004758 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 800473c:	2127      	movs	r1, #39	; 0x27
 800473e:	4807      	ldr	r0, [pc, #28]	; (800475c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8004740:	f026 fa82 	bl	802ac48 <__assert_func>
 8004744:	bf00      	nop
    }
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	0802e508 	.word	0x0802e508
 8004754:	0802c6a0 	.word	0x0802c6a0
 8004758:	0802c700 	.word	0x0802c700
 800475c:	0802c73c 	.word	0x0802c73c

08004760 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	4a05      	ldr	r2, [pc, #20]	; (8004780 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fec7 	bl	8004504 <_ZN8touchgfx15AbstractPainterD1Ev>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	0802e508 	.word	0x0802e508

08004784 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ffe7 	bl	8004760 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8004792:	2108      	movs	r1, #8
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f026 f87c 	bl	802a892 <_ZdlPvj>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ff77 	bl	80046a4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3308      	adds	r3, #8
 80047ba:	6839      	ldr	r1, [r7, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff ff2b 	bl	8004618 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 80047c2:	4a05      	ldr	r2, [pc, #20]	; (80047d8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x34>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	4a04      	ldr	r2, [pc, #16]	; (80047dc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x38>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	609a      	str	r2, [r3, #8]
    {
    }
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	0802f738 	.word	0x0802f738
 80047dc:	0802f75c 	.word	0x0802f75c

080047e0 <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
    {
 80047e8:	4a04      	ldr	r2, [pc, #16]	; (80047fc <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
    }
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	0802e4cc 	.word	0x0802e4cc

08004800 <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
    }
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff ffe9 	bl	80047e0 <_ZN8touchgfx15VideoControllerD1Ev>
 800480e:	2104      	movs	r1, #4
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f026 f83e 	bl	802a892 <_ZdlPvj>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>:
    void addDMA(touchgfx::DMA_Interface& dma)
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
    {
        pDma = &dma;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4603      	mov	r3, r0
 8004868:	72fb      	strb	r3, [r7, #11]
 800486a:	460b      	mov	r3, r1
 800486c:	813b      	strh	r3, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	7afa      	ldrb	r2, [r7, #11]
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	893a      	ldrh	r2, [r7, #8]
 800487e:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <__NVIC_EnableIRQ>:
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800489e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	db0b      	blt.n	80048be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	f003 021f 	and.w	r2, r3, #31
 80048ac:	4907      	ldr	r1, [pc, #28]	; (80048cc <__NVIC_EnableIRQ+0x38>)
 80048ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	2001      	movs	r0, #1
 80048b6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	e000e100 	.word	0xe000e100

080048d0 <__NVIC_DisableIRQ>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	db12      	blt.n	8004908 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	f003 021f 	and.w	r2, r3, #31
 80048e8:	490a      	ldr	r1, [pc, #40]	; (8004914 <__NVIC_DisableIRQ+0x44>)
 80048ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	2001      	movs	r0, #1
 80048f2:	fa00 f202 	lsl.w	r2, r0, r2
 80048f6:	3320      	adds	r3, #32
 80048f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80048fc:	f3bf 8f4f 	dsb	sy
}
 8004900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004902:	f3bf 8f6f 	isb	sy
}
 8004906:	bf00      	nop
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000e100 	.word	0xe000e100

08004918 <__NVIC_SetPriority>:
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	6039      	str	r1, [r7, #0]
 8004922:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004928:	2b00      	cmp	r3, #0
 800492a:	db0a      	blt.n	8004942 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	490c      	ldr	r1, [pc, #48]	; (8004964 <__NVIC_SetPriority+0x4c>)
 8004932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004936:	0112      	lsls	r2, r2, #4
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	440b      	add	r3, r1
 800493c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004940:	e00a      	b.n	8004958 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4908      	ldr	r1, [pc, #32]	; (8004968 <__NVIC_SetPriority+0x50>)
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	3b04      	subs	r3, #4
 8004950:	0112      	lsls	r2, r2, #4
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	440b      	add	r3, r1
 8004956:	761a      	strb	r2, [r3, #24]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000e100 	.word	0xe000e100
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	4a05      	ldr	r2, [pc, #20]	; (800498c <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fd8b 	bl	8004498 <_ZN8touchgfx6WidgetD1Ev>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	0802f770 	.word	0x0802f770

08004990 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ffe7 	bl	800496c <_ZN8touchgfx12CanvasWidgetD1Ev>
 800499e:	212c      	movs	r1, #44	; 0x2c
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f025 ff76 	bl	802a892 <_ZdlPvj>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80049b0:	b5b0      	push	{r4, r5, r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f015 fdb3 	bl	801a526 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80049c0:	687d      	ldr	r5, [r7, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3364      	adds	r3, #100	; 0x64
 80049c8:	681c      	ldr	r4, [r3, #0]
 80049ca:	f01a fbcf 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 80049ce:	4603      	mov	r3, r0
 80049d0:	4619      	mov	r1, r3
 80049d2:	4628      	mov	r0, r5
 80049d4:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3388      	adds	r3, #136	; 0x88
 80049de:	681c      	ldr	r4, [r3, #0]
 80049e0:	4a0b      	ldr	r2, [pc, #44]	; (8004a10 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80049e2:	2300      	movs	r3, #0
 80049e4:	490b      	ldr	r1, [pc, #44]	; (8004a14 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 80049e6:	47a0      	blx	r4

    /*
     * Add DMA2D to hardware decoder
     */
    mjpegdecoder1.addDMA(dma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4619      	mov	r1, r3
 80049ee:	480a      	ldr	r0, [pc, #40]	; (8004a18 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80049f0:	f7ff ff16 	bl	8004820 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>

    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 80049f4:	2200      	movs	r2, #0
 80049f6:	4908      	ldr	r1, [pc, #32]	; (8004a18 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80049f8:	4808      	ldr	r0, [pc, #32]	; (8004a1c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 80049fa:	f000 fa45 	bl	8004e88 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 80049fe:	4a08      	ldr	r2, [pc, #32]	; (8004a20 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 8004a00:	4908      	ldr	r1, [pc, #32]	; (8004a24 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 8004a02:	4806      	ldr	r0, [pc, #24]	; (8004a1c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 8004a04:	f000 fa60 	bl	8004ec8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a10:	2409fa00 	.word	0x2409fa00
 8004a14:	24040000 	.word	0x24040000
 8004a18:	24008ad8 	.word	0x24008ad8
 8004a1c:	24008b20 	.word	0x24008b20
 8004a20:	0005fa00 	.word	0x0005fa00
 8004a24:	d0000000 	.word	0xd0000000

08004a28 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8004a30:	2109      	movs	r1, #9
 8004a32:	205a      	movs	r0, #90	; 0x5a
 8004a34:	f7ff ff70 	bl	8004918 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8004a38:	2109      	movs	r1, #9
 8004a3a:	2058      	movs	r0, #88	; 0x58
 8004a3c:	f7ff ff6c 	bl	8004918 <__NVIC_SetPriority>
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8004a50:	205a      	movs	r0, #90	; 0x5a
 8004a52:	f7ff ff1f 	bl	8004894 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8004a56:	2058      	movs	r0, #88	; 0x58
 8004a58:	f7ff ff1c 	bl	8004894 <__NVIC_EnableIRQ>
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8004a6c:	205a      	movs	r0, #90	; 0x5a
 8004a6e:	f7ff ff2f 	bl	80048d0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8004a72:	2058      	movs	r0, #88	; 0x58
 8004a74:	f7ff ff2c 	bl	80048d0 <__NVIC_DisableIRQ>
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004a9a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8004aae:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8004ab0:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004ab2:	881a      	ldrh	r2, [r3, #0]
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	4a04      	ldr	r2, [pc, #16]	; (8004ad0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	50001000 	.word	0x50001000
 8004ad4:	24008b6a 	.word	0x24008b6a
 8004ad8:	24008b6c 	.word	0x24008b6c

08004adc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f015 fd04 	bl	801a4f4 <_ZN8touchgfx3HAL10beginFrameEv>
 8004aec:	4603      	mov	r3, r0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f015 fcfa 	bl	801a50c <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 8004b18:	4804      	ldr	r0, [pc, #16]	; (8004b2c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 8004b1a:	f000 f9eb 	bl	8004ef4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	24008b68 	.word	0x24008b68
 8004b2c:	24008b20 	.word	0x24008b20

08004b30 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	50001084 	.word	0x50001084

08004b4c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8004b56:	4a06      	ldr	r2, [pc, #24]	; (8004b70 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	50001084 	.word	0x50001084
 8004b74:	50001000 	.word	0x50001000

08004b78 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6839      	ldr	r1, [r7, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f015 fc7e 	bl	801a488 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	f015 fdd8 	bl	801a75e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8004bae:	4603      	mov	r3, r0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004bc0:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03c      	beq.n	8004c50 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004bd6:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004bde:	f3bf 8f4f 	dsb	sy
}
 8004be2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004be4:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bea:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	0b5b      	lsrs	r3, r3, #13
 8004bf0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004bf4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	08db      	lsrs	r3, r3, #3
 8004bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bfe:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004c08:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004c0e:	4913      	ldr	r1, [pc, #76]	; (8004c5c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1e5a      	subs	r2, r3, #1
 8004c1a:	60fa      	str	r2, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d000      	beq.n	8004c2c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8004c2a:	e7e9      	b.n	8004c00 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1e5a      	subs	r2, r3, #1
 8004c30:	613a      	str	r2, [r7, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bf14      	ite	ne
 8004c36:	2301      	movne	r3, #1
 8004c38:	2300      	moveq	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d000      	beq.n	8004c42 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8004c40:	e7d9      	b.n	8004bf6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004c42:	f3bf 8f4f 	dsb	sy
}
 8004c46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c48:	f3bf 8f6f 	isb	sy
}
 8004c4c:	bf00      	nop
}
 8004c4e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8004c50:	bf00      	nop
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004c68:	4b26      	ldr	r3, [pc, #152]	; (8004d04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf14      	ite	ne
 8004c74:	2301      	movne	r3, #1
 8004c76:	2300      	moveq	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03c      	beq.n	8004cf8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004c7e:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004c86:	f3bf 8f4f 	dsb	sy
}
 8004c8a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c92:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	0b5b      	lsrs	r3, r3, #13
 8004c98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004c9c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	08db      	lsrs	r3, r3, #3
 8004ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca6:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004cb0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004cb6:	4913      	ldr	r1, [pc, #76]	; (8004d04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1e5a      	subs	r2, r3, #1
 8004cc2:	60fa      	str	r2, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d000      	beq.n	8004cd4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8004cd2:	e7e9      	b.n	8004ca8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1e5a      	subs	r2, r3, #1
 8004cd8:	613a      	str	r2, [r7, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf14      	ite	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	2300      	moveq	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d000      	beq.n	8004cea <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8004ce8:	e7d9      	b.n	8004c9e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004cea:	f3bf 8f4f 	dsb	sy
}
 8004cee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cf0:	f3bf 8f6f 	isb	sy
}
 8004cf4:	bf00      	nop
}
 8004cf6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8004cf8:	bf00      	nop
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <videoTaskFunc>:

extern "C" void videoTaskFunc(void* argument)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
    videoController.decoderTaskEntry();
 8004d10:	4803      	ldr	r0, [pc, #12]	; (8004d20 <videoTaskFunc+0x18>)
 8004d12:	f000 f934 	bl	8004f7e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	24008b20 	.word	0x24008b20

08004d24 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8004d2c:	f7fc f83a 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d132      	bne.n	8004da6 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8004d40:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <HAL_LTDC_LineEventCallback+0x8c>)
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <HAL_LTDC_LineEventCallback+0x90>)
 8004d46:	8812      	ldrh	r2, [r2, #0]
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d017      	beq.n	8004d86 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_LTDC_LineEventCallback+0x94>)
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f00b feab 	bl	8010ab8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8004d62:	f7fc f81f 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 8004d66:	4603      	mov	r3, r0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fb54 	bl	8004416 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8004d6e:	f7fd fcb5 	bl	80026dc <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8004d72:	f7fc f817 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f016 f91b 	bl	801afb4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f7fb febc 	bl	8000afc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8004d84:	e010      	b.n	8004da8 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <HAL_LTDC_LineEventCallback+0x90>)
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f00b fe93 	bl	8010ab8 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8004d92:	f7fc f807 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fb05 	bl	80043a8 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7fb ff0a 	bl	8000bb8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8004da4:	e000      	b.n	8004da8 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8004da6:	bf00      	nop
        }
    }
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	50001000 	.word	0x50001000
 8004db4:	24008b6a 	.word	0x24008b6a
 8004db8:	24008b6c 	.word	0x24008b6c

08004dbc <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	0802e4cc 	.word	0x0802e4cc

08004ddc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 8004ddc:	b5b0      	push	{r4, r5, r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff ffe8 	bl	8004dbc <_ZN8touchgfx15VideoControllerC1Ev>
 8004dec:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0xa8>)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	330c      	adds	r3, #12
 8004df6:	2400      	movs	r4, #0
 8004df8:	461d      	mov	r5, r3
 8004dfa:	2c00      	cmp	r4, #0
 8004dfc:	db05      	blt.n	8004e0a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x2e>
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 f971 	bl	80050e6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 8004e04:	3524      	adds	r5, #36	; 0x24
 8004e06:	3c01      	subs	r4, #1
 8004e08:	e7f7      	b.n	8004dfa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev+0x1e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	635a      	str	r2, [r3, #52]	; 0x34
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3308      	adds	r3, #8
 8004e44:	2204      	movs	r2, #4
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f025 ff8d 	bl	802ad68 <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
 8004e52:	2204      	movs	r2, #4
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f025 ff86 	bl	802ad68 <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2100      	movs	r1, #0
 8004e60:	2001      	movs	r0, #1
 8004e62:	f010 fd92 	bl	801598a <osSemaphoreNew>
 8004e66:	4602      	mov	r2, r0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	f010 fc7e 	bl	801576e <osMutexNew>
 8004e72:	4602      	mov	r2, r0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bdb0      	pop	{r4, r5, r7, pc}
 8004e82:	bf00      	nop
 8004e84:	0802e48c 	.word	0x0802e48c

08004e88 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d006      	beq.n	8004ea8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x20>
 8004e9a:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x34>)
 8004e9c:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x38>)
 8004e9e:	f240 1103 	movw	r1, #259	; 0x103
 8004ea2:	4808      	ldr	r0, [pc, #32]	; (8004ec4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10addDecoderER12MJPEGDecoderm+0x3c>)
 8004ea4:	f025 fed0 	bl	802ac48 <__assert_func>
        mjpegDecoders[index] = &decoder;
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	605a      	str	r2, [r3, #4]
    }
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	0802c7a0 	.word	0x0802c7a0
 8004ec0:	0802c7b4 	.word	0x0802c7b4
 8004ec4:	0802c91c 	.word	0x0802c91c

08004ec8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv>:

    void endFrame()
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d120      	bne.n	8004f48 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	3308      	adds	r3, #8
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	3304      	adds	r3, #4
 8004f18:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	7f5b      	ldrb	r3, [r3, #29]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x36>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	7f9b      	ldrb	r3, [r3, #30]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f912 	bl	8005156 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e7db      	b.n	8004f00 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	4618      	mov	r0, r3
 8004f56:	f010 fdf3 	bl	8015b40 <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f010 fcd1 	bl	8015910 <osMutexRelease>
            uiHasMutex = false;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:

    void decoderTaskEntry()
 8004f7e:	b590      	push	{r4, r7, lr}
 8004f80:	b08b      	sub	sp, #44	; 0x2c
 8004f82:	af02      	add	r7, sp, #8
 8004f84:	6078      	str	r0, [r7, #4]
        // Running in Decoder thread!!

        while (1)
        {
            // Wait for synchronisation signal from UI thread
            SEM_WAIT(semDecode);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f010 fd84 	bl	8015a9c <osSemaphoreAcquire>

            // Lock out the UI by taking the mutex
            MUTEX_LOCK(mutexBuffers);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f98:	f04f 31ff 	mov.w	r1, #4294967295
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f010 fc6c 	bl	801587a <osMutexAcquire>

            // Update stream flags
            for (uint32_t i = 0; i < no_streams; i++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d115      	bne.n	8004fd8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5a>
            {
                Stream& stream = streams[i];
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4413      	add	r3, r2
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	617b      	str	r3, [r7, #20]
                if (stream.doDecode)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x52>
                {
                    stream.doInvalidateOnNextTick = true;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	77da      	strb	r2, [r3, #31]
            for (uint32_t i = 0; i < no_streams; i++)
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e7e6      	b.n	8004fa6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x28>
                }
            }

            // Now decode all streams marked for invalidation in next tick
            for (uint32_t i = 0; i < no_streams; i++)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61bb      	str	r3, [r7, #24]
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d17b      	bne.n	80050da <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x15c>
            {
                Stream& stream = streams[i];
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	3308      	adds	r3, #8
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	613b      	str	r3, [r7, #16]
                if (stream.doDecode)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d068      	beq.n	80050d2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x154>
                {
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	60fb      	str	r3, [r7, #12]
                    // Seek or increment video frame
                    if (stream.seek_to_frame > 0)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00c      	beq.n	800502e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xb0>
                    {
                        decoder->gotoFrame(stream.seek_to_frame);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3324      	adds	r3, #36	; 0x24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	6952      	ldr	r2, [r2, #20]
 8005020:	4611      	mov	r1, r2
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2200      	movs	r2, #0
 800502a:	615a      	str	r2, [r3, #20]
 800502c:	e01e      	b.n	800506c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                    }
                    else
                    {
                        if (stream.skip_frames > 0)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01a      	beq.n	800506c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xee>
                        {
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3324      	adds	r3, #36	; 0x24
 800503c:	681c      	ldr	r4, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3328      	adds	r3, #40	; 0x28
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	4798      	blx	r3
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	4413      	add	r3, r2
 8005052:	4619      	mov	r1, r3
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	47a0      	blx	r4
                            stream.frameCount += stream.skip_frames;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	441a      	add	r2, r3
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	605a      	str	r2, [r3, #4]
                            stream.skip_frames = 0;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2200      	movs	r2, #0
 800506a:	619a      	str	r2, [r3, #24]
                        }
                    }

                    // Decode frame
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3314      	adds	r3, #20
 8005072:	681c      	ldr	r4, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	3202      	adds	r2, #2
 800507a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800507e:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005088:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	47a0      	blx	r4
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f883 2020 	strb.w	r2, [r3, #32]
                    stream.frameCount++;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	605a      	str	r2, [r3, #4]

                    // Update frame number
                    if (stream.hasMoreFrames)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x146>
                    {
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3328      	adds	r3, #40	; 0x28
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	4798      	blx	r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	1e5a      	subs	r2, r3, #1
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e002      	b.n	80050ca <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x14c>
                    }
                    else
                    {
                        stream.frameNumber = 1;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
                    }
                    stream.doDecode = false;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            for (uint32_t i = 0; i < no_streams; i++)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	e780      	b.n	8004fdc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x5e>
                }
            }

            // Release the stream and decode buffer and let UI continue
            MUTEX_UNLOCK(mutexBuffers);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	4618      	mov	r0, r3
 80050e0:	f010 fc16 	bl	8015910 <osMutexRelease>
        while (1)
 80050e4:	e74f      	b.n	8004f86 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x8>

080050e6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
            seek_to_frame(0), skip_frames(0),
            isActive(false), isPlaying(false), isShowingOneFrame(false),
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	609a      	str	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	611a      	str	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	615a      	str	r2, [r3, #20]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	619a      	str	r2, [r3, #24]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	771a      	strb	r2, [r3, #28]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	775a      	strb	r2, [r3, #29]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	779a      	strb	r2, [r3, #30]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	77da      	strb	r2, [r3, #31]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2020 	strb.w	r2, [r3, #32]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	68d2      	ldr	r2, [r2, #12]
 8005168:	fb03 f202 	mul.w	r2, r3, r2
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	6849      	ldr	r1, [r1, #4]
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	429a      	cmp	r2, r3
 800517a:	d322      	bcc.n	80051c2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01b      	beq.n	80051be <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	68d2      	ldr	r2, [r2, #12]
 800518e:	fb03 f202 	mul.w	r2, r3, r2
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6849      	ldr	r1, [r1, #4]
 800519a:	fb01 f303 	mul.w	r3, r1, r3
 800519e:	1ad2      	subs	r2, r2, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	1e5a      	subs	r2, r3, #1
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 80051c2:	2300      	movs	r3, #0
    }
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	4a05      	ldr	r2, [pc, #20]	; (80051f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev+0x20>)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff fafd 	bl	80047e0 <_ZN8touchgfx15VideoControllerD1Ev>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	0802e48c 	.word	0x0802e48c

080051f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff ffe7 	bl	80051d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
 8005202:	2148      	movs	r1, #72	; 0x48
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f025 fb44 	bl	802a892 <_ZdlPvj>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <_Z41__static_initialization_and_destruction_0ii>:
}
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d10a      	bne.n	800523a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800522a:	4293      	cmp	r3, r2
 800522c:	d105      	bne.n	800523a <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 800522e:	480c      	ldr	r0, [pc, #48]	; (8005260 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005230:	f7fc f8d4 	bl	80013dc <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 480, 272, 480 * 3U, Bitmap::RGB888> videoController;
 8005234:	480b      	ldr	r0, [pc, #44]	; (8005264 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005236:	f7ff fdd1 	bl	8004ddc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EEC1Ev>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005246:	4293      	cmp	r3, r2
 8005248:	d105      	bne.n	8005256 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800524a:	4806      	ldr	r0, [pc, #24]	; (8005264 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800524c:	f7ff ffc0 	bl	80051d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8005250:	4803      	ldr	r0, [pc, #12]	; (8005260 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005252:	f7fd f99d 	bl	8002590 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	24008ad8 	.word	0x24008ad8
 8005264:	24008b20 	.word	0x24008b20

08005268 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888, public AbstractPainterColor
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	4a09      	ldr	r2, [pc, #36]	; (8005298 <_ZN8touchgfx13PainterRGB888D1Ev+0x30>)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <_ZN8touchgfx13PainterRGB888D1Ev+0x34>)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3308      	adds	r3, #8
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff f9e1 	bl	8004648 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff fa69 	bl	8004760 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	0802f738 	.word	0x0802f738
 800529c:	0802f75c 	.word	0x0802f75c

080052a0 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 80052a0:	f1a0 0008 	sub.w	r0, r0, #8
 80052a4:	e7e0      	b.n	8005268 <_ZN8touchgfx13PainterRGB888D1Ev>
 80052a6:	bf00      	nop

080052a8 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ffd9 	bl	8005268 <_ZN8touchgfx13PainterRGB888D1Ev>
 80052b6:	2114      	movs	r1, #20
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f025 faea 	bl	802a892 <_ZdlPvj>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 80052c8:	f1a0 0008 	sub.w	r0, r0, #8
 80052cc:	e7ec      	b.n	80052a8 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

080052d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 80052da:	4b1f      	ldr	r3, [pc, #124]	; (8005358 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 80052dc:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa82 	bl	80057e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>
 80052e4:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	3328      	adds	r3, #40	; 0x28
 80052f6:	2201      	movs	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fe:	4b16      	ldr	r3, [pc, #88]	; (8005358 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8005300:	4413      	add	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800530a:	440a      	add	r2, r1
 800530c:	4293      	cmp	r3, r2
 800530e:	d905      	bls.n	800531c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4c>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8005310:	4b12      	ldr	r3, [pc, #72]	; (800535c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 8005312:	4a13      	ldr	r2, [pc, #76]	; (8005360 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 8005314:	2152      	movs	r1, #82	; 0x52
 8005316:	4813      	ldr	r0, [pc, #76]	; (8005364 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x94>)
 8005318:	f025 fc96 	bl	802ac48 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	3202      	adds	r2, #2
 8005326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8005330:	4413      	add	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6393      	str	r3, [r2, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8005336:	f44f 7388 	mov.w	r3, #272	; 0x110
 800533a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800533e:	2101      	movs	r1, #1
 8005340:	6838      	ldr	r0, [r7, #0]
 8005342:	f7ff fa89 	bl	8004858 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8005346:	2100      	movs	r1, #0
 8005348:	6838      	ldr	r0, [r7, #0]
 800534a:	f7ff fa77 	bl	800483c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 800534e:	68bb      	ldr	r3, [r7, #8]
    }
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	0005fa00 	.word	0x0005fa00
 800535c:	0802c960 	.word	0x0802c960
 8005360:	0802c99c 	.word	0x0802c99c
 8005364:	0802c91c 	.word	0x0802c91c

08005368 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	f04f 31ff 	mov.w	r1, #4294967295
 800537a:	4618      	mov	r0, r3
 800537c:	f010 fa7d 	bl	801587a <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005384:	4618      	mov	r0, r3
 8005386:	f010 fac3 	bl	8015910 <osMutexRelease>
        streams[handle].isActive = false;
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	4613      	mov	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	3328      	adds	r3, #40	; 0x28
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d114      	bne.n	80053d6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	3328      	adds	r3, #40	; 0x28
 80053bc:	781a      	ldrb	r2, [r3, #0]
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bf14      	ite	ne
 80053c8:	2301      	movne	r3, #1
 80053ca:	2300      	moveq	r3, #0
 80053cc:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	3301      	adds	r3, #1
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	e7e7      	b.n	80053a6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d103      	bne.n	80053e4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x54>)
 8005402:	4a10      	ldr	r2, [pc, #64]	; (8005444 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x58>)
 8005404:	2182      	movs	r1, #130	; 0x82
 8005406:	4810      	ldr	r0, [pc, #64]	; (8005448 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x5c>)
 8005408:	f025 fc1e 	bl	802ac48 <__assert_func>
        Stream& stream = streams[handle];
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	3308      	adds	r3, #8
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	3304      	adds	r3, #4
 800541e:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2200      	movs	r2, #0
 8005424:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2200      	movs	r2, #0
 800542a:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	60da      	str	r2, [r3, #12]
    }
 8005438:	bf00      	nop
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	0802cb40 	.word	0x0802cb40
 8005444:	0802cb54 	.word	0x0802cb54
 8005448:	0802c91c 	.word	0x0802c91c

0800544c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 800545e:	4b29      	ldr	r3, [pc, #164]	; (8005504 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8005460:	4a29      	ldr	r2, [pc, #164]	; (8005508 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 8005462:	21d0      	movs	r1, #208	; 0xd0
 8005464:	4829      	ldr	r0, [pc, #164]	; (800550c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8005466:	f025 fbef 	bl	802ac48 <__assert_func>
        Stream& stream = streams[handle];
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	3308      	adds	r3, #8
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	3304      	adds	r3, #4
 800547c:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	7f5b      	ldrb	r3, [r3, #29]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8005486:	f7fb fc8d 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 800548a:	4603      	mov	r3, r0
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe ffb5 	bl	80043fc <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 8005492:	4602      	mov	r2, r0
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	441a      	add	r2, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	7fdb      	ldrb	r3, [r3, #31]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d029      	beq.n	80054fa <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	3202      	adds	r2, #2
 80054ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff f9c2 	bl	800483c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3314      	adds	r3, #20
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4610      	mov	r0, r2
 80054c4:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2200      	movs	r2, #0
 80054ca:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054d2:	f083 0301 	eor.w	r3, r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054e2:	f083 0301 	eor.w	r3, r3, #1
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2200      	movs	r2, #0
 80054f0:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054f8:	e000      	b.n	80054fc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 80054fa:	2301      	movs	r3, #1
    }
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	0802cb40 	.word	0x0802cb40
 8005508:	0802cd10 	.word	0x0802cd10
 800550c:	0802c91c 	.word	0x0802c91c

08005510 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00e      	beq.n	8005546 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552c:	f04f 31ff 	mov.w	r1, #4294967295
 8005530:	4618      	mov	r0, r3
 8005532:	f010 f9a2 	bl	801587a <osMutexAcquire>
            firstDrawThisFrame = false;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x20>
 8005564:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x64>)
 8005566:	4a14      	ldr	r2, [pc, #80]	; (80055b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x68>)
 8005568:	2190      	movs	r1, #144	; 0x90
 800556a:	4814      	ldr	r0, [pc, #80]	; (80055bc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x6c>)
 800556c:	f025 fb6c 	bl	802ac48 <__assert_func>
        Stream& stream = streams[handle];
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	3308      	adds	r3, #8
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	3304      	adds	r3, #4
 8005582:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	6858      	ldr	r0, [r3, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4798      	blx	r3
    }
 80055aa:	bf00      	nop
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	0802cb40 	.word	0x0802cb40
 80055b8:	0802ceb4 	.word	0x0802ceb4
 80055bc:	0802c91c 	.word	0x0802c91c

080055c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	6858      	ldr	r0, [r3, #4]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4798      	blx	r3
    }
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 800560a:	4b3a      	ldr	r3, [pc, #232]	; (80056f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 800560c:	4a3a      	ldr	r2, [pc, #232]	; (80056f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 800560e:	21a2      	movs	r1, #162	; 0xa2
 8005610:	483a      	ldr	r0, [pc, #232]	; (80056fc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8005612:	f025 fb19 	bl	802ac48 <__assert_func>
        Stream& stream = streams[handle];
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	3308      	adds	r3, #8
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	3304      	adds	r3, #4
 8005628:	617b      	str	r3, [r7, #20]
        switch (cmd)
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	2b05      	cmp	r3, #5
 800562e:	d85c      	bhi.n	80056ea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8005630:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	08005651 	.word	0x08005651
 800563c:	08005691 	.word	0x08005691
 8005640:	08005699 	.word	0x08005699
 8005644:	080056ad 	.word	0x080056ad
 8005648:	080056c7 	.word	0x080056c7
 800564c:	080056d5 	.word	0x080056d5
            if (mjpegDecoders[handle]->hasVideo())
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	6859      	ldr	r1, [r3, #4]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3310      	adds	r3, #16
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4608      	mov	r0, r1
 800566c:	4798      	blx	r3
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d039      	beq.n	80056e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2201      	movs	r2, #1
 8005678:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	609a      	str	r2, [r3, #8]
            break;
 800568e:	e02b      	b.n	80056e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2200      	movs	r2, #0
 8005694:	775a      	strb	r2, [r3, #29]
            break;
 8005696:	e028      	b.n	80056ea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2200      	movs	r2, #0
 80056a2:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2200      	movs	r2, #0
 80056a8:	609a      	str	r2, [r3, #8]
            break;
 80056aa:	e01e      	b.n	80056ea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2201      	movs	r2, #1
 80056b6:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2200      	movs	r2, #0
 80056bc:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2200      	movs	r2, #0
 80056c2:	609a      	str	r2, [r3, #8]
            break;
 80056c4:	e011      	b.n	80056ea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2201      	movs	r2, #1
 80056d0:	615a      	str	r2, [r3, #20]
            break;
 80056d2:	e00a      	b.n	80056ea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 80056e6:	e000      	b.n	80056ea <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 80056e8:	bf00      	nop
    }
 80056ea:	bf00      	nop
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	0802cb40 	.word	0x0802cb40
 80056f8:	0802d090 	.word	0x0802d090
 80056fc:	0802c91c 	.word	0x0802c91c

08005700 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>
 8005710:	4b0a      	ldr	r3, [pc, #40]	; (800573c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x3c>)
 8005712:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x40>)
 8005714:	2179      	movs	r1, #121	; 0x79
 8005716:	480b      	ldr	r0, [pc, #44]	; (8005744 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x44>)
 8005718:	f025 fa96 	bl	802ac48 <__assert_func>
        const Stream& stream = streams[handle];
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	4613      	mov	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	3308      	adds	r3, #8
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	4413      	add	r3, r2
 800572c:	3304      	adds	r3, #4
 800572e:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
    }
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	0802cb40 	.word	0x0802cb40
 8005740:	0802d264 	.word	0x0802d264
 8005744:	0802c91c 	.word	0x0802c91c

08005748 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d006      	beq.n	8005768 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 800575a:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 800575c:	4a0d      	ldr	r2, [pc, #52]	; (8005794 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 800575e:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8005762:	480d      	ldr	r0, [pc, #52]	; (8005798 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 8005764:	f025 fa70 	bl	802ac48 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	6858      	ldr	r0, [r3, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3330      	adds	r3, #48	; 0x30
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4798      	blx	r3
    }
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	0802cb40 	.word	0x0802cb40
 8005794:	0802d41c 	.word	0x0802d41c
 8005798:	0802c91c 	.word	0x0802c91c

0800579c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d006      	beq.n	80057ba <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1e>
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x40>)
 80057ae:	4a0c      	ldr	r2, [pc, #48]	; (80057e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x44>)
 80057b0:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80057b4:	480b      	ldr	r0, [pc, #44]	; (80057e4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x48>)
 80057b6:	f025 fa47 	bl	802ac48 <__assert_func>
        Stream& stream = streams[handle];
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	3308      	adds	r3, #8
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4413      	add	r3, r2
 80057ca:	3304      	adds	r3, #4
 80057cc:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	7f5b      	ldrb	r3, [r3, #29]
    }
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	0802cb40 	.word	0x0802cb40
 80057e0:	0802d5cc 	.word	0x0802d5cc
 80057e4:	0802c91c 	.word	0x0802c91c

080057e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv>:

    Handle getFreeHandle()
 80057e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ea:	b08d      	sub	sp, #52	; 0x34
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 80057f0:	2300      	movs	r3, #0
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d135      	bne.n	8005866 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057fe:	4613      	mov	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	3328      	adds	r3, #40	; 0x28
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d126      	bne.n	800585e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8005810:	f107 0308 	add.w	r3, r7, #8
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fc66 	bl	80050e6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE6StreamC1Ev>
 800581a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	3308      	adds	r3, #8
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	4413      	add	r3, r2
 800582a:	3304      	adds	r3, #4
 800582c:	f107 0408 	add.w	r4, r7, #8
 8005830:	469c      	mov	ip, r3
 8005832:	f104 0e20 	add.w	lr, r4, #32
 8005836:	4665      	mov	r5, ip
 8005838:	4626      	mov	r6, r4
 800583a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800583c:	6028      	str	r0, [r5, #0]
 800583e:	6069      	str	r1, [r5, #4]
 8005840:	60aa      	str	r2, [r5, #8]
 8005842:	60eb      	str	r3, [r5, #12]
 8005844:	3410      	adds	r4, #16
 8005846:	f10c 0c10 	add.w	ip, ip, #16
 800584a:	4574      	cmp	r4, lr
 800584c:	d1f3      	bne.n	8005836 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x4e>
 800584e:	4663      	mov	r3, ip
 8005850:	4622      	mov	r2, r4
 8005852:	8811      	ldrh	r1, [r2, #0]
 8005854:	7892      	ldrb	r2, [r2, #2]
 8005856:	8019      	strh	r1, [r3, #0]
 8005858:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	e00a      	b.n	8005874 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	3301      	adds	r3, #1
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005864:	e7c6      	b.n	80057f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8005866:	4b05      	ldr	r3, [pc, #20]	; (800587c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x94>)
 8005868:	4a05      	ldr	r2, [pc, #20]	; (8005880 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x98>)
 800586a:	f240 11c5 	movw	r1, #453	; 0x1c5
 800586e:	4805      	ldr	r0, [pc, #20]	; (8005884 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE13getFreeHandleEv+0x9c>)
 8005870:	f025 f9ea 	bl	802ac48 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 8005874:	4618      	mov	r0, r3
 8005876:	3734      	adds	r7, #52	; 0x34
 8005878:	46bd      	mov	sp, r7
 800587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587c:	0802d758 	.word	0x0802d758
 8005880:	0802d788 	.word	0x0802d788
 8005884:	0802c91c 	.word	0x0802c91c

08005888 <_GLOBAL__sub_I_mjpegdecoder1>:
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
 800588c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005890:	2001      	movs	r0, #1
 8005892:	f7ff fcbf 	bl	8005214 <_Z41__static_initialization_and_destruction_0ii>
 8005896:	bd80      	pop	{r7, pc}

08005898 <_GLOBAL__sub_D_mjpegdecoder1>:
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
 800589c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058a0:	2000      	movs	r0, #0
 80058a2:	f7ff fcb7 	bl	8005214 <_Z41__static_initialization_and_destruction_0ii>
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b097      	sub	sp, #92	; 0x5c
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	4a9e      	ldr	r2, [pc, #632]	; (8005b34 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 80058ba:	fba2 2303 	umull	r2, r3, r2, r3
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 80058c6:	e127      	b.n	8005b18 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x270>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80058c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ca:	011a      	lsls	r2, r3, #4
 80058cc:	4b9a      	ldr	r3, [pc, #616]	; (8005b38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80058d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	4a96      	ldr	r2, [pc, #600]	; (8005b38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80058de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80058e4:	fb01 f202 	mul.w	r2, r1, r2
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28

    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 3;
 80058ec:	4b92      	ldr	r3, [pc, #584]	; (8005b38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80058ee:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80058f4:	4b90      	ldr	r3, [pc, #576]	; (8005b38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058fa:	fb02 f103 	mul.w	r1, r2, r3
 80058fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005900:	4613      	mov	r3, r2
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	4413      	add	r3, r2
 8005906:	440b      	add	r3, r1
 8005908:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 800590a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800590c:	3301      	adds	r3, #1
 800590e:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005916:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  16; i+=2)
 800591c:	2300      	movs	r3, #0
 800591e:	657b      	str	r3, [r7, #84]	; 0x54
 8005920:	e0f2      	b.n	8005b08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x260>
    {
      if(i == 8)
 8005922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005924:	2b08      	cmp	r3, #8
 8005926:	d102      	bne.n	800592e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
      {
        pLum = pInBuffer + 128;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3380      	adds	r3, #128	; 0x80
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 272)
 800592e:	4b82      	ldr	r3, [pc, #520]	; (8005b38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005932:	4613      	mov	r3, r2
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	4413      	add	r3, r2
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	461a      	mov	r2, r3
 800593c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800593e:	4293      	cmp	r3, r2
 8005940:	f080 80df 	bcs.w	8005b02 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25a>
      {
        pOutAddr = pOutBuffer + refline;
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005948:	4413      	add	r3, r2
 800594a:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800594c:	4b7a      	ldr	r3, [pc, #488]	; (8005b38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005952:	4413      	add	r3, r2
 8005954:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(k= 0; k<2; k++)
 8005956:	2300      	movs	r3, #0
 8005958:	64fb      	str	r3, [r7, #76]	; 0x4c
 800595a:	e0c5      	b.n	8005ae8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x240>
        {
          for(j=0; j < 8; j+=2)
 800595c:	2300      	movs	r3, #0
 800595e:	653b      	str	r3, [r7, #80]	; 0x50
 8005960:	e0b8      	b.n	8005ad4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22c>
          {
            cbcomp = (int32_t)(*(pChrom));
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a73      	ldr	r2, [pc, #460]	; (8005b3c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 800596e:	4413      	add	r3, r2
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	3340      	adds	r3, #64	; 0x40
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4a6f      	ldr	r2, [pc, #444]	; (8005b40 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x298>)
 8005982:	4413      	add	r3, r2
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4a6d      	ldr	r2, [pc, #436]	; (8005b44 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>)
 800598e:	4413      	add	r3, r2
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	496c      	ldr	r1, [pc, #432]	; (8005b48 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a0>)
 8005998:	440b      	add	r3, r1
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4413      	add	r3, r2
 800599e:	141b      	asrs	r3, r3, #16
 80059a0:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 80059a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a6:	4413      	add	r3, r2
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80059b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b8:	3302      	adds	r3, #2
 80059ba:	4964      	ldr	r1, [pc, #400]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80059bc:	5c8a      	ldrb	r2, [r1, r2]
 80059be:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80059ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059cc:	3301      	adds	r3, #1
 80059ce:	495f      	ldr	r1, [pc, #380]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80059d0:	5c8a      	ldrb	r2, [r1, r2]
 80059d2:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80059de:	4a5b      	ldr	r2, [pc, #364]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 80059e0:	5cd2      	ldrb	r2, [r2, r3]
 80059e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e4:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80059e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e8:	3301      	adds	r3, #1
 80059ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ec:	4413      	add	r3, r2
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80059fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fe:	3305      	adds	r3, #5
 8005a00:	4952      	ldr	r1, [pc, #328]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005a02:	5c8a      	ldrb	r2, [r1, r2]
 8005a04:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a12:	3304      	adds	r3, #4
 8005a14:	494d      	ldr	r1, [pc, #308]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005a16:	5c8a      	ldrb	r2, [r1, r2]
 8005a18:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a26:	3303      	adds	r3, #3
 8005a28:	4948      	ldr	r1, [pc, #288]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005a2a:	5c8a      	ldrb	r2, [r1, r2]
 8005a2c:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8005a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a30:	3308      	adds	r3, #8
 8005a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a34:	4413      	add	r3, r2
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a46:	3302      	adds	r3, #2
 8005a48:	4940      	ldr	r1, [pc, #256]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005a4a:	5c8a      	ldrb	r2, [r1, r2]
 8005a4c:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	493b      	ldr	r1, [pc, #236]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005a5e:	5c8a      	ldrb	r2, [r1, r2]
 8005a60:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005a6c:	4a37      	ldr	r2, [pc, #220]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005a6e:	5cd2      	ldrb	r2, [r2, r3]
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a72:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8005a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a76:	3309      	adds	r3, #9
 8005a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a7a:	4413      	add	r3, r2
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	613b      	str	r3, [r7, #16]

            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8c:	3305      	adds	r3, #5
 8005a8e:	492f      	ldr	r1, [pc, #188]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005a90:	5c8a      	ldrb	r2, [r1, r2]
 8005a92:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	492a      	ldr	r1, [pc, #168]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005aa4:	5c8a      	ldrb	r2, [r1, r2]
 8005aa6:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab4:	3303      	adds	r3, #3
 8005ab6:	4925      	ldr	r1, [pc, #148]	; (8005b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a4>)
 8005ab8:	5c8a      	ldrb	r2, [r1, r2]
 8005aba:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8005abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005abe:	3306      	adds	r3, #6
 8005ac0:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac4:	3306      	adds	r3, #6
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	3301      	adds	r3, #1
 8005acc:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8005ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad6:	2b07      	cmp	r3, #7
 8005ad8:	f67f af43 	bls.w	8005962 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xba>
          }
          pLum += 64;
 8005adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ade:	3340      	adds	r3, #64	; 0x40
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 8005ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	f67f af36 	bls.w	800595c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb4>
        }

        pLum = pLum - 128 + 16;
 8005af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af2:	3b70      	subs	r3, #112	; 0x70
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8005af6:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005afe:	4413      	add	r3, r2
 8005b00:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 8005b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b04:	3302      	adds	r3, #2
 8005b06:	657b      	str	r3, [r7, #84]	; 0x54
 8005b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b0a:	2b0f      	cmp	r3, #15
 8005b0c:	f67f af09 	bls.w	8005922 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005b16:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b20:	429a      	cmp	r2, r3
 8005b22:	f4ff aed1 	bcc.w	80058c8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	375c      	adds	r7, #92	; 0x5c
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	aaaaaaab 	.word	0xaaaaaaab
 8005b38:	24008b70 	.word	0x24008b70
 8005b3c:	24008fb0 	.word	0x24008fb0
 8005b40:	24008bb0 	.word	0x24008bb0
 8005b44:	240093b0 	.word	0x240093b0
 8005b48:	240097b0 	.word	0x240097b0
 8005b4c:	0802e694 	.word	0x0802e694

08005b50 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b097      	sub	sp, #92	; 0x5c
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	0a1b      	lsrs	r3, r3, #8
 8005b62:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 8005b68:	e0c5      	b.n	8005cf6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b6c:	011a      	lsls	r2, r3, #4
 8005b6e:	4b69      	ldr	r3, [pc, #420]	; (8005d14 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	633b      	str	r3, [r7, #48]	; 0x30

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8005b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	4a65      	ldr	r2, [pc, #404]	; (8005d14 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005b80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b86:	fb01 f202 	mul.w	r2, r1, r2
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005b8e:	4b61      	ldr	r3, [pc, #388]	; (8005d14 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b94:	fb02 f103 	mul.w	r1, r2, r3
 8005b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	4413      	add	r3, r2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8005ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3380      	adds	r3, #128	; 0x80
 8005bae:	63fb      	str	r3, [r7, #60]	; 0x3c

    pLum = pInBuffer;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	63bb      	str	r3, [r7, #56]	; 0x38

    for(i= 0; i <  8; i++)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb8:	e095      	b.n	8005ce6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005bba:	4b56      	ldr	r3, [pc, #344]	; (8005d14 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	f080 808d 	bcs.w	8005ce0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bca:	4413      	add	r3, r2
 8005bcc:	643b      	str	r3, [r7, #64]	; 0x40

        for(k= 0; k<2; k++)
 8005bce:	2300      	movs	r3, #0
 8005bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd2:	e07a      	b.n	8005cca <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8005bd8:	e06e      	b.n	8005cb8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {
            cbcomp = (int32_t)(*(pChrom));
 8005bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4a4c      	ldr	r2, [pc, #304]	; (8005d18 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 8005be6:	4413      	add	r3, r2
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24

            crcomp = (int32_t)(*(pChrom + 64));
 8005bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bee:	3340      	adds	r3, #64	; 0x40
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4a48      	ldr	r2, [pc, #288]	; (8005d1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 8005bfa:	4413      	add	r3, r2
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	61fb      	str	r3, [r7, #28]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4a46      	ldr	r2, [pc, #280]	; (8005d20 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 8005c06:	4413      	add	r3, r2
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4945      	ldr	r1, [pc, #276]	; (8005d24 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 8005c10:	440b      	add	r3, r1
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4413      	add	r3, r2
 8005c16:	141b      	asrs	r3, r3, #16
 8005c18:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

           ycomp = (int32_t)(*(pLum +j));
 8005c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1e:	4413      	add	r3, r2
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	617b      	str	r3, [r7, #20]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c30:	3302      	adds	r3, #2
 8005c32:	493d      	ldr	r1, [pc, #244]	; (8005d28 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8005c34:	5c8a      	ldrb	r2, [r1, r2]
 8005c36:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c44:	3301      	adds	r3, #1
 8005c46:	4938      	ldr	r1, [pc, #224]	; (8005d28 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8005c48:	5c8a      	ldrb	r2, [r1, r2]
 8005c4a:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005c56:	4a34      	ldr	r2, [pc, #208]	; (8005d28 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8005c58:	5cd2      	ldrb	r2, [r2, r3]
 8005c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c5c:	701a      	strb	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8005c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c60:	3301      	adds	r3, #1
 8005c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c64:	4413      	add	r3, r2
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c76:	3305      	adds	r3, #5
 8005c78:	492b      	ldr	r1, [pc, #172]	; (8005d28 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8005c7a:	5c8a      	ldrb	r2, [r1, r2]
 8005c7c:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4926      	ldr	r1, [pc, #152]	; (8005d28 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8005c8e:	5c8a      	ldrb	r2, [r1, r2]
 8005c90:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9e:	3303      	adds	r3, #3
 8005ca0:	4921      	ldr	r1, [pc, #132]	; (8005d28 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8005ca2:	5c8a      	ldrb	r2, [r1, r2]
 8005ca4:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT*/

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8005ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca8:	3306      	adds	r3, #6
 8005caa:	643b      	str	r3, [r7, #64]	; 0x40

            pChrom++;
 8005cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cae:	3301      	adds	r3, #1
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8005cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8005cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cba:	2b07      	cmp	r3, #7
 8005cbc:	d98d      	bls.n	8005bda <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	3340      	adds	r3, #64	; 0x40
 8005cc2:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8005cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d981      	bls.n	8005bd4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }

        pLum = pLum - 128 + 8;
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	3b78      	subs	r3, #120	; 0x78
 8005cd4:	63bb      	str	r3, [r7, #56]	; 0x38

        refline += JPEG_ConvertorParams.ScaledWidth;
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cdc:	4413      	add	r3, r2
 8005cde:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce8:	2b07      	cmp	r3, #7
 8005cea:	f67f af66 	bls.w	8005bba <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005cf4:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	f4ff af33 	bcc.w	8005b6a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	375c      	adds	r7, #92	; 0x5c
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	24008b70 	.word	0x24008b70
 8005d18:	24008fb0 	.word	0x24008fb0
 8005d1c:	24008bb0 	.word	0x24008bb0
 8005d20:	240093b0 	.word	0x240093b0
 8005d24:	240097b0 	.word	0x240097b0
 8005d28:	0802e694 	.word	0x0802e694

08005d2c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b095      	sub	sp, #84	; 0x54
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	4a54      	ldr	r2, [pc, #336]	; (8005e90 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 8005d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d42:	09db      	lsrs	r3, r3, #7
 8005d44:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	647b      	str	r3, [r7, #68]	; 0x44

  while(currentMCU < (numberMCU + BlockIndex))
 8005d4a:	e092      	b.n	8005e72 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8005d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4e:	00da      	lsls	r2, r3, #3
 8005d50:	4b50      	ldr	r3, [pc, #320]	; (8005e94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8005d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4a4c      	ldr	r2, [pc, #304]	; (8005e94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8005d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d68:	fb01 f202 	mul.w	r2, r1, r2
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005d70:	4b48      	ldr	r3, [pc, #288]	; (8005e94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d76:	fb02 f103 	mul.w	r1, r2, r3
 8005d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	4413      	add	r3, r2
 8005d82:	440b      	add	r3, r1
 8005d84:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;
 8005d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d88:	3301      	adds	r3, #1
 8005d8a:	647b      	str	r3, [r7, #68]	; 0x44

    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3340      	adds	r3, #64	; 0x40
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  8; i++)
 8005d96:	2300      	movs	r3, #0
 8005d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d9a:	e064      	b.n	8005e66 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005d9c:	4b3d      	ldr	r3, [pc, #244]	; (8005e94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d25c      	bcs.n	8005e60 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005daa:	4413      	add	r3, r2
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c

          for(j=0; j < 8; j++)
 8005dae:	2300      	movs	r3, #0
 8005db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db2:	e04a      	b.n	8005e4a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {
            cbcomp = (int32_t)(*pChrom);
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4a36      	ldr	r2, [pc, #216]	; (8005e98 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 8005dc0:	4413      	add	r3, r2
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	3340      	adds	r3, #64	; 0x40
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4a32      	ldr	r2, [pc, #200]	; (8005e9c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4a30      	ldr	r2, [pc, #192]	; (8005ea0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 8005de0:	4413      	add	r3, r2
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	492e      	ldr	r1, [pc, #184]	; (8005ea4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8005dea:	440b      	add	r3, r1
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4413      	add	r3, r2
 8005df0:	141b      	asrs	r3, r3, #16
 8005df2:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

            ycomp = (int32_t)(*(pLum +j));
 8005df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df8:	4413      	add	r3, r2
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	613b      	str	r3, [r7, #16]

            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0a:	3302      	adds	r3, #2
 8005e0c:	4926      	ldr	r1, [pc, #152]	; (8005ea8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8005e0e:	5c8a      	ldrb	r2, [r1, r2]
 8005e10:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1e:	3301      	adds	r3, #1
 8005e20:	4921      	ldr	r1, [pc, #132]	; (8005ea8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8005e22:	5c8a      	ldrb	r2, [r1, r2]
 8005e24:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005e30:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8005e32:	5cd2      	ldrb	r2, [r2, r3]
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e36:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8005e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3a:	3303      	adds	r3, #3
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	3301      	adds	r3, #1
 8005e42:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8005e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e46:	3301      	adds	r3, #1
 8005e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e4c:	2b07      	cmp	r3, #7
 8005e4e:	d9b1      	bls.n	8005db4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e52:	3308      	adds	r3, #8
 8005e54:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;
 8005e56:	4b0f      	ldr	r3, [pc, #60]	; (8005e94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e5c:	4413      	add	r3, r2
 8005e5e:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 8005e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e62:	3301      	adds	r3, #1
 8005e64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e68:	2b07      	cmp	r3, #7
 8005e6a:	d997      	bls.n	8005d9c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	33c0      	adds	r3, #192	; 0xc0
 8005e70:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4413      	add	r3, r2
 8005e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	f4ff af66 	bcc.w	8005d4c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3754      	adds	r7, #84	; 0x54
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	aaaaaaab 	.word	0xaaaaaaab
 8005e94:	24008b70 	.word	0x24008b70
 8005e98:	24008fb0 	.word	0x24008fb0
 8005e9c:	24008bb0 	.word	0x24008bb0
 8005ea0:	240093b0 	.word	0x240093b0
 8005ea4:	240097b0 	.word	0x240097b0
 8005ea8:	0802e694 	.word	0x0802e694

08005eac <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b08f      	sub	sp, #60	; 0x3c
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	099b      	lsrs	r3, r3, #6
 8005ebe:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34

  while(currentMCU < (numberMCU + BlockIndex))
 8005ec4:	e05b      	b.n	8005f7e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec8:	00da      	lsls	r2, r3, #3
 8005eca:	4b33      	ldr	r3, [pc, #204]	; (8005f98 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	61bb      	str	r3, [r7, #24]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4a2f      	ldr	r2, [pc, #188]	; (8005f98 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ede:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ee2:	fb01 f202 	mul.w	r2, r1, r2
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005eea:	4b2b      	ldr	r3, [pc, #172]	; (8005f98 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	fb02 f103 	mul.w	r1, r2, r3
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	4413      	add	r3, r2
 8005efc:	440b      	add	r3, r1
 8005efe:	633b      	str	r3, [r7, #48]	; 0x30

    currentMCU++;
 8005f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f02:	3301      	adds	r3, #1
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34

    pLum = pInBuffer;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	623b      	str	r3, [r7, #32]

    for(i= 0; i <  8; i++)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f0e:	e030      	b.n	8005f72 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    {
      pOutAddr = pOutBuffer + refline;
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	4413      	add	r3, r2
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8005f18:	4b1f      	ldr	r3, [pc, #124]	; (8005f98 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d224      	bcs.n	8005f6c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {
        for(j=0; j < 8; j++)
 8005f22:	2300      	movs	r3, #0
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f26:	e019      	b.n	8005f5c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        {
          ySample =   (uint32_t)(*pLum);
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	613b      	str	r3, [r7, #16]

          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[0] =  ySample;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	3301      	adds	r3, #1
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	3302      	adds	r3, #2
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]

          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);

#endif /* JPEG_RGB_FORMAT */

          pOutAddr += JPEG_BYTES_PER_PIXEL;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	3303      	adds	r3, #3
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	3301      	adds	r3, #1
 8005f54:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	3301      	adds	r3, #1
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	2b07      	cmp	r3, #7
 8005f60:	d9e2      	bls.n	8005f28 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8005f62:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f68:	4413      	add	r3, r2
 8005f6a:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	3301      	adds	r3, #1
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	2b07      	cmp	r3, #7
 8005f76:	d9cb      	bls.n	8005f10 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3340      	adds	r3, #64	; 0x40
 8005f7c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4413      	add	r3, r2
 8005f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d39d      	bcc.n	8005ec6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	373c      	adds	r7, #60	; 0x3c
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	24008b70 	.word	0x24008b70

08005f9c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b093      	sub	sp, #76	; 0x4c
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	0a1b      	lsrs	r3, r3, #8
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c

  while(currentMCU < (numberMCU + BlockIndex))
 8005fb4:	e089      	b.n	80060ca <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb8:	00da      	lsls	r2, r3, #3
 8005fba:	4b4b      	ldr	r3, [pc, #300]	; (80060e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	62bb      	str	r3, [r7, #40]	; 0x28

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	4a47      	ldr	r2, [pc, #284]	; (80060e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fce:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fd2:	fb01 f202 	mul.w	r2, r1, r2
 8005fd6:	1a9b      	subs	r3, r3, r2
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8005fda:	4b43      	ldr	r3, [pc, #268]	; (80060e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe0:	fb02 f103 	mul.w	r1, r2, r3
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	4413      	add	r3, r2
 8005fec:	440b      	add	r3, r1
 8005fee:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8005ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	63fb      	str	r3, [r7, #60]	; 0x3c

    pChrom = pInBuffer;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	633b      	str	r3, [r7, #48]	; 0x30

    for(i= 0; i <  8; i++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ffe:	e05d      	b.n	80060bc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8006000:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006006:	429a      	cmp	r2, r3
 8006008:	d255      	bcs.n	80060b6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	4413      	add	r3, r2
 8006010:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8006012:	2300      	movs	r3, #0
 8006014:	643b      	str	r3, [r7, #64]	; 0x40
 8006016:	e046      	b.n	80060a6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {
            color_k = (int32_t)(*(pChrom + 192));
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	33c0      	adds	r3, #192	; 0xc0
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	fb02 f303 	mul.w	r3, r2, r3
 800602c:	4a2f      	ldr	r2, [pc, #188]	; (80060ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800602e:	fb82 1203 	smull	r1, r2, r2, r3
 8006032:	441a      	add	r2, r3
 8006034:	11d2      	asrs	r2, r2, #7
 8006036:	17db      	asrs	r3, r3, #31
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	61fb      	str	r3, [r7, #28]

            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	3340      	adds	r3, #64	; 0x40
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	fb02 f303 	mul.w	r3, r2, r3
 800604a:	4a28      	ldr	r2, [pc, #160]	; (80060ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800604c:	fb82 1203 	smull	r1, r2, r2, r3
 8006050:	441a      	add	r2, r3
 8006052:	11d2      	asrs	r2, r2, #7
 8006054:	17db      	asrs	r3, r3, #31
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	61bb      	str	r3, [r7, #24]

            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	3380      	adds	r3, #128	; 0x80
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	fb02 f303 	mul.w	r3, r2, r3
 8006068:	4a20      	ldr	r2, [pc, #128]	; (80060ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800606a:	fb82 1203 	smull	r1, r2, r2, r3
 800606e:	441a      	add	r2, r3
 8006070:	11d2      	asrs	r2, r2, #7
 8006072:	17db      	asrs	r3, r3, #31
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)

          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	3302      	adds	r3, #2
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 8006082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006084:	3301      	adds	r3, #1
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8006094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006096:	3303      	adds	r3, #3
 8006098:	637b      	str	r3, [r7, #52]	; 0x34

            pChrom++;
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	3301      	adds	r3, #1
 800609e:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 80060a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a2:	3301      	adds	r3, #1
 80060a4:	643b      	str	r3, [r7, #64]	; 0x40
 80060a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a8:	2b07      	cmp	r3, #7
 80060aa:	d9b5      	bls.n	8006018 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;
 80060ac:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b2:	4413      	add	r3, r2
 80060b4:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 80060b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b8:	3301      	adds	r3, #1
 80060ba:	647b      	str	r3, [r7, #68]	; 0x44
 80060bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060be:	2b07      	cmp	r3, #7
 80060c0:	d99e      	bls.n	8006000 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80060c8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80060ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4413      	add	r3, r2
 80060d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060d2:	429a      	cmp	r2, r3
 80060d4:	f4ff af6f 	bcc.w	8005fb6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80060da:	4618      	mov	r0, r3
 80060dc:	374c      	adds	r7, #76	; 0x4c
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	24008b70 	.word	0x24008b70
 80060ec:	80808081 	.word	0x80808081

080060f0 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a7c      	ldr	r2, [pc, #496]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006102:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	4a7a      	ldr	r2, [pc, #488]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800610a:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4a78      	ldr	r2, [pc, #480]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006112:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	6892      	ldr	r2, [r2, #8]
 800611c:	fb03 f202 	mul.w	r2, r3, r2
 8006120:	4613      	mov	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4413      	add	r3, r2
 8006126:	4a73      	ldr	r2, [pc, #460]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006128:	6113      	str	r3, [r2, #16]

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4a71      	ldr	r2, [pc, #452]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006130:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8006132:	4b70      	ldr	r3, [pc, #448]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b10      	cmp	r3, #16
 8006138:	d155      	bne.n	80061e6 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800613a:	4b6e      	ldr	r3, [pc, #440]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d119      	bne.n	8006176 <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4a6c      	ldr	r2, [pc, #432]	; (80062f8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x208>)
 8006146:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8006148:	4b6a      	ldr	r3, [pc, #424]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	4a68      	ldr	r2, [pc, #416]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006152:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8006154:	4b67      	ldr	r3, [pc, #412]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <TGFX_JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 800615c:	4b65      	ldr	r3, [pc, #404]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f1c3 0310 	rsb	r3, r3, #16
 8006164:	4a63      	ldr	r2, [pc, #396]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006166:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8006168:	4b62      	ldr	r3, [pc, #392]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800616a:	2210      	movs	r2, #16
 800616c:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 800616e:	4b61      	ldr	r3, [pc, #388]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006170:	2210      	movs	r2, #16
 8006172:	621a      	str	r2, [r3, #32]
 8006174:	e075      	b.n	8006262 <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8006176:	4b5f      	ldr	r3, [pc, #380]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d119      	bne.n	80061b2 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	4a5e      	ldr	r2, [pc, #376]	; (80062fc <TGFX_JPEG_GetDecodeColorConvertFunc+0x20c>)
 8006182:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8006184:	4b5b      	ldr	r3, [pc, #364]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	4a59      	ldr	r2, [pc, #356]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800618e:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8006190:	4b58      	ldr	r3, [pc, #352]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d005      	beq.n	80061a4 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8006198:	4b56      	ldr	r3, [pc, #344]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	f1c3 0310 	rsb	r3, r3, #16
 80061a0:	4a54      	ldr	r2, [pc, #336]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061a2:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 80061a4:	4b53      	ldr	r3, [pc, #332]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061a6:	2210      	movs	r2, #16
 80061a8:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 80061aa:	4b52      	ldr	r3, [pc, #328]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061ac:	2208      	movs	r2, #8
 80061ae:	621a      	str	r2, [r3, #32]
 80061b0:	e057      	b.n	8006262 <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4a52      	ldr	r2, [pc, #328]	; (8006300 <TGFX_JPEG_GetDecodeColorConvertFunc+0x210>)
 80061b6:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80061b8:	4b4e      	ldr	r3, [pc, #312]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	4a4c      	ldr	r2, [pc, #304]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061c2:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 80061c4:	4b4b      	ldr	r3, [pc, #300]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 80061cc:	4b49      	ldr	r3, [pc, #292]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f1c3 0308 	rsb	r3, r3, #8
 80061d4:	4a47      	ldr	r2, [pc, #284]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061d6:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 80061d8:	4b46      	ldr	r3, [pc, #280]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061da:	2208      	movs	r2, #8
 80061dc:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 80061de:	4b45      	ldr	r3, [pc, #276]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061e0:	2208      	movs	r2, #8
 80061e2:	621a      	str	r2, [r3, #32]
 80061e4:	e03d      	b.n	8006262 <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 80061e6:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d119      	bne.n	8006222 <TGFX_JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4a44      	ldr	r2, [pc, #272]	; (8006304 <TGFX_JPEG_GetDecodeColorConvertFunc+0x214>)
 80061f2:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80061f4:	4b3f      	ldr	r3, [pc, #252]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	4a3d      	ldr	r2, [pc, #244]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80061fe:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8006200:	4b3c      	ldr	r3, [pc, #240]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <TGFX_JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8006208:	4b3a      	ldr	r3, [pc, #232]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f1c3 0308 	rsb	r3, r3, #8
 8006210:	4a38      	ldr	r2, [pc, #224]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006212:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8006214:	4b37      	ldr	r3, [pc, #220]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006216:	2208      	movs	r2, #8
 8006218:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800621a:	4b36      	ldr	r3, [pc, #216]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800621c:	2208      	movs	r2, #8
 800621e:	621a      	str	r2, [r3, #32]
 8006220:	e01f      	b.n	8006262 <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8006222:	4b34      	ldr	r3, [pc, #208]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b30      	cmp	r3, #48	; 0x30
 8006228:	d119      	bne.n	800625e <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4a36      	ldr	r2, [pc, #216]	; (8006308 <TGFX_JPEG_GetDecodeColorConvertFunc+0x218>)
 800622e:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8006230:	4b30      	ldr	r3, [pc, #192]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	4a2e      	ldr	r2, [pc, #184]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800623a:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 800623c:	4b2d      	ldr	r3, [pc, #180]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <TGFX_JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8006244:	4b2b      	ldr	r3, [pc, #172]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f1c3 0308 	rsb	r3, r3, #8
 800624c:	4a29      	ldr	r2, [pc, #164]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800624e:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8006250:	4b28      	ldr	r3, [pc, #160]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006252:	2208      	movs	r2, #8
 8006254:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8006256:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006258:	2208      	movs	r2, #8
 800625a:	621a      	str	r2, [r3, #32]
 800625c:	e001      	b.n	8006262 <TGFX_JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
 800625e:	2301      	movs	r3, #1
 8006260:	e042      	b.n	80062e8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1f8>
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8006262:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	4b23      	ldr	r3, [pc, #140]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	4413      	add	r3, r2
 800626c:	4a21      	ldr	r2, [pc, #132]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800626e:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8006270:	4b20      	ldr	r3, [pc, #128]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	4613      	mov	r3, r2
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	4413      	add	r3, r2
 800627a:	4a1e      	ldr	r2, [pc, #120]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800627c:	6293      	str	r3, [r2, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800627e:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	fbb2 f3f3 	udiv	r3, r2, r3
 800628a:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800628c:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8006292:	69d2      	ldr	r2, [r2, #28]
 8006294:	fbb3 f1f2 	udiv	r1, r3, r2
 8006298:	fb01 f202 	mul.w	r2, r1, r2
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	3301      	adds	r3, #1
 80062a6:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 80062a8:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b4:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 80062b6:	4b0f      	ldr	r3, [pc, #60]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	4a0e      	ldr	r2, [pc, #56]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80062bc:	6a12      	ldr	r2, [r2, #32]
 80062be:	fbb3 f1f2 	udiv	r1, r3, r2
 80062c2:	fb01 f202 	mul.w	r2, r1, r2
 80062c6:	1a9b      	subs	r3, r3, r2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	3301      	adds	r3, #1
 80062d0:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	4a06      	ldr	r2, [pc, #24]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80062dc:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 80062e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	24008b70 	.word	0x24008b70
 80062f8:	080058a9 	.word	0x080058a9
 80062fc:	08005b51 	.word	0x08005b51
 8006300:	08005d2d 	.word	0x08005d2d
 8006304:	08005ead 	.word	0x08005ead
 8006308:	08005f9d 	.word	0x08005f9d

0800630c <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8006312:	2300      	movs	r3, #0
 8006314:	607b      	str	r3, [r7, #4]
 8006316:	e02e      	b.n	8006376 <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3b80      	subs	r3, #128	; 0x80
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	f24b 3274 	movw	r2, #45940	; 0xb374
 8006326:	fb02 f303 	mul.w	r3, r2, r3
 800632a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800632e:	141a      	asrs	r2, r3, #16
 8006330:	4916      	ldr	r1, [pc, #88]	; (800638c <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 800633e:	fb02 f303 	mul.w	r3, r2, r3
 8006342:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006346:	141a      	asrs	r2, r3, #16
 8006348:	4911      	ldr	r1, [pc, #68]	; (8006390 <TGFX_JPEG_InitPostProcColorTables+0x84>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	4a10      	ldr	r2, [pc, #64]	; (8006394 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8006354:	fb03 f202 	mul.w	r2, r3, r2
 8006358:	490f      	ldr	r1, [pc, #60]	; (8006398 <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	4a0e      	ldr	r2, [pc, #56]	; (800639c <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8006364:	fb03 f202 	mul.w	r2, r3, r2
 8006368:	490d      	ldr	r1, [pc, #52]	; (80063a0 <TGFX_JPEG_InitPostProcColorTables+0x94>)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3301      	adds	r3, #1
 8006374:	607b      	str	r3, [r7, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2bff      	cmp	r3, #255	; 0xff
 800637a:	ddcd      	ble.n	8006318 <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	24008bb0 	.word	0x24008bb0
 8006390:	24008fb0 	.word	0x24008fb0
 8006394:	ffffa498 	.word	0xffffa498
 8006398:	240093b0 	.word	0x240093b0
 800639c:	ffffd3f4 	.word	0xffffd3f4
 80063a0:	240097b0 	.word	0x240097b0

080063a4 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 80063a8:	f000 f806 	bl	80063b8 <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 80063ac:	f000 f888 	bl	80064c0 <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 80063b0:	f7ff ffac 	bl	800630c <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 80063b4:	bf00      	nop
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 80063be:	2300      	movs	r3, #0
 80063c0:	607b      	str	r3, [r7, #4]
 80063c2:	e05a      	b.n	800647a <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f644 428b 	movw	r2, #19595	; 0x4c8b
 80063ca:	fb02 f303 	mul.w	r3, r2, r3
 80063ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80063d2:	141a      	asrs	r2, r3, #16
 80063d4:	492e      	ldr	r1, [pc, #184]	; (8006490 <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f249 6245 	movw	r2, #38469	; 0x9645
 80063e2:	fb02 f303 	mul.w	r3, r2, r3
 80063e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80063ea:	141a      	asrs	r2, r3, #16
 80063ec:	4929      	ldr	r1, [pc, #164]	; (8006494 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f641 522f 	movw	r2, #7471	; 0x1d2f
 80063fa:	fb02 f303 	mul.w	r3, r2, r3
 80063fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006402:	141a      	asrs	r2, r3, #16
 8006404:	4924      	ldr	r1, [pc, #144]	; (8006498 <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a23      	ldr	r2, [pc, #140]	; (800649c <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8006410:	fb02 f303 	mul.w	r3, r2, r3
 8006414:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006418:	141a      	asrs	r2, r3, #16
 800641a:	4921      	ldr	r1, [pc, #132]	; (80064a0 <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800642e:	141a      	asrs	r2, r3, #16
 8006430:	491d      	ldr	r1, [pc, #116]	; (80064a8 <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3301      	adds	r3, #1
 800643c:	03db      	lsls	r3, r3, #15
 800643e:	141a      	asrs	r2, r3, #16
 8006440:	491a      	ldr	r1, [pc, #104]	; (80064ac <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 800644c:	fb02 f303 	mul.w	r3, r2, r3
 8006450:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006454:	141a      	asrs	r2, r3, #16
 8006456:	4917      	ldr	r1, [pc, #92]	; (80064b4 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800646a:	141a      	asrs	r2, r3, #16
 800646c:	4913      	ldr	r1, [pc, #76]	; (80064bc <TGFX_JPEG_InitPreProcColorTables+0x104>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3301      	adds	r3, #1
 8006478:	607b      	str	r3, [r7, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2bff      	cmp	r3, #255	; 0xff
 800647e:	dda1      	ble.n	80063c4 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	24009bb0 	.word	0x24009bb0
 8006494:	2400a7b0 	.word	0x2400a7b0
 8006498:	2400b3b0 	.word	0x2400b3b0
 800649c:	ffffd4d1 	.word	0xffffd4d1
 80064a0:	24009fb0 	.word	0x24009fb0
 80064a4:	ffffab30 	.word	0xffffab30
 80064a8:	2400afb0 	.word	0x2400afb0
 80064ac:	2400a3b0 	.word	0x2400a3b0
 80064b0:	ffff94d1 	.word	0xffff94d1
 80064b4:	2400abb0 	.word	0x2400abb0
 80064b8:	ffffeb30 	.word	0xffffeb30
 80064bc:	2400b7b0 	.word	0x2400b7b0

080064c0 <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	e036      	b.n	800653a <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 80064cc:	2300      	movs	r3, #0
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	e02d      	b.n	800652e <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	4413      	add	r3, r2
 80064da:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b07      	cmp	r3, #7
 80064e0:	d906      	bls.n	80064f0 <TGFX_JPEG_Init_MCU_LUT+0x30>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b07      	cmp	r3, #7
 80064e6:	d903      	bls.n	80064f0 <TGFX_JPEG_Init_MCU_LUT+0x30>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3378      	adds	r3, #120	; 0x78
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	e012      	b.n	8006516 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b07      	cmp	r3, #7
 80064f4:	d906      	bls.n	8006504 <TGFX_JPEG_Init_MCU_LUT+0x44>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b07      	cmp	r3, #7
 80064fa:	d803      	bhi.n	8006504 <TGFX_JPEG_Init_MCU_LUT+0x44>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3338      	adds	r3, #56	; 0x38
 8006500:	607b      	str	r3, [r7, #4]
 8006502:	e008      	b.n	8006516 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b07      	cmp	r3, #7
 8006508:	d805      	bhi.n	8006516 <TGFX_JPEG_Init_MCU_LUT+0x56>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b07      	cmp	r3, #7
 800650e:	d902      	bls.n	8006516 <TGFX_JPEG_Init_MCU_LUT+0x56>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3340      	adds	r3, #64	; 0x40
 8006514:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	011a      	lsls	r2, r3, #4
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4413      	add	r3, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	b291      	uxth	r1, r2
 8006522:	4a62      	ldr	r2, [pc, #392]	; (80066ac <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8006524:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	3301      	adds	r3, #1
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b0f      	cmp	r3, #15
 8006532:	d9ce      	bls.n	80064d2 <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b0f      	cmp	r3, #15
 800653e:	d9c5      	bls.n	80064cc <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e072      	b.n	800662c <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8006546:	2300      	movs	r3, #0
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	e069      	b.n	8006620 <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	4413      	add	r3, r2
 8006554:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	b29b      	uxth	r3, r3
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	b29b      	uxth	r3, r3
 8006566:	4413      	add	r3, r2
 8006568:	b29b      	uxth	r3, r3
 800656a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800656e:	b299      	uxth	r1, r3
 8006570:	4a4f      	ldr	r2, [pc, #316]	; (80066b0 <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	b29b      	uxth	r3, r3
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	b29b      	uxth	r3, r3
 8006586:	4413      	add	r3, r2
 8006588:	b29b      	uxth	r3, r3
 800658a:	3380      	adds	r3, #128	; 0x80
 800658c:	b299      	uxth	r1, r3
 800658e:	4a49      	ldr	r2, [pc, #292]	; (80066b4 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	085b      	lsrs	r3, r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80065ae:	b299      	uxth	r1, r3
 80065b0:	4a41      	ldr	r2, [pc, #260]	; (80066b8 <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	085b      	lsrs	r3, r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	4413      	add	r3, r2
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	33c0      	adds	r3, #192	; 0xc0
 80065cc:	b299      	uxth	r1, r3
 80065ce:	4a3b      	ldr	r2, [pc, #236]	; (80066bc <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	4413      	add	r3, r2
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80065ee:	b299      	uxth	r1, r3
 80065f0:	4a33      	ldr	r2, [pc, #204]	; (80066c0 <TGFX_JPEG_Init_MCU_LUT+0x200>)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	b29b      	uxth	r3, r3
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	b29b      	uxth	r3, r3
 8006608:	4413      	add	r3, r2
 800660a:	b29b      	uxth	r3, r3
 800660c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006610:	b299      	uxth	r1, r3
 8006612:	4a2c      	ldr	r2, [pc, #176]	; (80066c4 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	3301      	adds	r3, #1
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b0f      	cmp	r3, #15
 8006624:	d992      	bls.n	800654c <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b0f      	cmp	r3, #15
 8006630:	d989      	bls.n	8006546 <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	e02e      	b.n	8006696 <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 8006638:	2300      	movs	r3, #0
 800663a:	60bb      	str	r3, [r7, #8]
 800663c:	e025      	b.n	800668a <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	4413      	add	r3, r2
 8006646:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	b299      	uxth	r1, r3
 800664c:	4a1e      	ldr	r2, [pc, #120]	; (80066c8 <TGFX_JPEG_Init_MCU_LUT+0x208>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	b29b      	uxth	r3, r3
 8006658:	3340      	adds	r3, #64	; 0x40
 800665a:	b299      	uxth	r1, r3
 800665c:	4a1b      	ldr	r2, [pc, #108]	; (80066cc <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	b29b      	uxth	r3, r3
 8006668:	3380      	adds	r3, #128	; 0x80
 800666a:	b299      	uxth	r1, r3
 800666c:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <TGFX_JPEG_Init_MCU_LUT+0x210>)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	b29b      	uxth	r3, r3
 8006678:	33c0      	adds	r3, #192	; 0xc0
 800667a:	b299      	uxth	r1, r3
 800667c:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	3301      	adds	r3, #1
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b07      	cmp	r3, #7
 800668e:	d9d6      	bls.n	800663e <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3301      	adds	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b07      	cmp	r3, #7
 800669a:	d9cd      	bls.n	8006638 <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	2400bbb0 	.word	0x2400bbb0
 80066b0:	2400be30 	.word	0x2400be30
 80066b4:	2400c030 	.word	0x2400c030
 80066b8:	2400c2b0 	.word	0x2400c2b0
 80066bc:	2400c4b0 	.word	0x2400c4b0
 80066c0:	2400c730 	.word	0x2400c730
 80066c4:	2400c930 	.word	0x2400c930
 80066c8:	2400bdb0 	.word	0x2400bdb0
 80066cc:	2400c230 	.word	0x2400c230
 80066d0:	2400c6b0 	.word	0x2400c6b0
 80066d4:	2400cb30 	.word	0x2400cb30

080066d8 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
    vTaskDelete() API function (as this demo application does) then it is also
    important that vApplicationIdleHook() is permitted to return to its calling
    function, because it is the responsibility of the idle task to clean up
    memory allocated by the kernel to any task that has since been deleted. */

    vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80066dc:	4902      	ldr	r1, [pc, #8]	; (80066e8 <vApplicationIdleHook+0x10>)
 80066de:	2000      	movs	r0, #0
 80066e0:	f011 fd4a 	bl	8018178 <vTaskSetApplicationTaskTag>
}
 80066e4:	bf00      	nop
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	080012c1 	.word	0x080012c1

080066ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80066f2:	f000 fcb1 	bl	8007058 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80066f6:	4b52      	ldr	r3, [pc, #328]	; (8006840 <main+0x154>)
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d11b      	bne.n	800673a <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006702:	f3bf 8f4f 	dsb	sy
}
 8006706:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006708:	f3bf 8f6f 	isb	sy
}
 800670c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800670e:	4b4c      	ldr	r3, [pc, #304]	; (8006840 <main+0x154>)
 8006710:	2200      	movs	r2, #0
 8006712:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006716:	f3bf 8f4f 	dsb	sy
}
 800671a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800671c:	f3bf 8f6f 	isb	sy
}
 8006720:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006722:	4b47      	ldr	r3, [pc, #284]	; (8006840 <main+0x154>)
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	4a46      	ldr	r2, [pc, #280]	; (8006840 <main+0x154>)
 8006728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800672e:	f3bf 8f4f 	dsb	sy
}
 8006732:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006734:	f3bf 8f6f 	isb	sy
}
 8006738:	e000      	b.n	800673c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800673a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800673c:	4b40      	ldr	r3, [pc, #256]	; (8006840 <main+0x154>)
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d138      	bne.n	80067ba <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006748:	4b3d      	ldr	r3, [pc, #244]	; (8006840 <main+0x154>)
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006750:	f3bf 8f4f 	dsb	sy
}
 8006754:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8006756:	4b3a      	ldr	r3, [pc, #232]	; (8006840 <main+0x154>)
 8006758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800675c:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	0b5b      	lsrs	r3, r3, #13
 8006762:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006766:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006770:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800677a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006780:	492f      	ldr	r1, [pc, #188]	; (8006840 <main+0x154>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	1e5a      	subs	r2, r3, #1
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1ef      	bne.n	8006772 <main+0x86>
    } while(sets-- != 0U);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	1e5a      	subs	r2, r3, #1
 8006796:	60ba      	str	r2, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e5      	bne.n	8006768 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800679c:	f3bf 8f4f 	dsb	sy
}
 80067a0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80067a2:	4b27      	ldr	r3, [pc, #156]	; (8006840 <main+0x154>)
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	4a26      	ldr	r2, [pc, #152]	; (8006840 <main+0x154>)
 80067a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80067ae:	f3bf 8f4f 	dsb	sy
}
 80067b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80067b4:	f3bf 8f6f 	isb	sy
}
 80067b8:	e000      	b.n	80067bc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80067ba:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80067bc:	f006 f9a2 	bl	800cb04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80067c0:	f000 f858 	bl	8006874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80067c4:	f000 facc 	bl	8006d60 <MX_GPIO_Init>
  MX_MDMA_Init();
 80067c8:	f000 fa58 	bl	8006c7c <MX_MDMA_Init>
  MX_DMA2D_Init();
 80067cc:	f000 f8e8 	bl	80069a0 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80067d0:	f000 f974 	bl	8006abc <MX_LTDC_Init>
  MX_I2C4_Init();
 80067d4:	f000 f91e 	bl	8006a14 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 80067d8:	f000 f9f2 	bl	8006bc0 <MX_OCTOSPI1_Init>
  MX_FMC_Init();
 80067dc:	f000 fa6e 	bl	8006cbc <MX_FMC_Init>
  MX_CRC_Init();
 80067e0:	f000 f8bc 	bl	800695c <MX_CRC_Init>
  MX_JPEG_Init();
 80067e4:	f000 f956 	bl	8006a94 <MX_JPEG_Init>
  MX_LIBJPEG_Init();
 80067e8:	f7f9 ffb7 	bl	800075a <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 80067ec:	f7f9 ffc3 	bl	8000776 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80067f0:	f7f9 ffba 	bl	8000768 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80067f4:	4913      	ldr	r1, [pc, #76]	; (8006844 <main+0x158>)
 80067f6:	4814      	ldr	r0, [pc, #80]	; (8006848 <main+0x15c>)
 80067f8:	f000 fbc8 	bl	8006f8c <SDRAM_Initialization_Sequence>
  
  *(__IO uint32_t*)(0xD0000000) = 0x11111122;
 80067fc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8006800:	4a12      	ldr	r2, [pc, #72]	; (800684c <main+0x160>)
 8006802:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8006804:	f00e febc 	bl	8015580 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8006808:	4a11      	ldr	r2, [pc, #68]	; (8006850 <main+0x164>)
 800680a:	2100      	movs	r1, #0
 800680c:	4811      	ldr	r0, [pc, #68]	; (8006854 <main+0x168>)
 800680e:	f00e ff01 	bl	8015614 <osThreadNew>
 8006812:	4603      	mov	r3, r0
 8006814:	4a10      	ldr	r2, [pc, #64]	; (8006858 <main+0x16c>)
 8006816:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8006818:	4a10      	ldr	r2, [pc, #64]	; (800685c <main+0x170>)
 800681a:	2100      	movs	r1, #0
 800681c:	4810      	ldr	r0, [pc, #64]	; (8006860 <main+0x174>)
 800681e:	f00e fef9 	bl	8015614 <osThreadNew>
 8006822:	4603      	mov	r3, r0
 8006824:	4a0f      	ldr	r2, [pc, #60]	; (8006864 <main+0x178>)
 8006826:	6013      	str	r3, [r2, #0]

  /* creation of videoTask */
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8006828:	4a0f      	ldr	r2, [pc, #60]	; (8006868 <main+0x17c>)
 800682a:	2100      	movs	r1, #0
 800682c:	480f      	ldr	r0, [pc, #60]	; (800686c <main+0x180>)
 800682e:	f00e fef1 	bl	8015614 <osThreadNew>
 8006832:	4603      	mov	r3, r0
 8006834:	4a0e      	ldr	r2, [pc, #56]	; (8006870 <main+0x184>)
 8006836:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8006838:	f00e fec6 	bl	80155c8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800683c:	e7fe      	b.n	800683c <main+0x150>
 800683e:	bf00      	nop
 8006840:	e000ed00 	.word	0xe000ed00
 8006844:	2400cf04 	.word	0x2400cf04
 8006848:	2400cec4 	.word	0x2400cec4
 800684c:	11111122 	.word	0x11111122
 8006850:	0802e994 	.word	0x0802e994
 8006854:	08007049 	.word	0x08007049
 8006858:	2400cef8 	.word	0x2400cef8
 800685c:	0802e9b8 	.word	0x0802e9b8
 8006860:	08000787 	.word	0x08000787
 8006864:	2400cefc 	.word	0x2400cefc
 8006868:	0802e9dc 	.word	0x0802e9dc
 800686c:	08004d09 	.word	0x08004d09
 8006870:	2400cf00 	.word	0x2400cf00

08006874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b09c      	sub	sp, #112	; 0x70
 8006878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800687a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800687e:	224c      	movs	r2, #76	; 0x4c
 8006880:	2100      	movs	r1, #0
 8006882:	4618      	mov	r0, r3
 8006884:	f024 fa70 	bl	802ad68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006888:	1d3b      	adds	r3, r7, #4
 800688a:	2220      	movs	r2, #32
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f024 fa6a 	bl	802ad68 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8006894:	4b2f      	ldr	r3, [pc, #188]	; (8006954 <SystemClock_Config+0xe0>)
 8006896:	f04f 32ff 	mov.w	r2, #4294967295
 800689a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800689e:	2004      	movs	r0, #4
 80068a0:	f00b fe3a 	bl	8012518 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	4b2b      	ldr	r3, [pc, #172]	; (8006958 <SystemClock_Config+0xe4>)
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	4a2a      	ldr	r2, [pc, #168]	; (8006958 <SystemClock_Config+0xe4>)
 80068ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068b2:	6193      	str	r3, [r2, #24]
 80068b4:	4b28      	ldr	r3, [pc, #160]	; (8006958 <SystemClock_Config+0xe4>)
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068bc:	603b      	str	r3, [r7, #0]
 80068be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80068c0:	bf00      	nop
 80068c2:	4b25      	ldr	r3, [pc, #148]	; (8006958 <SystemClock_Config+0xe4>)
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ce:	d1f8      	bne.n	80068c2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80068d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80068da:	2302      	movs	r3, #2
 80068dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80068de:	2302      	movs	r3, #2
 80068e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80068e2:	230c      	movs	r3, #12
 80068e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 80068e6:	f44f 738c 	mov.w	r3, #280	; 0x118
 80068ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80068ec:	2302      	movs	r3, #2
 80068ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80068f0:	2302      	movs	r3, #2
 80068f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80068f4:	2302      	movs	r3, #2
 80068f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80068f8:	2304      	movs	r3, #4
 80068fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006908:	4618      	mov	r0, r3
 800690a:	f00b fe5f 	bl	80125cc <HAL_RCC_OscConfig>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8006914:	f000 fc00 	bl	8007118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006918:	233f      	movs	r3, #63	; 0x3f
 800691a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800691c:	2303      	movs	r3, #3
 800691e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006924:	2308      	movs	r3, #8
 8006926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800692c:	2300      	movs	r3, #0
 800692e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8006930:	2300      	movs	r3, #0
 8006932:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8006934:	2300      	movs	r3, #0
 8006936:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006938:	1d3b      	adds	r3, r7, #4
 800693a:	2103      	movs	r1, #3
 800693c:	4618      	mov	r0, r3
 800693e:	f00c fa77 	bl	8012e30 <HAL_RCC_ClockConfig>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8006948:	f000 fbe6 	bl	8007118 <Error_Handler>
  }
}
 800694c:	bf00      	nop
 800694e:	3770      	adds	r7, #112	; 0x70
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	58024400 	.word	0x58024400
 8006958:	58024800 	.word	0x58024800

0800695c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006960:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <MX_CRC_Init+0x3c>)
 8006962:	4a0e      	ldr	r2, [pc, #56]	; (800699c <MX_CRC_Init+0x40>)
 8006964:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <MX_CRC_Init+0x3c>)
 8006968:	2200      	movs	r2, #0
 800696a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <MX_CRC_Init+0x3c>)
 800696e:	2200      	movs	r2, #0
 8006970:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <MX_CRC_Init+0x3c>)
 8006974:	2200      	movs	r2, #0
 8006976:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006978:	4b07      	ldr	r3, [pc, #28]	; (8006998 <MX_CRC_Init+0x3c>)
 800697a:	2200      	movs	r2, #0
 800697c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800697e:	4b06      	ldr	r3, [pc, #24]	; (8006998 <MX_CRC_Init+0x3c>)
 8006980:	2201      	movs	r2, #1
 8006982:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006984:	4804      	ldr	r0, [pc, #16]	; (8006998 <MX_CRC_Init+0x3c>)
 8006986:	f006 facb 	bl	800cf20 <HAL_CRC_Init>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8006990:	f000 fbc2 	bl	8007118 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8006994:	bf00      	nop
 8006996:	bd80      	pop	{r7, pc}
 8006998:	2400cbb0 	.word	0x2400cbb0
 800699c:	40023000 	.word	0x40023000

080069a0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80069a4:	4b19      	ldr	r3, [pc, #100]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069a6:	4a1a      	ldr	r2, [pc, #104]	; (8006a10 <MX_DMA2D_Init+0x70>)
 80069a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80069aa:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80069b0:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069b2:	2202      	movs	r2, #2
 80069b4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80069bc:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069be:	2200      	movs	r2, #0
 80069c0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80069c2:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069c4:	2202      	movs	r2, #2
 80069c6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80069c8:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80069ce:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80069d4:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80069da:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069dc:	2200      	movs	r2, #0
 80069de:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80069e6:	4809      	ldr	r0, [pc, #36]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069e8:	f006 fb8c 	bl	800d104 <HAL_DMA2D_Init>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80069f2:	f000 fb91 	bl	8007118 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80069f6:	2101      	movs	r1, #1
 80069f8:	4804      	ldr	r0, [pc, #16]	; (8006a0c <MX_DMA2D_Init+0x6c>)
 80069fa:	f006 fcf7 	bl	800d3ec <HAL_DMA2D_ConfigLayer>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8006a04:	f000 fb88 	bl	8007118 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8006a08:	bf00      	nop
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	2400cbd4 	.word	0x2400cbd4
 8006a10:	52001000 	.word	0x52001000

08006a14 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8006a18:	4b1b      	ldr	r3, [pc, #108]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a1a:	4a1c      	ldr	r2, [pc, #112]	; (8006a8c <MX_I2C4_Init+0x78>)
 8006a1c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8006a1e:	4b1a      	ldr	r3, [pc, #104]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a20:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <MX_I2C4_Init+0x7c>)
 8006a22:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8006a24:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006a2a:	4b17      	ldr	r3, [pc, #92]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006a30:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006a3c:	4b12      	ldr	r3, [pc, #72]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006a42:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006a48:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8006a4e:	480e      	ldr	r0, [pc, #56]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a50:	f007 f8a4 	bl	800db9c <HAL_I2C_Init>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8006a5a:	f000 fb5d 	bl	8007118 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8006a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a62:	4809      	ldr	r0, [pc, #36]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a64:	f007 fe5a 	bl	800e71c <HAL_I2CEx_ConfigAnalogFilter>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8006a6e:	f000 fb53 	bl	8007118 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8006a72:	2100      	movs	r1, #0
 8006a74:	4804      	ldr	r0, [pc, #16]	; (8006a88 <MX_I2C4_Init+0x74>)
 8006a76:	f007 fe9c 	bl	800e7b2 <HAL_I2CEx_ConfigDigitalFilter>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8006a80:	f000 fb4a 	bl	8007118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8006a84:	bf00      	nop
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	2400cc3c 	.word	0x2400cc3c
 8006a8c:	58001c00 	.word	0x58001c00
 8006a90:	30808bd0 	.word	0x30808bd0

08006a94 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8006a98:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <MX_JPEG_Init+0x20>)
 8006a9a:	4a07      	ldr	r2, [pc, #28]	; (8006ab8 <MX_JPEG_Init+0x24>)
 8006a9c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8006a9e:	4805      	ldr	r0, [pc, #20]	; (8006ab4 <MX_JPEG_Init+0x20>)
 8006aa0:	f007 fed4 	bl	800e84c <HAL_JPEG_Init>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8006aaa:	f000 fb35 	bl	8007118 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8006aae:	bf00      	nop
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	2400cc90 	.word	0x2400cc90
 8006ab8:	52003000 	.word	0x52003000

08006abc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08e      	sub	sp, #56	; 0x38
 8006ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8006ac2:	1d3b      	adds	r3, r7, #4
 8006ac4:	2234      	movs	r2, #52	; 0x34
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f024 f94d 	bl	802ad68 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8006ace:	4b3a      	ldr	r3, [pc, #232]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006ad0:	4a3a      	ldr	r2, [pc, #232]	; (8006bbc <MX_LTDC_Init+0x100>)
 8006ad2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006ad4:	4b38      	ldr	r3, [pc, #224]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006ada:	4b37      	ldr	r3, [pc, #220]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006ae0:	4b35      	ldr	r3, [pc, #212]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006ae6:	4b34      	ldr	r3, [pc, #208]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8006aec:	4b32      	ldr	r3, [pc, #200]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006aee:	2228      	movs	r2, #40	; 0x28
 8006af0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8006af2:	4b31      	ldr	r3, [pc, #196]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006af4:	2209      	movs	r2, #9
 8006af6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8006af8:	4b2f      	ldr	r3, [pc, #188]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006afa:	222a      	movs	r2, #42	; 0x2a
 8006afc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8006afe:	4b2e      	ldr	r3, [pc, #184]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006b00:	220b      	movs	r2, #11
 8006b02:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8006b04:	4b2c      	ldr	r3, [pc, #176]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006b06:	f240 220a 	movw	r2, #522	; 0x20a
 8006b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8006b0c:	4b2a      	ldr	r3, [pc, #168]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006b0e:	f240 121b 	movw	r2, #283	; 0x11b
 8006b12:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8006b14:	4b28      	ldr	r3, [pc, #160]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006b16:	f240 222a 	movw	r2, #554	; 0x22a
 8006b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8006b1c:	4b26      	ldr	r3, [pc, #152]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006b1e:	f240 121d 	movw	r2, #285	; 0x11d
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006b24:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006b2c:	4b22      	ldr	r3, [pc, #136]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006b34:	4b20      	ldr	r3, [pc, #128]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006b3c:	481e      	ldr	r0, [pc, #120]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006b3e:	f009 fdf5 	bl	801072c <HAL_LTDC_Init>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8006b48:	f000 fae6 	bl	8007118 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8006b50:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006b54:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8006b5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006b5e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8006b60:	2301      	movs	r3, #1
 8006b62:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8006b64:	23ff      	movs	r3, #255	; 0xff
 8006b66:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b70:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006b72:	2305      	movs	r3, #5
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8006b76:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8006b7c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8006b82:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006b86:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8006b88:	23ff      	movs	r3, #255	; 0xff
 8006b8a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006b9a:	1d3b      	adds	r3, r7, #4
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4805      	ldr	r0, [pc, #20]	; (8006bb8 <MX_LTDC_Init+0xfc>)
 8006ba2:	f009 ff4b 	bl	8010a3c <HAL_LTDC_ConfigLayer>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8006bac:	f000 fab4 	bl	8007118 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006bb0:	bf00      	nop
 8006bb2:	3738      	adds	r7, #56	; 0x38
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	2400cdc0 	.word	0x2400cdc0
 8006bbc:	50001000 	.word	0x50001000

08006bc0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8006bc6:	4b2b      	ldr	r3, [pc, #172]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006bc8:	4a2b      	ldr	r2, [pc, #172]	; (8006c78 <MX_OCTOSPI1_Init+0xb8>)
 8006bca:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8006bcc:	4b29      	ldr	r3, [pc, #164]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8006bd2:	4b28      	ldr	r3, [pc, #160]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8006bd8:	4b26      	ldr	r3, [pc, #152]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8006bde:	4b25      	ldr	r3, [pc, #148]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006be0:	221a      	movs	r2, #26
 8006be2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8006be4:	4b23      	ldr	r3, [pc, #140]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006be6:	2202      	movs	r2, #2
 8006be8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8006bea:	4b22      	ldr	r3, [pc, #136]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8006bf0:	4b20      	ldr	r3, [pc, #128]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8006bf6:	4b1f      	ldr	r3, [pc, #124]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8006bfc:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006bfe:	2203      	movs	r2, #3
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8006c02:	4b1c      	ldr	r3, [pc, #112]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8006c08:	4b1a      	ldr	r3, [pc, #104]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8006c0e:	4b19      	ldr	r3, [pc, #100]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8006c14:	4b17      	ldr	r3, [pc, #92]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006c16:	2208      	movs	r2, #8
 8006c18:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8006c1a:	4b16      	ldr	r3, [pc, #88]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8006c20:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8006c26:	4813      	ldr	r0, [pc, #76]	; (8006c74 <MX_OCTOSPI1_Init+0xb4>)
 8006c28:	f00a fd16 	bl	8011658 <HAL_OSPI_Init>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 8006c32:	f000 fa71 	bl	8007118 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8006c36:	2301      	movs	r3, #1
 8006c38:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8006c3e:	2000      	movs	r0, #0
 8006c40:	f004 feec 	bl	800ba1c <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8006c44:	463b      	mov	r3, r7
 8006c46:	4619      	mov	r1, r3
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f004 fe5d 	bl	800b908 <BSP_OSPI_NOR_Init>
 8006c4e:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8006c56:	f000 fa5f 	bl	8007118 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	f004 ff7a 	bl	800bb54 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8006c60:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 8006c68:	f000 fa56 	bl	8007118 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	2400ce68 	.word	0x2400ce68
 8006c78:	52005000 	.word	0x52005000

08006c7c <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8006c82:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <MX_MDMA_Init+0x3c>)
 8006c84:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006c88:	4a0b      	ldr	r2, [pc, #44]	; (8006cb8 <MX_MDMA_Init+0x3c>)
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006c92:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <MX_MDMA_Init+0x3c>)
 8006c94:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2105      	movs	r1, #5
 8006ca4:	207a      	movs	r0, #122	; 0x7a
 8006ca6:	f006 f889 	bl	800cdbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8006caa:	207a      	movs	r0, #122	; 0x7a
 8006cac:	f006 f8a0 	bl	800cdf0 <HAL_NVIC_EnableIRQ>

}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	58024400 	.word	0x58024400

08006cbc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8006cc2:	1d3b      	adds	r3, r7, #4
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	60da      	str	r2, [r3, #12]
 8006cce:	611a      	str	r2, [r3, #16]
 8006cd0:	615a      	str	r2, [r3, #20]
 8006cd2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006cd4:	4b20      	ldr	r3, [pc, #128]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006cd6:	4a21      	ldr	r2, [pc, #132]	; (8006d5c <MX_FMC_Init+0xa0>)
 8006cd8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006cda:	4b1f      	ldr	r3, [pc, #124]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006cdc:	2201      	movs	r2, #1
 8006cde:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006ce6:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006ce8:	2204      	movs	r2, #4
 8006cea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006cec:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006cee:	2210      	movs	r2, #16
 8006cf0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006cf2:	4b19      	ldr	r3, [pc, #100]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006cf4:	2240      	movs	r2, #64	; 0x40
 8006cf6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8006cf8:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cfe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006d00:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8006d06:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006d08:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006d0c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8006d0e:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006d10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d14:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d1c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006d22:	2307      	movs	r3, #7
 8006d24:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8006d26:	2304      	movs	r3, #4
 8006d28:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8006d2a:	2307      	movs	r3, #7
 8006d2c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8006d32:	2302      	movs	r3, #2
 8006d34:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8006d36:	2302      	movs	r3, #2
 8006d38:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4806      	ldr	r0, [pc, #24]	; (8006d58 <MX_FMC_Init+0x9c>)
 8006d40:	f00d ff66 	bl	8014c10 <HAL_SDRAM_Init>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8006d4a:	f000 f9e5 	bl	8007118 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8006d4e:	bf00      	nop
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	2400cec4 	.word	0x2400cec4
 8006d5c:	52004140 	.word	0x52004140

08006d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08e      	sub	sp, #56	; 0x38
 8006d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	605a      	str	r2, [r3, #4]
 8006d70:	609a      	str	r2, [r3, #8]
 8006d72:	60da      	str	r2, [r3, #12]
 8006d74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d76:	4b80      	ldr	r3, [pc, #512]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006d78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d7c:	4a7e      	ldr	r2, [pc, #504]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006d86:	4b7c      	ldr	r3, [pc, #496]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006d88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d90:	623b      	str	r3, [r7, #32]
 8006d92:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006d94:	4b78      	ldr	r3, [pc, #480]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d9a:	4a77      	ldr	r2, [pc, #476]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006da0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006da4:	4b74      	ldr	r3, [pc, #464]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006db2:	4b71      	ldr	r3, [pc, #452]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006db4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006db8:	4a6f      	ldr	r2, [pc, #444]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006dba:	f043 0308 	orr.w	r3, r3, #8
 8006dbe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006dc2:	4b6d      	ldr	r3, [pc, #436]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006dc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dd0:	4b69      	ldr	r3, [pc, #420]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006dd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006dd6:	4a68      	ldr	r2, [pc, #416]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006dd8:	f043 0310 	orr.w	r3, r3, #16
 8006ddc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006de0:	4b65      	ldr	r3, [pc, #404]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006de2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006dee:	4b62      	ldr	r3, [pc, #392]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006df0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006df4:	4a60      	ldr	r2, [pc, #384]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dfa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006dfe:	4b5e      	ldr	r3, [pc, #376]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e0c:	4b5a      	ldr	r3, [pc, #360]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e12:	4a59      	ldr	r2, [pc, #356]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e18:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006e1c:	4b56      	ldr	r3, [pc, #344]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006e2a:	4b53      	ldr	r3, [pc, #332]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e30:	4a51      	ldr	r2, [pc, #324]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006e3a:	4b4f      	ldr	r3, [pc, #316]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006e48:	4b4b      	ldr	r3, [pc, #300]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e4e:	4a4a      	ldr	r2, [pc, #296]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e50:	f043 0320 	orr.w	r3, r3, #32
 8006e54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006e58:	4b47      	ldr	r3, [pc, #284]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e66:	4b44      	ldr	r3, [pc, #272]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e6c:	4a42      	ldr	r2, [pc, #264]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006e76:	4b40      	ldr	r3, [pc, #256]	; (8006f78 <MX_GPIO_Init+0x218>)
 8006e78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	603b      	str	r3, [r7, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 8006e84:	2201      	movs	r2, #1
 8006e86:	f640 0104 	movw	r1, #2052	; 0x804
 8006e8a:	483c      	ldr	r0, [pc, #240]	; (8006f7c <MX_GPIO_Init+0x21c>)
 8006e8c:	f006 fe2e 	bl	800daec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8006e90:	2200      	movs	r2, #0
 8006e92:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8006e96:	483a      	ldr	r0, [pc, #232]	; (8006f80 <MX_GPIO_Init+0x220>)
 8006e98:	f006 fe28 	bl	800daec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ea2:	4838      	ldr	r0, [pc, #224]	; (8006f84 <MX_GPIO_Init+0x224>)
 8006ea4:	f006 fe22 	bl	800daec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2106      	movs	r1, #6
 8006eac:	4836      	ldr	r0, [pc, #216]	; (8006f88 <MX_GPIO_Init+0x228>)
 8006eae:	f006 fe1d 	bl	800daec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8006eb2:	f640 0304 	movw	r3, #2052	; 0x804
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ec8:	4619      	mov	r1, r3
 8006eca:	482c      	ldr	r0, [pc, #176]	; (8006f7c <MX_GPIO_Init+0x21c>)
 8006ecc:	f006 fb3c 	bl	800d548 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8006ed0:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4825      	ldr	r0, [pc, #148]	; (8006f80 <MX_GPIO_Init+0x220>)
 8006eea:	f006 fb2d 	bl	800d548 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8006eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006efc:	2303      	movs	r3, #3
 8006efe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8006f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f04:	4619      	mov	r1, r3
 8006f06:	481f      	ldr	r0, [pc, #124]	; (8006f84 <MX_GPIO_Init+0x224>)
 8006f08:	f006 fb1e 	bl	800d548 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006f10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f16:	2301      	movs	r3, #1
 8006f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8006f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4817      	ldr	r0, [pc, #92]	; (8006f80 <MX_GPIO_Init+0x220>)
 8006f22:	f006 fb11 	bl	800d548 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8006f26:	2302      	movs	r3, #2
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f32:	2300      	movs	r3, #0
 8006f34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4812      	ldr	r0, [pc, #72]	; (8006f88 <MX_GPIO_Init+0x228>)
 8006f3e:	f006 fb03 	bl	800d548 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8006f42:	2304      	movs	r3, #4
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f46:	2301      	movs	r3, #1
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8006f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f56:	4619      	mov	r1, r3
 8006f58:	480b      	ldr	r0, [pc, #44]	; (8006f88 <MX_GPIO_Init+0x228>)
 8006f5a:	f006 faf5 	bl	800d548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2105      	movs	r1, #5
 8006f62:	2008      	movs	r0, #8
 8006f64:	f005 ff2a 	bl	800cdbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006f68:	2008      	movs	r0, #8
 8006f6a:	f005 ff41 	bl	800cdf0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006f6e:	bf00      	nop
 8006f70:	3738      	adds	r7, #56	; 0x38
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	58024400 	.word	0x58024400
 8006f7c:	58021800 	.word	0x58021800
 8006f80:	58021c00 	.word	0x58021c00
 8006f84:	58022000 	.word	0x58022000
 8006f88:	58020000 	.word	0x58020000

08006f8c <SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f00d fe65 	bl	8014c88 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	f005 fdfc 	bl	800cbbc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2208      	movs	r2, #8
 8006fce:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f00d fe50 	bl	8014c88 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2203      	movs	r2, #3
 8006fec:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8007000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f00d fe3e 	bl	8014c88 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800700c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8007010:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2204      	movs	r2, #4
 8007016:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2208      	movs	r2, #8
 800701c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2201      	movs	r2, #1
 8007022:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800702a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f00d fe29 	bl	8014c88 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT); 
 8007036:	f240 6103 	movw	r1, #1539	; 0x603
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f00d fe59 	bl	8014cf2 <HAL_SDRAM_ProgramRefreshRate>

}
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8007050:	2064      	movs	r0, #100	; 0x64
 8007052:	f00e fb71 	bl	8015738 <osDelay>
 8007056:	e7fb      	b.n	8007050 <StartDefaultTask+0x8>

08007058 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800705e:	463b      	mov	r3, r7
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	609a      	str	r2, [r3, #8]
 8007068:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800706a:	f005 fedd 	bl	800ce28 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800706e:	2301      	movs	r3, #1
 8007070:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007072:	2300      	movs	r3, #0
 8007074:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8007076:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800707a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800707c:	231b      	movs	r3, #27
 800707e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8007080:	2300      	movs	r3, #0
 8007082:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007084:	2300      	movs	r3, #0
 8007086:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007088:	2300      	movs	r3, #0
 800708a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800708c:	2301      	movs	r3, #1
 800708e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8007090:	2300      	movs	r3, #0
 8007092:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007094:	2300      	movs	r3, #0
 8007096:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800709c:	463b      	mov	r3, r7
 800709e:	4618      	mov	r0, r3
 80070a0:	f005 fefa 	bl	800ce98 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80070a4:	2301      	movs	r3, #1
 80070a6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80070a8:	2319      	movs	r3, #25
 80070aa:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80070ac:	2303      	movs	r3, #3
 80070ae:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80070b4:	463b      	mov	r3, r7
 80070b6:	4618      	mov	r0, r3
 80070b8:	f005 feee 	bl	800ce98 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80070bc:	2302      	movs	r3, #2
 80070be:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80070c0:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80070c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 80070c6:	2313      	movs	r3, #19
 80070c8:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80070ca:	463b      	mov	r3, r7
 80070cc:	4618      	mov	r0, r3
 80070ce:	f005 fee3 	bl	800ce98 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80070d2:	2303      	movs	r3, #3
 80070d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80070d6:	2311      	movs	r3, #17
 80070d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80070da:	2301      	movs	r3, #1
 80070dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80070de:	463b      	mov	r3, r7
 80070e0:	4618      	mov	r0, r3
 80070e2:	f005 fed9 	bl	800ce98 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80070e6:	2004      	movs	r0, #4
 80070e8:	f005 feb6 	bl	800ce58 <HAL_MPU_Enable>

}
 80070ec:	bf00      	nop
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a04      	ldr	r2, [pc, #16]	; (8007114 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d101      	bne.n	800710a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007106:	f005 fd39 	bl	800cb7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800710a:	bf00      	nop
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	40001000 	.word	0x40001000

08007118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800711c:	bf00      	nop
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <HAL_MspInit+0x38>)
 8007130:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007134:	4a0a      	ldr	r2, [pc, #40]	; (8007160 <HAL_MspInit+0x38>)
 8007136:	f043 0302 	orr.w	r3, r3, #2
 800713a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800713e:	4b08      	ldr	r3, [pc, #32]	; (8007160 <HAL_MspInit+0x38>)
 8007140:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800714c:	2200      	movs	r2, #0
 800714e:	210f      	movs	r1, #15
 8007150:	f06f 0001 	mvn.w	r0, #1
 8007154:	f005 fe32 	bl	800cdbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	58024400 	.word	0x58024400

08007164 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a0b      	ldr	r2, [pc, #44]	; (80071a0 <HAL_CRC_MspInit+0x3c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d10e      	bne.n	8007194 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007176:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <HAL_CRC_MspInit+0x40>)
 8007178:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800717c:	4a09      	ldr	r2, [pc, #36]	; (80071a4 <HAL_CRC_MspInit+0x40>)
 800717e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007182:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8007186:	4b07      	ldr	r3, [pc, #28]	; (80071a4 <HAL_CRC_MspInit+0x40>)
 8007188:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800718c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007194:	bf00      	nop
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40023000 	.word	0x40023000
 80071a4:	58024400 	.word	0x58024400

080071a8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a0e      	ldr	r2, [pc, #56]	; (80071f0 <HAL_DMA2D_MspInit+0x48>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d116      	bne.n	80071e8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80071ba:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <HAL_DMA2D_MspInit+0x4c>)
 80071bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80071c0:	4a0c      	ldr	r2, [pc, #48]	; (80071f4 <HAL_DMA2D_MspInit+0x4c>)
 80071c2:	f043 0310 	orr.w	r3, r3, #16
 80071c6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80071ca:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <HAL_DMA2D_MspInit+0x4c>)
 80071cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80071d8:	2200      	movs	r2, #0
 80071da:	2105      	movs	r1, #5
 80071dc:	205a      	movs	r0, #90	; 0x5a
 80071de:	f005 fded 	bl	800cdbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80071e2:	205a      	movs	r0, #90	; 0x5a
 80071e4:	f005 fe04 	bl	800cdf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	52001000 	.word	0x52001000
 80071f4:	58024400 	.word	0x58024400

080071f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b0ba      	sub	sp, #232	; 0xe8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007200:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007210:	f107 0310 	add.w	r3, r7, #16
 8007214:	22c0      	movs	r2, #192	; 0xc0
 8007216:	2100      	movs	r1, #0
 8007218:	4618      	mov	r0, r3
 800721a:	f023 fda5 	bl	802ad68 <memset>
  if(hi2c->Instance==I2C4)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a27      	ldr	r2, [pc, #156]	; (80072c0 <HAL_I2C_MspInit+0xc8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d146      	bne.n	80072b6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8007228:	f04f 0210 	mov.w	r2, #16
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8007234:	2300      	movs	r3, #0
 8007236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800723a:	f107 0310 	add.w	r3, r7, #16
 800723e:	4618      	mov	r0, r3
 8007240:	f00c f9c4 	bl	80135cc <HAL_RCCEx_PeriphCLKConfig>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800724a:	f7ff ff65 	bl	8007118 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800724e:	4b1d      	ldr	r3, [pc, #116]	; (80072c4 <HAL_I2C_MspInit+0xcc>)
 8007250:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007254:	4a1b      	ldr	r2, [pc, #108]	; (80072c4 <HAL_I2C_MspInit+0xcc>)
 8007256:	f043 0308 	orr.w	r3, r3, #8
 800725a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800725e:	4b19      	ldr	r3, [pc, #100]	; (80072c4 <HAL_I2C_MspInit+0xcc>)
 8007260:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 800726c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007270:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007274:	2312      	movs	r3, #18
 8007276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800727a:	2301      	movs	r3, #1
 800727c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007280:	2302      	movs	r3, #2
 8007282:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007286:	2304      	movs	r3, #4
 8007288:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800728c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007290:	4619      	mov	r1, r3
 8007292:	480d      	ldr	r0, [pc, #52]	; (80072c8 <HAL_I2C_MspInit+0xd0>)
 8007294:	f006 f958 	bl	800d548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007298:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <HAL_I2C_MspInit+0xcc>)
 800729a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800729e:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <HAL_I2C_MspInit+0xcc>)
 80072a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80072a8:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <HAL_I2C_MspInit+0xcc>)
 80072aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b2:	60bb      	str	r3, [r7, #8]
 80072b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80072b6:	bf00      	nop
 80072b8:	37e8      	adds	r7, #232	; 0xe8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	58001c00 	.word	0x58001c00
 80072c4:	58024400 	.word	0x58024400
 80072c8:	58020c00 	.word	0x58020c00

080072cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a0c      	ldr	r2, [pc, #48]	; (800730c <HAL_I2C_MspDeInit+0x40>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d111      	bne.n	8007302 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80072de:	4b0c      	ldr	r3, [pc, #48]	; (8007310 <HAL_I2C_MspDeInit+0x44>)
 80072e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80072e4:	4a0a      	ldr	r2, [pc, #40]	; (8007310 <HAL_I2C_MspDeInit+0x44>)
 80072e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ea:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 80072ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072f2:	4808      	ldr	r0, [pc, #32]	; (8007314 <HAL_I2C_MspDeInit+0x48>)
 80072f4:	f006 fad8 	bl	800d8a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 80072f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80072fc:	4805      	ldr	r0, [pc, #20]	; (8007314 <HAL_I2C_MspDeInit+0x48>)
 80072fe:	f006 fad3 	bl	800d8a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	58001c00 	.word	0x58001c00
 8007310:	58024400 	.word	0x58024400
 8007314:	58020c00 	.word	0x58020c00

08007318 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a57      	ldr	r2, [pc, #348]	; (8007484 <HAL_JPEG_MspInit+0x16c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	f040 80a7 	bne.w	800747a <HAL_JPEG_MspInit+0x162>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800732c:	4b56      	ldr	r3, [pc, #344]	; (8007488 <HAL_JPEG_MspInit+0x170>)
 800732e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007332:	4a55      	ldr	r2, [pc, #340]	; (8007488 <HAL_JPEG_MspInit+0x170>)
 8007334:	f043 0320 	orr.w	r3, r3, #32
 8007338:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800733c:	4b52      	ldr	r3, [pc, #328]	; (8007488 <HAL_JPEG_MspInit+0x170>)
 800733e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 800734a:	4b50      	ldr	r3, [pc, #320]	; (800748c <HAL_JPEG_MspInit+0x174>)
 800734c:	4a50      	ldr	r2, [pc, #320]	; (8007490 <HAL_JPEG_MspInit+0x178>)
 800734e:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8007350:	4b4e      	ldr	r3, [pc, #312]	; (800748c <HAL_JPEG_MspInit+0x174>)
 8007352:	2211      	movs	r2, #17
 8007354:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8007356:	4b4d      	ldr	r3, [pc, #308]	; (800748c <HAL_JPEG_MspInit+0x174>)
 8007358:	2200      	movs	r2, #0
 800735a:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800735c:	4b4b      	ldr	r3, [pc, #300]	; (800748c <HAL_JPEG_MspInit+0x174>)
 800735e:	2280      	movs	r2, #128	; 0x80
 8007360:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8007362:	4b4a      	ldr	r3, [pc, #296]	; (800748c <HAL_JPEG_MspInit+0x174>)
 8007364:	2200      	movs	r2, #0
 8007366:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8007368:	4b48      	ldr	r3, [pc, #288]	; (800748c <HAL_JPEG_MspInit+0x174>)
 800736a:	2202      	movs	r2, #2
 800736c:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800736e:	4b47      	ldr	r3, [pc, #284]	; (800748c <HAL_JPEG_MspInit+0x174>)
 8007370:	2200      	movs	r2, #0
 8007372:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8007374:	4b45      	ldr	r3, [pc, #276]	; (800748c <HAL_JPEG_MspInit+0x174>)
 8007376:	2200      	movs	r2, #0
 8007378:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800737a:	4b44      	ldr	r3, [pc, #272]	; (800748c <HAL_JPEG_MspInit+0x174>)
 800737c:	2280      	movs	r2, #128	; 0x80
 800737e:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8007380:	4b42      	ldr	r3, [pc, #264]	; (800748c <HAL_JPEG_MspInit+0x174>)
 8007382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007386:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8007388:	4b40      	ldr	r3, [pc, #256]	; (800748c <HAL_JPEG_MspInit+0x174>)
 800738a:	2220      	movs	r2, #32
 800738c:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 800738e:	4b3f      	ldr	r3, [pc, #252]	; (800748c <HAL_JPEG_MspInit+0x174>)
 8007390:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8007394:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8007396:	4b3d      	ldr	r3, [pc, #244]	; (800748c <HAL_JPEG_MspInit+0x174>)
 8007398:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800739c:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 800739e:	4b3b      	ldr	r3, [pc, #236]	; (800748c <HAL_JPEG_MspInit+0x174>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80073a4:	4b39      	ldr	r3, [pc, #228]	; (800748c <HAL_JPEG_MspInit+0x174>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80073aa:	4838      	ldr	r0, [pc, #224]	; (800748c <HAL_JPEG_MspInit+0x174>)
 80073ac:	f009 fd56 	bl	8010e5c <HAL_MDMA_Init>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <HAL_JPEG_MspInit+0xa2>
    {
      Error_Handler();
 80073b6:	f7ff feaf 	bl	8007118 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	4833      	ldr	r0, [pc, #204]	; (800748c <HAL_JPEG_MspInit+0x174>)
 80073c0:	f009 fd98 	bl	8010ef4 <HAL_MDMA_ConfigPostRequestMask>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <HAL_JPEG_MspInit+0xb6>
    {
      Error_Handler();
 80073ca:	f7ff fea5 	bl	8007118 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a2e      	ldr	r2, [pc, #184]	; (800748c <HAL_JPEG_MspInit+0x174>)
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
 80073d4:	4a2d      	ldr	r2, [pc, #180]	; (800748c <HAL_JPEG_MspInit+0x174>)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 80073da:	4b2e      	ldr	r3, [pc, #184]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 80073dc:	4a2e      	ldr	r2, [pc, #184]	; (8007498 <HAL_JPEG_MspInit+0x180>)
 80073de:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80073e0:	4b2c      	ldr	r3, [pc, #176]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 80073e2:	2213      	movs	r2, #19
 80073e4:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80073e6:	4b2b      	ldr	r3, [pc, #172]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 80073ec:	4b29      	ldr	r3, [pc, #164]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 80073ee:	22c0      	movs	r2, #192	; 0xc0
 80073f0:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80073f2:	4b28      	ldr	r3, [pc, #160]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80073f8:	4b26      	ldr	r3, [pc, #152]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80073fe:	4b25      	ldr	r3, [pc, #148]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 8007400:	2208      	movs	r2, #8
 8007402:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8007404:	4b23      	ldr	r3, [pc, #140]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 8007406:	2220      	movs	r2, #32
 8007408:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800740a:	4b22      	ldr	r3, [pc, #136]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 800740c:	2200      	movs	r2, #0
 800740e:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8007410:	4b20      	ldr	r3, [pc, #128]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 8007412:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007416:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8007418:	4b1e      	ldr	r3, [pc, #120]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 800741a:	2220      	movs	r2, #32
 800741c:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 800741e:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 8007420:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8007424:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8007426:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 8007428:	f44f 3220 	mov.w	r2, #163840	; 0x28000
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
 800742e:	4b19      	ldr	r3, [pc, #100]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 8007430:	2200      	movs	r2, #0
 8007432:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8007434:	4b17      	ldr	r3, [pc, #92]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 8007436:	2200      	movs	r2, #0
 8007438:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800743a:	4816      	ldr	r0, [pc, #88]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 800743c:	f009 fd0e 	bl	8010e5c <HAL_MDMA_Init>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <HAL_JPEG_MspInit+0x132>
    {
      Error_Handler();
 8007446:	f7ff fe67 	bl	8007118 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	4811      	ldr	r0, [pc, #68]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 8007450:	f009 fd50 	bl	8010ef4 <HAL_MDMA_ConfigPostRequestMask>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <HAL_JPEG_MspInit+0x146>
    {
      Error_Handler();
 800745a:	f7ff fe5d 	bl	8007118 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a0c      	ldr	r2, [pc, #48]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 8007462:	635a      	str	r2, [r3, #52]	; 0x34
 8007464:	4a0b      	ldr	r2, [pc, #44]	; (8007494 <HAL_JPEG_MspInit+0x17c>)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800746a:	2200      	movs	r2, #0
 800746c:	2105      	movs	r1, #5
 800746e:	2079      	movs	r0, #121	; 0x79
 8007470:	f005 fca4 	bl	800cdbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8007474:	2079      	movs	r0, #121	; 0x79
 8007476:	f005 fcbb 	bl	800cdf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	52003000 	.word	0x52003000
 8007488:	58024400 	.word	0x58024400
 800748c:	2400cce8 	.word	0x2400cce8
 8007490:	52000200 	.word	0x52000200
 8007494:	2400cd54 	.word	0x2400cd54
 8007498:	520001c0 	.word	0x520001c0

0800749c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b0bc      	sub	sp, #240	; 0xf0
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	605a      	str	r2, [r3, #4]
 80074ae:	609a      	str	r2, [r3, #8]
 80074b0:	60da      	str	r2, [r3, #12]
 80074b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80074b4:	f107 0318 	add.w	r3, r7, #24
 80074b8:	22c0      	movs	r2, #192	; 0xc0
 80074ba:	2100      	movs	r1, #0
 80074bc:	4618      	mov	r0, r3
 80074be:	f023 fc53 	bl	802ad68 <memset>
  if(hltdc->Instance==LTDC)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a57      	ldr	r2, [pc, #348]	; (8007624 <HAL_LTDC_MspInit+0x188>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	f040 80a6 	bne.w	800761a <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80074ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 80074da:	2318      	movs	r3, #24
 80074dc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 80074de:	23c9      	movs	r3, #201	; 0xc9
 80074e0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80074e2:	2302      	movs	r3, #2
 80074e4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80074e6:	2302      	movs	r3, #2
 80074e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 80074ea:	2315      	movs	r3, #21
 80074ec:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 80074f6:	f241 5356 	movw	r3, #5462	; 0x1556
 80074fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80074fc:	f107 0318 	add.w	r3, r7, #24
 8007500:	4618      	mov	r0, r3
 8007502:	f00c f863 	bl	80135cc <HAL_RCCEx_PeriphCLKConfig>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 800750c:	f7ff fe04 	bl	8007118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007510:	4b45      	ldr	r3, [pc, #276]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 8007512:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8007516:	4a44      	ldr	r2, [pc, #272]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 8007518:	f043 0308 	orr.w	r3, r3, #8
 800751c:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8007520:	4b41      	ldr	r3, [pc, #260]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 8007522:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8007526:	f003 0308 	and.w	r3, r3, #8
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800752e:	4b3e      	ldr	r3, [pc, #248]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 8007530:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007534:	4a3c      	ldr	r2, [pc, #240]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 8007536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800753a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800753e:	4b3a      	ldr	r3, [pc, #232]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 8007540:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800754c:	4b36      	ldr	r3, [pc, #216]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 800754e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007552:	4a35      	ldr	r2, [pc, #212]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 8007554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007558:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800755c:	4b32      	ldr	r3, [pc, #200]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 800755e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800756a:	4b2f      	ldr	r3, [pc, #188]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 800756c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007570:	4a2d      	ldr	r2, [pc, #180]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 8007572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007576:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800757a:	4b2b      	ldr	r3, [pc, #172]	; (8007628 <HAL_LTDC_MspInit+0x18c>)
 800757c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8007588:	23ff      	movs	r3, #255	; 0xff
 800758a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800758e:	2302      	movs	r3, #2
 8007590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007594:	2300      	movs	r3, #0
 8007596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800759a:	2300      	movs	r3, #0
 800759c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80075a0:	230e      	movs	r3, #14
 80075a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80075a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80075aa:	4619      	mov	r1, r3
 80075ac:	481f      	ldr	r0, [pc, #124]	; (800762c <HAL_LTDC_MspInit+0x190>)
 80075ae:	f005 ffcb 	bl	800d548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 80075b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ba:	2302      	movs	r3, #2
 80075bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075c6:	2300      	movs	r3, #0
 80075c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80075cc:	230e      	movs	r3, #14
 80075ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80075d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80075d6:	4619      	mov	r1, r3
 80075d8:	4815      	ldr	r0, [pc, #84]	; (8007630 <HAL_LTDC_MspInit+0x194>)
 80075da:	f005 ffb5 	bl	800d548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 80075de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80075e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e6:	2302      	movs	r3, #2
 80075e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075f2:	2300      	movs	r3, #0
 80075f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80075f8:	230e      	movs	r3, #14
 80075fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80075fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007602:	4619      	mov	r1, r3
 8007604:	480b      	ldr	r0, [pc, #44]	; (8007634 <HAL_LTDC_MspInit+0x198>)
 8007606:	f005 ff9f 	bl	800d548 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800760a:	2200      	movs	r2, #0
 800760c:	2105      	movs	r1, #5
 800760e:	2058      	movs	r0, #88	; 0x58
 8007610:	f005 fbd4 	bl	800cdbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8007614:	2058      	movs	r0, #88	; 0x58
 8007616:	f005 fbeb 	bl	800cdf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800761a:	bf00      	nop
 800761c:	37f0      	adds	r7, #240	; 0xf0
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	50001000 	.word	0x50001000
 8007628:	58024400 	.word	0x58024400
 800762c:	58022800 	.word	0x58022800
 8007630:	58022400 	.word	0x58022400
 8007634:	58022000 	.word	0x58022000

08007638 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b0b4      	sub	sp, #208	; 0xd0
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007640:	f107 0310 	add.w	r3, r7, #16
 8007644:	22c0      	movs	r2, #192	; 0xc0
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f023 fb8d 	bl	802ad68 <memset>
  if(hospi->Instance==OCTOSPI1)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a28      	ldr	r2, [pc, #160]	; (80076f4 <HAL_OSPI_MspInit+0xbc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d148      	bne.n	80076ea <HAL_OSPI_MspInit+0xb2>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8007658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8007664:	2318      	movs	r3, #24
 8007666:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 8007668:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800766c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800766e:	2302      	movs	r3, #2
 8007670:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8007672:	2302      	movs	r3, #2
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8007676:	2302      	movs	r3, #2
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800767a:	2300      	movs	r3, #0
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800767e:	2300      	movs	r3, #0
 8007680:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8007686:	2320      	movs	r3, #32
 8007688:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800768a:	f107 0310 	add.w	r3, r7, #16
 800768e:	4618      	mov	r0, r3
 8007690:	f00b ff9c 	bl	80135cc <HAL_RCCEx_PeriphCLKConfig>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_OSPI_MspInit+0x66>
    {
      Error_Handler();
 800769a:	f7ff fd3d 	bl	8007118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800769e:	4b16      	ldr	r3, [pc, #88]	; (80076f8 <HAL_OSPI_MspInit+0xc0>)
 80076a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80076a4:	4a14      	ldr	r2, [pc, #80]	; (80076f8 <HAL_OSPI_MspInit+0xc0>)
 80076a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076aa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80076ae:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <HAL_OSPI_MspInit+0xc0>)
 80076b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80076b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80076bc:	4b0e      	ldr	r3, [pc, #56]	; (80076f8 <HAL_OSPI_MspInit+0xc0>)
 80076be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80076c2:	4a0d      	ldr	r2, [pc, #52]	; (80076f8 <HAL_OSPI_MspInit+0xc0>)
 80076c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076c8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80076cc:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <HAL_OSPI_MspInit+0xc0>)
 80076ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80076d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076d6:	60bb      	str	r3, [r7, #8]
 80076d8:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80076da:	2200      	movs	r2, #0
 80076dc:	2105      	movs	r1, #5
 80076de:	205c      	movs	r0, #92	; 0x5c
 80076e0:	f005 fb6c 	bl	800cdbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80076e4:	205c      	movs	r0, #92	; 0x5c
 80076e6:	f005 fb83 	bl	800cdf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80076ea:	bf00      	nop
 80076ec:	37d0      	adds	r7, #208	; 0xd0
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	52005000 	.word	0x52005000
 80076f8:	58024400 	.word	0x58024400

080076fc <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a0c      	ldr	r2, [pc, #48]	; (800773c <HAL_OSPI_MspDeInit+0x40>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d112      	bne.n	8007734 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <HAL_OSPI_MspDeInit+0x44>)
 8007710:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007714:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <HAL_OSPI_MspDeInit+0x44>)
 8007716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800771a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800771e:	4b08      	ldr	r3, [pc, #32]	; (8007740 <HAL_OSPI_MspDeInit+0x44>)
 8007720:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007724:	4a06      	ldr	r2, [pc, #24]	; (8007740 <HAL_OSPI_MspDeInit+0x44>)
 8007726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800772a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 800772e:	205c      	movs	r0, #92	; 0x5c
 8007730:	f005 fb6c 	bl	800ce0c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	52005000 	.word	0x52005000
 8007740:	58024400 	.word	0x58024400

08007744 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007744:	b580      	push	{r7, lr}
 8007746:	b0b8      	sub	sp, #224	; 0xe0
 8007748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800774a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	605a      	str	r2, [r3, #4]
 8007754:	609a      	str	r2, [r3, #8]
 8007756:	60da      	str	r2, [r3, #12]
 8007758:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800775a:	4b51      	ldr	r3, [pc, #324]	; (80078a0 <HAL_FMC_MspInit+0x15c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 8099 	bne.w	8007896 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8007764:	4b4e      	ldr	r3, [pc, #312]	; (80078a0 <HAL_FMC_MspInit+0x15c>)
 8007766:	2201      	movs	r2, #1
 8007768:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800776a:	f107 0308 	add.w	r3, r7, #8
 800776e:	22c0      	movs	r2, #192	; 0xc0
 8007770:	2100      	movs	r1, #0
 8007772:	4618      	mov	r0, r3
 8007774:	f023 faf8 	bl	802ad68 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8007778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8007784:	2300      	movs	r3, #0
 8007786:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007788:	f107 0308 	add.w	r3, r7, #8
 800778c:	4618      	mov	r0, r3
 800778e:	f00b ff1d 	bl	80135cc <HAL_RCCEx_PeriphCLKConfig>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8007798:	f7ff fcbe 	bl	8007118 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800779c:	4b41      	ldr	r3, [pc, #260]	; (80078a4 <HAL_FMC_MspInit+0x160>)
 800779e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80077a2:	4a40      	ldr	r2, [pc, #256]	; (80078a4 <HAL_FMC_MspInit+0x160>)
 80077a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077a8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80077ac:	4b3d      	ldr	r3, [pc, #244]	; (80078a4 <HAL_FMC_MspInit+0x160>)
 80077ae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80077b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80077ba:	f248 1333 	movw	r3, #33075	; 0x8133
 80077be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077c2:	2302      	movs	r3, #2
 80077c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077ce:	2303      	movs	r3, #3
 80077d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80077d4:	230c      	movs	r3, #12
 80077d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80077da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80077de:	4619      	mov	r1, r3
 80077e0:	4831      	ldr	r0, [pc, #196]	; (80078a8 <HAL_FMC_MspInit+0x164>)
 80077e2:	f005 feb1 	bl	800d548 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 80077e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80077ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ee:	2302      	movs	r3, #2
 80077f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077fa:	2303      	movs	r3, #3
 80077fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007800:	230c      	movs	r3, #12
 8007802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007806:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800780a:	4619      	mov	r1, r3
 800780c:	4827      	ldr	r0, [pc, #156]	; (80078ac <HAL_FMC_MspInit+0x168>)
 800780e:	f005 fe9b 	bl	800d548 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_7
 8007812:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800781a:	2302      	movs	r3, #2
 800781c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007820:	2300      	movs	r3, #0
 8007822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007826:	2303      	movs	r3, #3
 8007828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800782c:	230c      	movs	r3, #12
 800782e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007832:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007836:	4619      	mov	r1, r3
 8007838:	481d      	ldr	r0, [pc, #116]	; (80078b0 <HAL_FMC_MspInit+0x16c>)
 800783a:	f005 fe85 	bl	800d548 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 800783e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007842:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007846:	2302      	movs	r3, #2
 8007848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784c:	2300      	movs	r3, #0
 800784e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007852:	2303      	movs	r3, #3
 8007854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007858:	230c      	movs	r3, #12
 800785a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800785e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007862:	4619      	mov	r1, r3
 8007864:	4813      	ldr	r0, [pc, #76]	; (80078b4 <HAL_FMC_MspInit+0x170>)
 8007866:	f005 fe6f 	bl	800d548 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 800786a:	23e0      	movs	r3, #224	; 0xe0
 800786c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007870:	2302      	movs	r3, #2
 8007872:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007876:	2300      	movs	r3, #0
 8007878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800787c:	2303      	movs	r3, #3
 800787e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007882:	230c      	movs	r3, #12
 8007884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007888:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800788c:	4619      	mov	r1, r3
 800788e:	480a      	ldr	r0, [pc, #40]	; (80078b8 <HAL_FMC_MspInit+0x174>)
 8007890:	f005 fe5a 	bl	800d548 <HAL_GPIO_Init>
 8007894:	e000      	b.n	8007898 <HAL_FMC_MspInit+0x154>
    return;
 8007896:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007898:	37e0      	adds	r7, #224	; 0xe0
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	2400cf14 	.word	0x2400cf14
 80078a4:	58024400 	.word	0x58024400
 80078a8:	58021800 	.word	0x58021800
 80078ac:	58020c00 	.word	0x58020c00
 80078b0:	58021000 	.word	0x58021000
 80078b4:	58021400 	.word	0x58021400
 80078b8:	58021c00 	.word	0x58021c00

080078bc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80078c4:	f7ff ff3e 	bl	8007744 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b090      	sub	sp, #64	; 0x40
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b0f      	cmp	r3, #15
 80078dc:	d827      	bhi.n	800792e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80078de:	2200      	movs	r2, #0
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	2036      	movs	r0, #54	; 0x36
 80078e4:	f005 fa6a 	bl	800cdbc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80078e8:	2036      	movs	r0, #54	; 0x36
 80078ea:	f005 fa81 	bl	800cdf0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80078ee:	4a29      	ldr	r2, [pc, #164]	; (8007994 <HAL_InitTick+0xc4>)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80078f4:	4b28      	ldr	r3, [pc, #160]	; (8007998 <HAL_InitTick+0xc8>)
 80078f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80078fa:	4a27      	ldr	r2, [pc, #156]	; (8007998 <HAL_InitTick+0xc8>)
 80078fc:	f043 0310 	orr.w	r3, r3, #16
 8007900:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8007904:	4b24      	ldr	r3, [pc, #144]	; (8007998 <HAL_InitTick+0xc8>)
 8007906:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800790a:	f003 0310 	and.w	r3, r3, #16
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007912:	f107 0210 	add.w	r2, r7, #16
 8007916:	f107 0314 	add.w	r3, r7, #20
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f00b fe13 	bl	8013548 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <HAL_InitTick+0x6a>
 800792c:	e001      	b.n	8007932 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e02b      	b.n	800798a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007932:	f00b fddd 	bl	80134f0 <HAL_RCC_GetPCLK1Freq>
 8007936:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007938:	e004      	b.n	8007944 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800793a:	f00b fdd9 	bl	80134f0 <HAL_RCC_GetPCLK1Freq>
 800793e:	4603      	mov	r3, r0
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007946:	4a15      	ldr	r2, [pc, #84]	; (800799c <HAL_InitTick+0xcc>)
 8007948:	fba2 2303 	umull	r2, r3, r2, r3
 800794c:	0c9b      	lsrs	r3, r3, #18
 800794e:	3b01      	subs	r3, #1
 8007950:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007952:	4b13      	ldr	r3, [pc, #76]	; (80079a0 <HAL_InitTick+0xd0>)
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <HAL_InitTick+0xd4>)
 8007956:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8007958:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <HAL_InitTick+0xd0>)
 800795a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800795e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007960:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <HAL_InitTick+0xd0>)
 8007962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007964:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007966:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <HAL_InitTick+0xd0>)
 8007968:	2200      	movs	r2, #0
 800796a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800796c:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <HAL_InitTick+0xd0>)
 800796e:	2200      	movs	r2, #0
 8007970:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007972:	480b      	ldr	r0, [pc, #44]	; (80079a0 <HAL_InitTick+0xd0>)
 8007974:	f00d f9e5 	bl	8014d42 <HAL_TIM_Base_Init>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d104      	bne.n	8007988 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800797e:	4808      	ldr	r0, [pc, #32]	; (80079a0 <HAL_InitTick+0xd0>)
 8007980:	f00d fa40 	bl	8014e04 <HAL_TIM_Base_Start_IT>
 8007984:	4603      	mov	r3, r0
 8007986:	e000      	b.n	800798a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
}
 800798a:	4618      	mov	r0, r3
 800798c:	3740      	adds	r7, #64	; 0x40
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	2400005c 	.word	0x2400005c
 8007998:	58024400 	.word	0x58024400
 800799c:	431bde83 	.word	0x431bde83
 80079a0:	2400cf18 	.word	0x2400cf18
 80079a4:	40001000 	.word	0x40001000

080079a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80079ac:	bf00      	nop
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079b6:	b480      	push	{r7}
 80079b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079ba:	e7fe      	b.n	80079ba <HardFault_Handler+0x4>

080079bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079c0:	e7fe      	b.n	80079c0 <MemManage_Handler+0x4>

080079c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079c2:	b480      	push	{r7}
 80079c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079c6:	e7fe      	b.n	80079c6 <BusFault_Handler+0x4>

080079c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079cc:	e7fe      	b.n	80079cc <UsageFault_Handler+0x4>

080079ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079ce:	b480      	push	{r7}
 80079d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079d2:	bf00      	nop
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80079e0:	2004      	movs	r0, #4
 80079e2:	f006 f8b6 	bl	800db52 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80079e6:	bf00      	nop
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80079f0:	4802      	ldr	r0, [pc, #8]	; (80079fc <TIM6_DAC_IRQHandler+0x10>)
 80079f2:	f00d fa7f 	bl	8014ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80079f6:	bf00      	nop
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	2400cf18 	.word	0x2400cf18

08007a00 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8007a04:	4802      	ldr	r0, [pc, #8]	; (8007a10 <LTDC_IRQHandler+0x10>)
 8007a06:	f008 ff61 	bl	80108cc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8007a0a:	bf00      	nop
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	2400cdc0 	.word	0x2400cdc0

08007a14 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8007a18:	4802      	ldr	r0, [pc, #8]	; (8007a24 <DMA2D_IRQHandler+0x10>)
 8007a1a:	f005 fbd7 	bl	800d1cc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8007a1e:	bf00      	nop
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	2400cbd4 	.word	0x2400cbd4

08007a28 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8007a2c:	4802      	ldr	r0, [pc, #8]	; (8007a38 <OCTOSPI1_IRQHandler+0x10>)
 8007a2e:	f009 fef7 	bl	8011820 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8007a32:	bf00      	nop
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	2400ce68 	.word	0x2400ce68

08007a3c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8007a40:	4802      	ldr	r0, [pc, #8]	; (8007a4c <JPEG_IRQHandler+0x10>)
 8007a42:	f007 f9ee 	bl	800ee22 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8007a46:	bf00      	nop
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	2400cc90 	.word	0x2400cc90

08007a50 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8007a54:	4803      	ldr	r0, [pc, #12]	; (8007a64 <MDMA_IRQHandler+0x14>)
 8007a56:	f009 fba3 	bl	80111a0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8007a5a:	4803      	ldr	r0, [pc, #12]	; (8007a68 <MDMA_IRQHandler+0x18>)
 8007a5c:	f009 fba0 	bl	80111a0 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8007a60:	bf00      	nop
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	2400cd54 	.word	0x2400cd54
 8007a68:	2400cce8 	.word	0x2400cce8

08007a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
	return 1;
 8007a70:	2301      	movs	r3, #1
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <_kill>:

int _kill(int pid, int sig)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007a86:	f023 f911 	bl	802acac <__errno>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2216      	movs	r2, #22
 8007a8e:	601a      	str	r2, [r3, #0]
	return -1;
 8007a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <_exit>:

void _exit (int status)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff ffe7 	bl	8007a7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8007aae:	e7fe      	b.n	8007aae <_exit+0x12>

08007ab0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e00a      	b.n	8007ad8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007ac2:	f3af 8000 	nop.w
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	60ba      	str	r2, [r7, #8]
 8007ace:	b2ca      	uxtb	r2, r1
 8007ad0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	617b      	str	r3, [r7, #20]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	dbf0      	blt.n	8007ac2 <_read+0x12>
	}

return len;
 8007ae0:	687b      	ldr	r3, [r7, #4]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	e009      	b.n	8007b10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	60ba      	str	r2, [r7, #8]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	dbf1      	blt.n	8007afc <_write+0x12>
	}
	return len;
 8007b18:	687b      	ldr	r3, [r7, #4]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <_close>:

int _close(int file)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
	return -1;
 8007b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b4a:	605a      	str	r2, [r3, #4]
	return 0;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <_isatty>:

int _isatty(int file)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
	return 1;
 8007b62:	2301      	movs	r3, #1
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
	return 0;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007b94:	4b11      	ldr	r3, [pc, #68]	; (8007bdc <_sbrk+0x50>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <_sbrk+0x16>
		heap_end = &end;
 8007b9c:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <_sbrk+0x50>)
 8007b9e:	4a10      	ldr	r2, [pc, #64]	; (8007be0 <_sbrk+0x54>)
 8007ba0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007ba2:	4b0e      	ldr	r3, [pc, #56]	; (8007bdc <_sbrk+0x50>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007ba8:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <_sbrk+0x50>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4413      	add	r3, r2
 8007bb0:	466a      	mov	r2, sp
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d907      	bls.n	8007bc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007bb6:	f023 f879 	bl	802acac <__errno>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	220c      	movs	r2, #12
 8007bbe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc4:	e006      	b.n	8007bd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007bc6:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <_sbrk+0x50>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	4a03      	ldr	r2, [pc, #12]	; (8007bdc <_sbrk+0x50>)
 8007bd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	2400cf64 	.word	0x2400cf64
 8007be0:	240281f8 	.word	0x240281f8

08007be4 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	887a      	ldrh	r2, [r7, #2]
 8007bf4:	801a      	strh	r2, [r3, #0]
    {
    }
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
          visible(true)
 8007c0c:	4a14      	ldr	r2, [pc, #80]	; (8007c60 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3304      	adds	r3, #4
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fb fb12 	bl	8003240 <_ZN8touchgfx4RectC1Ev>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	330c      	adds	r3, #12
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fb fb0d 	bl	8003240 <_ZN8touchgfx4RectC1Ev>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	615a      	str	r2, [r3, #20]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	619a      	str	r2, [r3, #24]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	61da      	str	r2, [r3, #28]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	841a      	strh	r2, [r3, #32]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	845a      	strh	r2, [r3, #34]	; 0x22
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	0802fd38 	.word	0x0802fd38

08007c64 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	4611      	mov	r1, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	817b      	strh	r3, [r7, #10]
 8007c76:	460b      	mov	r3, r1
 8007c78:	813b      	strh	r3, [r7, #8]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 8007c7e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007c82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007c86:	4619      	mov	r1, r3
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 f80c 	bl	8007ca6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8007c8e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c96:	4619      	mov	r1, r3
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f822 	bl	8007ce2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	807b      	strh	r3, [r7, #2]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	803b      	strh	r3, [r7, #0]
        setX(x);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3330      	adds	r3, #48	; 0x30
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
        setY(y);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3334      	adds	r3, #52	; 0x34
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
    }
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	807b      	strh	r3, [r7, #2]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3338      	adds	r3, #56	; 0x38
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
        setHeight(height);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	333c      	adds	r3, #60	; 0x3c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007d10:	4611      	mov	r1, r2
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
    }
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	78fa      	ldrb	r2, [r7, #3]
 8007d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8007d32:	bf00      	nop
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
     * @param [in] w The widget to remove.
     *
     * @note If widget has been registered multiple times, an equal number of calls to unregister
     *       are required to stop widget from receiving tick events.
     */
    void unregisterTimerWidget(const Drawable* w)
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
    {
        timerWidgets.remove(w);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f017 fa31 	bl	801f1b6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
    }
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
    {
 8007d64:	4a06      	ldr	r2, [pc, #24]	; (8007d80 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fdb8 	bl	80088e4 <_ZN8touchgfx9ContainerD1Ev>
    }
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	0802fe3c 	.word	0x0802fe3c

08007d84 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
    }
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff ffe5 	bl	8007d5c <_ZN8touchgfx6ScreenD1Ev>
 8007d92:	213c      	movs	r1, #60	; 0x3c
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f022 fd7c 	bl	802a892 <_ZdlPvj>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
    {
    }
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
    {
    }
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
    {
    }
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
    {
    }
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f012 f89f 	bl	8019f60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <_ZN8touchgfx6WidgetC1Ev>:
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff fee4 	bl	8007c04 <_ZN8touchgfx8DrawableC1Ev>
 8007e3c:	4a03      	ldr	r2, [pc, #12]	; (8007e4c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	0802e55c 	.word	0x0802e55c

08007e50 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	2326      	movs	r3, #38	; 0x26
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2100      	movs	r1, #0
 8007e62:	f022 ff81 	bl	802ad68 <memset>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff ffdf 	bl	8007e2c <_ZN8touchgfx6WidgetC1Ev>
 8007e6e:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	22ff      	movs	r2, #255	; 0xff
 8007e78:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3328      	adds	r3, #40	; 0x28
 8007e80:	2100      	movs	r1, #0
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fc f931 	bl	80040ea <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	0802fa54 	.word	0x0802fa54

08007e98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	2326      	movs	r3, #38	; 0x26
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	f022 ff4f 	bl	802ad68 <memset>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff ffad 	bl	8007e2c <_ZN8touchgfx6WidgetC1Ev>
 8007ed2:	4a0a      	ldr	r2, [pc, #40]	; (8007efc <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	629a      	str	r2, [r3, #40]	; 0x28
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2101      	movs	r1, #1
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff ff17 	bl	8007d1e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	0802f7e8 	.word	0x0802f7e8

08007f00 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <_ZN8touchgfx14AbstractButton13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00d      	beq.n	8007f48 <_ZN8touchgfx14AbstractButton13executeActionEv+0x2c>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	330c      	adds	r3, #12
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4798      	blx	r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <_ZN8touchgfx14AbstractButton13executeActionEv+0x2c>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <_ZN8touchgfx14AbstractButton13executeActionEv+0x2e>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d009      	beq.n	8007f62 <_ZN8touchgfx14AbstractButton13executeActionEv+0x46>
        {
            action->execute(*this);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3308      	adds	r3, #8
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	4610      	mov	r0, r2
 8007f60:	4798      	blx	r3
        }
    }
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
    /**
     * Function to determine if the AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	4a05      	ldr	r2, [pc, #20]	; (8007fa4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fc fa7f 	bl	8004498 <_ZN8touchgfx6WidgetD1Ev>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	0802f7e8 	.word	0x0802f7e8

08007fa8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff ffe7 	bl	8007f84 <_ZN8touchgfx14AbstractButtonD1Ev>
 8007fb6:	2130      	movs	r1, #48	; 0x30
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f022 fc6a 	bl	802a892 <_ZdlPvj>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff ff6e 	bl	8007eb4 <_ZN8touchgfx14AbstractButtonC1Ev>
 8007fd8:	4a0c      	ldr	r2, [pc, #48]	; (800800c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	332e      	adds	r3, #46	; 0x2e
 8007fe2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff fdfc 	bl	8007be4 <_ZN8touchgfx6BitmapC1Et>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3330      	adds	r3, #48	; 0x30
 8007ff0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7ff fdf5 	bl	8007be4 <_ZN8touchgfx6BitmapC1Et>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	22ff      	movs	r2, #255	; 0xff
 8007ffe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	0802fba4 	.word	0x0802fba4

08008010 <_ZNK8touchgfx6Button17invalidateContentEv>:
    Bitmap getCurrentlyDisplayedBitmap() const
    {
        return (pressed ? down : up);
    }

    virtual void invalidateContent() const
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
    {
        if (alpha > 0)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <_ZNK8touchgfx6Button17invalidateContentEv+0x1a>
        {
            Widget::invalidateContent();
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4618      	mov	r0, r3
 8008026:	f7fc f8af 	bl	8004188 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	8812      	ldrh	r2, [r2, #0]
 8008044:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	68b9      	ldr	r1, [r7, #8]
 800804c:	4618      	mov	r0, r3
 800804e:	f015 f8ab 	bl	801d1a8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
            : v(i)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	601a      	str	r2, [r3, #0]
        {
        }
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
        {
            return v;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
        }
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
    void setPainter(const AbstractPainter& painter)
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
        canvasPainter = &painter;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3308      	adds	r3, #8
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fc fae3 	bl	8004688 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 80080c6:	f107 0314 	add.w	r3, r7, #20
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fa fb7e 	bl	80027cc <_ZNK8touchgfx9colortypecvmEv>
 80080d0:	4603      	mov	r3, r0
 80080d2:	0c1b      	lsrs	r3, r3, #16
 80080d4:	b2da      	uxtb	r2, r3
        painterRed = Color::getRed(color);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	741a      	strb	r2, [r3, #16]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 80080de:	f107 0310 	add.w	r3, r7, #16
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fa fb72 	bl	80027cc <_ZNK8touchgfx9colortypecvmEv>
 80080e8:	4603      	mov	r3, r0
 80080ea:	0a1b      	lsrs	r3, r3, #8
 80080ec:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	745a      	strb	r2, [r3, #17]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 80080f6:	f107 030c 	add.w	r3, r7, #12
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fa fb66 	bl	80027cc <_ZNK8touchgfx9colortypecvmEv>
 8008100:	4603      	mov	r3, r0
 8008102:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	749a      	strb	r2, [r3, #18]
    }
 8008108:	bf00      	nop
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 8008110:	f1a0 0008 	sub.w	r0, r0, #8
 8008114:	e7ca      	b.n	80080ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

08008116 <_ZN17AppScreenViewBase19ButtonCallsThisFuncEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ButtonCallsThisFunc()
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in AppScreen
    }
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
	...

0800812c <_ZN8touchgfx4ViewI18AppScreenPresenterED1Ev>:
 * @see Screen
 *
 * @note All views in the application must be a subclass of this type.
 */
template <class T>
class View : public Screen
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	4a05      	ldr	r2, [pc, #20]	; (800814c <_ZN8touchgfx4ViewI18AppScreenPresenterED1Ev+0x20>)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff fe0d 	bl	8007d5c <_ZN8touchgfx6ScreenD1Ev>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4618      	mov	r0, r3
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	0802ead4 	.word	0x0802ead4

08008150 <_ZN8touchgfx4ViewI18AppScreenPresenterED0Ev>:
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff ffe7 	bl	800812c <_ZN8touchgfx4ViewI18AppScreenPresenterED1Ev>
 800815e:	2140      	movs	r1, #64	; 0x40
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f022 fb96 	bl	802a892 <_ZdlPvj>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <_ZN17AppScreenViewBaseC1Ev>:
#include <gui_generated/appscreen_screen/AppScreenViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

AppScreenViewBase::AppScreenViewBase() :
 8008170:	b590      	push	{r4, r7, lr}
 8008172:	b091      	sub	sp, #68	; 0x44
 8008174:	af02      	add	r7, sp, #8
 8008176:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &AppScreenViewBase::buttonCallbackHandler)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f9ee 	bl	800855c <_ZN8touchgfx4ViewI18AppScreenPresenterEC1Ev>
 8008180:	4ac1      	ldr	r2, [pc, #772]	; (8008488 <_ZN17AppScreenViewBaseC1Ev+0x318>)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3340      	adds	r3, #64	; 0x40
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff fe60 	bl	8007e50 <_ZN8touchgfx3BoxC1Ev>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8008196:	f107 0308 	add.w	r3, r7, #8
 800819a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff fd20 	bl	8007be4 <_ZN8touchgfx6BitmapC1Et>
 80081a4:	f107 0308 	add.w	r3, r7, #8
 80081a8:	4619      	mov	r1, r3
 80081aa:	4620      	mov	r0, r4
 80081ac:	f014 fc3a 	bl	801ca24 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3398      	adds	r3, #152	; 0x98
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fa45 	bl	8008644 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEEC1Ev>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	33ec      	adds	r3, #236	; 0xec
 80081be:	4618      	mov	r0, r3
 80081c0:	f014 fe94 	bl	801ceec <_ZN8touchgfx5GaugeC1Ev>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f503 7423 	add.w	r4, r3, #652	; 0x28c
 80081ca:	f107 030c 	add.w	r3, r7, #12
 80081ce:	2100      	movs	r1, #0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fb ff8a 	bl	80040ea <_ZN8touchgfx9colortypeC1Em>
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	4620      	mov	r0, r4
 80081da:	f7fc fae3 	bl	80047a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f503 50f6 	add.w	r0, r3, #7872	; 0x1ec0
 80081e4:	4ba9      	ldr	r3, [pc, #676]	; (800848c <_ZN17AppScreenViewBaseC1Ev+0x31c>)
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	2300      	movs	r3, #0
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	f107 0310 	add.w	r3, r7, #16
 80081f0:	cb0c      	ldmia	r3, {r2, r3}
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	f000 fa74 	bl	80086e0 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80081fe:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8008202:	4618      	mov	r0, r3
 8008204:	f015 ff64 	bl	801e0d0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    
    __background.setPosition(0, 0, 480, 272);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800820e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008218:	2200      	movs	r2, #0
 800821a:	2100      	movs	r1, #0
 800821c:	f7ff fd22 	bl	8007c64 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008226:	2300      	movs	r3, #0
 8008228:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800822c:	2300      	movs	r3, #0
 800822e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008232:	2300      	movs	r3, #0
 8008234:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008238:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800823c:	041b      	lsls	r3, r3, #16
 800823e:	461a      	mov	r2, r3
 8008240:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	431a      	orrs	r2, r3
 8008248:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800824c:	4313      	orrs	r3, r2
 800824e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f7fb ff46 	bl	80040ea <_ZN8touchgfx9colortypeC1Em>
 800825e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008260:	4619      	mov	r1, r3
 8008262:	4620      	mov	r0, r4
 8008264:	f7ff fe18 	bl	8007e98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	3340      	adds	r3, #64	; 0x40
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7ff fdcb 	bl	8007e0c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    BG_Image.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_1024X600_SHATTERED_RAIN_LIGHT_ID));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800827c:	f107 0318 	add.w	r3, r7, #24
 8008280:	2100      	movs	r1, #0
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff fcae 	bl	8007be4 <_ZN8touchgfx6BitmapC1Et>
 8008288:	f107 0318 	add.w	r3, r7, #24
 800828c:	4619      	mov	r1, r3
 800828e:	4620      	mov	r0, r4
 8008290:	f015 f834 	bl	801d2fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    BG_Image.setPosition(0, 0, 480, 272);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800829a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80082a4:	2200      	movs	r2, #0
 80082a6:	2100      	movs	r1, #0
 80082a8:	f7ff fcdc 	bl	8007c64 <_ZN8touchgfx8Drawable11setPositionEssss>
    BG_Image.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	336c      	adds	r3, #108	; 0x6c
 80082b0:	2100      	movs	r1, #0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f014 fb85 	bl	801c9c2 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    add(BG_Image);
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	336c      	adds	r3, #108	; 0x6c
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f7ff fda3 	bl	8007e0c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    toggleButton1.setXY(298, 106);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3398      	adds	r3, #152	; 0x98
 80082ca:	226a      	movs	r2, #106	; 0x6a
 80082cc:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff fce8 	bl	8007ca6 <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_LARGE_ROUND_TEXT_OFF_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_LARGE_ROUND_TEXT_ON_ACTIVE_ID));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80082dc:	f107 031c 	add.w	r3, r7, #28
 80082e0:	2103      	movs	r1, #3
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff fc7e 	bl	8007be4 <_ZN8touchgfx6BitmapC1Et>
 80082e8:	f107 0320 	add.w	r3, r7, #32
 80082ec:	2104      	movs	r1, #4
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff fc78 	bl	8007be4 <_ZN8touchgfx6BitmapC1Et>
 80082f4:	f107 0220 	add.w	r2, r7, #32
 80082f8:	f107 031c 	add.w	r3, r7, #28
 80082fc:	4619      	mov	r1, r3
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff fe97 	bl	8008032 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1.setAction(buttonCallback);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f503 53f6 	add.w	r3, r3, #7872	; 0x1ec0
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f7ff fdf4 	bl	8007f00 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(toggleButton1);
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3398      	adds	r3, #152	; 0x98
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f7ff fd73 	bl	8007e0c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    gauge1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_BACKGROUNDS_DARK_FILLED_ID));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 800832c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008330:	2101      	movs	r1, #1
 8008332:	4618      	mov	r0, r3
 8008334:	f7ff fc56 	bl	8007be4 <_ZN8touchgfx6BitmapC1Et>
 8008338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800833c:	4619      	mov	r1, r3
 800833e:	4620      	mov	r0, r4
 8008340:	f011 fda1 	bl	8019e86 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge1.setPosition(13, 16, 240, 240);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800834a:	23f0      	movs	r3, #240	; 0xf0
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	23f0      	movs	r3, #240	; 0xf0
 8008350:	2210      	movs	r2, #16
 8008352:	210d      	movs	r1, #13
 8008354:	f7ff fc86 	bl	8007c64 <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(120, 120);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	33ec      	adds	r3, #236	; 0xec
 800835c:	2278      	movs	r2, #120	; 0x78
 800835e:	2178      	movs	r1, #120	; 0x78
 8008360:	4618      	mov	r0, r3
 8008362:	f014 fe88 	bl	801d076 <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(-113, 112);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	33ec      	adds	r3, #236	; 0xec
 800836a:	2270      	movs	r2, #112	; 0x70
 800836c:	f06f 0170 	mvn.w	r1, #112	; 0x70
 8008370:	4618      	mov	r0, r3
 8008372:	f014 ff05 	bl	801d180 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 100);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800837c:	2300      	movs	r3, #0
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	2300      	movs	r3, #0
 8008382:	2264      	movs	r2, #100	; 0x64
 8008384:	2100      	movs	r1, #0
 8008386:	f011 fc58 	bl	8019c3a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(0);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	33ec      	adds	r3, #236	; 0xec
 800838e:	2100      	movs	r1, #0
 8008390:	4618      	mov	r0, r3
 8008392:	f014 fe9f 	bl	801d0d4 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setEasingEquation(touchgfx::EasingEquations::linearEaseIn);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	33ec      	adds	r3, #236	; 0xec
 800839a:	493d      	ldr	r1, [pc, #244]	; (8008490 <_ZN17AppScreenViewBaseC1Ev+0x320>)
 800839c:	4618      	mov	r0, r3
 800839e:	f011 fc86 	bl	8019cae <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>
    gauge1.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_NEEDLES_ROUGH_ID, 7, 67);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80083a8:	2343      	movs	r3, #67	; 0x43
 80083aa:	2207      	movs	r2, #7
 80083ac:	2102      	movs	r1, #2
 80083ae:	f014 fe4d 	bl	801d04c <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	33ec      	adds	r3, #236	; 0xec
 80083b6:	2101      	movs	r1, #1
 80083b8:	4618      	mov	r0, r3
 80083ba:	f014 fdcf 	bl	801cf5c <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	33ec      	adds	r3, #236	; 0xec
 80083c2:	2101      	movs	r1, #1
 80083c4:	4618      	mov	r0, r3
 80083c6:	f014 fdcc 	bl	801cf62 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setArcVisible();
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	33ec      	adds	r3, #236	; 0xec
 80083ce:	2101      	movs	r1, #1
 80083d0:	4618      	mov	r0, r3
 80083d2:	f014 fdc9 	bl	801cf68 <_ZN8touchgfx5Gauge13setArcVisibleEb>
    gauge1Painter.setColor(touchgfx::Color::getColorFromRGB(217, 33, 33));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f503 7423 	add.w	r4, r3, #652	; 0x28c
 80083dc:	23d9      	movs	r3, #217	; 0xd9
 80083de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80083e2:	2321      	movs	r3, #33	; 0x21
 80083e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80083e8:	2321      	movs	r3, #33	; 0x21
 80083ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80083ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083f2:	041b      	lsls	r3, r3, #16
 80083f4:	461a      	mov	r2, r3
 80083f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80083fa:	021b      	lsls	r3, r3, #8
 80083fc:	431a      	orrs	r2, r3
 80083fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008402:	4313      	orrs	r3, r2
 8008404:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800840c:	4611      	mov	r1, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f7fb fe6b 	bl	80040ea <_ZN8touchgfx9colortypeC1Em>
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	4619      	mov	r1, r3
 8008418:	4620      	mov	r0, r4
 800841a:	f7ff fe47 	bl	80080ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    gauge1.getArc().setPainter(gauge1Painter);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	33ec      	adds	r3, #236	; 0xec
 8008422:	4618      	mov	r0, r3
 8008424:	f014 fdb6 	bl	801cf94 <_ZN8touchgfx5Gauge6getArcEv>
 8008428:	4603      	mov	r3, r0
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f7ff fe2b 	bl	8008090 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    gauge1.getArc().setRadius(0);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	33ec      	adds	r3, #236	; 0xec
 800843e:	4618      	mov	r0, r3
 8008440:	f014 fda8 	bl	801cf94 <_ZN8touchgfx5Gauge6getArcEv>
 8008444:	4603      	mov	r3, r0
 8008446:	2100      	movs	r1, #0
 8008448:	4618      	mov	r0, r3
 800844a:	f000 f969 	bl	8008720 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    gauge1.getArc().setLineWidth(0);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	33ec      	adds	r3, #236	; 0xec
 8008452:	4618      	mov	r0, r3
 8008454:	f014 fd9e 	bl	801cf94 <_ZN8touchgfx5Gauge6getArcEv>
 8008458:	4603      	mov	r3, r0
 800845a:	2100      	movs	r1, #0
 800845c:	4618      	mov	r0, r3
 800845e:	f000 f99e 	bl	800879e <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    gauge1.putArcOnTop();
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	33ec      	adds	r3, #236	; 0xec
 8008466:	2101      	movs	r1, #1
 8008468:	4618      	mov	r0, r3
 800846a:	f014 fd80 	bl	801cf6e <_ZN8touchgfx5Gauge11putArcOnTopEb>
    add(gauge1);
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	33ec      	adds	r3, #236	; 0xec
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f7ff fcc8 	bl	8007e0c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	373c      	adds	r7, #60	; 0x3c
 8008482:	46bd      	mov	sp, r7
 8008484:	bd90      	pop	{r4, r7, pc}
 8008486:	bf00      	nop
 8008488:	0802ea08 	.word	0x0802ea08
 800848c:	08008533 	.word	0x08008533
 8008490:	08020cdb 	.word	0x08020cdb

08008494 <_ZN17AppScreenViewBaseD1Ev>:

AppScreenViewBase::~AppScreenViewBase()
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	4a16      	ldr	r2, [pc, #88]	; (80084f8 <_ZN17AppScreenViewBaseD1Ev+0x64>)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	601a      	str	r2, [r3, #0]
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 80084a2:	f015 fe1f 	bl	801e0e4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
AppScreenViewBase::~AppScreenViewBase()
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f503 53f6 	add.w	r3, r3, #7872	; 0x1ec0
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 f9d5 	bl	800885c <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fc fed5 	bl	8005268 <_ZN8touchgfx13PainterRGB888D1Ev>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	33ec      	adds	r3, #236	; 0xec
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fb06 	bl	8008ad4 <_ZN8touchgfx5GaugeD1Ev>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3398      	adds	r3, #152	; 0x98
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 f9e7 	bl	80088a0 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEED1Ev>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	336c      	adds	r3, #108	; 0x6c
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fa6a 	bl	80089b0 <_ZN8touchgfx13ScalableImageD1Ev>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3340      	adds	r3, #64	; 0x40
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fa21 	bl	8008928 <_ZN8touchgfx3BoxD1Ev>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff fe1f 	bl	800812c <_ZN8touchgfx4ViewI18AppScreenPresenterED1Ev>
}
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4618      	mov	r0, r3
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	0802ea08 	.word	0x0802ea08

080084fc <_ZN17AppScreenViewBaseD0Ev>:
AppScreenViewBase::~AppScreenViewBase()
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
}
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff ffc5 	bl	8008494 <_ZN17AppScreenViewBaseD1Ev>
 800850a:	f641 61d0 	movw	r1, #7888	; 0x1ed0
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f022 f9bf 	bl	802a892 <_ZdlPvj>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <_ZN17AppScreenViewBase11setupScreenEv>:

void AppScreenViewBase::setupScreen()
{
 800851e:	b480      	push	{r7}
 8008520:	b083      	sub	sp, #12
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]

}
 8008526:	bf00      	nop
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <_ZN17AppScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void AppScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	6039      	str	r1, [r7, #0]
    if (&src == &toggleButton1)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3398      	adds	r3, #152	; 0x98
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d105      	bne.n	8008552 <_ZN17AppScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //Interaction1
        //When toggleButton1 clicked call virtual function
        //Call ButtonCallsThisFunc
        ButtonCallsThisFunc();
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	332c      	adds	r3, #44	; 0x2c
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	4798      	blx	r3
    }
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <_ZN8touchgfx4ViewI18AppScreenPresenterEC1Ev>:
{
public:
    View()
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4618      	mov	r0, r3
 8008568:	f018 f9d8 	bl	802091c <_ZN8touchgfx6ScreenC1Ev>
 800856c:	4a05      	ldr	r2, [pc, #20]	; (8008584 <_ZN8touchgfx4ViewI18AppScreenPresenterEC1Ev+0x28>)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	0802ead4 	.word	0x0802ead4

08008588 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	4a05      	ldr	r2, [pc, #20]	; (80085a8 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff fcf3 	bl	8007f84 <_ZN8touchgfx14AbstractButtonD1Ev>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4618      	mov	r0, r3
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	0802fba4 	.word	0x0802fba4

080085ac <_ZN8touchgfx6ButtonD0Ev>:
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff ffe7 	bl	8008588 <_ZN8touchgfx6ButtonD1Ev>
 80085ba:	2134      	movs	r1, #52	; 0x34
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f022 f968 	bl	802a892 <_ZdlPvj>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff fcf6 	bl	8007fc8 <_ZN8touchgfx6ButtonC1Ev>
 80085dc:	4a07      	ldr	r2, [pc, #28]	; (80085fc <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3334      	adds	r3, #52	; 0x34
 80085e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff fafa 	bl	8007be4 <_ZN8touchgfx6BitmapC1Et>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	0802f96c 	.word	0x0802f96c

08008600 <_ZN8touchgfx12ToggleButtonD1Ev>:
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	4a05      	ldr	r2, [pc, #20]	; (8008620 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff ffb9 	bl	8008588 <_ZN8touchgfx6ButtonD1Ev>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	0802f96c 	.word	0x0802f96c

08008624 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff ffe7 	bl	8008600 <_ZN8touchgfx12ToggleButtonD1Ev>
 8008632:	2138      	movs	r1, #56	; 0x38
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f022 f92c 	bl	802a892 <_ZdlPvj>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
          moveAnimationStartY(0),
          moveAnimationEndX(0),
          moveAnimationEndY(0),
          moveAnimationXEquation(),
          moveAnimationYEquation(),
          moveAnimationEndedCallback(0)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4618      	mov	r0, r3
 8008650:	2336      	movs	r3, #54	; 0x36
 8008652:	461a      	mov	r2, r3
 8008654:	2100      	movs	r1, #0
 8008656:	f022 fb87 	bl	802ad68 <memset>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4618      	mov	r0, r3
 800865e:	f7ff ffb5 	bl	80085cc <_ZN8touchgfx12ToggleButtonC1Ev>
 8008662:	4a16      	ldr	r2, [pc, #88]	; (80086bc <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEEC1Ev+0x78>)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	871a      	strh	r2, [r3, #56]	; 0x38
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	879a      	strh	r2, [r3, #60]	; 0x3c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	649a      	str	r2, [r3, #72]	; 0x48
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	651a      	str	r2, [r3, #80]	; 0x50
    {
    }
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	0802ea58 	.word	0x0802ea58

080086c0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	4a04      	ldr	r2, [pc, #16]	; (80086dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	0802eb08 	.word	0x0802eb08

080086e0 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4639      	mov	r1, r7
 80086ec:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff ffe4 	bl	80086c0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80086f8:	4a08      	ldr	r2, [pc, #32]	; (800871c <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	605a      	str	r2, [r3, #4]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3308      	adds	r3, #8
 8008708:	463a      	mov	r2, r7
 800870a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800870e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	0802ea40 	.word	0x0802ea40

08008720 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
     * @see setCircle, setCenter, getRadius
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setRadius(const T r)
 8008720:	b590      	push	{r4, r7, lr}
 8008722:	b08b      	sub	sp, #44	; 0x2c
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	623b      	str	r3, [r7, #32]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	f107 0314 	add.w	r3, r7, #20
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fc8e 	bl	800805a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	461a      	mov	r2, r3
    {
        this->circleRadius = CWRUtil::toQ5(r);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	635a      	str	r2, [r3, #52]	; 0x34
 8008746:	2300      	movs	r3, #0
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	f107 0310 	add.w	r3, r7, #16
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff fc80 	bl	800805a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800875a:	693b      	ldr	r3, [r7, #16]
        this->circleRadius = MAX(CWRUtil::toQ5(0), this->circleRadius);
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	f107 030c 	add.w	r3, r7, #12
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff fc88 	bl	8008078 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8008768:	4604      	mov	r4, r0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3334      	adds	r3, #52	; 0x34
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff fc82 	bl	8008078 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8008774:	4603      	mov	r3, r0
 8008776:	429c      	cmp	r4, r3
 8008778:	dd0d      	ble.n	8008796 <_ZN8touchgfx6Circle9setRadiusIiEEvT_+0x76>
 800877a:	2300      	movs	r3, #0
 800877c:	61fb      	str	r3, [r7, #28]
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	f107 0318 	add.w	r3, r7, #24
 8008786:	4611      	mov	r1, r2
 8008788:	4618      	mov	r0, r3
 800878a:	f7ff fc66 	bl	800805a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	461a      	mov	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8008796:	bf00      	nop
 8008798:	372c      	adds	r7, #44	; 0x2c
 800879a:	46bd      	mov	sp, r7
 800879c:	bd90      	pop	{r4, r7, pc}

0800879e <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 800879e:	b590      	push	{r4, r7, lr}
 80087a0:	b08b      	sub	sp, #44	; 0x2c
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	6039      	str	r1, [r7, #0]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	623b      	str	r3, [r7, #32]
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	4611      	mov	r1, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff fc4f 	bl	800805a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	641a      	str	r2, [r3, #64]	; 0x40
 80087c4:	2300      	movs	r3, #0
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	f107 0310 	add.w	r3, r7, #16
 80087d0:	4611      	mov	r1, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff fc41 	bl	800805a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80087d8:	693b      	ldr	r3, [r7, #16]
        this->circleLineWidth = MAX(CWRUtil::toQ5(0), this->circleLineWidth);
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	f107 030c 	add.w	r3, r7, #12
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff fc49 	bl	8008078 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80087e6:	4604      	mov	r4, r0
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3340      	adds	r3, #64	; 0x40
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fc43 	bl	8008078 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80087f2:	4603      	mov	r3, r0
 80087f4:	429c      	cmp	r4, r3
 80087f6:	dd0d      	ble.n	8008814 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_+0x76>
 80087f8:	2300      	movs	r3, #0
 80087fa:	61fb      	str	r3, [r7, #28]
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	f107 0318 	add.w	r3, r7, #24
 8008804:	4611      	mov	r1, r2
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fc27 	bl	800805a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	461a      	mov	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8008814:	bf00      	nop
 8008816:	372c      	adds	r7, #44	; 0x2c
 8008818:	46bd      	mov	sp, r7
 800881a:	bd90      	pop	{r4, r7, pc}

0800881c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
    }
 8008824:	4a04      	ldr	r2, [pc, #16]	; (8008838 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	0802eb08 	.word	0x0802eb08

0800883c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
    }
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7ff ffe9 	bl	800881c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800884a:	2104      	movs	r1, #4
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f022 f820 	bl	802a892 <_ZdlPvj>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	4a05      	ldr	r2, [pc, #20]	; (800887c <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4618      	mov	r0, r3
 800886e:	f7ff ffd5 	bl	800881c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	0802ea40 	.word	0x0802ea40

08008880 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff ffe7 	bl	800885c <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800888e:	2110      	movs	r1, #16
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f021 fffe 	bl	802a892 <_ZdlPvj>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEED1Ev>:
class MoveAnimator : public T
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	4a05      	ldr	r2, [pc, #20]	; (80088c0 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEED1Ev+0x20>)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7ff fea5 	bl	8008600 <_ZN8touchgfx12ToggleButtonD1Ev>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	0802ea58 	.word	0x0802ea58

080088c4 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEED0Ev>:
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff ffe7 	bl	80088a0 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEED1Ev>
 80088d2:	2154      	movs	r1, #84	; 0x54
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f021 ffdc 	bl	802a892 <_ZdlPvj>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	4a05      	ldr	r2, [pc, #20]	; (8008904 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fb fc27 	bl	8004148 <_ZN8touchgfx8DrawableD1Ev>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4618      	mov	r0, r3
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	0802f420 	.word	0x0802f420

08008908 <_ZN8touchgfx9ContainerD0Ev>:
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff ffe7 	bl	80088e4 <_ZN8touchgfx9ContainerD1Ev>
 8008916:	212c      	movs	r1, #44	; 0x2c
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f021 ffba 	bl	802a892 <_ZdlPvj>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	4a05      	ldr	r2, [pc, #20]	; (8008948 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4618      	mov	r0, r3
 800893a:	f7fb fdad 	bl	8004498 <_ZN8touchgfx6WidgetD1Ev>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4618      	mov	r0, r3
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	0802fa54 	.word	0x0802fa54

0800894c <_ZN8touchgfx3BoxD0Ev>:
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7ff ffe7 	bl	8008928 <_ZN8touchgfx3BoxD1Ev>
 800895a:	212c      	movs	r1, #44	; 0x2c
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f021 ff98 	bl	802a892 <_ZdlPvj>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	4a05      	ldr	r2, [pc, #20]	; (800898c <_ZN8touchgfx5ImageD1Ev+0x20>)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4618      	mov	r0, r3
 800897e:	f7fb fd8b 	bl	8004498 <_ZN8touchgfx6WidgetD1Ev>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	0802fc18 	.word	0x0802fc18

08008990 <_ZN8touchgfx5ImageD0Ev>:
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff ffe7 	bl	800896c <_ZN8touchgfx5ImageD1Ev>
 800899e:	212c      	movs	r1, #44	; 0x2c
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f021 ff76 	bl	802a892 <_ZdlPvj>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <_ZN8touchgfx13ScalableImageD1Ev>:
 * algorithm used. The rendering algorithm can be changed dynamically. Please note that
 * scaling images is done at runtime and may require a lot of calculations.
 *
 * @note Note that this widget does not support 1 bit per pixel color depth.
 */
class ScalableImage : public Image
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	4a05      	ldr	r2, [pc, #20]	; (80089d0 <_ZN8touchgfx13ScalableImageD1Ev+0x20>)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff ffd3 	bl	800896c <_ZN8touchgfx5ImageD1Ev>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	0802f9e0 	.word	0x0802f9e0

080089d4 <_ZN8touchgfx13ScalableImageD0Ev>:
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff ffe7 	bl	80089b0 <_ZN8touchgfx13ScalableImageD1Ev>
 80089e2:	212c      	movs	r1, #44	; 0x2c
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f021 ff54 	bl	802a892 <_ZdlPvj>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	4a0a      	ldr	r2, [pc, #40]	; (8008a28 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3358      	adds	r3, #88	; 0x58
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff ff6c 	bl	80088e4 <_ZN8touchgfx9ContainerD1Ev>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	332c      	adds	r3, #44	; 0x2c
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff ffab 	bl	800896c <_ZN8touchgfx5ImageD1Ev>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff ff63 	bl	80088e4 <_ZN8touchgfx9ContainerD1Ev>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	0802f34c 	.word	0x0802f34c

08008a2c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff ffdd 	bl	80089f4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8008a3a:	21b4      	movs	r1, #180	; 0xb4
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f021 ff28 	bl	802a892 <_ZdlPvj>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	4a05      	ldr	r2, [pc, #20]	; (8008a6c <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff ff85 	bl	800896c <_ZN8touchgfx5ImageD1Ev>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	0802f858 	.word	0x0802f858

08008a70 <_ZN8touchgfx13TextureMapperD0Ev>:
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7ff ffe7 	bl	8008a4c <_ZN8touchgfx13TextureMapperD1Ev>
 8008a7e:	2190      	movs	r1, #144	; 0x90
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f021 ff06 	bl	802a892 <_ZdlPvj>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	4a05      	ldr	r2, [pc, #20]	; (8008ab0 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fb ff63 	bl	800496c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	0802f6c0 	.word	0x0802f6c0

08008ab4 <_ZN8touchgfx6CircleD0Ev>:
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff ffe7 	bl	8008a90 <_ZN8touchgfx6CircleD1Ev>
 8008ac2:	2148      	movs	r1, #72	; 0x48
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f021 fee4 	bl	802a892 <_ZdlPvj>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	4a0b      	ldr	r2, [pc, #44]	; (8008b0c <_ZN8touchgfx5GaugeD1Ev+0x38>)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff ffd1 	bl	8008a90 <_ZN8touchgfx6CircleD1Ev>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	33b4      	adds	r3, #180	; 0xb4
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff ffaa 	bl	8008a4c <_ZN8touchgfx13TextureMapperD1Ev>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff ff7a 	bl	80089f4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	0802fabc 	.word	0x0802fabc

08008b10 <_ZN8touchgfx5GaugeD0Ev>:
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff ffdb 	bl	8008ad4 <_ZN8touchgfx5GaugeD1Ev>
 8008b1e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f021 feb5 	bl	802a892 <_ZdlPvj>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	68d2      	ldr	r2, [r2, #12]
 8008b44:	1052      	asrs	r2, r2, #1
 8008b46:	1898      	adds	r0, r3, r2
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d102      	bne.n	8008b5a <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	e00a      	b.n	8008b70 <_ZN8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	68d2      	ldr	r2, [r2, #12]
 8008b62:	1052      	asrs	r2, r2, #1
 8008b64:	4413      	add	r3, r2
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	6892      	ldr	r2, [r2, #8]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	4798      	blx	r3
    }
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d010      	beq.n	8008bae <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d107      	bne.n	8008ba4 <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d001      	beq.n	8008bae <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e000      	b.n	8008bb0 <_ZNK8touchgfx8CallbackI17AppScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8008bae:	2300      	movs	r3, #0
    }
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE15handleTickEventEv>:
            moveAnimationRunning = false;
        }
    }

    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fb fb7d 	bl	80042c6 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f81f 	bl	8008c10 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE21nextMoveAnimationStepEv>
    }
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 8008bda:	b480      	push	{r7}
 8008bdc:	b083      	sub	sp, #12
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	887a      	ldrh	r2, [r7, #2]
 8008bea:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <_ZNK8touchgfx12MoveAnimatorINS_12ToggleButtonEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
    }
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE21nextMoveAnimationStepEv>:

protected:
    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 8008c10:	b590      	push	{r4, r7, lr}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 808a 	beq.w	8008d38 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE21nextMoveAnimationStepEv+0x128>
        {
            moveAnimationCounter++;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008c28:	3301      	adds	r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	871a      	strh	r2, [r3, #56]	; 0x38
            if (moveAnimationCounter >= moveAnimationDelay)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d37d      	bcc.n	8008d38 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE21nextMoveAnimationStepEv+0x128>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008c40:	461a      	mov	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	60fb      	str	r3, [r7, #12]

                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	b298      	uxth	r0, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	b21a      	sxth	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	47a0      	blx	r4
 8008c70:	4603      	mov	r3, r0
 8008c72:	817b      	strh	r3, [r7, #10]
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	b298      	uxth	r0, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	b21a      	sxth	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008c96:	2100      	movs	r1, #0
 8008c98:	47a0      	blx	r4
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	813b      	strh	r3, [r7, #8]

                T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	897b      	ldrh	r3, [r7, #10]
 8008caa:	4413      	add	r3, r2
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	b219      	sxth	r1, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	893b      	ldrh	r3, [r7, #8]
 8008cba:	4413      	add	r3, r2
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	b21b      	sxth	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	f7fb fb24 	bl	800430e <_ZN8touchgfx8Drawable6moveToEss>

                if (moveAnimationCounter >= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008cca:	461a      	mov	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008cd6:	440b      	add	r3, r1
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d32d      	bcc.n	8008d38 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE21nextMoveAnimationStepEv+0x128>
                {
                    // End of animation
                    moveAnimationRunning = false;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                    moveAnimationCounter = 0;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	871a      	strh	r2, [r3, #56]	; 0x38
                    Application::getInstance()->unregisterTimerWidget(this);
 8008cea:	f016 fa3f 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	f7ff f822 	bl	8007d3e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>

                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00d      	beq.n	8008d1e <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE21nextMoveAnimationStepEv+0x10e>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	330c      	adds	r3, #12
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4610      	mov	r0, r2
 8008d12:	4798      	blx	r3
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE21nextMoveAnimationStepEv+0x10e>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE21nextMoveAnimationStepEv+0x110>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d009      	beq.n	8008d38 <_ZN8touchgfx12MoveAnimatorINS_12ToggleButtonEE21nextMoveAnimationStepEv+0x128>
                    {
                        moveAnimationEndedCallback->execute(*this);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	4610      	mov	r0, r2
 8008d36:	4798      	blx	r3
                    }
                }
            }
        }
    }
 8008d38:	bf00      	nop
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd90      	pop	{r4, r7, pc}

08008d40 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8008d4c:	887b      	ldrh	r3, [r7, #2]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d010      	beq.n	8008d74 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	dc13      	bgt.n	8008d7e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d005      	beq.n	8008d6a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8008d5e:	e00e      	b.n	8008d7e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8008d60:	f000 ff98 	bl	8009c94 <_ZN17TypedTextDatabase8getFontsEv>
 8008d64:	4603      	mov	r3, r0
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	e00a      	b.n	8008d80 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8008d6a:	f000 ff93 	bl	8009c94 <_ZN17TypedTextDatabase8getFontsEv>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	e005      	b.n	8008d80 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8008d74:	f000 ff8e 	bl	8009c94 <_ZN17TypedTextDatabase8getFontsEv>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	e000      	b.n	8008d80 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8008d7e:	2300      	movs	r3, #0
    }
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8008d88:	b480      	push	{r7}
 8008d8a:	af00      	add	r7, sp, #0
    return bitmap_database;
 8008d8c:	4b02      	ldr	r3, [pc, #8]	; (8008d98 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	0802eb2c 	.word	0x0802eb2c

08008d9c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8008da0:	2305      	movs	r3, #5
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
    {
 8008db4:	4a04      	ldr	r2, [pc, #16]	; (8008dc8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	601a      	str	r2, [r3, #0]
    }
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	0802ec40 	.word	0x0802ec40

08008dcc <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
    }
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff ffe9 	bl	8008dac <_ZN8touchgfx4FontD1Ev>
 8008dda:	2114      	movs	r1, #20
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f021 fd58 	bl	802a892 <_ZdlPvj>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8008df8:	887b      	ldrh	r3, [r7, #2]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e010      	b.n	8008e24 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	681c      	ldr	r4, [r3, #0]
 8008e12:	f107 030f 	add.w	r3, r7, #15
 8008e16:	f107 0210 	add.w	r2, r7, #16
 8008e1a:	8879      	ldrh	r1, [r7, #2]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	47a0      	blx	r4
 8008e20:	6178      	str	r0, [r7, #20]
        return glyph;
 8008e22:	697b      	ldr	r3, [r7, #20]
    }
 8008e24:	4618      	mov	r0, r3
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd90      	pop	{r4, r7, pc}

08008e2c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	89db      	ldrh	r3, [r3, #14]
    }
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	8a1b      	ldrh	r3, [r3, #16]
    }
 8008e50:	4618      	mov	r0, r3
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	88db      	ldrh	r3, [r3, #6]
    }
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	889b      	ldrh	r3, [r3, #4]
    }
 8008e80:	4618      	mov	r0, r3
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7a9b      	ldrb	r3, [r3, #10]
 8008e98:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008e9c:	b2db      	uxtb	r3, r3
    }
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7a9b      	ldrb	r3, [r3, #10]
 8008eb6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008eba:	b2db      	uxtb	r3, r3
    }
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	4a05      	ldr	r2, [pc, #20]	; (8008ee8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff ff67 	bl	8008dac <_ZN8touchgfx4FontD1Ev>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	0802fda0 	.word	0x0802fda0

08008eec <_ZN8touchgfx9ConstFontD0Ev>:
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff ffe7 	bl	8008ec8 <_ZN8touchgfx9ConstFontD1Ev>
 8008efa:	211c      	movs	r1, #28
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f021 fcc8 	bl	802a892 <_ZdlPvj>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	4a05      	ldr	r2, [pc, #20]	; (8008f2c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7ff ffd3 	bl	8008ec8 <_ZN8touchgfx9ConstFontD1Ev>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	0802ebe0 	.word	0x0802ebe0

08008f30 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff ffe7 	bl	8008f0c <_ZN8touchgfx13GeneratedFontD1Ev>
 8008f3e:	212c      	movs	r1, #44	; 0x2c
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f021 fca6 	bl	802a892 <_ZdlPvj>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
    void clearAllTimerWidgets()
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
        timerWidgets.clear();
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3304      	adds	r3, #4
 8008f74:	4618      	mov	r0, r3
 8008f76:	f016 f937 	bl	801f1e8 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
	...

08008f84 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8008f8c:	4a07      	ldr	r2, [pc, #28]	; (8008fac <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	605a      	str	r2, [r3, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	721a      	strb	r2, [r3, #8]
    {
    }
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	0802ebbc 	.word	0x0802ebbc

08008fb0 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
    {
 8008fb8:	4a04      	ldr	r2, [pc, #16]	; (8008fcc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	601a      	str	r2, [r3, #0]
    }
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	0802ebbc 	.word	0x0802ebbc

08008fd0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
    }
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff ffe9 	bl	8008fb0 <_ZN8touchgfx10TransitionD1Ev>
 8008fde:	210c      	movs	r1, #12
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f021 fc56 	bl	802a892 <_ZdlPvj>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
    {
    }
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
    {
    }
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
    {
    }
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8009034:	f016 f89a 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 8009038:	4603      	mov	r3, r0
 800903a:	4618      	mov	r0, r3
 800903c:	f016 fd2a 	bl	801fa94 <_ZN8touchgfx11Application10invalidateEv>
    }
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	605a      	str	r2, [r3, #4]
    }
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4618      	mov	r0, r3
 8009070:	f016 f98c 	bl	801f38c <_ZN8touchgfx11ApplicationC1Ev>
 8009074:	4a09      	ldr	r2, [pc, #36]	; (800909c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a04      	ldr	r2, [pc, #16]	; (80090a0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800908e:	6013      	str	r3, [r2, #0]
    }
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	0802e3dc 	.word	0x0802e3dc
 80090a0:	24027fc0 	.word	0x24027fc0

080090a4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	601a      	str	r2, [r3, #0]
    }
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	721a      	strb	r2, [r3, #8]
    }
 80090ce:	bf00      	nop
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	605a      	str	r2, [r3, #4]
    }
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/appscreen_screen/AppScreenView.hpp>
#include <gui/appscreen_screen/AppScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff ffac 	bl	8009064 <_ZN8touchgfx14MVPApplicationC1Ev>
 800910c:	4a12      	ldr	r2, [pc, #72]	; (8009158 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009118:	4618      	mov	r0, r3
 800911a:	f000 f89d 	bl	8009258 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800912e:	f7f7 fe39 	bl	8000da4 <_ZN8touchgfx3HAL11getInstanceEv>
 8009132:	4603      	mov	r3, r0
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	3208      	adds	r2, #8
 8009138:	6812      	ldr	r2, [r2, #0]
 800913a:	2100      	movs	r1, #0
 800913c:	4618      	mov	r0, r3
 800913e:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8009140:	f7fb f940 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 8009144:	4603      	mov	r3, r0
 8009146:	4618      	mov	r0, r3
 8009148:	f01c fa5d 	bl	8025606 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	0802e378 	.word	0x0802e378

0800915c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4618      	mov	r0, r3
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	4611      	mov	r1, r2
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff ffe9 	bl	800915c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	605a      	str	r2, [r3, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	3308      	adds	r3, #8
 8009198:	3208      	adds	r2, #8
 800919a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800919e:	e883 0003 	stmia.w	r3, {r0, r1}
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <_ZN23FrontendApplicationBase31gotoAppScreenScreenNoTransitionEv>:
 */

// AppScreen

void FrontendApplicationBase::gotoAppScreenScreenNoTransition()
{
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b089      	sub	sp, #36	; 0x24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoAppScreenScreenNoTransitionImpl);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 80091ba:	4b10      	ldr	r3, [pc, #64]	; (80091fc <_ZN23FrontendApplicationBase31gotoAppScreenScreenNoTransitionEv+0x50>)
 80091bc:	61bb      	str	r3, [r7, #24]
 80091be:	2300      	movs	r3, #0
 80091c0:	61fb      	str	r3, [r7, #28]
 80091c2:	f107 0008 	add.w	r0, r7, #8
 80091c6:	f107 0318 	add.w	r3, r7, #24
 80091ca:	cb0c      	ldmia	r3, {r2, r3}
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	f000 f85f 	bl	8009290 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80091d2:	f107 0308 	add.w	r3, r7, #8
 80091d6:	4619      	mov	r1, r3
 80091d8:	4620      	mov	r0, r4
 80091da:	f7ff ffcb 	bl	8009174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80091de:	f107 0308 	add.w	r3, r7, #8
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fa fe56 	bl	8003e94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80091f4:	bf00      	nop
 80091f6:	3724      	adds	r7, #36	; 0x24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd90      	pop	{r4, r7, pc}
 80091fc:	08009201 	.word	0x08009201

08009200 <_ZN23FrontendApplicationBase35gotoAppScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoAppScreenScreenNoTransitionImpl()
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af02      	add	r7, sp, #8
 8009206:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<AppScreenView, AppScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009214:	461a      	mov	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	4b04      	ldr	r3, [pc, #16]	; (8009230 <_ZN23FrontendApplicationBase35gotoAppScreenScreenNoTransitionImplEv+0x30>)
 8009220:	4804      	ldr	r0, [pc, #16]	; (8009234 <_ZN23FrontendApplicationBase35gotoAppScreenScreenNoTransitionImplEv+0x34>)
 8009222:	f000 f867 	bl	80092f4 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	24027fb4 	.word	0x24027fb4
 8009234:	24027fb0 	.word	0x24027fb0

08009238 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	4a04      	ldr	r2, [pc, #16]	; (8009254 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	0802e428 	.word	0x0802e428

08009258 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff ffe8 	bl	8009238 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8009268:	4a08      	ldr	r2, [pc, #32]	; (800928c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	605a      	str	r2, [r3, #4]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	609a      	str	r2, [r3, #8]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	60da      	str	r2, [r3, #12]
    }
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	0802e3c4 	.word	0x0802e3c4

08009290 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	4639      	mov	r1, r7
 800929c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff ffc8 	bl	8009238 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80092a8:	4a08      	ldr	r2, [pc, #32]	; (80092cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	605a      	str	r2, [r3, #4]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	3308      	adds	r3, #8
 80092b8:	463a      	mov	r2, r7
 80092ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80092be:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	0802e3c4 	.word	0x0802e3c4

080092d0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff fe52 	bl	8008f84 <_ZN8touchgfx10TransitionC1Ev>
 80092e0:	4a03      	ldr	r2, [pc, #12]	; (80092f0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	0802eb98 	.word	0x0802eb98

080092f4 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80092f4:	b590      	push	{r4, r7, lr}
 80092f6:	b08f      	sub	sp, #60	; 0x3c
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689a      	ldr	r2, [r3, #8]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3320      	adds	r3, #32
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4610      	mov	r0, r2
 8009312:	4798      	blx	r3
 8009314:	4603      	mov	r3, r0
 8009316:	f641 62cf 	movw	r2, #7887	; 0x1ecf
 800931a:	4293      	cmp	r3, r2
 800931c:	d805      	bhi.n	800932a <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800931e:	4b7f      	ldr	r3, [pc, #508]	; (800951c <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8009320:	4a7f      	ldr	r2, [pc, #508]	; (8009520 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8009322:	21a3      	movs	r1, #163	; 0xa3
 8009324:	487f      	ldr	r0, [pc, #508]	; (8009524 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8009326:	f021 fc8f 	bl	802ac48 <__assert_func>
 800932a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3320      	adds	r3, #32
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4610      	mov	r0, r2
 800933c:	4798      	blx	r3
 800933e:	4603      	mov	r3, r0
 8009340:	2b0f      	cmp	r3, #15
 8009342:	d805      	bhi.n	8009350 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8009344:	4b78      	ldr	r3, [pc, #480]	; (8009528 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8009346:	4a76      	ldr	r2, [pc, #472]	; (8009520 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8009348:	21a4      	movs	r1, #164	; 0xa4
 800934a:	4876      	ldr	r0, [pc, #472]	; (8009524 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800934c:	f021 fc7c 	bl	802ac48 <__assert_func>
 8009350:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3320      	adds	r3, #32
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4610      	mov	r0, r2
 8009362:	4798      	blx	r3
 8009364:	4603      	mov	r3, r0
 8009366:	2b0b      	cmp	r3, #11
 8009368:	d805      	bhi.n	8009376 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800936a:	4b70      	ldr	r3, [pc, #448]	; (800952c <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800936c:	4a6c      	ldr	r2, [pc, #432]	; (8009520 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800936e:	21a5      	movs	r1, #165	; 0xa5
 8009370:	486c      	ldr	r0, [pc, #432]	; (8009524 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8009372:	f021 fc69 	bl	802ac48 <__assert_func>
 8009376:	bf00      	nop
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	62bb      	str	r3, [r7, #40]	; 0x28
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	627b      	str	r3, [r7, #36]	; 0x24
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8009384:	f015 fef2 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 8009388:	4603      	mov	r3, r0
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff fdec 	bl	8008f68 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d008      	beq.n	80093aa <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	330c      	adds	r3, #12
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4610      	mov	r0, r2
 80093a8:	4798      	blx	r3
    if (*currentTrans)
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4610      	mov	r0, r2
 80093c0:	4798      	blx	r3
    if (*currentScreen)
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d008      	beq.n	80093dc <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 80093ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3314      	adds	r3, #20
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4610      	mov	r0, r2
 80093da:	4798      	blx	r3
    if (*currentPresenter)
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d008      	beq.n	80093f6 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3304      	adds	r3, #4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4610      	mov	r0, r2
 80093f4:	4798      	blx	r3
    if (*currentScreen)
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d007      	beq.n	800940e <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4610      	mov	r0, r2
 800940c:	4798      	blx	r3
    if (*currentPresenter)
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d008      	beq.n	8009428 <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3308      	adds	r3, #8
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4610      	mov	r0, r2
 8009426:	4798      	blx	r3
}
 8009428:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	2100      	movs	r1, #0
 8009430:	4618      	mov	r0, r3
 8009432:	f000 f87d 	bl	8009530 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8009436:	4603      	mov	r3, r0
 8009438:	4619      	mov	r1, r3
 800943a:	200c      	movs	r0, #12
 800943c:	f7ff fd88 	bl	8008f50 <_ZnwjPv>
 8009440:	4604      	mov	r4, r0
 8009442:	4620      	mov	r0, r4
 8009444:	f7ff ff44 	bl	80092d0 <_ZN8touchgfx12NoTransitionC1Ev>
 8009448:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	2100      	movs	r1, #0
 8009450:	4618      	mov	r0, r3
 8009452:	f000 f880 	bl	8009556 <_ZN8touchgfx17AbstractPartition2atI13AppScreenViewEERT_t>
 8009456:	4603      	mov	r3, r0
 8009458:	4619      	mov	r1, r3
 800945a:	f641 60d0 	movw	r0, #7888	; 0x1ed0
 800945e:	f7ff fd77 	bl	8008f50 <_ZnwjPv>
 8009462:	4604      	mov	r4, r0
 8009464:	4620      	mov	r0, r4
 8009466:	f000 fd83 	bl	8009f70 <_ZN13AppScreenViewC1Ev>
 800946a:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	2100      	movs	r1, #0
 8009472:	4618      	mov	r0, r3
 8009474:	f000 f882 	bl	800957c <_ZN8touchgfx17AbstractPartition2atI18AppScreenPresenterEERT_t>
 8009478:	4603      	mov	r3, r0
 800947a:	4619      	mov	r1, r3
 800947c:	2010      	movs	r0, #16
 800947e:	f7ff fd67 	bl	8008f50 <_ZnwjPv>
 8009482:	4604      	mov	r4, r0
 8009484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009486:	4620      	mov	r0, r4
 8009488:	f000 fce4 	bl	8009e54 <_ZN18AppScreenPresenterC1ER13AppScreenView>
 800948c:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009492:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009498:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800949e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a8:	3304      	adds	r3, #4
 80094aa:	e000      	b.n	80094ae <_ZN8touchgfx14makeTransitionI13AppScreenView18AppScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 80094ac:	2300      	movs	r3, #0
 80094ae:	4619      	mov	r1, r3
 80094b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80094b2:	f7ff fdf7 	bl	80090a4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80094b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b8:	3304      	adds	r3, #4
 80094ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80094bc:	4618      	mov	r0, r3
 80094be:	f7ff fe0c 	bl	80090da <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 f86b 	bl	80095a2 <_ZN8touchgfx4ViewI18AppScreenPresenterE4bindERS1_>
 80094cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ce:	61fb      	str	r3, [r7, #28]
 80094d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d2:	61bb      	str	r3, [r7, #24]
 80094d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	330c      	adds	r3, #12
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	69f8      	ldr	r0, [r7, #28]
 80094e2:	4798      	blx	r3
    newPresenter->activate();
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69b8      	ldr	r0, [r7, #24]
 80094ec:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80094ee:	6979      	ldr	r1, [r7, #20]
 80094f0:	69f8      	ldr	r0, [r7, #28]
 80094f2:	f017 fbbf 	bl	8020c74 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3310      	adds	r3, #16
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6978      	ldr	r0, [r7, #20]
 8009500:	4798      	blx	r3
    newTransition->invalidate();
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3314      	adds	r3, #20
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6978      	ldr	r0, [r7, #20]
 800950c:	4798      	blx	r3
}
 800950e:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009512:	4618      	mov	r0, r3
 8009514:	373c      	adds	r7, #60	; 0x3c
 8009516:	46bd      	mov	sp, r7
 8009518:	bd90      	pop	{r4, r7, pc}
 800951a:	bf00      	nop
 800951c:	0802d934 	.word	0x0802d934
 8009520:	0802d9c4 	.word	0x0802d9c4
 8009524:	0802dacc 	.word	0x0802dacc
 8009528:	0802db14 	.word	0x0802db14
 800952c:	0802dbb8 	.word	0x0802dbb8

08009530 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3324      	adds	r3, #36	; 0x24
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	887a      	ldrh	r2, [r7, #2]
 8009546:	4611      	mov	r1, r2
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
 800954c:	4603      	mov	r3, r0
    }
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <_ZN8touchgfx17AbstractPartition2atI13AppScreenViewEERT_t>:
    T& at(const uint16_t index)
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3324      	adds	r3, #36	; 0x24
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	887a      	ldrh	r2, [r7, #2]
 800956c:	4611      	mov	r1, r2
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	4798      	blx	r3
 8009572:	4603      	mov	r3, r0
    }
 8009574:	4618      	mov	r0, r3
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <_ZN8touchgfx17AbstractPartition2atI18AppScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3324      	adds	r3, #36	; 0x24
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	887a      	ldrh	r2, [r7, #2]
 8009592:	4611      	mov	r1, r2
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	4798      	blx	r3
 8009598:	4603      	mov	r3, r0
    }
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <_ZN8touchgfx4ViewI18AppScreenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 80095a2:	b480      	push	{r7}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80095b2:	bf00      	nop
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
	...

080095c0 <_ZN8touchgfx12NoTransitionD1Ev>:
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	4a05      	ldr	r2, [pc, #20]	; (80095e0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff fced 	bl	8008fb0 <_ZN8touchgfx10TransitionD1Ev>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	0802eb98 	.word	0x0802eb98

080095e4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff ffe7 	bl	80095c0 <_ZN8touchgfx12NoTransitionD1Ev>
 80095f2:	210c      	movs	r1, #12
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f021 f94c 	bl	802a892 <_ZdlPvj>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4618      	mov	r0, r3
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8009634:	b580      	push	{r7, lr}
 8009636:	b08e      	sub	sp, #56	; 0x38
 8009638:	af0a      	add	r7, sp, #40	; 0x28
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	4611      	mov	r1, r2
 8009640:	461a      	mov	r2, r3
 8009642:	460b      	mov	r3, r1
 8009644:	80fb      	strh	r3, [r7, #6]
 8009646:	4613      	mov	r3, r2
 8009648:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	88b9      	ldrh	r1, [r7, #4]
 800964e:	88fa      	ldrh	r2, [r7, #6]
 8009650:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009654:	9308      	str	r3, [sp, #32]
 8009656:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009658:	9307      	str	r3, [sp, #28]
 800965a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800965e:	9306      	str	r3, [sp, #24]
 8009660:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009664:	9305      	str	r3, [sp, #20]
 8009666:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009670:	9303      	str	r3, [sp, #12]
 8009672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009676:	9302      	str	r3, [sp, #8]
 8009678:	7f3b      	ldrb	r3, [r7, #28]
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	8b3b      	ldrh	r3, [r7, #24]
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	460b      	mov	r3, r1
 8009682:	68b9      	ldr	r1, [r7, #8]
 8009684:	f016 feae 	bl	80203e4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8009688:	4a09      	ldr	r2, [pc, #36]	; (80096b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009692:	61da      	str	r2, [r3, #28]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009698:	621a      	str	r2, [r3, #32]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800969e:	625a      	str	r2, [r3, #36]	; 0x24
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096a4:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	0802ebe0 	.word	0x0802ebe0

080096b4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	889b      	ldrh	r3, [r3, #4]
 80096c8:	0adb      	lsrs	r3, r3, #11
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	4413      	add	r3, r2
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4413      	add	r3, r2
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80096e6:	b480      	push	{r7}
 80096e8:	b089      	sub	sp, #36	; 0x24
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	460b      	mov	r3, r1
 80096f0:	607a      	str	r2, [r7, #4]
 80096f2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	7b1b      	ldrb	r3, [r3, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8009702:	2300      	movs	r3, #0
 8009704:	e030      	b.n	8009768 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6a1a      	ldr	r2, [r3, #32]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	7b5b      	ldrb	r3, [r3, #13]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	b21b      	sxth	r3, r3
 8009716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800971a:	b219      	sxth	r1, r3
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	7adb      	ldrb	r3, [r3, #11]
 8009720:	b21b      	sxth	r3, r3
 8009722:	430b      	orrs	r3, r1
 8009724:	b21b      	sxth	r3, r3
 8009726:	b29b      	uxth	r3, r3
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	7b1b      	ldrb	r3, [r3, #12]
 8009732:	837b      	strh	r3, [r7, #26]
 8009734:	8b7b      	ldrh	r3, [r7, #26]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d015      	beq.n	8009766 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	897a      	ldrh	r2, [r7, #10]
 8009740:	429a      	cmp	r2, r3
 8009742:	d103      	bne.n	800974c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800974a:	e00d      	b.n	8009768 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	897a      	ldrh	r2, [r7, #10]
 8009752:	429a      	cmp	r2, r3
 8009754:	d306      	bcc.n	8009764 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8009756:	8b7b      	ldrh	r3, [r7, #26]
 8009758:	3b01      	subs	r3, #1
 800975a:	837b      	strh	r3, [r7, #26]
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	3304      	adds	r3, #4
 8009760:	61fb      	str	r3, [r7, #28]
 8009762:	e7e7      	b.n	8009734 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8009764:	bf00      	nop
        }
    }
    return 0;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3724      	adds	r7, #36	; 0x24
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009774:	b580      	push	{r7, lr}
 8009776:	af00      	add	r7, sp, #0
 8009778:	4801      	ldr	r0, [pc, #4]	; (8009780 <__tcf_0+0xc>)
 800977a:	f7ff fbc7 	bl	8008f0c <_ZN8touchgfx13GeneratedFontD1Ev>
 800977e:	bd80      	pop	{r7, pc}
 8009780:	2400cf68 	.word	0x2400cf68

08009784 <_Z23getFont_verdana_10_4bppv>:
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08e      	sub	sp, #56	; 0x38
 8009788:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800978a:	4b21      	ldr	r3, [pc, #132]	; (8009810 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	f3bf 8f5b 	dmb	ish
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	bf0c      	ite	eq
 800979c:	2301      	moveq	r3, #1
 800979e:	2300      	movne	r3, #0
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d030      	beq.n	8009808 <_Z23getFont_verdana_10_4bppv+0x84>
 80097a6:	481a      	ldr	r0, [pc, #104]	; (8009810 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80097a8:	f021 f875 	bl	802a896 <__cxa_guard_acquire>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bf14      	ite	ne
 80097b2:	2301      	movne	r3, #1
 80097b4:	2300      	moveq	r3, #0
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d025      	beq.n	8009808 <_Z23getFont_verdana_10_4bppv+0x84>
 80097bc:	2300      	movs	r3, #0
 80097be:	930c      	str	r3, [sp, #48]	; 0x30
 80097c0:	2300      	movs	r3, #0
 80097c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80097c4:	2300      	movs	r3, #0
 80097c6:	930a      	str	r3, [sp, #40]	; 0x28
 80097c8:	233f      	movs	r3, #63	; 0x3f
 80097ca:	9309      	str	r3, [sp, #36]	; 0x24
 80097cc:	4b11      	ldr	r3, [pc, #68]	; (8009814 <_Z23getFont_verdana_10_4bppv+0x90>)
 80097ce:	9308      	str	r3, [sp, #32]
 80097d0:	4b11      	ldr	r3, [pc, #68]	; (8009818 <_Z23getFont_verdana_10_4bppv+0x94>)
 80097d2:	9307      	str	r3, [sp, #28]
 80097d4:	2300      	movs	r3, #0
 80097d6:	9306      	str	r3, [sp, #24]
 80097d8:	2300      	movs	r3, #0
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	2301      	movs	r3, #1
 80097de:	9304      	str	r3, [sp, #16]
 80097e0:	2304      	movs	r3, #4
 80097e2:	9303      	str	r3, [sp, #12]
 80097e4:	2300      	movs	r3, #0
 80097e6:	9302      	str	r3, [sp, #8]
 80097e8:	2300      	movs	r3, #0
 80097ea:	9301      	str	r3, [sp, #4]
 80097ec:	230a      	movs	r3, #10
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	230a      	movs	r3, #10
 80097f2:	2201      	movs	r2, #1
 80097f4:	4909      	ldr	r1, [pc, #36]	; (800981c <_Z23getFont_verdana_10_4bppv+0x98>)
 80097f6:	480a      	ldr	r0, [pc, #40]	; (8009820 <_Z23getFont_verdana_10_4bppv+0x9c>)
 80097f8:	f7ff ff1c 	bl	8009634 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80097fc:	4809      	ldr	r0, [pc, #36]	; (8009824 <_Z23getFont_verdana_10_4bppv+0xa0>)
 80097fe:	f021 fa41 	bl	802ac84 <atexit>
 8009802:	4803      	ldr	r0, [pc, #12]	; (8009810 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8009804:	f021 f853 	bl	802a8ae <__cxa_guard_release>
    return verdana_10_4bpp;
 8009808:	4b05      	ldr	r3, [pc, #20]	; (8009820 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800980a:	4618      	mov	r0, r3
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	2400cf94 	.word	0x2400cf94
 8009814:	08030280 	.word	0x08030280
 8009818:	0803028c 	.word	0x0803028c
 800981c:	90000178 	.word	0x90000178
 8009820:	2400cf68 	.word	0x2400cf68
 8009824:	08009775 	.word	0x08009775

08009828 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__tcf_0+0xc>)
 800982e:	f7ff fb6d 	bl	8008f0c <_ZN8touchgfx13GeneratedFontD1Ev>
 8009832:	bd80      	pop	{r7, pc}
 8009834:	2400cf98 	.word	0x2400cf98

08009838 <_Z23getFont_verdana_20_4bppv>:
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08e      	sub	sp, #56	; 0x38
 800983c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800983e:	4b21      	ldr	r3, [pc, #132]	; (80098c4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	f3bf 8f5b 	dmb	ish
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	bf0c      	ite	eq
 8009850:	2301      	moveq	r3, #1
 8009852:	2300      	movne	r3, #0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d030      	beq.n	80098bc <_Z23getFont_verdana_20_4bppv+0x84>
 800985a:	481a      	ldr	r0, [pc, #104]	; (80098c4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800985c:	f021 f81b 	bl	802a896 <__cxa_guard_acquire>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	bf14      	ite	ne
 8009866:	2301      	movne	r3, #1
 8009868:	2300      	moveq	r3, #0
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d025      	beq.n	80098bc <_Z23getFont_verdana_20_4bppv+0x84>
 8009870:	2300      	movs	r3, #0
 8009872:	930c      	str	r3, [sp, #48]	; 0x30
 8009874:	2300      	movs	r3, #0
 8009876:	930b      	str	r3, [sp, #44]	; 0x2c
 8009878:	2300      	movs	r3, #0
 800987a:	930a      	str	r3, [sp, #40]	; 0x28
 800987c:	233f      	movs	r3, #63	; 0x3f
 800987e:	9309      	str	r3, [sp, #36]	; 0x24
 8009880:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <_Z23getFont_verdana_20_4bppv+0x90>)
 8009882:	9308      	str	r3, [sp, #32]
 8009884:	4b11      	ldr	r3, [pc, #68]	; (80098cc <_Z23getFont_verdana_20_4bppv+0x94>)
 8009886:	9307      	str	r3, [sp, #28]
 8009888:	2300      	movs	r3, #0
 800988a:	9306      	str	r3, [sp, #24]
 800988c:	2300      	movs	r3, #0
 800988e:	9305      	str	r3, [sp, #20]
 8009890:	2301      	movs	r3, #1
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	2304      	movs	r3, #4
 8009896:	9303      	str	r3, [sp, #12]
 8009898:	2300      	movs	r3, #0
 800989a:	9302      	str	r3, [sp, #8]
 800989c:	2300      	movs	r3, #0
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	2314      	movs	r3, #20
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	2314      	movs	r3, #20
 80098a6:	2201      	movs	r2, #1
 80098a8:	4909      	ldr	r1, [pc, #36]	; (80098d0 <_Z23getFont_verdana_20_4bppv+0x98>)
 80098aa:	480a      	ldr	r0, [pc, #40]	; (80098d4 <_Z23getFont_verdana_20_4bppv+0x9c>)
 80098ac:	f7ff fec2 	bl	8009634 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80098b0:	4809      	ldr	r0, [pc, #36]	; (80098d8 <_Z23getFont_verdana_20_4bppv+0xa0>)
 80098b2:	f021 f9e7 	bl	802ac84 <atexit>
 80098b6:	4803      	ldr	r0, [pc, #12]	; (80098c4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80098b8:	f020 fff9 	bl	802a8ae <__cxa_guard_release>
    return verdana_20_4bpp;
 80098bc:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 80098be:	4618      	mov	r0, r3
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	2400cfc4 	.word	0x2400cfc4
 80098c8:	08030284 	.word	0x08030284
 80098cc:	08030290 	.word	0x08030290
 80098d0:	90000188 	.word	0x90000188
 80098d4:	2400cf98 	.word	0x2400cf98
 80098d8:	08009829 	.word	0x08009829

080098dc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
 80098e0:	4801      	ldr	r0, [pc, #4]	; (80098e8 <__tcf_0+0xc>)
 80098e2:	f7ff fb13 	bl	8008f0c <_ZN8touchgfx13GeneratedFontD1Ev>
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	2400cfc8 	.word	0x2400cfc8

080098ec <_Z23getFont_verdana_40_4bppv>:
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08e      	sub	sp, #56	; 0x38
 80098f0:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80098f2:	4b21      	ldr	r3, [pc, #132]	; (8009978 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	f3bf 8f5b 	dmb	ish
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	bf0c      	ite	eq
 8009904:	2301      	moveq	r3, #1
 8009906:	2300      	movne	r3, #0
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d030      	beq.n	8009970 <_Z23getFont_verdana_40_4bppv+0x84>
 800990e:	481a      	ldr	r0, [pc, #104]	; (8009978 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009910:	f020 ffc1 	bl	802a896 <__cxa_guard_acquire>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	bf14      	ite	ne
 800991a:	2301      	movne	r3, #1
 800991c:	2300      	moveq	r3, #0
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b00      	cmp	r3, #0
 8009922:	d025      	beq.n	8009970 <_Z23getFont_verdana_40_4bppv+0x84>
 8009924:	2300      	movs	r3, #0
 8009926:	930c      	str	r3, [sp, #48]	; 0x30
 8009928:	2300      	movs	r3, #0
 800992a:	930b      	str	r3, [sp, #44]	; 0x2c
 800992c:	2300      	movs	r3, #0
 800992e:	930a      	str	r3, [sp, #40]	; 0x28
 8009930:	233f      	movs	r3, #63	; 0x3f
 8009932:	9309      	str	r3, [sp, #36]	; 0x24
 8009934:	4b11      	ldr	r3, [pc, #68]	; (800997c <_Z23getFont_verdana_40_4bppv+0x90>)
 8009936:	9308      	str	r3, [sp, #32]
 8009938:	4b11      	ldr	r3, [pc, #68]	; (8009980 <_Z23getFont_verdana_40_4bppv+0x94>)
 800993a:	9307      	str	r3, [sp, #28]
 800993c:	2300      	movs	r3, #0
 800993e:	9306      	str	r3, [sp, #24]
 8009940:	2300      	movs	r3, #0
 8009942:	9305      	str	r3, [sp, #20]
 8009944:	2301      	movs	r3, #1
 8009946:	9304      	str	r3, [sp, #16]
 8009948:	2304      	movs	r3, #4
 800994a:	9303      	str	r3, [sp, #12]
 800994c:	2300      	movs	r3, #0
 800994e:	9302      	str	r3, [sp, #8]
 8009950:	2300      	movs	r3, #0
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	2328      	movs	r3, #40	; 0x28
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	2328      	movs	r3, #40	; 0x28
 800995a:	2201      	movs	r2, #1
 800995c:	4909      	ldr	r1, [pc, #36]	; (8009984 <_Z23getFont_verdana_40_4bppv+0x98>)
 800995e:	480a      	ldr	r0, [pc, #40]	; (8009988 <_Z23getFont_verdana_40_4bppv+0x9c>)
 8009960:	f7ff fe68 	bl	8009634 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009964:	4809      	ldr	r0, [pc, #36]	; (800998c <_Z23getFont_verdana_40_4bppv+0xa0>)
 8009966:	f021 f98d 	bl	802ac84 <atexit>
 800996a:	4803      	ldr	r0, [pc, #12]	; (8009978 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800996c:	f020 ff9f 	bl	802a8ae <__cxa_guard_release>
    return verdana_40_4bpp;
 8009970:	4b05      	ldr	r3, [pc, #20]	; (8009988 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8009972:	4618      	mov	r0, r3
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	2400cff4 	.word	0x2400cff4
 800997c:	08030288 	.word	0x08030288
 8009980:	08030294 	.word	0x08030294
 8009984:	90000198 	.word	0x90000198
 8009988:	2400cfc8 	.word	0x2400cfc8
 800998c:	080098dd 	.word	0x080098dd

08009990 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	460b      	mov	r3, r1
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800999e:	2300      	movs	r3, #0
    }
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80099b4:	2300      	movs	r3, #0
    }
 80099b6:	4618      	mov	r0, r3
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80099ca:	2300      	movs	r3, #0
    }
 80099cc:	4618      	mov	r0, r3
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	4613      	mov	r3, r2
 80099e4:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80099e6:	4a07      	ldr	r2, [pc, #28]	; (8009a04 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6013      	str	r3, [r2, #0]
        fonts = f;
 80099ec:	4a06      	ldr	r2, [pc, #24]	; (8009a08 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80099f2:	4a06      	ldr	r2, [pc, #24]	; (8009a0c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80099f4:	88fb      	ldrh	r3, [r7, #6]
 80099f6:	8013      	strh	r3, [r2, #0]
    }
 80099f8:	bf00      	nop
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	24027fc4 	.word	0x24027fc4
 8009a08:	24027fcc 	.word	0x24027fcc
 8009a0c:	24027fc8 	.word	0x24027fc8

08009a10 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009a10:	b40e      	push	{r1, r2, r3}
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b085      	sub	sp, #20
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009a1a:	f107 0320 	add.w	r3, r7, #32
 8009a1e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	69fa      	ldr	r2, [r7, #28]
 8009a24:	2100      	movs	r1, #0
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f016 fb04 	bl	8020034 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009a30:	89fb      	ldrh	r3, [r7, #14]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a3c:	b003      	add	sp, #12
 8009a3e:	4770      	bx	lr

08009a40 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009a40:	b40c      	push	{r2, r3}
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009a4e:	f107 031c 	add.w	r3, r7, #28
 8009a52:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009a54:	78f9      	ldrb	r1, [r7, #3]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	69ba      	ldr	r2, [r7, #24]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f016 faea 	bl	8020034 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009a60:	4603      	mov	r3, r0
 8009a62:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009a64:	89fb      	ldrh	r3, [r7, #14]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a70:	b002      	add	sp, #8
 8009a72:	4770      	bx	lr

08009a74 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08a      	sub	sp, #40	; 0x28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d016      	beq.n	8009ab6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3322      	adds	r3, #34	; 0x22
 8009a8c:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	8adb      	ldrh	r3, [r3, #22]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d105      	bne.n	8009aa2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8009a96:	4b43      	ldr	r3, [pc, #268]	; (8009ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009a98:	4a43      	ldr	r2, [pc, #268]	; (8009ba8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009a9a:	21c5      	movs	r1, #197	; 0xc5
 8009a9c:	4843      	ldr	r0, [pc, #268]	; (8009bac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009a9e:	f021 f8d3 	bl	802ac48 <__assert_func>
            return buffer[pos];
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	8a9b      	ldrh	r3, [r3, #20]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e000      	b.n	8009ab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d06a      	beq.n	8009b92 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f017 fdd3 	bl	8021668 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3322      	adds	r3, #34	; 0x22
 8009ac6:	623b      	str	r3, [r7, #32]
 8009ac8:	2301      	movs	r3, #1
 8009aca:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	8adb      	ldrh	r3, [r3, #22]
 8009ad0:	8bfa      	ldrh	r2, [r7, #30]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d305      	bcc.n	8009ae2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8009ad6:	4b36      	ldr	r3, [pc, #216]	; (8009bb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009ad8:	4a36      	ldr	r2, [pc, #216]	; (8009bb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009ada:	21cb      	movs	r1, #203	; 0xcb
 8009adc:	4833      	ldr	r0, [pc, #204]	; (8009bac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009ade:	f021 f8b3 	bl	802ac48 <__assert_func>
            const uint16_t index = pos + offset;
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	8a9a      	ldrh	r2, [r3, #20]
 8009ae6:	8bfb      	ldrh	r3, [r7, #30]
 8009ae8:	4413      	add	r3, r2
 8009aea:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009aec:	8bbb      	ldrh	r3, [r7, #28]
 8009aee:	2b09      	cmp	r3, #9
 8009af0:	d801      	bhi.n	8009af6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009af2:	8bbb      	ldrh	r3, [r7, #28]
 8009af4:	e001      	b.n	8009afa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8009af6:	8bbb      	ldrh	r3, [r7, #28]
 8009af8:	3b0a      	subs	r3, #10
 8009afa:	6a3a      	ldr	r2, [r7, #32]
 8009afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b00:	f640 123f 	movw	r2, #2367	; 0x93f
 8009b04:	4293      	cmp	r3, r2
 8009b06:	bf0c      	ite	eq
 8009b08:	2301      	moveq	r3, #1
 8009b0a:	2300      	movne	r3, #0
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d03f      	beq.n	8009b92 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3322      	adds	r3, #34	; 0x22
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	3222      	adds	r2, #34	; 0x22
 8009b1a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	8ad2      	ldrh	r2, [r2, #22]
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	d105      	bne.n	8009b30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009b24:	4b1f      	ldr	r3, [pc, #124]	; (8009ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009b26:	4a20      	ldr	r2, [pc, #128]	; (8009ba8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009b28:	21c5      	movs	r1, #197	; 0xc5
 8009b2a:	4820      	ldr	r0, [pc, #128]	; (8009bac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009b2c:	f021 f88c 	bl	802ac48 <__assert_func>
            return buffer[pos];
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	8a92      	ldrh	r2, [r2, #20]
 8009b34:	4611      	mov	r1, r2
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009b3c:	613b      	str	r3, [r7, #16]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	8adb      	ldrh	r3, [r3, #22]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d806      	bhi.n	8009b58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009b4a:	4b1b      	ldr	r3, [pc, #108]	; (8009bb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009b4c:	4a1b      	ldr	r2, [pc, #108]	; (8009bbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009b4e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8009b52:	4816      	ldr	r0, [pc, #88]	; (8009bac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009b54:	f021 f878 	bl	802ac48 <__assert_func>
            const uint16_t index = pos + 1;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	8a9b      	ldrh	r3, [r3, #20]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009b60:	89bb      	ldrh	r3, [r7, #12]
 8009b62:	2b09      	cmp	r3, #9
 8009b64:	d801      	bhi.n	8009b6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009b66:	89bb      	ldrh	r3, [r7, #12]
 8009b68:	e000      	b.n	8009b6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	89f9      	ldrh	r1, [r7, #14]
 8009b70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009b74:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	3322      	adds	r3, #34	; 0x22
 8009b7a:	61bb      	str	r3, [r7, #24]
 8009b7c:	f640 133f 	movw	r3, #2367	; 0x93f
 8009b80:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	8a9b      	ldrh	r3, [r3, #20]
 8009b86:	4619      	mov	r1, r3
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	8afa      	ldrh	r2, [r7, #22]
 8009b8c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009b90:	bf00      	nop
        }
    }
    return getNextChar();
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f017 fc6a 	bl	802146c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009b98:	4603      	mov	r3, r0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3728      	adds	r7, #40	; 0x28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	0802dc5c 	.word	0x0802dc5c
 8009ba8:	0802dc68 	.word	0x0802dc68
 8009bac:	0802dd14 	.word	0x0802dd14
 8009bb0:	0802dd60 	.word	0x0802dd60
 8009bb4:	0802dd70 	.word	0x0802dd70
 8009bb8:	0802de44 	.word	0x0802de44
 8009bbc:	0802de50 	.word	0x0802de50

08009bc0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f017 fc18 	bl	80213fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009bce:	bf00      	nop
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8009be6:	88fb      	ldrh	r3, [r7, #6]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d127      	bne.n	8009c3c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8009bec:	88fb      	ldrh	r3, [r7, #6]
 8009bee:	4a1e      	ldr	r2, [pc, #120]	; (8009c68 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d016      	beq.n	8009c26 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8009bf8:	88fb      	ldrh	r3, [r7, #6]
 8009bfa:	4a1b      	ldr	r2, [pc, #108]	; (8009c68 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c00:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	4413      	add	r3, r2
 8009c0a:	4a18      	ldr	r2, [pc, #96]	; (8009c6c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009c0c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	4413      	add	r3, r2
 8009c16:	4a16      	ldr	r2, [pc, #88]	; (8009c70 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009c18:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	4413      	add	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e00a      	b.n	8009c3c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8009c26:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009c28:	4a12      	ldr	r2, [pc, #72]	; (8009c74 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8009c2a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009c2c:	4a12      	ldr	r2, [pc, #72]	; (8009c78 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8009c2e:	4b10      	ldr	r3, [pc, #64]	; (8009c70 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009c30:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8009c32:	88fb      	ldrh	r3, [r7, #6]
 8009c34:	4a11      	ldr	r2, [pc, #68]	; (8009c7c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8009c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c3a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00d      	beq.n	8009c5e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8009c42:	4a0f      	ldr	r2, [pc, #60]	; (8009c80 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8009c44:	88fb      	ldrh	r3, [r7, #6]
 8009c46:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009c48:	f000 f824 	bl	8009c94 <_ZN17TypedTextDatabase8getFontsEv>
 8009c4c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8009c4e:	f000 f819 	bl	8009c84 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8009c52:	4603      	mov	r3, r0
 8009c54:	461a      	mov	r2, r3
 8009c56:	4621      	mov	r1, r4
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f7ff febd 	bl	80099d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8009c5e:	bf00      	nop
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd90      	pop	{r4, r7, pc}
 8009c66:	bf00      	nop
 8009c68:	2400cff8 	.word	0x2400cff8
 8009c6c:	2400d000 	.word	0x2400d000
 8009c70:	2400d004 	.word	0x2400d004
 8009c74:	900001ac 	.word	0x900001ac
 8009c78:	900001a8 	.word	0x900001a8
 8009c7c:	900001b4 	.word	0x900001b4
 8009c80:	2400cffc 	.word	0x2400cffc

08009c84 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8009c84:	b480      	push	{r7}
 8009c86:	af00      	add	r7, sp, #0
    return 0;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8009c94:	b480      	push	{r7}
 8009c96:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8009c98:	4b02      	ldr	r3, [pc, #8]	; (8009ca4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	2400d008 	.word	0x2400d008

08009ca8 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d113      	bne.n	8009ce0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d10e      	bne.n	8009ce0 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8009cc2:	f7ff fdb9 	bl	8009838 <_Z23getFont_verdana_20_4bppv>
 8009cc6:	4603      	mov	r3, r0
};
 8009cc8:	4a07      	ldr	r2, [pc, #28]	; (8009ce8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009cca:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8009ccc:	f7ff fe0e 	bl	80098ec <_Z23getFont_verdana_40_4bppv>
 8009cd0:	4603      	mov	r3, r0
};
 8009cd2:	4a05      	ldr	r2, [pc, #20]	; (8009ce8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009cd4:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8009cd6:	f7ff fd55 	bl	8009784 <_Z23getFont_verdana_10_4bppv>
 8009cda:	4603      	mov	r3, r0
};
 8009cdc:	4a02      	ldr	r2, [pc, #8]	; (8009ce8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009cde:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	2400d008 	.word	0x2400d008

08009cec <_GLOBAL__sub_I_touchgfx_fonts>:
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	f7ff ffd7 	bl	8009ca8 <_Z41__static_initialization_and_destruction_0ii>
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
    {
    }
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
    {
    }
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
    {
 8009d2c:	4a04      	ldr	r2, [pc, #16]	; (8009d40 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	601a      	str	r2, [r3, #0]
    }
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4618      	mov	r0, r3
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	0802ecd4 	.word	0x0802ecd4

08009d44 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
    }
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7ff ffe9 	bl	8009d24 <_ZN8touchgfx9PresenterD1Ev>
 8009d52:	2104      	movs	r1, #4
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f020 fd9c 	bl	802a892 <_ZdlPvj>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
    {
 8009d6c:	4a04      	ldr	r2, [pc, #16]	; (8009d80 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	601a      	str	r2, [r3, #0]
    }
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	0802ecd4 	.word	0x0802ecd4

08009d84 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	4a06      	ldr	r2, [pc, #24]	; (8009da8 <_ZN13ModelListenerC1Ev+0x24>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	605a      	str	r2, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	0802ecc4 	.word	0x0802ecc4

08009dac <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	4a04      	ldr	r2, [pc, #16]	; (8009dc8 <_ZN13ModelListenerD1Ev+0x1c>)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	0802ecc4 	.word	0x0802ecc4

08009dcc <_ZN13ModelListenerD0Ev>:
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff ffe9 	bl	8009dac <_ZN13ModelListenerD1Ev>
 8009dda:	2108      	movs	r1, #8
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f020 fd58 	bl	802a892 <_ZdlPvj>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4618      	mov	r0, r3
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <_ZN18AppScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~AppScreenPresenter() {};
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	4a09      	ldr	r2, [pc, #36]	; (8009e1c <_ZN18AppScreenPresenterD1Ev+0x30>)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	601a      	str	r2, [r3, #0]
 8009dfa:	4a09      	ldr	r2, [pc, #36]	; (8009e20 <_ZN18AppScreenPresenterD1Ev+0x34>)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	605a      	str	r2, [r3, #4]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7ff ffd1 	bl	8009dac <_ZN13ModelListenerD1Ev>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7ff ff89 	bl	8009d24 <_ZN8touchgfx9PresenterD1Ev>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	0802ec9c 	.word	0x0802ec9c
 8009e20:	0802ecb4 	.word	0x0802ecb4

08009e24 <_ZThn4_N18AppScreenPresenterD1Ev>:
 8009e24:	f1a0 0004 	sub.w	r0, r0, #4
 8009e28:	e7e0      	b.n	8009dec <_ZN18AppScreenPresenterD1Ev>
 8009e2a:	bf00      	nop

08009e2c <_ZN18AppScreenPresenterD0Ev>:
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff ffd9 	bl	8009dec <_ZN18AppScreenPresenterD1Ev>
 8009e3a:	2110      	movs	r1, #16
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f020 fd28 	bl	802a892 <_ZdlPvj>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4618      	mov	r0, r3
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <_ZThn4_N18AppScreenPresenterD0Ev>:
 8009e4c:	f1a0 0004 	sub.w	r0, r0, #4
 8009e50:	e7ec      	b.n	8009e2c <_ZN18AppScreenPresenterD0Ev>
	...

08009e54 <_ZN18AppScreenPresenterC1ER13AppScreenView>:
#include <gui/appscreen_screen/AppScreenView.hpp>
#include <gui/appscreen_screen/AppScreenPresenter.hpp>

AppScreenPresenter::AppScreenPresenter(AppScreenView& v)
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
    : view(v)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7ff ff7f 	bl	8009d64 <_ZN8touchgfx9PresenterC1Ev>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7ff ff8a 	bl	8009d84 <_ZN13ModelListenerC1Ev>
 8009e70:	4a06      	ldr	r2, [pc, #24]	; (8009e8c <_ZN18AppScreenPresenterC1ER13AppScreenView+0x38>)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	4a06      	ldr	r2, [pc, #24]	; (8009e90 <_ZN18AppScreenPresenterC1ER13AppScreenView+0x3c>)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	605a      	str	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	60da      	str	r2, [r3, #12]
{

}
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4618      	mov	r0, r3
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	0802ec9c 	.word	0x0802ec9c
 8009e90:	0802ecb4 	.word	0x0802ecb4

08009e94 <_ZN18AppScreenPresenter8activateEv>:

void AppScreenPresenter::activate()
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]

}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <_ZN18AppScreenPresenter10deactivateEv>:

void AppScreenPresenter::deactivate()
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]

}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8009ec4:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d105      	bne.n	8009ed8 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 8009ecc:	4b06      	ldr	r3, [pc, #24]	; (8009ee8 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 8009ece:	4a07      	ldr	r2, [pc, #28]	; (8009eec <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 8009ed0:	2187      	movs	r1, #135	; 0x87
 8009ed2:	4807      	ldr	r0, [pc, #28]	; (8009ef0 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 8009ed4:	f020 feb8 	bl	802ac48 <__assert_func>
        return bitmapId;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	881b      	ldrh	r3, [r3, #0]
    }
 8009edc:	4618      	mov	r0, r3
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	24027ffc 	.word	0x24027ffc
 8009ee8:	0802df04 	.word	0x0802df04
 8009eec:	0802df40 	.word	0x0802df40
 8009ef0:	0802df74 	.word	0x0802df74

08009ef4 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 8009ef4:	b590      	push	{r4, r7, lr}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	332e      	adds	r3, #46	; 0x2e
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff ffdb 	bl	8009ebc <_ZNK8touchgfx6Bitmap5getIdEv>
 8009f06:	4603      	mov	r3, r0
 8009f08:	461c      	mov	r4, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	3334      	adds	r3, #52	; 0x34
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7ff ffd4 	bl	8009ebc <_ZNK8touchgfx6Bitmap5getIdEv>
 8009f14:	4603      	mov	r3, r0
 8009f16:	429c      	cmp	r4, r3
 8009f18:	bf0c      	ite	eq
 8009f1a:	2301      	moveq	r3, #1
 8009f1c:	2300      	movne	r3, #0
 8009f1e:	b2db      	uxtb	r3, r3
    }
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd90      	pop	{r4, r7, pc}

08009f28 <_ZN13AppScreenViewD1Ev>:

class AppScreenView : public AppScreenViewBase
{
public:
    AppScreenView();
    virtual ~AppScreenView() {}
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	4a05      	ldr	r2, [pc, #20]	; (8009f48 <_ZN13AppScreenViewD1Ev+0x20>)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe faab 	bl	8008494 <_ZN17AppScreenViewBaseD1Ev>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	0802ecec 	.word	0x0802ecec

08009f4c <_ZN13AppScreenViewD0Ev>:
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff ffe7 	bl	8009f28 <_ZN13AppScreenViewD1Ev>
 8009f5a:	f641 61d0 	movw	r1, #7888	; 0x1ed0
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f020 fc97 	bl	802a892 <_ZdlPvj>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4618      	mov	r0, r3
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <_ZN13AppScreenViewC1Ev>:
#include <gui/appscreen_screen/AppScreenView.hpp>

AppScreenView::AppScreenView()
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe f8f8 	bl	8008170 <_ZN17AppScreenViewBaseC1Ev>
 8009f80:	4a03      	ldr	r2, [pc, #12]	; (8009f90 <_ZN13AppScreenViewC1Ev+0x20>)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	601a      	str	r2, [r3, #0]
{

}
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	0802ecec 	.word	0x0802ecec

08009f94 <_ZN13AppScreenView11setupScreenEv>:

void AppScreenView::setupScreen()
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
    AppScreenViewBase::setupScreen();
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe fabd 	bl	800851e <_ZN17AppScreenViewBase11setupScreenEv>
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <_ZN13AppScreenView14tearDownScreenEv>:

void AppScreenView::tearDownScreen()
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
    AppScreenViewBase::tearDownScreen();
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fd ff08 	bl	8007dcc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <_ZN13AppScreenView19ButtonCallsThisFuncEv>:

/*@Balaji303 Modified start*/
void AppScreenView::ButtonCallsThisFunc()
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	if(toggleButton1.getState())
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3398      	adds	r3, #152	; 0x98
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7ff ff8f 	bl	8009ef4 <_ZNK8touchgfx12ToggleButton8getStateEv>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d006      	beq.n	8009fea <_ZN13AppScreenView19ButtonCallsThisFuncEv+0x26>
	{
		// If the button is ON -> Set Gauge1 to 69
		gauge1.setValue(69);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	33ec      	adds	r3, #236	; 0xec
 8009fe0:	2145      	movs	r1, #69	; 0x45
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f013 f876 	bl	801d0d4 <_ZN8touchgfx5Gauge8setValueEi>
	else
	{
		// Set Gauge1
		gauge1.setValue(0);
	}
}
 8009fe8:	e005      	b.n	8009ff6 <_ZN13AppScreenView19ButtonCallsThisFuncEv+0x32>
		gauge1.setValue(0);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	33ec      	adds	r3, #236	; 0xec
 8009fee:	2100      	movs	r1, #0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f013 f86f 	bl	801d0d4 <_ZN8touchgfx5Gauge8setValueEi>
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	68b9      	ldr	r1, [r7, #8]
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff f870 	bl	80090f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a018:	4a03      	ldr	r2, [pc, #12]	; (800a028 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	601a      	str	r2, [r3, #0]
{

}
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	0802e32c 	.word	0x0802e32c

0800a02c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
{

}
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4618      	mov	r0, r3
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <_ZN5Model4tickEv>:

void Model::tick()
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]

}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d103      	bne.n	800a074 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800a06c:	f04f 33ff 	mov.w	r3, #4294967295
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	e02c      	b.n	800a0ce <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	891a      	ldrh	r2, [r3, #8]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	68da      	ldr	r2, [r3, #12]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	691a      	ldr	r2, [r3, #16]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	695a      	ldr	r2, [r3, #20]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a0c      	ldr	r2, [pc, #48]	; (800a0d8 <FT5336_RegisterBusIO+0x7c>)
 800a0a8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a0b      	ldr	r2, [pc, #44]	; (800a0dc <FT5336_RegisterBusIO+0x80>)
 800a0ae:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d004      	beq.n	800a0c8 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4798      	blx	r3
 800a0c4:	60f8      	str	r0, [r7, #12]
 800a0c6:	e002      	b.n	800a0ce <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800a0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0cc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	0800a4d5 	.word	0x0800a4d5
 800a0dc:	0800a509 	.word	0x0800a509

0800a0e0 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2205      	movs	r2, #5
 800a0fa:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a102:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a10a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10d      	bne.n	800a14c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f987 	bl	800a44a <FT5336_DisableIT>
 800a13c:	4602      	mov	r2, r0
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4413      	add	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800a152:	f04f 33ff 	mov.w	r3, #4294967295
 800a156:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a158:	68fb      	ldr	r3, [r7, #12]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800a162:	b480      	push	{r7}
 800a164:	b085      	sub	sp, #20
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a174:	2b01      	cmp	r3, #1
 800a176:	d103      	bne.n	800a180 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800a180:	68fb      	ldr	r3, [r7, #12]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f103 0218 	add.w	r2, r3, #24
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	f000 fa25 	bl	800a5f6 <ft5336_radian_value>
 800a1ac:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f103 0218 	add.w	r2, r3, #24
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f000 fa2b 	bl	800a618 <ft5336_offset_left_right>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f103 0218 	add.w	r2, r3, #24
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	4610      	mov	r0, r2
 800a1da:	f000 fa2e 	bl	800a63a <ft5336_offset_up_down>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f103 0218 	add.w	r2, r3, #24
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	f000 fa31 	bl	800a65c <ft5336_disatnce_left_right>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	4413      	add	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f103 0218 	add.w	r2, r3, #24
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	4619      	mov	r1, r3
 800a210:	4610      	mov	r0, r2
 800a212:	f000 fa34 	bl	800a67e <ft5336_distance_up_down>
 800a216:	4602      	mov	r2, r0
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f103 0218 	add.w	r2, r3, #24
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	4619      	mov	r1, r3
 800a22c:	4610      	mov	r0, r2
 800a22e:	f000 fa37 	bl	800a6a0 <ft5336_distance_zoom>
 800a232:	4602      	mov	r2, r0
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800a240:	f04f 33ff 	mov.w	r3, #4294967295
 800a244:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a246:	68fb      	ldr	r3, [r7, #12]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3318      	adds	r3, #24
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	4618      	mov	r0, r3
 800a262:	f000 fa3f 	bl	800a6e4 <ft5336_chip_id>
 800a266:	4603      	mov	r3, r0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f908 	bl	800a494 <FT5336_DetectTouch>
 800a284:	4603      	mov	r3, r0
 800a286:	461a      	mov	r2, r3
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f103 0018 	add.w	r0, r3, #24
 800a292:	f107 0208 	add.w	r2, r7, #8
 800a296:	2304      	movs	r3, #4
 800a298:	2103      	movs	r1, #3
 800a29a:	f000 f94f 	bl	800a53c <ft5336_read_reg>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d003      	beq.n	800a2ac <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800a2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a8:	60fb      	str	r3, [r7, #12]
 800a2aa:	e00f      	b.n	800a2cc <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800a2ac:	7a3b      	ldrb	r3, [r7, #8]
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a2b4:	7a7a      	ldrb	r2, [r7, #9]
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800a2bc:	7abb      	ldrb	r3, [r7, #10]
 800a2be:	021b      	lsls	r3, r3, #8
 800a2c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a2c4:	7afa      	ldrb	r2, [r7, #11]
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b08c      	sub	sp, #48	; 0x30
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f8d5 	bl	800a494 <FT5336_DetectTouch>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f103 0018 	add.w	r0, r3, #24
 800a2f8:	f107 0208 	add.w	r2, r7, #8
 800a2fc:	231e      	movs	r3, #30
 800a2fe:	2103      	movs	r1, #3
 800a300:	f000 f91c 	bl	800a53c <ft5336_read_reg>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d003      	beq.n	800a312 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800a30a:	f04f 33ff 	mov.w	r3, #4294967295
 800a30e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a310:	e077      	b.n	800a402 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a312:	2300      	movs	r3, #0
 800a314:	62bb      	str	r3, [r7, #40]	; 0x28
 800a316:	e071      	b.n	800a3fc <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800a318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a31a:	4613      	mov	r3, r2
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	4413      	add	r3, r2
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	3330      	adds	r3, #48	; 0x30
 800a324:	443b      	add	r3, r7
 800a326:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a32a:	021b      	lsls	r3, r3, #8
 800a32c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a332:	4613      	mov	r3, r2
 800a334:	005b      	lsls	r3, r3, #1
 800a336:	4413      	add	r3, r2
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	3301      	adds	r3, #1
 800a33c:	3330      	adds	r3, #48	; 0x30
 800a33e:	443b      	add	r3, r7
 800a340:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a344:	ea41 0203 	orr.w	r2, r1, r3
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	440b      	add	r3, r1
 800a350:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800a352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a354:	4613      	mov	r3, r2
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	4413      	add	r3, r2
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	3302      	adds	r3, #2
 800a35e:	3330      	adds	r3, #48	; 0x30
 800a360:	443b      	add	r3, r7
 800a362:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a36c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a36e:	4613      	mov	r3, r2
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	4413      	add	r3, r2
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	3303      	adds	r3, #3
 800a378:	3330      	adds	r3, #48	; 0x30
 800a37a:	443b      	add	r3, r7
 800a37c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a380:	4319      	orrs	r1, r3
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a386:	3206      	adds	r2, #6
 800a388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800a38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a38e:	4613      	mov	r3, r2
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	4413      	add	r3, r2
 800a394:	005b      	lsls	r3, r3, #1
 800a396:	3330      	adds	r3, #48	; 0x30
 800a398:	443b      	add	r3, r7
 800a39a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a39e:	099b      	lsrs	r3, r3, #6
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3a8:	3210      	adds	r2, #16
 800a3aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800a3ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	4413      	add	r3, r2
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	3330      	adds	r3, #48	; 0x30
 800a3bc:	443b      	add	r3, r7
 800a3be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	330a      	adds	r3, #10
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800a3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	005b      	lsls	r3, r3, #1
 800a3d6:	4413      	add	r3, r2
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	3305      	adds	r3, #5
 800a3dc:	3330      	adds	r3, #48	; 0x30
 800a3de:	443b      	add	r3, r7
 800a3e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a3e4:	091b      	lsrs	r3, r3, #4
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	3314      	adds	r3, #20
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	d98a      	bls.n	800a318 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a404:	4618      	mov	r0, r3
 800a406:	3730      	adds	r7, #48	; 0x30
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	3318      	adds	r3, #24
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 f8bb 	bl	800a598 <ft5336_gest_id>
 800a422:	4603      	mov	r3, r0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3318      	adds	r3, #24
 800a438:	2101      	movs	r1, #1
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 f941 	bl	800a6c2 <ft5336_g_mode>
 800a440:	4603      	mov	r3, r0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	3318      	adds	r3, #24
 800a456:	2100      	movs	r1, #0
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 f932 	bl	800a6c2 <ft5336_g_mode>
 800a45e:	4603      	mov	r3, r0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	3318      	adds	r3, #24
 800a4a0:	f107 020b 	add.w	r2, r7, #11
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 f886 	bl	800a5b8 <ft5336_td_status>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800a4b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	e007      	b.n	800a4ca <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
 800a4bc:	2b05      	cmp	r3, #5
 800a4be:	d902      	bls.n	800a4c6 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	e001      	b.n	800a4ca <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800a4c6:	7afb      	ldrb	r3, [r7, #11]
 800a4c8:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a4d4:	b590      	push	{r4, r7, lr}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	607a      	str	r2, [r7, #4]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	72fb      	strb	r3, [r7, #11]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	691c      	ldr	r4, [r3, #16]
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	8918      	ldrh	r0, [r3, #8]
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	b299      	uxth	r1, r3
 800a4f8:	893b      	ldrh	r3, [r7, #8]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	47a0      	blx	r4
 800a4fe:	4603      	mov	r3, r0
}
 800a500:	4618      	mov	r0, r3
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	bd90      	pop	{r4, r7, pc}

0800a508 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a508:	b590      	push	{r4, r7, lr}
 800a50a:	b087      	sub	sp, #28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	607a      	str	r2, [r7, #4]
 800a512:	461a      	mov	r2, r3
 800a514:	460b      	mov	r3, r1
 800a516:	72fb      	strb	r3, [r7, #11]
 800a518:	4613      	mov	r3, r2
 800a51a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	68dc      	ldr	r4, [r3, #12]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	8918      	ldrh	r0, [r3, #8]
 800a528:	7afb      	ldrb	r3, [r7, #11]
 800a52a:	b299      	uxth	r1, r3
 800a52c:	893b      	ldrh	r3, [r7, #8]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	47a0      	blx	r4
 800a532:	4603      	mov	r3, r0
}
 800a534:	4618      	mov	r0, r3
 800a536:	371c      	adds	r7, #28
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd90      	pop	{r4, r7, pc}

0800a53c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800a53c:	b590      	push	{r4, r7, lr}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	607a      	str	r2, [r7, #4]
 800a546:	461a      	mov	r2, r3
 800a548:	460b      	mov	r3, r1
 800a54a:	72fb      	strb	r3, [r7, #11]
 800a54c:	4613      	mov	r3, r2
 800a54e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	685c      	ldr	r4, [r3, #4]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6898      	ldr	r0, [r3, #8]
 800a558:	893b      	ldrh	r3, [r7, #8]
 800a55a:	7af9      	ldrb	r1, [r7, #11]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	47a0      	blx	r4
 800a560:	4603      	mov	r3, r0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	bd90      	pop	{r4, r7, pc}

0800a56a <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800a56a:	b590      	push	{r4, r7, lr}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	60f8      	str	r0, [r7, #12]
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	461a      	mov	r2, r3
 800a576:	460b      	mov	r3, r1
 800a578:	72fb      	strb	r3, [r7, #11]
 800a57a:	4613      	mov	r3, r2
 800a57c:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681c      	ldr	r4, [r3, #0]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6898      	ldr	r0, [r3, #8]
 800a586:	893b      	ldrh	r3, [r7, #8]
 800a588:	7af9      	ldrb	r1, [r7, #11]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	47a0      	blx	r4
 800a58e:	4603      	mov	r3, r0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	bd90      	pop	{r4, r7, pc}

0800a598 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7ff ffc7 	bl	800a53c <ft5336_read_reg>
 800a5ae:	4603      	mov	r3, r0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	2102      	movs	r1, #2
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff ffb7 	bl	800a53c <ft5336_read_reg>
 800a5ce:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10a      	bne.n	800a5ec <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	f003 030f 	and.w	r3, r3, #15
 800a5de:	b2da      	uxtb	r2, r3
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	781a      	ldrb	r2, [r3, #0]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	460b      	mov	r3, r1
 800a600:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800a602:	1cfa      	adds	r2, r7, #3
 800a604:	2301      	movs	r3, #1
 800a606:	2191      	movs	r1, #145	; 0x91
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ffae 	bl	800a56a <ft5336_write_reg>
 800a60e:	4603      	mov	r3, r0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	460b      	mov	r3, r1
 800a622:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800a624:	1cfa      	adds	r2, r7, #3
 800a626:	2301      	movs	r3, #1
 800a628:	2192      	movs	r1, #146	; 0x92
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff ff9d 	bl	800a56a <ft5336_write_reg>
 800a630:	4603      	mov	r3, r0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	460b      	mov	r3, r1
 800a644:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800a646:	1cfa      	adds	r2, r7, #3
 800a648:	2301      	movs	r3, #1
 800a64a:	2193      	movs	r1, #147	; 0x93
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff ff8c 	bl	800a56a <ft5336_write_reg>
 800a652:	4603      	mov	r3, r0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800a668:	1cfa      	adds	r2, r7, #3
 800a66a:	2301      	movs	r3, #1
 800a66c:	2194      	movs	r1, #148	; 0x94
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7ff ff7b 	bl	800a56a <ft5336_write_reg>
 800a674:	4603      	mov	r3, r0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b082      	sub	sp, #8
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	460b      	mov	r3, r1
 800a688:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800a68a:	1cfa      	adds	r2, r7, #3
 800a68c:	2301      	movs	r3, #1
 800a68e:	2195      	movs	r1, #149	; 0x95
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7ff ff6a 	bl	800a56a <ft5336_write_reg>
 800a696:	4603      	mov	r3, r0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800a6ac:	1cfa      	adds	r2, r7, #3
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	2196      	movs	r1, #150	; 0x96
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff ff59 	bl	800a56a <ft5336_write_reg>
 800a6b8:	4603      	mov	r3, r0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800a6ce:	1cfa      	adds	r2, r7, #3
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	21a4      	movs	r1, #164	; 0xa4
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff ff48 	bl	800a56a <ft5336_write_reg>
 800a6da:	4603      	mov	r3, r0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	21a8      	movs	r1, #168	; 0xa8
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff ff21 	bl	800a53c <ft5336_read_reg>
 800a6fa:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d107      	bne.n	800a712 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	781a      	ldrb	r2, [r3, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	781a      	ldrb	r2, [r3, #0]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800a712:	68fb      	ldr	r3, [r7, #12]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a72a:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a732:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a73a:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a742:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a74a:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a752:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a75a:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a762:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a76a:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 800a76c:	2300      	movs	r3, #0
};
 800a76e:	4618      	mov	r0, r3
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b09c      	sub	sp, #112	; 0x70
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	460b      	mov	r3, r1
 800a784:	70fb      	strb	r3, [r7, #3]
 800a786:	4613      	mov	r3, r2
 800a788:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 800a78a:	f107 0320 	add.w	r3, r7, #32
 800a78e:	2250      	movs	r2, #80	; 0x50
 800a790:	2100      	movs	r1, #0
 800a792:	4618      	mov	r0, r3
 800a794:	f020 fae8 	bl	802ad68 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800a798:	f107 030c 	add.w	r3, r7, #12
 800a79c:	2200      	movs	r2, #0
 800a79e:	601a      	str	r2, [r3, #0]
 800a7a0:	605a      	str	r2, [r3, #4]
 800a7a2:	609a      	str	r2, [r3, #8]
 800a7a4:	60da      	str	r2, [r3, #12]
 800a7a6:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800a7a8:	78fb      	ldrb	r3, [r7, #3]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d105      	bne.n	800a7ba <MX25LM51245G_AutoPollingMemReady+0x40>
 800a7ae:	78bb      	ldrb	r3, [r7, #2]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d102      	bne.n	800a7ba <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 800a7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b8:	e088      	b.n	800a8cc <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800a7c2:	78fb      	ldrb	r3, [r7, #3]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <MX25LM51245G_AutoPollingMemReady+0x52>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e000      	b.n	800a7ce <MX25LM51245G_AutoPollingMemReady+0x54>
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a7d0:	78bb      	ldrb	r3, [r7, #2]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d101      	bne.n	800a7da <MX25LM51245G_AutoPollingMemReady+0x60>
 800a7d6:	2308      	movs	r3, #8
 800a7d8:	e000      	b.n	800a7dc <MX25LM51245G_AutoPollingMemReady+0x62>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800a7de:	78fb      	ldrb	r3, [r7, #3]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <MX25LM51245G_AutoPollingMemReady+0x6e>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	e000      	b.n	800a7ea <MX25LM51245G_AutoPollingMemReady+0x70>
 800a7e8:	2310      	movs	r3, #16
 800a7ea:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800a7ec:	78fb      	ldrb	r3, [r7, #3]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <MX25LM51245G_AutoPollingMemReady+0x7c>
 800a7f2:	2305      	movs	r3, #5
 800a7f4:	e001      	b.n	800a7fa <MX25LM51245G_AutoPollingMemReady+0x80>
 800a7f6:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800a7fa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d101      	bne.n	800a806 <MX25LM51245G_AutoPollingMemReady+0x8c>
 800a802:	2300      	movs	r3, #0
 800a804:	e001      	b.n	800a80a <MX25LM51245G_AutoPollingMemReady+0x90>
 800a806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a80a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800a80c:	78bb      	ldrb	r3, [r7, #2]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d102      	bne.n	800a818 <MX25LM51245G_AutoPollingMemReady+0x9e>
 800a812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a816:	e000      	b.n	800a81a <MX25LM51245G_AutoPollingMemReady+0xa0>
 800a818:	2300      	movs	r3, #0
 800a81a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800a81c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a820:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a826:	2300      	movs	r3, #0
 800a828:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800a82a:	78fb      	ldrb	r3, [r7, #3]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <MX25LM51245G_AutoPollingMemReady+0xbc>
 800a830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a834:	e001      	b.n	800a83a <MX25LM51245G_AutoPollingMemReady+0xc0>
 800a836:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a83a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800a83c:	78bb      	ldrb	r3, [r7, #2]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d102      	bne.n	800a848 <MX25LM51245G_AutoPollingMemReady+0xce>
 800a842:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a846:	e000      	b.n	800a84a <MX25LM51245G_AutoPollingMemReady+0xd0>
 800a848:	2300      	movs	r3, #0
 800a84a:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800a84c:	78fb      	ldrb	r3, [r7, #3]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <MX25LM51245G_AutoPollingMemReady+0xdc>
 800a852:	2300      	movs	r3, #0
 800a854:	e000      	b.n	800a858 <MX25LM51245G_AutoPollingMemReady+0xde>
 800a856:	2305      	movs	r3, #5
 800a858:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800a85a:	78bb      	ldrb	r3, [r7, #2]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d101      	bne.n	800a864 <MX25LM51245G_AutoPollingMemReady+0xea>
 800a860:	2302      	movs	r3, #2
 800a862:	e000      	b.n	800a866 <MX25LM51245G_AutoPollingMemReady+0xec>
 800a864:	2301      	movs	r3, #1
 800a866:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800a868:	78bb      	ldrb	r3, [r7, #2]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d102      	bne.n	800a874 <MX25LM51245G_AutoPollingMemReady+0xfa>
 800a86e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a872:	e000      	b.n	800a876 <MX25LM51245G_AutoPollingMemReady+0xfc>
 800a874:	2300      	movs	r3, #0
 800a876:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a878:	2300      	movs	r3, #0
 800a87a:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800a880:	2301      	movs	r3, #1
 800a882:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800a884:	2300      	movs	r3, #0
 800a886:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800a888:	2310      	movs	r3, #16
 800a88a:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800a88c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a890:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a892:	f107 0320 	add.w	r3, r7, #32
 800a896:	f241 3288 	movw	r2, #5000	; 0x1388
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f007 f901 	bl	8011aa4 <HAL_OSPI_Command>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 800a8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ac:	e00e      	b.n	800a8cc <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a8ae:	f107 030c 	add.w	r3, r7, #12
 800a8b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f007 fa96 	bl	8011dea <HAL_OSPI_AutoPolling>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 800a8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c8:	e000      	b.n	800a8cc <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3770      	adds	r7, #112	; 0x70
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b098      	sub	sp, #96	; 0x60
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	70fb      	strb	r3, [r7, #3]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 800a8e4:	f107 0310 	add.w	r3, r7, #16
 800a8e8:	2250      	movs	r2, #80	; 0x50
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f020 fa3b 	bl	802ad68 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800a8f2:	f107 0308 	add.w	r3, r7, #8
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d105      	bne.n	800a90e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 800a902:	78bb      	ldrb	r3, [r7, #2]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d102      	bne.n	800a90e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 800a908:	f04f 33ff 	mov.w	r3, #4294967295
 800a90c:	e088      	b.n	800aa20 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800a90e:	2301      	movs	r3, #1
 800a910:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a912:	2300      	movs	r3, #0
 800a914:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800a916:	78fb      	ldrb	r3, [r7, #3]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d101      	bne.n	800a920 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 800a91c:	2301      	movs	r3, #1
 800a91e:	e000      	b.n	800a922 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 800a920:	2304      	movs	r3, #4
 800a922:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a924:	2300      	movs	r3, #0
 800a926:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 800a92e:	2300      	movs	r3, #0
 800a930:	e000      	b.n	800a934 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 800a932:	2310      	movs	r3, #16
 800a934:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800a936:	78fb      	ldrb	r3, [r7, #3]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d106      	bne.n	800a94a <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 800a93c:	78bb      	ldrb	r3, [r7, #2]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 800a942:	230b      	movs	r3, #11
 800a944:	e003      	b.n	800a94e <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 800a946:	230c      	movs	r3, #12
 800a948:	e001      	b.n	800a94e <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 800a94a:	f64e 4313 	movw	r3, #60435	; 0xec13
 800a94e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800a950:	78fb      	ldrb	r3, [r7, #3]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d102      	bne.n	800a95c <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 800a956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a95a:	e001      	b.n	800a960 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 800a95c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800a962:	2300      	movs	r3, #0
 800a964:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800a966:	78bb      	ldrb	r3, [r7, #2]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d102      	bne.n	800a972 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 800a96c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a970:	e001      	b.n	800a976 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 800a972:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a976:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a978:	2300      	movs	r3, #0
 800a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d102      	bne.n	800a988 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 800a982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a986:	e001      	b.n	800a98c <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 800a988:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a98c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800a98e:	2300      	movs	r3, #0
 800a990:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800a992:	78fb      	ldrb	r3, [r7, #3]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 800a998:	2308      	movs	r3, #8
 800a99a:	e000      	b.n	800a99e <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 800a99c:	2306      	movs	r3, #6
 800a99e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a9a8:	f107 0310 	add.w	r3, r7, #16
 800a9ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f007 f876 	bl	8011aa4 <HAL_OSPI_Command>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 800a9be:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c2:	e02d      	b.n	800aa20 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800a9c8:	78fb      	ldrb	r3, [r7, #3]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d106      	bne.n	800a9dc <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 800a9ce:	78bb      	ldrb	r3, [r7, #2]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	e003      	b.n	800a9e0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 800a9d8:	2312      	movs	r3, #18
 800a9da:	e001      	b.n	800a9e0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 800a9dc:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800a9e0:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a9e6:	f107 0310 	add.w	r3, r7, #16
 800a9ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f007 f857 	bl	8011aa4 <HAL_OSPI_Command>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 800a9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800aa00:	e00e      	b.n	800aa20 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800aa02:	2300      	movs	r3, #0
 800aa04:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800aa06:	f107 0308 	add.w	r3, r7, #8
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f007 fa73 	bl	8011ef8 <HAL_OSPI_MemoryMapped>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 800aa18:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1c:	e000      	b.n	800aa20 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3760      	adds	r7, #96	; 0x60
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b098      	sub	sp, #96	; 0x60
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 800aa34:	f107 0310 	add.w	r3, r7, #16
 800aa38:	2250      	movs	r2, #80	; 0x50
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f020 f993 	bl	802ad68 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800aa42:	f107 0308 	add.w	r3, r7, #8
 800aa46:	2200      	movs	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800aa50:	2300      	movs	r3, #0
 800aa52:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800aa54:	2304      	movs	r3, #4
 800aa56:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 800aa58:	2308      	movs	r3, #8
 800aa5a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800aa5c:	2310      	movs	r3, #16
 800aa5e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800aa60:	f64e 6311 	movw	r3, #60945	; 0xee11
 800aa64:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800aa66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800aa6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa70:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800aa72:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800aa76:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800aa7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aa80:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800aa82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa86:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800aa88:	2306      	movs	r3, #6
 800aa8a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800aa8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800aa90:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800aa92:	2300      	movs	r3, #0
 800aa94:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aa96:	f107 0310 	add.w	r3, r7, #16
 800aa9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f006 ffff 	bl	8011aa4 <HAL_OSPI_Command>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 800aaac:	f04f 33ff 	mov.w	r3, #4294967295
 800aab0:	e025      	b.n	800aafe <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800aab2:	2302      	movs	r3, #2
 800aab4:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800aab6:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800aaba:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 800aabc:	2300      	movs	r3, #0
 800aabe:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800aac0:	2300      	movs	r3, #0
 800aac2:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aac4:	f107 0310 	add.w	r3, r7, #16
 800aac8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aacc:	4619      	mov	r1, r3
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f006 ffe8 	bl	8011aa4 <HAL_OSPI_Command>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 800aada:	f04f 33ff 	mov.w	r3, #4294967295
 800aade:	e00e      	b.n	800aafe <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800aae0:	2300      	movs	r3, #0
 800aae2:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800aae4:	f107 0308 	add.w	r3, r7, #8
 800aae8:	4619      	mov	r1, r3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f007 fa04 	bl	8011ef8 <HAL_OSPI_MemoryMapped>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 800aaf6:	f04f 33ff 	mov.w	r3, #4294967295
 800aafa:	e000      	b.n	800aafe <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3760      	adds	r7, #96	; 0x60
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b09c      	sub	sp, #112	; 0x70
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	460b      	mov	r3, r1
 800ab10:	70fb      	strb	r3, [r7, #3]
 800ab12:	4613      	mov	r3, r2
 800ab14:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 800ab16:	f107 0320 	add.w	r3, r7, #32
 800ab1a:	2250      	movs	r2, #80	; 0x50
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f020 f922 	bl	802ad68 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800ab24:	f107 030c 	add.w	r3, r7, #12
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]
 800ab2c:	605a      	str	r2, [r3, #4]
 800ab2e:	609a      	str	r2, [r3, #8]
 800ab30:	60da      	str	r2, [r3, #12]
 800ab32:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800ab34:	78fb      	ldrb	r3, [r7, #3]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d105      	bne.n	800ab46 <MX25LM51245G_WriteEnable+0x40>
 800ab3a:	78bb      	ldrb	r3, [r7, #2]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d102      	bne.n	800ab46 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 800ab40:	f04f 33ff 	mov.w	r3, #4294967295
 800ab44:	e0a6      	b.n	800ac94 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800ab46:	2300      	movs	r3, #0
 800ab48:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800ab4e:	78fb      	ldrb	r3, [r7, #3]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <MX25LM51245G_WriteEnable+0x52>
 800ab54:	2301      	movs	r3, #1
 800ab56:	e000      	b.n	800ab5a <MX25LM51245G_WriteEnable+0x54>
 800ab58:	2304      	movs	r3, #4
 800ab5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ab5c:	78bb      	ldrb	r3, [r7, #2]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d101      	bne.n	800ab66 <MX25LM51245G_WriteEnable+0x60>
 800ab62:	2308      	movs	r3, #8
 800ab64:	e000      	b.n	800ab68 <MX25LM51245G_WriteEnable+0x62>
 800ab66:	2300      	movs	r3, #0
 800ab68:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <MX25LM51245G_WriteEnable+0x6e>
 800ab70:	2300      	movs	r3, #0
 800ab72:	e000      	b.n	800ab76 <MX25LM51245G_WriteEnable+0x70>
 800ab74:	2310      	movs	r3, #16
 800ab76:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800ab78:	78fb      	ldrb	r3, [r7, #3]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d101      	bne.n	800ab82 <MX25LM51245G_WriteEnable+0x7c>
 800ab7e:	2306      	movs	r3, #6
 800ab80:	e001      	b.n	800ab86 <MX25LM51245G_WriteEnable+0x80>
 800ab82:	f240 63f9 	movw	r3, #1785	; 0x6f9
 800ab86:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800ab90:	2300      	movs	r3, #0
 800ab92:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aba0:	f107 0320 	add.w	r3, r7, #32
 800aba4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f006 ff7a 	bl	8011aa4 <HAL_OSPI_Command>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 800abb6:	f04f 33ff 	mov.w	r3, #4294967295
 800abba:	e06b      	b.n	800ac94 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800abbc:	78fb      	ldrb	r3, [r7, #3]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <MX25LM51245G_WriteEnable+0xc0>
 800abc2:	2305      	movs	r3, #5
 800abc4:	e001      	b.n	800abca <MX25LM51245G_WriteEnable+0xc4>
 800abc6:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800abca:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800abcc:	78fb      	ldrb	r3, [r7, #3]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <MX25LM51245G_WriteEnable+0xd0>
 800abd2:	2300      	movs	r3, #0
 800abd4:	e001      	b.n	800abda <MX25LM51245G_WriteEnable+0xd4>
 800abd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abda:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800abdc:	78bb      	ldrb	r3, [r7, #2]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d102      	bne.n	800abe8 <MX25LM51245G_WriteEnable+0xe2>
 800abe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abe6:	e000      	b.n	800abea <MX25LM51245G_WriteEnable+0xe4>
 800abe8:	2300      	movs	r3, #0
 800abea:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800abec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800abf0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800abf6:	78fb      	ldrb	r3, [r7, #3]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d102      	bne.n	800ac02 <MX25LM51245G_WriteEnable+0xfc>
 800abfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac00:	e001      	b.n	800ac06 <MX25LM51245G_WriteEnable+0x100>
 800ac02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ac06:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800ac08:	78bb      	ldrb	r3, [r7, #2]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d102      	bne.n	800ac14 <MX25LM51245G_WriteEnable+0x10e>
 800ac0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac12:	e000      	b.n	800ac16 <MX25LM51245G_WriteEnable+0x110>
 800ac14:	2300      	movs	r3, #0
 800ac16:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <MX25LM51245G_WriteEnable+0x11c>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e000      	b.n	800ac24 <MX25LM51245G_WriteEnable+0x11e>
 800ac22:	2305      	movs	r3, #5
 800ac24:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800ac26:	78bb      	ldrb	r3, [r7, #2]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d101      	bne.n	800ac30 <MX25LM51245G_WriteEnable+0x12a>
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	e000      	b.n	800ac32 <MX25LM51245G_WriteEnable+0x12c>
 800ac30:	2301      	movs	r3, #1
 800ac32:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800ac34:	78bb      	ldrb	r3, [r7, #2]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d102      	bne.n	800ac40 <MX25LM51245G_WriteEnable+0x13a>
 800ac3a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ac3e:	e000      	b.n	800ac42 <MX25LM51245G_WriteEnable+0x13c>
 800ac40:	2300      	movs	r3, #0
 800ac42:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ac44:	f107 0320 	add.w	r3, r7, #32
 800ac48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f006 ff28 	bl	8011aa4 <HAL_OSPI_Command>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 800ac5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5e:	e019      	b.n	800ac94 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 800ac60:	2302      	movs	r3, #2
 800ac62:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 800ac64:	2302      	movs	r3, #2
 800ac66:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800ac6c:	2310      	movs	r3, #16
 800ac6e:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800ac70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac74:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ac76:	f107 030c 	add.w	r3, r7, #12
 800ac7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f007 f8b2 	bl	8011dea <HAL_OSPI_AutoPolling>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 800ac8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac90:	e000      	b.n	800ac94 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3770      	adds	r7, #112	; 0x70
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b098      	sub	sp, #96	; 0x60
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	607b      	str	r3, [r7, #4]
 800aca6:	460b      	mov	r3, r1
 800aca8:	72fb      	strb	r3, [r7, #11]
 800acaa:	4613      	mov	r3, r2
 800acac:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800acae:	f107 0310 	add.w	r3, r7, #16
 800acb2:	2250      	movs	r2, #80	; 0x50
 800acb4:	2100      	movs	r1, #0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f020 f856 	bl	802ad68 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800acbc:	7afb      	ldrb	r3, [r7, #11]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d105      	bne.n	800acce <MX25LM51245G_WriteCfg2Register+0x32>
 800acc2:	7abb      	ldrb	r3, [r7, #10]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d102      	bne.n	800acce <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800acc8:	f04f 33ff 	mov.w	r3, #4294967295
 800accc:	e077      	b.n	800adbe <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800acce:	2300      	movs	r3, #0
 800acd0:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800acd2:	2300      	movs	r3, #0
 800acd4:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800acd6:	7afb      	ldrb	r3, [r7, #11]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <MX25LM51245G_WriteCfg2Register+0x44>
 800acdc:	2301      	movs	r3, #1
 800acde:	e000      	b.n	800ace2 <MX25LM51245G_WriteCfg2Register+0x46>
 800ace0:	2304      	movs	r3, #4
 800ace2:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ace4:	7abb      	ldrb	r3, [r7, #10]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d101      	bne.n	800acee <MX25LM51245G_WriteCfg2Register+0x52>
 800acea:	2308      	movs	r3, #8
 800acec:	e000      	b.n	800acf0 <MX25LM51245G_WriteCfg2Register+0x54>
 800acee:	2300      	movs	r3, #0
 800acf0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800acf2:	7afb      	ldrb	r3, [r7, #11]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <MX25LM51245G_WriteCfg2Register+0x60>
 800acf8:	2300      	movs	r3, #0
 800acfa:	e000      	b.n	800acfe <MX25LM51245G_WriteCfg2Register+0x62>
 800acfc:	2310      	movs	r3, #16
 800acfe:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800ad00:	7afb      	ldrb	r3, [r7, #11]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <MX25LM51245G_WriteCfg2Register+0x6e>
 800ad06:	2372      	movs	r3, #114	; 0x72
 800ad08:	e001      	b.n	800ad0e <MX25LM51245G_WriteCfg2Register+0x72>
 800ad0a:	f247 238d 	movw	r3, #29325	; 0x728d
 800ad0e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800ad10:	7afb      	ldrb	r3, [r7, #11]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d102      	bne.n	800ad1c <MX25LM51245G_WriteCfg2Register+0x80>
 800ad16:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad1a:	e001      	b.n	800ad20 <MX25LM51245G_WriteCfg2Register+0x84>
 800ad1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad20:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800ad22:	7abb      	ldrb	r3, [r7, #10]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d102      	bne.n	800ad2e <MX25LM51245G_WriteCfg2Register+0x92>
 800ad28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad2c:	e000      	b.n	800ad30 <MX25LM51245G_WriteCfg2Register+0x94>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800ad32:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ad36:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800ad40:	7afb      	ldrb	r3, [r7, #11]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <MX25LM51245G_WriteCfg2Register+0xb0>
 800ad46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad4a:	e001      	b.n	800ad50 <MX25LM51245G_WriteCfg2Register+0xb4>
 800ad4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ad50:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800ad52:	7abb      	ldrb	r3, [r7, #10]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d102      	bne.n	800ad5e <MX25LM51245G_WriteCfg2Register+0xc2>
 800ad58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad5c:	e000      	b.n	800ad60 <MX25LM51245G_WriteCfg2Register+0xc4>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 800ad62:	2300      	movs	r3, #0
 800ad64:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800ad66:	7afb      	ldrb	r3, [r7, #11]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d006      	beq.n	800ad7a <MX25LM51245G_WriteCfg2Register+0xde>
 800ad6c:	7abb      	ldrb	r3, [r7, #10]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d101      	bne.n	800ad76 <MX25LM51245G_WriteCfg2Register+0xda>
 800ad72:	2302      	movs	r3, #2
 800ad74:	e002      	b.n	800ad7c <MX25LM51245G_WriteCfg2Register+0xe0>
 800ad76:	2301      	movs	r3, #1
 800ad78:	e000      	b.n	800ad7c <MX25LM51245G_WriteCfg2Register+0xe0>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ad82:	2300      	movs	r3, #0
 800ad84:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad86:	f107 0310 	add.w	r3, r7, #16
 800ad8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad8e:	4619      	mov	r1, r3
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f006 fe87 	bl	8011aa4 <HAL_OSPI_Command>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 800ad9c:	f04f 33ff 	mov.w	r3, #4294967295
 800ada0:	e00d      	b.n	800adbe <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ada2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f006 ff07 	bl	8011bbe <HAL_OSPI_Transmit>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 800adb6:	f04f 33ff 	mov.w	r3, #4294967295
 800adba:	e000      	b.n	800adbe <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3760      	adds	r7, #96	; 0x60
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b098      	sub	sp, #96	; 0x60
 800adca:	af00      	add	r7, sp, #0
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	607b      	str	r3, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	72fb      	strb	r3, [r7, #11]
 800add4:	4613      	mov	r3, r2
 800add6:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800add8:	f107 0310 	add.w	r3, r7, #16
 800addc:	2250      	movs	r2, #80	; 0x50
 800adde:	2100      	movs	r1, #0
 800ade0:	4618      	mov	r0, r3
 800ade2:	f01f ffc1 	bl	802ad68 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800ade6:	7afb      	ldrb	r3, [r7, #11]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d105      	bne.n	800adf8 <MX25LM51245G_ReadCfg2Register+0x32>
 800adec:	7abb      	ldrb	r3, [r7, #10]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d102      	bne.n	800adf8 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800adf2:	f04f 33ff 	mov.w	r3, #4294967295
 800adf6:	e07c      	b.n	800aef2 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800adf8:	2300      	movs	r3, #0
 800adfa:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800adfc:	2300      	movs	r3, #0
 800adfe:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800ae00:	7afb      	ldrb	r3, [r7, #11]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <MX25LM51245G_ReadCfg2Register+0x44>
 800ae06:	2301      	movs	r3, #1
 800ae08:	e000      	b.n	800ae0c <MX25LM51245G_ReadCfg2Register+0x46>
 800ae0a:	2304      	movs	r3, #4
 800ae0c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ae0e:	7abb      	ldrb	r3, [r7, #10]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d101      	bne.n	800ae18 <MX25LM51245G_ReadCfg2Register+0x52>
 800ae14:	2308      	movs	r3, #8
 800ae16:	e000      	b.n	800ae1a <MX25LM51245G_ReadCfg2Register+0x54>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800ae1c:	7afb      	ldrb	r3, [r7, #11]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <MX25LM51245G_ReadCfg2Register+0x60>
 800ae22:	2300      	movs	r3, #0
 800ae24:	e000      	b.n	800ae28 <MX25LM51245G_ReadCfg2Register+0x62>
 800ae26:	2310      	movs	r3, #16
 800ae28:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800ae2a:	7afb      	ldrb	r3, [r7, #11]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <MX25LM51245G_ReadCfg2Register+0x6e>
 800ae30:	2371      	movs	r3, #113	; 0x71
 800ae32:	e001      	b.n	800ae38 <MX25LM51245G_ReadCfg2Register+0x72>
 800ae34:	f247 138e 	movw	r3, #29070	; 0x718e
 800ae38:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800ae3a:	7afb      	ldrb	r3, [r7, #11]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <MX25LM51245G_ReadCfg2Register+0x80>
 800ae40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae44:	e001      	b.n	800ae4a <MX25LM51245G_ReadCfg2Register+0x84>
 800ae46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800ae4c:	7abb      	ldrb	r3, [r7, #10]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d102      	bne.n	800ae58 <MX25LM51245G_ReadCfg2Register+0x92>
 800ae52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae56:	e000      	b.n	800ae5a <MX25LM51245G_ReadCfg2Register+0x94>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800ae5c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ae60:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ae66:	2300      	movs	r3, #0
 800ae68:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800ae6a:	7afb      	ldrb	r3, [r7, #11]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d102      	bne.n	800ae76 <MX25LM51245G_ReadCfg2Register+0xb0>
 800ae70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae74:	e001      	b.n	800ae7a <MX25LM51245G_ReadCfg2Register+0xb4>
 800ae76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ae7a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800ae7c:	7abb      	ldrb	r3, [r7, #10]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d102      	bne.n	800ae88 <MX25LM51245G_ReadCfg2Register+0xc2>
 800ae82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae86:	e000      	b.n	800ae8a <MX25LM51245G_ReadCfg2Register+0xc4>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800ae8c:	7afb      	ldrb	r3, [r7, #11]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d101      	bne.n	800ae96 <MX25LM51245G_ReadCfg2Register+0xd0>
 800ae92:	2300      	movs	r3, #0
 800ae94:	e000      	b.n	800ae98 <MX25LM51245G_ReadCfg2Register+0xd2>
 800ae96:	2305      	movs	r3, #5
 800ae98:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800ae9a:	7abb      	ldrb	r3, [r7, #10]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d101      	bne.n	800aea4 <MX25LM51245G_ReadCfg2Register+0xde>
 800aea0:	2302      	movs	r3, #2
 800aea2:	e000      	b.n	800aea6 <MX25LM51245G_ReadCfg2Register+0xe0>
 800aea4:	2301      	movs	r3, #1
 800aea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800aea8:	7abb      	ldrb	r3, [r7, #10]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d102      	bne.n	800aeb4 <MX25LM51245G_ReadCfg2Register+0xee>
 800aeae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800aeb2:	e000      	b.n	800aeb6 <MX25LM51245G_ReadCfg2Register+0xf0>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aebc:	f107 0310 	add.w	r3, r7, #16
 800aec0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aec4:	4619      	mov	r1, r3
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f006 fdec 	bl	8011aa4 <HAL_OSPI_Command>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d002      	beq.n	800aed8 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 800aed2:	f04f 33ff 	mov.w	r3, #4294967295
 800aed6:	e00c      	b.n	800aef2 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aed8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aedc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f006 fee0 	bl	8011ca4 <HAL_OSPI_Receive>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 800aeea:	f04f 33ff 	mov.w	r3, #4294967295
 800aeee:	e000      	b.n	800aef2 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3760      	adds	r7, #96	; 0x60
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b096      	sub	sp, #88	; 0x58
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	460b      	mov	r3, r1
 800af04:	70fb      	strb	r3, [r7, #3]
 800af06:	4613      	mov	r3, r2
 800af08:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800af0a:	f107 0308 	add.w	r3, r7, #8
 800af0e:	2250      	movs	r2, #80	; 0x50
 800af10:	2100      	movs	r1, #0
 800af12:	4618      	mov	r0, r3
 800af14:	f01f ff28 	bl	802ad68 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800af18:	78fb      	ldrb	r3, [r7, #3]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d105      	bne.n	800af2a <MX25LM51245G_ResetEnable+0x30>
 800af1e:	78bb      	ldrb	r3, [r7, #2]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d102      	bne.n	800af2a <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 800af24:	f04f 33ff 	mov.w	r3, #4294967295
 800af28:	e03b      	b.n	800afa2 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800af2e:	2300      	movs	r3, #0
 800af30:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800af32:	78fb      	ldrb	r3, [r7, #3]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d101      	bne.n	800af3c <MX25LM51245G_ResetEnable+0x42>
 800af38:	2301      	movs	r3, #1
 800af3a:	e000      	b.n	800af3e <MX25LM51245G_ResetEnable+0x44>
 800af3c:	2304      	movs	r3, #4
 800af3e:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800af40:	78bb      	ldrb	r3, [r7, #2]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d101      	bne.n	800af4a <MX25LM51245G_ResetEnable+0x50>
 800af46:	2308      	movs	r3, #8
 800af48:	e000      	b.n	800af4c <MX25LM51245G_ResetEnable+0x52>
 800af4a:	2300      	movs	r3, #0
 800af4c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800af4e:	78fb      	ldrb	r3, [r7, #3]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <MX25LM51245G_ResetEnable+0x5e>
 800af54:	2300      	movs	r3, #0
 800af56:	e000      	b.n	800af5a <MX25LM51245G_ResetEnable+0x60>
 800af58:	2310      	movs	r3, #16
 800af5a:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800af5c:	78fb      	ldrb	r3, [r7, #3]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d101      	bne.n	800af66 <MX25LM51245G_ResetEnable+0x6c>
 800af62:	2366      	movs	r3, #102	; 0x66
 800af64:	e001      	b.n	800af6a <MX25LM51245G_ResetEnable+0x70>
 800af66:	f246 6399 	movw	r3, #26265	; 0x6699
 800af6a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800af6c:	2300      	movs	r3, #0
 800af6e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800af70:	2300      	movs	r3, #0
 800af72:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800af74:	2300      	movs	r3, #0
 800af76:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800af78:	2300      	movs	r3, #0
 800af7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800af7c:	2300      	movs	r3, #0
 800af7e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800af80:	2300      	movs	r3, #0
 800af82:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800af84:	f107 0308 	add.w	r3, r7, #8
 800af88:	f241 3288 	movw	r2, #5000	; 0x1388
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f006 fd88 	bl	8011aa4 <HAL_OSPI_Command>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 800af9a:	f04f 33ff 	mov.w	r3, #4294967295
 800af9e:	e000      	b.n	800afa2 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3758      	adds	r7, #88	; 0x58
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b096      	sub	sp, #88	; 0x58
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	460b      	mov	r3, r1
 800afb4:	70fb      	strb	r3, [r7, #3]
 800afb6:	4613      	mov	r3, r2
 800afb8:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800afba:	f107 0308 	add.w	r3, r7, #8
 800afbe:	2250      	movs	r2, #80	; 0x50
 800afc0:	2100      	movs	r1, #0
 800afc2:	4618      	mov	r0, r3
 800afc4:	f01f fed0 	bl	802ad68 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800afc8:	78fb      	ldrb	r3, [r7, #3]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d105      	bne.n	800afda <MX25LM51245G_ResetMemory+0x30>
 800afce:	78bb      	ldrb	r3, [r7, #2]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d102      	bne.n	800afda <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 800afd4:	f04f 33ff 	mov.w	r3, #4294967295
 800afd8:	e03b      	b.n	800b052 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800afda:	2300      	movs	r3, #0
 800afdc:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800afde:	2300      	movs	r3, #0
 800afe0:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800afe2:	78fb      	ldrb	r3, [r7, #3]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <MX25LM51245G_ResetMemory+0x42>
 800afe8:	2301      	movs	r3, #1
 800afea:	e000      	b.n	800afee <MX25LM51245G_ResetMemory+0x44>
 800afec:	2304      	movs	r3, #4
 800afee:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800aff0:	78bb      	ldrb	r3, [r7, #2]
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d101      	bne.n	800affa <MX25LM51245G_ResetMemory+0x50>
 800aff6:	2308      	movs	r3, #8
 800aff8:	e000      	b.n	800affc <MX25LM51245G_ResetMemory+0x52>
 800affa:	2300      	movs	r3, #0
 800affc:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800affe:	78fb      	ldrb	r3, [r7, #3]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <MX25LM51245G_ResetMemory+0x5e>
 800b004:	2300      	movs	r3, #0
 800b006:	e000      	b.n	800b00a <MX25LM51245G_ResetMemory+0x60>
 800b008:	2310      	movs	r3, #16
 800b00a:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800b00c:	78fb      	ldrb	r3, [r7, #3]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <MX25LM51245G_ResetMemory+0x6c>
 800b012:	2399      	movs	r3, #153	; 0x99
 800b014:	e001      	b.n	800b01a <MX25LM51245G_ResetMemory+0x70>
 800b016:	f649 1366 	movw	r3, #39270	; 0x9966
 800b01a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b01c:	2300      	movs	r3, #0
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b020:	2300      	movs	r3, #0
 800b022:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800b024:	2300      	movs	r3, #0
 800b026:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b02c:	2300      	movs	r3, #0
 800b02e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b030:	2300      	movs	r3, #0
 800b032:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b034:	f107 0308 	add.w	r3, r7, #8
 800b038:	f241 3288 	movw	r2, #5000	; 0x1388
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f006 fd30 	bl	8011aa4 <HAL_OSPI_Command>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d002      	beq.n	800b050 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 800b04a:	f04f 33ff 	mov.w	r3, #4294967295
 800b04e:	e000      	b.n	800b052 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3758      	adds	r7, #88	; 0x58
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b062:	2300      	movs	r3, #0
 800b064:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800b066:	4b16      	ldr	r3, [pc, #88]	; (800b0c0 <BSP_I2C4_Init+0x64>)
 800b068:	4a16      	ldr	r2, [pc, #88]	; (800b0c4 <BSP_I2C4_Init+0x68>)
 800b06a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800b06c:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <BSP_I2C4_Init+0x6c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d11f      	bne.n	800b0b4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800b074:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <BSP_I2C4_Init+0x6c>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3301      	adds	r3, #1
 800b07a:	4a13      	ldr	r2, [pc, #76]	; (800b0c8 <BSP_I2C4_Init+0x6c>)
 800b07c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b07e:	4810      	ldr	r0, [pc, #64]	; (800b0c0 <BSP_I2C4_Init+0x64>)
 800b080:	f003 f87a 	bl	800e178 <HAL_I2C_GetState>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d114      	bne.n	800b0b4 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800b08a:	480d      	ldr	r0, [pc, #52]	; (800b0c0 <BSP_I2C4_Init+0x64>)
 800b08c:	f000 fb60 	bl	800b750 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b090:	f008 fa44 	bl	801351c <HAL_RCC_GetPCLK2Freq>
 800b094:	4603      	mov	r3, r0
 800b096:	490d      	ldr	r1, [pc, #52]	; (800b0cc <BSP_I2C4_Init+0x70>)
 800b098:	4618      	mov	r0, r3
 800b09a:	f000 f8e3 	bl	800b264 <I2C_GetTiming>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4807      	ldr	r0, [pc, #28]	; (800b0c0 <BSP_I2C4_Init+0x64>)
 800b0a4:	f000 f838 	bl	800b118 <MX_I2C4_Init>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800b0ae:	f06f 0307 	mvn.w	r3, #7
 800b0b2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800b0b4:	687b      	ldr	r3, [r7, #4]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	2400da1c 	.word	0x2400da1c
 800b0c4:	58001c00 	.word	0x58001c00
 800b0c8:	2400d014 	.word	0x2400d014
 800b0cc:	00061a80 	.word	0x00061a80

0800b0d0 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800b0da:	4b0d      	ldr	r3, [pc, #52]	; (800b110 <BSP_I2C4_DeInit+0x40>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	4a0b      	ldr	r2, [pc, #44]	; (800b110 <BSP_I2C4_DeInit+0x40>)
 800b0e2:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <BSP_I2C4_DeInit+0x40>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10b      	bne.n	800b104 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800b0ec:	4809      	ldr	r0, [pc, #36]	; (800b114 <BSP_I2C4_DeInit+0x44>)
 800b0ee:	f000 fb9b 	bl	800b828 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b0f2:	4808      	ldr	r0, [pc, #32]	; (800b114 <BSP_I2C4_DeInit+0x44>)
 800b0f4:	f002 fde2 	bl	800dcbc <HAL_I2C_DeInit>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b0fe:	f06f 0307 	mvn.w	r3, #7
 800b102:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800b104:	687b      	ldr	r3, [r7, #4]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	2400d014 	.word	0x2400d014
 800b114:	2400da1c 	.word	0x2400da1c

0800b118 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f002 fd20 	bl	800db9c <HAL_I2C_Init>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d002      	beq.n	800b168 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	73fb      	strb	r3, [r7, #15]
 800b166:	e014      	b.n	800b192 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800b168:	2300      	movs	r3, #0
 800b16a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b16c:	68b9      	ldr	r1, [r7, #8]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f003 fad4 	bl	800e71c <HAL_I2CEx_ConfigAnalogFilter>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	73fb      	strb	r3, [r7, #15]
 800b17e:	e008      	b.n	800b192 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b180:	2100      	movs	r1, #0
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f003 fb15 	bl	800e7b2 <HAL_I2CEx_ConfigDigitalFilter>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800b192:	7bfb      	ldrb	r3, [r7, #15]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af02      	add	r7, sp, #8
 800b1a2:	60ba      	str	r2, [r7, #8]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	81fb      	strh	r3, [r7, #14]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	81bb      	strh	r3, [r7, #12]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b1b2:	89b9      	ldrh	r1, [r7, #12]
 800b1b4:	89f8      	ldrh	r0, [r7, #14]
 800b1b6:	88fb      	ldrh	r3, [r7, #6]
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f000 fb57 	bl	800b870 <I2C4_WriteReg>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d102      	bne.n	800b1ce <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	617b      	str	r3, [r7, #20]
 800b1cc:	e00c      	b.n	800b1e8 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b1ce:	4809      	ldr	r0, [pc, #36]	; (800b1f4 <BSP_I2C4_WriteReg+0x58>)
 800b1d0:	f002 ffe0 	bl	800e194 <HAL_I2C_GetError>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b04      	cmp	r3, #4
 800b1d8:	d103      	bne.n	800b1e2 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b1da:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	e002      	b.n	800b1e8 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b1e2:	f06f 0303 	mvn.w	r3, #3
 800b1e6:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b1e8:	697b      	ldr	r3, [r7, #20]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	2400da1c 	.word	0x2400da1c

0800b1f8 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b088      	sub	sp, #32
 800b1fc:	af02      	add	r7, sp, #8
 800b1fe:	60ba      	str	r2, [r7, #8]
 800b200:	461a      	mov	r2, r3
 800b202:	4603      	mov	r3, r0
 800b204:	81fb      	strh	r3, [r7, #14]
 800b206:	460b      	mov	r3, r1
 800b208:	81bb      	strh	r3, [r7, #12]
 800b20a:	4613      	mov	r3, r2
 800b20c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b20e:	89b9      	ldrh	r1, [r7, #12]
 800b210:	89f8      	ldrh	r0, [r7, #14]
 800b212:	88fb      	ldrh	r3, [r7, #6]
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2201      	movs	r2, #1
 800b21a:	f000 fb4f 	bl	800b8bc <I2C4_ReadReg>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d102      	bne.n	800b22a <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b224:	2300      	movs	r3, #0
 800b226:	617b      	str	r3, [r7, #20]
 800b228:	e00c      	b.n	800b244 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b22a:	4809      	ldr	r0, [pc, #36]	; (800b250 <BSP_I2C4_ReadReg+0x58>)
 800b22c:	f002 ffb2 	bl	800e194 <HAL_I2C_GetError>
 800b230:	4603      	mov	r3, r0
 800b232:	2b04      	cmp	r3, #4
 800b234:	d103      	bne.n	800b23e <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b236:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b23a:	617b      	str	r3, [r7, #20]
 800b23c:	e002      	b.n	800b244 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b23e:	f06f 0303 	mvn.w	r3, #3
 800b242:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b244:	697b      	ldr	r3, [r7, #20]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3718      	adds	r7, #24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	2400da1c 	.word	0x2400da1c

0800b254 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800b258:	f001 fca4 	bl	800cba4 <HAL_GetTick>
 800b25c:	4603      	mov	r3, r0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d06b      	beq.n	800b350 <I2C_GetTiming+0xec>
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d068      	beq.n	800b350 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b27e:	2300      	movs	r3, #0
 800b280:	613b      	str	r3, [r7, #16]
 800b282:	e060      	b.n	800b346 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b284:	4a35      	ldr	r2, [pc, #212]	; (800b35c <I2C_GetTiming+0xf8>)
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	212c      	movs	r1, #44	; 0x2c
 800b28a:	fb01 f303 	mul.w	r3, r1, r3
 800b28e:	4413      	add	r3, r2
 800b290:	3304      	adds	r3, #4
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	429a      	cmp	r2, r3
 800b298:	d352      	bcc.n	800b340 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800b29a:	4a30      	ldr	r2, [pc, #192]	; (800b35c <I2C_GetTiming+0xf8>)
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	212c      	movs	r1, #44	; 0x2c
 800b2a0:	fb01 f303 	mul.w	r3, r1, r3
 800b2a4:	4413      	add	r3, r2
 800b2a6:	3308      	adds	r3, #8
 800b2a8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d847      	bhi.n	800b340 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800b2b0:	6939      	ldr	r1, [r7, #16]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f856 	bl	800b364 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800b2b8:	6939      	ldr	r1, [r7, #16]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f940 	bl	800b540 <I2C_Compute_SCLL_SCLH>
 800b2c0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2b7f      	cmp	r3, #127	; 0x7f
 800b2c6:	d842      	bhi.n	800b34e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b2c8:	4925      	ldr	r1, [pc, #148]	; (800b360 <I2C_GetTiming+0xfc>)
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4413      	add	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	440b      	add	r3, r1
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b2da:	4821      	ldr	r0, [pc, #132]	; (800b360 <I2C_GetTiming+0xfc>)
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4403      	add	r3, r0
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	051b      	lsls	r3, r3, #20
 800b2ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b2f2:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b2f4:	481a      	ldr	r0, [pc, #104]	; (800b360 <I2C_GetTiming+0xfc>)
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4403      	add	r3, r0
 800b302:	3308      	adds	r3, #8
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	041b      	lsls	r3, r3, #16
 800b308:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b30c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800b30e:	4814      	ldr	r0, [pc, #80]	; (800b360 <I2C_GetTiming+0xfc>)
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	4613      	mov	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	4403      	add	r3, r0
 800b31c:	330c      	adds	r3, #12
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	021b      	lsls	r3, r3, #8
 800b322:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b324:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800b326:	480e      	ldr	r0, [pc, #56]	; (800b360 <I2C_GetTiming+0xfc>)
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	4613      	mov	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	4413      	add	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4403      	add	r3, r0
 800b334:	3310      	adds	r3, #16
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b33a:	430b      	orrs	r3, r1
 800b33c:	617b      	str	r3, [r7, #20]
        }
        break;
 800b33e:	e006      	b.n	800b34e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	3301      	adds	r3, #1
 800b344:	613b      	str	r3, [r7, #16]
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d99b      	bls.n	800b284 <I2C_GetTiming+0x20>
 800b34c:	e000      	b.n	800b350 <I2C_GetTiming+0xec>
        break;
 800b34e:	bf00      	nop
      }
    }
  }

  return ret;
 800b350:	697b      	ldr	r3, [r7, #20]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3718      	adds	r7, #24
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	0802ed1c 	.word	0x0802ed1c
 800b360:	2400d018 	.word	0x2400d018

0800b364 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b364:	b480      	push	{r7}
 800b366:	b08f      	sub	sp, #60	; 0x3c
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b36e:	2310      	movs	r3, #16
 800b370:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	085a      	lsrs	r2, r3, #1
 800b376:	4b6e      	ldr	r3, [pc, #440]	; (800b530 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800b378:	4413      	add	r3, r2
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b380:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b382:	2332      	movs	r3, #50	; 0x32
 800b384:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800b386:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b38a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b38c:	4a69      	ldr	r2, [pc, #420]	; (800b534 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	212c      	movs	r1, #44	; 0x2c
 800b392:	fb01 f303 	mul.w	r3, r1, r3
 800b396:	4413      	add	r3, r2
 800b398:	3324      	adds	r3, #36	; 0x24
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4618      	mov	r0, r3
 800b39e:	4a65      	ldr	r2, [pc, #404]	; (800b534 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	212c      	movs	r1, #44	; 0x2c
 800b3a4:	fb01 f303 	mul.w	r3, r1, r3
 800b3a8:	4413      	add	r3, r2
 800b3aa:	330c      	adds	r3, #12
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b3b0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b3b2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b3b4:	495f      	ldr	r1, [pc, #380]	; (800b534 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	202c      	movs	r0, #44	; 0x2c
 800b3ba:	fb00 f303 	mul.w	r3, r0, r3
 800b3be:	440b      	add	r3, r1
 800b3c0:	3328      	adds	r3, #40	; 0x28
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3303      	adds	r3, #3
 800b3c6:	69f9      	ldr	r1, [r7, #28]
 800b3c8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b3d0:	4a58      	ldr	r2, [pc, #352]	; (800b534 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	212c      	movs	r1, #44	; 0x2c
 800b3d6:	fb01 f303 	mul.w	r3, r1, r3
 800b3da:	4413      	add	r3, r2
 800b3dc:	3310      	adds	r3, #16
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	4a54      	ldr	r2, [pc, #336]	; (800b534 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	212c      	movs	r1, #44	; 0x2c
 800b3e8:	fb01 f303 	mul.w	r3, r1, r3
 800b3ec:	4413      	add	r3, r2
 800b3ee:	3320      	adds	r3, #32
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b3f4:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b3f6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b3f8:	494e      	ldr	r1, [pc, #312]	; (800b534 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	202c      	movs	r0, #44	; 0x2c
 800b3fe:	fb00 f303 	mul.w	r3, r0, r3
 800b402:	440b      	add	r3, r1
 800b404:	3328      	adds	r3, #40	; 0x28
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	3304      	adds	r3, #4
 800b40a:	69f9      	ldr	r1, [r7, #28]
 800b40c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800b414:	4a47      	ldr	r2, [pc, #284]	; (800b534 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	212c      	movs	r1, #44	; 0x2c
 800b41a:	fb01 f303 	mul.w	r3, r1, r3
 800b41e:	4413      	add	r3, r2
 800b420:	3320      	adds	r3, #32
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4618      	mov	r0, r3
 800b426:	4a43      	ldr	r2, [pc, #268]	; (800b534 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	212c      	movs	r1, #44	; 0x2c
 800b42c:	fb01 f303 	mul.w	r3, r1, r3
 800b430:	4413      	add	r3, r2
 800b432:	3314      	adds	r3, #20
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4403      	add	r3, r0
 800b438:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	dc01      	bgt.n	800b444 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	2b00      	cmp	r3, #0
 800b448:	dc01      	bgt.n	800b44e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b44e:	2300      	movs	r3, #0
 800b450:	62bb      	str	r3, [r7, #40]	; 0x28
 800b452:	e062      	b.n	800b51a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b454:	2300      	movs	r3, #0
 800b456:	627b      	str	r3, [r7, #36]	; 0x24
 800b458:	e059      	b.n	800b50e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	3301      	adds	r3, #1
 800b45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b460:	3201      	adds	r2, #1
 800b462:	fb03 f202 	mul.w	r2, r3, r2
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	fb02 f303 	mul.w	r3, r2, r3
 800b46c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	429a      	cmp	r2, r3
 800b474:	d348      	bcc.n	800b508 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b476:	2300      	movs	r3, #0
 800b478:	623b      	str	r3, [r7, #32]
 800b47a:	e042      	b.n	800b502 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	3301      	adds	r3, #1
 800b480:	6a3a      	ldr	r2, [r7, #32]
 800b482:	fb03 f202 	mul.w	r2, r3, r2
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	fb02 f303 	mul.w	r3, r2, r3
 800b48c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	429a      	cmp	r2, r3
 800b494:	d332      	bcc.n	800b4fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d82e      	bhi.n	800b4fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800b49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d02a      	beq.n	800b4fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800b4a6:	4b24      	ldr	r3, [pc, #144]	; (800b538 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	4924      	ldr	r1, [pc, #144]	; (800b53c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800b4ba:	4b1f      	ldr	r3, [pc, #124]	; (800b538 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	491f      	ldr	r1, [pc, #124]	; (800b53c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	440b      	add	r3, r1
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ce:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800b4d0:	4b19      	ldr	r3, [pc, #100]	; (800b538 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	4919      	ldr	r1, [pc, #100]	; (800b53c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	440b      	add	r3, r1
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	6a3a      	ldr	r2, [r7, #32]
 800b4e4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800b4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e8:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800b4ea:	4b13      	ldr	r3, [pc, #76]	; (800b538 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	4a11      	ldr	r2, [pc, #68]	; (800b538 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b4f2:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800b4f4:	4b10      	ldr	r3, [pc, #64]	; (800b538 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b7f      	cmp	r3, #127	; 0x7f
 800b4fa:	d812      	bhi.n	800b522 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	3301      	adds	r3, #1
 800b500:	623b      	str	r3, [r7, #32]
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	2b0f      	cmp	r3, #15
 800b506:	d9b9      	bls.n	800b47c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	3301      	adds	r3, #1
 800b50c:	627b      	str	r3, [r7, #36]	; 0x24
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	2b0f      	cmp	r3, #15
 800b512:	d9a2      	bls.n	800b45a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b516:	3301      	adds	r3, #1
 800b518:	62bb      	str	r3, [r7, #40]	; 0x28
 800b51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51c:	2b0f      	cmp	r3, #15
 800b51e:	d999      	bls.n	800b454 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800b520:	e000      	b.n	800b524 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800b522:	bf00      	nop
          }
        }
      }
    }
  }
}
 800b524:	373c      	adds	r7, #60	; 0x3c
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	3b9aca00 	.word	0x3b9aca00
 800b534:	0802ed1c 	.word	0x0802ed1c
 800b538:	2400da18 	.word	0x2400da18
 800b53c:	2400d018 	.word	0x2400d018

0800b540 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b540:	b480      	push	{r7}
 800b542:	b093      	sub	sp, #76	; 0x4c
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295
 800b54e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	085a      	lsrs	r2, r3, #1
 800b554:	4b7a      	ldr	r3, [pc, #488]	; (800b740 <I2C_Compute_SCLL_SCLH+0x200>)
 800b556:	4413      	add	r3, r2
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b55e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800b560:	4a78      	ldr	r2, [pc, #480]	; (800b744 <I2C_Compute_SCLL_SCLH+0x204>)
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	212c      	movs	r1, #44	; 0x2c
 800b566:	fb01 f303 	mul.w	r3, r1, r3
 800b56a:	4413      	add	r3, r2
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	085a      	lsrs	r2, r3, #1
 800b570:	4b73      	ldr	r3, [pc, #460]	; (800b740 <I2C_Compute_SCLL_SCLH+0x200>)
 800b572:	4413      	add	r3, r2
 800b574:	4973      	ldr	r1, [pc, #460]	; (800b744 <I2C_Compute_SCLL_SCLH+0x204>)
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	202c      	movs	r0, #44	; 0x2c
 800b57a:	fb00 f202 	mul.w	r2, r0, r2
 800b57e:	440a      	add	r2, r1
 800b580:	6812      	ldr	r2, [r2, #0]
 800b582:	fbb3 f3f2 	udiv	r3, r3, r2
 800b586:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b588:	2332      	movs	r3, #50	; 0x32
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800b58c:	4a6d      	ldr	r2, [pc, #436]	; (800b744 <I2C_Compute_SCLL_SCLH+0x204>)
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	212c      	movs	r1, #44	; 0x2c
 800b592:	fb01 f303 	mul.w	r3, r1, r3
 800b596:	4413      	add	r3, r2
 800b598:	3328      	adds	r3, #40	; 0x28
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59e:	fb02 f303 	mul.w	r3, r2, r3
 800b5a2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800b5a4:	4a67      	ldr	r2, [pc, #412]	; (800b744 <I2C_Compute_SCLL_SCLH+0x204>)
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	212c      	movs	r1, #44	; 0x2c
 800b5aa:	fb01 f303 	mul.w	r3, r1, r3
 800b5ae:	4413      	add	r3, r2
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a62      	ldr	r2, [pc, #392]	; (800b740 <I2C_Compute_SCLL_SCLH+0x200>)
 800b5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ba:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800b5bc:	4a61      	ldr	r2, [pc, #388]	; (800b744 <I2C_Compute_SCLL_SCLH+0x204>)
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	212c      	movs	r1, #44	; 0x2c
 800b5c2:	fb01 f303 	mul.w	r3, r1, r3
 800b5c6:	4413      	add	r3, r2
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a5c      	ldr	r2, [pc, #368]	; (800b740 <I2C_Compute_SCLL_SCLH+0x200>)
 800b5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800b5d8:	2300      	movs	r3, #0
 800b5da:	637b      	str	r3, [r7, #52]	; 0x34
 800b5dc:	e0a3      	b.n	800b726 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800b5de:	495a      	ldr	r1, [pc, #360]	; (800b748 <I2C_Compute_SCLL_SCLH+0x208>)
 800b5e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4413      	add	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	440b      	add	r3, r1
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	1c5a      	adds	r2, r3, #1
 800b5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f2:	fb02 f303 	mul.w	r3, r2, r3
 800b5f6:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5fc:	e08c      	b.n	800b718 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800b5fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	441a      	add	r2, r3
 800b604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b606:	3301      	adds	r3, #1
 800b608:	6979      	ldr	r1, [r7, #20]
 800b60a:	fb03 f101 	mul.w	r1, r3, r1
 800b60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	440b      	add	r3, r1
 800b614:	4413      	add	r3, r2
 800b616:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800b618:	4a4a      	ldr	r2, [pc, #296]	; (800b744 <I2C_Compute_SCLL_SCLH+0x204>)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	212c      	movs	r1, #44	; 0x2c
 800b61e:	fb01 f303 	mul.w	r3, r1, r3
 800b622:	4413      	add	r3, r2
 800b624:	3318      	adds	r3, #24
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d971      	bls.n	800b712 <I2C_Compute_SCLL_SCLH+0x1d2>
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	1ad2      	subs	r2, r2, r3
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	089b      	lsrs	r3, r3, #2
 800b63a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d268      	bcs.n	800b712 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800b640:	2300      	movs	r3, #0
 800b642:	63bb      	str	r3, [r7, #56]	; 0x38
 800b644:	e062      	b.n	800b70c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800b646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	441a      	add	r2, r3
 800b64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64e:	3301      	adds	r3, #1
 800b650:	6979      	ldr	r1, [r7, #20]
 800b652:	fb03 f101 	mul.w	r1, r3, r1
 800b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	440b      	add	r3, r1
 800b65c:	4413      	add	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	441a      	add	r2, r3
 800b666:	4937      	ldr	r1, [pc, #220]	; (800b744 <I2C_Compute_SCLL_SCLH+0x204>)
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	202c      	movs	r0, #44	; 0x2c
 800b66c:	fb00 f303 	mul.w	r3, r0, r3
 800b670:	440b      	add	r3, r1
 800b672:	3320      	adds	r3, #32
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	441a      	add	r2, r3
 800b678:	4932      	ldr	r1, [pc, #200]	; (800b744 <I2C_Compute_SCLL_SCLH+0x204>)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	202c      	movs	r0, #44	; 0x2c
 800b67e:	fb00 f303 	mul.w	r3, r0, r3
 800b682:	440b      	add	r3, r1
 800b684:	3324      	adds	r3, #36	; 0x24
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4413      	add	r3, r2
 800b68a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	429a      	cmp	r2, r3
 800b692:	d338      	bcc.n	800b706 <I2C_Compute_SCLL_SCLH+0x1c6>
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d834      	bhi.n	800b706 <I2C_Compute_SCLL_SCLH+0x1c6>
 800b69c:	4a29      	ldr	r2, [pc, #164]	; (800b744 <I2C_Compute_SCLL_SCLH+0x204>)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	212c      	movs	r1, #44	; 0x2c
 800b6a2:	fb01 f303 	mul.w	r3, r1, r3
 800b6a6:	4413      	add	r3, r2
 800b6a8:	331c      	adds	r3, #28
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d329      	bcc.n	800b706 <I2C_Compute_SCLL_SCLH+0x1c6>
 800b6b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d225      	bcs.n	800b706 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	da02      	bge.n	800b6ce <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	425b      	negs	r3, r3
 800b6cc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d917      	bls.n	800b706 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d8:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800b6da:	491b      	ldr	r1, [pc, #108]	; (800b748 <I2C_Compute_SCLL_SCLH+0x208>)
 800b6dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6de:	4613      	mov	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4413      	add	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	440b      	add	r3, r1
 800b6e8:	3310      	adds	r3, #16
 800b6ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6ec:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800b6ee:	4916      	ldr	r1, [pc, #88]	; (800b748 <I2C_Compute_SCLL_SCLH+0x208>)
 800b6f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	440b      	add	r3, r1
 800b6fc:	330c      	adds	r3, #12
 800b6fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b700:	601a      	str	r2, [r3, #0]
              ret = count;
 800b702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b704:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	3301      	adds	r3, #1
 800b70a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	2bff      	cmp	r3, #255	; 0xff
 800b710:	d999      	bls.n	800b646 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800b712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b714:	3301      	adds	r3, #1
 800b716:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b71a:	2bff      	cmp	r3, #255	; 0xff
 800b71c:	f67f af6f 	bls.w	800b5fe <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800b720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b722:	3301      	adds	r3, #1
 800b724:	637b      	str	r3, [r7, #52]	; 0x34
 800b726:	4b09      	ldr	r3, [pc, #36]	; (800b74c <I2C_Compute_SCLL_SCLH+0x20c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b72c:	429a      	cmp	r2, r3
 800b72e:	f4ff af56 	bcc.w	800b5de <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800b732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b734:	4618      	mov	r0, r3
 800b736:	374c      	adds	r7, #76	; 0x4c
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	3b9aca00 	.word	0x3b9aca00
 800b744:	0802ed1c 	.word	0x0802ed1c
 800b748:	2400d018 	.word	0x2400d018
 800b74c:	2400da18 	.word	0x2400da18

0800b750 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08a      	sub	sp, #40	; 0x28
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b758:	4b31      	ldr	r3, [pc, #196]	; (800b820 <I2C4_MspInit+0xd0>)
 800b75a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b75e:	4a30      	ldr	r2, [pc, #192]	; (800b820 <I2C4_MspInit+0xd0>)
 800b760:	f043 0308 	orr.w	r3, r3, #8
 800b764:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b768:	4b2d      	ldr	r3, [pc, #180]	; (800b820 <I2C4_MspInit+0xd0>)
 800b76a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b76e:	f003 0308 	and.w	r3, r3, #8
 800b772:	613b      	str	r3, [r7, #16]
 800b774:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b776:	4b2a      	ldr	r3, [pc, #168]	; (800b820 <I2C4_MspInit+0xd0>)
 800b778:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b77c:	4a28      	ldr	r2, [pc, #160]	; (800b820 <I2C4_MspInit+0xd0>)
 800b77e:	f043 0308 	orr.w	r3, r3, #8
 800b782:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b786:	4b26      	ldr	r3, [pc, #152]	; (800b820 <I2C4_MspInit+0xd0>)
 800b788:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b78c:	f003 0308 	and.w	r3, r3, #8
 800b790:	60fb      	str	r3, [r7, #12]
 800b792:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800b794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b798:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b79a:	2312      	movs	r3, #18
 800b79c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800b7a6:	2304      	movs	r3, #4
 800b7a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b7aa:	f107 0314 	add.w	r3, r7, #20
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	481c      	ldr	r0, [pc, #112]	; (800b824 <I2C4_MspInit+0xd4>)
 800b7b2:	f001 fec9 	bl	800d548 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800b7b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b7bc:	2312      	movs	r3, #18
 800b7be:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800b7c8:	2304      	movs	r3, #4
 800b7ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800b7cc:	f107 0314 	add.w	r3, r7, #20
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4814      	ldr	r0, [pc, #80]	; (800b824 <I2C4_MspInit+0xd4>)
 800b7d4:	f001 feb8 	bl	800d548 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800b7d8:	4b11      	ldr	r3, [pc, #68]	; (800b820 <I2C4_MspInit+0xd0>)
 800b7da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b7de:	4a10      	ldr	r2, [pc, #64]	; (800b820 <I2C4_MspInit+0xd0>)
 800b7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7e4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800b7e8:	4b0d      	ldr	r3, [pc, #52]	; (800b820 <I2C4_MspInit+0xd0>)
 800b7ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7f2:	60bb      	str	r3, [r7, #8]
 800b7f4:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800b7f6:	4b0a      	ldr	r3, [pc, #40]	; (800b820 <I2C4_MspInit+0xd0>)
 800b7f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7fc:	4a08      	ldr	r2, [pc, #32]	; (800b820 <I2C4_MspInit+0xd0>)
 800b7fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b802:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800b806:	4b06      	ldr	r3, [pc, #24]	; (800b820 <I2C4_MspInit+0xd0>)
 800b808:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b80c:	4a04      	ldr	r2, [pc, #16]	; (800b820 <I2C4_MspInit+0xd0>)
 800b80e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b812:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800b816:	bf00      	nop
 800b818:	3728      	adds	r7, #40	; 0x28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	58024400 	.word	0x58024400
 800b824:	58020c00 	.word	0x58020c00

0800b828 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800b830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b834:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	4619      	mov	r1, r3
 800b83a:	480b      	ldr	r0, [pc, #44]	; (800b868 <I2C4_MspDeInit+0x40>)
 800b83c:	f002 f834 	bl	800d8a8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800b840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b844:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	4619      	mov	r1, r3
 800b84a:	4807      	ldr	r0, [pc, #28]	; (800b868 <I2C4_MspDeInit+0x40>)
 800b84c:	f002 f82c 	bl	800d8a8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800b850:	4b06      	ldr	r3, [pc, #24]	; (800b86c <I2C4_MspDeInit+0x44>)
 800b852:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b856:	4a05      	ldr	r2, [pc, #20]	; (800b86c <I2C4_MspDeInit+0x44>)
 800b858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b85c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800b860:	bf00      	nop
 800b862:	3720      	adds	r7, #32
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	58020c00 	.word	0x58020c00
 800b86c:	58024400 	.word	0x58024400

0800b870 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af04      	add	r7, sp, #16
 800b876:	607b      	str	r3, [r7, #4]
 800b878:	4603      	mov	r3, r0
 800b87a:	81fb      	strh	r3, [r7, #14]
 800b87c:	460b      	mov	r3, r1
 800b87e:	81bb      	strh	r3, [r7, #12]
 800b880:	4613      	mov	r3, r2
 800b882:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800b884:	8978      	ldrh	r0, [r7, #10]
 800b886:	89ba      	ldrh	r2, [r7, #12]
 800b888:	89f9      	ldrh	r1, [r7, #14]
 800b88a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b88e:	9302      	str	r3, [sp, #8]
 800b890:	8b3b      	ldrh	r3, [r7, #24]
 800b892:	9301      	str	r3, [sp, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	4603      	mov	r3, r0
 800b89a:	4807      	ldr	r0, [pc, #28]	; (800b8b8 <I2C4_WriteReg+0x48>)
 800b89c:	f002 fa3e 	bl	800dd1c <HAL_I2C_Mem_Write>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d101      	bne.n	800b8aa <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	e001      	b.n	800b8ae <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800b8aa:	f06f 0307 	mvn.w	r3, #7
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	2400da1c 	.word	0x2400da1c

0800b8bc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af04      	add	r7, sp, #16
 800b8c2:	607b      	str	r3, [r7, #4]
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	81fb      	strh	r3, [r7, #14]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	81bb      	strh	r3, [r7, #12]
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800b8d0:	8978      	ldrh	r0, [r7, #10]
 800b8d2:	89ba      	ldrh	r2, [r7, #12]
 800b8d4:	89f9      	ldrh	r1, [r7, #14]
 800b8d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8da:	9302      	str	r3, [sp, #8]
 800b8dc:	8b3b      	ldrh	r3, [r7, #24]
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	4807      	ldr	r0, [pc, #28]	; (800b904 <I2C4_ReadReg+0x48>)
 800b8e8:	f002 fb2c 	bl	800df44 <HAL_I2C_Mem_Read>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	e001      	b.n	800b8fa <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800b8f6:	f06f 0307 	mvn.w	r3, #7
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	2400da1c 	.word	0x2400da1c

0800b908 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b094      	sub	sp, #80	; 0x50
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b912:	2300      	movs	r3, #0
 800b914:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d003      	beq.n	800b924 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b91c:	f06f 0301 	mvn.w	r3, #1
 800b920:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b922:	e071      	b.n	800ba08 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800b924:	4a3b      	ldr	r2, [pc, #236]	; (800ba14 <BSP_OSPI_NOR_Init+0x10c>)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d16b      	bne.n	800ba08 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	225c      	movs	r2, #92	; 0x5c
 800b934:	fb02 f303 	mul.w	r3, r2, r3
 800b938:	4a37      	ldr	r2, [pc, #220]	; (800ba18 <BSP_OSPI_NOR_Init+0x110>)
 800b93a:	4413      	add	r3, r2
 800b93c:	4618      	mov	r0, r3
 800b93e:	f000 fa09 	bl	800bd54 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800b942:	f107 031c 	add.w	r3, r7, #28
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fee8 	bl	800a71c <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 800b94c:	2303      	movs	r3, #3
 800b94e:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b956:	fa93 f3a3 	rbit	r3, r3
 800b95a:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b95c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b95e:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 800b966:	2320      	movs	r3, #32
 800b968:	e003      	b.n	800b972 <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 800b96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b96c:	fab3 f383 	clz	r3, r3
 800b970:	b2db      	uxtb	r3, r3
 800b972:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800b974:	2300      	movs	r3, #0
 800b976:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	785b      	ldrb	r3, [r3, #1]
 800b97c:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	225c      	movs	r2, #92	; 0x5c
 800b982:	fb02 f303 	mul.w	r3, r2, r3
 800b986:	4a24      	ldr	r2, [pc, #144]	; (800ba18 <BSP_OSPI_NOR_Init+0x110>)
 800b988:	4413      	add	r3, r2
 800b98a:	f107 020c 	add.w	r2, r7, #12
 800b98e:	4611      	mov	r1, r2
 800b990:	4618      	mov	r0, r3
 800b992:	f000 f895 	bl	800bac0 <MX_OSPI_NOR_Init>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800b99c:	f06f 0303 	mvn.w	r3, #3
 800b9a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9a2:	e031      	b.n	800ba08 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 fb7f 	bl	800c0a8 <OSPI_NOR_ResetMemory>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9b0:	f06f 0304 	mvn.w	r3, #4
 800b9b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9b6:	e027      	b.n	800ba08 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	225c      	movs	r2, #92	; 0x5c
 800b9bc:	fb02 f303 	mul.w	r3, r2, r3
 800b9c0:	4a15      	ldr	r2, [pc, #84]	; (800ba18 <BSP_OSPI_NOR_Init+0x110>)
 800b9c2:	1898      	adds	r0, r3, r2
 800b9c4:	4a13      	ldr	r2, [pc, #76]	; (800ba14 <BSP_OSPI_NOR_Init+0x10c>)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	4413      	add	r3, r2
 800b9cc:	7859      	ldrb	r1, [r3, #1]
 800b9ce:	4a11      	ldr	r2, [pc, #68]	; (800ba14 <BSP_OSPI_NOR_Init+0x10c>)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	00db      	lsls	r3, r3, #3
 800b9d4:	4413      	add	r3, r2
 800b9d6:	789b      	ldrb	r3, [r3, #2]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	f7fe fece 	bl	800a77a <MX25LM51245G_AutoPollingMemReady>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d003      	beq.n	800b9ec <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9e4:	f06f 0304 	mvn.w	r3, #4
 800b9e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9ea:	e00d      	b.n	800ba08 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	7819      	ldrb	r1, [r3, #0]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	785b      	ldrb	r3, [r3, #1]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f936 	bl	800bc68 <BSP_OSPI_NOR_ConfigFlash>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d002      	beq.n	800ba08 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba02:	f06f 0304 	mvn.w	r3, #4
 800ba06:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 800ba08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3750      	adds	r7, #80	; 0x50
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	2400dacc 	.word	0x2400dacc
 800ba18:	2400da70 	.word	0x2400da70

0800ba1c <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ba24:	2300      	movs	r3, #0
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ba2e:	f06f 0301 	mvn.w	r3, #1
 800ba32:	60fb      	str	r3, [r7, #12]
 800ba34:	e03a      	b.n	800baac <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800ba36:	4a20      	ldr	r2, [pc, #128]	; (800bab8 <BSP_OSPI_NOR_DeInit+0x9c>)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d108      	bne.n	800ba54 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f8da 	bl	800bbfc <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d002      	beq.n	800ba54 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba4e:	f06f 0304 	mvn.w	r3, #4
 800ba52:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d128      	bne.n	800baac <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800ba5a:	4a17      	ldr	r2, [pc, #92]	; (800bab8 <BSP_OSPI_NOR_DeInit+0x9c>)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2100      	movs	r1, #0
 800ba60:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800ba64:	4a14      	ldr	r2, [pc, #80]	; (800bab8 <BSP_OSPI_NOR_DeInit+0x9c>)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	00db      	lsls	r3, r3, #3
 800ba6a:	4413      	add	r3, r2
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800ba70:	4a11      	ldr	r2, [pc, #68]	; (800bab8 <BSP_OSPI_NOR_DeInit+0x9c>)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	00db      	lsls	r3, r3, #3
 800ba76:	4413      	add	r3, r2
 800ba78:	2200      	movs	r2, #0
 800ba7a:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	225c      	movs	r2, #92	; 0x5c
 800ba80:	fb02 f303 	mul.w	r3, r2, r3
 800ba84:	4a0d      	ldr	r2, [pc, #52]	; (800babc <BSP_OSPI_NOR_DeInit+0xa0>)
 800ba86:	4413      	add	r3, r2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f000 fab3 	bl	800bff4 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	225c      	movs	r2, #92	; 0x5c
 800ba92:	fb02 f303 	mul.w	r3, r2, r3
 800ba96:	4a09      	ldr	r2, [pc, #36]	; (800babc <BSP_OSPI_NOR_DeInit+0xa0>)
 800ba98:	4413      	add	r3, r2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f005 fe98 	bl	80117d0 <HAL_OSPI_DeInit>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d002      	beq.n	800baac <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800baa6:	f06f 0303 	mvn.w	r3, #3
 800baaa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800baac:	68fb      	ldr	r3, [r7, #12]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	2400dacc 	.word	0x2400dacc
 800babc:	2400da70 	.word	0x2400da70

0800bac0 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a20      	ldr	r2, [pc, #128]	; (800bb50 <MX_OSPI_NOR_Init+0x90>)
 800bace:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2204      	movs	r2, #4
 800bad4:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2202      	movs	r2, #2
 800bae8:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	689a      	ldr	r2, [r3, #8]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2208      	movs	r2, #8
 800bb16:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d108      	bne.n	800bb32 <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb26:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb2e:	62da      	str	r2, [r3, #44]	; 0x2c
 800bb30:	e005      	b.n	800bb3e <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f005 fd8a 	bl	8011658 <HAL_OSPI_Init>
 800bb44:	4603      	mov	r3, r0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	52005000 	.word	0x52005000

0800bb54 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bb66:	f06f 0301 	mvn.w	r3, #1
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	e03d      	b.n	800bbea <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800bb6e:	4a21      	ldr	r2, [pc, #132]	; (800bbf4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	4413      	add	r3, r2
 800bb76:	789b      	ldrb	r3, [r3, #2]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d11b      	bne.n	800bbb4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	225c      	movs	r2, #92	; 0x5c
 800bb80:	fb02 f303 	mul.w	r3, r2, r3
 800bb84:	4a1c      	ldr	r2, [pc, #112]	; (800bbf8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800bb86:	1898      	adds	r0, r3, r2
 800bb88:	4a1a      	ldr	r2, [pc, #104]	; (800bbf4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	00db      	lsls	r3, r3, #3
 800bb8e:	4413      	add	r3, r2
 800bb90:	785b      	ldrb	r3, [r3, #1]
 800bb92:	2201      	movs	r2, #1
 800bb94:	4619      	mov	r1, r3
 800bb96:	f7fe fe9d 	bl	800a8d4 <MX25LM51245G_EnableMemoryMappedModeSTR>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d003      	beq.n	800bba8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bba0:	f06f 0304 	mvn.w	r3, #4
 800bba4:	60fb      	str	r3, [r7, #12]
 800bba6:	e020      	b.n	800bbea <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800bba8:	4a12      	ldr	r2, [pc, #72]	; (800bbf4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2102      	movs	r1, #2
 800bbae:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800bbb2:	e01a      	b.n	800bbea <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	225c      	movs	r2, #92	; 0x5c
 800bbb8:	fb02 f303 	mul.w	r3, r2, r3
 800bbbc:	4a0e      	ldr	r2, [pc, #56]	; (800bbf8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800bbbe:	441a      	add	r2, r3
 800bbc0:	490c      	ldr	r1, [pc, #48]	; (800bbf4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	00db      	lsls	r3, r3, #3
 800bbc6:	440b      	add	r3, r1
 800bbc8:	785b      	ldrb	r3, [r3, #1]
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4610      	mov	r0, r2
 800bbce:	f7fe ff2b 	bl	800aa28 <MX25LM51245G_EnableMemoryMappedModeDTR>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bbd8:	f06f 0304 	mvn.w	r3, #4
 800bbdc:	60fb      	str	r3, [r7, #12]
 800bbde:	e004      	b.n	800bbea <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800bbe0:	4a04      	ldr	r2, [pc, #16]	; (800bbf4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2102      	movs	r1, #2
 800bbe6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800bbea:	68fb      	ldr	r3, [r7, #12]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	2400dacc 	.word	0x2400dacc
 800bbf8:	2400da70 	.word	0x2400da70

0800bbfc <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bc04:	2300      	movs	r3, #0
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d003      	beq.n	800bc16 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bc0e:	f06f 0301 	mvn.w	r3, #1
 800bc12:	60fb      	str	r3, [r7, #12]
 800bc14:	e01e      	b.n	800bc54 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800bc16:	4a12      	ldr	r2, [pc, #72]	; (800bc60 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d003      	beq.n	800bc2a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800bc22:	f06f 031a 	mvn.w	r3, #26
 800bc26:	60fb      	str	r3, [r7, #12]
 800bc28:	e014      	b.n	800bc54 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	225c      	movs	r2, #92	; 0x5c
 800bc2e:	fb02 f303 	mul.w	r3, r2, r3
 800bc32:	4a0c      	ldr	r2, [pc, #48]	; (800bc64 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 800bc34:	4413      	add	r3, r2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f006 f9fc 	bl	8012034 <HAL_OSPI_Abort>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d003      	beq.n	800bc4a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800bc42:	f06f 0303 	mvn.w	r3, #3
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	e004      	b.n	800bc54 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800bc4a:	4a05      	ldr	r2, [pc, #20]	; (800bc60 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2101      	movs	r1, #1
 800bc50:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 800bc54:	68fb      	ldr	r3, [r7, #12]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	2400dacc 	.word	0x2400dacc
 800bc64:	2400da70 	.word	0x2400da70

0800bc68 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	70fb      	strb	r3, [r7, #3]
 800bc74:	4613      	mov	r3, r2
 800bc76:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bc82:	f06f 0301 	mvn.w	r3, #1
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	e05d      	b.n	800bd46 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800bc8a:	4a31      	ldr	r2, [pc, #196]	; (800bd50 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d103      	bne.n	800bc9e <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800bc96:	f06f 0319 	mvn.w	r3, #25
 800bc9a:	60fb      	str	r3, [r7, #12]
 800bc9c:	e053      	b.n	800bd46 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800bc9e:	4a2c      	ldr	r2, [pc, #176]	; (800bd50 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	00db      	lsls	r3, r3, #3
 800bca4:	4413      	add	r3, r2
 800bca6:	785b      	ldrb	r3, [r3, #1]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d125      	bne.n	800bcf8 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800bcac:	78fb      	ldrb	r3, [r7, #3]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d107      	bne.n	800bcc2 <BSP_OSPI_NOR_ConfigFlash+0x5a>
 800bcb2:	4a27      	ldr	r2, [pc, #156]	; (800bd50 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	4413      	add	r3, r2
 800bcba:	789b      	ldrb	r3, [r3, #2]
 800bcbc:	78ba      	ldrb	r2, [r7, #2]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d02a      	beq.n	800bd18 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fbfc 	bl	800c4c0 <OSPI_NOR_ExitOPIMode>
 800bcc8:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d123      	bne.n	800bd18 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d120      	bne.n	800bd18 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800bcd6:	4a1e      	ldr	r2, [pc, #120]	; (800bd50 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	4413      	add	r3, r2
 800bcde:	789b      	ldrb	r3, [r3, #2]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d104      	bne.n	800bcee <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fa6f 	bl	800c1c8 <OSPI_NOR_EnterDOPIMode>
 800bcea:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800bcec:	e014      	b.n	800bd18 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fb3a 	bl	800c368 <OSPI_NOR_EnterSOPIMode>
 800bcf4:	60f8      	str	r0, [r7, #12]
      break;
 800bcf6:	e00f      	b.n	800bd18 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d10e      	bne.n	800bd1c <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800bcfe:	78bb      	ldrb	r3, [r7, #2]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d104      	bne.n	800bd0e <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fb2f 	bl	800c368 <OSPI_NOR_EnterSOPIMode>
 800bd0a:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 800bd0c:	e006      	b.n	800bd1c <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fa5a 	bl	800c1c8 <OSPI_NOR_EnterDOPIMode>
 800bd14:	60f8      	str	r0, [r7, #12]
      break;
 800bd16:	e001      	b.n	800bd1c <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 800bd18:	bf00      	nop
 800bd1a:	e000      	b.n	800bd1e <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 800bd1c:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d110      	bne.n	800bd46 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800bd24:	4a0a      	ldr	r2, [pc, #40]	; (800bd50 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2101      	movs	r1, #1
 800bd2a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800bd2e:	4a08      	ldr	r2, [pc, #32]	; (800bd50 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	00db      	lsls	r3, r3, #3
 800bd34:	4413      	add	r3, r2
 800bd36:	78fa      	ldrb	r2, [r7, #3]
 800bd38:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800bd3a:	4a05      	ldr	r2, [pc, #20]	; (800bd50 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	4413      	add	r3, r2
 800bd42:	78ba      	ldrb	r2, [r7, #2]
 800bd44:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 800bd46:	68fb      	ldr	r3, [r7, #12]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	2400dacc 	.word	0x2400dacc

0800bd54 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b094      	sub	sp, #80	; 0x50
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800bd5c:	4b9e      	ldr	r3, [pc, #632]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bd5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bd62:	4a9d      	ldr	r2, [pc, #628]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bd64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd68:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800bd6c:	4b9a      	ldr	r3, [pc, #616]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bd6e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bd72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd76:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800bd7a:	4b97      	ldr	r3, [pc, #604]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bd7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd7e:	4a96      	ldr	r2, [pc, #600]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bd80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd84:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800bd86:	4b94      	ldr	r3, [pc, #592]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bd88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd8a:	4a93      	ldr	r2, [pc, #588]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bd8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd90:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 800bd92:	4b91      	ldr	r3, [pc, #580]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bd94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bd98:	4a8f      	ldr	r2, [pc, #572]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bd9a:	f043 0302 	orr.w	r3, r3, #2
 800bd9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bda2:	4b8d      	ldr	r3, [pc, #564]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bda4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bda8:	f003 0302 	and.w	r3, r3, #2
 800bdac:	637b      	str	r3, [r7, #52]	; 0x34
 800bdae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 800bdb0:	4b89      	ldr	r3, [pc, #548]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bdb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bdb6:	4a88      	ldr	r2, [pc, #544]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bdb8:	f043 0304 	orr.w	r3, r3, #4
 800bdbc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bdc0:	4b85      	ldr	r3, [pc, #532]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bdc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bdc6:	f003 0304 	and.w	r3, r3, #4
 800bdca:	633b      	str	r3, [r7, #48]	; 0x30
 800bdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800bdce:	4b82      	ldr	r3, [pc, #520]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bdd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bdd4:	4a80      	ldr	r2, [pc, #512]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bdd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdda:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bdde:	4b7e      	ldr	r3, [pc, #504]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bde0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bde4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bde8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800bdec:	4b7a      	ldr	r3, [pc, #488]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bdee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bdf2:	4a79      	ldr	r2, [pc, #484]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bdf4:	f043 0308 	orr.w	r3, r3, #8
 800bdf8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bdfc:	4b76      	ldr	r3, [pc, #472]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bdfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be02:	f003 0308 	and.w	r3, r3, #8
 800be06:	62bb      	str	r3, [r7, #40]	; 0x28
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 800be0a:	4b73      	ldr	r3, [pc, #460]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be10:	4a71      	ldr	r2, [pc, #452]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be12:	f043 0320 	orr.w	r3, r3, #32
 800be16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800be1a:	4b6f      	ldr	r3, [pc, #444]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be20:	f003 0320 	and.w	r3, r3, #32
 800be24:	627b      	str	r3, [r7, #36]	; 0x24
 800be26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 800be28:	4b6b      	ldr	r3, [pc, #428]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be2e:	4a6a      	ldr	r2, [pc, #424]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be30:	f043 0320 	orr.w	r3, r3, #32
 800be34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800be38:	4b67      	ldr	r3, [pc, #412]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be3e:	f003 0320 	and.w	r3, r3, #32
 800be42:	623b      	str	r3, [r7, #32]
 800be44:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 800be46:	4b64      	ldr	r3, [pc, #400]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be4c:	4a62      	ldr	r2, [pc, #392]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be4e:	f043 0320 	orr.w	r3, r3, #32
 800be52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800be56:	4b60      	ldr	r3, [pc, #384]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be5c:	f003 0320 	and.w	r3, r3, #32
 800be60:	61fb      	str	r3, [r7, #28]
 800be62:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 800be64:	4b5c      	ldr	r3, [pc, #368]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be6a:	4a5b      	ldr	r2, [pc, #364]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be6c:	f043 0304 	orr.w	r3, r3, #4
 800be70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800be74:	4b58      	ldr	r3, [pc, #352]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be7a:	f003 0304 	and.w	r3, r3, #4
 800be7e:	61bb      	str	r3, [r7, #24]
 800be80:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 800be82:	4b55      	ldr	r3, [pc, #340]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be88:	4a53      	ldr	r2, [pc, #332]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800be92:	4b51      	ldr	r3, [pc, #324]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800be94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 800bea0:	4b4d      	ldr	r3, [pc, #308]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bea2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bea6:	4a4c      	ldr	r2, [pc, #304]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800beb0:	4b49      	ldr	r3, [pc, #292]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800beb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800beb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beba:	613b      	str	r3, [r7, #16]
 800bebc:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 800bebe:	4b46      	ldr	r3, [pc, #280]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bec0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bec4:	4a44      	ldr	r2, [pc, #272]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bece:	4b42      	ldr	r3, [pc, #264]	; (800bfd8 <OSPI_NOR_MspInit+0x284>)
 800bed0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800bedc:	2340      	movs	r3, #64	; 0x40
 800bede:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800bee0:	2302      	movs	r3, #2
 800bee2:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800bee4:	2301      	movs	r3, #1
 800bee6:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800bee8:	2303      	movs	r3, #3
 800beea:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800beec:	230a      	movs	r3, #10
 800beee:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800bef0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bef4:	4619      	mov	r1, r3
 800bef6:	4839      	ldr	r0, [pc, #228]	; (800bfdc <OSPI_NOR_MspInit+0x288>)
 800bef8:	f001 fb26 	bl	800d548 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 800befc:	2320      	movs	r3, #32
 800befe:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 800bf00:	230a      	movs	r3, #10
 800bf02:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 800bf04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4835      	ldr	r0, [pc, #212]	; (800bfe0 <OSPI_NOR_MspInit+0x28c>)
 800bf0c:	f001 fb1c 	bl	800d548 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 800bf10:	2304      	movs	r3, #4
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800bf18:	2309      	movs	r3, #9
 800bf1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800bf1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf20:	4619      	mov	r1, r3
 800bf22:	4830      	ldr	r0, [pc, #192]	; (800bfe4 <OSPI_NOR_MspInit+0x290>)
 800bf24:	f001 fb10 	bl	800d548 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 800bf28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800bf2e:	2309      	movs	r3, #9
 800bf30:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800bf32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf36:	4619      	mov	r1, r3
 800bf38:	482b      	ldr	r0, [pc, #172]	; (800bfe8 <OSPI_NOR_MspInit+0x294>)
 800bf3a:	f001 fb05 	bl	800d548 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800bf3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf42:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800bf44:	230a      	movs	r3, #10
 800bf46:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800bf48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	4827      	ldr	r0, [pc, #156]	; (800bfec <OSPI_NOR_MspInit+0x298>)
 800bf50:	f001 fafa 	bl	800d548 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800bf54:	2380      	movs	r3, #128	; 0x80
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800bf58:	230a      	movs	r3, #10
 800bf5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800bf5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf60:	4619      	mov	r1, r3
 800bf62:	4822      	ldr	r0, [pc, #136]	; (800bfec <OSPI_NOR_MspInit+0x298>)
 800bf64:	f001 faf0 	bl	800d548 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800bf68:	2340      	movs	r3, #64	; 0x40
 800bf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800bf6c:	230a      	movs	r3, #10
 800bf6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800bf70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf74:	4619      	mov	r1, r3
 800bf76:	481d      	ldr	r0, [pc, #116]	; (800bfec <OSPI_NOR_MspInit+0x298>)
 800bf78:	f001 fae6 	bl	800d548 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800bf80:	230a      	movs	r3, #10
 800bf82:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800bf84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4815      	ldr	r0, [pc, #84]	; (800bfe0 <OSPI_NOR_MspInit+0x28c>)
 800bf8c:	f001 fadc 	bl	800d548 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800bf90:	2308      	movs	r3, #8
 800bf92:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800bf94:	2309      	movs	r3, #9
 800bf96:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800bf98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4814      	ldr	r0, [pc, #80]	; (800bff0 <OSPI_NOR_MspInit+0x29c>)
 800bfa0:	f001 fad2 	bl	800d548 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800bfa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800bfaa:	2309      	movs	r3, #9
 800bfac:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800bfae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	4809      	ldr	r0, [pc, #36]	; (800bfdc <OSPI_NOR_MspInit+0x288>)
 800bfb6:	f001 fac7 	bl	800d548 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800bfba:	2380      	movs	r3, #128	; 0x80
 800bfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800bfbe:	230a      	movs	r3, #10
 800bfc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800bfc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	4807      	ldr	r0, [pc, #28]	; (800bfe8 <OSPI_NOR_MspInit+0x294>)
 800bfca:	f001 fabd 	bl	800d548 <HAL_GPIO_Init>
}
 800bfce:	bf00      	nop
 800bfd0:	3750      	adds	r7, #80	; 0x50
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	58024400 	.word	0x58024400
 800bfdc:	58021800 	.word	0x58021800
 800bfe0:	58020800 	.word	0x58020800
 800bfe4:	58020400 	.word	0x58020400
 800bfe8:	58020c00 	.word	0x58020c00
 800bfec:	58021400 	.word	0x58021400
 800bff0:	58021c00 	.word	0x58021c00

0800bff4 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800bffc:	2104      	movs	r1, #4
 800bffe:	4823      	ldr	r0, [pc, #140]	; (800c08c <OSPI_NOR_MspDeInit+0x98>)
 800c000:	f001 fc52 	bl	800d8a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800c004:	2120      	movs	r1, #32
 800c006:	4822      	ldr	r0, [pc, #136]	; (800c090 <OSPI_NOR_MspDeInit+0x9c>)
 800c008:	f001 fc4e 	bl	800d8a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 800c00c:	2140      	movs	r1, #64	; 0x40
 800c00e:	4821      	ldr	r0, [pc, #132]	; (800c094 <OSPI_NOR_MspDeInit+0xa0>)
 800c010:	f001 fc4a 	bl	800d8a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800c014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c018:	481f      	ldr	r0, [pc, #124]	; (800c098 <OSPI_NOR_MspDeInit+0xa4>)
 800c01a:	f001 fc45 	bl	800d8a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800c01e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c022:	481e      	ldr	r0, [pc, #120]	; (800c09c <OSPI_NOR_MspDeInit+0xa8>)
 800c024:	f001 fc40 	bl	800d8a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800c028:	2180      	movs	r1, #128	; 0x80
 800c02a:	481c      	ldr	r0, [pc, #112]	; (800c09c <OSPI_NOR_MspDeInit+0xa8>)
 800c02c:	f001 fc3c 	bl	800d8a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800c030:	2140      	movs	r1, #64	; 0x40
 800c032:	481a      	ldr	r0, [pc, #104]	; (800c09c <OSPI_NOR_MspDeInit+0xa8>)
 800c034:	f001 fc38 	bl	800d8a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800c038:	2102      	movs	r1, #2
 800c03a:	4815      	ldr	r0, [pc, #84]	; (800c090 <OSPI_NOR_MspDeInit+0x9c>)
 800c03c:	f001 fc34 	bl	800d8a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800c040:	2108      	movs	r1, #8
 800c042:	4817      	ldr	r0, [pc, #92]	; (800c0a0 <OSPI_NOR_MspDeInit+0xac>)
 800c044:	f001 fc30 	bl	800d8a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800c048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c04c:	4811      	ldr	r0, [pc, #68]	; (800c094 <OSPI_NOR_MspDeInit+0xa0>)
 800c04e:	f001 fc2b 	bl	800d8a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800c052:	2180      	movs	r1, #128	; 0x80
 800c054:	4810      	ldr	r0, [pc, #64]	; (800c098 <OSPI_NOR_MspDeInit+0xa4>)
 800c056:	f001 fc27 	bl	800d8a8 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800c05a:	4b12      	ldr	r3, [pc, #72]	; (800c0a4 <OSPI_NOR_MspDeInit+0xb0>)
 800c05c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c05e:	4a11      	ldr	r2, [pc, #68]	; (800c0a4 <OSPI_NOR_MspDeInit+0xb0>)
 800c060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c064:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800c066:	4b0f      	ldr	r3, [pc, #60]	; (800c0a4 <OSPI_NOR_MspDeInit+0xb0>)
 800c068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c06a:	4a0e      	ldr	r2, [pc, #56]	; (800c0a4 <OSPI_NOR_MspDeInit+0xb0>)
 800c06c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c070:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 800c072:	4b0c      	ldr	r3, [pc, #48]	; (800c0a4 <OSPI_NOR_MspDeInit+0xb0>)
 800c074:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c078:	4a0a      	ldr	r2, [pc, #40]	; (800c0a4 <OSPI_NOR_MspDeInit+0xb0>)
 800c07a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c07e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 800c082:	bf00      	nop
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	58020400 	.word	0x58020400
 800c090:	58020800 	.word	0x58020800
 800c094:	58021800 	.word	0x58021800
 800c098:	58020c00 	.word	0x58020c00
 800c09c:	58021400 	.word	0x58021400
 800c0a0:	58021c00 	.word	0x58021c00
 800c0a4:	58024400 	.word	0x58024400

0800c0a8 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	225c      	movs	r2, #92	; 0x5c
 800c0b8:	fb02 f303 	mul.w	r3, r2, r3
 800c0bc:	4a40      	ldr	r2, [pc, #256]	; (800c1c0 <OSPI_NOR_ResetMemory+0x118>)
 800c0be:	4413      	add	r3, r2
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe ff18 	bl	800aefa <MX25LM51245G_ResetEnable>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d003      	beq.n	800c0d8 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0d0:	f06f 0304 	mvn.w	r3, #4
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	e06d      	b.n	800c1b4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	225c      	movs	r2, #92	; 0x5c
 800c0dc:	fb02 f303 	mul.w	r3, r2, r3
 800c0e0:	4a37      	ldr	r2, [pc, #220]	; (800c1c0 <OSPI_NOR_ResetMemory+0x118>)
 800c0e2:	4413      	add	r3, r2
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe ff5e 	bl	800afaa <MX25LM51245G_ResetMemory>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d003      	beq.n	800c0fc <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0f4:	f06f 0304 	mvn.w	r3, #4
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	e05b      	b.n	800c1b4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	225c      	movs	r2, #92	; 0x5c
 800c100:	fb02 f303 	mul.w	r3, r2, r3
 800c104:	4a2e      	ldr	r2, [pc, #184]	; (800c1c0 <OSPI_NOR_ResetMemory+0x118>)
 800c106:	4413      	add	r3, r2
 800c108:	2200      	movs	r2, #0
 800c10a:	2101      	movs	r1, #1
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fe fef4 	bl	800aefa <MX25LM51245G_ResetEnable>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d003      	beq.n	800c120 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c118:	f06f 0304 	mvn.w	r3, #4
 800c11c:	60fb      	str	r3, [r7, #12]
 800c11e:	e049      	b.n	800c1b4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	225c      	movs	r2, #92	; 0x5c
 800c124:	fb02 f303 	mul.w	r3, r2, r3
 800c128:	4a25      	ldr	r2, [pc, #148]	; (800c1c0 <OSPI_NOR_ResetMemory+0x118>)
 800c12a:	4413      	add	r3, r2
 800c12c:	2200      	movs	r2, #0
 800c12e:	2101      	movs	r1, #1
 800c130:	4618      	mov	r0, r3
 800c132:	f7fe ff3a 	bl	800afaa <MX25LM51245G_ResetMemory>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c13c:	f06f 0304 	mvn.w	r3, #4
 800c140:	60fb      	str	r3, [r7, #12]
 800c142:	e037      	b.n	800c1b4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	225c      	movs	r2, #92	; 0x5c
 800c148:	fb02 f303 	mul.w	r3, r2, r3
 800c14c:	4a1c      	ldr	r2, [pc, #112]	; (800c1c0 <OSPI_NOR_ResetMemory+0x118>)
 800c14e:	4413      	add	r3, r2
 800c150:	2201      	movs	r2, #1
 800c152:	2101      	movs	r1, #1
 800c154:	4618      	mov	r0, r3
 800c156:	f7fe fed0 	bl	800aefa <MX25LM51245G_ResetEnable>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d003      	beq.n	800c168 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c160:	f06f 0304 	mvn.w	r3, #4
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	e025      	b.n	800c1b4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	225c      	movs	r2, #92	; 0x5c
 800c16c:	fb02 f303 	mul.w	r3, r2, r3
 800c170:	4a13      	ldr	r2, [pc, #76]	; (800c1c0 <OSPI_NOR_ResetMemory+0x118>)
 800c172:	4413      	add	r3, r2
 800c174:	2201      	movs	r2, #1
 800c176:	2101      	movs	r1, #1
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fe ff16 	bl	800afaa <MX25LM51245G_ResetMemory>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d003      	beq.n	800c18c <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c184:	f06f 0304 	mvn.w	r3, #4
 800c188:	60fb      	str	r3, [r7, #12]
 800c18a:	e013      	b.n	800c1b4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800c18c:	4a0d      	ldr	r2, [pc, #52]	; (800c1c4 <OSPI_NOR_ResetMemory+0x11c>)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2101      	movs	r1, #1
 800c192:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800c196:	4a0b      	ldr	r2, [pc, #44]	; (800c1c4 <OSPI_NOR_ResetMemory+0x11c>)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	4413      	add	r3, r2
 800c19e:	2200      	movs	r2, #0
 800c1a0:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800c1a2:	4a08      	ldr	r2, [pc, #32]	; (800c1c4 <OSPI_NOR_ResetMemory+0x11c>)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	00db      	lsls	r3, r3, #3
 800c1a8:	4413      	add	r3, r2
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800c1ae:	2064      	movs	r0, #100	; 0x64
 800c1b0:	f000 fd04 	bl	800cbbc <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	2400da70 	.word	0x2400da70
 800c1c4:	2400dacc 	.word	0x2400dacc

0800c1c8 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af02      	add	r7, sp, #8
 800c1ce:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	225c      	movs	r2, #92	; 0x5c
 800c1d8:	fb02 f303 	mul.w	r3, r2, r3
 800c1dc:	4a60      	ldr	r2, [pc, #384]	; (800c360 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c1de:	1898      	adds	r0, r3, r2
 800c1e0:	4a60      	ldr	r2, [pc, #384]	; (800c364 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	4413      	add	r3, r2
 800c1e8:	7859      	ldrb	r1, [r3, #1]
 800c1ea:	4a5e      	ldr	r2, [pc, #376]	; (800c364 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	4413      	add	r3, r2
 800c1f2:	789b      	ldrb	r3, [r3, #2]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	f7fe fc86 	bl	800ab06 <MX25LM51245G_WriteEnable>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d003      	beq.n	800c208 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c200:	f06f 0304 	mvn.w	r3, #4
 800c204:	60fb      	str	r3, [r7, #12]
 800c206:	e0a6      	b.n	800c356 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	225c      	movs	r2, #92	; 0x5c
 800c20c:	fb02 f303 	mul.w	r3, r2, r3
 800c210:	4a53      	ldr	r2, [pc, #332]	; (800c360 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c212:	1898      	adds	r0, r3, r2
 800c214:	4a53      	ldr	r2, [pc, #332]	; (800c364 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	00db      	lsls	r3, r3, #3
 800c21a:	4413      	add	r3, r2
 800c21c:	7859      	ldrb	r1, [r3, #1]
 800c21e:	4a51      	ldr	r2, [pc, #324]	; (800c364 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	4413      	add	r3, r2
 800c226:	789a      	ldrb	r2, [r3, #2]
 800c228:	2307      	movs	r3, #7
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c230:	f7fe fd34 	bl	800ac9c <MX25LM51245G_WriteCfg2Register>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d003      	beq.n	800c242 <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c23a:	f06f 0304 	mvn.w	r3, #4
 800c23e:	60fb      	str	r3, [r7, #12]
 800c240:	e089      	b.n	800c356 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	225c      	movs	r2, #92	; 0x5c
 800c246:	fb02 f303 	mul.w	r3, r2, r3
 800c24a:	4a45      	ldr	r2, [pc, #276]	; (800c360 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c24c:	1898      	adds	r0, r3, r2
 800c24e:	4a45      	ldr	r2, [pc, #276]	; (800c364 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	00db      	lsls	r3, r3, #3
 800c254:	4413      	add	r3, r2
 800c256:	7859      	ldrb	r1, [r3, #1]
 800c258:	4a42      	ldr	r2, [pc, #264]	; (800c364 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	00db      	lsls	r3, r3, #3
 800c25e:	4413      	add	r3, r2
 800c260:	789b      	ldrb	r3, [r3, #2]
 800c262:	461a      	mov	r2, r3
 800c264:	f7fe fc4f 	bl	800ab06 <MX25LM51245G_WriteEnable>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d003      	beq.n	800c276 <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c26e:	f06f 0304 	mvn.w	r3, #4
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	e06f      	b.n	800c356 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	225c      	movs	r2, #92	; 0x5c
 800c27a:	fb02 f303 	mul.w	r3, r2, r3
 800c27e:	4a38      	ldr	r2, [pc, #224]	; (800c360 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c280:	1898      	adds	r0, r3, r2
 800c282:	4a38      	ldr	r2, [pc, #224]	; (800c364 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	00db      	lsls	r3, r3, #3
 800c288:	4413      	add	r3, r2
 800c28a:	7859      	ldrb	r1, [r3, #1]
 800c28c:	4a35      	ldr	r2, [pc, #212]	; (800c364 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	4413      	add	r3, r2
 800c294:	789a      	ldrb	r2, [r3, #2]
 800c296:	2302      	movs	r3, #2
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	2300      	movs	r3, #0
 800c29c:	f7fe fcfe 	bl	800ac9c <MX25LM51245G_WriteCfg2Register>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c2a6:	f06f 0304 	mvn.w	r3, #4
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	e053      	b.n	800c356 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800c2ae:	2028      	movs	r0, #40	; 0x28
 800c2b0:	f000 fc84 	bl	800cbbc <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800c2b4:	4a2a      	ldr	r2, [pc, #168]	; (800c360 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	215c      	movs	r1, #92	; 0x5c
 800c2ba:	fb01 f303 	mul.w	r3, r1, r3
 800c2be:	4413      	add	r3, r2
 800c2c0:	330c      	adds	r3, #12
 800c2c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c2c6:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800c2c8:	4a25      	ldr	r2, [pc, #148]	; (800c360 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	215c      	movs	r1, #92	; 0x5c
 800c2ce:	fb01 f303 	mul.w	r3, r1, r3
 800c2d2:	4413      	add	r3, r2
 800c2d4:	332c      	adds	r3, #44	; 0x2c
 800c2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2da:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	225c      	movs	r2, #92	; 0x5c
 800c2e0:	fb02 f303 	mul.w	r3, r2, r3
 800c2e4:	4a1e      	ldr	r2, [pc, #120]	; (800c360 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c2e6:	4413      	add	r3, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f005 f9b5 	bl	8011658 <HAL_OSPI_Init>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d003      	beq.n	800c2fc <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c2f4:	f06f 0303 	mvn.w	r3, #3
 800c2f8:	60fb      	str	r3, [r7, #12]
 800c2fa:	e02c      	b.n	800c356 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	225c      	movs	r2, #92	; 0x5c
 800c300:	fb02 f303 	mul.w	r3, r2, r3
 800c304:	4a16      	ldr	r2, [pc, #88]	; (800c360 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c306:	4413      	add	r3, r2
 800c308:	2201      	movs	r2, #1
 800c30a:	2101      	movs	r1, #1
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7fe fa34 	bl	800a77a <MX25LM51245G_AutoPollingMemReady>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d003      	beq.n	800c320 <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c318:	f06f 0304 	mvn.w	r3, #4
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	e01a      	b.n	800c356 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	225c      	movs	r2, #92	; 0x5c
 800c324:	fb02 f303 	mul.w	r3, r2, r3
 800c328:	4a0d      	ldr	r2, [pc, #52]	; (800c360 <OSPI_NOR_EnterDOPIMode+0x198>)
 800c32a:	1898      	adds	r0, r3, r2
 800c32c:	f107 0308 	add.w	r3, r7, #8
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	2300      	movs	r3, #0
 800c334:	2201      	movs	r2, #1
 800c336:	2101      	movs	r1, #1
 800c338:	f7fe fd45 	bl	800adc6 <MX25LM51245G_ReadCfg2Register>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c342:	f06f 0304 	mvn.w	r3, #4
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	e005      	b.n	800c356 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800c34a:	7a3b      	ldrb	r3, [r7, #8]
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d002      	beq.n	800c356 <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c350:	f06f 0304 	mvn.w	r3, #4
 800c354:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c356:	68fb      	ldr	r3, [r7, #12]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	2400da70 	.word	0x2400da70
 800c364:	2400dacc 	.word	0x2400dacc

0800c368 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b086      	sub	sp, #24
 800c36c:	af02      	add	r7, sp, #8
 800c36e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c370:	2300      	movs	r3, #0
 800c372:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	225c      	movs	r2, #92	; 0x5c
 800c378:	fb02 f303 	mul.w	r3, r2, r3
 800c37c:	4a4e      	ldr	r2, [pc, #312]	; (800c4b8 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c37e:	1898      	adds	r0, r3, r2
 800c380:	4a4e      	ldr	r2, [pc, #312]	; (800c4bc <OSPI_NOR_EnterSOPIMode+0x154>)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	00db      	lsls	r3, r3, #3
 800c386:	4413      	add	r3, r2
 800c388:	7859      	ldrb	r1, [r3, #1]
 800c38a:	4a4c      	ldr	r2, [pc, #304]	; (800c4bc <OSPI_NOR_EnterSOPIMode+0x154>)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	00db      	lsls	r3, r3, #3
 800c390:	4413      	add	r3, r2
 800c392:	789b      	ldrb	r3, [r3, #2]
 800c394:	461a      	mov	r2, r3
 800c396:	f7fe fbb6 	bl	800ab06 <MX25LM51245G_WriteEnable>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d003      	beq.n	800c3a8 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c3a0:	f06f 0304 	mvn.w	r3, #4
 800c3a4:	60fb      	str	r3, [r7, #12]
 800c3a6:	e082      	b.n	800c4ae <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	225c      	movs	r2, #92	; 0x5c
 800c3ac:	fb02 f303 	mul.w	r3, r2, r3
 800c3b0:	4a41      	ldr	r2, [pc, #260]	; (800c4b8 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c3b2:	1898      	adds	r0, r3, r2
 800c3b4:	4a41      	ldr	r2, [pc, #260]	; (800c4bc <OSPI_NOR_EnterSOPIMode+0x154>)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	00db      	lsls	r3, r3, #3
 800c3ba:	4413      	add	r3, r2
 800c3bc:	7859      	ldrb	r1, [r3, #1]
 800c3be:	4a3f      	ldr	r2, [pc, #252]	; (800c4bc <OSPI_NOR_EnterSOPIMode+0x154>)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	4413      	add	r3, r2
 800c3c6:	789a      	ldrb	r2, [r3, #2]
 800c3c8:	2307      	movs	r3, #7
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c3d0:	f7fe fc64 	bl	800ac9c <MX25LM51245G_WriteCfg2Register>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c3da:	f06f 0304 	mvn.w	r3, #4
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	e065      	b.n	800c4ae <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	225c      	movs	r2, #92	; 0x5c
 800c3e6:	fb02 f303 	mul.w	r3, r2, r3
 800c3ea:	4a33      	ldr	r2, [pc, #204]	; (800c4b8 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c3ec:	1898      	adds	r0, r3, r2
 800c3ee:	4a33      	ldr	r2, [pc, #204]	; (800c4bc <OSPI_NOR_EnterSOPIMode+0x154>)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	4413      	add	r3, r2
 800c3f6:	7859      	ldrb	r1, [r3, #1]
 800c3f8:	4a30      	ldr	r2, [pc, #192]	; (800c4bc <OSPI_NOR_EnterSOPIMode+0x154>)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	4413      	add	r3, r2
 800c400:	789b      	ldrb	r3, [r3, #2]
 800c402:	461a      	mov	r2, r3
 800c404:	f7fe fb7f 	bl	800ab06 <MX25LM51245G_WriteEnable>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d003      	beq.n	800c416 <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c40e:	f06f 0304 	mvn.w	r3, #4
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	e04b      	b.n	800c4ae <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	225c      	movs	r2, #92	; 0x5c
 800c41a:	fb02 f303 	mul.w	r3, r2, r3
 800c41e:	4a26      	ldr	r2, [pc, #152]	; (800c4b8 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c420:	1898      	adds	r0, r3, r2
 800c422:	4a26      	ldr	r2, [pc, #152]	; (800c4bc <OSPI_NOR_EnterSOPIMode+0x154>)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	4413      	add	r3, r2
 800c42a:	7859      	ldrb	r1, [r3, #1]
 800c42c:	4a23      	ldr	r2, [pc, #140]	; (800c4bc <OSPI_NOR_EnterSOPIMode+0x154>)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	00db      	lsls	r3, r3, #3
 800c432:	4413      	add	r3, r2
 800c434:	789a      	ldrb	r2, [r3, #2]
 800c436:	2301      	movs	r3, #1
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	2300      	movs	r3, #0
 800c43c:	f7fe fc2e 	bl	800ac9c <MX25LM51245G_WriteCfg2Register>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d003      	beq.n	800c44e <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c446:	f06f 0304 	mvn.w	r3, #4
 800c44a:	60fb      	str	r3, [r7, #12]
 800c44c:	e02f      	b.n	800c4ae <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800c44e:	2028      	movs	r0, #40	; 0x28
 800c450:	f000 fbb4 	bl	800cbbc <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	225c      	movs	r2, #92	; 0x5c
 800c458:	fb02 f303 	mul.w	r3, r2, r3
 800c45c:	4a16      	ldr	r2, [pc, #88]	; (800c4b8 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c45e:	4413      	add	r3, r2
 800c460:	2200      	movs	r2, #0
 800c462:	2101      	movs	r1, #1
 800c464:	4618      	mov	r0, r3
 800c466:	f7fe f988 	bl	800a77a <MX25LM51245G_AutoPollingMemReady>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d003      	beq.n	800c478 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c470:	f06f 0304 	mvn.w	r3, #4
 800c474:	60fb      	str	r3, [r7, #12]
 800c476:	e01a      	b.n	800c4ae <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	225c      	movs	r2, #92	; 0x5c
 800c47c:	fb02 f303 	mul.w	r3, r2, r3
 800c480:	4a0d      	ldr	r2, [pc, #52]	; (800c4b8 <OSPI_NOR_EnterSOPIMode+0x150>)
 800c482:	1898      	adds	r0, r3, r2
 800c484:	f107 0308 	add.w	r3, r7, #8
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	2300      	movs	r3, #0
 800c48c:	2200      	movs	r2, #0
 800c48e:	2101      	movs	r1, #1
 800c490:	f7fe fc99 	bl	800adc6 <MX25LM51245G_ReadCfg2Register>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c49a:	f06f 0304 	mvn.w	r3, #4
 800c49e:	60fb      	str	r3, [r7, #12]
 800c4a0:	e005      	b.n	800c4ae <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800c4a2:	7a3b      	ldrb	r3, [r7, #8]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d002      	beq.n	800c4ae <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c4a8:	f06f 0304 	mvn.w	r3, #4
 800c4ac:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	2400da70 	.word	0x2400da70
 800c4bc:	2400dacc 	.word	0x2400dacc

0800c4c0 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af02      	add	r7, sp, #8
 800c4c6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	225c      	movs	r2, #92	; 0x5c
 800c4d0:	fb02 f303 	mul.w	r3, r2, r3
 800c4d4:	4a49      	ldr	r2, [pc, #292]	; (800c5fc <OSPI_NOR_ExitOPIMode+0x13c>)
 800c4d6:	1898      	adds	r0, r3, r2
 800c4d8:	4a49      	ldr	r2, [pc, #292]	; (800c600 <OSPI_NOR_ExitOPIMode+0x140>)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	4413      	add	r3, r2
 800c4e0:	7859      	ldrb	r1, [r3, #1]
 800c4e2:	4a47      	ldr	r2, [pc, #284]	; (800c600 <OSPI_NOR_ExitOPIMode+0x140>)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	4413      	add	r3, r2
 800c4ea:	789b      	ldrb	r3, [r3, #2]
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	f7fe fb0a 	bl	800ab06 <MX25LM51245G_WriteEnable>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d003      	beq.n	800c500 <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c4f8:	f06f 0304 	mvn.w	r3, #4
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	e077      	b.n	800c5f0 <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800c500:	2300      	movs	r3, #0
 800c502:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	225c      	movs	r2, #92	; 0x5c
 800c50c:	fb02 f303 	mul.w	r3, r2, r3
 800c510:	4a3a      	ldr	r2, [pc, #232]	; (800c5fc <OSPI_NOR_ExitOPIMode+0x13c>)
 800c512:	1898      	adds	r0, r3, r2
 800c514:	4a3a      	ldr	r2, [pc, #232]	; (800c600 <OSPI_NOR_ExitOPIMode+0x140>)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	00db      	lsls	r3, r3, #3
 800c51a:	4413      	add	r3, r2
 800c51c:	7859      	ldrb	r1, [r3, #1]
 800c51e:	4a38      	ldr	r2, [pc, #224]	; (800c600 <OSPI_NOR_ExitOPIMode+0x140>)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	00db      	lsls	r3, r3, #3
 800c524:	4413      	add	r3, r2
 800c526:	789a      	ldrb	r2, [r3, #2]
 800c528:	7a3b      	ldrb	r3, [r7, #8]
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	2300      	movs	r3, #0
 800c52e:	f7fe fbb5 	bl	800ac9c <MX25LM51245G_WriteCfg2Register>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d003      	beq.n	800c540 <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c538:	f06f 0304 	mvn.w	r3, #4
 800c53c:	60fb      	str	r3, [r7, #12]
 800c53e:	e057      	b.n	800c5f0 <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800c540:	2028      	movs	r0, #40	; 0x28
 800c542:	f000 fb3b 	bl	800cbbc <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800c546:	4a2e      	ldr	r2, [pc, #184]	; (800c600 <OSPI_NOR_ExitOPIMode+0x140>)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	00db      	lsls	r3, r3, #3
 800c54c:	4413      	add	r3, r2
 800c54e:	789b      	ldrb	r3, [r3, #2]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d120      	bne.n	800c596 <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800c554:	4a29      	ldr	r2, [pc, #164]	; (800c5fc <OSPI_NOR_ExitOPIMode+0x13c>)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	215c      	movs	r1, #92	; 0x5c
 800c55a:	fb01 f303 	mul.w	r3, r1, r3
 800c55e:	4413      	add	r3, r2
 800c560:	330c      	adds	r3, #12
 800c562:	2200      	movs	r2, #0
 800c564:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800c566:	4a25      	ldr	r2, [pc, #148]	; (800c5fc <OSPI_NOR_ExitOPIMode+0x13c>)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	215c      	movs	r1, #92	; 0x5c
 800c56c:	fb01 f303 	mul.w	r3, r1, r3
 800c570:	4413      	add	r3, r2
 800c572:	332c      	adds	r3, #44	; 0x2c
 800c574:	2200      	movs	r2, #0
 800c576:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	225c      	movs	r2, #92	; 0x5c
 800c57c:	fb02 f303 	mul.w	r3, r2, r3
 800c580:	4a1e      	ldr	r2, [pc, #120]	; (800c5fc <OSPI_NOR_ExitOPIMode+0x13c>)
 800c582:	4413      	add	r3, r2
 800c584:	4618      	mov	r0, r3
 800c586:	f005 f867 	bl	8011658 <HAL_OSPI_Init>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d002      	beq.n	800c596 <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800c590:	f06f 0303 	mvn.w	r3, #3
 800c594:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	225c      	movs	r2, #92	; 0x5c
 800c59a:	fb02 f303 	mul.w	r3, r2, r3
 800c59e:	4a17      	ldr	r2, [pc, #92]	; (800c5fc <OSPI_NOR_ExitOPIMode+0x13c>)
 800c5a0:	4413      	add	r3, r2
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe f8e7 	bl	800a77a <MX25LM51245G_AutoPollingMemReady>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5b2:	f06f 0304 	mvn.w	r3, #4
 800c5b6:	60fb      	str	r3, [r7, #12]
 800c5b8:	e01a      	b.n	800c5f0 <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	225c      	movs	r2, #92	; 0x5c
 800c5be:	fb02 f303 	mul.w	r3, r2, r3
 800c5c2:	4a0e      	ldr	r2, [pc, #56]	; (800c5fc <OSPI_NOR_ExitOPIMode+0x13c>)
 800c5c4:	1898      	adds	r0, r3, r2
 800c5c6:	f107 0308 	add.w	r3, r7, #8
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	f7fe fbf8 	bl	800adc6 <MX25LM51245G_ReadCfg2Register>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d003      	beq.n	800c5e4 <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5dc:	f06f 0304 	mvn.w	r3, #4
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	e005      	b.n	800c5f0 <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 800c5e4:	7a3b      	ldrb	r3, [r7, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5ea:	f06f 0304 	mvn.w	r3, #4
 800c5ee:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	2400da70 	.word	0x2400da70
 800c600:	2400dacc 	.word	0x2400dacc

0800c604 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c60e:	2300      	movs	r3, #0
 800c610:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d11c      	bne.n	800c652 <BSP_TS_Init+0x4e>
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d018      	beq.n	800c652 <BSP_TS_Init+0x4e>
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800c628:	d813      	bhi.n	800c652 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00f      	beq.n	800c652 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800c63a:	d80a      	bhi.n	800c652 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	68da      	ldr	r2, [r3, #12]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	6819      	ldr	r1, [r3, #0]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	428b      	cmp	r3, r1
 800c64a:	bf28      	it	cs
 800c64c:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c64e:	429a      	cmp	r2, r3
 800c650:	d903      	bls.n	800c65a <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c652:	f06f 0301 	mvn.w	r3, #1
 800c656:	61fb      	str	r3, [r7, #28]
 800c658:	e06e      	b.n	800c738 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f98c 	bl	800c978 <FT5336_Probe>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d003      	beq.n	800c66e <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800c666:	f04f 33ff 	mov.w	r3, #4294967295
 800c66a:	61fb      	str	r3, [r7, #28]
 800c66c:	e064      	b.n	800c738 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	4934      	ldr	r1, [pc, #208]	; (800c744 <BSP_TS_Init+0x140>)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	015b      	lsls	r3, r3, #5
 800c678:	440b      	add	r3, r1
 800c67a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	4930      	ldr	r1, [pc, #192]	; (800c744 <BSP_TS_Init+0x140>)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	015b      	lsls	r3, r3, #5
 800c686:	440b      	add	r3, r1
 800c688:	3304      	adds	r3, #4
 800c68a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	689a      	ldr	r2, [r3, #8]
 800c690:	492c      	ldr	r1, [pc, #176]	; (800c744 <BSP_TS_Init+0x140>)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	015b      	lsls	r3, r3, #5
 800c696:	440b      	add	r3, r1
 800c698:	3308      	adds	r3, #8
 800c69a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	68da      	ldr	r2, [r3, #12]
 800c6a0:	4928      	ldr	r1, [pc, #160]	; (800c744 <BSP_TS_Init+0x140>)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	015b      	lsls	r3, r3, #5
 800c6a6:	440b      	add	r3, r1
 800c6a8:	330c      	adds	r3, #12
 800c6aa:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800c6ac:	4b26      	ldr	r3, [pc, #152]	; (800c748 <BSP_TS_Init+0x144>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	69db      	ldr	r3, [r3, #28]
 800c6b2:	4926      	ldr	r1, [pc, #152]	; (800c74c <BSP_TS_Init+0x148>)
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c6ba:	f107 010c 	add.w	r1, r7, #12
 800c6be:	4610      	mov	r0, r2
 800c6c0:	4798      	blx	r3
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	da03      	bge.n	800c6d0 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c6c8:	f06f 0304 	mvn.w	r3, #4
 800c6cc:	61fb      	str	r3, [r7, #28]
 800c6ce:	e033      	b.n	800c738 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	491c      	ldr	r1, [pc, #112]	; (800c744 <BSP_TS_Init+0x140>)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	015b      	lsls	r3, r3, #5
 800c6d8:	440b      	add	r3, r1
 800c6da:	3310      	adds	r3, #16
 800c6dc:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	4918      	ldr	r1, [pc, #96]	; (800c744 <BSP_TS_Init+0x140>)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	015b      	lsls	r3, r3, #5
 800c6e6:	440b      	add	r3, r1
 800c6e8:	3314      	adds	r3, #20
 800c6ea:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	61bb      	str	r3, [r7, #24]
 800c6f0:	e01f      	b.n	800c732 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	1c5a      	adds	r2, r3, #1
 800c6fe:	4811      	ldr	r0, [pc, #68]	; (800c744 <BSP_TS_Init+0x140>)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	00d9      	lsls	r1, r3, #3
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	440b      	add	r3, r1
 800c708:	3306      	adds	r3, #6
 800c70a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	4413      	add	r3, r2
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	480a      	ldr	r0, [pc, #40]	; (800c744 <BSP_TS_Init+0x140>)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	00d9      	lsls	r1, r3, #3
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	440b      	add	r3, r1
 800c724:	3306      	adds	r3, #6
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	4403      	add	r3, r0
 800c72a:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	3301      	adds	r3, #1
 800c730:	61bb      	str	r3, [r7, #24]
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d0dc      	beq.n	800c6f2 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800c738:	69fb      	ldr	r3, [r7, #28]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3720      	adds	r7, #32
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	2400dadc 	.word	0x2400dadc
 800c748:	2400dad4 	.word	0x2400dad4
 800c74c:	2400dad8 	.word	0x2400dad8

0800c750 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08a      	sub	sp, #40	; 0x28
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c75a:	2300      	movs	r3, #0
 800c75c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d003      	beq.n	800c76c <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c764:	f06f 0301 	mvn.w	r3, #1
 800c768:	627b      	str	r3, [r7, #36]	; 0x24
 800c76a:	e0f9      	b.n	800c960 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800c76c:	4b7f      	ldr	r3, [pc, #508]	; (800c96c <BSP_TS_GetState+0x21c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	497f      	ldr	r1, [pc, #508]	; (800c970 <BSP_TS_GetState+0x220>)
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c77a:	f107 0108 	add.w	r1, r7, #8
 800c77e:	4610      	mov	r0, r2
 800c780:	4798      	blx	r3
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	da03      	bge.n	800c790 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c788:	f06f 0304 	mvn.w	r3, #4
 800c78c:	627b      	str	r3, [r7, #36]	; 0x24
 800c78e:	e0e7      	b.n	800c960 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	2b00      	cmp	r3, #0
 800c794:	f000 80d1 	beq.w	800c93a <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800c7a0:	4a74      	ldr	r2, [pc, #464]	; (800c974 <BSP_TS_GetState+0x224>)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	015b      	lsls	r3, r3, #5
 800c7a6:	4413      	add	r3, r2
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 0308 	and.w	r3, r3, #8
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d003      	beq.n	800c7bc <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800c7bc:	4a6d      	ldr	r2, [pc, #436]	; (800c974 <BSP_TS_GetState+0x224>)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	015b      	lsls	r3, r3, #5
 800c7c2:	4413      	add	r3, r2
 800c7c4:	3308      	adds	r3, #8
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f003 0302 	and.w	r3, r3, #2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d009      	beq.n	800c7e4 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800c7d0:	4a68      	ldr	r2, [pc, #416]	; (800c974 <BSP_TS_GetState+0x224>)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	015b      	lsls	r3, r3, #5
 800c7d6:	4413      	add	r3, r2
 800c7d8:	3310      	adds	r3, #16
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800c7e4:	4a63      	ldr	r2, [pc, #396]	; (800c974 <BSP_TS_GetState+0x224>)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	015b      	lsls	r3, r3, #5
 800c7ea:	4413      	add	r3, r2
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 0304 	and.w	r3, r3, #4
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d008      	beq.n	800c80a <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800c7f8:	4a5e      	ldr	r2, [pc, #376]	; (800c974 <BSP_TS_GetState+0x224>)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	015b      	lsls	r3, r3, #5
 800c7fe:	4413      	add	r3, r2
 800c800:	3314      	adds	r3, #20
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800c80a:	4a5a      	ldr	r2, [pc, #360]	; (800c974 <BSP_TS_GetState+0x224>)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	015b      	lsls	r3, r3, #5
 800c810:	4413      	add	r3, r2
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6a3a      	ldr	r2, [r7, #32]
 800c816:	fb03 f202 	mul.w	r2, r3, r2
 800c81a:	4956      	ldr	r1, [pc, #344]	; (800c974 <BSP_TS_GetState+0x224>)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	015b      	lsls	r3, r3, #5
 800c820:	440b      	add	r3, r1
 800c822:	3310      	adds	r3, #16
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	fbb2 f2f3 	udiv	r2, r2, r3
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800c82e:	4a51      	ldr	r2, [pc, #324]	; (800c974 <BSP_TS_GetState+0x224>)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	015b      	lsls	r3, r3, #5
 800c834:	4413      	add	r3, r2
 800c836:	3304      	adds	r3, #4
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	69fa      	ldr	r2, [r7, #28]
 800c83c:	fb03 f202 	mul.w	r2, r3, r2
 800c840:	494c      	ldr	r1, [pc, #304]	; (800c974 <BSP_TS_GetState+0x224>)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	015b      	lsls	r3, r3, #5
 800c846:	440b      	add	r3, r1
 800c848:	3314      	adds	r3, #20
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	4945      	ldr	r1, [pc, #276]	; (800c974 <BSP_TS_GetState+0x224>)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	015b      	lsls	r3, r3, #5
 800c864:	440b      	add	r3, r1
 800c866:	3318      	adds	r3, #24
 800c868:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d909      	bls.n	800c882 <BSP_TS_GetState+0x132>
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	4940      	ldr	r1, [pc, #256]	; (800c974 <BSP_TS_GetState+0x224>)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	015b      	lsls	r3, r3, #5
 800c878:	440b      	add	r3, r1
 800c87a:	3318      	adds	r3, #24
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	e008      	b.n	800c894 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800c882:	4a3c      	ldr	r2, [pc, #240]	; (800c974 <BSP_TS_GetState+0x224>)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	015b      	lsls	r3, r3, #5
 800c888:	4413      	add	r3, r2
 800c88a:	3318      	adds	r3, #24
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800c892:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800c894:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	689a      	ldr	r2, [r3, #8]
 800c89a:	4936      	ldr	r1, [pc, #216]	; (800c974 <BSP_TS_GetState+0x224>)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	015b      	lsls	r3, r3, #5
 800c8a0:	440b      	add	r3, r1
 800c8a2:	331c      	adds	r3, #28
 800c8a4:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d909      	bls.n	800c8be <BSP_TS_GetState+0x16e>
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	689a      	ldr	r2, [r3, #8]
 800c8ae:	4931      	ldr	r1, [pc, #196]	; (800c974 <BSP_TS_GetState+0x224>)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	015b      	lsls	r3, r3, #5
 800c8b4:	440b      	add	r3, r1
 800c8b6:	331c      	adds	r3, #28
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	e008      	b.n	800c8d0 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800c8be:	4a2d      	ldr	r2, [pc, #180]	; (800c974 <BSP_TS_GetState+0x224>)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	015b      	lsls	r3, r3, #5
 800c8c4:	4413      	add	r3, r2
 800c8c6:	331c      	adds	r3, #28
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800c8ce:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800c8d0:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800c8d2:	4a28      	ldr	r2, [pc, #160]	; (800c974 <BSP_TS_GetState+0x224>)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	015b      	lsls	r3, r3, #5
 800c8d8:	4413      	add	r3, r2
 800c8da:	330c      	adds	r3, #12
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	69ba      	ldr	r2, [r7, #24]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d808      	bhi.n	800c8f6 <BSP_TS_GetState+0x1a6>
 800c8e4:	4a23      	ldr	r2, [pc, #140]	; (800c974 <BSP_TS_GetState+0x224>)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	015b      	lsls	r3, r3, #5
 800c8ea:	4413      	add	r3, r2
 800c8ec:	330c      	adds	r3, #12
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	697a      	ldr	r2, [r7, #20]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d910      	bls.n	800c918 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	685a      	ldr	r2, [r3, #4]
 800c8fa:	491e      	ldr	r1, [pc, #120]	; (800c974 <BSP_TS_GetState+0x224>)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	015b      	lsls	r3, r3, #5
 800c900:	440b      	add	r3, r1
 800c902:	3318      	adds	r3, #24
 800c904:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	689a      	ldr	r2, [r3, #8]
 800c90a:	491a      	ldr	r1, [pc, #104]	; (800c974 <BSP_TS_GetState+0x224>)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	015b      	lsls	r3, r3, #5
 800c910:	440b      	add	r3, r1
 800c912:	331c      	adds	r3, #28
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	e023      	b.n	800c960 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800c918:	4a16      	ldr	r2, [pc, #88]	; (800c974 <BSP_TS_GetState+0x224>)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	015b      	lsls	r3, r3, #5
 800c91e:	4413      	add	r3, r2
 800c920:	3318      	adds	r3, #24
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800c928:	4a12      	ldr	r2, [pc, #72]	; (800c974 <BSP_TS_GetState+0x224>)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	015b      	lsls	r3, r3, #5
 800c92e:	4413      	add	r3, r2
 800c930:	331c      	adds	r3, #28
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	609a      	str	r2, [r3, #8]
 800c938:	e012      	b.n	800c960 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	2200      	movs	r2, #0
 800c93e:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800c940:	4a0c      	ldr	r2, [pc, #48]	; (800c974 <BSP_TS_GetState+0x224>)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	015b      	lsls	r3, r3, #5
 800c946:	4413      	add	r3, r2
 800c948:	3318      	adds	r3, #24
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800c950:	4a08      	ldr	r2, [pc, #32]	; (800c974 <BSP_TS_GetState+0x224>)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	015b      	lsls	r3, r3, #5
 800c956:	4413      	add	r3, r2
 800c958:	331c      	adds	r3, #28
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c962:	4618      	mov	r0, r3
 800c964:	3728      	adds	r7, #40	; 0x28
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	2400dad4 	.word	0x2400dad4
 800c970:	2400dad8 	.word	0x2400dad8
 800c974:	2400dadc 	.word	0x2400dadc

0800c978 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b08a      	sub	sp, #40	; 0x28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 800c980:	2300      	movs	r3, #0
 800c982:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800c988:	2370      	movs	r3, #112	; 0x70
 800c98a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800c98c:	4b23      	ldr	r3, [pc, #140]	; (800ca1c <FT5336_Probe+0xa4>)
 800c98e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800c990:	4b23      	ldr	r3, [pc, #140]	; (800ca20 <FT5336_Probe+0xa8>)
 800c992:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800c994:	4b23      	ldr	r3, [pc, #140]	; (800ca24 <FT5336_Probe+0xac>)
 800c996:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800c998:	4b23      	ldr	r3, [pc, #140]	; (800ca28 <FT5336_Probe+0xb0>)
 800c99a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800c99c:	4b23      	ldr	r3, [pc, #140]	; (800ca2c <FT5336_Probe+0xb4>)
 800c99e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800c9a0:	f107 030c 	add.w	r3, r7, #12
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	4822      	ldr	r0, [pc, #136]	; (800ca30 <FT5336_Probe+0xb8>)
 800c9a8:	f7fd fb58 	bl	800a05c <FT5336_RegisterBusIO>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d003      	beq.n	800c9ba <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800c9b2:	f06f 0307 	mvn.w	r3, #7
 800c9b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c9b8:	e02a      	b.n	800ca10 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800c9ba:	f107 0308 	add.w	r3, r7, #8
 800c9be:	4619      	mov	r1, r3
 800c9c0:	481b      	ldr	r0, [pc, #108]	; (800ca30 <FT5336_Probe+0xb8>)
 800c9c2:	f7fd fc45 	bl	800a250 <FT5336_ReadID>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d003      	beq.n	800c9d4 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c9cc:	f06f 0304 	mvn.w	r3, #4
 800c9d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c9d2:	e01d      	b.n	800ca10 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	2b51      	cmp	r3, #81	; 0x51
 800c9d8:	d003      	beq.n	800c9e2 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c9da:	f06f 0306 	mvn.w	r3, #6
 800c9de:	627b      	str	r3, [r7, #36]	; 0x24
 800c9e0:	e016      	b.n	800ca10 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800c9e2:	4a14      	ldr	r2, [pc, #80]	; (800ca34 <FT5336_Probe+0xbc>)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4912      	ldr	r1, [pc, #72]	; (800ca30 <FT5336_Probe+0xb8>)
 800c9e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800c9ec:	4b12      	ldr	r3, [pc, #72]	; (800ca38 <FT5336_Probe+0xc0>)
 800c9ee:	4a13      	ldr	r2, [pc, #76]	; (800ca3c <FT5336_Probe+0xc4>)
 800c9f0:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800c9f2:	4b11      	ldr	r3, [pc, #68]	; (800ca38 <FT5336_Probe+0xc0>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	490e      	ldr	r1, [pc, #56]	; (800ca34 <FT5336_Probe+0xbc>)
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ca00:	4610      	mov	r0, r2
 800ca02:	4798      	blx	r3
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d002      	beq.n	800ca10 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ca0a:	f06f 0304 	mvn.w	r3, #4
 800ca0e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3728      	adds	r7, #40	; 0x28
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	0800b05d 	.word	0x0800b05d
 800ca20:	0800b0d1 	.word	0x0800b0d1
 800ca24:	0800b1f9 	.word	0x0800b1f9
 800ca28:	0800b19d 	.word	0x0800b19d
 800ca2c:	0800b255 	.word	0x0800b255
 800ca30:	2400dafc 	.word	0x2400dafc
 800ca34:	2400dad8 	.word	0x2400dad8
 800ca38:	2400dad4 	.word	0x2400dad4
 800ca3c:	24000024 	.word	0x24000024

0800ca40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ca40:	b480      	push	{r7}
 800ca42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ca44:	4b29      	ldr	r3, [pc, #164]	; (800caec <SystemInit+0xac>)
 800ca46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca4a:	4a28      	ldr	r2, [pc, #160]	; (800caec <SystemInit+0xac>)
 800ca4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800ca54:	4b26      	ldr	r3, [pc, #152]	; (800caf0 <SystemInit+0xb0>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a25      	ldr	r2, [pc, #148]	; (800caf0 <SystemInit+0xb0>)
 800ca5a:	f043 0301 	orr.w	r3, r3, #1
 800ca5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ca60:	4b23      	ldr	r3, [pc, #140]	; (800caf0 <SystemInit+0xb0>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800ca66:	4b22      	ldr	r3, [pc, #136]	; (800caf0 <SystemInit+0xb0>)
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	4921      	ldr	r1, [pc, #132]	; (800caf0 <SystemInit+0xb0>)
 800ca6c:	4b21      	ldr	r3, [pc, #132]	; (800caf4 <SystemInit+0xb4>)
 800ca6e:	4013      	ands	r3, r2
 800ca70:	600b      	str	r3, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800ca72:	4b1f      	ldr	r3, [pc, #124]	; (800caf0 <SystemInit+0xb0>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800ca78:	4b1d      	ldr	r3, [pc, #116]	; (800caf0 <SystemInit+0xb0>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800ca7e:	4b1c      	ldr	r3, [pc, #112]	; (800caf0 <SystemInit+0xb0>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800ca84:	4b1a      	ldr	r3, [pc, #104]	; (800caf0 <SystemInit+0xb0>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800ca8a:	4b19      	ldr	r3, [pc, #100]	; (800caf0 <SystemInit+0xb0>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800ca90:	4b17      	ldr	r3, [pc, #92]	; (800caf0 <SystemInit+0xb0>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800ca96:	4b16      	ldr	r3, [pc, #88]	; (800caf0 <SystemInit+0xb0>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800ca9c:	4b14      	ldr	r3, [pc, #80]	; (800caf0 <SystemInit+0xb0>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800caa2:	4b13      	ldr	r3, [pc, #76]	; (800caf0 <SystemInit+0xb0>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800caa8:	4b11      	ldr	r3, [pc, #68]	; (800caf0 <SystemInit+0xb0>)
 800caaa:	2200      	movs	r2, #0
 800caac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800caae:	4b10      	ldr	r3, [pc, #64]	; (800caf0 <SystemInit+0xb0>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800cab4:	4b0e      	ldr	r3, [pc, #56]	; (800caf0 <SystemInit+0xb0>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a0d      	ldr	r2, [pc, #52]	; (800caf0 <SystemInit+0xb0>)
 800caba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cabe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800cac0:	4b0b      	ldr	r3, [pc, #44]	; (800caf0 <SystemInit+0xb0>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800cac6:	4b0c      	ldr	r3, [pc, #48]	; (800caf8 <SystemInit+0xb8>)
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	4b0c      	ldr	r3, [pc, #48]	; (800cafc <SystemInit+0xbc>)
 800cacc:	4013      	ands	r3, r2
 800cace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cad2:	d202      	bcs.n	800cada <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800cad4:	4b0a      	ldr	r3, [pc, #40]	; (800cb00 <SystemInit+0xc0>)
 800cad6:	2201      	movs	r2, #1
 800cad8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cada:	4b04      	ldr	r3, [pc, #16]	; (800caec <SystemInit+0xac>)
 800cadc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cae0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800cae2:	bf00      	nop
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr
 800caec:	e000ed00 	.word	0xe000ed00
 800caf0:	58024400 	.word	0x58024400
 800caf4:	eaf6ed7f 	.word	0xeaf6ed7f
 800caf8:	5c001000 	.word	0x5c001000
 800cafc:	ffff0000 	.word	0xffff0000
 800cb00:	51008108 	.word	0x51008108

0800cb04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cb0a:	2003      	movs	r0, #3
 800cb0c:	f000 f94b 	bl	800cda6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800cb10:	f006 fb44 	bl	801319c <HAL_RCC_GetSysClockFreq>
 800cb14:	4602      	mov	r2, r0
 800cb16:	4b15      	ldr	r3, [pc, #84]	; (800cb6c <HAL_Init+0x68>)
 800cb18:	699b      	ldr	r3, [r3, #24]
 800cb1a:	0a1b      	lsrs	r3, r3, #8
 800cb1c:	f003 030f 	and.w	r3, r3, #15
 800cb20:	4913      	ldr	r1, [pc, #76]	; (800cb70 <HAL_Init+0x6c>)
 800cb22:	5ccb      	ldrb	r3, [r1, r3]
 800cb24:	f003 031f 	and.w	r3, r3, #31
 800cb28:	fa22 f303 	lsr.w	r3, r2, r3
 800cb2c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800cb2e:	4b0f      	ldr	r3, [pc, #60]	; (800cb6c <HAL_Init+0x68>)
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	f003 030f 	and.w	r3, r3, #15
 800cb36:	4a0e      	ldr	r2, [pc, #56]	; (800cb70 <HAL_Init+0x6c>)
 800cb38:	5cd3      	ldrb	r3, [r2, r3]
 800cb3a:	f003 031f 	and.w	r3, r3, #31
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	fa22 f303 	lsr.w	r3, r2, r3
 800cb44:	4a0b      	ldr	r2, [pc, #44]	; (800cb74 <HAL_Init+0x70>)
 800cb46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cb48:	4a0b      	ldr	r2, [pc, #44]	; (800cb78 <HAL_Init+0x74>)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cb4e:	2000      	movs	r0, #0
 800cb50:	f7fa febe 	bl	80078d0 <HAL_InitTick>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e002      	b.n	800cb64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800cb5e:	f7fa fae3 	bl	8007128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	58024400 	.word	0x58024400
 800cb70:	0802eda0 	.word	0x0802eda0
 800cb74:	24000058 	.word	0x24000058
 800cb78:	24000054 	.word	0x24000054

0800cb7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800cb80:	4b06      	ldr	r3, [pc, #24]	; (800cb9c <HAL_IncTick+0x20>)
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	461a      	mov	r2, r3
 800cb86:	4b06      	ldr	r3, [pc, #24]	; (800cba0 <HAL_IncTick+0x24>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	4a04      	ldr	r2, [pc, #16]	; (800cba0 <HAL_IncTick+0x24>)
 800cb8e:	6013      	str	r3, [r2, #0]
}
 800cb90:	bf00      	nop
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	24000060 	.word	0x24000060
 800cba0:	2400db24 	.word	0x2400db24

0800cba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cba4:	b480      	push	{r7}
 800cba6:	af00      	add	r7, sp, #0
  return uwTick;
 800cba8:	4b03      	ldr	r3, [pc, #12]	; (800cbb8 <HAL_GetTick+0x14>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	2400db24 	.word	0x2400db24

0800cbbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cbc4:	f7ff ffee 	bl	800cba4 <HAL_GetTick>
 800cbc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd4:	d005      	beq.n	800cbe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cbd6:	4b0a      	ldr	r3, [pc, #40]	; (800cc00 <HAL_Delay+0x44>)
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800cbe2:	bf00      	nop
 800cbe4:	f7ff ffde 	bl	800cba4 <HAL_GetTick>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d8f7      	bhi.n	800cbe4 <HAL_Delay+0x28>
  {
  }
}
 800cbf4:	bf00      	nop
 800cbf6:	bf00      	nop
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	24000060 	.word	0x24000060

0800cc04 <__NVIC_SetPriorityGrouping>:
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f003 0307 	and.w	r3, r3, #7
 800cc12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cc14:	4b0b      	ldr	r3, [pc, #44]	; (800cc44 <__NVIC_SetPriorityGrouping+0x40>)
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cc1a:	68ba      	ldr	r2, [r7, #8]
 800cc1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cc20:	4013      	ands	r3, r2
 800cc22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800cc2c:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <__NVIC_SetPriorityGrouping+0x44>)
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cc32:	4a04      	ldr	r2, [pc, #16]	; (800cc44 <__NVIC_SetPriorityGrouping+0x40>)
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	60d3      	str	r3, [r2, #12]
}
 800cc38:	bf00      	nop
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr
 800cc44:	e000ed00 	.word	0xe000ed00
 800cc48:	05fa0000 	.word	0x05fa0000

0800cc4c <__NVIC_GetPriorityGrouping>:
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cc50:	4b04      	ldr	r3, [pc, #16]	; (800cc64 <__NVIC_GetPriorityGrouping+0x18>)
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	0a1b      	lsrs	r3, r3, #8
 800cc56:	f003 0307 	and.w	r3, r3, #7
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr
 800cc64:	e000ed00 	.word	0xe000ed00

0800cc68 <__NVIC_EnableIRQ>:
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cc72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	db0b      	blt.n	800cc92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cc7a:	88fb      	ldrh	r3, [r7, #6]
 800cc7c:	f003 021f 	and.w	r2, r3, #31
 800cc80:	4907      	ldr	r1, [pc, #28]	; (800cca0 <__NVIC_EnableIRQ+0x38>)
 800cc82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc86:	095b      	lsrs	r3, r3, #5
 800cc88:	2001      	movs	r0, #1
 800cc8a:	fa00 f202 	lsl.w	r2, r0, r2
 800cc8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cc92:	bf00      	nop
 800cc94:	370c      	adds	r7, #12
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	e000e100 	.word	0xe000e100

0800cca4 <__NVIC_DisableIRQ>:
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ccae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	db12      	blt.n	800ccdc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ccb6:	88fb      	ldrh	r3, [r7, #6]
 800ccb8:	f003 021f 	and.w	r2, r3, #31
 800ccbc:	490a      	ldr	r1, [pc, #40]	; (800cce8 <__NVIC_DisableIRQ+0x44>)
 800ccbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ccc2:	095b      	lsrs	r3, r3, #5
 800ccc4:	2001      	movs	r0, #1
 800ccc6:	fa00 f202 	lsl.w	r2, r0, r2
 800ccca:	3320      	adds	r3, #32
 800cccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ccd0:	f3bf 8f4f 	dsb	sy
}
 800ccd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ccd6:	f3bf 8f6f 	isb	sy
}
 800ccda:	bf00      	nop
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	e000e100 	.word	0xe000e100

0800ccec <__NVIC_SetPriority>:
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	6039      	str	r1, [r7, #0]
 800ccf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ccf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	db0a      	blt.n	800cd16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	b2da      	uxtb	r2, r3
 800cd04:	490c      	ldr	r1, [pc, #48]	; (800cd38 <__NVIC_SetPriority+0x4c>)
 800cd06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd0a:	0112      	lsls	r2, r2, #4
 800cd0c:	b2d2      	uxtb	r2, r2
 800cd0e:	440b      	add	r3, r1
 800cd10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cd14:	e00a      	b.n	800cd2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	4908      	ldr	r1, [pc, #32]	; (800cd3c <__NVIC_SetPriority+0x50>)
 800cd1c:	88fb      	ldrh	r3, [r7, #6]
 800cd1e:	f003 030f 	and.w	r3, r3, #15
 800cd22:	3b04      	subs	r3, #4
 800cd24:	0112      	lsls	r2, r2, #4
 800cd26:	b2d2      	uxtb	r2, r2
 800cd28:	440b      	add	r3, r1
 800cd2a:	761a      	strb	r2, [r3, #24]
}
 800cd2c:	bf00      	nop
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr
 800cd38:	e000e100 	.word	0xe000e100
 800cd3c:	e000ed00 	.word	0xe000ed00

0800cd40 <NVIC_EncodePriority>:
{
 800cd40:	b480      	push	{r7}
 800cd42:	b089      	sub	sp, #36	; 0x24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f003 0307 	and.w	r3, r3, #7
 800cd52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	f1c3 0307 	rsb	r3, r3, #7
 800cd5a:	2b04      	cmp	r3, #4
 800cd5c:	bf28      	it	cs
 800cd5e:	2304      	movcs	r3, #4
 800cd60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	3304      	adds	r3, #4
 800cd66:	2b06      	cmp	r3, #6
 800cd68:	d902      	bls.n	800cd70 <NVIC_EncodePriority+0x30>
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	3b03      	subs	r3, #3
 800cd6e:	e000      	b.n	800cd72 <NVIC_EncodePriority+0x32>
 800cd70:	2300      	movs	r3, #0
 800cd72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cd74:	f04f 32ff 	mov.w	r2, #4294967295
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd7e:	43da      	mvns	r2, r3
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	401a      	ands	r2, r3
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cd88:	f04f 31ff 	mov.w	r1, #4294967295
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800cd92:	43d9      	mvns	r1, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cd98:	4313      	orrs	r3, r2
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3724      	adds	r7, #36	; 0x24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr

0800cda6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b082      	sub	sp, #8
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f7ff ff28 	bl	800cc04 <__NVIC_SetPriorityGrouping>
}
 800cdb4:	bf00      	nop
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
 800cdc8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cdca:	f7ff ff3f 	bl	800cc4c <__NVIC_GetPriorityGrouping>
 800cdce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	68b9      	ldr	r1, [r7, #8]
 800cdd4:	6978      	ldr	r0, [r7, #20]
 800cdd6:	f7ff ffb3 	bl	800cd40 <NVIC_EncodePriority>
 800cdda:	4602      	mov	r2, r0
 800cddc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cde0:	4611      	mov	r1, r2
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7ff ff82 	bl	800ccec <__NVIC_SetPriority>
}
 800cde8:	bf00      	nop
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cdfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff ff32 	bl	800cc68 <__NVIC_EnableIRQ>
}
 800ce04:	bf00      	nop
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	4603      	mov	r3, r0
 800ce14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ce16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff ff42 	bl	800cca4 <__NVIC_DisableIRQ>
}
 800ce20:	bf00      	nop
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800ce2c:	f3bf 8f5f 	dmb	sy
}
 800ce30:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800ce32:	4b07      	ldr	r3, [pc, #28]	; (800ce50 <HAL_MPU_Disable+0x28>)
 800ce34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce36:	4a06      	ldr	r2, [pc, #24]	; (800ce50 <HAL_MPU_Disable+0x28>)
 800ce38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce3c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800ce3e:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <HAL_MPU_Disable+0x2c>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	605a      	str	r2, [r3, #4]
}
 800ce44:	bf00      	nop
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	e000ed00 	.word	0xe000ed00
 800ce54:	e000ed90 	.word	0xe000ed90

0800ce58 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800ce60:	4a0b      	ldr	r2, [pc, #44]	; (800ce90 <HAL_MPU_Enable+0x38>)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f043 0301 	orr.w	r3, r3, #1
 800ce68:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800ce6a:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <HAL_MPU_Enable+0x3c>)
 800ce6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6e:	4a09      	ldr	r2, [pc, #36]	; (800ce94 <HAL_MPU_Enable+0x3c>)
 800ce70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce74:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800ce76:	f3bf 8f4f 	dsb	sy
}
 800ce7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ce7c:	f3bf 8f6f 	isb	sy
}
 800ce80:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800ce82:	bf00      	nop
 800ce84:	370c      	adds	r7, #12
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	e000ed90 	.word	0xe000ed90
 800ce94:	e000ed00 	.word	0xe000ed00

0800ce98 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	785a      	ldrb	r2, [r3, #1]
 800cea4:	4b1d      	ldr	r3, [pc, #116]	; (800cf1c <HAL_MPU_ConfigRegion+0x84>)
 800cea6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d029      	beq.n	800cf04 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800ceb0:	4a1a      	ldr	r2, [pc, #104]	; (800cf1c <HAL_MPU_ConfigRegion+0x84>)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	7b1b      	ldrb	r3, [r3, #12]
 800cebc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	7adb      	ldrb	r3, [r3, #11]
 800cec2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cec4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	7a9b      	ldrb	r3, [r3, #10]
 800ceca:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cecc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	7b5b      	ldrb	r3, [r3, #13]
 800ced2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ced4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	7b9b      	ldrb	r3, [r3, #14]
 800ceda:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cedc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	7bdb      	ldrb	r3, [r3, #15]
 800cee2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cee4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	7a5b      	ldrb	r3, [r3, #9]
 800ceea:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ceec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	7a1b      	ldrb	r3, [r3, #8]
 800cef2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cef4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	7812      	ldrb	r2, [r2, #0]
 800cefa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cefc:	4a07      	ldr	r2, [pc, #28]	; (800cf1c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cefe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cf00:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800cf02:	e005      	b.n	800cf10 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800cf04:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <HAL_MPU_ConfigRegion+0x84>)
 800cf06:	2200      	movs	r2, #0
 800cf08:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800cf0a:	4b04      	ldr	r3, [pc, #16]	; (800cf1c <HAL_MPU_ConfigRegion+0x84>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	611a      	str	r2, [r3, #16]
}
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	e000ed90 	.word	0xe000ed90

0800cf20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e054      	b.n	800cfdc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	7f5b      	ldrb	r3, [r3, #29]
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d105      	bne.n	800cf48 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7fa f90e 	bl	8007164 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	791b      	ldrb	r3, [r3, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d10c      	bne.n	800cf70 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a22      	ldr	r2, [pc, #136]	; (800cfe4 <HAL_CRC_Init+0xc4>)
 800cf5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	689a      	ldr	r2, [r3, #8]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f022 0218 	bic.w	r2, r2, #24
 800cf6c:	609a      	str	r2, [r3, #8]
 800cf6e:	e00c      	b.n	800cf8a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6899      	ldr	r1, [r3, #8]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f834 	bl	800cfe8 <HAL_CRCEx_Polynomial_Set>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d001      	beq.n	800cf8a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e028      	b.n	800cfdc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	795b      	ldrb	r3, [r3, #5]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d105      	bne.n	800cf9e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f04f 32ff 	mov.w	r2, #4294967295
 800cf9a:	611a      	str	r2, [r3, #16]
 800cf9c:	e004      	b.n	800cfa8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	6912      	ldr	r2, [r2, #16]
 800cfa6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	695a      	ldr	r2, [r3, #20]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	430a      	orrs	r2, r1
 800cfbc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	699a      	ldr	r2, [r3, #24]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	430a      	orrs	r2, r1
 800cfd2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	04c11db7 	.word	0x04c11db7

0800cfe8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b087      	sub	sp, #28
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cff4:	2300      	movs	r3, #0
 800cff6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800cff8:	231f      	movs	r3, #31
 800cffa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	f003 0301 	and.w	r3, r3, #1
 800d002:	2b00      	cmp	r3, #0
 800d004:	d102      	bne.n	800d00c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	75fb      	strb	r3, [r7, #23]
 800d00a:	e063      	b.n	800d0d4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d00c:	bf00      	nop
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	1e5a      	subs	r2, r3, #1
 800d012:	613a      	str	r2, [r7, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d009      	beq.n	800d02c <HAL_CRCEx_Polynomial_Set+0x44>
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	f003 031f 	and.w	r3, r3, #31
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	fa22 f303 	lsr.w	r3, r2, r3
 800d024:	f003 0301 	and.w	r3, r3, #1
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d0f0      	beq.n	800d00e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b18      	cmp	r3, #24
 800d030:	d846      	bhi.n	800d0c0 <HAL_CRCEx_Polynomial_Set+0xd8>
 800d032:	a201      	add	r2, pc, #4	; (adr r2, 800d038 <HAL_CRCEx_Polynomial_Set+0x50>)
 800d034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d038:	0800d0c7 	.word	0x0800d0c7
 800d03c:	0800d0c1 	.word	0x0800d0c1
 800d040:	0800d0c1 	.word	0x0800d0c1
 800d044:	0800d0c1 	.word	0x0800d0c1
 800d048:	0800d0c1 	.word	0x0800d0c1
 800d04c:	0800d0c1 	.word	0x0800d0c1
 800d050:	0800d0c1 	.word	0x0800d0c1
 800d054:	0800d0c1 	.word	0x0800d0c1
 800d058:	0800d0b5 	.word	0x0800d0b5
 800d05c:	0800d0c1 	.word	0x0800d0c1
 800d060:	0800d0c1 	.word	0x0800d0c1
 800d064:	0800d0c1 	.word	0x0800d0c1
 800d068:	0800d0c1 	.word	0x0800d0c1
 800d06c:	0800d0c1 	.word	0x0800d0c1
 800d070:	0800d0c1 	.word	0x0800d0c1
 800d074:	0800d0c1 	.word	0x0800d0c1
 800d078:	0800d0a9 	.word	0x0800d0a9
 800d07c:	0800d0c1 	.word	0x0800d0c1
 800d080:	0800d0c1 	.word	0x0800d0c1
 800d084:	0800d0c1 	.word	0x0800d0c1
 800d088:	0800d0c1 	.word	0x0800d0c1
 800d08c:	0800d0c1 	.word	0x0800d0c1
 800d090:	0800d0c1 	.word	0x0800d0c1
 800d094:	0800d0c1 	.word	0x0800d0c1
 800d098:	0800d09d 	.word	0x0800d09d
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	2b06      	cmp	r3, #6
 800d0a0:	d913      	bls.n	800d0ca <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d0a6:	e010      	b.n	800d0ca <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	2b07      	cmp	r3, #7
 800d0ac:	d90f      	bls.n	800d0ce <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d0b2:	e00c      	b.n	800d0ce <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	2b0f      	cmp	r3, #15
 800d0b8:	d90b      	bls.n	800d0d2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d0be:	e008      	b.n	800d0d2 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	75fb      	strb	r3, [r7, #23]
        break;
 800d0c4:	e006      	b.n	800d0d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d0c6:	bf00      	nop
 800d0c8:	e004      	b.n	800d0d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d0ca:	bf00      	nop
 800d0cc:	e002      	b.n	800d0d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d0ce:	bf00      	nop
 800d0d0:	e000      	b.n	800d0d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d0d2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800d0d4:	7dfb      	ldrb	r3, [r7, #23]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10d      	bne.n	800d0f6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	f023 0118 	bic.w	r1, r3, #24
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	430a      	orrs	r2, r1
 800d0f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800d0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	371c      	adds	r7, #28
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d101      	bne.n	800d116 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	e04f      	b.n	800d1b6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d106      	bne.n	800d130 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f7fa f83c 	bl	80071a8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2202      	movs	r2, #2
 800d134:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	4b20      	ldr	r3, [pc, #128]	; (800d1c0 <HAL_DMA2D_Init+0xbc>)
 800d140:	4013      	ands	r3, r2
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	6851      	ldr	r1, [r2, #4]
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	69d2      	ldr	r2, [r2, #28]
 800d14a:	4311      	orrs	r1, r2
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	6812      	ldr	r2, [r2, #0]
 800d150:	430b      	orrs	r3, r1
 800d152:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d15a:	4b1a      	ldr	r3, [pc, #104]	; (800d1c4 <HAL_DMA2D_Init+0xc0>)
 800d15c:	4013      	ands	r3, r2
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	6891      	ldr	r1, [r2, #8]
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	6992      	ldr	r2, [r2, #24]
 800d166:	4311      	orrs	r1, r2
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	6812      	ldr	r2, [r2, #0]
 800d16c:	430b      	orrs	r3, r1
 800d16e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d176:	4b14      	ldr	r3, [pc, #80]	; (800d1c8 <HAL_DMA2D_Init+0xc4>)
 800d178:	4013      	ands	r3, r2
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	68d1      	ldr	r1, [r2, #12]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	6812      	ldr	r2, [r2, #0]
 800d182:	430b      	orrs	r3, r1
 800d184:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	051a      	lsls	r2, r3, #20
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	695b      	ldr	r3, [r3, #20]
 800d19a:	055b      	lsls	r3, r3, #21
 800d19c:	431a      	orrs	r2, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	430a      	orrs	r2, r1
 800d1a4:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800d1b4:	2300      	movs	r3, #0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	fff8ffbf 	.word	0xfff8ffbf
 800d1c4:	fffffef8 	.word	0xfffffef8
 800d1c8:	ffff0000 	.word	0xffff0000

0800d1cc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d026      	beq.n	800d23c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d021      	beq.n	800d23c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d206:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d20c:	f043 0201 	orr.w	r2, r3, #1
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2201      	movs	r2, #1
 800d21a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2204      	movs	r2, #4
 800d220:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2200      	movs	r2, #0
 800d228:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d230:	2b00      	cmp	r3, #0
 800d232:	d003      	beq.n	800d23c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f003 0320 	and.w	r3, r3, #32
 800d242:	2b00      	cmp	r3, #0
 800d244:	d026      	beq.n	800d294 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d021      	beq.n	800d294 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d25e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2220      	movs	r2, #32
 800d266:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d26c:	f043 0202 	orr.w	r2, r3, #2
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2204      	movs	r2, #4
 800d278:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d003      	beq.n	800d294 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f003 0308 	and.w	r3, r3, #8
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d026      	beq.n	800d2ec <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d021      	beq.n	800d2ec <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d2b6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2208      	movs	r2, #8
 800d2be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2c4:	f043 0204 	orr.w	r2, r3, #4
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2204      	movs	r2, #4
 800d2d0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d003      	beq.n	800d2ec <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f003 0304 	and.w	r3, r3, #4
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d013      	beq.n	800d31e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00e      	beq.n	800d31e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d30e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2204      	movs	r2, #4
 800d316:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f853 	bl	800d3c4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f003 0302 	and.w	r3, r3, #2
 800d324:	2b00      	cmp	r3, #0
 800d326:	d024      	beq.n	800d372 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d01f      	beq.n	800d372 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d340:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2202      	movs	r2, #2
 800d348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2201      	movs	r2, #1
 800d356:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2200      	movs	r2, #0
 800d35e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d003      	beq.n	800d372 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6a1b      	ldr	r3, [r3, #32]
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f003 0310 	and.w	r3, r3, #16
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d01f      	beq.n	800d3bc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d382:	2b00      	cmp	r3, #0
 800d384:	d01a      	beq.n	800d3bc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d394:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2210      	movs	r2, #16
 800d39c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f80e 	bl	800d3d8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d3bc:	bf00      	nop
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d3cc:	bf00      	nop
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b087      	sub	sp, #28
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d101      	bne.n	800d410 <HAL_DMA2D_ConfigLayer+0x24>
 800d40c:	2302      	movs	r3, #2
 800d40e:	e092      	b.n	800d536 <HAL_DMA2D_ConfigLayer+0x14a>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2202      	movs	r2, #2
 800d41c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	4613      	mov	r3, r2
 800d424:	00db      	lsls	r3, r3, #3
 800d426:	1a9b      	subs	r3, r3, r2
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	3328      	adds	r3, #40	; 0x28
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	4413      	add	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	041b      	lsls	r3, r3, #16
 800d43c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	691b      	ldr	r3, [r3, #16]
 800d442:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d444:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d44c:	4313      	orrs	r3, r2
 800d44e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800d450:	4b3c      	ldr	r3, [pc, #240]	; (800d544 <HAL_DMA2D_ConfigLayer+0x158>)
 800d452:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	2b0a      	cmp	r3, #10
 800d45a:	d003      	beq.n	800d464 <HAL_DMA2D_ConfigLayer+0x78>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	2b09      	cmp	r3, #9
 800d462:	d107      	bne.n	800d474 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d46c:	693a      	ldr	r2, [r7, #16]
 800d46e:	4313      	orrs	r3, r2
 800d470:	613b      	str	r3, [r7, #16]
 800d472:	e005      	b.n	800d480 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	061b      	lsls	r3, r3, #24
 800d47a:	693a      	ldr	r2, [r7, #16]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d120      	bne.n	800d4c8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	43db      	mvns	r3, r3
 800d490:	ea02 0103 	and.w	r1, r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	430a      	orrs	r2, r1
 800d49c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	6812      	ldr	r2, [r2, #0]
 800d4a6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	2b0a      	cmp	r3, #10
 800d4ae:	d003      	beq.n	800d4b8 <HAL_DMA2D_ConfigLayer+0xcc>
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	2b09      	cmp	r3, #9
 800d4b6:	d135      	bne.n	800d524 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	68da      	ldr	r2, [r3, #12]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d4c4:	629a      	str	r2, [r3, #40]	; 0x28
 800d4c6:	e02d      	b.n	800d524 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	2b0b      	cmp	r3, #11
 800d4ce:	d109      	bne.n	800d4e4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	049b      	lsls	r3, r3, #18
 800d4d6:	693a      	ldr	r2, [r7, #16]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800d4e2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	69da      	ldr	r2, [r3, #28]
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	43db      	mvns	r3, r3
 800d4ee:	ea02 0103 	and.w	r1, r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	430a      	orrs	r2, r1
 800d4fa:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	6812      	ldr	r2, [r2, #0]
 800d504:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	2b0a      	cmp	r3, #10
 800d50c:	d003      	beq.n	800d516 <HAL_DMA2D_ConfigLayer+0x12a>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	2b09      	cmp	r3, #9
 800d514:	d106      	bne.n	800d524 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	68da      	ldr	r2, [r3, #12]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d522:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	371c      	adds	r7, #28
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	ff33000f 	.word	0xff33000f

0800d548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d548:	b480      	push	{r7}
 800d54a:	b089      	sub	sp, #36	; 0x24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d552:	2300      	movs	r3, #0
 800d554:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d556:	4b89      	ldr	r3, [pc, #548]	; (800d77c <HAL_GPIO_Init+0x234>)
 800d558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d55a:	e194      	b.n	800d886 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	2101      	movs	r1, #1
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	fa01 f303 	lsl.w	r3, r1, r3
 800d568:	4013      	ands	r3, r2
 800d56a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 8186 	beq.w	800d880 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	f003 0303 	and.w	r3, r3, #3
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d005      	beq.n	800d58c <HAL_GPIO_Init+0x44>
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	f003 0303 	and.w	r3, r3, #3
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d130      	bne.n	800d5ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	2203      	movs	r2, #3
 800d598:	fa02 f303 	lsl.w	r3, r2, r3
 800d59c:	43db      	mvns	r3, r3
 800d59e:	69ba      	ldr	r2, [r7, #24]
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	68da      	ldr	r2, [r3, #12]
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d5b0:	69ba      	ldr	r2, [r7, #24]
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	69ba      	ldr	r2, [r7, #24]
 800d5ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5ca:	43db      	mvns	r3, r3
 800d5cc:	69ba      	ldr	r2, [r7, #24]
 800d5ce:	4013      	ands	r3, r2
 800d5d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	091b      	lsrs	r3, r3, #4
 800d5d8:	f003 0201 	and.w	r2, r3, #1
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e2:	69ba      	ldr	r2, [r7, #24]
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	69ba      	ldr	r2, [r7, #24]
 800d5ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	f003 0303 	and.w	r3, r3, #3
 800d5f6:	2b03      	cmp	r3, #3
 800d5f8:	d017      	beq.n	800d62a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	2203      	movs	r2, #3
 800d606:	fa02 f303 	lsl.w	r3, r2, r3
 800d60a:	43db      	mvns	r3, r3
 800d60c:	69ba      	ldr	r2, [r7, #24]
 800d60e:	4013      	ands	r3, r2
 800d610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	689a      	ldr	r2, [r3, #8]
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	005b      	lsls	r3, r3, #1
 800d61a:	fa02 f303 	lsl.w	r3, r2, r3
 800d61e:	69ba      	ldr	r2, [r7, #24]
 800d620:	4313      	orrs	r3, r2
 800d622:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	69ba      	ldr	r2, [r7, #24]
 800d628:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	f003 0303 	and.w	r3, r3, #3
 800d632:	2b02      	cmp	r3, #2
 800d634:	d123      	bne.n	800d67e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	08da      	lsrs	r2, r3, #3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	3208      	adds	r2, #8
 800d63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	f003 0307 	and.w	r3, r3, #7
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	220f      	movs	r2, #15
 800d64e:	fa02 f303 	lsl.w	r3, r2, r3
 800d652:	43db      	mvns	r3, r3
 800d654:	69ba      	ldr	r2, [r7, #24]
 800d656:	4013      	ands	r3, r2
 800d658:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	691a      	ldr	r2, [r3, #16]
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	f003 0307 	and.w	r3, r3, #7
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	fa02 f303 	lsl.w	r3, r2, r3
 800d66a:	69ba      	ldr	r2, [r7, #24]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	08da      	lsrs	r2, r3, #3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	3208      	adds	r2, #8
 800d678:	69b9      	ldr	r1, [r7, #24]
 800d67a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	005b      	lsls	r3, r3, #1
 800d688:	2203      	movs	r2, #3
 800d68a:	fa02 f303 	lsl.w	r3, r2, r3
 800d68e:	43db      	mvns	r3, r3
 800d690:	69ba      	ldr	r2, [r7, #24]
 800d692:	4013      	ands	r3, r2
 800d694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	f003 0203 	and.w	r2, r3, #3
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	005b      	lsls	r3, r3, #1
 800d6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a6:	69ba      	ldr	r2, [r7, #24]
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	69ba      	ldr	r2, [r7, #24]
 800d6b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f000 80e0 	beq.w	800d880 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d6c0:	4b2f      	ldr	r3, [pc, #188]	; (800d780 <HAL_GPIO_Init+0x238>)
 800d6c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d6c6:	4a2e      	ldr	r2, [pc, #184]	; (800d780 <HAL_GPIO_Init+0x238>)
 800d6c8:	f043 0302 	orr.w	r3, r3, #2
 800d6cc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800d6d0:	4b2b      	ldr	r3, [pc, #172]	; (800d780 <HAL_GPIO_Init+0x238>)
 800d6d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d6d6:	f003 0302 	and.w	r3, r3, #2
 800d6da:	60fb      	str	r3, [r7, #12]
 800d6dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d6de:	4a29      	ldr	r2, [pc, #164]	; (800d784 <HAL_GPIO_Init+0x23c>)
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	089b      	lsrs	r3, r3, #2
 800d6e4:	3302      	adds	r3, #2
 800d6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	f003 0303 	and.w	r3, r3, #3
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	220f      	movs	r2, #15
 800d6f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d6fa:	43db      	mvns	r3, r3
 800d6fc:	69ba      	ldr	r2, [r7, #24]
 800d6fe:	4013      	ands	r3, r2
 800d700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4a20      	ldr	r2, [pc, #128]	; (800d788 <HAL_GPIO_Init+0x240>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d052      	beq.n	800d7b0 <HAL_GPIO_Init+0x268>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4a1f      	ldr	r2, [pc, #124]	; (800d78c <HAL_GPIO_Init+0x244>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d031      	beq.n	800d776 <HAL_GPIO_Init+0x22e>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	4a1e      	ldr	r2, [pc, #120]	; (800d790 <HAL_GPIO_Init+0x248>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d02b      	beq.n	800d772 <HAL_GPIO_Init+0x22a>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4a1d      	ldr	r2, [pc, #116]	; (800d794 <HAL_GPIO_Init+0x24c>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d025      	beq.n	800d76e <HAL_GPIO_Init+0x226>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4a1c      	ldr	r2, [pc, #112]	; (800d798 <HAL_GPIO_Init+0x250>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d01f      	beq.n	800d76a <HAL_GPIO_Init+0x222>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4a1b      	ldr	r2, [pc, #108]	; (800d79c <HAL_GPIO_Init+0x254>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d019      	beq.n	800d766 <HAL_GPIO_Init+0x21e>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4a1a      	ldr	r2, [pc, #104]	; (800d7a0 <HAL_GPIO_Init+0x258>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d013      	beq.n	800d762 <HAL_GPIO_Init+0x21a>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4a19      	ldr	r2, [pc, #100]	; (800d7a4 <HAL_GPIO_Init+0x25c>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d00d      	beq.n	800d75e <HAL_GPIO_Init+0x216>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4a18      	ldr	r2, [pc, #96]	; (800d7a8 <HAL_GPIO_Init+0x260>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d007      	beq.n	800d75a <HAL_GPIO_Init+0x212>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4a17      	ldr	r2, [pc, #92]	; (800d7ac <HAL_GPIO_Init+0x264>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d101      	bne.n	800d756 <HAL_GPIO_Init+0x20e>
 800d752:	2309      	movs	r3, #9
 800d754:	e02d      	b.n	800d7b2 <HAL_GPIO_Init+0x26a>
 800d756:	230a      	movs	r3, #10
 800d758:	e02b      	b.n	800d7b2 <HAL_GPIO_Init+0x26a>
 800d75a:	2308      	movs	r3, #8
 800d75c:	e029      	b.n	800d7b2 <HAL_GPIO_Init+0x26a>
 800d75e:	2307      	movs	r3, #7
 800d760:	e027      	b.n	800d7b2 <HAL_GPIO_Init+0x26a>
 800d762:	2306      	movs	r3, #6
 800d764:	e025      	b.n	800d7b2 <HAL_GPIO_Init+0x26a>
 800d766:	2305      	movs	r3, #5
 800d768:	e023      	b.n	800d7b2 <HAL_GPIO_Init+0x26a>
 800d76a:	2304      	movs	r3, #4
 800d76c:	e021      	b.n	800d7b2 <HAL_GPIO_Init+0x26a>
 800d76e:	2303      	movs	r3, #3
 800d770:	e01f      	b.n	800d7b2 <HAL_GPIO_Init+0x26a>
 800d772:	2302      	movs	r3, #2
 800d774:	e01d      	b.n	800d7b2 <HAL_GPIO_Init+0x26a>
 800d776:	2301      	movs	r3, #1
 800d778:	e01b      	b.n	800d7b2 <HAL_GPIO_Init+0x26a>
 800d77a:	bf00      	nop
 800d77c:	58000080 	.word	0x58000080
 800d780:	58024400 	.word	0x58024400
 800d784:	58000400 	.word	0x58000400
 800d788:	58020000 	.word	0x58020000
 800d78c:	58020400 	.word	0x58020400
 800d790:	58020800 	.word	0x58020800
 800d794:	58020c00 	.word	0x58020c00
 800d798:	58021000 	.word	0x58021000
 800d79c:	58021400 	.word	0x58021400
 800d7a0:	58021800 	.word	0x58021800
 800d7a4:	58021c00 	.word	0x58021c00
 800d7a8:	58022000 	.word	0x58022000
 800d7ac:	58022400 	.word	0x58022400
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	69fa      	ldr	r2, [r7, #28]
 800d7b4:	f002 0203 	and.w	r2, r2, #3
 800d7b8:	0092      	lsls	r2, r2, #2
 800d7ba:	4093      	lsls	r3, r2
 800d7bc:	69ba      	ldr	r2, [r7, #24]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d7c2:	4938      	ldr	r1, [pc, #224]	; (800d8a4 <HAL_GPIO_Init+0x35c>)
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	089b      	lsrs	r3, r3, #2
 800d7c8:	3302      	adds	r3, #2
 800d7ca:	69ba      	ldr	r2, [r7, #24]
 800d7cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d7d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	43db      	mvns	r3, r3
 800d7dc:	69ba      	ldr	r2, [r7, #24]
 800d7de:	4013      	ands	r3, r2
 800d7e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d003      	beq.n	800d7f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800d7ee:	69ba      	ldr	r2, [r7, #24]
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d7f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d7fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	43db      	mvns	r3, r3
 800d80a:	69ba      	ldr	r2, [r7, #24]
 800d80c:	4013      	ands	r3, r2
 800d80e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d003      	beq.n	800d824 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d81c:	69ba      	ldr	r2, [r7, #24]
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	4313      	orrs	r3, r2
 800d822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	43db      	mvns	r3, r3
 800d836:	69ba      	ldr	r2, [r7, #24]
 800d838:	4013      	ands	r3, r2
 800d83a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d844:	2b00      	cmp	r3, #0
 800d846:	d003      	beq.n	800d850 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800d848:	69ba      	ldr	r2, [r7, #24]
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	69ba      	ldr	r2, [r7, #24]
 800d854:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	43db      	mvns	r3, r3
 800d860:	69ba      	ldr	r2, [r7, #24]
 800d862:	4013      	ands	r3, r2
 800d864:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d003      	beq.n	800d87a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800d872:	69ba      	ldr	r2, [r7, #24]
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	4313      	orrs	r3, r2
 800d878:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	69ba      	ldr	r2, [r7, #24]
 800d87e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	3301      	adds	r3, #1
 800d884:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	fa22 f303 	lsr.w	r3, r2, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	f47f ae63 	bne.w	800d55c <HAL_GPIO_Init+0x14>
  }
}
 800d896:	bf00      	nop
 800d898:	bf00      	nop
 800d89a:	3724      	adds	r7, #36	; 0x24
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	58000400 	.word	0x58000400

0800d8a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b087      	sub	sp, #28
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d8b6:	4b75      	ldr	r3, [pc, #468]	; (800da8c <HAL_GPIO_DeInit+0x1e4>)
 800d8b8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d8ba:	e0d9      	b.n	800da70 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d8bc:	2201      	movs	r2, #1
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c4:	683a      	ldr	r2, [r7, #0]
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 80cc 	beq.w	800da6a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d8d2:	4a6f      	ldr	r2, [pc, #444]	; (800da90 <HAL_GPIO_DeInit+0x1e8>)
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	089b      	lsrs	r3, r3, #2
 800d8d8:	3302      	adds	r3, #2
 800d8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8de:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	f003 0303 	and.w	r3, r3, #3
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	220f      	movs	r2, #15
 800d8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d8ee:	68ba      	ldr	r2, [r7, #8]
 800d8f0:	4013      	ands	r3, r2
 800d8f2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4a67      	ldr	r2, [pc, #412]	; (800da94 <HAL_GPIO_DeInit+0x1ec>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d037      	beq.n	800d96c <HAL_GPIO_DeInit+0xc4>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	4a66      	ldr	r2, [pc, #408]	; (800da98 <HAL_GPIO_DeInit+0x1f0>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d031      	beq.n	800d968 <HAL_GPIO_DeInit+0xc0>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	4a65      	ldr	r2, [pc, #404]	; (800da9c <HAL_GPIO_DeInit+0x1f4>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d02b      	beq.n	800d964 <HAL_GPIO_DeInit+0xbc>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4a64      	ldr	r2, [pc, #400]	; (800daa0 <HAL_GPIO_DeInit+0x1f8>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d025      	beq.n	800d960 <HAL_GPIO_DeInit+0xb8>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	4a63      	ldr	r2, [pc, #396]	; (800daa4 <HAL_GPIO_DeInit+0x1fc>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d01f      	beq.n	800d95c <HAL_GPIO_DeInit+0xb4>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	4a62      	ldr	r2, [pc, #392]	; (800daa8 <HAL_GPIO_DeInit+0x200>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d019      	beq.n	800d958 <HAL_GPIO_DeInit+0xb0>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a61      	ldr	r2, [pc, #388]	; (800daac <HAL_GPIO_DeInit+0x204>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d013      	beq.n	800d954 <HAL_GPIO_DeInit+0xac>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4a60      	ldr	r2, [pc, #384]	; (800dab0 <HAL_GPIO_DeInit+0x208>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d00d      	beq.n	800d950 <HAL_GPIO_DeInit+0xa8>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	4a5f      	ldr	r2, [pc, #380]	; (800dab4 <HAL_GPIO_DeInit+0x20c>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d007      	beq.n	800d94c <HAL_GPIO_DeInit+0xa4>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4a5e      	ldr	r2, [pc, #376]	; (800dab8 <HAL_GPIO_DeInit+0x210>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d101      	bne.n	800d948 <HAL_GPIO_DeInit+0xa0>
 800d944:	2309      	movs	r3, #9
 800d946:	e012      	b.n	800d96e <HAL_GPIO_DeInit+0xc6>
 800d948:	230a      	movs	r3, #10
 800d94a:	e010      	b.n	800d96e <HAL_GPIO_DeInit+0xc6>
 800d94c:	2308      	movs	r3, #8
 800d94e:	e00e      	b.n	800d96e <HAL_GPIO_DeInit+0xc6>
 800d950:	2307      	movs	r3, #7
 800d952:	e00c      	b.n	800d96e <HAL_GPIO_DeInit+0xc6>
 800d954:	2306      	movs	r3, #6
 800d956:	e00a      	b.n	800d96e <HAL_GPIO_DeInit+0xc6>
 800d958:	2305      	movs	r3, #5
 800d95a:	e008      	b.n	800d96e <HAL_GPIO_DeInit+0xc6>
 800d95c:	2304      	movs	r3, #4
 800d95e:	e006      	b.n	800d96e <HAL_GPIO_DeInit+0xc6>
 800d960:	2303      	movs	r3, #3
 800d962:	e004      	b.n	800d96e <HAL_GPIO_DeInit+0xc6>
 800d964:	2302      	movs	r3, #2
 800d966:	e002      	b.n	800d96e <HAL_GPIO_DeInit+0xc6>
 800d968:	2301      	movs	r3, #1
 800d96a:	e000      	b.n	800d96e <HAL_GPIO_DeInit+0xc6>
 800d96c:	2300      	movs	r3, #0
 800d96e:	697a      	ldr	r2, [r7, #20]
 800d970:	f002 0203 	and.w	r2, r2, #3
 800d974:	0092      	lsls	r2, r2, #2
 800d976:	4093      	lsls	r3, r2
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d136      	bne.n	800d9ec <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	43db      	mvns	r3, r3
 800d986:	401a      	ands	r2, r3
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	43db      	mvns	r3, r3
 800d994:	401a      	ands	r2, r3
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800d99a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d99e:	685a      	ldr	r2, [r3, #4]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	43db      	mvns	r3, r3
 800d9a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800d9ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	43db      	mvns	r3, r3
 800d9b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	f003 0303 	and.w	r3, r3, #3
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	220f      	movs	r2, #15
 800d9c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9cc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d9ce:	4a30      	ldr	r2, [pc, #192]	; (800da90 <HAL_GPIO_DeInit+0x1e8>)
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	089b      	lsrs	r3, r3, #2
 800d9d4:	3302      	adds	r3, #2
 800d9d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	43da      	mvns	r2, r3
 800d9de:	482c      	ldr	r0, [pc, #176]	; (800da90 <HAL_GPIO_DeInit+0x1e8>)
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	089b      	lsrs	r3, r3, #2
 800d9e4:	400a      	ands	r2, r1
 800d9e6:	3302      	adds	r3, #2
 800d9e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	005b      	lsls	r3, r3, #1
 800d9f4:	2103      	movs	r1, #3
 800d9f6:	fa01 f303 	lsl.w	r3, r1, r3
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	08da      	lsrs	r2, r3, #3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	3208      	adds	r2, #8
 800da08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	f003 0307 	and.w	r3, r3, #7
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	220f      	movs	r2, #15
 800da16:	fa02 f303 	lsl.w	r3, r2, r3
 800da1a:	43db      	mvns	r3, r3
 800da1c:	697a      	ldr	r2, [r7, #20]
 800da1e:	08d2      	lsrs	r2, r2, #3
 800da20:	4019      	ands	r1, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	3208      	adds	r2, #8
 800da26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68da      	ldr	r2, [r3, #12]
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	005b      	lsls	r3, r3, #1
 800da32:	2103      	movs	r1, #3
 800da34:	fa01 f303 	lsl.w	r3, r1, r3
 800da38:	43db      	mvns	r3, r3
 800da3a:	401a      	ands	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685a      	ldr	r2, [r3, #4]
 800da44:	2101      	movs	r1, #1
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	fa01 f303 	lsl.w	r3, r1, r3
 800da4c:	43db      	mvns	r3, r3
 800da4e:	401a      	ands	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	689a      	ldr	r2, [r3, #8]
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	005b      	lsls	r3, r3, #1
 800da5c:	2103      	movs	r1, #3
 800da5e:	fa01 f303 	lsl.w	r3, r1, r3
 800da62:	43db      	mvns	r3, r3
 800da64:	401a      	ands	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	609a      	str	r2, [r3, #8]
    }

    position++;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	3301      	adds	r3, #1
 800da6e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800da70:	683a      	ldr	r2, [r7, #0]
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	fa22 f303 	lsr.w	r3, r2, r3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f47f af1f 	bne.w	800d8bc <HAL_GPIO_DeInit+0x14>
  }
}
 800da7e:	bf00      	nop
 800da80:	bf00      	nop
 800da82:	371c      	adds	r7, #28
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	58000080 	.word	0x58000080
 800da90:	58000400 	.word	0x58000400
 800da94:	58020000 	.word	0x58020000
 800da98:	58020400 	.word	0x58020400
 800da9c:	58020800 	.word	0x58020800
 800daa0:	58020c00 	.word	0x58020c00
 800daa4:	58021000 	.word	0x58021000
 800daa8:	58021400 	.word	0x58021400
 800daac:	58021800 	.word	0x58021800
 800dab0:	58021c00 	.word	0x58021c00
 800dab4:	58022000 	.word	0x58022000
 800dab8:	58022400 	.word	0x58022400

0800dabc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	691a      	ldr	r2, [r3, #16]
 800dacc:	887b      	ldrh	r3, [r7, #2]
 800dace:	4013      	ands	r3, r2
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800dad4:	2301      	movs	r3, #1
 800dad6:	73fb      	strb	r3, [r7, #15]
 800dad8:	e001      	b.n	800dade <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800dada:	2300      	movs	r3, #0
 800dadc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dade:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3714      	adds	r7, #20
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	807b      	strh	r3, [r7, #2]
 800daf8:	4613      	mov	r3, r2
 800dafa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dafc:	787b      	ldrb	r3, [r7, #1]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d003      	beq.n	800db0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800db02:	887a      	ldrh	r2, [r7, #2]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800db08:	e003      	b.n	800db12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800db0a:	887b      	ldrh	r3, [r7, #2]
 800db0c:	041a      	lsls	r2, r3, #16
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	619a      	str	r2, [r3, #24]
}
 800db12:	bf00      	nop
 800db14:	370c      	adds	r7, #12
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800db1e:	b480      	push	{r7}
 800db20:	b085      	sub	sp, #20
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	460b      	mov	r3, r1
 800db28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	695b      	ldr	r3, [r3, #20]
 800db2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800db30:	887a      	ldrh	r2, [r7, #2]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	4013      	ands	r3, r2
 800db36:	041a      	lsls	r2, r3, #16
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	43d9      	mvns	r1, r3
 800db3c:	887b      	ldrh	r3, [r7, #2]
 800db3e:	400b      	ands	r3, r1
 800db40:	431a      	orrs	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	619a      	str	r2, [r3, #24]
}
 800db46:	bf00      	nop
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr

0800db52 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b082      	sub	sp, #8
 800db56:	af00      	add	r7, sp, #0
 800db58:	4603      	mov	r3, r0
 800db5a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800db5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800db64:	88fb      	ldrh	r3, [r7, #6]
 800db66:	4013      	ands	r3, r2
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d008      	beq.n	800db7e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800db6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db70:	88fb      	ldrh	r3, [r7, #6]
 800db72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800db76:	88fb      	ldrh	r3, [r7, #6]
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 f804 	bl	800db86 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800db7e:	bf00      	nop
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800db86:	b480      	push	{r7}
 800db88:	b083      	sub	sp, #12
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	4603      	mov	r3, r0
 800db8e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800db90:	bf00      	nop
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d101      	bne.n	800dbae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e07f      	b.n	800dcae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d106      	bne.n	800dbc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7f9 fb18 	bl	80071f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2224      	movs	r2, #36	; 0x24
 800dbcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f022 0201 	bic.w	r2, r2, #1
 800dbde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800dbec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	689a      	ldr	r2, [r3, #8]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dbfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d107      	bne.n	800dc16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	689a      	ldr	r2, [r3, #8]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dc12:	609a      	str	r2, [r3, #8]
 800dc14:	e006      	b.n	800dc24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	689a      	ldr	r2, [r3, #8]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800dc22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	d104      	bne.n	800dc36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6859      	ldr	r1, [r3, #4]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	4b1d      	ldr	r3, [pc, #116]	; (800dcb8 <HAL_I2C_Init+0x11c>)
 800dc42:	430b      	orrs	r3, r1
 800dc44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	68da      	ldr	r2, [r3, #12]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dc54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	691a      	ldr	r2, [r3, #16]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	699b      	ldr	r3, [r3, #24]
 800dc66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	430a      	orrs	r2, r1
 800dc6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	69d9      	ldr	r1, [r3, #28]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6a1a      	ldr	r2, [r3, #32]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	430a      	orrs	r2, r1
 800dc7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f042 0201 	orr.w	r2, r2, #1
 800dc8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2220      	movs	r2, #32
 800dc9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	02008000 	.word	0x02008000

0800dcbc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d101      	bne.n	800dcce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e021      	b.n	800dd12 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2224      	movs	r2, #36	; 0x24
 800dcd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f022 0201 	bic.w	r2, r2, #1
 800dce4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7f9 faf0 	bl	80072cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3708      	adds	r7, #8
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
	...

0800dd1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b088      	sub	sp, #32
 800dd20:	af02      	add	r7, sp, #8
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	4608      	mov	r0, r1
 800dd26:	4611      	mov	r1, r2
 800dd28:	461a      	mov	r2, r3
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	817b      	strh	r3, [r7, #10]
 800dd2e:	460b      	mov	r3, r1
 800dd30:	813b      	strh	r3, [r7, #8]
 800dd32:	4613      	mov	r3, r2
 800dd34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b20      	cmp	r3, #32
 800dd40:	f040 80f9 	bne.w	800df36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d002      	beq.n	800dd50 <HAL_I2C_Mem_Write+0x34>
 800dd4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d105      	bne.n	800dd5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e0ed      	b.n	800df38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d101      	bne.n	800dd6a <HAL_I2C_Mem_Write+0x4e>
 800dd66:	2302      	movs	r3, #2
 800dd68:	e0e6      	b.n	800df38 <HAL_I2C_Mem_Write+0x21c>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dd72:	f7fe ff17 	bl	800cba4 <HAL_GetTick>
 800dd76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	2319      	movs	r3, #25
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f000 fadd 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d001      	beq.n	800dd94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800dd90:	2301      	movs	r3, #1
 800dd92:	e0d1      	b.n	800df38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2221      	movs	r2, #33	; 0x21
 800dd98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2240      	movs	r2, #64	; 0x40
 800dda0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2200      	movs	r2, #0
 800dda8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6a3a      	ldr	r2, [r7, #32]
 800ddae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ddb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ddbc:	88f8      	ldrh	r0, [r7, #6]
 800ddbe:	893a      	ldrh	r2, [r7, #8]
 800ddc0:	8979      	ldrh	r1, [r7, #10]
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	9301      	str	r3, [sp, #4]
 800ddc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	4603      	mov	r3, r0
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f000 f9ed 	bl	800e1ac <I2C_RequestMemoryWrite>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d005      	beq.n	800dde4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800dde0:	2301      	movs	r3, #1
 800dde2:	e0a9      	b.n	800df38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	2bff      	cmp	r3, #255	; 0xff
 800ddec:	d90e      	bls.n	800de0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	22ff      	movs	r2, #255	; 0xff
 800ddf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	8979      	ldrh	r1, [r7, #10]
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f000 fc57 	bl	800e6b8 <I2C_TransferConfig>
 800de0a:	e00f      	b.n	800de2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de10:	b29a      	uxth	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de1a:	b2da      	uxtb	r2, r3
 800de1c:	8979      	ldrh	r1, [r7, #10]
 800de1e:	2300      	movs	r3, #0
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f000 fc46 	bl	800e6b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800de2c:	697a      	ldr	r2, [r7, #20]
 800de2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f000 fad6 	bl	800e3e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800de3c:	2301      	movs	r3, #1
 800de3e:	e07b      	b.n	800df38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de44:	781a      	ldrb	r2, [r3, #0]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de50:	1c5a      	adds	r2, r3, #1
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	3b01      	subs	r3, #1
 800de5e:	b29a      	uxth	r2, r3
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de68:	3b01      	subs	r3, #1
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de74:	b29b      	uxth	r3, r3
 800de76:	2b00      	cmp	r3, #0
 800de78:	d034      	beq.n	800dee4 <HAL_I2C_Mem_Write+0x1c8>
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d130      	bne.n	800dee4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de88:	2200      	movs	r2, #0
 800de8a:	2180      	movs	r1, #128	; 0x80
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	f000 fa59 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800de92:	4603      	mov	r3, r0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d001      	beq.n	800de9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800de98:	2301      	movs	r3, #1
 800de9a:	e04d      	b.n	800df38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	2bff      	cmp	r3, #255	; 0xff
 800dea4:	d90e      	bls.n	800dec4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	22ff      	movs	r2, #255	; 0xff
 800deaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	8979      	ldrh	r1, [r7, #10]
 800deb4:	2300      	movs	r3, #0
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f000 fbfb 	bl	800e6b8 <I2C_TransferConfig>
 800dec2:	e00f      	b.n	800dee4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dec8:	b29a      	uxth	r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	8979      	ldrh	r1, [r7, #10]
 800ded6:	2300      	movs	r3, #0
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f000 fbea 	bl	800e6b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dee8:	b29b      	uxth	r3, r3
 800deea:	2b00      	cmp	r3, #0
 800deec:	d19e      	bne.n	800de2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f000 fabc 	bl	800e470 <I2C_WaitOnSTOPFlagUntilTimeout>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	e01a      	b.n	800df38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2220      	movs	r2, #32
 800df08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	6859      	ldr	r1, [r3, #4]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	4b0a      	ldr	r3, [pc, #40]	; (800df40 <HAL_I2C_Mem_Write+0x224>)
 800df16:	400b      	ands	r3, r1
 800df18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2220      	movs	r2, #32
 800df1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2200      	movs	r2, #0
 800df26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800df32:	2300      	movs	r3, #0
 800df34:	e000      	b.n	800df38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800df36:	2302      	movs	r3, #2
  }
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3718      	adds	r7, #24
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	fe00e800 	.word	0xfe00e800

0800df44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b088      	sub	sp, #32
 800df48:	af02      	add	r7, sp, #8
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	4608      	mov	r0, r1
 800df4e:	4611      	mov	r1, r2
 800df50:	461a      	mov	r2, r3
 800df52:	4603      	mov	r3, r0
 800df54:	817b      	strh	r3, [r7, #10]
 800df56:	460b      	mov	r3, r1
 800df58:	813b      	strh	r3, [r7, #8]
 800df5a:	4613      	mov	r3, r2
 800df5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b20      	cmp	r3, #32
 800df68:	f040 80fd 	bne.w	800e166 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d002      	beq.n	800df78 <HAL_I2C_Mem_Read+0x34>
 800df72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df74:	2b00      	cmp	r3, #0
 800df76:	d105      	bne.n	800df84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e0f1      	b.n	800e168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d101      	bne.n	800df92 <HAL_I2C_Mem_Read+0x4e>
 800df8e:	2302      	movs	r3, #2
 800df90:	e0ea      	b.n	800e168 <HAL_I2C_Mem_Read+0x224>
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2201      	movs	r2, #1
 800df96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800df9a:	f7fe fe03 	bl	800cba4 <HAL_GetTick>
 800df9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	2319      	movs	r3, #25
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f000 f9c9 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d001      	beq.n	800dfbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e0d5      	b.n	800e168 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2222      	movs	r2, #34	; 0x22
 800dfc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2240      	movs	r2, #64	; 0x40
 800dfc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6a3a      	ldr	r2, [r7, #32]
 800dfd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dfdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dfe4:	88f8      	ldrh	r0, [r7, #6]
 800dfe6:	893a      	ldrh	r2, [r7, #8]
 800dfe8:	8979      	ldrh	r1, [r7, #10]
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	9301      	str	r3, [sp, #4]
 800dfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	4603      	mov	r3, r0
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f000 f92d 	bl	800e254 <I2C_RequestMemoryRead>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d005      	beq.n	800e00c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e008:	2301      	movs	r3, #1
 800e00a:	e0ad      	b.n	800e168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e010:	b29b      	uxth	r3, r3
 800e012:	2bff      	cmp	r3, #255	; 0xff
 800e014:	d90e      	bls.n	800e034 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	22ff      	movs	r2, #255	; 0xff
 800e01a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e020:	b2da      	uxtb	r2, r3
 800e022:	8979      	ldrh	r1, [r7, #10]
 800e024:	4b52      	ldr	r3, [pc, #328]	; (800e170 <HAL_I2C_Mem_Read+0x22c>)
 800e026:	9300      	str	r3, [sp, #0]
 800e028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f000 fb43 	bl	800e6b8 <I2C_TransferConfig>
 800e032:	e00f      	b.n	800e054 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e038:	b29a      	uxth	r2, r3
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e042:	b2da      	uxtb	r2, r3
 800e044:	8979      	ldrh	r1, [r7, #10]
 800e046:	4b4a      	ldr	r3, [pc, #296]	; (800e170 <HAL_I2C_Mem_Read+0x22c>)
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	f000 fb32 	bl	800e6b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	2200      	movs	r2, #0
 800e05c:	2104      	movs	r1, #4
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f000 f970 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800e064:	4603      	mov	r3, r0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d001      	beq.n	800e06e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e07c      	b.n	800e168 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e078:	b2d2      	uxtb	r2, r2
 800e07a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e080:	1c5a      	adds	r2, r3, #1
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e08a:	3b01      	subs	r3, #1
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e096:	b29b      	uxth	r3, r3
 800e098:	3b01      	subs	r3, #1
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d034      	beq.n	800e114 <HAL_I2C_Mem_Read+0x1d0>
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d130      	bne.n	800e114 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	2180      	movs	r1, #128	; 0x80
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f000 f941 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d001      	beq.n	800e0cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e04d      	b.n	800e168 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	2bff      	cmp	r3, #255	; 0xff
 800e0d4:	d90e      	bls.n	800e0f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	22ff      	movs	r2, #255	; 0xff
 800e0da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	8979      	ldrh	r1, [r7, #10]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	9300      	str	r3, [sp, #0]
 800e0e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 fae3 	bl	800e6b8 <I2C_TransferConfig>
 800e0f2:	e00f      	b.n	800e114 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e102:	b2da      	uxtb	r2, r3
 800e104:	8979      	ldrh	r1, [r7, #10]
 800e106:	2300      	movs	r3, #0
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e10e:	68f8      	ldr	r0, [r7, #12]
 800e110:	f000 fad2 	bl	800e6b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e118:	b29b      	uxth	r3, r3
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d19a      	bne.n	800e054 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	f000 f9a4 	bl	800e470 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d001      	beq.n	800e132 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	e01a      	b.n	800e168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2220      	movs	r2, #32
 800e138:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	6859      	ldr	r1, [r3, #4]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	4b0b      	ldr	r3, [pc, #44]	; (800e174 <HAL_I2C_Mem_Read+0x230>)
 800e146:	400b      	ands	r3, r1
 800e148:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2220      	movs	r2, #32
 800e14e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e162:	2300      	movs	r3, #0
 800e164:	e000      	b.n	800e168 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e166:	2302      	movs	r3, #2
  }
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3718      	adds	r7, #24
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	80002400 	.word	0x80002400
 800e174:	fe00e800 	.word	0xfe00e800

0800e178 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e186:	b2db      	uxtb	r3, r3
}
 800e188:	4618      	mov	r0, r3
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af02      	add	r7, sp, #8
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	4608      	mov	r0, r1
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	817b      	strh	r3, [r7, #10]
 800e1be:	460b      	mov	r3, r1
 800e1c0:	813b      	strh	r3, [r7, #8]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e1c6:	88fb      	ldrh	r3, [r7, #6]
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	8979      	ldrh	r1, [r7, #10]
 800e1cc:	4b20      	ldr	r3, [pc, #128]	; (800e250 <I2C_RequestMemoryWrite+0xa4>)
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f000 fa6f 	bl	800e6b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e1da:	69fa      	ldr	r2, [r7, #28]
 800e1dc:	69b9      	ldr	r1, [r7, #24]
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f000 f8ff 	bl	800e3e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e02c      	b.n	800e248 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e1ee:	88fb      	ldrh	r3, [r7, #6]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d105      	bne.n	800e200 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e1f4:	893b      	ldrh	r3, [r7, #8]
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	629a      	str	r2, [r3, #40]	; 0x28
 800e1fe:	e015      	b.n	800e22c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e200:	893b      	ldrh	r3, [r7, #8]
 800e202:	0a1b      	lsrs	r3, r3, #8
 800e204:	b29b      	uxth	r3, r3
 800e206:	b2da      	uxtb	r2, r3
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e20e:	69fa      	ldr	r2, [r7, #28]
 800e210:	69b9      	ldr	r1, [r7, #24]
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f000 f8e5 	bl	800e3e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d001      	beq.n	800e222 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e21e:	2301      	movs	r3, #1
 800e220:	e012      	b.n	800e248 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e222:	893b      	ldrh	r3, [r7, #8]
 800e224:	b2da      	uxtb	r2, r3
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	69bb      	ldr	r3, [r7, #24]
 800e232:	2200      	movs	r2, #0
 800e234:	2180      	movs	r1, #128	; 0x80
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f000 f884 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d001      	beq.n	800e246 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e242:	2301      	movs	r3, #1
 800e244:	e000      	b.n	800e248 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e246:	2300      	movs	r3, #0
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3710      	adds	r7, #16
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	80002000 	.word	0x80002000

0800e254 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af02      	add	r7, sp, #8
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	4608      	mov	r0, r1
 800e25e:	4611      	mov	r1, r2
 800e260:	461a      	mov	r2, r3
 800e262:	4603      	mov	r3, r0
 800e264:	817b      	strh	r3, [r7, #10]
 800e266:	460b      	mov	r3, r1
 800e268:	813b      	strh	r3, [r7, #8]
 800e26a:	4613      	mov	r3, r2
 800e26c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e26e:	88fb      	ldrh	r3, [r7, #6]
 800e270:	b2da      	uxtb	r2, r3
 800e272:	8979      	ldrh	r1, [r7, #10]
 800e274:	4b20      	ldr	r3, [pc, #128]	; (800e2f8 <I2C_RequestMemoryRead+0xa4>)
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	2300      	movs	r3, #0
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f000 fa1c 	bl	800e6b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e280:	69fa      	ldr	r2, [r7, #28]
 800e282:	69b9      	ldr	r1, [r7, #24]
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f000 f8ac 	bl	800e3e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d001      	beq.n	800e294 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e290:	2301      	movs	r3, #1
 800e292:	e02c      	b.n	800e2ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e294:	88fb      	ldrh	r3, [r7, #6]
 800e296:	2b01      	cmp	r3, #1
 800e298:	d105      	bne.n	800e2a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e29a:	893b      	ldrh	r3, [r7, #8]
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	629a      	str	r2, [r3, #40]	; 0x28
 800e2a4:	e015      	b.n	800e2d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e2a6:	893b      	ldrh	r3, [r7, #8]
 800e2a8:	0a1b      	lsrs	r3, r3, #8
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2b4:	69fa      	ldr	r2, [r7, #28]
 800e2b6:	69b9      	ldr	r1, [r7, #24]
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f000 f892 	bl	800e3e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	e012      	b.n	800e2ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e2c8:	893b      	ldrh	r3, [r7, #8]
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	2140      	movs	r1, #64	; 0x40
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	f000 f831 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e000      	b.n	800e2ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	80002000 	.word	0x80002000

0800e2fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	699b      	ldr	r3, [r3, #24]
 800e30a:	f003 0302 	and.w	r3, r3, #2
 800e30e:	2b02      	cmp	r3, #2
 800e310:	d103      	bne.n	800e31a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2200      	movs	r2, #0
 800e318:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	699b      	ldr	r3, [r3, #24]
 800e320:	f003 0301 	and.w	r3, r3, #1
 800e324:	2b01      	cmp	r3, #1
 800e326:	d007      	beq.n	800e338 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	699a      	ldr	r2, [r3, #24]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f042 0201 	orr.w	r2, r2, #1
 800e336:	619a      	str	r2, [r3, #24]
  }
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	603b      	str	r3, [r7, #0]
 800e350:	4613      	mov	r3, r2
 800e352:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e354:	e031      	b.n	800e3ba <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e35c:	d02d      	beq.n	800e3ba <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e35e:	f7fe fc21 	bl	800cba4 <HAL_GetTick>
 800e362:	4602      	mov	r2, r0
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d302      	bcc.n	800e374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d122      	bne.n	800e3ba <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	699a      	ldr	r2, [r3, #24]
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	4013      	ands	r3, r2
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	429a      	cmp	r2, r3
 800e382:	bf0c      	ite	eq
 800e384:	2301      	moveq	r3, #1
 800e386:	2300      	movne	r3, #0
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	461a      	mov	r2, r3
 800e38c:	79fb      	ldrb	r3, [r7, #7]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d113      	bne.n	800e3ba <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e396:	f043 0220 	orr.w	r2, r3, #32
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2220      	movs	r2, #32
 800e3a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e00f      	b.n	800e3da <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	699a      	ldr	r2, [r3, #24]
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	4013      	ands	r3, r2
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	bf0c      	ite	eq
 800e3ca:	2301      	moveq	r3, #1
 800e3cc:	2300      	movne	r3, #0
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	79fb      	ldrb	r3, [r7, #7]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d0be      	beq.n	800e356 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e3d8:	2300      	movs	r3, #0
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b084      	sub	sp, #16
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	60f8      	str	r0, [r7, #12]
 800e3ea:	60b9      	str	r1, [r7, #8]
 800e3ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e3ee:	e033      	b.n	800e458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	68b9      	ldr	r1, [r7, #8]
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f000 f87f 	bl	800e4f8 <I2C_IsErrorOccurred>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d001      	beq.n	800e404 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e400:	2301      	movs	r3, #1
 800e402:	e031      	b.n	800e468 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40a:	d025      	beq.n	800e458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e40c:	f7fe fbca 	bl	800cba4 <HAL_GetTick>
 800e410:	4602      	mov	r2, r0
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	68ba      	ldr	r2, [r7, #8]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d302      	bcc.n	800e422 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d11a      	bne.n	800e458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	699b      	ldr	r3, [r3, #24]
 800e428:	f003 0302 	and.w	r3, r3, #2
 800e42c:	2b02      	cmp	r3, #2
 800e42e:	d013      	beq.n	800e458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e434:	f043 0220 	orr.w	r2, r3, #32
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2220      	movs	r2, #32
 800e440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2200      	movs	r2, #0
 800e448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800e454:	2301      	movs	r3, #1
 800e456:	e007      	b.n	800e468 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	699b      	ldr	r3, [r3, #24]
 800e45e:	f003 0302 	and.w	r3, r3, #2
 800e462:	2b02      	cmp	r3, #2
 800e464:	d1c4      	bne.n	800e3f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e466:	2300      	movs	r3, #0
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e47c:	e02f      	b.n	800e4de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	68b9      	ldr	r1, [r7, #8]
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f000 f838 	bl	800e4f8 <I2C_IsErrorOccurred>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e48e:	2301      	movs	r3, #1
 800e490:	e02d      	b.n	800e4ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e492:	f7fe fb87 	bl	800cba4 <HAL_GetTick>
 800e496:	4602      	mov	r2, r0
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	1ad3      	subs	r3, r2, r3
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d302      	bcc.n	800e4a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d11a      	bne.n	800e4de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	699b      	ldr	r3, [r3, #24]
 800e4ae:	f003 0320 	and.w	r3, r3, #32
 800e4b2:	2b20      	cmp	r3, #32
 800e4b4:	d013      	beq.n	800e4de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ba:	f043 0220 	orr.w	r2, r3, #32
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2220      	movs	r2, #32
 800e4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e007      	b.n	800e4ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	699b      	ldr	r3, [r3, #24]
 800e4e4:	f003 0320 	and.w	r3, r3, #32
 800e4e8:	2b20      	cmp	r3, #32
 800e4ea:	d1c8      	bne.n	800e47e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
	...

0800e4f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08a      	sub	sp, #40	; 0x28
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e504:	2300      	movs	r3, #0
 800e506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	699b      	ldr	r3, [r3, #24]
 800e510:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e51a:	69bb      	ldr	r3, [r7, #24]
 800e51c:	f003 0310 	and.w	r3, r3, #16
 800e520:	2b00      	cmp	r3, #0
 800e522:	d068      	beq.n	800e5f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2210      	movs	r2, #16
 800e52a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e52c:	e049      	b.n	800e5c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e534:	d045      	beq.n	800e5c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e536:	f7fe fb35 	bl	800cba4 <HAL_GetTick>
 800e53a:	4602      	mov	r2, r0
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	429a      	cmp	r2, r3
 800e544:	d302      	bcc.n	800e54c <I2C_IsErrorOccurred+0x54>
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d13a      	bne.n	800e5c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e556:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e55e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	699b      	ldr	r3, [r3, #24]
 800e566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e56a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e56e:	d121      	bne.n	800e5b4 <I2C_IsErrorOccurred+0xbc>
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e576:	d01d      	beq.n	800e5b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e578:	7cfb      	ldrb	r3, [r7, #19]
 800e57a:	2b20      	cmp	r3, #32
 800e57c:	d01a      	beq.n	800e5b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e58c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e58e:	f7fe fb09 	bl	800cba4 <HAL_GetTick>
 800e592:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e594:	e00e      	b.n	800e5b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e596:	f7fe fb05 	bl	800cba4 <HAL_GetTick>
 800e59a:	4602      	mov	r2, r0
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	1ad3      	subs	r3, r2, r3
 800e5a0:	2b19      	cmp	r3, #25
 800e5a2:	d907      	bls.n	800e5b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800e5a4:	6a3b      	ldr	r3, [r7, #32]
 800e5a6:	f043 0320 	orr.w	r3, r3, #32
 800e5aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800e5b2:	e006      	b.n	800e5c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	699b      	ldr	r3, [r3, #24]
 800e5ba:	f003 0320 	and.w	r3, r3, #32
 800e5be:	2b20      	cmp	r3, #32
 800e5c0:	d1e9      	bne.n	800e596 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	699b      	ldr	r3, [r3, #24]
 800e5c8:	f003 0320 	and.w	r3, r3, #32
 800e5cc:	2b20      	cmp	r3, #32
 800e5ce:	d003      	beq.n	800e5d8 <I2C_IsErrorOccurred+0xe0>
 800e5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d0aa      	beq.n	800e52e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d103      	bne.n	800e5e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2220      	movs	r2, #32
 800e5e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e5e8:	6a3b      	ldr	r3, [r7, #32]
 800e5ea:	f043 0304 	orr.w	r3, r3, #4
 800e5ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	699b      	ldr	r3, [r3, #24]
 800e5fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00b      	beq.n	800e620 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e608:	6a3b      	ldr	r3, [r7, #32]
 800e60a:	f043 0301 	orr.w	r3, r3, #1
 800e60e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e618:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00b      	beq.n	800e642 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	f043 0308 	orr.w	r3, r3, #8
 800e630:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e63a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00b      	beq.n	800e664 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	f043 0302 	orr.w	r3, r3, #2
 800e652:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e65c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e65e:	2301      	movs	r3, #1
 800e660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d01c      	beq.n	800e6a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f7ff fe45 	bl	800e2fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	6859      	ldr	r1, [r3, #4]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	4b0d      	ldr	r3, [pc, #52]	; (800e6b4 <I2C_IsErrorOccurred+0x1bc>)
 800e67e:	400b      	ands	r3, r1
 800e680:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	431a      	orrs	r2, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2220      	movs	r2, #32
 800e692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2200      	movs	r2, #0
 800e69a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800e6a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3728      	adds	r7, #40	; 0x28
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	fe00e800 	.word	0xfe00e800

0800e6b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b087      	sub	sp, #28
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	607b      	str	r3, [r7, #4]
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	817b      	strh	r3, [r7, #10]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e6ca:	897b      	ldrh	r3, [r7, #10]
 800e6cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e6d0:	7a7b      	ldrb	r3, [r7, #9]
 800e6d2:	041b      	lsls	r3, r3, #16
 800e6d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e6d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e6de:	6a3b      	ldr	r3, [r7, #32]
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	685a      	ldr	r2, [r3, #4]
 800e6ee:	6a3b      	ldr	r3, [r7, #32]
 800e6f0:	0d5b      	lsrs	r3, r3, #21
 800e6f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e6f6:	4b08      	ldr	r3, [pc, #32]	; (800e718 <I2C_TransferConfig+0x60>)
 800e6f8:	430b      	orrs	r3, r1
 800e6fa:	43db      	mvns	r3, r3
 800e6fc:	ea02 0103 	and.w	r1, r2, r3
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	697a      	ldr	r2, [r7, #20]
 800e706:	430a      	orrs	r2, r1
 800e708:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e70a:	bf00      	nop
 800e70c:	371c      	adds	r7, #28
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	03ff63ff 	.word	0x03ff63ff

0800e71c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	2b20      	cmp	r3, #32
 800e730:	d138      	bne.n	800e7a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d101      	bne.n	800e740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e73c:	2302      	movs	r3, #2
 800e73e:	e032      	b.n	800e7a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2201      	movs	r2, #1
 800e744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2224      	movs	r2, #36	; 0x24
 800e74c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f022 0201 	bic.w	r2, r2, #1
 800e75e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e76e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	6819      	ldr	r1, [r3, #0]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	430a      	orrs	r2, r1
 800e77e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f042 0201 	orr.w	r2, r2, #1
 800e78e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2220      	movs	r2, #32
 800e794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2200      	movs	r2, #0
 800e79c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	e000      	b.n	800e7a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e7a4:	2302      	movs	r3, #2
  }
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e7b2:	b480      	push	{r7}
 800e7b4:	b085      	sub	sp, #20
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	2b20      	cmp	r3, #32
 800e7c6:	d139      	bne.n	800e83c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d101      	bne.n	800e7d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e7d2:	2302      	movs	r3, #2
 800e7d4:	e033      	b.n	800e83e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2224      	movs	r2, #36	; 0x24
 800e7e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f022 0201 	bic.w	r2, r2, #1
 800e7f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	021b      	lsls	r3, r3, #8
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	4313      	orrs	r3, r2
 800e80e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	68fa      	ldr	r2, [r7, #12]
 800e816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f042 0201 	orr.w	r2, r2, #1
 800e826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2220      	movs	r2, #32
 800e82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2200      	movs	r2, #0
 800e834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e838:	2300      	movs	r3, #0
 800e83a:	e000      	b.n	800e83e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e83c:	2302      	movs	r3, #2
  }
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3714      	adds	r7, #20
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr
	...

0800e84c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d101      	bne.n	800e85e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800e85a:	2301      	movs	r3, #1
 800e85c:	e070      	b.n	800e940 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e864:	b2db      	uxtb	r3, r3
 800e866:	2b00      	cmp	r3, #0
 800e868:	d106      	bne.n	800e878 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7f8 fd50 	bl	8007318 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2202      	movs	r2, #2
 800e87c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f042 0201 	orr.w	r2, r2, #1
 800e88e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f022 0201 	bic.w	r2, r2, #1
 800e89e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800e8ae:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e8be:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e8ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e8de:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4a19      	ldr	r2, [pc, #100]	; (800e948 <HAL_JPEG_Init+0xfc>)
 800e8e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4a18      	ldr	r2, [pc, #96]	; (800e94c <HAL_JPEG_Init+0x100>)
 800e8ea:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 fdc7 	bl	800f48c <JPEG_Set_HuffEnc_Mem>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d004      	beq.n	800e90e <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2201      	movs	r2, #1
 800e908:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	e018      	b.n	800e940 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	685a      	ldr	r2, [r3, #4]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e91c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2200      	movs	r2, #0
 800e928:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2200      	movs	r2, #0
 800e936:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800e93e:	2300      	movs	r3, #0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	0802ef90 	.word	0x0802ef90
 800e94c:	0802efd0 	.word	0x0802efd0

0800e950 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d002      	beq.n	800e966 <HAL_JPEG_GetInfo+0x16>
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d101      	bne.n	800e96a <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800e966:	2301      	movs	r3, #1
 800e968:	e083      	b.n	800ea72 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	f003 0303 	and.w	r3, r3, #3
 800e974:	2b02      	cmp	r3, #2
 800e976:	d103      	bne.n	800e980 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	2210      	movs	r2, #16
 800e97c:	601a      	str	r2, [r3, #0]
 800e97e:	e017      	b.n	800e9b0 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	f003 0303 	and.w	r3, r3, #3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d103      	bne.n	800e996 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2200      	movs	r2, #0
 800e992:	601a      	str	r2, [r3, #0]
 800e994:	e00c      	b.n	800e9b0 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	f003 0303 	and.w	r3, r3, #3
 800e9a0:	2b03      	cmp	r3, #3
 800e9a2:	d103      	bne.n	800e9ac <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	2230      	movs	r2, #48	; 0x30
 800e9a8:	601a      	str	r2, [r3, #0]
 800e9aa:	e001      	b.n	800e9b0 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	e060      	b.n	800ea72 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	0c1b      	lsrs	r3, r3, #16
 800e9b8:	b29a      	uxth	r2, r3
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	0c1b      	lsrs	r3, r3, #16
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b10      	cmp	r3, #16
 800e9d2:	d003      	beq.n	800e9dc <HAL_JPEG_GetInfo+0x8c>
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2b30      	cmp	r3, #48	; 0x30
 800e9da:	d140      	bne.n	800ea5e <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	691b      	ldr	r3, [r3, #16]
 800e9e2:	091b      	lsrs	r3, r3, #4
 800e9e4:	f003 030f 	and.w	r3, r3, #15
 800e9e8:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	695b      	ldr	r3, [r3, #20]
 800e9f0:	091b      	lsrs	r3, r3, #4
 800e9f2:	f003 030f 	and.w	r3, r3, #15
 800e9f6:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	091b      	lsrs	r3, r3, #4
 800ea00:	f003 030f 	and.w	r3, r3, #15
 800ea04:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	2b01      	cmp	r3, #1
 800ea0a:	d109      	bne.n	800ea20 <HAL_JPEG_GetInfo+0xd0>
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d106      	bne.n	800ea20 <HAL_JPEG_GetInfo+0xd0>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d103      	bne.n	800ea20 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	2202      	movs	r2, #2
 800ea1c:	605a      	str	r2, [r3, #4]
 800ea1e:	e01d      	b.n	800ea5c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d109      	bne.n	800ea3a <HAL_JPEG_GetInfo+0xea>
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d106      	bne.n	800ea3a <HAL_JPEG_GetInfo+0xea>
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d103      	bne.n	800ea3a <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	2200      	movs	r2, #0
 800ea36:	605a      	str	r2, [r3, #4]
 800ea38:	e010      	b.n	800ea5c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	2b03      	cmp	r3, #3
 800ea3e:	d109      	bne.n	800ea54 <HAL_JPEG_GetInfo+0x104>
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d106      	bne.n	800ea54 <HAL_JPEG_GetInfo+0x104>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d103      	bne.n	800ea54 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	2201      	movs	r2, #1
 800ea50:	605a      	str	r2, [r3, #4]
 800ea52:	e003      	b.n	800ea5c <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2200      	movs	r2, #0
 800ea58:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ea5a:	e003      	b.n	800ea64 <HAL_JPEG_GetInfo+0x114>
 800ea5c:	e002      	b.n	800ea64 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	2200      	movs	r2, #0
 800ea62:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f001 fe03 	bl	8010670 <JPEG_GetQuality>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800ea70:	2300      	movs	r3, #0
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3718      	adds	r7, #24
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b084      	sub	sp, #16
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	60f8      	str	r0, [r7, #12]
 800ea82:	60b9      	str	r1, [r7, #8]
 800ea84:	607a      	str	r2, [r7, #4]
 800ea86:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d005      	beq.n	800ea9a <HAL_JPEG_Decode_DMA+0x20>
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <HAL_JPEG_Decode_DMA+0x20>
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d101      	bne.n	800ea9e <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e04c      	b.n	800eb38 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d101      	bne.n	800eaac <HAL_JPEG_Decode_DMA+0x32>
 800eaa8:	2302      	movs	r3, #2
 800eaaa:	e045      	b.n	800eb38 <HAL_JPEG_Decode_DMA+0xbe>
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2201      	movs	r2, #1
 800eab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d134      	bne.n	800eb2a <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2204      	movs	r2, #4
 800eac4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eacc:	f023 020f 	bic.w	r2, r3, #15
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ead8:	f043 020e 	orr.w	r2, r3, #14
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	683a      	ldr	r2, [r7, #0]
 800eaea:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	69ba      	ldr	r2, [r7, #24]
 800eaf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2200      	movs	r2, #0
 800eafc:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2200      	movs	r2, #0
 800eb02:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f000 ff43 	bl	800f990 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f001 fa64 	bl	800ffd8 <JPEG_DMA_StartProcess>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00f      	beq.n	800eb36 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2206      	movs	r2, #6
 800eb1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 800eb26:	2301      	movs	r3, #1
 800eb28:	e006      	b.n	800eb38 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 800eb32:	2302      	movs	r3, #2
 800eb34:	e000      	b.n	800eb38 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3710      	adds	r7, #16
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b085      	sub	sp, #20
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb52:	f003 030c 	and.w	r3, r3, #12
 800eb56:	2b0c      	cmp	r3, #12
 800eb58:	d116      	bne.n	800eb88 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	f003 0301 	and.w	r3, r3, #1
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d005      	beq.n	800eb70 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	f003 0302 	and.w	r3, r3, #2
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d033      	beq.n	800ebe2 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb7e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	655a      	str	r2, [r3, #84]	; 0x54
 800eb86:	e02c      	b.n	800ebe2 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb8c:	f003 030c 	and.w	r3, r3, #12
 800eb90:	2b08      	cmp	r3, #8
 800eb92:	d126      	bne.n	800ebe2 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	f003 0301 	and.w	r3, r3, #1
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d009      	beq.n	800ebb2 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eba2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f043 0306 	orr.w	r3, r3, #6
 800ebb0:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	f003 0302 	and.w	r3, r3, #2
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d009      	beq.n	800ebd0 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebc0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800ebce:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	43da      	mvns	r2, r3
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	400a      	ands	r2, r1
 800ebe0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800ebe2:	2300      	movs	r3, #0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800ebf0:	b590      	push	{r4, r7, lr}
 800ebf2:	b087      	sub	sp, #28
 800ebf4:	af02      	add	r7, sp, #8
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	60fb      	str	r3, [r7, #12]
  uint32_t xfrSize;

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d101      	bne.n	800ec0e <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e0d7      	b.n	800edbe <HAL_JPEG_Resume+0x1ce>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec12:	f003 030c 	and.w	r3, r3, #12
 800ec16:	2b0c      	cmp	r3, #12
 800ec18:	f040 80a4 	bne.w	800ed64 <HAL_JPEG_Resume+0x174>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	f003 0301 	and.w	r3, r3, #1
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d049      	beq.n	800ecba <HAL_JPEG_Resume+0xca>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	655a      	str	r2, [r3, #84]	; 0x54
        then MDMA In buffer size is 32 bytes

        else (MDMA In is triggred with JPEG In FIFO not full flag)
        then MDMA In buffer size is 4 bytes
        */
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec38:	60bb      	str	r3, [r7, #8]

      if (xfrSize == 0UL)
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d10b      	bne.n	800ec58 <HAL_JPEG_Resume+0x68>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec44:	f043 0204 	orr.w	r2, r3, #4
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2206      	movs	r2, #6
 800ec50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        return HAL_ERROR;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e0b2      	b.n	800edbe <HAL_JPEG_Resume+0x1ce>
      }
      /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec60:	68b9      	ldr	r1, [r7, #8]
 800ec62:	fbb3 f1f1 	udiv	r1, r3, r1
 800ec66:	68b8      	ldr	r0, [r7, #8]
 800ec68:	fb00 f101 	mul.w	r1, r0, r1
 800ec6c:	1a5b      	subs	r3, r3, r1
 800ec6e:	1ad2      	subs	r2, r2, r3
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	629a      	str	r2, [r3, #40]	; 0x28


      if (hjpeg->InDataLength > 0UL)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d01e      	beq.n	800ecba <HAL_JPEG_Resume+0xca>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	699b      	ldr	r3, [r3, #24]
 800ec84:	4619      	mov	r1, r3
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	3340      	adds	r3, #64	; 0x40
 800ec8c:	461c      	mov	r4, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec92:	2201      	movs	r2, #1
 800ec94:	9200      	str	r2, [sp, #0]
 800ec96:	4622      	mov	r2, r4
 800ec98:	f002 f97e 	bl	8010f98 <HAL_MDMA_Start_IT>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d00b      	beq.n	800ecba <HAL_JPEG_Resume+0xca>
                              hjpeg->InDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eca6:	f043 0204 	orr.w	r2, r3, #4
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2206      	movs	r2, #6
 800ecb2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	e081      	b.n	800edbe <HAL_JPEG_Resume+0x1ce>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	f003 0302 	and.w	r3, r3, #2
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d07b      	beq.n	800edbc <HAL_JPEG_Resume+0x1cc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d003      	beq.n	800ece4 <HAL_JPEG_Resume+0xf4>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f001 faf3 	bl	80102c8 <JPEG_DMA_PollResidualData>
 800ece2:	e06b      	b.n	800edbc <HAL_JPEG_Resume+0x1cc>
        /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
          then MDMA out buffer size is 32 bytes
          else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
          then MDMA buffer size is 4 bytes
          */
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecea:	60bb      	str	r3, [r7, #8]

        if (xfrSize == 0UL)
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10b      	bne.n	800ed0a <HAL_JPEG_Resume+0x11a>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecf6:	f043 0204 	orr.w	r2, r3, #4
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2206      	movs	r2, #6
 800ed02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800ed06:	2301      	movs	r3, #1
 800ed08:	e059      	b.n	800edbe <HAL_JPEG_Resume+0x1ce>
        }
        /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed12:	68b9      	ldr	r1, [r7, #8]
 800ed14:	fbb3 f1f1 	udiv	r1, r3, r1
 800ed18:	68b8      	ldr	r0, [r7, #8]
 800ed1a:	fb00 f101 	mul.w	r1, r0, r1
 800ed1e:	1a5b      	subs	r3, r3, r1
 800ed20:	1ad2      	subs	r2, r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Start DMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	3344      	adds	r3, #68	; 0x44
 800ed30:	4619      	mov	r1, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	69db      	ldr	r3, [r3, #28]
 800ed36:	461c      	mov	r4, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	9200      	str	r2, [sp, #0]
 800ed40:	4622      	mov	r2, r4
 800ed42:	f002 f929 	bl	8010f98 <HAL_MDMA_Start_IT>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d037      	beq.n	800edbc <HAL_JPEG_Resume+0x1cc>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed50:	f043 0204 	orr.w	r2, r3, #4
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2206      	movs	r2, #6
 800ed5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800ed60:	2301      	movs	r3, #1
 800ed62:	e02c      	b.n	800edbe <HAL_JPEG_Resume+0x1ce>
      }

    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed68:	f003 030c 	and.w	r3, r3, #12
 800ed6c:	2b08      	cmp	r3, #8
 800ed6e:	d125      	bne.n	800edbc <HAL_JPEG_Resume+0x1cc>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	f003 0301 	and.w	r3, r3, #1
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d009      	beq.n	800ed8e <HAL_JPEG_Resume+0x19e>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f043 0306 	orr.w	r3, r3, #6
 800ed8c:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	f003 0302 	and.w	r3, r3, #2
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d009      	beq.n	800edac <HAL_JPEG_Resume+0x1bc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800edaa:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68fa      	ldr	r2, [r7, #12]
 800edb8:	430a      	orrs	r2, r1
 800edba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3714      	adds	r7, #20
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd90      	pop	{r4, r7, pc}

0800edc6 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 800edc6:	b480      	push	{r7}
 800edc8:	b085      	sub	sp, #20
 800edca:	af00      	add	r7, sp, #0
 800edcc:	60f8      	str	r0, [r7, #12]
 800edce:	60b9      	str	r1, [r7, #8]
 800edd0:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	68ba      	ldr	r2, [r7, #8]
 800edd6:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	629a      	str	r2, [r3, #40]	; 0x28
}
 800edde:	bf00      	nop
 800ede0:	3714      	adds	r7, #20
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr

0800edea <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800edea:	b480      	push	{r7}
 800edec:	b085      	sub	sp, #20
 800edee:	af00      	add	r7, sp, #0
 800edf0:	60f8      	str	r0, [r7, #12]
 800edf2:	60b9      	str	r1, [r7, #8]
 800edf4:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	68ba      	ldr	r2, [r7, #8]
 800edfa:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ee02:	bf00      	nop
 800ee04:	3714      	adds	r7, #20
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800ee0e:	b480      	push	{r7}
 800ee10:	b083      	sub	sp, #12
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800ee16:	bf00      	nop
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b082      	sub	sp, #8
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	3b03      	subs	r3, #3
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d813      	bhi.n	800ee60 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee3c:	f003 030c 	and.w	r3, r3, #12
 800ee40:	2b08      	cmp	r3, #8
 800ee42:	d103      	bne.n	800ee4c <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 fe17 	bl	800fa78 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800ee4a:	e00b      	b.n	800ee64 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee50:	f003 030c 	and.w	r3, r3, #12
 800ee54:	2b0c      	cmp	r3, #12
 800ee56:	d105      	bne.n	800ee64 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f001 f957 	bl	801010c <JPEG_DMA_ContinueProcess>
      break;
 800ee5e:	e001      	b.n	800ee64 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800ee60:	bf00      	nop
 800ee62:	e000      	b.n	800ee66 <HAL_JPEG_IRQHandler+0x44>
      break;
 800ee64:	bf00      	nop
  }
}
 800ee66:	bf00      	nop
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800ee6e:	b480      	push	{r7}
 800ee70:	b08b      	sub	sp, #44	; 0x2c
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	60f8      	str	r0, [r7, #12]
 800ee76:	60b9      	str	r1, [r7, #8]
 800ee78:	607a      	str	r2, [r7, #4]
 800ee7a:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800ee80:	2300      	movs	r3, #0
 800ee82:	61fb      	str	r3, [r7, #28]
 800ee84:	e020      	b.n	800eec8 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800ee86:	68fa      	ldr	r2, [r7, #12]
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800ee90:	6a3a      	ldr	r2, [r7, #32]
 800ee92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee94:	4413      	add	r3, r2
 800ee96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee9a:	d90f      	bls.n	800eebc <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e055      	b.n	800ef4c <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800eea0:	69fb      	ldr	r3, [r7, #28]
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	68b9      	ldr	r1, [r7, #8]
 800eea6:	6a3b      	ldr	r3, [r7, #32]
 800eea8:	440b      	add	r3, r1
 800eeaa:	3201      	adds	r2, #1
 800eeac:	b2d2      	uxtb	r2, r2
 800eeae:	701a      	strb	r2, [r3, #0]
      p++;
 800eeb0:	6a3b      	ldr	r3, [r7, #32]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	623b      	str	r3, [r7, #32]
      i--;
 800eeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb8:	3b01      	subs	r3, #1
 800eeba:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 800eebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d1ee      	bne.n	800eea0 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	3301      	adds	r3, #1
 800eec6:	61fb      	str	r3, [r7, #28]
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	2b0f      	cmp	r3, #15
 800eecc:	d9db      	bls.n	800ee86 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800eece:	68ba      	ldr	r2, [r7, #8]
 800eed0:	6a3b      	ldr	r3, [r7, #32]
 800eed2:	4413      	add	r3, r2
 800eed4:	2200      	movs	r2, #0
 800eed6:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	6a3a      	ldr	r2, [r7, #32]
 800eedc:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	617b      	str	r3, [r7, #20]
  p = 0;
 800eee8:	2300      	movs	r3, #0
 800eeea:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800eeec:	e027      	b.n	800ef3e <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	4413      	add	r3, r2
 800eef6:	69ba      	ldr	r2, [r7, #24]
 800eef8:	601a      	str	r2, [r3, #0]
      p++;
 800eefa:	6a3b      	ldr	r3, [r7, #32]
 800eefc:	3301      	adds	r3, #1
 800eefe:	623b      	str	r3, [r7, #32]
      code++;
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	3301      	adds	r3, #1
 800ef04:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800ef06:	68ba      	ldr	r2, [r7, #8]
 800ef08:	6a3b      	ldr	r3, [r7, #32]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d0eb      	beq.n	800eeee <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	2b1f      	cmp	r3, #31
 800ef1a:	d901      	bls.n	800ef20 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e015      	b.n	800ef4c <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800ef20:	2201      	movs	r2, #1
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	fa02 f303 	lsl.w	r3, r2, r3
 800ef28:	69ba      	ldr	r2, [r7, #24]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d301      	bcc.n	800ef32 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e00c      	b.n	800ef4c <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	005b      	lsls	r3, r3, #1
 800ef36:	61bb      	str	r3, [r7, #24]
    si++;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800ef3e:	68ba      	ldr	r2, [r7, #8]
 800ef40:	6a3b      	ldr	r3, [r7, #32]
 800ef42:	4413      	add	r3, r2
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1dd      	bne.n	800ef06 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	372c      	adds	r7, #44	; 0x2c
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800ef64:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800ef68:	6018      	str	r0, [r3, #0]
 800ef6a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800ef6e:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800ef72:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800ef74:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800ef78:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800ef7c:	6818      	ldr	r0, [r3, #0]
 800ef7e:	f107 0308 	add.w	r3, r7, #8
 800ef82:	f107 020c 	add.w	r2, r7, #12
 800ef86:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800ef8a:	f7ff ff70 	bl	800ee6e <JPEG_Bits_To_SizeCodes>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 800ef94:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d002      	beq.n	800efa2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800ef9c:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800efa0:	e075      	b.n	800f08e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800efa2:	2300      	movs	r3, #0
 800efa4:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 800efa8:	e067      	b.n	800f07a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800efaa:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800efae:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800efb8:	4413      	add	r3, r2
 800efba:	3310      	adds	r3, #16
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 800efc2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d103      	bne.n	800efd2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800efca:	23a0      	movs	r3, #160	; 0xa0
 800efcc:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800efd0:	e021      	b.n	800f016 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800efd2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800efd6:	2bf0      	cmp	r3, #240	; 0xf0
 800efd8:	d103      	bne.n	800efe2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800efda:	23a1      	movs	r3, #161	; 0xa1
 800efdc:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800efe0:	e019      	b.n	800f016 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800efe2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800efe6:	091b      	lsrs	r3, r3, #4
 800efe8:	f003 030f 	and.w	r3, r3, #15
 800efec:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 800eff0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800eff4:	f003 030f 	and.w	r3, r3, #15
 800eff8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800effc:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800f000:	4613      	mov	r3, r2
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4413      	add	r3, r2
 800f006:	005b      	lsls	r3, r3, #1
 800f008:	461a      	mov	r2, r3
 800f00a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f00e:	4413      	add	r3, r2
 800f010:	3b01      	subs	r3, #1
 800f012:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800f016:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f01a:	2ba1      	cmp	r3, #161	; 0xa1
 800f01c:	d901      	bls.n	800f022 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800f01e:	2301      	movs	r3, #1
 800f020:	e035      	b.n	800f08e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800f022:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f026:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800f02a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800f02e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f032:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f036:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800f03a:	6819      	ldr	r1, [r3, #0]
 800f03c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f040:	3328      	adds	r3, #40	; 0x28
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	440b      	add	r3, r1
 800f046:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800f048:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f04c:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800f050:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800f054:	4413      	add	r3, r2
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	3b01      	subs	r3, #1
 800f05a:	b2d9      	uxtb	r1, r3
 800f05c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f060:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800f06a:	4413      	add	r3, r2
 800f06c:	460a      	mov	r2, r1
 800f06e:	701a      	strb	r2, [r3, #0]
      k++;
 800f070:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800f074:	3301      	adds	r3, #1
 800f076:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 800f07a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f07e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800f088:	429a      	cmp	r2, r3
 800f08a:	d38e      	bcc.n	800efaa <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f0a4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800f0a8:	6018      	str	r0, [r3, #0]
 800f0aa:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f0ae:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800f0b2:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800f0b4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f0b8:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800f0bc:	6818      	ldr	r0, [r3, #0]
 800f0be:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800f0c2:	f107 0208 	add.w	r2, r7, #8
 800f0c6:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 800f0ca:	f7ff fed0 	bl	800ee6e <JPEG_Bits_To_SizeCodes>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 800f0d4:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800f0dc:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800f0e0:	e048      	b.n	800f174 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 800f0e8:	e03d      	b.n	800f166 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800f0ea:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f0ee:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800f0f8:	4413      	add	r3, r2
 800f0fa:	3310      	adds	r3, #16
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800f102:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f106:	2b0b      	cmp	r3, #11
 800f108:	d901      	bls.n	800f10e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800f10a:	2301      	movs	r3, #1
 800f10c:	e032      	b.n	800f174 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800f10e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f112:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800f116:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800f11a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f11e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f122:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800f126:	6819      	ldr	r1, [r3, #0]
 800f128:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f12c:	3302      	adds	r3, #2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	440b      	add	r3, r1
 800f132:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800f134:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f138:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800f13c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800f140:	4413      	add	r3, r2
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	3b01      	subs	r3, #1
 800f146:	b2d9      	uxtb	r1, r3
 800f148:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f14c:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800f156:	4413      	add	r3, r2
 800f158:	460a      	mov	r2, r1
 800f15a:	701a      	strb	r2, [r3, #0]
      k++;
 800f15c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800f160:	3301      	adds	r3, #1
 800f162:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 800f166:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800f16a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800f16e:	429a      	cmp	r2, r3
 800f170:	d3bb      	bcc.n	800f0ea <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f172:	2300      	movs	r3, #0
}
 800f174:	4618      	mov	r0, r3
 800f176:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}

0800f17e <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800f17e:	b580      	push	{r7, lr}
 800f180:	b09a      	sub	sp, #104	; 0x68
 800f182:	af00      	add	r7, sp, #0
 800f184:	60f8      	str	r0, [r7, #12]
 800f186:	60b9      	str	r1, [r7, #8]
 800f188:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	429a      	cmp	r2, r3
 800f196:	d106      	bne.n	800f1a6 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800f1a0:	3318      	adds	r3, #24
 800f1a2:	663b      	str	r3, [r7, #96]	; 0x60
 800f1a4:	e00f      	b.n	800f1c6 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d106      	bne.n	800f1c2 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800f1bc:	3318      	adds	r3, #24
 800f1be:	663b      	str	r3, [r7, #96]	; 0x60
 800f1c0:	e001      	b.n	800f1c6 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e059      	b.n	800f27a <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d055      	beq.n	800f278 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800f1cc:	f107 0314 	add.w	r3, r7, #20
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	68b8      	ldr	r0, [r7, #8]
 800f1d4:	f7ff ff60 	bl	800f098 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 800f1de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800f1e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f1ea:	e046      	b.n	800f27a <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800f1ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1ee:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800f1f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f1f2:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800f1f6:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f1f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f1fa:	3304      	adds	r3, #4
 800f1fc:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800f1fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f200:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800f204:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800f206:	230c      	movs	r3, #12
 800f208:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 800f20a:	e032      	b.n	800f272 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800f20c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f20e:	3b01      	subs	r3, #1
 800f210:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 800f212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f214:	3b04      	subs	r3, #4
 800f216:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800f218:	f107 0214 	add.w	r2, r7, #20
 800f21c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f21e:	4413      	add	r3, r2
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	021b      	lsls	r3, r3, #8
 800f224:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f22a:	3302      	adds	r3, #2
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	3368      	adds	r3, #104	; 0x68
 800f230:	443b      	add	r3, r7
 800f232:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f236:	b2db      	uxtb	r3, r3
 800f238:	4313      	orrs	r3, r2
 800f23a:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 800f23c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f23e:	3b01      	subs	r3, #1
 800f240:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800f242:	f107 0214 	add.w	r2, r7, #20
 800f246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f248:	4413      	add	r3, r2
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	021b      	lsls	r3, r3, #8
 800f24e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f254:	3302      	adds	r3, #2
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	3368      	adds	r3, #104	; 0x68
 800f25a:	443b      	add	r3, r7
 800f25c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f260:	b2db      	uxtb	r3, r3
 800f262:	4313      	orrs	r3, r2
 800f264:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800f266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f268:	041a      	lsls	r2, r3, #16
 800f26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f26c:	431a      	orrs	r2, r3
 800f26e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f270:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800f272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f274:	2b01      	cmp	r3, #1
 800f276:	d8c9      	bhi.n	800f20c <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3768      	adds	r7, #104	; 0x68
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
	...

0800f284 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f290:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800f294:	6018      	str	r0, [r3, #0]
 800f296:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f29a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800f29e:	6019      	str	r1, [r3, #0]
 800f2a0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f2a4:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800f2a8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800f2aa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f2ae:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2ba:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800f2be:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800f2c2:	6812      	ldr	r2, [r2, #0]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d10c      	bne.n	800f2e2 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800f2c8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f2cc:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f2dc:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800f2e0:	e01d      	b.n	800f31e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800f2e2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f2e6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800f2f2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800f2f6:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800f2fa:	6812      	ldr	r2, [r2, #0]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d10c      	bne.n	800f31a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800f300:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f304:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800f310:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f314:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800f318:	e001      	b.n	800f31e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800f31a:	2301      	movs	r3, #1
 800f31c:	e0a8      	b.n	800f470 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800f31e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f322:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f000 80a0 	beq.w	800f46e <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800f32e:	f107 0214 	add.w	r2, r7, #20
 800f332:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f336:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800f33a:	4611      	mov	r1, r2
 800f33c:	6818      	ldr	r0, [r3, #0]
 800f33e:	f7ff fe0b 	bl	800ef58 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800f342:	4603      	mov	r3, r0
 800f344:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 800f348:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d002      	beq.n	800f356 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800f350:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800f354:	e08c      	b.n	800f470 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800f356:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800f35a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800f35e:	2300      	movs	r3, #0
 800f360:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800f364:	e00e      	b.n	800f384 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800f366:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f36a:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800f36e:	601a      	str	r2, [r3, #0]
      addressDef++;
 800f370:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f374:	3304      	adds	r3, #4
 800f376:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800f37a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f37e:	3301      	adds	r3, #1
 800f380:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800f384:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f388:	2b02      	cmp	r3, #2
 800f38a:	d9ec      	bls.n	800f366 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800f38c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f390:	4a3a      	ldr	r2, [pc, #232]	; (800f47c <JPEG_Set_HuffAC_Mem+0x1f8>)
 800f392:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f394:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f398:	3304      	adds	r3, #4
 800f39a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 800f39e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f3a2:	4a37      	ldr	r2, [pc, #220]	; (800f480 <JPEG_Set_HuffAC_Mem+0x1fc>)
 800f3a4:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f3a6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f3aa:	3304      	adds	r3, #4
 800f3ac:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 800f3b0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f3b4:	4a33      	ldr	r2, [pc, #204]	; (800f484 <JPEG_Set_HuffAC_Mem+0x200>)
 800f3b6:	601a      	str	r2, [r3, #0]
    addressDef++;
 800f3b8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f3bc:	3304      	adds	r3, #4
 800f3be:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 800f3c2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f3c6:	4a30      	ldr	r2, [pc, #192]	; (800f488 <JPEG_Set_HuffAC_Mem+0x204>)
 800f3c8:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800f3ca:	23a2      	movs	r3, #162	; 0xa2
 800f3cc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 800f3d0:	e049      	b.n	800f466 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800f3d2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 800f3dc:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800f3e0:	3b04      	subs	r3, #4
 800f3e2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800f3e6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f3ea:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800f3ee:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f3f2:	4413      	add	r3, r2
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	021b      	lsls	r3, r3, #8
 800f3f8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f3fc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f400:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800f404:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f408:	3328      	adds	r3, #40	; 0x28
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	440b      	add	r3, r1
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	b2db      	uxtb	r3, r3
 800f412:	4313      	orrs	r3, r2
 800f414:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 800f418:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f41c:	3b01      	subs	r3, #1
 800f41e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800f422:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f426:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800f42a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f42e:	4413      	add	r3, r2
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	021b      	lsls	r3, r3, #8
 800f434:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f438:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800f43c:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800f440:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f444:	3328      	adds	r3, #40	; 0x28
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	440b      	add	r3, r1
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	4313      	orrs	r3, r2
 800f450:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800f454:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800f458:	041a      	lsls	r2, r3, #16
 800f45a:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800f45e:	431a      	orrs	r2, r3
 800f460:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800f464:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800f466:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d8b1      	bhi.n	800f3d2 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800f46e:	2300      	movs	r3, #0
}
 800f470:	4618      	mov	r0, r3
 800f472:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	0fd10fd0 	.word	0x0fd10fd0
 800f480:	0fd30fd2 	.word	0x0fd30fd2
 800f484:	0fd50fd4 	.word	0x0fd50fd4
 800f488:	0fd70fd6 	.word	0x0fd70fd6

0800f48c <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 f84d 	bl	800f534 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	491f      	ldr	r1, [pc, #124]	; (800f524 <JPEG_Set_HuffEnc_Mem+0x98>)
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f7ff feec 	bl	800f284 <JPEG_Set_HuffAC_Mem>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f4b0:	7bfb      	ldrb	r3, [r7, #15]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d001      	beq.n	800f4ba <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800f4b6:	7bfb      	ldrb	r3, [r7, #15]
 800f4b8:	e030      	b.n	800f51c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	4918      	ldr	r1, [pc, #96]	; (800f528 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f7ff fedc 	bl	800f284 <JPEG_Set_HuffAC_Mem>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f4d0:	7bfb      	ldrb	r3, [r7, #15]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d001      	beq.n	800f4da <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800f4d6:	7bfb      	ldrb	r3, [r7, #15]
 800f4d8:	e020      	b.n	800f51c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	4911      	ldr	r1, [pc, #68]	; (800f52c <JPEG_Set_HuffEnc_Mem+0xa0>)
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff fe49 	bl	800f17e <JPEG_Set_HuffDC_Mem>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d001      	beq.n	800f4fa <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800f4f6:	7bfb      	ldrb	r3, [r7, #15]
 800f4f8:	e010      	b.n	800f51c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800f502:	461a      	mov	r2, r3
 800f504:	490a      	ldr	r1, [pc, #40]	; (800f530 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f7ff fe39 	bl	800f17e <JPEG_Set_HuffDC_Mem>
 800f50c:	4603      	mov	r3, r0
 800f50e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d001      	beq.n	800f51a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800f516:	7bfb      	ldrb	r3, [r7, #15]
 800f518:	e000      	b.n	800f51c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800f51a:	2300      	movs	r3, #0
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3710      	adds	r7, #16
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	0802ede8 	.word	0x0802ede8
 800f528:	0802ee9c 	.word	0x0802ee9c
 800f52c:	0802edb0 	.word	0x0802edb0
 800f530:	0802edcc 	.word	0x0802edcc

0800f534 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800f534:	b480      	push	{r7}
 800f536:	b08b      	sub	sp, #44	; 0x2c
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800f53c:	4b80      	ldr	r3, [pc, #512]	; (800f740 <JPEG_Set_Huff_DHTMem+0x20c>)
 800f53e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800f540:	4b80      	ldr	r3, [pc, #512]	; (800f744 <JPEG_Set_Huff_DHTMem+0x210>)
 800f542:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800f544:	4b80      	ldr	r3, [pc, #512]	; (800f748 <JPEG_Set_Huff_DHTMem+0x214>)
 800f546:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800f548:	4b80      	ldr	r3, [pc, #512]	; (800f74c <JPEG_Set_Huff_DHTMem+0x218>)
 800f54a:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f554:	330c      	adds	r3, #12
 800f556:	623b      	str	r3, [r7, #32]
  index = 16;
 800f558:	2310      	movs	r3, #16
 800f55a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f55c:	e01d      	b.n	800f59a <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f560:	3b01      	subs	r3, #1
 800f562:	697a      	ldr	r2, [r7, #20]
 800f564:	5cd3      	ldrb	r3, [r2, r3]
 800f566:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800f568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56a:	3b02      	subs	r3, #2
 800f56c:	6979      	ldr	r1, [r7, #20]
 800f56e:	5ccb      	ldrb	r3, [r1, r3]
 800f570:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f572:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800f574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f576:	3b03      	subs	r3, #3
 800f578:	6979      	ldr	r1, [r7, #20]
 800f57a:	5ccb      	ldrb	r3, [r1, r3]
 800f57c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800f57e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800f580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f582:	3a04      	subs	r2, #4
 800f584:	6979      	ldr	r1, [r7, #20]
 800f586:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800f588:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f58a:	6a3b      	ldr	r3, [r7, #32]
 800f58c:	601a      	str	r2, [r3, #0]
    address--;
 800f58e:	6a3b      	ldr	r3, [r7, #32]
 800f590:	3b04      	subs	r3, #4
 800f592:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f596:	3b04      	subs	r3, #4
 800f598:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59c:	2b03      	cmp	r3, #3
 800f59e:	d8de      	bhi.n	800f55e <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f5a8:	3318      	adds	r3, #24
 800f5aa:	623b      	str	r3, [r7, #32]
  index = 12;
 800f5ac:	230c      	movs	r3, #12
 800f5ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f5b0:	e021      	b.n	800f5f6 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b4:	3b01      	subs	r3, #1
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	7c1b      	ldrb	r3, [r3, #16]
 800f5bc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	3b02      	subs	r3, #2
 800f5c2:	6979      	ldr	r1, [r7, #20]
 800f5c4:	440b      	add	r3, r1
 800f5c6:	7c1b      	ldrb	r3, [r3, #16]
 800f5c8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f5ca:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800f5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ce:	3b03      	subs	r3, #3
 800f5d0:	6979      	ldr	r1, [r7, #20]
 800f5d2:	440b      	add	r3, r1
 800f5d4:	7c1b      	ldrb	r3, [r3, #16]
 800f5d6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800f5d8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800f5da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5dc:	3a04      	subs	r2, #4
 800f5de:	6979      	ldr	r1, [r7, #20]
 800f5e0:	440a      	add	r2, r1
 800f5e2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800f5e4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f5e6:	6a3b      	ldr	r3, [r7, #32]
 800f5e8:	601a      	str	r2, [r3, #0]
    address--;
 800f5ea:	6a3b      	ldr	r3, [r7, #32]
 800f5ec:	3b04      	subs	r3, #4
 800f5ee:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f2:	3b04      	subs	r3, #4
 800f5f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f8:	2b03      	cmp	r3, #3
 800f5fa:	d8da      	bhi.n	800f5b2 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f604:	3328      	adds	r3, #40	; 0x28
 800f606:	623b      	str	r3, [r7, #32]
  index = 16;
 800f608:	2310      	movs	r3, #16
 800f60a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f60c:	e01d      	b.n	800f64a <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f610:	3b01      	subs	r3, #1
 800f612:	69fa      	ldr	r2, [r7, #28]
 800f614:	5cd3      	ldrb	r3, [r2, r3]
 800f616:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	3b02      	subs	r3, #2
 800f61c:	69f9      	ldr	r1, [r7, #28]
 800f61e:	5ccb      	ldrb	r3, [r1, r3]
 800f620:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f622:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	3b03      	subs	r3, #3
 800f628:	69f9      	ldr	r1, [r7, #28]
 800f62a:	5ccb      	ldrb	r3, [r1, r3]
 800f62c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800f62e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800f630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f632:	3a04      	subs	r2, #4
 800f634:	69f9      	ldr	r1, [r7, #28]
 800f636:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800f638:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800f63a:	6a3b      	ldr	r3, [r7, #32]
 800f63c:	601a      	str	r2, [r3, #0]
    address--;
 800f63e:	6a3b      	ldr	r3, [r7, #32]
 800f640:	3b04      	subs	r3, #4
 800f642:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f646:	3b04      	subs	r3, #4
 800f648:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	2b03      	cmp	r3, #3
 800f64e:	d8de      	bhi.n	800f60e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f658:	33cc      	adds	r3, #204	; 0xcc
 800f65a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800f65c:	6a3b      	ldr	r3, [r7, #32]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	4b3b      	ldr	r3, [pc, #236]	; (800f750 <JPEG_Set_Huff_DHTMem+0x21c>)
 800f662:	4013      	ands	r3, r2
 800f664:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f66c:	021a      	lsls	r2, r3, #8
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	4313      	orrs	r3, r2
 800f672:	69fa      	ldr	r2, [r7, #28]
 800f674:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800f678:	4313      	orrs	r3, r2
 800f67a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f67c:	6a3b      	ldr	r3, [r7, #32]
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800f682:	6a3b      	ldr	r3, [r7, #32]
 800f684:	3b04      	subs	r3, #4
 800f686:	623b      	str	r3, [r7, #32]
  index = 160;
 800f688:	23a0      	movs	r3, #160	; 0xa0
 800f68a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f68c:	e021      	b.n	800f6d2 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f690:	3b01      	subs	r3, #1
 800f692:	69fa      	ldr	r2, [r7, #28]
 800f694:	4413      	add	r3, r2
 800f696:	7c1b      	ldrb	r3, [r3, #16]
 800f698:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800f69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69c:	3b02      	subs	r3, #2
 800f69e:	69f9      	ldr	r1, [r7, #28]
 800f6a0:	440b      	add	r3, r1
 800f6a2:	7c1b      	ldrb	r3, [r3, #16]
 800f6a4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f6a6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	3b03      	subs	r3, #3
 800f6ac:	69f9      	ldr	r1, [r7, #28]
 800f6ae:	440b      	add	r3, r1
 800f6b0:	7c1b      	ldrb	r3, [r3, #16]
 800f6b2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800f6b4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800f6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6b8:	3a04      	subs	r2, #4
 800f6ba:	69f9      	ldr	r1, [r7, #28]
 800f6bc:	440a      	add	r2, r1
 800f6be:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800f6c0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800f6c2:	6a3b      	ldr	r3, [r7, #32]
 800f6c4:	601a      	str	r2, [r3, #0]
    address--;
 800f6c6:	6a3b      	ldr	r3, [r7, #32]
 800f6c8:	3b04      	subs	r3, #4
 800f6ca:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ce:	3b04      	subs	r3, #4
 800f6d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d4:	2b03      	cmp	r3, #3
 800f6d6:	d8da      	bhi.n	800f68e <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f6e0:	33cc      	adds	r3, #204	; 0xcc
 800f6e2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800f6e4:	6a3b      	ldr	r3, [r7, #32]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	785b      	ldrb	r3, [r3, #1]
 800f6f0:	061a      	lsls	r2, r3, #24
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	431a      	orrs	r2, r3
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	041b      	lsls	r3, r3, #16
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f700:	6a3b      	ldr	r3, [r7, #32]
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f70e:	33dc      	adds	r3, #220	; 0xdc
 800f710:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800f712:	6a3b      	ldr	r3, [r7, #32]
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	4b0e      	ldr	r3, [pc, #56]	; (800f750 <JPEG_Set_Huff_DHTMem+0x21c>)
 800f718:	4013      	ands	r3, r2
 800f71a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	7bdb      	ldrb	r3, [r3, #15]
 800f720:	021a      	lsls	r2, r3, #8
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	4313      	orrs	r3, r2
 800f726:	693a      	ldr	r2, [r7, #16]
 800f728:	7b92      	ldrb	r2, [r2, #14]
 800f72a:	4313      	orrs	r3, r2
 800f72c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f72e:	6a3b      	ldr	r3, [r7, #32]
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800f734:	6a3b      	ldr	r3, [r7, #32]
 800f736:	3b04      	subs	r3, #4
 800f738:	623b      	str	r3, [r7, #32]
  index = 12;
 800f73a:	230c      	movs	r3, #12
 800f73c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f73e:	e027      	b.n	800f790 <JPEG_Set_Huff_DHTMem+0x25c>
 800f740:	0802ede8 	.word	0x0802ede8
 800f744:	0802ee9c 	.word	0x0802ee9c
 800f748:	0802edb0 	.word	0x0802edb0
 800f74c:	0802edcc 	.word	0x0802edcc
 800f750:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f756:	3301      	adds	r3, #1
 800f758:	693a      	ldr	r2, [r7, #16]
 800f75a:	5cd3      	ldrb	r3, [r2, r3]
 800f75c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800f75e:	6939      	ldr	r1, [r7, #16]
 800f760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f762:	440b      	add	r3, r1
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f768:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	3b01      	subs	r3, #1
 800f76e:	6939      	ldr	r1, [r7, #16]
 800f770:	5ccb      	ldrb	r3, [r1, r3]
 800f772:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800f774:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800f776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f778:	3a02      	subs	r2, #2
 800f77a:	6939      	ldr	r1, [r7, #16]
 800f77c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800f77e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f780:	6a3b      	ldr	r3, [r7, #32]
 800f782:	601a      	str	r2, [r3, #0]
    address--;
 800f784:	6a3b      	ldr	r3, [r7, #32]
 800f786:	3b04      	subs	r3, #4
 800f788:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78c:	3b04      	subs	r3, #4
 800f78e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f792:	2b03      	cmp	r3, #3
 800f794:	d8de      	bhi.n	800f754 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f79e:	33dc      	adds	r3, #220	; 0xdc
 800f7a0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	7c5b      	ldrb	r3, [r3, #17]
 800f7ae:	061a      	lsls	r2, r3, #24
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	431a      	orrs	r2, r3
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	7c1b      	ldrb	r3, [r3, #16]
 800f7b8:	041b      	lsls	r3, r3, #16
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800f7be:	6a3b      	ldr	r3, [r7, #32]
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f7cc:	33e8      	adds	r3, #232	; 0xe8
 800f7ce:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800f7d0:	6a3b      	ldr	r3, [r7, #32]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	4b6d      	ldr	r3, [pc, #436]	; (800f98c <JPEG_Set_Huff_DHTMem+0x458>)
 800f7d6:	4013      	ands	r3, r2
 800f7d8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	7edb      	ldrb	r3, [r3, #27]
 800f7de:	021a      	lsls	r2, r3, #8
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	693a      	ldr	r2, [r7, #16]
 800f7e6:	7e92      	ldrb	r2, [r2, #26]
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f7ec:	6a3b      	ldr	r3, [r7, #32]
 800f7ee:	68fa      	ldr	r2, [r7, #12]
 800f7f0:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800f7f2:	6a3b      	ldr	r3, [r7, #32]
 800f7f4:	3b04      	subs	r3, #4
 800f7f6:	623b      	str	r3, [r7, #32]
  index = 8;
 800f7f8:	2308      	movs	r3, #8
 800f7fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f7fc:	e021      	b.n	800f842 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f800:	3301      	adds	r3, #1
 800f802:	693a      	ldr	r2, [r7, #16]
 800f804:	4413      	add	r3, r2
 800f806:	7c1b      	ldrb	r3, [r3, #16]
 800f808:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800f80a:	6939      	ldr	r1, [r7, #16]
 800f80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f80e:	440b      	add	r3, r1
 800f810:	3310      	adds	r3, #16
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f816:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800f818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81a:	3b01      	subs	r3, #1
 800f81c:	6939      	ldr	r1, [r7, #16]
 800f81e:	440b      	add	r3, r1
 800f820:	7c1b      	ldrb	r3, [r3, #16]
 800f822:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800f824:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800f826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f828:	3a02      	subs	r2, #2
 800f82a:	6939      	ldr	r1, [r7, #16]
 800f82c:	440a      	add	r2, r1
 800f82e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800f830:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f832:	6a3b      	ldr	r3, [r7, #32]
 800f834:	601a      	str	r2, [r3, #0]
    address--;
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	3b04      	subs	r3, #4
 800f83a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83e:	3b04      	subs	r3, #4
 800f840:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f844:	2b03      	cmp	r3, #3
 800f846:	d8da      	bhi.n	800f7fe <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f850:	33e8      	adds	r3, #232	; 0xe8
 800f852:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800f854:	6a3b      	ldr	r3, [r7, #32]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	b29b      	uxth	r3, r3
 800f85a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800f85c:	69bb      	ldr	r3, [r7, #24]
 800f85e:	785b      	ldrb	r3, [r3, #1]
 800f860:	061a      	lsls	r2, r3, #24
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	431a      	orrs	r2, r3
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	041b      	lsls	r3, r3, #16
 800f86c:	4313      	orrs	r3, r2
 800f86e:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f870:	6a3b      	ldr	r3, [r7, #32]
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f87e:	33f8      	adds	r3, #248	; 0xf8
 800f880:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800f882:	6a3b      	ldr	r3, [r7, #32]
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	4b41      	ldr	r3, [pc, #260]	; (800f98c <JPEG_Set_Huff_DHTMem+0x458>)
 800f888:	4013      	ands	r3, r2
 800f88a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800f88c:	69bb      	ldr	r3, [r7, #24]
 800f88e:	7bdb      	ldrb	r3, [r3, #15]
 800f890:	021a      	lsls	r2, r3, #8
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	4313      	orrs	r3, r2
 800f896:	69ba      	ldr	r2, [r7, #24]
 800f898:	7b92      	ldrb	r2, [r2, #14]
 800f89a:	4313      	orrs	r3, r2
 800f89c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800f89e:	6a3b      	ldr	r3, [r7, #32]
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800f8a4:	6a3b      	ldr	r3, [r7, #32]
 800f8a6:	3b04      	subs	r3, #4
 800f8a8:	623b      	str	r3, [r7, #32]
  index = 12;
 800f8aa:	230c      	movs	r3, #12
 800f8ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f8ae:	e01d      	b.n	800f8ec <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	69ba      	ldr	r2, [r7, #24]
 800f8b6:	5cd3      	ldrb	r3, [r2, r3]
 800f8b8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800f8ba:	69b9      	ldr	r1, [r7, #24]
 800f8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8be:	440b      	add	r3, r1
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f8c4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800f8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	69b9      	ldr	r1, [r7, #24]
 800f8cc:	5ccb      	ldrb	r3, [r1, r3]
 800f8ce:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800f8d0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800f8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8d4:	3a02      	subs	r2, #2
 800f8d6:	69b9      	ldr	r1, [r7, #24]
 800f8d8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800f8da:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800f8dc:	6a3b      	ldr	r3, [r7, #32]
 800f8de:	601a      	str	r2, [r3, #0]
    address--;
 800f8e0:	6a3b      	ldr	r3, [r7, #32]
 800f8e2:	3b04      	subs	r3, #4
 800f8e4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e8:	3b04      	subs	r3, #4
 800f8ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ee:	2b03      	cmp	r3, #3
 800f8f0:	d8de      	bhi.n	800f8b0 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f8fa:	33f8      	adds	r3, #248	; 0xf8
 800f8fc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800f8fe:	6a3b      	ldr	r3, [r7, #32]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	b29b      	uxth	r3, r3
 800f904:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800f906:	69bb      	ldr	r3, [r7, #24]
 800f908:	7c5b      	ldrb	r3, [r3, #17]
 800f90a:	061a      	lsls	r2, r3, #24
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	431a      	orrs	r2, r3
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	7c1b      	ldrb	r3, [r3, #16]
 800f914:	041b      	lsls	r3, r3, #16
 800f916:	4313      	orrs	r3, r2
 800f918:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800f91a:	6a3b      	ldr	r3, [r7, #32]
 800f91c:	68fa      	ldr	r2, [r7, #12]
 800f91e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f928:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800f92c:	623b      	str	r3, [r7, #32]
  index = 160;
 800f92e:	23a0      	movs	r3, #160	; 0xa0
 800f930:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f932:	e021      	b.n	800f978 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f936:	3301      	adds	r3, #1
 800f938:	69ba      	ldr	r2, [r7, #24]
 800f93a:	4413      	add	r3, r2
 800f93c:	7c1b      	ldrb	r3, [r3, #16]
 800f93e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800f940:	69b9      	ldr	r1, [r7, #24]
 800f942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f944:	440b      	add	r3, r1
 800f946:	3310      	adds	r3, #16
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f94c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800f94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f950:	3b01      	subs	r3, #1
 800f952:	69b9      	ldr	r1, [r7, #24]
 800f954:	440b      	add	r3, r1
 800f956:	7c1b      	ldrb	r3, [r3, #16]
 800f958:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800f95a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800f95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f95e:	3a02      	subs	r2, #2
 800f960:	69b9      	ldr	r1, [r7, #24]
 800f962:	440a      	add	r2, r1
 800f964:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800f966:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800f968:	6a3b      	ldr	r3, [r7, #32]
 800f96a:	601a      	str	r2, [r3, #0]
    address--;
 800f96c:	6a3b      	ldr	r3, [r7, #32]
 800f96e:	3b04      	subs	r3, #4
 800f970:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800f972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f974:	3b04      	subs	r3, #4
 800f976:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800f978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97a:	2b03      	cmp	r3, #3
 800f97c:	d8da      	bhi.n	800f934 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800f97e:	bf00      	nop
 800f980:	bf00      	nop
 800f982:	372c      	adds	r7, #44	; 0x2c
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	ffff0000 	.word	0xffff0000

0800f990 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f99c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9a8:	f003 0303 	and.w	r3, r3, #3
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	d108      	bne.n	800f9c2 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	685a      	ldr	r2, [r3, #4]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f042 0208 	orr.w	r2, r2, #8
 800f9be:	605a      	str	r2, [r3, #4]
 800f9c0:	e007      	b.n	800f9d2 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	685a      	ldr	r2, [r3, #4]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f022 0208 	bic.w	r2, r2, #8
 800f9d0:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f022 0201 	bic.w	r2, r2, #1
 800f9e0:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800f9f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa00:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fa10:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fa20:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f042 0201 	orr.w	r2, r2, #1
 800fa30:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa36:	f003 030c 	and.w	r3, r3, #12
 800fa3a:	2b08      	cmp	r3, #8
 800fa3c:	d108      	bne.n	800fa50 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 800fa4c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800fa4e:	e00d      	b.n	800fa6c <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa54:	f003 030c 	and.w	r3, r3, #12
 800fa58:	2b0c      	cmp	r3, #12
 800fa5a:	d107      	bne.n	800fa6c <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fa6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800fa6c:	bf00      	nop
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa84:	f003 0303 	and.w	r3, r3, #3
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	d125      	bne.n	800fad8 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d01e      	beq.n	800fad8 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	4619      	mov	r1, r3
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7fe ff55 	bl	800e950 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2200      	movs	r2, #0
 800faaa:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	3304      	adds	r3, #4
 800fab0:	4619      	mov	r1, r3
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f7f2 fa74 	bl	8001fa0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fac6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fad6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fadc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d116      	bne.n	800fb12 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faea:	f003 0302 	and.w	r3, r3, #2
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d004      	beq.n	800fafc <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800faf2:	2108      	movs	r1, #8
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f000 f988 	bl	800fe0a <JPEG_ReadInputData>
 800fafa:	e00a      	b.n	800fb12 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb02:	f003 0304 	and.w	r3, r3, #4
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d003      	beq.n	800fb12 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800fb0a:	2101      	movs	r1, #1
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f000 f97c 	bl	800fe0a <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d116      	bne.n	800fb4c <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb24:	f003 0308 	and.w	r3, r3, #8
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d004      	beq.n	800fb36 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800fb2c:	2108      	movs	r1, #8
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f864 	bl	800fbfc <JPEG_StoreOutputData>
 800fb34:	e00a      	b.n	800fb4c <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb3c:	f003 0310 	and.w	r3, r3, #16
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d003      	beq.n	800fb4c <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800fb44:	2101      	movs	r1, #1
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 f858 	bl	800fbfc <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fb56:	2b20      	cmp	r3, #32
 800fb58:	d14b      	bne.n	800fbf2 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f022 0201 	bic.w	r2, r2, #1
 800fb68:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb6e:	f003 030c 	and.w	r3, r3, #12
 800fb72:	2b08      	cmp	r3, #8
 800fb74:	d107      	bne.n	800fb86 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800fb84:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fb94:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00a      	beq.n	800fbb4 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	69d9      	ldr	r1, [r3, #28]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba6:	461a      	mov	r2, r3
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7f2 fac9 	bl	8002140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbb8:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbbe:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f003 0303 	and.w	r3, r3, #3
 800fbdc:	2b02      	cmp	r3, #2
 800fbde:	d103      	bne.n	800fbe8 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f7f2 fb15 	bl	8002210 <HAL_JPEG_DecodeCpltCallback>
 800fbe6:	e002      	b.n	800fbee <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7ff f910 	bl	800ee0e <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800fbee:	2301      	movs	r3, #1
 800fbf0:	e000      	b.n	800fbf4 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b086      	sub	sp, #24
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	440b      	add	r3, r1
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d34b      	bcc.n	800fcb0 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800fc18:	2300      	movs	r3, #0
 800fc1a:	617b      	str	r3, [r7, #20]
 800fc1c:	e031      	b.n	800fc82 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc24:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	69da      	ldr	r2, [r3, #28]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc2e:	4413      	add	r3, r2
 800fc30:	68ba      	ldr	r2, [r7, #8]
 800fc32:	b2d2      	uxtb	r2, r2
 800fc34:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	0a19      	lsrs	r1, r3, #8
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	69da      	ldr	r2, [r3, #28]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc42:	3301      	adds	r3, #1
 800fc44:	4413      	add	r3, r2
 800fc46:	b2ca      	uxtb	r2, r1
 800fc48:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	0c19      	lsrs	r1, r3, #16
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	69da      	ldr	r2, [r3, #28]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc56:	3302      	adds	r3, #2
 800fc58:	4413      	add	r3, r2
 800fc5a:	b2ca      	uxtb	r2, r1
 800fc5c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	0e19      	lsrs	r1, r3, #24
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	69da      	ldr	r2, [r3, #28]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc6a:	3303      	adds	r3, #3
 800fc6c:	4413      	add	r3, r2
 800fc6e:	b2ca      	uxtb	r2, r1
 800fc70:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc76:	1d1a      	adds	r2, r3, #4
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	617b      	str	r3, [r7, #20]
 800fc82:	697a      	ldr	r2, [r7, #20]
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d3c9      	bcc.n	800fc1e <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc92:	429a      	cmp	r2, r3
 800fc94:	f040 80b5 	bne.w	800fe02 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	69d9      	ldr	r1, [r3, #28]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca0:	461a      	mov	r2, r3
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f7f2 fa4c 	bl	8002140 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800fcae:	e0a8      	b.n	800fe02 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	f240 80a2 	bls.w	800fe02 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	089b      	lsrs	r3, r3, #2
 800fcca:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800fccc:	2300      	movs	r3, #0
 800fcce:	617b      	str	r3, [r7, #20]
 800fcd0:	e031      	b.n	800fd36 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcd8:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	69da      	ldr	r2, [r3, #28]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce2:	4413      	add	r3, r2
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	b2d2      	uxtb	r2, r2
 800fce8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	0a19      	lsrs	r1, r3, #8
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	69da      	ldr	r2, [r3, #28]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	4413      	add	r3, r2
 800fcfa:	b2ca      	uxtb	r2, r1
 800fcfc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	0c19      	lsrs	r1, r3, #16
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	69da      	ldr	r2, [r3, #28]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0a:	3302      	adds	r3, #2
 800fd0c:	4413      	add	r3, r2
 800fd0e:	b2ca      	uxtb	r2, r1
 800fd10:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	0e19      	lsrs	r1, r3, #24
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	69da      	ldr	r2, [r3, #28]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd1e:	3303      	adds	r3, #3
 800fd20:	4413      	add	r3, r2
 800fd22:	b2ca      	uxtb	r2, r1
 800fd24:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2a:	1d1a      	adds	r2, r3, #4
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	3301      	adds	r3, #1
 800fd34:	617b      	str	r3, [r7, #20]
 800fd36:	697a      	ldr	r2, [r7, #20]
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d3c9      	bcc.n	800fcd2 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d10b      	bne.n	800fd62 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	69d9      	ldr	r1, [r3, #28]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd52:	461a      	mov	r2, r3
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7f2 f9f3 	bl	8002140 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fd60:	e04f      	b.n	800fe02 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd6a:	1ad3      	subs	r3, r2, r3
 800fd6c:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd74:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800fd76:	2300      	movs	r3, #0
 800fd78:	617b      	str	r3, [r7, #20]
 800fd7a:	e015      	b.n	800fda8 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	f003 0303 	and.w	r3, r3, #3
 800fd82:	00db      	lsls	r3, r3, #3
 800fd84:	68ba      	ldr	r2, [r7, #8]
 800fd86:	fa22 f103 	lsr.w	r1, r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	69da      	ldr	r2, [r3, #28]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd92:	4413      	add	r3, r2
 800fd94:	b2ca      	uxtb	r2, r1
 800fd96:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9c:	1c5a      	adds	r2, r3, #1
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	3301      	adds	r3, #1
 800fda6:	617b      	str	r3, [r7, #20]
 800fda8:	697a      	ldr	r2, [r7, #20]
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d3e5      	bcc.n	800fd7c <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	69d9      	ldr	r1, [r3, #28]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb8:	461a      	mov	r2, r3
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7f2 f9c0 	bl	8002140 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	625a      	str	r2, [r3, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f1c3 0304 	rsb	r3, r3, #4
 800fdcc:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	617b      	str	r3, [r7, #20]
 800fdd2:	e013      	b.n	800fdfc <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	00db      	lsls	r3, r3, #3
 800fdd8:	68ba      	ldr	r2, [r7, #8]
 800fdda:	fa22 f103 	lsr.w	r1, r2, r3
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	69da      	ldr	r2, [r3, #28]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde6:	4413      	add	r3, r2
 800fde8:	b2ca      	uxtb	r2, r1
 800fdea:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf0:	1c5a      	adds	r2, r3, #1
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	617b      	str	r3, [r7, #20]
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	2b03      	cmp	r3, #3
 800fe00:	d9e8      	bls.n	800fdd4 <JPEG_StoreOutputData+0x1d8>
}
 800fe02:	bf00      	nop
 800fe04:	3718      	adds	r7, #24
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b088      	sub	sp, #32
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
 800fe12:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800fe14:	2300      	movs	r3, #0
 800fe16:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <JPEG_ReadInputData+0x1c>
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d104      	bne.n	800fe30 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800fe26:	2101      	movs	r1, #1
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7fe fe89 	bl	800eb40 <HAL_JPEG_Pause>
 800fe2e:	e028      	b.n	800fe82 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6a1b      	ldr	r3, [r3, #32]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d906      	bls.n	800fe4a <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6a1b      	ldr	r3, [r3, #32]
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	61fb      	str	r3, [r7, #28]
 800fe48:	e01b      	b.n	800fe82 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6a1b      	ldr	r3, [r3, #32]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d115      	bne.n	800fe82 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6a1b      	ldr	r3, [r3, #32]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7f2 f93b 	bl	80020d8 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe66:	2b04      	cmp	r3, #4
 800fe68:	d905      	bls.n	800fe76 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe6e:	f023 0203 	bic.w	r2, r3, #3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe80:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	f040 809f 	bne.w	800ffce <JPEG_ReadInputData+0x1c4>
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	f000 809b 	beq.w	800ffce <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	089b      	lsrs	r3, r3, #2
 800fe9c:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800fe9e:	693a      	ldr	r2, [r7, #16]
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d335      	bcc.n	800ff12 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800fea6:	2300      	movs	r3, #0
 800fea8:	61bb      	str	r3, [r7, #24]
 800feaa:	e02d      	b.n	800ff08 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6a1b      	ldr	r3, [r3, #32]
 800feb0:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	699a      	ldr	r2, [r3, #24]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	4413      	add	r3, r2
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	699a      	ldr	r2, [r3, #24]
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	3301      	adds	r3, #1
 800fec6:	4413      	add	r3, r2
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800fecc:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6999      	ldr	r1, [r3, #24]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	3302      	adds	r3, #2
 800fed8:	440b      	add	r3, r1
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800fede:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	699a      	ldr	r2, [r3, #24]
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	3303      	adds	r3, #3
 800feea:	4413      	add	r3, r2
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800fef4:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800fef6:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6a1b      	ldr	r3, [r3, #32]
 800fefc:	1d1a      	adds	r2, r3, #4
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	3301      	adds	r3, #1
 800ff06:	61bb      	str	r3, [r7, #24]
 800ff08:	69ba      	ldr	r2, [r7, #24]
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d3cd      	bcc.n	800feac <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800ff10:	e05d      	b.n	800ffce <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d035      	beq.n	800ff84 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800ff18:	2300      	movs	r3, #0
 800ff1a:	61bb      	str	r3, [r7, #24]
 800ff1c:	e02d      	b.n	800ff7a <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6a1b      	ldr	r3, [r3, #32]
 800ff22:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	699a      	ldr	r2, [r3, #24]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	699a      	ldr	r2, [r3, #24]
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	3301      	adds	r3, #1
 800ff38:	4413      	add	r3, r2
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ff3e:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6999      	ldr	r1, [r3, #24]
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	3302      	adds	r3, #2
 800ff4a:	440b      	add	r3, r1
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ff50:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	699a      	ldr	r2, [r3, #24]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	3303      	adds	r3, #3
 800ff5c:	4413      	add	r3, r2
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ff66:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ff68:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6a1b      	ldr	r3, [r3, #32]
 800ff6e:	1d1a      	adds	r2, r3, #4
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800ff74:	69bb      	ldr	r3, [r7, #24]
 800ff76:	3301      	adds	r3, #1
 800ff78:	61bb      	str	r3, [r7, #24]
 800ff7a:	69ba      	ldr	r2, [r7, #24]
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d3cd      	bcc.n	800ff1e <JPEG_ReadInputData+0x114>
}
 800ff82:	e024      	b.n	800ffce <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800ff84:	2300      	movs	r3, #0
 800ff86:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800ff88:	2300      	movs	r3, #0
 800ff8a:	61bb      	str	r3, [r7, #24]
 800ff8c:	e017      	b.n	800ffbe <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	699a      	ldr	r2, [r3, #24]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6a1b      	ldr	r3, [r3, #32]
 800ff96:	4413      	add	r3, r2
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	f003 0303 	and.w	r3, r3, #3
 800ffa2:	00db      	lsls	r3, r3, #3
 800ffa4:	fa02 f303 	lsl.w	r3, r2, r3
 800ffa8:	697a      	ldr	r2, [r7, #20]
 800ffaa:	4313      	orrs	r3, r2
 800ffac:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6a1b      	ldr	r3, [r3, #32]
 800ffb2:	1c5a      	adds	r2, r3, #1
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	61bb      	str	r3, [r7, #24]
 800ffbe:	69ba      	ldr	r2, [r7, #24]
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d3e3      	bcc.n	800ff8e <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	697a      	ldr	r2, [r7, #20]
 800ffcc:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ffce:	bf00      	nop
 800ffd0:	3720      	adds	r7, #32
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
	...

0800ffd8 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ffd8:	b590      	push	{r4, r7, lr}
 800ffda:	b087      	sub	sp, #28
 800ffdc:	af02      	add	r7, sp, #8
 800ffde:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe6:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffee:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fff4:	68fa      	ldr	r2, [r7, #12]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d804      	bhi.n	8010004 <JPEG_DMA_StartProcess+0x2c>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fffe:	68ba      	ldr	r2, [r7, #8]
 8010000:	429a      	cmp	r2, r3
 8010002:	d901      	bls.n	8010008 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8010004:	2301      	movs	r3, #1
 8010006:	e074      	b.n	80100f2 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801000c:	4a3b      	ldr	r2, [pc, #236]	; (80100fc <JPEG_DMA_StartProcess+0x124>)
 801000e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010014:	4a3a      	ldr	r2, [pc, #232]	; (8010100 <JPEG_DMA_StartProcess+0x128>)
 8010016:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801001c:	4a39      	ldr	r2, [pc, #228]	; (8010104 <JPEG_DMA_StartProcess+0x12c>)
 801001e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010024:	4a36      	ldr	r2, [pc, #216]	; (8010100 <JPEG_DMA_StartProcess+0x128>)
 8010026:	655a      	str	r2, [r3, #84]	; 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801002c:	4a36      	ldr	r2, [pc, #216]	; (8010108 <JPEG_DMA_StartProcess+0x130>)
 801002e:	659a      	str	r2, [r3, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d002      	beq.n	801003c <JPEG_DMA_StartProcess+0x64>
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d107      	bne.n	801004c <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010040:	f043 0204 	orr.w	r2, r3, #4
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8010048:	2301      	movs	r3, #1
 801004a:	e052      	b.n	80100f2 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010054:	68f9      	ldr	r1, [r7, #12]
 8010056:	fbb3 f1f1 	udiv	r1, r3, r1
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	fb00 f101 	mul.w	r1, r0, r1
 8010060:	1a5b      	subs	r3, r3, r1
 8010062:	1ad2      	subs	r2, r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	629a      	str	r2, [r3, #40]	; 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010070:	68b9      	ldr	r1, [r7, #8]
 8010072:	fbb3 f1f1 	udiv	r1, r3, r1
 8010076:	68b8      	ldr	r0, [r7, #8]
 8010078:	fb00 f101 	mul.w	r1, r0, r1
 801007c:	1a5b      	subs	r3, r3, r1
 801007e:	1ad2      	subs	r2, r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	62da      	str	r2, [r3, #44]	; 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	3344      	adds	r3, #68	; 0x44
 801008e:	4619      	mov	r1, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	69db      	ldr	r3, [r3, #28]
 8010094:	461c      	mov	r4, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801009a:	2201      	movs	r2, #1
 801009c:	9200      	str	r2, [sp, #0]
 801009e:	4622      	mov	r2, r4
 80100a0:	f000 ff7a 	bl	8010f98 <HAL_MDMA_Start_IT>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d007      	beq.n	80100ba <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100ae:	f043 0204 	orr.w	r2, r3, #4
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80100b6:	2301      	movs	r3, #1
 80100b8:	e01b      	b.n	80100f2 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	699b      	ldr	r3, [r3, #24]
 80100c2:	4619      	mov	r1, r3
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	3340      	adds	r3, #64	; 0x40
 80100ca:	461c      	mov	r4, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100d0:	2201      	movs	r2, #1
 80100d2:	9200      	str	r2, [sp, #0]
 80100d4:	4622      	mov	r2, r4
 80100d6:	f000 ff5f 	bl	8010f98 <HAL_MDMA_Start_IT>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d007      	beq.n	80100f0 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100e4:	f043 0204 	orr.w	r2, r3, #4
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80100ec:	2301      	movs	r3, #1
 80100ee:	e000      	b.n	80100f2 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 80100f0:	2300      	movs	r3, #0
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3714      	adds	r7, #20
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd90      	pop	{r4, r7, pc}
 80100fa:	bf00      	nop
 80100fc:	0801040b 	.word	0x0801040b
 8010100:	080105f9 	.word	0x080105f9
 8010104:	08010537 	.word	0x08010537
 8010108:	08010649 	.word	0x08010649

0801010c <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010118:	f003 0303 	and.w	r3, r3, #3
 801011c:	2b02      	cmp	r3, #2
 801011e:	d125      	bne.n	801016c <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801012a:	2b00      	cmp	r3, #0
 801012c:	d01e      	beq.n	801016c <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	3304      	adds	r3, #4
 8010132:	4619      	mov	r1, r3
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7fe fc0b 	bl	800e950 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	3304      	adds	r3, #4
 8010144:	4619      	mov	r1, r3
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7f1 ff2a 	bl	8001fa0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801015a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801016a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010172:	f003 0320 	and.w	r3, r3, #32
 8010176:	2b00      	cmp	r3, #0
 8010178:	d039      	beq.n	80101ee <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801017e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	655a      	str	r2, [r3, #84]	; 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	681a      	ldr	r2, [r3, #0]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	f022 0201 	bic.w	r2, r2, #1
 8010194:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80101a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80101b4:	639a      	str	r2, [r3, #56]	; 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	2b02      	cmp	r3, #2
 80101c2:	d104      	bne.n	80101ce <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101c8:	4618      	mov	r0, r3
 80101ca:	f000 ffc1 	bl	8011150 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	2b02      	cmp	r3, #2
 80101da:	d105      	bne.n	80101e8 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101e0:	4618      	mov	r0, r3
 80101e2:	f000 ffb5 	bl	8011150 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 80101e6:	e002      	b.n	80101ee <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f000 f804 	bl	80101f6 <JPEG_DMA_EndProcess>
}
 80101ee:	bf00      	nop
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b084      	sub	sp, #16
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	695b      	ldr	r3, [r3, #20]
 801020a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 801020e:	1ad2      	subs	r2, r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801021c:	429a      	cmp	r2, r3
 801021e:	d10a      	bne.n	8010236 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	69d9      	ldr	r1, [r3, #28]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010228:	461a      	mov	r2, r3
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f7f1 ff88 	bl	8002140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801023c:	f003 0310 	and.w	r3, r3, #16
 8010240:	2b00      	cmp	r3, #0
 8010242:	d134      	bne.n	80102ae <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00a      	beq.n	8010262 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	69d9      	ldr	r1, [r3, #28]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010254:	461a      	mov	r2, r3
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f7f1 ff72 	bl	8002140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f022 0201 	bic.w	r2, r2, #1
 8010270:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010276:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801027c:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2200      	movs	r2, #0
 8010288:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2201      	movs	r2, #1
 8010290:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f003 0303 	and.w	r3, r3, #3
 801029a:	2b02      	cmp	r3, #2
 801029c:	d103      	bne.n	80102a6 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f7f1 ffb6 	bl	8002210 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 80102a4:	e00c      	b.n	80102c0 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f7fe fdb1 	bl	800ee0e <HAL_JPEG_EncodeCpltCallback>
}
 80102ac:	e008      	b.n	80102c0 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d102      	bne.n	80102c0 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f000 f804 	bl	80102c8 <JPEG_DMA_PollResidualData>
}
 80102c0:	bf00      	nop
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b086      	sub	sp, #24
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80102d0:	2310      	movs	r3, #16
 80102d2:	617b      	str	r3, [r7, #20]
 80102d4:	e04f      	b.n	8010376 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d146      	bne.n	8010370 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102e8:	f003 0310 	and.w	r3, r3, #16
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d03f      	beq.n	8010370 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102f6:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	69da      	ldr	r2, [r3, #28]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010300:	4413      	add	r3, r2
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	b2d2      	uxtb	r2, r2
 8010306:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	0a19      	lsrs	r1, r3, #8
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	69da      	ldr	r2, [r3, #28]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010314:	3301      	adds	r3, #1
 8010316:	4413      	add	r3, r2
 8010318:	b2ca      	uxtb	r2, r1
 801031a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	0c19      	lsrs	r1, r3, #16
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	69da      	ldr	r2, [r3, #28]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010328:	3302      	adds	r3, #2
 801032a:	4413      	add	r3, r2
 801032c:	b2ca      	uxtb	r2, r1
 801032e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	0e19      	lsrs	r1, r3, #24
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	69da      	ldr	r2, [r3, #28]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801033c:	3303      	adds	r3, #3
 801033e:	4413      	add	r3, r2
 8010340:	b2ca      	uxtb	r2, r1
 8010342:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010348:	1d1a      	adds	r2, r3, #4
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010356:	429a      	cmp	r2, r3
 8010358:	d10a      	bne.n	8010370 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	69d9      	ldr	r1, [r3, #28]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010362:	461a      	mov	r2, r3
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f7f1 feeb 	bl	8002140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2200      	movs	r2, #0
 801036e:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	3b01      	subs	r3, #1
 8010374:	617b      	str	r3, [r7, #20]
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1ac      	bne.n	80102d6 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010380:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010388:	f003 0310 	and.w	r3, r3, #16
 801038c:	2b00      	cmp	r3, #0
 801038e:	d004      	beq.n	801039a <JPEG_DMA_PollResidualData+0xd2>
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010396:	2b00      	cmp	r3, #0
 8010398:	d133      	bne.n	8010402 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	681a      	ldr	r2, [r3, #0]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f022 0201 	bic.w	r2, r2, #1
 80103a8:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00a      	beq.n	80103c8 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	69d9      	ldr	r1, [r3, #28]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ba:	461a      	mov	r2, r3
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7f1 febf 	bl	8002140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2200      	movs	r2, #0
 80103c6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103cc:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103d2:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2200      	movs	r2, #0
 80103de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2201      	movs	r2, #1
 80103e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	f003 0303 	and.w	r3, r3, #3
 80103f0:	2b02      	cmp	r3, #2
 80103f2:	d103      	bne.n	80103fc <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f7f1 ff0b 	bl	8002210 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 80103fa:	e002      	b.n	8010402 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7fe fd06 	bl	800ee0e <HAL_JPEG_EncodeCpltCallback>
}
 8010402:	bf00      	nop
 8010404:	3718      	adds	r7, #24
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 801040a:	b590      	push	{r4, r7, lr}
 801040c:	b087      	sub	sp, #28
 801040e:	af02      	add	r7, sp, #8
 8010410:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010416:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8010426:	631a      	str	r2, [r3, #48]	; 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801042c:	f248 030c 	movw	r3, #32780	; 0x800c
 8010430:	4013      	ands	r3, r2
 8010432:	2b0c      	cmp	r3, #12
 8010434:	d17c      	bne.n	8010530 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801043c:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	695b      	ldr	r3, [r3, #20]
 8010448:	f3c3 0310 	ubfx	r3, r3, #0, #17
 801044c:	1ad2      	subs	r2, r2, r3
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	6a1b      	ldr	r3, [r3, #32]
 8010456:	4619      	mov	r1, r3
 8010458:	68f8      	ldr	r0, [r7, #12]
 801045a:	f7f1 fe3d 	bl	80020d8 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010462:	68ba      	ldr	r2, [r7, #8]
 8010464:	429a      	cmp	r2, r3
 8010466:	d81f      	bhi.n	80104a8 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d10d      	bne.n	801048a <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010472:	f043 0204 	orr.w	r2, r3, #4
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2206      	movs	r2, #6
 801047e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8010482:	68f8      	ldr	r0, [r7, #12]
 8010484:	f7f1 febc 	bl	8002200 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8010488:	e052      	b.n	8010530 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010492:	68b9      	ldr	r1, [r7, #8]
 8010494:	fbb3 f1f1 	udiv	r1, r3, r1
 8010498:	68b8      	ldr	r0, [r7, #8]
 801049a:	fb00 f101 	mul.w	r1, r0, r1
 801049e:	1a5b      	subs	r3, r3, r1
 80104a0:	1ad2      	subs	r2, r2, r3
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	629a      	str	r2, [r3, #40]	; 0x28
 80104a6:	e010      	b.n	80104ca <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d00c      	beq.n	80104ca <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104b4:	f003 0303 	and.w	r3, r3, #3
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d006      	beq.n	80104ca <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104c0:	089b      	lsrs	r3, r3, #2
 80104c2:	3301      	adds	r3, #1
 80104c4:	009a      	lsls	r2, r3, #2
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	629a      	str	r2, [r3, #40]	; 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d124      	bne.n	8010520 <JPEG_MDMAInCpltCallback+0x116>
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d020      	beq.n	8010520 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	699b      	ldr	r3, [r3, #24]
 80104e6:	4619      	mov	r1, r3
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	3340      	adds	r3, #64	; 0x40
 80104ee:	461c      	mov	r4, r3
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104f4:	2201      	movs	r2, #1
 80104f6:	9200      	str	r2, [sp, #0]
 80104f8:	4622      	mov	r2, r4
 80104fa:	f000 fd4d 	bl	8010f98 <HAL_MDMA_Start_IT>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d00d      	beq.n	8010520 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010508:	f043 0204 	orr.w	r2, r3, #4
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2206      	movs	r2, #6
 8010514:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8010518:	68f8      	ldr	r0, [r7, #12]
 801051a:	f7f1 fe71 	bl	8002200 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 801051e:	e007      	b.n	8010530 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801052e:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8010530:	3714      	adds	r7, #20
 8010532:	46bd      	mov	sp, r7
 8010534:	bd90      	pop	{r4, r7, pc}

08010536 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8010536:	b590      	push	{r4, r7, lr}
 8010538:	b087      	sub	sp, #28
 801053a:	af02      	add	r7, sp, #8
 801053c:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010542:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8010552:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010558:	f248 030c 	movw	r3, #32780	; 0x800c
 801055c:	4013      	ands	r3, r2
 801055e:	2b0c      	cmp	r3, #12
 8010560:	d147      	bne.n	80105f2 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010568:	f003 0320 	and.w	r3, r3, #32
 801056c:	2b00      	cmp	r3, #0
 801056e:	d138      	bne.n	80105e2 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	695b      	ldr	r3, [r3, #20]
 801057a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 801057e:	1ad2      	subs	r2, r2, r3
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	69d9      	ldr	r1, [r3, #28]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801058c:	461a      	mov	r2, r3
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f7f1 fdd6 	bl	8002140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801059c:	2b00      	cmp	r3, #0
 801059e:	d120      	bne.n	80105e2 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	3344      	adds	r3, #68	; 0x44
 80105aa:	4619      	mov	r1, r3
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	69db      	ldr	r3, [r3, #28]
 80105b0:	461c      	mov	r4, r3
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105b6:	2201      	movs	r2, #1
 80105b8:	9200      	str	r2, [sp, #0]
 80105ba:	4622      	mov	r2, r4
 80105bc:	f000 fcec 	bl	8010f98 <HAL_MDMA_Start_IT>
 80105c0:	4603      	mov	r3, r0
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00d      	beq.n	80105e2 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105ca:	f043 0204 	orr.w	r2, r3, #4
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2206      	movs	r2, #6
 80105d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f7f1 fe10 	bl	8002200 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 80105e0:	e007      	b.n	80105f2 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80105f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

}
 80105f2:	3714      	adds	r7, #20
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd90      	pop	{r4, r7, pc}

080105f8 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010604:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f022 0201 	bic.w	r2, r2, #1
 8010614:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8010624:	631a      	str	r2, [r3, #48]	; 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2201      	movs	r2, #1
 801062a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010632:	f043 0204 	orr.w	r2, r3, #4
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 801063a:	68f8      	ldr	r0, [r7, #12]
 801063c:	f7f1 fde0 	bl	8002200 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 8010640:	bf00      	nop
 8010642:	3710      	adds	r7, #16
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010654:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801065a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801065e:	2b00      	cmp	r3, #0
 8010660:	d002      	beq.n	8010668 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8010662:	68f8      	ldr	r0, [r7, #12]
 8010664:	f7ff fdc7 	bl	80101f6 <JPEG_DMA_EndProcess>
  }
}
 8010668:	bf00      	nop
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8010670:	b480      	push	{r7}
 8010672:	b08b      	sub	sp, #44	; 0x2c
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8010678:	2300      	movs	r3, #0
 801067a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	3350      	adds	r3, #80	; 0x50
 8010682:	61bb      	str	r3, [r7, #24]

  i = 0;
 8010684:	2300      	movs	r3, #0
 8010686:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8010688:	e042      	b.n	8010710 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8010690:	2300      	movs	r3, #0
 8010692:	61fb      	str	r3, [r7, #28]
 8010694:	e033      	b.n	80106fe <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	00db      	lsls	r3, r3, #3
 801069a:	697a      	ldr	r2, [r7, #20]
 801069c:	fa22 f303 	lsr.w	r3, r2, r3
 80106a0:	b2db      	uxtb	r3, r3
 80106a2:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d103      	bne.n	80106b2 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80106aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ac:	3364      	adds	r3, #100	; 0x64
 80106ae:	627b      	str	r3, [r7, #36]	; 0x24
 80106b0:	e022      	b.n	80106f8 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	2264      	movs	r2, #100	; 0x64
 80106b6:	fb02 f303 	mul.w	r3, r2, r3
 80106ba:	687a      	ldr	r2, [r7, #4]
 80106bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80106be:	6a38      	ldr	r0, [r7, #32]
 80106c0:	69f9      	ldr	r1, [r7, #28]
 80106c2:	4401      	add	r1, r0
 80106c4:	4818      	ldr	r0, [pc, #96]	; (8010728 <JPEG_GetQuality+0xb8>)
 80106c6:	5c41      	ldrb	r1, [r0, r1]
 80106c8:	440a      	add	r2, r1
 80106ca:	7812      	ldrb	r2, [r2, #0]
 80106cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80106d0:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2b64      	cmp	r3, #100	; 0x64
 80106d6:	d807      	bhi.n	80106e8 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80106de:	085b      	lsrs	r3, r3, #1
 80106e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106e2:	4413      	add	r3, r2
 80106e4:	627b      	str	r3, [r7, #36]	; 0x24
 80106e6:	e007      	b.n	80106f8 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 80106e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80106f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106f4:	4413      	add	r3, r2
 80106f6:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	3301      	adds	r3, #1
 80106fc:	61fb      	str	r3, [r7, #28]
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	2b03      	cmp	r3, #3
 8010702:	d9c8      	bls.n	8010696 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8010704:	6a3b      	ldr	r3, [r7, #32]
 8010706:	3304      	adds	r3, #4
 8010708:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 801070a:	69bb      	ldr	r3, [r7, #24]
 801070c:	3304      	adds	r3, #4
 801070e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8010710:	6a3b      	ldr	r3, [r7, #32]
 8010712:	2b3c      	cmp	r3, #60	; 0x3c
 8010714:	d9b9      	bls.n	801068a <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8010716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010718:	099b      	lsrs	r3, r3, #6
}
 801071a:	4618      	mov	r0, r3
 801071c:	372c      	adds	r7, #44	; 0x2c
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop
 8010728:	0802ef50 	.word	0x0802ef50

0801072c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b084      	sub	sp, #16
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d101      	bne.n	801073e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 801073a:	2301      	movs	r3, #1
 801073c:	e0bf      	b.n	80108be <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8010744:	b2db      	uxtb	r3, r3
 8010746:	2b00      	cmp	r3, #0
 8010748:	d106      	bne.n	8010758 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2200      	movs	r2, #0
 801074e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f7f6 fea2 	bl	800749c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2202      	movs	r2, #2
 801075c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	699a      	ldr	r2, [r3, #24]
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 801076e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	6999      	ldr	r1, [r3, #24]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	685a      	ldr	r2, [r3, #4]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	689b      	ldr	r3, [r3, #8]
 801077e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8010784:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	691b      	ldr	r3, [r3, #16]
 801078a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	430a      	orrs	r2, r1
 8010792:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	6899      	ldr	r1, [r3, #8]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	4b4a      	ldr	r3, [pc, #296]	; (80108c8 <HAL_LTDC_Init+0x19c>)
 80107a0:	400b      	ands	r3, r1
 80107a2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	695b      	ldr	r3, [r3, #20]
 80107a8:	041b      	lsls	r3, r3, #16
 80107aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	6899      	ldr	r1, [r3, #8]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	699a      	ldr	r2, [r3, #24]
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	431a      	orrs	r2, r3
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	430a      	orrs	r2, r1
 80107c0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	68d9      	ldr	r1, [r3, #12]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	4b3e      	ldr	r3, [pc, #248]	; (80108c8 <HAL_LTDC_Init+0x19c>)
 80107ce:	400b      	ands	r3, r1
 80107d0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	69db      	ldr	r3, [r3, #28]
 80107d6:	041b      	lsls	r3, r3, #16
 80107d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	68d9      	ldr	r1, [r3, #12]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6a1a      	ldr	r2, [r3, #32]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	431a      	orrs	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	430a      	orrs	r2, r1
 80107ee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	6919      	ldr	r1, [r3, #16]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	4b33      	ldr	r3, [pc, #204]	; (80108c8 <HAL_LTDC_Init+0x19c>)
 80107fc:	400b      	ands	r3, r1
 80107fe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010804:	041b      	lsls	r3, r3, #16
 8010806:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	6919      	ldr	r1, [r3, #16]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	431a      	orrs	r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	430a      	orrs	r2, r1
 801081c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	6959      	ldr	r1, [r3, #20]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	4b27      	ldr	r3, [pc, #156]	; (80108c8 <HAL_LTDC_Init+0x19c>)
 801082a:	400b      	ands	r3, r1
 801082c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010832:	041b      	lsls	r3, r3, #16
 8010834:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	6959      	ldr	r1, [r3, #20]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	431a      	orrs	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	430a      	orrs	r2, r1
 801084a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010852:	021b      	lsls	r3, r3, #8
 8010854:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801085c:	041b      	lsls	r3, r3, #16
 801085e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 801086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010876:	68ba      	ldr	r2, [r7, #8]
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	4313      	orrs	r3, r2
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8010882:	431a      	orrs	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	430a      	orrs	r2, r1
 801088a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f042 0206 	orr.w	r2, r2, #6
 801089a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	699a      	ldr	r2, [r3, #24]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f042 0201 	orr.w	r2, r2, #1
 80108aa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2200      	movs	r2, #0
 80108b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2201      	movs	r2, #1
 80108b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80108bc:	2300      	movs	r3, #0
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	f000f800 	.word	0xf000f800

080108cc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108e2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f003 0304 	and.w	r3, r3, #4
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d023      	beq.n	8010936 <HAL_LTDC_IRQHandler+0x6a>
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	f003 0304 	and.w	r3, r3, #4
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d01e      	beq.n	8010936 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f022 0204 	bic.w	r2, r2, #4
 8010906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2204      	movs	r2, #4
 801090e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010916:	f043 0201 	orr.w	r2, r3, #1
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2204      	movs	r2, #4
 8010924:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2200      	movs	r2, #0
 801092c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 f86f 	bl	8010a14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f003 0302 	and.w	r3, r3, #2
 801093c:	2b00      	cmp	r3, #0
 801093e:	d023      	beq.n	8010988 <HAL_LTDC_IRQHandler+0xbc>
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	f003 0302 	and.w	r3, r3, #2
 8010946:	2b00      	cmp	r3, #0
 8010948:	d01e      	beq.n	8010988 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f022 0202 	bic.w	r2, r2, #2
 8010958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	2202      	movs	r2, #2
 8010960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010968:	f043 0202 	orr.w	r2, r3, #2
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2204      	movs	r2, #4
 8010976:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 f846 	bl	8010a14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f003 0301 	and.w	r3, r3, #1
 801098e:	2b00      	cmp	r3, #0
 8010990:	d01b      	beq.n	80109ca <HAL_LTDC_IRQHandler+0xfe>
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	f003 0301 	and.w	r3, r3, #1
 8010998:	2b00      	cmp	r3, #0
 801099a:	d016      	beq.n	80109ca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f022 0201 	bic.w	r2, r2, #1
 80109aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2201      	movs	r2, #1
 80109b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2201      	movs	r2, #1
 80109b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f7f4 f9ad 	bl	8004d24 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f003 0308 	and.w	r3, r3, #8
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d01b      	beq.n	8010a0c <HAL_LTDC_IRQHandler+0x140>
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	f003 0308 	and.w	r3, r3, #8
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d016      	beq.n	8010a0c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f022 0208 	bic.w	r2, r2, #8
 80109ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2208      	movs	r2, #8
 80109f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2201      	movs	r2, #1
 80109fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2200      	movs	r2, #0
 8010a02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 f80e 	bl	8010a28 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8010a0c:	bf00      	nop
 8010a0e:	3710      	adds	r7, #16
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8010a1c:	bf00      	nop
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8010a30:	bf00      	nop
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8010a3c:	b5b0      	push	{r4, r5, r7, lr}
 8010a3e:	b084      	sub	sp, #16
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d101      	bne.n	8010a56 <HAL_LTDC_ConfigLayer+0x1a>
 8010a52:	2302      	movs	r3, #2
 8010a54:	e02c      	b.n	8010ab0 <HAL_LTDC_ConfigLayer+0x74>
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2201      	movs	r2, #1
 8010a5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2202      	movs	r2, #2
 8010a62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8010a66:	68fa      	ldr	r2, [r7, #12]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2134      	movs	r1, #52	; 0x34
 8010a6c:	fb01 f303 	mul.w	r3, r1, r3
 8010a70:	4413      	add	r3, r2
 8010a72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	4614      	mov	r4, r2
 8010a7a:	461d      	mov	r5, r3
 8010a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a88:	682b      	ldr	r3, [r5, #0]
 8010a8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8010a8c:	687a      	ldr	r2, [r7, #4]
 8010a8e:	68b9      	ldr	r1, [r7, #8]
 8010a90:	68f8      	ldr	r0, [r7, #12]
 8010a92:	f000 f849 	bl	8010b28 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8010aae:	2300      	movs	r3, #0
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3710      	adds	r7, #16
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bdb0      	pop	{r4, r5, r7, pc}

08010ab8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d101      	bne.n	8010ad0 <HAL_LTDC_ProgramLineEvent+0x18>
 8010acc:	2302      	movs	r3, #2
 8010ace:	e023      	b.n	8010b18 <HAL_LTDC_ProgramLineEvent+0x60>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2202      	movs	r2, #2
 8010adc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f022 0201 	bic.w	r2, r2, #1
 8010aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8010af0:	4a0c      	ldr	r2, [pc, #48]	; (8010b24 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f042 0201 	orr.w	r2, r2, #1
 8010b04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2201      	movs	r2, #1
 8010b0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2200      	movs	r2, #0
 8010b12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8010b16:	2300      	movs	r3, #0
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr
 8010b24:	50001000 	.word	0x50001000

08010b28 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b089      	sub	sp, #36	; 0x24
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	685a      	ldr	r2, [r3, #4]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	68db      	ldr	r3, [r3, #12]
 8010b3e:	0c1b      	lsrs	r3, r3, #16
 8010b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010b44:	4413      	add	r3, r2
 8010b46:	041b      	lsls	r3, r3, #16
 8010b48:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	461a      	mov	r2, r3
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	01db      	lsls	r3, r3, #7
 8010b54:	4413      	add	r3, r2
 8010b56:	3384      	adds	r3, #132	; 0x84
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	6812      	ldr	r2, [r2, #0]
 8010b5e:	4611      	mov	r1, r2
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	01d2      	lsls	r2, r2, #7
 8010b64:	440a      	add	r2, r1
 8010b66:	3284      	adds	r2, #132	; 0x84
 8010b68:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8010b6c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	0c1b      	lsrs	r3, r3, #16
 8010b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010b7e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8010b80:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	4619      	mov	r1, r3
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	01db      	lsls	r3, r3, #7
 8010b8c:	440b      	add	r3, r1
 8010b8e:	3384      	adds	r3, #132	; 0x84
 8010b90:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8010b96:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	68da      	ldr	r2, [r3, #12]
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010ba6:	4413      	add	r3, r2
 8010ba8:	041b      	lsls	r3, r3, #16
 8010baa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	01db      	lsls	r3, r3, #7
 8010bb6:	4413      	add	r3, r2
 8010bb8:	3384      	adds	r3, #132	; 0x84
 8010bba:	689b      	ldr	r3, [r3, #8]
 8010bbc:	68fa      	ldr	r2, [r7, #12]
 8010bbe:	6812      	ldr	r2, [r2, #0]
 8010bc0:	4611      	mov	r1, r2
 8010bc2:	687a      	ldr	r2, [r7, #4]
 8010bc4:	01d2      	lsls	r2, r2, #7
 8010bc6:	440a      	add	r2, r1
 8010bc8:	3284      	adds	r2, #132	; 0x84
 8010bca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8010bce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	689a      	ldr	r2, [r3, #8]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	68db      	ldr	r3, [r3, #12]
 8010bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bde:	4413      	add	r3, r2
 8010be0:	1c5a      	adds	r2, r3, #1
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4619      	mov	r1, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	01db      	lsls	r3, r3, #7
 8010bec:	440b      	add	r3, r1
 8010bee:	3384      	adds	r3, #132	; 0x84
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	69fb      	ldr	r3, [r7, #28]
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	01db      	lsls	r3, r3, #7
 8010c02:	4413      	add	r3, r2
 8010c04:	3384      	adds	r3, #132	; 0x84
 8010c06:	691b      	ldr	r3, [r3, #16]
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	6812      	ldr	r2, [r2, #0]
 8010c0c:	4611      	mov	r1, r2
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	01d2      	lsls	r2, r2, #7
 8010c12:	440a      	add	r2, r1
 8010c14:	3284      	adds	r2, #132	; 0x84
 8010c16:	f023 0307 	bic.w	r3, r3, #7
 8010c1a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	461a      	mov	r2, r3
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	01db      	lsls	r3, r3, #7
 8010c26:	4413      	add	r3, r2
 8010c28:	3384      	adds	r3, #132	; 0x84
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	691b      	ldr	r3, [r3, #16]
 8010c30:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010c38:	021b      	lsls	r3, r3, #8
 8010c3a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010c42:	041b      	lsls	r3, r3, #16
 8010c44:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	699b      	ldr	r3, [r3, #24]
 8010c4a:	061b      	lsls	r3, r3, #24
 8010c4c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	461a      	mov	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	01db      	lsls	r3, r3, #7
 8010c58:	4413      	add	r3, r2
 8010c5a:	3384      	adds	r3, #132	; 0x84
 8010c5c:	699b      	ldr	r3, [r3, #24]
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	461a      	mov	r2, r3
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	01db      	lsls	r3, r3, #7
 8010c68:	4413      	add	r3, r2
 8010c6a:	3384      	adds	r3, #132	; 0x84
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	2300      	movs	r3, #0
 8010c70:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c78:	461a      	mov	r2, r3
 8010c7a:	69fb      	ldr	r3, [r7, #28]
 8010c7c:	431a      	orrs	r2, r3
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	431a      	orrs	r2, r3
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	4619      	mov	r1, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	01db      	lsls	r3, r3, #7
 8010c8c:	440b      	add	r3, r1
 8010c8e:	3384      	adds	r3, #132	; 0x84
 8010c90:	4619      	mov	r1, r3
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	4313      	orrs	r3, r2
 8010c96:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	01db      	lsls	r3, r3, #7
 8010ca2:	4413      	add	r3, r2
 8010ca4:	3384      	adds	r3, #132	; 0x84
 8010ca6:	695b      	ldr	r3, [r3, #20]
 8010ca8:	68fa      	ldr	r2, [r7, #12]
 8010caa:	6812      	ldr	r2, [r2, #0]
 8010cac:	4611      	mov	r1, r2
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	01d2      	lsls	r2, r2, #7
 8010cb2:	440a      	add	r2, r1
 8010cb4:	3284      	adds	r2, #132	; 0x84
 8010cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010cba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	01db      	lsls	r3, r3, #7
 8010cc6:	4413      	add	r3, r2
 8010cc8:	3384      	adds	r3, #132	; 0x84
 8010cca:	461a      	mov	r2, r3
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	695b      	ldr	r3, [r3, #20]
 8010cd0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	01db      	lsls	r3, r3, #7
 8010cdc:	4413      	add	r3, r2
 8010cde:	3384      	adds	r3, #132	; 0x84
 8010ce0:	69da      	ldr	r2, [r3, #28]
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	01db      	lsls	r3, r3, #7
 8010cec:	440b      	add	r3, r1
 8010cee:	3384      	adds	r3, #132	; 0x84
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	4b58      	ldr	r3, [pc, #352]	; (8010e54 <LTDC_SetConfig+0x32c>)
 8010cf4:	4013      	ands	r3, r2
 8010cf6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	69da      	ldr	r2, [r3, #28]
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	6a1b      	ldr	r3, [r3, #32]
 8010d00:	68f9      	ldr	r1, [r7, #12]
 8010d02:	6809      	ldr	r1, [r1, #0]
 8010d04:	4608      	mov	r0, r1
 8010d06:	6879      	ldr	r1, [r7, #4]
 8010d08:	01c9      	lsls	r1, r1, #7
 8010d0a:	4401      	add	r1, r0
 8010d0c:	3184      	adds	r1, #132	; 0x84
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	461a      	mov	r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	01db      	lsls	r3, r3, #7
 8010d1c:	4413      	add	r3, r2
 8010d1e:	3384      	adds	r3, #132	; 0x84
 8010d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	461a      	mov	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	01db      	lsls	r3, r3, #7
 8010d2c:	4413      	add	r3, r2
 8010d2e:	3384      	adds	r3, #132	; 0x84
 8010d30:	461a      	mov	r2, r3
 8010d32:	2300      	movs	r3, #0
 8010d34:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	01db      	lsls	r3, r3, #7
 8010d40:	4413      	add	r3, r2
 8010d42:	3384      	adds	r3, #132	; 0x84
 8010d44:	461a      	mov	r2, r3
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d4a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	691b      	ldr	r3, [r3, #16]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d102      	bne.n	8010d5a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8010d54:	2304      	movs	r3, #4
 8010d56:	61fb      	str	r3, [r7, #28]
 8010d58:	e01b      	b.n	8010d92 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	691b      	ldr	r3, [r3, #16]
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d102      	bne.n	8010d68 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8010d62:	2303      	movs	r3, #3
 8010d64:	61fb      	str	r3, [r7, #28]
 8010d66:	e014      	b.n	8010d92 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	691b      	ldr	r3, [r3, #16]
 8010d6c:	2b04      	cmp	r3, #4
 8010d6e:	d00b      	beq.n	8010d88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8010d74:	2b02      	cmp	r3, #2
 8010d76:	d007      	beq.n	8010d88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8010d7c:	2b03      	cmp	r3, #3
 8010d7e:	d003      	beq.n	8010d88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8010d84:	2b07      	cmp	r3, #7
 8010d86:	d102      	bne.n	8010d8e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8010d88:	2302      	movs	r3, #2
 8010d8a:	61fb      	str	r3, [r7, #28]
 8010d8c:	e001      	b.n	8010d92 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	461a      	mov	r2, r3
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	01db      	lsls	r3, r3, #7
 8010d9c:	4413      	add	r3, r2
 8010d9e:	3384      	adds	r3, #132	; 0x84
 8010da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	6812      	ldr	r2, [r2, #0]
 8010da6:	4611      	mov	r1, r2
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	01d2      	lsls	r2, r2, #7
 8010dac:	440a      	add	r2, r1
 8010dae:	3284      	adds	r2, #132	; 0x84
 8010db0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8010db4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dba:	69fa      	ldr	r2, [r7, #28]
 8010dbc:	fb02 f303 	mul.w	r3, r2, r3
 8010dc0:	041a      	lsls	r2, r3, #16
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	6859      	ldr	r1, [r3, #4]
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	1acb      	subs	r3, r1, r3
 8010dcc:	69f9      	ldr	r1, [r7, #28]
 8010dce:	fb01 f303 	mul.w	r3, r1, r3
 8010dd2:	3307      	adds	r3, #7
 8010dd4:	68f9      	ldr	r1, [r7, #12]
 8010dd6:	6809      	ldr	r1, [r1, #0]
 8010dd8:	4608      	mov	r0, r1
 8010dda:	6879      	ldr	r1, [r7, #4]
 8010ddc:	01c9      	lsls	r1, r1, #7
 8010dde:	4401      	add	r1, r0
 8010de0:	3184      	adds	r1, #132	; 0x84
 8010de2:	4313      	orrs	r3, r2
 8010de4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	461a      	mov	r2, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	01db      	lsls	r3, r3, #7
 8010df0:	4413      	add	r3, r2
 8010df2:	3384      	adds	r3, #132	; 0x84
 8010df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	01db      	lsls	r3, r3, #7
 8010e00:	440b      	add	r3, r1
 8010e02:	3384      	adds	r3, #132	; 0x84
 8010e04:	4619      	mov	r1, r3
 8010e06:	4b14      	ldr	r3, [pc, #80]	; (8010e58 <LTDC_SetConfig+0x330>)
 8010e08:	4013      	ands	r3, r2
 8010e0a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	461a      	mov	r2, r3
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	01db      	lsls	r3, r3, #7
 8010e16:	4413      	add	r3, r2
 8010e18:	3384      	adds	r3, #132	; 0x84
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e20:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	461a      	mov	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	01db      	lsls	r3, r3, #7
 8010e2c:	4413      	add	r3, r2
 8010e2e:	3384      	adds	r3, #132	; 0x84
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	6812      	ldr	r2, [r2, #0]
 8010e36:	4611      	mov	r1, r2
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	01d2      	lsls	r2, r2, #7
 8010e3c:	440a      	add	r2, r1
 8010e3e:	3284      	adds	r2, #132	; 0x84
 8010e40:	f043 0301 	orr.w	r3, r3, #1
 8010e44:	6013      	str	r3, [r2, #0]
}
 8010e46:	bf00      	nop
 8010e48:	3724      	adds	r7, #36	; 0x24
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	fffff8f8 	.word	0xfffff8f8
 8010e58:	fffff800 	.word	0xfffff800

08010e5c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010e64:	f7fb fe9e 	bl	800cba4 <HAL_GetTick>
 8010e68:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d101      	bne.n	8010e74 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8010e70:	2301      	movs	r3, #1
 8010e72:	e03b      	b.n	8010eec <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2202      	movs	r2, #2
 8010e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	68da      	ldr	r2, [r3, #12]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	f022 0201 	bic.w	r2, r2, #1
 8010e92:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8010e94:	e00f      	b.n	8010eb6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8010e96:	f7fb fe85 	bl	800cba4 <HAL_GetTick>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	2b05      	cmp	r3, #5
 8010ea2:	d908      	bls.n	8010eb6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2240      	movs	r2, #64	; 0x40
 8010ea8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2203      	movs	r2, #3
 8010eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e01a      	b.n	8010eec <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	f003 0301 	and.w	r3, r3, #1
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d1e8      	bne.n	8010e96 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 fb2f 	bl	8011528 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010eea:	2300      	movs	r3, #0
}
 8010eec:	4618      	mov	r0, r3
 8010eee:	3710      	adds	r7, #16
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}

08010ef4 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b087      	sub	sp, #28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8010f00:	2300      	movs	r3, #0
 8010f02:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d101      	bne.n	8010f0e <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e03e      	b.n	8010f8c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d101      	bne.n	8010f1c <HAL_MDMA_ConfigPostRequestMask+0x28>
 8010f18:	2302      	movs	r3, #2
 8010f1a:	e037      	b.n	8010f8c <HAL_MDMA_ConfigPostRequestMask+0x98>
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d126      	bne.n	8010f7e <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d11c      	bne.n	8010f78 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	68ba      	ldr	r2, [r7, #8]
 8010f44:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	687a      	ldr	r2, [r7, #4]
 8010f4c:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d108      	bne.n	8010f66 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	691a      	ldr	r2, [r3, #16]
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8010f62:	611a      	str	r2, [r3, #16]
 8010f64:	e00d      	b.n	8010f82 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	691a      	ldr	r2, [r3, #16]
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8010f74:	611a      	str	r2, [r3, #16]
 8010f76:	e004      	b.n	8010f82 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	75fb      	strb	r3, [r7, #23]
 8010f7c:	e001      	b.n	8010f82 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8010f7e:	2301      	movs	r3, #1
 8010f80:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	2200      	movs	r2, #0
 8010f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	371c      	adds	r7, #28
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr

08010f98 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b086      	sub	sp, #24
 8010f9c:	af02      	add	r7, sp, #8
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	607a      	str	r2, [r7, #4]
 8010fa4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d101      	bne.n	8010fb0 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010fac:	2301      	movs	r3, #1
 8010fae:	e070      	b.n	8011092 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	d101      	bne.n	8010fbe <HAL_MDMA_Start_IT+0x26>
 8010fba:	2302      	movs	r3, #2
 8010fbc:	e069      	b.n	8011092 <HAL_MDMA_Start_IT+0xfa>
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010fcc:	b2db      	uxtb	r3, r3
 8010fce:	2b01      	cmp	r3, #1
 8010fd0:	d158      	bne.n	8011084 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2202      	movs	r2, #2
 8010fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	68da      	ldr	r2, [r3, #12]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	f022 0201 	bic.w	r2, r2, #1
 8010fee:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	68b9      	ldr	r1, [r7, #8]
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f000 fa24 	bl	8011448 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	68da      	ldr	r2, [r3, #12]
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f042 0206 	orr.w	r2, r2, #6
 801100e:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011014:	2b00      	cmp	r3, #0
 8011016:	d007      	beq.n	8011028 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	68da      	ldr	r2, [r3, #12]
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f042 0210 	orr.w	r2, r2, #16
 8011026:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801102c:	2b00      	cmp	r3, #0
 801102e:	d007      	beq.n	8011040 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	68da      	ldr	r2, [r3, #12]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	f042 0208 	orr.w	r2, r2, #8
 801103e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011044:	2b00      	cmp	r3, #0
 8011046:	d007      	beq.n	8011058 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	68da      	ldr	r2, [r3, #12]
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f042 0220 	orr.w	r2, r2, #32
 8011056:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	68da      	ldr	r2, [r3, #12]
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	f042 0201 	orr.w	r2, r2, #1
 8011066:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011070:	d10e      	bne.n	8011090 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	68da      	ldr	r2, [r3, #12]
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011080:	60da      	str	r2, [r3, #12]
 8011082:	e005      	b.n	8011090 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2200      	movs	r2, #0
 8011088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 801108c:	2302      	movs	r3, #2
 801108e:	e000      	b.n	8011092 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8011090:	2300      	movs	r3, #0
}
 8011092:	4618      	mov	r0, r3
 8011094:	3710      	adds	r7, #16
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}

0801109a <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 801109a:	b580      	push	{r7, lr}
 801109c:	b084      	sub	sp, #16
 801109e:	af00      	add	r7, sp, #0
 80110a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 80110a2:	f7fb fd7f 	bl	800cba4 <HAL_GetTick>
 80110a6:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d101      	bne.n	80110b2 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 80110ae:	2301      	movs	r3, #1
 80110b0:	e04a      	b.n	8011148 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80110b8:	b2db      	uxtb	r3, r3
 80110ba:	2b02      	cmp	r3, #2
 80110bc:	d008      	beq.n	80110d0 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2280      	movs	r2, #128	; 0x80
 80110c2:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2200      	movs	r2, #0
 80110c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80110cc:	2301      	movs	r3, #1
 80110ce:	e03b      	b.n	8011148 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68da      	ldr	r2, [r3, #12]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80110de:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	68da      	ldr	r2, [r3, #12]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f022 0201 	bic.w	r2, r2, #1
 80110ee:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80110f0:	e016      	b.n	8011120 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80110f2:	f7fb fd57 	bl	800cba4 <HAL_GetTick>
 80110f6:	4602      	mov	r2, r0
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	1ad3      	subs	r3, r2, r3
 80110fc:	2b05      	cmp	r3, #5
 80110fe:	d90f      	bls.n	8011120 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011104:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2200      	movs	r2, #0
 8011110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2203      	movs	r2, #3
 8011118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 801111c:	2301      	movs	r3, #1
 801111e:	e013      	b.n	8011148 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	68db      	ldr	r3, [r3, #12]
 8011126:	f003 0301 	and.w	r3, r3, #1
 801112a:	2b00      	cmp	r3, #0
 801112c:	d1e1      	bne.n	80110f2 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	221f      	movs	r2, #31
 8011134:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2200      	movs	r2, #0
 801113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2201      	movs	r2, #1
 8011142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 8011146:	2300      	movs	r3, #0
}
 8011148:	4618      	mov	r0, r3
 801114a:	3710      	adds	r7, #16
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d101      	bne.n	8011162 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801115e:	2301      	movs	r3, #1
 8011160:	e017      	b.n	8011192 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011168:	b2db      	uxtb	r3, r3
 801116a:	2b02      	cmp	r3, #2
 801116c:	d004      	beq.n	8011178 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2280      	movs	r2, #128	; 0x80
 8011172:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8011174:	2301      	movs	r3, #1
 8011176:	e00c      	b.n	8011192 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2204      	movs	r2, #4
 801117c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	68da      	ldr	r2, [r3, #12]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	f022 0201 	bic.w	r2, r2, #1
 801118e:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8011190:	2300      	movs	r3, #0
}
 8011192:	4618      	mov	r0, r3
 8011194:	370c      	adds	r7, #12
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr
	...

080111a0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b086      	sub	sp, #24
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80111a8:	2300      	movs	r3, #0
 80111aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80111ac:	4b91      	ldr	r3, [pc, #580]	; (80113f4 <HAL_MDMA_IRQHandler+0x254>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	4a91      	ldr	r2, [pc, #580]	; (80113f8 <HAL_MDMA_IRQHandler+0x258>)
 80111b2:	fba2 2303 	umull	r2, r3, r2, r3
 80111b6:	0a9b      	lsrs	r3, r3, #10
 80111b8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	461a      	mov	r2, r3
 80111c0:	4b8e      	ldr	r3, [pc, #568]	; (80113fc <HAL_MDMA_IRQHandler+0x25c>)
 80111c2:	4413      	add	r3, r2
 80111c4:	099b      	lsrs	r3, r3, #6
 80111c6:	f003 031f 	and.w	r3, r3, #31
 80111ca:	2201      	movs	r2, #1
 80111cc:	fa02 f303 	lsl.w	r3, r2, r3
 80111d0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80111d2:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	4013      	ands	r3, r2
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f000 812d 	beq.w	801143c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d054      	beq.n	801129a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	68db      	ldr	r3, [r3, #12]
 80111f6:	f003 0302 	and.w	r3, r3, #2
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d04d      	beq.n	801129a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	68da      	ldr	r2, [r3, #12]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	f022 0202 	bic.w	r2, r2, #2
 801120c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801121c:	2b00      	cmp	r3, #0
 801121e:	d106      	bne.n	801122e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011224:	f043 0201 	orr.w	r2, r3, #1
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	669a      	str	r2, [r3, #104]	; 0x68
 801122c:	e005      	b.n	801123a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011232:	f043 0202 	orr.w	r2, r3, #2
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011240:	2b00      	cmp	r3, #0
 8011242:	d005      	beq.n	8011250 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011248:	f043 0204 	orr.w	r2, r3, #4
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011256:	2b00      	cmp	r3, #0
 8011258:	d005      	beq.n	8011266 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801125e:	f043 0208 	orr.w	r2, r3, #8
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801126c:	2b00      	cmp	r3, #0
 801126e:	d005      	beq.n	801127c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011274:	f043 0210 	orr.w	r2, r3, #16
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011282:	2b00      	cmp	r3, #0
 8011284:	d005      	beq.n	8011292 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801128a:	f043 0220 	orr.w	r2, r3, #32
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2201      	movs	r2, #1
 8011298:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f003 0310 	and.w	r3, r3, #16
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d012      	beq.n	80112ce <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	68db      	ldr	r3, [r3, #12]
 80112ae:	f003 0320 	and.w	r3, r3, #32
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d00b      	beq.n	80112ce <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	2210      	movs	r2, #16
 80112bc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d003      	beq.n	80112ce <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	f003 0308 	and.w	r3, r3, #8
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d012      	beq.n	8011302 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	f003 0310 	and.w	r3, r3, #16
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d00b      	beq.n	8011302 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2208      	movs	r2, #8
 80112f0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d003      	beq.n	8011302 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f003 0304 	and.w	r3, r3, #4
 801130c:	2b00      	cmp	r3, #0
 801130e:	d012      	beq.n	8011336 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	f003 0308 	and.w	r3, r3, #8
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00b      	beq.n	8011336 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2204      	movs	r2, #4
 8011324:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801132a:	2b00      	cmp	r3, #0
 801132c:	d003      	beq.n	8011336 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f003 0302 	and.w	r3, r3, #2
 8011340:	2b00      	cmp	r3, #0
 8011342:	d039      	beq.n	80113b8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	f003 0304 	and.w	r3, r3, #4
 801134e:	2b00      	cmp	r3, #0
 8011350:	d032      	beq.n	80113b8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	68da      	ldr	r2, [r3, #12]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8011360:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011368:	b2db      	uxtb	r3, r3
 801136a:	2b04      	cmp	r3, #4
 801136c:	d110      	bne.n	8011390 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2200      	movs	r2, #0
 8011372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2201      	movs	r2, #1
 801137a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011382:	2b00      	cmp	r3, #0
 8011384:	d05c      	beq.n	8011440 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	4798      	blx	r3
        }
        return;
 801138e:	e057      	b.n	8011440 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	2202      	movs	r2, #2
 8011396:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2200      	movs	r2, #0
 801139c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2201      	movs	r2, #1
 80113a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d003      	beq.n	80113b8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d040      	beq.n	8011442 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2204      	movs	r2, #4
 80113c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	68da      	ldr	r2, [r3, #12]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f022 0201 	bic.w	r2, r2, #1
 80113d6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	3301      	adds	r3, #1
 80113dc:	60bb      	str	r3, [r7, #8]
 80113de:	697a      	ldr	r2, [r7, #20]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d30d      	bcc.n	8011400 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	68db      	ldr	r3, [r3, #12]
 80113ea:	f003 0301 	and.w	r3, r3, #1
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d1f2      	bne.n	80113d8 <HAL_MDMA_IRQHandler+0x238>
 80113f2:	e006      	b.n	8011402 <HAL_MDMA_IRQHandler+0x262>
 80113f4:	24000054 	.word	0x24000054
 80113f8:	1b4e81b5 	.word	0x1b4e81b5
 80113fc:	adffffc0 	.word	0xadffffc0
        break;
 8011400:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2200      	movs	r2, #0
 8011406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	f003 0301 	and.w	r3, r3, #1
 8011414:	2b00      	cmp	r3, #0
 8011416:	d004      	beq.n	8011422 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2203      	movs	r2, #3
 801141c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8011420:	e003      	b.n	801142a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2201      	movs	r2, #1
 8011426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801142e:	2b00      	cmp	r3, #0
 8011430:	d007      	beq.n	8011442 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	4798      	blx	r3
 801143a:	e002      	b.n	8011442 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 801143c:	bf00      	nop
 801143e:	e000      	b.n	8011442 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8011440:	bf00      	nop
    }
  }
}
 8011442:	3718      	adds	r7, #24
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8011448:	b480      	push	{r7}
 801144a:	b087      	sub	sp, #28
 801144c:	af00      	add	r7, sp, #0
 801144e:	60f8      	str	r0, [r7, #12]
 8011450:	60b9      	str	r1, [r7, #8]
 8011452:	607a      	str	r2, [r7, #4]
 8011454:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	695a      	ldr	r2, [r3, #20]
 801145c:	4b31      	ldr	r3, [pc, #196]	; (8011524 <MDMA_SetConfig+0xdc>)
 801145e:	4013      	ands	r3, r2
 8011460:	683a      	ldr	r2, [r7, #0]
 8011462:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8011466:	68fa      	ldr	r2, [r7, #12]
 8011468:	6812      	ldr	r2, [r2, #0]
 801146a:	430b      	orrs	r3, r1
 801146c:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	695b      	ldr	r3, [r3, #20]
 8011474:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8011478:	6a3b      	ldr	r3, [r7, #32]
 801147a:	3b01      	subs	r3, #1
 801147c:	051a      	lsls	r2, r3, #20
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	430a      	orrs	r2, r1
 8011484:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	221f      	movs	r2, #31
 801148c:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	68ba      	ldr	r2, [r7, #8]
 801149c:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80114a4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80114ac:	d002      	beq.n	80114b4 <MDMA_SetConfig+0x6c>
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d108      	bne.n	80114c6 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80114c2:	629a      	str	r2, [r3, #40]	; 0x28
 80114c4:	e007      	b.n	80114d6 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80114d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80114dc:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80114e4:	d002      	beq.n	80114ec <MDMA_SetConfig+0xa4>
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d108      	bne.n	80114fe <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80114fa:	629a      	str	r2, [r3, #40]	; 0x28
 80114fc:	e007      	b.n	801150e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801150c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011518:	bf00      	nop
 801151a:	371c      	adds	r7, #28
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr
 8011524:	fffe0000 	.word	0xfffe0000

08011528 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8011528:	b480      	push	{r7}
 801152a:	b085      	sub	sp, #20
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	68d9      	ldr	r1, [r3, #12]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	691a      	ldr	r2, [r3, #16]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	430a      	orrs	r2, r1
 801153e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	695a      	ldr	r2, [r3, #20]
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	699b      	ldr	r3, [r3, #24]
 8011548:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801154e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6a1b      	ldr	r3, [r3, #32]
 8011554:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801155a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011560:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8011566:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801156c:	3b01      	subs	r3, #1
 801156e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8011570:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801157c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801157e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011588:	d107      	bne.n	801159a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	691a      	ldr	r2, [r3, #16]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8011598:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	2200      	movs	r2, #0
 80115a0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	da11      	bge.n	80115ce <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	695a      	ldr	r2, [r3, #20]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80115b8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115be:	425b      	negs	r3, r3
 80115c0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	68fa      	ldr	r2, [r7, #12]
 80115c8:	b292      	uxth	r2, r2
 80115ca:	621a      	str	r2, [r3, #32]
 80115cc:	e006      	b.n	80115dc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115d2:	461a      	mov	r2, r3
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	b292      	uxth	r2, r2
 80115da:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	da15      	bge.n	8011610 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	695a      	ldr	r2, [r3, #20]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80115f2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115f8:	425b      	negs	r3, r3
 80115fa:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	6a19      	ldr	r1, [r3, #32]
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	041a      	lsls	r2, r3, #16
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	430a      	orrs	r2, r1
 801160c:	621a      	str	r2, [r3, #32]
 801160e:	e009      	b.n	8011624 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	6a19      	ldr	r1, [r3, #32]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801161a:	041a      	lsls	r2, r3, #16
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	430a      	orrs	r2, r1
 8011622:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801162c:	d006      	beq.n	801163c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	685a      	ldr	r2, [r3, #4]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	b2d2      	uxtb	r2, r2
 8011638:	629a      	str	r2, [r3, #40]	; 0x28
 801163a:	e003      	b.n	8011644 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	2200      	movs	r2, #0
 8011642:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2200      	movs	r2, #0
 801164a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801164c:	bf00      	nop
 801164e:	3714      	adds	r7, #20
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr

08011658 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b086      	sub	sp, #24
 801165c:	af02      	add	r7, sp, #8
 801165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011660:	2300      	movs	r3, #0
 8011662:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011664:	f7fb fa9e 	bl	800cba4 <HAL_GetTick>
 8011668:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d102      	bne.n	8011676 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011670:	2301      	movs	r3, #1
 8011672:	73fb      	strb	r3, [r7, #15]
 8011674:	e0a5      	b.n	80117c2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2200      	movs	r2, #0
 801167a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011680:	2b00      	cmp	r3, #0
 8011682:	f040 809e 	bne.w	80117c2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f7f5 ffd6 	bl	8007638 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 801168c:	f241 3188 	movw	r1, #5000	; 0x1388
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f000 fd44 	bl	801211e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	689a      	ldr	r2, [r3, #8]
 801169c:	4b4b      	ldr	r3, [pc, #300]	; (80117cc <HAL_OSPI_Init+0x174>)
 801169e:	4013      	ands	r3, r2
 80116a0:	687a      	ldr	r2, [r7, #4]
 80116a2:	68d1      	ldr	r1, [r2, #12]
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	6912      	ldr	r2, [r2, #16]
 80116a8:	3a01      	subs	r2, #1
 80116aa:	0412      	lsls	r2, r2, #16
 80116ac:	4311      	orrs	r1, r2
 80116ae:	687a      	ldr	r2, [r7, #4]
 80116b0:	6952      	ldr	r2, [r2, #20]
 80116b2:	3a01      	subs	r2, #1
 80116b4:	0212      	lsls	r2, r2, #8
 80116b6:	4311      	orrs	r1, r2
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80116bc:	4311      	orrs	r1, r2
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	69d2      	ldr	r2, [r2, #28]
 80116c2:	4311      	orrs	r1, r2
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	6812      	ldr	r2, [r2, #0]
 80116c8:	430b      	orrs	r3, r1
 80116ca:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	68db      	ldr	r3, [r3, #12]
 80116d2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6a1a      	ldr	r2, [r3, #32]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	430a      	orrs	r2, r1
 80116e0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	430a      	orrs	r2, r1
 80116f2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80116fc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	3b01      	subs	r3, #1
 801170e:	021a      	lsls	r2, r3, #8
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	430a      	orrs	r2, r1
 8011716:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	2200      	movs	r2, #0
 8011722:	2120      	movs	r1, #32
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f000 fd45 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 801172a:	4603      	mov	r3, r0
 801172c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801172e:	7bfb      	ldrb	r3, [r7, #15]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d146      	bne.n	80117c2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011742:	1e5a      	subs	r2, r3, #1
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	430a      	orrs	r2, r1
 801174a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	689a      	ldr	r2, [r3, #8]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	430a      	orrs	r2, r1
 8011760:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801176a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011776:	431a      	orrs	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	430a      	orrs	r2, r1
 801177e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	f042 0201 	orr.w	r2, r2, #1
 8011790:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	699b      	ldr	r3, [r3, #24]
 8011796:	2b02      	cmp	r3, #2
 8011798:	d107      	bne.n	80117aa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	689a      	ldr	r2, [r3, #8]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f042 0202 	orr.w	r2, r2, #2
 80117a8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80117b2:	d103      	bne.n	80117bc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2201      	movs	r2, #1
 80117b8:	651a      	str	r2, [r3, #80]	; 0x50
 80117ba:	e002      	b.n	80117c2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2202      	movs	r2, #2
 80117c0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80117c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3710      	adds	r7, #16
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}
 80117cc:	f8e0f8f4 	.word	0xf8e0f8f4

080117d0 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b084      	sub	sp, #16
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80117d8:	2300      	movs	r3, #0
 80117da:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d102      	bne.n	80117e8 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80117e2:	2301      	movs	r3, #1
 80117e4:	73fb      	strb	r3, [r7, #15]
 80117e6:	e015      	b.n	8011814 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	681a      	ldr	r2, [r3, #0]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f022 0201 	bic.w	r2, r2, #1
 80117f6:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	689a      	ldr	r2, [r3, #8]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f022 0202 	bic.w	r2, r2, #2
 8011806:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f7f5 ff77 	bl	80076fc <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2200      	movs	r2, #0
 8011812:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 8011814:	7bfb      	ldrb	r3, [r7, #15]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3710      	adds	r7, #16
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
	...

08011820 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b086      	sub	sp, #24
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	3350      	adds	r3, #80	; 0x50
 801182e:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	6a1b      	ldr	r3, [r3, #32]
 8011836:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011844:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	f003 0304 	and.w	r3, r3, #4
 801184c:	2b00      	cmp	r3, #0
 801184e:	d03a      	beq.n	80118c6 <HAL_OSPI_IRQHandler+0xa6>
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011856:	2b00      	cmp	r3, #0
 8011858:	d035      	beq.n	80118c6 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	2b18      	cmp	r3, #24
 801185e:	d10f      	bne.n	8011880 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011864:	781a      	ldrb	r2, [r3, #0]
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801186e:	1c5a      	adds	r2, r3, #1
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011878:	1e5a      	subs	r2, r3, #1
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	649a      	str	r2, [r3, #72]	; 0x48
 801187e:	e012      	b.n	80118a6 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	2b28      	cmp	r3, #40	; 0x28
 8011884:	d10f      	bne.n	80118a6 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801188a:	697a      	ldr	r2, [r7, #20]
 801188c:	7812      	ldrb	r2, [r2, #0]
 801188e:	b2d2      	uxtb	r2, r2
 8011890:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011896:	1c5a      	adds	r2, r3, #1
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118a0:	1e5a      	subs	r2, r3, #1
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d107      	bne.n	80118be <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80118bc:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 fb7c 	bl	8011fbc <HAL_OSPI_FifoThresholdCallback>
 80118c4:	e0e7      	b.n	8011a96 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 80118c6:	693b      	ldr	r3, [r7, #16]
 80118c8:	f003 0302 	and.w	r3, r3, #2
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d067      	beq.n	80119a0 <HAL_OSPI_IRQHandler+0x180>
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d062      	beq.n	80119a0 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	2b28      	cmp	r3, #40	; 0x28
 80118de:	d131      	bne.n	8011944 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d015      	beq.n	8011914 <HAL_OSPI_IRQHandler+0xf4>
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d010      	beq.n	8011914 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118f6:	697a      	ldr	r2, [r7, #20]
 80118f8:	7812      	ldrb	r2, [r2, #0]
 80118fa:	b2d2      	uxtb	r2, r2
 80118fc:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011902:	1c5a      	adds	r2, r3, #1
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801190c:	1e5a      	subs	r2, r3, #1
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011912:	e0bd      	b.n	8011a90 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011918:	2b00      	cmp	r3, #0
 801191a:	f040 80b9 	bne.w	8011a90 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	2202      	movs	r2, #2
 8011924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	681a      	ldr	r2, [r3, #0]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8011934:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2202      	movs	r2, #2
 801193a:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f000 fb51 	bl	8011fe4 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011942:	e0a5      	b.n	8011a90 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	2202      	movs	r2, #2
 801194a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	681a      	ldr	r2, [r3, #0]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 801195a:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2202      	movs	r2, #2
 8011960:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	2b18      	cmp	r3, #24
 8011966:	d103      	bne.n	8011970 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f000 fb45 	bl	8011ff8 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801196e:	e08f      	b.n	8011a90 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	2b08      	cmp	r3, #8
 8011974:	d103      	bne.n	801197e <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f000 fb2a 	bl	8011fd0 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801197c:	e088      	b.n	8011a90 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011984:	f040 8084 	bne.w	8011a90 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801198c:	2b00      	cmp	r3, #0
 801198e:	d103      	bne.n	8011998 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f000 fb09 	bl	8011fa8 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011996:	e07b      	b.n	8011a90 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f000 fafb 	bl	8011f94 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 801199e:	e077      	b.n	8011a90 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	f003 0308 	and.w	r3, r3, #8
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d01e      	beq.n	80119e8 <HAL_OSPI_IRQHandler+0x1c8>
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d019      	beq.n	80119e8 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2208      	movs	r2, #8
 80119ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d00a      	beq.n	80119e0 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80119d8:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2202      	movs	r2, #2
 80119de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 fb13 	bl	801200c <HAL_OSPI_StatusMatchCallback>
 80119e6:	e056      	b.n	8011a96 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	f003 0301 	and.w	r3, r3, #1
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d03c      	beq.n	8011a6c <HAL_OSPI_IRQHandler+0x24c>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d037      	beq.n	8011a6c <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2201      	movs	r2, #1
 8011a02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8011a12:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2202      	movs	r2, #2
 8011a18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	f003 0304 	and.w	r3, r3, #4
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d01a      	beq.n	8011a5e <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	f022 0204 	bic.w	r2, r2, #4
 8011a36:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a3c:	4a18      	ldr	r2, [pc, #96]	; (8011aa0 <HAL_OSPI_IRQHandler+0x280>)
 8011a3e:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7ff fb83 	bl	8011150 <HAL_MDMA_Abort_IT>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d021      	beq.n	8011a94 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2202      	movs	r2, #2
 8011a54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f000 fa9c 	bl	8011f94 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011a5c:	e01a      	b.n	8011a94 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2202      	movs	r2, #2
 8011a62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f000 fa95 	bl	8011f94 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011a6a:	e013      	b.n	8011a94 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	f003 0310 	and.w	r3, r3, #16
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00f      	beq.n	8011a96 <HAL_OSPI_IRQHandler+0x276>
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d00a      	beq.n	8011a96 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2210      	movs	r2, #16
 8011a86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f000 fac9 	bl	8012020 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011a8e:	e002      	b.n	8011a96 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8011a90:	bf00      	nop
 8011a92:	e000      	b.n	8011a96 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8011a94:	bf00      	nop
}
 8011a96:	bf00      	nop
 8011a98:	3718      	adds	r7, #24
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	0801213d 	.word	0x0801213d

08011aa4 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b08a      	sub	sp, #40	; 0x28
 8011aa8:	af02      	add	r7, sp, #8
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8011ab0:	f7fb f878 	bl	800cba4 <HAL_GetTick>
 8011ab4:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011aba:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ac0:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	2b02      	cmp	r3, #2
 8011ac6:	d104      	bne.n	8011ad2 <HAL_OSPI_Command+0x2e>
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	68db      	ldr	r3, [r3, #12]
 8011acc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011ad0:	d115      	bne.n	8011afe <HAL_OSPI_Command+0x5a>
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	2b14      	cmp	r3, #20
 8011ad6:	d107      	bne.n	8011ae8 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d00e      	beq.n	8011afe <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	2b03      	cmp	r3, #3
 8011ae6:	d00a      	beq.n	8011afe <HAL_OSPI_Command+0x5a>
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	2b24      	cmp	r3, #36	; 0x24
 8011aec:	d15b      	bne.n	8011ba6 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d003      	beq.n	8011afe <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8011afa:	2b03      	cmp	r3, #3
 8011afc:	d153      	bne.n	8011ba6 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	9300      	str	r3, [sp, #0]
 8011b02:	69bb      	ldr	r3, [r7, #24]
 8011b04:	2200      	movs	r2, #0
 8011b06:	2120      	movs	r1, #32
 8011b08:	68f8      	ldr	r0, [r7, #12]
 8011b0a:	f000 fb53 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8011b12:	7ffb      	ldrb	r3, [r7, #31]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d14c      	bne.n	8011bb2 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8011b1e:	68b9      	ldr	r1, [r7, #8]
 8011b20:	68f8      	ldr	r0, [r7, #12]
 8011b22:	f000 fb7f 	bl	8012224 <OSPI_ConfigCmd>
 8011b26:	4603      	mov	r3, r0
 8011b28:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8011b2a:	7ffb      	ldrb	r3, [r7, #31]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d140      	bne.n	8011bb2 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d10e      	bne.n	8011b56 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	9300      	str	r3, [sp, #0]
 8011b3c:	69bb      	ldr	r3, [r7, #24]
 8011b3e:	2201      	movs	r2, #1
 8011b40:	2102      	movs	r1, #2
 8011b42:	68f8      	ldr	r0, [r7, #12]
 8011b44:	f000 fb36 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	2202      	movs	r2, #2
 8011b52:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8011b54:	e02d      	b.n	8011bb2 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d103      	bne.n	8011b66 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	2204      	movs	r2, #4
 8011b62:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011b64:	e025      	b.n	8011bb2 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	d10b      	bne.n	8011b86 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b72:	2b24      	cmp	r3, #36	; 0x24
 8011b74:	d103      	bne.n	8011b7e <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2204      	movs	r2, #4
 8011b7a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011b7c:	e019      	b.n	8011bb2 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2214      	movs	r2, #20
 8011b82:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011b84:	e015      	b.n	8011bb2 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	2b02      	cmp	r3, #2
 8011b8c:	d111      	bne.n	8011bb2 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b92:	2b14      	cmp	r3, #20
 8011b94:	d103      	bne.n	8011b9e <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	2204      	movs	r2, #4
 8011b9a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011b9c:	e009      	b.n	8011bb2 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2224      	movs	r2, #36	; 0x24
 8011ba2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011ba4:	e005      	b.n	8011bb2 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2210      	movs	r2, #16
 8011bae:	655a      	str	r2, [r3, #84]	; 0x54
 8011bb0:	e000      	b.n	8011bb4 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8011bb2:	bf00      	nop
  }

  /* Return function status */
  return status;
 8011bb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3720      	adds	r7, #32
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}

08011bbe <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8011bbe:	b580      	push	{r7, lr}
 8011bc0:	b08a      	sub	sp, #40	; 0x28
 8011bc2:	af02      	add	r7, sp, #8
 8011bc4:	60f8      	str	r0, [r7, #12]
 8011bc6:	60b9      	str	r1, [r7, #8]
 8011bc8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011bca:	f7fa ffeb 	bl	800cba4 <HAL_GetTick>
 8011bce:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	3350      	adds	r3, #80	; 0x50
 8011bd6:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d105      	bne.n	8011bea <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8011bde:	2301      	movs	r3, #1
 8011be0:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2208      	movs	r2, #8
 8011be6:	655a      	str	r2, [r3, #84]	; 0x54
 8011be8:	e057      	b.n	8011c9a <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bee:	2b04      	cmp	r3, #4
 8011bf0:	d14e      	bne.n	8011c90 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bf8:	1c5a      	adds	r2, r3, #1
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	68ba      	ldr	r2, [r7, #8]
 8011c0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	681a      	ldr	r2, [r3, #0]
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011c1a:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	69bb      	ldr	r3, [r7, #24]
 8011c22:	2201      	movs	r2, #1
 8011c24:	2104      	movs	r1, #4
 8011c26:	68f8      	ldr	r0, [r7, #12]
 8011c28:	f000 fac4 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8011c30:	7ffb      	ldrb	r3, [r7, #31]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d113      	bne.n	8011c5e <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c3a:	781a      	ldrb	r2, [r3, #0]
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c44:	1c5a      	adds	r2, r3, #1
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c4e:	1e5a      	subs	r2, r3, #1
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d1df      	bne.n	8011c1c <HAL_OSPI_Transmit+0x5e>
 8011c5c:	e000      	b.n	8011c60 <HAL_OSPI_Transmit+0xa2>
          break;
 8011c5e:	bf00      	nop

      if (status == HAL_OK)
 8011c60:	7ffb      	ldrb	r3, [r7, #31]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d119      	bne.n	8011c9a <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	2201      	movs	r2, #1
 8011c6e:	2102      	movs	r1, #2
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f000 fa9f 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 8011c76:	4603      	mov	r3, r0
 8011c78:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8011c7a:	7ffb      	ldrb	r3, [r7, #31]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d10c      	bne.n	8011c9a <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2202      	movs	r2, #2
 8011c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2202      	movs	r2, #2
 8011c8c:	651a      	str	r2, [r3, #80]	; 0x50
 8011c8e:	e004      	b.n	8011c9a <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8011c90:	2301      	movs	r3, #1
 8011c92:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2210      	movs	r2, #16
 8011c98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8011c9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3720      	adds	r7, #32
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b08c      	sub	sp, #48	; 0x30
 8011ca8:	af02      	add	r7, sp, #8
 8011caa:	60f8      	str	r0, [r7, #12]
 8011cac:	60b9      	str	r1, [r7, #8]
 8011cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011cb0:	f7fa ff78 	bl	800cba4 <HAL_GetTick>
 8011cb4:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	3350      	adds	r3, #80	; 0x50
 8011cbc:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cc4:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8011cce:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d106      	bne.n	8011ce4 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2208      	movs	r2, #8
 8011ce0:	655a      	str	r2, [r3, #84]	; 0x54
 8011ce2:	e07c      	b.n	8011dde <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ce8:	2b04      	cmp	r3, #4
 8011cea:	d172      	bne.n	8011dd2 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cf2:	1c5a      	adds	r2, r3, #1
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	68ba      	ldr	r2, [r7, #8]
 8011d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011d18:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011d22:	d104      	bne.n	8011d2e <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	69ba      	ldr	r2, [r7, #24]
 8011d2a:	649a      	str	r2, [r3, #72]	; 0x48
 8011d2c:	e011      	b.n	8011d52 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8011d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d004      	beq.n	8011d48 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	69ba      	ldr	r2, [r7, #24]
 8011d44:	649a      	str	r2, [r3, #72]	; 0x48
 8011d46:	e004      	b.n	8011d52 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	697a      	ldr	r2, [r7, #20]
 8011d4e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	6a3b      	ldr	r3, [r7, #32]
 8011d58:	2201      	movs	r2, #1
 8011d5a:	2106      	movs	r1, #6
 8011d5c:	68f8      	ldr	r0, [r7, #12]
 8011d5e:	f000 fa29 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 8011d62:	4603      	mov	r3, r0
 8011d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8011d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d114      	bne.n	8011d9a <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d74:	69fa      	ldr	r2, [r7, #28]
 8011d76:	7812      	ldrb	r2, [r2, #0]
 8011d78:	b2d2      	uxtb	r2, r2
 8011d7a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d80:	1c5a      	adds	r2, r3, #1
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d8a:	1e5a      	subs	r2, r3, #1
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d1dc      	bne.n	8011d52 <HAL_OSPI_Receive+0xae>
 8011d98:	e000      	b.n	8011d9c <HAL_OSPI_Receive+0xf8>
          break;
 8011d9a:	bf00      	nop

      if (status == HAL_OK)
 8011d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d11c      	bne.n	8011dde <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	9300      	str	r3, [sp, #0]
 8011da8:	6a3b      	ldr	r3, [r7, #32]
 8011daa:	2201      	movs	r2, #1
 8011dac:	2102      	movs	r1, #2
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f000 fa00 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 8011db4:	4603      	mov	r3, r0
 8011db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8011dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d10d      	bne.n	8011dde <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2202      	movs	r2, #2
 8011dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2202      	movs	r2, #2
 8011dce:	651a      	str	r2, [r3, #80]	; 0x50
 8011dd0:	e005      	b.n	8011dde <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2210      	movs	r2, #16
 8011ddc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8011dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3728      	adds	r7, #40	; 0x28
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8011dea:	b580      	push	{r7, lr}
 8011dec:	b08a      	sub	sp, #40	; 0x28
 8011dee:	af02      	add	r7, sp, #8
 8011df0:	60f8      	str	r0, [r7, #12]
 8011df2:	60b9      	str	r1, [r7, #8]
 8011df4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011df6:	f7fa fed5 	bl	800cba4 <HAL_GetTick>
 8011dfa:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e02:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8011e0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e12:	2b04      	cmp	r3, #4
 8011e14:	d164      	bne.n	8011ee0 <HAL_OSPI_AutoPolling+0xf6>
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	68db      	ldr	r3, [r3, #12]
 8011e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011e1e:	d15f      	bne.n	8011ee0 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	69bb      	ldr	r3, [r7, #24]
 8011e26:	2200      	movs	r2, #0
 8011e28:	2120      	movs	r1, #32
 8011e2a:	68f8      	ldr	r0, [r7, #12]
 8011e2c:	f000 f9c2 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 8011e30:	4603      	mov	r3, r0
 8011e32:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8011e34:	7ffb      	ldrb	r3, [r7, #31]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d158      	bne.n	8011eec <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	6812      	ldr	r2, [r2, #0]
 8011e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	68ba      	ldr	r2, [r7, #8]
 8011e4c:	6852      	ldr	r2, [r2, #4]
 8011e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	68ba      	ldr	r2, [r7, #8]
 8011e58:	6912      	ldr	r2, [r2, #16]
 8011e5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	6899      	ldr	r1, [r3, #8]
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	68db      	ldr	r3, [r3, #12]
 8011e70:	430b      	orrs	r3, r1
 8011e72:	431a      	orrs	r2, r3
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8011e7c:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	68db      	ldr	r3, [r3, #12]
 8011e82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011e86:	d104      	bne.n	8011e92 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	697a      	ldr	r2, [r7, #20]
 8011e8e:	649a      	str	r2, [r3, #72]	; 0x48
 8011e90:	e011      	b.n	8011eb6 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8011e9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d004      	beq.n	8011eac <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	697a      	ldr	r2, [r7, #20]
 8011ea8:	649a      	str	r2, [r3, #72]	; 0x48
 8011eaa:	e004      	b.n	8011eb6 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	693a      	ldr	r2, [r7, #16]
 8011eb2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	9300      	str	r3, [sp, #0]
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	2108      	movs	r1, #8
 8011ec0:	68f8      	ldr	r0, [r7, #12]
 8011ec2:	f000 f977 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8011eca:	7ffb      	ldrb	r3, [r7, #31]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d10d      	bne.n	8011eec <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2208      	movs	r2, #8
 8011ed6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	2202      	movs	r2, #2
 8011edc:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8011ede:	e005      	b.n	8011eec <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2210      	movs	r2, #16
 8011ee8:	655a      	str	r2, [r3, #84]	; 0x54
 8011eea:	e000      	b.n	8011eee <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8011eec:	bf00      	nop
  }

  /* Return function status */
  return status;
 8011eee:	7ffb      	ldrb	r3, [r7, #31]
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3720      	adds	r7, #32
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b086      	sub	sp, #24
 8011efc:	af02      	add	r7, sp, #8
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011f02:	f7fa fe4f 	bl	800cba4 <HAL_GetTick>
 8011f06:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f0c:	2b04      	cmp	r3, #4
 8011f0e:	d134      	bne.n	8011f7a <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f14:	9300      	str	r3, [sp, #0]
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	2120      	movs	r1, #32
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f000 f949 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 8011f22:	4603      	mov	r3, r0
 8011f24:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8011f26:	7bfb      	ldrb	r3, [r7, #15]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d12b      	bne.n	8011f84 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2288      	movs	r2, #136	; 0x88
 8011f30:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2b08      	cmp	r3, #8
 8011f38:	d111      	bne.n	8011f5e <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	683a      	ldr	r2, [r7, #0]
 8011f40:	6852      	ldr	r2, [r2, #4]
 8011f42:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	2210      	movs	r2, #16
 8011f4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	681a      	ldr	r2, [r3, #0]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011f5c:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	681a      	ldr	r2, [r3, #0]
 8011f64:	4b0a      	ldr	r3, [pc, #40]	; (8011f90 <HAL_OSPI_MemoryMapped+0x98>)
 8011f66:	4013      	ands	r3, r2
 8011f68:	683a      	ldr	r2, [r7, #0]
 8011f6a:	6812      	ldr	r2, [r2, #0]
 8011f6c:	431a      	orrs	r2, r3
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8011f76:	601a      	str	r2, [r3, #0]
 8011f78:	e004      	b.n	8011f84 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2210      	movs	r2, #16
 8011f82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8011f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	cffffff7 	.word	0xcffffff7

08011f94 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b083      	sub	sp, #12
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8011f9c:	bf00      	nop
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr

08011fa8 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8011fb0:	bf00      	nop
 8011fb2:	370c      	adds	r7, #12
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8011fc4:	bf00      	nop
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8011fd8:	bf00      	nop
 8011fda:	370c      	adds	r7, #12
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr

08011fe4 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8011fec:	bf00      	nop
 8011fee:	370c      	adds	r7, #12
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr

08011ff8 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8012000:	bf00      	nop
 8012002:	370c      	adds	r7, #12
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr

0801200c <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 801200c:	b480      	push	{r7}
 801200e:	b083      	sub	sp, #12
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8012014:	bf00      	nop
 8012016:	370c      	adds	r7, #12
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr

08012020 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8012020:	b480      	push	{r7}
 8012022:	b083      	sub	sp, #12
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8012028:	bf00      	nop
 801202a:	370c      	adds	r7, #12
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr

08012034 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b088      	sub	sp, #32
 8012038:	af02      	add	r7, sp, #8
 801203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801203c:	2300      	movs	r3, #0
 801203e:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8012040:	f7fa fdb0 	bl	800cba4 <HAL_GetTick>
 8012044:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801204a:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	f003 0308 	and.w	r3, r3, #8
 8012052:	2b00      	cmp	r3, #0
 8012054:	d104      	bne.n	8012060 <HAL_OSPI_Abort+0x2c>
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	f003 0304 	and.w	r3, r3, #4
 801205c:	2b00      	cmp	r3, #0
 801205e:	d052      	beq.n	8012106 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	f003 0304 	and.w	r3, r3, #4
 801206a:	2b00      	cmp	r3, #0
 801206c:	d014      	beq.n	8012098 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f022 0204 	bic.w	r2, r2, #4
 801207c:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012082:	4618      	mov	r0, r3
 8012084:	f7ff f809 	bl	801109a <HAL_MDMA_Abort>
 8012088:	4603      	mov	r3, r0
 801208a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 801208c:	7dfb      	ldrb	r3, [r7, #23]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d002      	beq.n	8012098 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2204      	movs	r2, #4
 8012096:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	6a1b      	ldr	r3, [r3, #32]
 801209e:	f003 0320 	and.w	r3, r3, #32
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d02b      	beq.n	80120fe <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f042 0202 	orr.w	r2, r2, #2
 80120b4:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120ba:	9300      	str	r3, [sp, #0]
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	2201      	movs	r2, #1
 80120c0:	2102      	movs	r1, #2
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 f876 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 80120c8:	4603      	mov	r3, r0
 80120ca:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80120cc:	7dfb      	ldrb	r3, [r7, #23]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d11f      	bne.n	8012112 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	2202      	movs	r2, #2
 80120d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120de:	9300      	str	r3, [sp, #0]
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	2200      	movs	r2, #0
 80120e4:	2120      	movs	r1, #32
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f000 f864 	bl	80121b4 <OSPI_WaitFlagStateUntilTimeout>
 80120ec:	4603      	mov	r3, r0
 80120ee:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80120f0:	7dfb      	ldrb	r3, [r7, #23]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d10d      	bne.n	8012112 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2202      	movs	r2, #2
 80120fa:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80120fc:	e009      	b.n	8012112 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2202      	movs	r2, #2
 8012102:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8012104:	e005      	b.n	8012112 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8012106:	2301      	movs	r3, #1
 8012108:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2210      	movs	r2, #16
 801210e:	655a      	str	r2, [r3, #84]	; 0x54
 8012110:	e000      	b.n	8012114 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8012112:	bf00      	nop
  }

  /* Return function status */
  return status;
 8012114:	7dfb      	ldrb	r3, [r7, #23]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3718      	adds	r7, #24
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 801211e:	b480      	push	{r7}
 8012120:	b083      	sub	sp, #12
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
 8012126:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	683a      	ldr	r2, [r7, #0]
 801212c:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 801212e:	2300      	movs	r3, #0
}
 8012130:	4618      	mov	r0, r3
 8012132:	370c      	adds	r7, #12
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr

0801213c <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012148:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	2200      	movs	r2, #0
 801214e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012158:	d122      	bne.n	80121a0 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	6a1b      	ldr	r3, [r3, #32]
 8012160:	f003 0320 	and.w	r3, r3, #32
 8012164:	2b00      	cmp	r3, #0
 8012166:	d014      	beq.n	8012192 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	2202      	movs	r2, #2
 801216e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801217e:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	681a      	ldr	r2, [r3, #0]
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f042 0202 	orr.w	r2, r2, #2
 801218e:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8012190:	e00c      	b.n	80121ac <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2202      	movs	r2, #2
 8012196:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f7ff ff05 	bl	8011fa8 <HAL_OSPI_AbortCpltCallback>
}
 801219e:	e005      	b.n	80121ac <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	2202      	movs	r2, #2
 80121a4:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	f7ff fef4 	bl	8011f94 <HAL_OSPI_ErrorCallback>
}
 80121ac:	bf00      	nop
 80121ae:	3710      	adds	r7, #16
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b084      	sub	sp, #16
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	603b      	str	r3, [r7, #0]
 80121c0:	4613      	mov	r3, r2
 80121c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80121c4:	e01a      	b.n	80121fc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121cc:	d016      	beq.n	80121fc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80121ce:	f7fa fce9 	bl	800cba4 <HAL_GetTick>
 80121d2:	4602      	mov	r2, r0
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	1ad3      	subs	r3, r2, r3
 80121d8:	69ba      	ldr	r2, [r7, #24]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d302      	bcc.n	80121e4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80121de:	69bb      	ldr	r3, [r7, #24]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d10b      	bne.n	80121fc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121ea:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121f0:	f043 0201 	orr.w	r2, r3, #1
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80121f8:	2301      	movs	r3, #1
 80121fa:	e00e      	b.n	801221a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	6a1a      	ldr	r2, [r3, #32]
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	4013      	ands	r3, r2
 8012206:	2b00      	cmp	r3, #0
 8012208:	bf14      	ite	ne
 801220a:	2301      	movne	r3, #1
 801220c:	2300      	moveq	r3, #0
 801220e:	b2db      	uxtb	r3, r3
 8012210:	461a      	mov	r2, r3
 8012212:	79fb      	ldrb	r3, [r7, #7]
 8012214:	429a      	cmp	r2, r3
 8012216:	d1d6      	bne.n	80121c6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012218:	2300      	movs	r3, #0
}
 801221a:	4618      	mov	r0, r3
 801221c:	3710      	adds	r7, #16
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
	...

08012224 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8012224:	b480      	push	{r7}
 8012226:	b089      	sub	sp, #36	; 0x24
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801222e:	2300      	movs	r3, #0
 8012230:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	681a      	ldr	r2, [r3, #0]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012240:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	689b      	ldr	r3, [r3, #8]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d10a      	bne.n	8012260 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	685a      	ldr	r2, [r3, #4]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	430a      	orrs	r2, r1
 801225e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	2b02      	cmp	r3, #2
 8012266:	d114      	bne.n	8012292 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012270:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801227a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8012284:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801228e:	60fb      	str	r3, [r7, #12]
 8012290:	e02c      	b.n	80122ec <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	2b03      	cmp	r3, #3
 8012298:	d114      	bne.n	80122c4 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80122a2:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80122ac:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80122b6:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80122c0:	60fb      	str	r3, [r7, #12]
 80122c2:	e013      	b.n	80122ec <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80122cc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80122d6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80122e0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80122ea:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122f4:	431a      	orrs	r2, r3
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d012      	beq.n	8012328 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 801230a:	69bb      	ldr	r3, [r7, #24]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801231a:	4319      	orrs	r1, r3
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012320:	430b      	orrs	r3, r1
 8012322:	431a      	orrs	r2, r3
 8012324:	69bb      	ldr	r3, [r7, #24]
 8012326:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	f023 021f 	bic.w	r2, r3, #31
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012334:	431a      	orrs	r2, r3
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801233e:	2b00      	cmp	r3, #0
 8012340:	d009      	beq.n	8012356 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d105      	bne.n	8012356 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	3a01      	subs	r2, #1
 8012354:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	2b00      	cmp	r3, #0
 801235c:	f000 8095 	beq.w	801248a <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	69db      	ldr	r3, [r3, #28]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d053      	beq.n	8012410 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801236c:	2b00      	cmp	r3, #0
 801236e:	d01e      	beq.n	80123ae <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8012370:	69bb      	ldr	r3, [r7, #24]
 8012372:	681a      	ldr	r2, [r3, #0]
 8012374:	4b64      	ldr	r3, [pc, #400]	; (8012508 <OSPI_ConfigCmd+0x2e4>)
 8012376:	4013      	ands	r3, r2
 8012378:	683a      	ldr	r2, [r7, #0]
 801237a:	68d1      	ldr	r1, [r2, #12]
 801237c:	683a      	ldr	r2, [r7, #0]
 801237e:	6952      	ldr	r2, [r2, #20]
 8012380:	4311      	orrs	r1, r2
 8012382:	683a      	ldr	r2, [r7, #0]
 8012384:	6912      	ldr	r2, [r2, #16]
 8012386:	4311      	orrs	r1, r2
 8012388:	683a      	ldr	r2, [r7, #0]
 801238a:	69d2      	ldr	r2, [r2, #28]
 801238c:	4311      	orrs	r1, r2
 801238e:	683a      	ldr	r2, [r7, #0]
 8012390:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012392:	4311      	orrs	r1, r2
 8012394:	683a      	ldr	r2, [r7, #0]
 8012396:	6a12      	ldr	r2, [r2, #32]
 8012398:	4311      	orrs	r1, r2
 801239a:	683a      	ldr	r2, [r7, #0]
 801239c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801239e:	4311      	orrs	r1, r2
 80123a0:	683a      	ldr	r2, [r7, #0]
 80123a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80123a4:	430a      	orrs	r2, r1
 80123a6:	431a      	orrs	r2, r3
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	601a      	str	r2, [r3, #0]
 80123ac:	e026      	b.n	80123fc <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80123ae:	69bb      	ldr	r3, [r7, #24]
 80123b0:	681a      	ldr	r2, [r3, #0]
 80123b2:	4b56      	ldr	r3, [pc, #344]	; (801250c <OSPI_ConfigCmd+0x2e8>)
 80123b4:	4013      	ands	r3, r2
 80123b6:	683a      	ldr	r2, [r7, #0]
 80123b8:	68d1      	ldr	r1, [r2, #12]
 80123ba:	683a      	ldr	r2, [r7, #0]
 80123bc:	6952      	ldr	r2, [r2, #20]
 80123be:	4311      	orrs	r1, r2
 80123c0:	683a      	ldr	r2, [r7, #0]
 80123c2:	6912      	ldr	r2, [r2, #16]
 80123c4:	4311      	orrs	r1, r2
 80123c6:	683a      	ldr	r2, [r7, #0]
 80123c8:	69d2      	ldr	r2, [r2, #28]
 80123ca:	4311      	orrs	r1, r2
 80123cc:	683a      	ldr	r2, [r7, #0]
 80123ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80123d0:	4311      	orrs	r1, r2
 80123d2:	683a      	ldr	r2, [r7, #0]
 80123d4:	6a12      	ldr	r2, [r2, #32]
 80123d6:	430a      	orrs	r2, r1
 80123d8:	431a      	orrs	r2, r3
 80123da:	69bb      	ldr	r3, [r7, #24]
 80123dc:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80123e6:	d109      	bne.n	80123fc <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80123ec:	2b08      	cmp	r3, #8
 80123ee:	d105      	bne.n	80123fc <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80123f0:	69bb      	ldr	r3, [r7, #24]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80123f8:	69bb      	ldr	r3, [r7, #24]
 80123fa:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	689a      	ldr	r2, [r3, #8]
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	683a      	ldr	r2, [r7, #0]
 801240a:	6992      	ldr	r2, [r2, #24]
 801240c:	649a      	str	r2, [r3, #72]	; 0x48
 801240e:	e074      	b.n	80124fa <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012414:	2b00      	cmp	r3, #0
 8012416:	d015      	beq.n	8012444 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8012418:	69bb      	ldr	r3, [r7, #24]
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	4b3c      	ldr	r3, [pc, #240]	; (8012510 <OSPI_ConfigCmd+0x2ec>)
 801241e:	4013      	ands	r3, r2
 8012420:	683a      	ldr	r2, [r7, #0]
 8012422:	68d1      	ldr	r1, [r2, #12]
 8012424:	683a      	ldr	r2, [r7, #0]
 8012426:	6952      	ldr	r2, [r2, #20]
 8012428:	4311      	orrs	r1, r2
 801242a:	683a      	ldr	r2, [r7, #0]
 801242c:	6912      	ldr	r2, [r2, #16]
 801242e:	4311      	orrs	r1, r2
 8012430:	683a      	ldr	r2, [r7, #0]
 8012432:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012434:	4311      	orrs	r1, r2
 8012436:	683a      	ldr	r2, [r7, #0]
 8012438:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801243a:	430a      	orrs	r2, r1
 801243c:	431a      	orrs	r2, r3
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	601a      	str	r2, [r3, #0]
 8012442:	e01d      	b.n	8012480 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8012444:	69bb      	ldr	r3, [r7, #24]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	68d9      	ldr	r1, [r3, #12]
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	695b      	ldr	r3, [r3, #20]
 8012454:	4319      	orrs	r1, r3
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	691b      	ldr	r3, [r3, #16]
 801245a:	430b      	orrs	r3, r1
 801245c:	431a      	orrs	r2, r3
 801245e:	69bb      	ldr	r3, [r7, #24]
 8012460:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801246a:	d109      	bne.n	8012480 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8012470:	2b08      	cmp	r3, #8
 8012472:	d105      	bne.n	8012480 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	689a      	ldr	r2, [r3, #8]
 8012484:	693b      	ldr	r3, [r7, #16]
 8012486:	601a      	str	r2, [r3, #0]
 8012488:	e037      	b.n	80124fa <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	69db      	ldr	r3, [r3, #28]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d02e      	beq.n	80124f0 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012496:	2b00      	cmp	r3, #0
 8012498:	d015      	beq.n	80124c6 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 801249a:	69bb      	ldr	r3, [r7, #24]
 801249c:	681a      	ldr	r2, [r3, #0]
 801249e:	4b1d      	ldr	r3, [pc, #116]	; (8012514 <OSPI_ConfigCmd+0x2f0>)
 80124a0:	4013      	ands	r3, r2
 80124a2:	683a      	ldr	r2, [r7, #0]
 80124a4:	69d1      	ldr	r1, [r2, #28]
 80124a6:	683a      	ldr	r2, [r7, #0]
 80124a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80124aa:	4311      	orrs	r1, r2
 80124ac:	683a      	ldr	r2, [r7, #0]
 80124ae:	6a12      	ldr	r2, [r2, #32]
 80124b0:	4311      	orrs	r1, r2
 80124b2:	683a      	ldr	r2, [r7, #0]
 80124b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80124b6:	4311      	orrs	r1, r2
 80124b8:	683a      	ldr	r2, [r7, #0]
 80124ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80124bc:	430a      	orrs	r2, r1
 80124be:	431a      	orrs	r2, r3
 80124c0:	69bb      	ldr	r3, [r7, #24]
 80124c2:	601a      	str	r2, [r3, #0]
 80124c4:	e00e      	b.n	80124e4 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	69d9      	ldr	r1, [r3, #28]
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d6:	4319      	orrs	r1, r3
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	6a1b      	ldr	r3, [r3, #32]
 80124dc:	430b      	orrs	r3, r1
 80124de:	431a      	orrs	r2, r3
 80124e0:	69bb      	ldr	r3, [r7, #24]
 80124e2:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	683a      	ldr	r2, [r7, #0]
 80124ea:	6992      	ldr	r2, [r2, #24]
 80124ec:	649a      	str	r2, [r3, #72]	; 0x48
 80124ee:	e004      	b.n	80124fa <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80124f0:	2301      	movs	r3, #1
 80124f2:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2208      	movs	r2, #8
 80124f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 80124fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3724      	adds	r7, #36	; 0x24
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr
 8012508:	f0ffc0c0 	.word	0xf0ffc0c0
 801250c:	ffffc0c0 	.word	0xffffc0c0
 8012510:	f0ffffc0 	.word	0xf0ffffc0
 8012514:	f0ffc0ff 	.word	0xf0ffc0ff

08012518 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8012520:	4b29      	ldr	r3, [pc, #164]	; (80125c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	f003 0307 	and.w	r3, r3, #7
 8012528:	2b06      	cmp	r3, #6
 801252a:	d00a      	beq.n	8012542 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801252c:	4b26      	ldr	r3, [pc, #152]	; (80125c8 <HAL_PWREx_ConfigSupply+0xb0>)
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	429a      	cmp	r2, r3
 8012538:	d001      	beq.n	801253e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801253a:	2301      	movs	r3, #1
 801253c:	e040      	b.n	80125c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801253e:	2300      	movs	r3, #0
 8012540:	e03e      	b.n	80125c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8012542:	4b21      	ldr	r3, [pc, #132]	; (80125c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 801254a:	491f      	ldr	r1, [pc, #124]	; (80125c8 <HAL_PWREx_ConfigSupply+0xb0>)
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	4313      	orrs	r3, r2
 8012550:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8012552:	f7fa fb27 	bl	800cba4 <HAL_GetTick>
 8012556:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8012558:	e009      	b.n	801256e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801255a:	f7fa fb23 	bl	800cba4 <HAL_GetTick>
 801255e:	4602      	mov	r2, r0
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	1ad3      	subs	r3, r2, r3
 8012564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012568:	d901      	bls.n	801256e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801256a:	2301      	movs	r3, #1
 801256c:	e028      	b.n	80125c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801256e:	4b16      	ldr	r3, [pc, #88]	; (80125c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801257a:	d1ee      	bne.n	801255a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2b1e      	cmp	r3, #30
 8012580:	d008      	beq.n	8012594 <HAL_PWREx_ConfigSupply+0x7c>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2b2e      	cmp	r3, #46	; 0x2e
 8012586:	d005      	beq.n	8012594 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2b1d      	cmp	r3, #29
 801258c:	d002      	beq.n	8012594 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2b2d      	cmp	r3, #45	; 0x2d
 8012592:	d114      	bne.n	80125be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8012594:	f7fa fb06 	bl	800cba4 <HAL_GetTick>
 8012598:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801259a:	e009      	b.n	80125b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801259c:	f7fa fb02 	bl	800cba4 <HAL_GetTick>
 80125a0:	4602      	mov	r2, r0
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	1ad3      	subs	r3, r2, r3
 80125a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80125aa:	d901      	bls.n	80125b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80125ac:	2301      	movs	r3, #1
 80125ae:	e007      	b.n	80125c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80125b0:	4b05      	ldr	r3, [pc, #20]	; (80125c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80125b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125bc:	d1ee      	bne.n	801259c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80125be:	2300      	movs	r3, #0
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3710      	adds	r7, #16
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	58024800 	.word	0x58024800

080125cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b08c      	sub	sp, #48	; 0x30
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d102      	bne.n	80125e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80125da:	2301      	movs	r3, #1
 80125dc:	f000 bc1f 	b.w	8012e1e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f003 0301 	and.w	r3, r3, #1
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	f000 80b3 	beq.w	8012754 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80125ee:	4b95      	ldr	r3, [pc, #596]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80125f0:	691b      	ldr	r3, [r3, #16]
 80125f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80125f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80125f8:	4b92      	ldr	r3, [pc, #584]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80125fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80125fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012600:	2b10      	cmp	r3, #16
 8012602:	d007      	beq.n	8012614 <HAL_RCC_OscConfig+0x48>
 8012604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012606:	2b18      	cmp	r3, #24
 8012608:	d112      	bne.n	8012630 <HAL_RCC_OscConfig+0x64>
 801260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260c:	f003 0303 	and.w	r3, r3, #3
 8012610:	2b02      	cmp	r3, #2
 8012612:	d10d      	bne.n	8012630 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012614:	4b8b      	ldr	r3, [pc, #556]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801261c:	2b00      	cmp	r3, #0
 801261e:	f000 8098 	beq.w	8012752 <HAL_RCC_OscConfig+0x186>
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	f040 8093 	bne.w	8012752 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801262c:	2301      	movs	r3, #1
 801262e:	e3f6      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012638:	d106      	bne.n	8012648 <HAL_RCC_OscConfig+0x7c>
 801263a:	4b82      	ldr	r3, [pc, #520]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4a81      	ldr	r2, [pc, #516]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012644:	6013      	str	r3, [r2, #0]
 8012646:	e058      	b.n	80126fa <HAL_RCC_OscConfig+0x12e>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	685b      	ldr	r3, [r3, #4]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d112      	bne.n	8012676 <HAL_RCC_OscConfig+0xaa>
 8012650:	4b7c      	ldr	r3, [pc, #496]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4a7b      	ldr	r2, [pc, #492]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801265a:	6013      	str	r3, [r2, #0]
 801265c:	4b79      	ldr	r3, [pc, #484]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a78      	ldr	r2, [pc, #480]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012662:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012666:	6013      	str	r3, [r2, #0]
 8012668:	4b76      	ldr	r3, [pc, #472]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	4a75      	ldr	r2, [pc, #468]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012672:	6013      	str	r3, [r2, #0]
 8012674:	e041      	b.n	80126fa <HAL_RCC_OscConfig+0x12e>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	685b      	ldr	r3, [r3, #4]
 801267a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801267e:	d112      	bne.n	80126a6 <HAL_RCC_OscConfig+0xda>
 8012680:	4b70      	ldr	r3, [pc, #448]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	4a6f      	ldr	r2, [pc, #444]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801268a:	6013      	str	r3, [r2, #0]
 801268c:	4b6d      	ldr	r3, [pc, #436]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	4a6c      	ldr	r2, [pc, #432]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012692:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012696:	6013      	str	r3, [r2, #0]
 8012698:	4b6a      	ldr	r3, [pc, #424]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	4a69      	ldr	r2, [pc, #420]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801269e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80126a2:	6013      	str	r3, [r2, #0]
 80126a4:	e029      	b.n	80126fa <HAL_RCC_OscConfig+0x12e>
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80126ae:	d112      	bne.n	80126d6 <HAL_RCC_OscConfig+0x10a>
 80126b0:	4b64      	ldr	r3, [pc, #400]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	4a63      	ldr	r2, [pc, #396]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80126ba:	6013      	str	r3, [r2, #0]
 80126bc:	4b61      	ldr	r3, [pc, #388]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	4a60      	ldr	r2, [pc, #384]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80126c6:	6013      	str	r3, [r2, #0]
 80126c8:	4b5e      	ldr	r3, [pc, #376]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	4a5d      	ldr	r2, [pc, #372]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80126d2:	6013      	str	r3, [r2, #0]
 80126d4:	e011      	b.n	80126fa <HAL_RCC_OscConfig+0x12e>
 80126d6:	4b5b      	ldr	r3, [pc, #364]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	4a5a      	ldr	r2, [pc, #360]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80126e0:	6013      	str	r3, [r2, #0]
 80126e2:	4b58      	ldr	r3, [pc, #352]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	4a57      	ldr	r2, [pc, #348]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80126ec:	6013      	str	r3, [r2, #0]
 80126ee:	4b55      	ldr	r3, [pc, #340]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	4a54      	ldr	r2, [pc, #336]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80126f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80126f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d013      	beq.n	801272a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012702:	f7fa fa4f 	bl	800cba4 <HAL_GetTick>
 8012706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012708:	e008      	b.n	801271c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801270a:	f7fa fa4b 	bl	800cba4 <HAL_GetTick>
 801270e:	4602      	mov	r2, r0
 8012710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012712:	1ad3      	subs	r3, r2, r3
 8012714:	2b64      	cmp	r3, #100	; 0x64
 8012716:	d901      	bls.n	801271c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8012718:	2303      	movs	r3, #3
 801271a:	e380      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801271c:	4b49      	ldr	r3, [pc, #292]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012724:	2b00      	cmp	r3, #0
 8012726:	d0f0      	beq.n	801270a <HAL_RCC_OscConfig+0x13e>
 8012728:	e014      	b.n	8012754 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801272a:	f7fa fa3b 	bl	800cba4 <HAL_GetTick>
 801272e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012730:	e008      	b.n	8012744 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012732:	f7fa fa37 	bl	800cba4 <HAL_GetTick>
 8012736:	4602      	mov	r2, r0
 8012738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273a:	1ad3      	subs	r3, r2, r3
 801273c:	2b64      	cmp	r3, #100	; 0x64
 801273e:	d901      	bls.n	8012744 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8012740:	2303      	movs	r3, #3
 8012742:	e36c      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012744:	4b3f      	ldr	r3, [pc, #252]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801274c:	2b00      	cmp	r3, #0
 801274e:	d1f0      	bne.n	8012732 <HAL_RCC_OscConfig+0x166>
 8012750:	e000      	b.n	8012754 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012752:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	f003 0302 	and.w	r3, r3, #2
 801275c:	2b00      	cmp	r3, #0
 801275e:	f000 808c 	beq.w	801287a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012762:	4b38      	ldr	r3, [pc, #224]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012764:	691b      	ldr	r3, [r3, #16]
 8012766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801276a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801276c:	4b35      	ldr	r3, [pc, #212]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012770:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8012772:	6a3b      	ldr	r3, [r7, #32]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d007      	beq.n	8012788 <HAL_RCC_OscConfig+0x1bc>
 8012778:	6a3b      	ldr	r3, [r7, #32]
 801277a:	2b18      	cmp	r3, #24
 801277c:	d137      	bne.n	80127ee <HAL_RCC_OscConfig+0x222>
 801277e:	69fb      	ldr	r3, [r7, #28]
 8012780:	f003 0303 	and.w	r3, r3, #3
 8012784:	2b00      	cmp	r3, #0
 8012786:	d132      	bne.n	80127ee <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012788:	4b2e      	ldr	r3, [pc, #184]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f003 0304 	and.w	r3, r3, #4
 8012790:	2b00      	cmp	r3, #0
 8012792:	d005      	beq.n	80127a0 <HAL_RCC_OscConfig+0x1d4>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d101      	bne.n	80127a0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 801279c:	2301      	movs	r3, #1
 801279e:	e33e      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80127a0:	4b28      	ldr	r3, [pc, #160]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f023 0219 	bic.w	r2, r3, #25
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	68db      	ldr	r3, [r3, #12]
 80127ac:	4925      	ldr	r1, [pc, #148]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80127ae:	4313      	orrs	r3, r2
 80127b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80127b2:	f7fa f9f7 	bl	800cba4 <HAL_GetTick>
 80127b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80127b8:	e008      	b.n	80127cc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80127ba:	f7fa f9f3 	bl	800cba4 <HAL_GetTick>
 80127be:	4602      	mov	r2, r0
 80127c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c2:	1ad3      	subs	r3, r2, r3
 80127c4:	2b02      	cmp	r3, #2
 80127c6:	d901      	bls.n	80127cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80127c8:	2303      	movs	r3, #3
 80127ca:	e328      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80127cc:	4b1d      	ldr	r3, [pc, #116]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	f003 0304 	and.w	r3, r3, #4
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d0f0      	beq.n	80127ba <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80127d8:	4b1a      	ldr	r3, [pc, #104]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80127da:	685b      	ldr	r3, [r3, #4]
 80127dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	691b      	ldr	r3, [r3, #16]
 80127e4:	061b      	lsls	r3, r3, #24
 80127e6:	4917      	ldr	r1, [pc, #92]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80127e8:	4313      	orrs	r3, r2
 80127ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80127ec:	e045      	b.n	801287a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	68db      	ldr	r3, [r3, #12]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d028      	beq.n	8012848 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80127f6:	4b13      	ldr	r3, [pc, #76]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f023 0219 	bic.w	r2, r3, #25
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	68db      	ldr	r3, [r3, #12]
 8012802:	4910      	ldr	r1, [pc, #64]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012804:	4313      	orrs	r3, r2
 8012806:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012808:	f7fa f9cc 	bl	800cba4 <HAL_GetTick>
 801280c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801280e:	e008      	b.n	8012822 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012810:	f7fa f9c8 	bl	800cba4 <HAL_GetTick>
 8012814:	4602      	mov	r2, r0
 8012816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012818:	1ad3      	subs	r3, r2, r3
 801281a:	2b02      	cmp	r3, #2
 801281c:	d901      	bls.n	8012822 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 801281e:	2303      	movs	r3, #3
 8012820:	e2fd      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012822:	4b08      	ldr	r3, [pc, #32]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	f003 0304 	and.w	r3, r3, #4
 801282a:	2b00      	cmp	r3, #0
 801282c:	d0f0      	beq.n	8012810 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801282e:	4b05      	ldr	r3, [pc, #20]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	691b      	ldr	r3, [r3, #16]
 801283a:	061b      	lsls	r3, r3, #24
 801283c:	4901      	ldr	r1, [pc, #4]	; (8012844 <HAL_RCC_OscConfig+0x278>)
 801283e:	4313      	orrs	r3, r2
 8012840:	604b      	str	r3, [r1, #4]
 8012842:	e01a      	b.n	801287a <HAL_RCC_OscConfig+0x2ae>
 8012844:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012848:	4b97      	ldr	r3, [pc, #604]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4a96      	ldr	r2, [pc, #600]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 801284e:	f023 0301 	bic.w	r3, r3, #1
 8012852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012854:	f7fa f9a6 	bl	800cba4 <HAL_GetTick>
 8012858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801285a:	e008      	b.n	801286e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801285c:	f7fa f9a2 	bl	800cba4 <HAL_GetTick>
 8012860:	4602      	mov	r2, r0
 8012862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012864:	1ad3      	subs	r3, r2, r3
 8012866:	2b02      	cmp	r3, #2
 8012868:	d901      	bls.n	801286e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 801286a:	2303      	movs	r3, #3
 801286c:	e2d7      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801286e:	4b8e      	ldr	r3, [pc, #568]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f003 0304 	and.w	r3, r3, #4
 8012876:	2b00      	cmp	r3, #0
 8012878:	d1f0      	bne.n	801285c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	f003 0310 	and.w	r3, r3, #16
 8012882:	2b00      	cmp	r3, #0
 8012884:	d06a      	beq.n	801295c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012886:	4b88      	ldr	r3, [pc, #544]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012888:	691b      	ldr	r3, [r3, #16]
 801288a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801288e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012890:	4b85      	ldr	r3, [pc, #532]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012894:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8012896:	69bb      	ldr	r3, [r7, #24]
 8012898:	2b08      	cmp	r3, #8
 801289a:	d007      	beq.n	80128ac <HAL_RCC_OscConfig+0x2e0>
 801289c:	69bb      	ldr	r3, [r7, #24]
 801289e:	2b18      	cmp	r3, #24
 80128a0:	d11b      	bne.n	80128da <HAL_RCC_OscConfig+0x30e>
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	f003 0303 	and.w	r3, r3, #3
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	d116      	bne.n	80128da <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80128ac:	4b7e      	ldr	r3, [pc, #504]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d005      	beq.n	80128c4 <HAL_RCC_OscConfig+0x2f8>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	69db      	ldr	r3, [r3, #28]
 80128bc:	2b80      	cmp	r3, #128	; 0x80
 80128be:	d001      	beq.n	80128c4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80128c0:	2301      	movs	r3, #1
 80128c2:	e2ac      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80128c4:	4b78      	ldr	r3, [pc, #480]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 80128c6:	68db      	ldr	r3, [r3, #12]
 80128c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6a1b      	ldr	r3, [r3, #32]
 80128d0:	061b      	lsls	r3, r3, #24
 80128d2:	4975      	ldr	r1, [pc, #468]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 80128d4:	4313      	orrs	r3, r2
 80128d6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80128d8:	e040      	b.n	801295c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	69db      	ldr	r3, [r3, #28]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d023      	beq.n	801292a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80128e2:	4b71      	ldr	r3, [pc, #452]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	4a70      	ldr	r2, [pc, #448]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 80128e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80128ee:	f7fa f959 	bl	800cba4 <HAL_GetTick>
 80128f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80128f4:	e008      	b.n	8012908 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80128f6:	f7fa f955 	bl	800cba4 <HAL_GetTick>
 80128fa:	4602      	mov	r2, r0
 80128fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fe:	1ad3      	subs	r3, r2, r3
 8012900:	2b02      	cmp	r3, #2
 8012902:	d901      	bls.n	8012908 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8012904:	2303      	movs	r3, #3
 8012906:	e28a      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012908:	4b67      	ldr	r3, [pc, #412]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012910:	2b00      	cmp	r3, #0
 8012912:	d0f0      	beq.n	80128f6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012914:	4b64      	ldr	r3, [pc, #400]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6a1b      	ldr	r3, [r3, #32]
 8012920:	061b      	lsls	r3, r3, #24
 8012922:	4961      	ldr	r1, [pc, #388]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012924:	4313      	orrs	r3, r2
 8012926:	60cb      	str	r3, [r1, #12]
 8012928:	e018      	b.n	801295c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801292a:	4b5f      	ldr	r3, [pc, #380]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	4a5e      	ldr	r2, [pc, #376]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012936:	f7fa f935 	bl	800cba4 <HAL_GetTick>
 801293a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801293c:	e008      	b.n	8012950 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801293e:	f7fa f931 	bl	800cba4 <HAL_GetTick>
 8012942:	4602      	mov	r2, r0
 8012944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012946:	1ad3      	subs	r3, r2, r3
 8012948:	2b02      	cmp	r3, #2
 801294a:	d901      	bls.n	8012950 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 801294c:	2303      	movs	r3, #3
 801294e:	e266      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8012950:	4b55      	ldr	r3, [pc, #340]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012958:	2b00      	cmp	r3, #0
 801295a:	d1f0      	bne.n	801293e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	f003 0308 	and.w	r3, r3, #8
 8012964:	2b00      	cmp	r3, #0
 8012966:	d036      	beq.n	80129d6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	695b      	ldr	r3, [r3, #20]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d019      	beq.n	80129a4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012970:	4b4d      	ldr	r3, [pc, #308]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012974:	4a4c      	ldr	r2, [pc, #304]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012976:	f043 0301 	orr.w	r3, r3, #1
 801297a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801297c:	f7fa f912 	bl	800cba4 <HAL_GetTick>
 8012980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8012982:	e008      	b.n	8012996 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012984:	f7fa f90e 	bl	800cba4 <HAL_GetTick>
 8012988:	4602      	mov	r2, r0
 801298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298c:	1ad3      	subs	r3, r2, r3
 801298e:	2b02      	cmp	r3, #2
 8012990:	d901      	bls.n	8012996 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8012992:	2303      	movs	r3, #3
 8012994:	e243      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8012996:	4b44      	ldr	r3, [pc, #272]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801299a:	f003 0302 	and.w	r3, r3, #2
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d0f0      	beq.n	8012984 <HAL_RCC_OscConfig+0x3b8>
 80129a2:	e018      	b.n	80129d6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80129a4:	4b40      	ldr	r3, [pc, #256]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 80129a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129a8:	4a3f      	ldr	r2, [pc, #252]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 80129aa:	f023 0301 	bic.w	r3, r3, #1
 80129ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80129b0:	f7fa f8f8 	bl	800cba4 <HAL_GetTick>
 80129b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80129b6:	e008      	b.n	80129ca <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80129b8:	f7fa f8f4 	bl	800cba4 <HAL_GetTick>
 80129bc:	4602      	mov	r2, r0
 80129be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c0:	1ad3      	subs	r3, r2, r3
 80129c2:	2b02      	cmp	r3, #2
 80129c4:	d901      	bls.n	80129ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80129c6:	2303      	movs	r3, #3
 80129c8:	e229      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80129ca:	4b37      	ldr	r3, [pc, #220]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 80129cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129ce:	f003 0302 	and.w	r3, r3, #2
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d1f0      	bne.n	80129b8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	f003 0320 	and.w	r3, r3, #32
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d036      	beq.n	8012a50 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	699b      	ldr	r3, [r3, #24]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d019      	beq.n	8012a1e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80129ea:	4b2f      	ldr	r3, [pc, #188]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	4a2e      	ldr	r2, [pc, #184]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 80129f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80129f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80129f6:	f7fa f8d5 	bl	800cba4 <HAL_GetTick>
 80129fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80129fc:	e008      	b.n	8012a10 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80129fe:	f7fa f8d1 	bl	800cba4 <HAL_GetTick>
 8012a02:	4602      	mov	r2, r0
 8012a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a06:	1ad3      	subs	r3, r2, r3
 8012a08:	2b02      	cmp	r3, #2
 8012a0a:	d901      	bls.n	8012a10 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8012a0c:	2303      	movs	r3, #3
 8012a0e:	e206      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012a10:	4b25      	ldr	r3, [pc, #148]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d0f0      	beq.n	80129fe <HAL_RCC_OscConfig+0x432>
 8012a1c:	e018      	b.n	8012a50 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012a1e:	4b22      	ldr	r3, [pc, #136]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4a21      	ldr	r2, [pc, #132]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012a2a:	f7fa f8bb 	bl	800cba4 <HAL_GetTick>
 8012a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012a30:	e008      	b.n	8012a44 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012a32:	f7fa f8b7 	bl	800cba4 <HAL_GetTick>
 8012a36:	4602      	mov	r2, r0
 8012a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3a:	1ad3      	subs	r3, r2, r3
 8012a3c:	2b02      	cmp	r3, #2
 8012a3e:	d901      	bls.n	8012a44 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8012a40:	2303      	movs	r3, #3
 8012a42:	e1ec      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012a44:	4b18      	ldr	r3, [pc, #96]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d1f0      	bne.n	8012a32 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	f003 0304 	and.w	r3, r3, #4
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f000 80af 	beq.w	8012bbc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8012a5e:	4b13      	ldr	r3, [pc, #76]	; (8012aac <HAL_RCC_OscConfig+0x4e0>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	4a12      	ldr	r2, [pc, #72]	; (8012aac <HAL_RCC_OscConfig+0x4e0>)
 8012a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012a68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012a6a:	f7fa f89b 	bl	800cba4 <HAL_GetTick>
 8012a6e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012a70:	e008      	b.n	8012a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012a72:	f7fa f897 	bl	800cba4 <HAL_GetTick>
 8012a76:	4602      	mov	r2, r0
 8012a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7a:	1ad3      	subs	r3, r2, r3
 8012a7c:	2b64      	cmp	r3, #100	; 0x64
 8012a7e:	d901      	bls.n	8012a84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8012a80:	2303      	movs	r3, #3
 8012a82:	e1cc      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012a84:	4b09      	ldr	r3, [pc, #36]	; (8012aac <HAL_RCC_OscConfig+0x4e0>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d0f0      	beq.n	8012a72 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	689b      	ldr	r3, [r3, #8]
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d10b      	bne.n	8012ab0 <HAL_RCC_OscConfig+0x4e4>
 8012a98:	4b03      	ldr	r3, [pc, #12]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a9c:	4a02      	ldr	r2, [pc, #8]	; (8012aa8 <HAL_RCC_OscConfig+0x4dc>)
 8012a9e:	f043 0301 	orr.w	r3, r3, #1
 8012aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8012aa4:	e05b      	b.n	8012b5e <HAL_RCC_OscConfig+0x592>
 8012aa6:	bf00      	nop
 8012aa8:	58024400 	.word	0x58024400
 8012aac:	58024800 	.word	0x58024800
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	689b      	ldr	r3, [r3, #8]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d112      	bne.n	8012ade <HAL_RCC_OscConfig+0x512>
 8012ab8:	4b9d      	ldr	r3, [pc, #628]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012abc:	4a9c      	ldr	r2, [pc, #624]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012abe:	f023 0301 	bic.w	r3, r3, #1
 8012ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8012ac4:	4b9a      	ldr	r3, [pc, #616]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ac8:	4a99      	ldr	r2, [pc, #612]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012ace:	6713      	str	r3, [r2, #112]	; 0x70
 8012ad0:	4b97      	ldr	r3, [pc, #604]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ad4:	4a96      	ldr	r2, [pc, #600]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012ad6:	f023 0304 	bic.w	r3, r3, #4
 8012ada:	6713      	str	r3, [r2, #112]	; 0x70
 8012adc:	e03f      	b.n	8012b5e <HAL_RCC_OscConfig+0x592>
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	2b05      	cmp	r3, #5
 8012ae4:	d112      	bne.n	8012b0c <HAL_RCC_OscConfig+0x540>
 8012ae6:	4b92      	ldr	r3, [pc, #584]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aea:	4a91      	ldr	r2, [pc, #580]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012aec:	f043 0304 	orr.w	r3, r3, #4
 8012af0:	6713      	str	r3, [r2, #112]	; 0x70
 8012af2:	4b8f      	ldr	r3, [pc, #572]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012af6:	4a8e      	ldr	r2, [pc, #568]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012afc:	6713      	str	r3, [r2, #112]	; 0x70
 8012afe:	4b8c      	ldr	r3, [pc, #560]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b02:	4a8b      	ldr	r2, [pc, #556]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b04:	f043 0301 	orr.w	r3, r3, #1
 8012b08:	6713      	str	r3, [r2, #112]	; 0x70
 8012b0a:	e028      	b.n	8012b5e <HAL_RCC_OscConfig+0x592>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	689b      	ldr	r3, [r3, #8]
 8012b10:	2b85      	cmp	r3, #133	; 0x85
 8012b12:	d112      	bne.n	8012b3a <HAL_RCC_OscConfig+0x56e>
 8012b14:	4b86      	ldr	r3, [pc, #536]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b18:	4a85      	ldr	r2, [pc, #532]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b1a:	f043 0304 	orr.w	r3, r3, #4
 8012b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8012b20:	4b83      	ldr	r3, [pc, #524]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b24:	4a82      	ldr	r2, [pc, #520]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8012b2c:	4b80      	ldr	r3, [pc, #512]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b30:	4a7f      	ldr	r2, [pc, #508]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b32:	f043 0301 	orr.w	r3, r3, #1
 8012b36:	6713      	str	r3, [r2, #112]	; 0x70
 8012b38:	e011      	b.n	8012b5e <HAL_RCC_OscConfig+0x592>
 8012b3a:	4b7d      	ldr	r3, [pc, #500]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b3e:	4a7c      	ldr	r2, [pc, #496]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b40:	f023 0301 	bic.w	r3, r3, #1
 8012b44:	6713      	str	r3, [r2, #112]	; 0x70
 8012b46:	4b7a      	ldr	r3, [pc, #488]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b4a:	4a79      	ldr	r2, [pc, #484]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b4c:	f023 0304 	bic.w	r3, r3, #4
 8012b50:	6713      	str	r3, [r2, #112]	; 0x70
 8012b52:	4b77      	ldr	r3, [pc, #476]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b56:	4a76      	ldr	r2, [pc, #472]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	689b      	ldr	r3, [r3, #8]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d015      	beq.n	8012b92 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b66:	f7fa f81d 	bl	800cba4 <HAL_GetTick>
 8012b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012b6c:	e00a      	b.n	8012b84 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012b6e:	f7fa f819 	bl	800cba4 <HAL_GetTick>
 8012b72:	4602      	mov	r2, r0
 8012b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	d901      	bls.n	8012b84 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8012b80:	2303      	movs	r3, #3
 8012b82:	e14c      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012b84:	4b6a      	ldr	r3, [pc, #424]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b88:	f003 0302 	and.w	r3, r3, #2
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d0ee      	beq.n	8012b6e <HAL_RCC_OscConfig+0x5a2>
 8012b90:	e014      	b.n	8012bbc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b92:	f7fa f807 	bl	800cba4 <HAL_GetTick>
 8012b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012b98:	e00a      	b.n	8012bb0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012b9a:	f7fa f803 	bl	800cba4 <HAL_GetTick>
 8012b9e:	4602      	mov	r2, r0
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba2:	1ad3      	subs	r3, r2, r3
 8012ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d901      	bls.n	8012bb0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8012bac:	2303      	movs	r3, #3
 8012bae:	e136      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012bb0:	4b5f      	ldr	r3, [pc, #380]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bb4:	f003 0302 	and.w	r3, r3, #2
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d1ee      	bne.n	8012b9a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	f000 812b 	beq.w	8012e1c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8012bc6:	4b5a      	ldr	r3, [pc, #360]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012bc8:	691b      	ldr	r3, [r3, #16]
 8012bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012bce:	2b18      	cmp	r3, #24
 8012bd0:	f000 80bb 	beq.w	8012d4a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd8:	2b02      	cmp	r3, #2
 8012bda:	f040 8095 	bne.w	8012d08 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012bde:	4b54      	ldr	r3, [pc, #336]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	4a53      	ldr	r2, [pc, #332]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012be4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012bea:	f7f9 ffdb 	bl	800cba4 <HAL_GetTick>
 8012bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012bf0:	e008      	b.n	8012c04 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012bf2:	f7f9 ffd7 	bl	800cba4 <HAL_GetTick>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfa:	1ad3      	subs	r3, r2, r3
 8012bfc:	2b02      	cmp	r3, #2
 8012bfe:	d901      	bls.n	8012c04 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8012c00:	2303      	movs	r3, #3
 8012c02:	e10c      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012c04:	4b4a      	ldr	r3, [pc, #296]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d1f0      	bne.n	8012bf2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012c10:	4b47      	ldr	r3, [pc, #284]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012c14:	4b47      	ldr	r3, [pc, #284]	; (8012d34 <HAL_RCC_OscConfig+0x768>)
 8012c16:	4013      	ands	r3, r2
 8012c18:	687a      	ldr	r2, [r7, #4]
 8012c1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8012c1c:	687a      	ldr	r2, [r7, #4]
 8012c1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012c20:	0112      	lsls	r2, r2, #4
 8012c22:	430a      	orrs	r2, r1
 8012c24:	4942      	ldr	r1, [pc, #264]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c26:	4313      	orrs	r3, r2
 8012c28:	628b      	str	r3, [r1, #40]	; 0x28
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c2e:	3b01      	subs	r3, #1
 8012c30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c38:	3b01      	subs	r3, #1
 8012c3a:	025b      	lsls	r3, r3, #9
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	431a      	orrs	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c44:	3b01      	subs	r3, #1
 8012c46:	041b      	lsls	r3, r3, #16
 8012c48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012c4c:	431a      	orrs	r2, r3
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c52:	3b01      	subs	r3, #1
 8012c54:	061b      	lsls	r3, r3, #24
 8012c56:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012c5a:	4935      	ldr	r1, [pc, #212]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c5c:	4313      	orrs	r3, r2
 8012c5e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8012c60:	4b33      	ldr	r3, [pc, #204]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c64:	4a32      	ldr	r2, [pc, #200]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c66:	f023 0301 	bic.w	r3, r3, #1
 8012c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012c6c:	4b30      	ldr	r3, [pc, #192]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c70:	4b31      	ldr	r3, [pc, #196]	; (8012d38 <HAL_RCC_OscConfig+0x76c>)
 8012c72:	4013      	ands	r3, r2
 8012c74:	687a      	ldr	r2, [r7, #4]
 8012c76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8012c78:	00d2      	lsls	r2, r2, #3
 8012c7a:	492d      	ldr	r1, [pc, #180]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c7c:	4313      	orrs	r3, r2
 8012c7e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8012c80:	4b2b      	ldr	r3, [pc, #172]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c84:	f023 020c 	bic.w	r2, r3, #12
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c8c:	4928      	ldr	r1, [pc, #160]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c8e:	4313      	orrs	r3, r2
 8012c90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8012c92:	4b27      	ldr	r3, [pc, #156]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c96:	f023 0202 	bic.w	r2, r3, #2
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c9e:	4924      	ldr	r1, [pc, #144]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012ca0:	4313      	orrs	r3, r2
 8012ca2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8012ca4:	4b22      	ldr	r3, [pc, #136]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ca8:	4a21      	ldr	r2, [pc, #132]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012cb0:	4b1f      	ldr	r3, [pc, #124]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cb4:	4a1e      	ldr	r2, [pc, #120]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8012cbc:	4b1c      	ldr	r3, [pc, #112]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cc0:	4a1b      	ldr	r2, [pc, #108]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8012cc8:	4b19      	ldr	r3, [pc, #100]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ccc:	4a18      	ldr	r2, [pc, #96]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012cce:	f043 0301 	orr.w	r3, r3, #1
 8012cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012cd4:	4b16      	ldr	r3, [pc, #88]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	4a15      	ldr	r2, [pc, #84]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012ce0:	f7f9 ff60 	bl	800cba4 <HAL_GetTick>
 8012ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012ce6:	e008      	b.n	8012cfa <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012ce8:	f7f9 ff5c 	bl	800cba4 <HAL_GetTick>
 8012cec:	4602      	mov	r2, r0
 8012cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf0:	1ad3      	subs	r3, r2, r3
 8012cf2:	2b02      	cmp	r3, #2
 8012cf4:	d901      	bls.n	8012cfa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8012cf6:	2303      	movs	r3, #3
 8012cf8:	e091      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012cfa:	4b0d      	ldr	r3, [pc, #52]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d0f0      	beq.n	8012ce8 <HAL_RCC_OscConfig+0x71c>
 8012d06:	e089      	b.n	8012e1c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012d08:	4b09      	ldr	r3, [pc, #36]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	4a08      	ldr	r2, [pc, #32]	; (8012d30 <HAL_RCC_OscConfig+0x764>)
 8012d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d14:	f7f9 ff46 	bl	800cba4 <HAL_GetTick>
 8012d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012d1a:	e00f      	b.n	8012d3c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012d1c:	f7f9 ff42 	bl	800cba4 <HAL_GetTick>
 8012d20:	4602      	mov	r2, r0
 8012d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d24:	1ad3      	subs	r3, r2, r3
 8012d26:	2b02      	cmp	r3, #2
 8012d28:	d908      	bls.n	8012d3c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8012d2a:	2303      	movs	r3, #3
 8012d2c:	e077      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
 8012d2e:	bf00      	nop
 8012d30:	58024400 	.word	0x58024400
 8012d34:	fffffc0c 	.word	0xfffffc0c
 8012d38:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012d3c:	4b3a      	ldr	r3, [pc, #232]	; (8012e28 <HAL_RCC_OscConfig+0x85c>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d1e9      	bne.n	8012d1c <HAL_RCC_OscConfig+0x750>
 8012d48:	e068      	b.n	8012e1c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8012d4a:	4b37      	ldr	r3, [pc, #220]	; (8012e28 <HAL_RCC_OscConfig+0x85c>)
 8012d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d4e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8012d50:	4b35      	ldr	r3, [pc, #212]	; (8012e28 <HAL_RCC_OscConfig+0x85c>)
 8012d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d54:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d031      	beq.n	8012dc2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	f003 0203 	and.w	r2, r3, #3
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d12a      	bne.n	8012dc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	091b      	lsrs	r3, r3, #4
 8012d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d122      	bne.n	8012dc2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d86:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d11a      	bne.n	8012dc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	0a5b      	lsrs	r3, r3, #9
 8012d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d98:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d111      	bne.n	8012dc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	0c1b      	lsrs	r3, r3, #16
 8012da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012daa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d108      	bne.n	8012dc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	0e1b      	lsrs	r3, r3, #24
 8012db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012dbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d001      	beq.n	8012dc6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	e02b      	b.n	8012e1e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8012dc6:	4b18      	ldr	r3, [pc, #96]	; (8012e28 <HAL_RCC_OscConfig+0x85c>)
 8012dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dca:	08db      	lsrs	r3, r3, #3
 8012dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012dd0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012dd6:	693a      	ldr	r2, [r7, #16]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d01f      	beq.n	8012e1c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8012ddc:	4b12      	ldr	r3, [pc, #72]	; (8012e28 <HAL_RCC_OscConfig+0x85c>)
 8012dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012de0:	4a11      	ldr	r2, [pc, #68]	; (8012e28 <HAL_RCC_OscConfig+0x85c>)
 8012de2:	f023 0301 	bic.w	r3, r3, #1
 8012de6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012de8:	f7f9 fedc 	bl	800cba4 <HAL_GetTick>
 8012dec:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8012dee:	bf00      	nop
 8012df0:	f7f9 fed8 	bl	800cba4 <HAL_GetTick>
 8012df4:	4602      	mov	r2, r0
 8012df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d0f9      	beq.n	8012df0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012dfc:	4b0a      	ldr	r3, [pc, #40]	; (8012e28 <HAL_RCC_OscConfig+0x85c>)
 8012dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012e00:	4b0a      	ldr	r3, [pc, #40]	; (8012e2c <HAL_RCC_OscConfig+0x860>)
 8012e02:	4013      	ands	r3, r2
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8012e08:	00d2      	lsls	r2, r2, #3
 8012e0a:	4907      	ldr	r1, [pc, #28]	; (8012e28 <HAL_RCC_OscConfig+0x85c>)
 8012e0c:	4313      	orrs	r3, r2
 8012e0e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8012e10:	4b05      	ldr	r3, [pc, #20]	; (8012e28 <HAL_RCC_OscConfig+0x85c>)
 8012e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e14:	4a04      	ldr	r2, [pc, #16]	; (8012e28 <HAL_RCC_OscConfig+0x85c>)
 8012e16:	f043 0301 	orr.w	r3, r3, #1
 8012e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8012e1c:	2300      	movs	r3, #0
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3730      	adds	r7, #48	; 0x30
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	58024400 	.word	0x58024400
 8012e2c:	ffff0007 	.word	0xffff0007

08012e30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b086      	sub	sp, #24
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d101      	bne.n	8012e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012e40:	2301      	movs	r3, #1
 8012e42:	e19c      	b.n	801317e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8012e44:	4b8a      	ldr	r3, [pc, #552]	; (8013070 <HAL_RCC_ClockConfig+0x240>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	f003 030f 	and.w	r3, r3, #15
 8012e4c:	683a      	ldr	r2, [r7, #0]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d910      	bls.n	8012e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012e52:	4b87      	ldr	r3, [pc, #540]	; (8013070 <HAL_RCC_ClockConfig+0x240>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	f023 020f 	bic.w	r2, r3, #15
 8012e5a:	4985      	ldr	r1, [pc, #532]	; (8013070 <HAL_RCC_ClockConfig+0x240>)
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	4313      	orrs	r3, r2
 8012e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012e62:	4b83      	ldr	r3, [pc, #524]	; (8013070 <HAL_RCC_ClockConfig+0x240>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	f003 030f 	and.w	r3, r3, #15
 8012e6a:	683a      	ldr	r2, [r7, #0]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d001      	beq.n	8012e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8012e70:	2301      	movs	r3, #1
 8012e72:	e184      	b.n	801317e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	f003 0304 	and.w	r3, r3, #4
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d010      	beq.n	8012ea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	691a      	ldr	r2, [r3, #16]
 8012e84:	4b7b      	ldr	r3, [pc, #492]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012e86:	699b      	ldr	r3, [r3, #24]
 8012e88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d908      	bls.n	8012ea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012e90:	4b78      	ldr	r3, [pc, #480]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012e92:	699b      	ldr	r3, [r3, #24]
 8012e94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	691b      	ldr	r3, [r3, #16]
 8012e9c:	4975      	ldr	r1, [pc, #468]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012e9e:	4313      	orrs	r3, r2
 8012ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	f003 0308 	and.w	r3, r3, #8
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d010      	beq.n	8012ed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	695a      	ldr	r2, [r3, #20]
 8012eb2:	4b70      	ldr	r3, [pc, #448]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012eb4:	69db      	ldr	r3, [r3, #28]
 8012eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d908      	bls.n	8012ed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8012ebe:	4b6d      	ldr	r3, [pc, #436]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012ec0:	69db      	ldr	r3, [r3, #28]
 8012ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	695b      	ldr	r3, [r3, #20]
 8012eca:	496a      	ldr	r1, [pc, #424]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012ecc:	4313      	orrs	r3, r2
 8012ece:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	f003 0310 	and.w	r3, r3, #16
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d010      	beq.n	8012efe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	699a      	ldr	r2, [r3, #24]
 8012ee0:	4b64      	ldr	r3, [pc, #400]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012ee2:	69db      	ldr	r3, [r3, #28]
 8012ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d908      	bls.n	8012efe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012eec:	4b61      	ldr	r3, [pc, #388]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012eee:	69db      	ldr	r3, [r3, #28]
 8012ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	699b      	ldr	r3, [r3, #24]
 8012ef8:	495e      	ldr	r1, [pc, #376]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012efa:	4313      	orrs	r3, r2
 8012efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	f003 0320 	and.w	r3, r3, #32
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d010      	beq.n	8012f2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	69da      	ldr	r2, [r3, #28]
 8012f0e:	4b59      	ldr	r3, [pc, #356]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012f10:	6a1b      	ldr	r3, [r3, #32]
 8012f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d908      	bls.n	8012f2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8012f1a:	4b56      	ldr	r3, [pc, #344]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012f1c:	6a1b      	ldr	r3, [r3, #32]
 8012f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	69db      	ldr	r3, [r3, #28]
 8012f26:	4953      	ldr	r1, [pc, #332]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012f28:	4313      	orrs	r3, r2
 8012f2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	f003 0302 	and.w	r3, r3, #2
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d010      	beq.n	8012f5a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	68da      	ldr	r2, [r3, #12]
 8012f3c:	4b4d      	ldr	r3, [pc, #308]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012f3e:	699b      	ldr	r3, [r3, #24]
 8012f40:	f003 030f 	and.w	r3, r3, #15
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d908      	bls.n	8012f5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012f48:	4b4a      	ldr	r3, [pc, #296]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012f4a:	699b      	ldr	r3, [r3, #24]
 8012f4c:	f023 020f 	bic.w	r2, r3, #15
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	68db      	ldr	r3, [r3, #12]
 8012f54:	4947      	ldr	r1, [pc, #284]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012f56:	4313      	orrs	r3, r2
 8012f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f003 0301 	and.w	r3, r3, #1
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d055      	beq.n	8013012 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8012f66:	4b43      	ldr	r3, [pc, #268]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012f68:	699b      	ldr	r3, [r3, #24]
 8012f6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	689b      	ldr	r3, [r3, #8]
 8012f72:	4940      	ldr	r1, [pc, #256]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012f74:	4313      	orrs	r3, r2
 8012f76:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	685b      	ldr	r3, [r3, #4]
 8012f7c:	2b02      	cmp	r3, #2
 8012f7e:	d107      	bne.n	8012f90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012f80:	4b3c      	ldr	r3, [pc, #240]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d121      	bne.n	8012fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	e0f6      	b.n	801317e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	2b03      	cmp	r3, #3
 8012f96:	d107      	bne.n	8012fa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012f98:	4b36      	ldr	r3, [pc, #216]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d115      	bne.n	8012fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	e0ea      	b.n	801317e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d107      	bne.n	8012fc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012fb0:	4b30      	ldr	r3, [pc, #192]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d109      	bne.n	8012fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	e0de      	b.n	801317e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012fc0:	4b2c      	ldr	r3, [pc, #176]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	f003 0304 	and.w	r3, r3, #4
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d101      	bne.n	8012fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8012fcc:	2301      	movs	r3, #1
 8012fce:	e0d6      	b.n	801317e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012fd0:	4b28      	ldr	r3, [pc, #160]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012fd2:	691b      	ldr	r3, [r3, #16]
 8012fd4:	f023 0207 	bic.w	r2, r3, #7
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	4925      	ldr	r1, [pc, #148]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8012fde:	4313      	orrs	r3, r2
 8012fe0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012fe2:	f7f9 fddf 	bl	800cba4 <HAL_GetTick>
 8012fe6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012fe8:	e00a      	b.n	8013000 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012fea:	f7f9 fddb 	bl	800cba4 <HAL_GetTick>
 8012fee:	4602      	mov	r2, r0
 8012ff0:	697b      	ldr	r3, [r7, #20]
 8012ff2:	1ad3      	subs	r3, r2, r3
 8012ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ff8:	4293      	cmp	r3, r2
 8012ffa:	d901      	bls.n	8013000 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8012ffc:	2303      	movs	r3, #3
 8012ffe:	e0be      	b.n	801317e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013000:	4b1c      	ldr	r3, [pc, #112]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8013002:	691b      	ldr	r3, [r3, #16]
 8013004:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	00db      	lsls	r3, r3, #3
 801300e:	429a      	cmp	r2, r3
 8013010:	d1eb      	bne.n	8012fea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	f003 0302 	and.w	r3, r3, #2
 801301a:	2b00      	cmp	r3, #0
 801301c:	d010      	beq.n	8013040 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	68da      	ldr	r2, [r3, #12]
 8013022:	4b14      	ldr	r3, [pc, #80]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8013024:	699b      	ldr	r3, [r3, #24]
 8013026:	f003 030f 	and.w	r3, r3, #15
 801302a:	429a      	cmp	r2, r3
 801302c:	d208      	bcs.n	8013040 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801302e:	4b11      	ldr	r3, [pc, #68]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 8013030:	699b      	ldr	r3, [r3, #24]
 8013032:	f023 020f 	bic.w	r2, r3, #15
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	68db      	ldr	r3, [r3, #12]
 801303a:	490e      	ldr	r1, [pc, #56]	; (8013074 <HAL_RCC_ClockConfig+0x244>)
 801303c:	4313      	orrs	r3, r2
 801303e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013040:	4b0b      	ldr	r3, [pc, #44]	; (8013070 <HAL_RCC_ClockConfig+0x240>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	f003 030f 	and.w	r3, r3, #15
 8013048:	683a      	ldr	r2, [r7, #0]
 801304a:	429a      	cmp	r2, r3
 801304c:	d214      	bcs.n	8013078 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801304e:	4b08      	ldr	r3, [pc, #32]	; (8013070 <HAL_RCC_ClockConfig+0x240>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	f023 020f 	bic.w	r2, r3, #15
 8013056:	4906      	ldr	r1, [pc, #24]	; (8013070 <HAL_RCC_ClockConfig+0x240>)
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	4313      	orrs	r3, r2
 801305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801305e:	4b04      	ldr	r3, [pc, #16]	; (8013070 <HAL_RCC_ClockConfig+0x240>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	f003 030f 	and.w	r3, r3, #15
 8013066:	683a      	ldr	r2, [r7, #0]
 8013068:	429a      	cmp	r2, r3
 801306a:	d005      	beq.n	8013078 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801306c:	2301      	movs	r3, #1
 801306e:	e086      	b.n	801317e <HAL_RCC_ClockConfig+0x34e>
 8013070:	52002000 	.word	0x52002000
 8013074:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	f003 0304 	and.w	r3, r3, #4
 8013080:	2b00      	cmp	r3, #0
 8013082:	d010      	beq.n	80130a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	691a      	ldr	r2, [r3, #16]
 8013088:	4b3f      	ldr	r3, [pc, #252]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 801308a:	699b      	ldr	r3, [r3, #24]
 801308c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8013090:	429a      	cmp	r2, r3
 8013092:	d208      	bcs.n	80130a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8013094:	4b3c      	ldr	r3, [pc, #240]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 8013096:	699b      	ldr	r3, [r3, #24]
 8013098:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	691b      	ldr	r3, [r3, #16]
 80130a0:	4939      	ldr	r1, [pc, #228]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 80130a2:	4313      	orrs	r3, r2
 80130a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	f003 0308 	and.w	r3, r3, #8
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d010      	beq.n	80130d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	695a      	ldr	r2, [r3, #20]
 80130b6:	4b34      	ldr	r3, [pc, #208]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 80130b8:	69db      	ldr	r3, [r3, #28]
 80130ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80130be:	429a      	cmp	r2, r3
 80130c0:	d208      	bcs.n	80130d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80130c2:	4b31      	ldr	r3, [pc, #196]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 80130c4:	69db      	ldr	r3, [r3, #28]
 80130c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	695b      	ldr	r3, [r3, #20]
 80130ce:	492e      	ldr	r1, [pc, #184]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 80130d0:	4313      	orrs	r3, r2
 80130d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f003 0310 	and.w	r3, r3, #16
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d010      	beq.n	8013102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	699a      	ldr	r2, [r3, #24]
 80130e4:	4b28      	ldr	r3, [pc, #160]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 80130e6:	69db      	ldr	r3, [r3, #28]
 80130e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80130ec:	429a      	cmp	r2, r3
 80130ee:	d208      	bcs.n	8013102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80130f0:	4b25      	ldr	r3, [pc, #148]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 80130f2:	69db      	ldr	r3, [r3, #28]
 80130f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	699b      	ldr	r3, [r3, #24]
 80130fc:	4922      	ldr	r1, [pc, #136]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 80130fe:	4313      	orrs	r3, r2
 8013100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	f003 0320 	and.w	r3, r3, #32
 801310a:	2b00      	cmp	r3, #0
 801310c:	d010      	beq.n	8013130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	69da      	ldr	r2, [r3, #28]
 8013112:	4b1d      	ldr	r3, [pc, #116]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 8013114:	6a1b      	ldr	r3, [r3, #32]
 8013116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801311a:	429a      	cmp	r2, r3
 801311c:	d208      	bcs.n	8013130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801311e:	4b1a      	ldr	r3, [pc, #104]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 8013120:	6a1b      	ldr	r3, [r3, #32]
 8013122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	69db      	ldr	r3, [r3, #28]
 801312a:	4917      	ldr	r1, [pc, #92]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 801312c:	4313      	orrs	r3, r2
 801312e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8013130:	f000 f834 	bl	801319c <HAL_RCC_GetSysClockFreq>
 8013134:	4602      	mov	r2, r0
 8013136:	4b14      	ldr	r3, [pc, #80]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 8013138:	699b      	ldr	r3, [r3, #24]
 801313a:	0a1b      	lsrs	r3, r3, #8
 801313c:	f003 030f 	and.w	r3, r3, #15
 8013140:	4912      	ldr	r1, [pc, #72]	; (801318c <HAL_RCC_ClockConfig+0x35c>)
 8013142:	5ccb      	ldrb	r3, [r1, r3]
 8013144:	f003 031f 	and.w	r3, r3, #31
 8013148:	fa22 f303 	lsr.w	r3, r2, r3
 801314c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 801314e:	4b0e      	ldr	r3, [pc, #56]	; (8013188 <HAL_RCC_ClockConfig+0x358>)
 8013150:	699b      	ldr	r3, [r3, #24]
 8013152:	f003 030f 	and.w	r3, r3, #15
 8013156:	4a0d      	ldr	r2, [pc, #52]	; (801318c <HAL_RCC_ClockConfig+0x35c>)
 8013158:	5cd3      	ldrb	r3, [r2, r3]
 801315a:	f003 031f 	and.w	r3, r3, #31
 801315e:	693a      	ldr	r2, [r7, #16]
 8013160:	fa22 f303 	lsr.w	r3, r2, r3
 8013164:	4a0a      	ldr	r2, [pc, #40]	; (8013190 <HAL_RCC_ClockConfig+0x360>)
 8013166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8013168:	4a0a      	ldr	r2, [pc, #40]	; (8013194 <HAL_RCC_ClockConfig+0x364>)
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801316e:	4b0a      	ldr	r3, [pc, #40]	; (8013198 <HAL_RCC_ClockConfig+0x368>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	4618      	mov	r0, r3
 8013174:	f7f4 fbac 	bl	80078d0 <HAL_InitTick>
 8013178:	4603      	mov	r3, r0
 801317a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801317c:	7bfb      	ldrb	r3, [r7, #15]
}
 801317e:	4618      	mov	r0, r3
 8013180:	3718      	adds	r7, #24
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	58024400 	.word	0x58024400
 801318c:	0802eda0 	.word	0x0802eda0
 8013190:	24000058 	.word	0x24000058
 8013194:	24000054 	.word	0x24000054
 8013198:	2400005c 	.word	0x2400005c

0801319c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801319c:	b480      	push	{r7}
 801319e:	b089      	sub	sp, #36	; 0x24
 80131a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80131a2:	4bb3      	ldr	r3, [pc, #716]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80131a4:	691b      	ldr	r3, [r3, #16]
 80131a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80131aa:	2b18      	cmp	r3, #24
 80131ac:	f200 8155 	bhi.w	801345a <HAL_RCC_GetSysClockFreq+0x2be>
 80131b0:	a201      	add	r2, pc, #4	; (adr r2, 80131b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80131b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b6:	bf00      	nop
 80131b8:	0801321d 	.word	0x0801321d
 80131bc:	0801345b 	.word	0x0801345b
 80131c0:	0801345b 	.word	0x0801345b
 80131c4:	0801345b 	.word	0x0801345b
 80131c8:	0801345b 	.word	0x0801345b
 80131cc:	0801345b 	.word	0x0801345b
 80131d0:	0801345b 	.word	0x0801345b
 80131d4:	0801345b 	.word	0x0801345b
 80131d8:	08013243 	.word	0x08013243
 80131dc:	0801345b 	.word	0x0801345b
 80131e0:	0801345b 	.word	0x0801345b
 80131e4:	0801345b 	.word	0x0801345b
 80131e8:	0801345b 	.word	0x0801345b
 80131ec:	0801345b 	.word	0x0801345b
 80131f0:	0801345b 	.word	0x0801345b
 80131f4:	0801345b 	.word	0x0801345b
 80131f8:	08013249 	.word	0x08013249
 80131fc:	0801345b 	.word	0x0801345b
 8013200:	0801345b 	.word	0x0801345b
 8013204:	0801345b 	.word	0x0801345b
 8013208:	0801345b 	.word	0x0801345b
 801320c:	0801345b 	.word	0x0801345b
 8013210:	0801345b 	.word	0x0801345b
 8013214:	0801345b 	.word	0x0801345b
 8013218:	0801324f 	.word	0x0801324f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801321c:	4b94      	ldr	r3, [pc, #592]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f003 0320 	and.w	r3, r3, #32
 8013224:	2b00      	cmp	r3, #0
 8013226:	d009      	beq.n	801323c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013228:	4b91      	ldr	r3, [pc, #580]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	08db      	lsrs	r3, r3, #3
 801322e:	f003 0303 	and.w	r3, r3, #3
 8013232:	4a90      	ldr	r2, [pc, #576]	; (8013474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013234:	fa22 f303 	lsr.w	r3, r2, r3
 8013238:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801323a:	e111      	b.n	8013460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801323c:	4b8d      	ldr	r3, [pc, #564]	; (8013474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801323e:	61bb      	str	r3, [r7, #24]
      break;
 8013240:	e10e      	b.n	8013460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8013242:	4b8d      	ldr	r3, [pc, #564]	; (8013478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8013244:	61bb      	str	r3, [r7, #24]
      break;
 8013246:	e10b      	b.n	8013460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8013248:	4b8c      	ldr	r3, [pc, #560]	; (801347c <HAL_RCC_GetSysClockFreq+0x2e0>)
 801324a:	61bb      	str	r3, [r7, #24]
      break;
 801324c:	e108      	b.n	8013460 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801324e:	4b88      	ldr	r3, [pc, #544]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013252:	f003 0303 	and.w	r3, r3, #3
 8013256:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8013258:	4b85      	ldr	r3, [pc, #532]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801325c:	091b      	lsrs	r3, r3, #4
 801325e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013262:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8013264:	4b82      	ldr	r3, [pc, #520]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013268:	f003 0301 	and.w	r3, r3, #1
 801326c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801326e:	4b80      	ldr	r3, [pc, #512]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013272:	08db      	lsrs	r3, r3, #3
 8013274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013278:	68fa      	ldr	r2, [r7, #12]
 801327a:	fb02 f303 	mul.w	r3, r2, r3
 801327e:	ee07 3a90 	vmov	s15, r3
 8013282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013286:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	2b00      	cmp	r3, #0
 801328e:	f000 80e1 	beq.w	8013454 <HAL_RCC_GetSysClockFreq+0x2b8>
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	2b02      	cmp	r3, #2
 8013296:	f000 8083 	beq.w	80133a0 <HAL_RCC_GetSysClockFreq+0x204>
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	2b02      	cmp	r3, #2
 801329e:	f200 80a1 	bhi.w	80133e4 <HAL_RCC_GetSysClockFreq+0x248>
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d003      	beq.n	80132b0 <HAL_RCC_GetSysClockFreq+0x114>
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	d056      	beq.n	801335c <HAL_RCC_GetSysClockFreq+0x1c0>
 80132ae:	e099      	b.n	80133e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80132b0:	4b6f      	ldr	r3, [pc, #444]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	f003 0320 	and.w	r3, r3, #32
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d02d      	beq.n	8013318 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80132bc:	4b6c      	ldr	r3, [pc, #432]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	08db      	lsrs	r3, r3, #3
 80132c2:	f003 0303 	and.w	r3, r3, #3
 80132c6:	4a6b      	ldr	r2, [pc, #428]	; (8013474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80132c8:	fa22 f303 	lsr.w	r3, r2, r3
 80132cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	ee07 3a90 	vmov	s15, r3
 80132d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	ee07 3a90 	vmov	s15, r3
 80132de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80132e6:	4b62      	ldr	r3, [pc, #392]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80132e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132ee:	ee07 3a90 	vmov	s15, r3
 80132f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80132f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80132fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8013480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80132fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013312:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8013316:	e087      	b.n	8013428 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	ee07 3a90 	vmov	s15, r3
 801331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013322:	eddf 6a58 	vldr	s13, [pc, #352]	; 8013484 <HAL_RCC_GetSysClockFreq+0x2e8>
 8013326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801332a:	4b51      	ldr	r3, [pc, #324]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013332:	ee07 3a90 	vmov	s15, r3
 8013336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801333a:	ed97 6a02 	vldr	s12, [r7, #8]
 801333e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8013480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801334a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801335a:	e065      	b.n	8013428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	ee07 3a90 	vmov	s15, r3
 8013362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013366:	eddf 6a48 	vldr	s13, [pc, #288]	; 8013488 <HAL_RCC_GetSysClockFreq+0x2ec>
 801336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801336e:	4b40      	ldr	r3, [pc, #256]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013376:	ee07 3a90 	vmov	s15, r3
 801337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8013382:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8013480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801338e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013396:	ee67 7a27 	vmul.f32	s15, s14, s15
 801339a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801339e:	e043      	b.n	8013428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80133a0:	693b      	ldr	r3, [r7, #16]
 80133a2:	ee07 3a90 	vmov	s15, r3
 80133a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 801348c <HAL_RCC_GetSysClockFreq+0x2f0>
 80133ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133b2:	4b2f      	ldr	r3, [pc, #188]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80133b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133ba:	ee07 3a90 	vmov	s15, r3
 80133be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80133c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80133c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8013480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80133ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80133e2:	e021      	b.n	8013428 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	ee07 3a90 	vmov	s15, r3
 80133ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013488 <HAL_RCC_GetSysClockFreq+0x2ec>
 80133f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133f6:	4b1e      	ldr	r3, [pc, #120]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80133f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133fe:	ee07 3a90 	vmov	s15, r3
 8013402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013406:	ed97 6a02 	vldr	s12, [r7, #8]
 801340a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8013480 <HAL_RCC_GetSysClockFreq+0x2e4>
 801340e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801341a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013426:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8013428:	4b11      	ldr	r3, [pc, #68]	; (8013470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801342c:	0a5b      	lsrs	r3, r3, #9
 801342e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013432:	3301      	adds	r3, #1
 8013434:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	ee07 3a90 	vmov	s15, r3
 801343c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013440:	edd7 6a07 	vldr	s13, [r7, #28]
 8013444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801344c:	ee17 3a90 	vmov	r3, s15
 8013450:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8013452:	e005      	b.n	8013460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8013454:	2300      	movs	r3, #0
 8013456:	61bb      	str	r3, [r7, #24]
      break;
 8013458:	e002      	b.n	8013460 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801345a:	4b07      	ldr	r3, [pc, #28]	; (8013478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801345c:	61bb      	str	r3, [r7, #24]
      break;
 801345e:	bf00      	nop
  }

  return sysclockfreq;
 8013460:	69bb      	ldr	r3, [r7, #24]
}
 8013462:	4618      	mov	r0, r3
 8013464:	3724      	adds	r7, #36	; 0x24
 8013466:	46bd      	mov	sp, r7
 8013468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346c:	4770      	bx	lr
 801346e:	bf00      	nop
 8013470:	58024400 	.word	0x58024400
 8013474:	03d09000 	.word	0x03d09000
 8013478:	003d0900 	.word	0x003d0900
 801347c:	016e3600 	.word	0x016e3600
 8013480:	46000000 	.word	0x46000000
 8013484:	4c742400 	.word	0x4c742400
 8013488:	4a742400 	.word	0x4a742400
 801348c:	4bb71b00 	.word	0x4bb71b00

08013490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b082      	sub	sp, #8
 8013494:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8013496:	f7ff fe81 	bl	801319c <HAL_RCC_GetSysClockFreq>
 801349a:	4602      	mov	r2, r0
 801349c:	4b10      	ldr	r3, [pc, #64]	; (80134e0 <HAL_RCC_GetHCLKFreq+0x50>)
 801349e:	699b      	ldr	r3, [r3, #24]
 80134a0:	0a1b      	lsrs	r3, r3, #8
 80134a2:	f003 030f 	and.w	r3, r3, #15
 80134a6:	490f      	ldr	r1, [pc, #60]	; (80134e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80134a8:	5ccb      	ldrb	r3, [r1, r3]
 80134aa:	f003 031f 	and.w	r3, r3, #31
 80134ae:	fa22 f303 	lsr.w	r3, r2, r3
 80134b2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80134b4:	4b0a      	ldr	r3, [pc, #40]	; (80134e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80134b6:	699b      	ldr	r3, [r3, #24]
 80134b8:	f003 030f 	and.w	r3, r3, #15
 80134bc:	4a09      	ldr	r2, [pc, #36]	; (80134e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80134be:	5cd3      	ldrb	r3, [r2, r3]
 80134c0:	f003 031f 	and.w	r3, r3, #31
 80134c4:	687a      	ldr	r2, [r7, #4]
 80134c6:	fa22 f303 	lsr.w	r3, r2, r3
 80134ca:	4a07      	ldr	r2, [pc, #28]	; (80134e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80134cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80134ce:	4a07      	ldr	r2, [pc, #28]	; (80134ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80134d4:	4b04      	ldr	r3, [pc, #16]	; (80134e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80134d6:	681b      	ldr	r3, [r3, #0]
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	58024400 	.word	0x58024400
 80134e4:	0802eda0 	.word	0x0802eda0
 80134e8:	24000058 	.word	0x24000058
 80134ec:	24000054 	.word	0x24000054

080134f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80134f4:	f7ff ffcc 	bl	8013490 <HAL_RCC_GetHCLKFreq>
 80134f8:	4602      	mov	r2, r0
 80134fa:	4b06      	ldr	r3, [pc, #24]	; (8013514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80134fc:	69db      	ldr	r3, [r3, #28]
 80134fe:	091b      	lsrs	r3, r3, #4
 8013500:	f003 0307 	and.w	r3, r3, #7
 8013504:	4904      	ldr	r1, [pc, #16]	; (8013518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8013506:	5ccb      	ldrb	r3, [r1, r3]
 8013508:	f003 031f 	and.w	r3, r3, #31
 801350c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8013510:	4618      	mov	r0, r3
 8013512:	bd80      	pop	{r7, pc}
 8013514:	58024400 	.word	0x58024400
 8013518:	0802eda0 	.word	0x0802eda0

0801351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8013520:	f7ff ffb6 	bl	8013490 <HAL_RCC_GetHCLKFreq>
 8013524:	4602      	mov	r2, r0
 8013526:	4b06      	ldr	r3, [pc, #24]	; (8013540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013528:	69db      	ldr	r3, [r3, #28]
 801352a:	0a1b      	lsrs	r3, r3, #8
 801352c:	f003 0307 	and.w	r3, r3, #7
 8013530:	4904      	ldr	r1, [pc, #16]	; (8013544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8013532:	5ccb      	ldrb	r3, [r1, r3]
 8013534:	f003 031f 	and.w	r3, r3, #31
 8013538:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 801353c:	4618      	mov	r0, r3
 801353e:	bd80      	pop	{r7, pc}
 8013540:	58024400 	.word	0x58024400
 8013544:	0802eda0 	.word	0x0802eda0

08013548 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013548:	b480      	push	{r7}
 801354a:	b083      	sub	sp, #12
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	223f      	movs	r2, #63	; 0x3f
 8013556:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013558:	4b1a      	ldr	r3, [pc, #104]	; (80135c4 <HAL_RCC_GetClockConfig+0x7c>)
 801355a:	691b      	ldr	r3, [r3, #16]
 801355c:	f003 0207 	and.w	r2, r3, #7
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8013564:	4b17      	ldr	r3, [pc, #92]	; (80135c4 <HAL_RCC_GetClockConfig+0x7c>)
 8013566:	699b      	ldr	r3, [r3, #24]
 8013568:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8013570:	4b14      	ldr	r3, [pc, #80]	; (80135c4 <HAL_RCC_GetClockConfig+0x7c>)
 8013572:	699b      	ldr	r3, [r3, #24]
 8013574:	f003 020f 	and.w	r2, r3, #15
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 801357c:	4b11      	ldr	r3, [pc, #68]	; (80135c4 <HAL_RCC_GetClockConfig+0x7c>)
 801357e:	699b      	ldr	r3, [r3, #24]
 8013580:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8013588:	4b0e      	ldr	r3, [pc, #56]	; (80135c4 <HAL_RCC_GetClockConfig+0x7c>)
 801358a:	69db      	ldr	r3, [r3, #28]
 801358c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8013594:	4b0b      	ldr	r3, [pc, #44]	; (80135c4 <HAL_RCC_GetClockConfig+0x7c>)
 8013596:	69db      	ldr	r3, [r3, #28]
 8013598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80135a0:	4b08      	ldr	r3, [pc, #32]	; (80135c4 <HAL_RCC_GetClockConfig+0x7c>)
 80135a2:	6a1b      	ldr	r3, [r3, #32]
 80135a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80135ac:	4b06      	ldr	r3, [pc, #24]	; (80135c8 <HAL_RCC_GetClockConfig+0x80>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f003 020f 	and.w	r2, r3, #15
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	601a      	str	r2, [r3, #0]
}
 80135b8:	bf00      	nop
 80135ba:	370c      	adds	r7, #12
 80135bc:	46bd      	mov	sp, r7
 80135be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c2:	4770      	bx	lr
 80135c4:	58024400 	.word	0x58024400
 80135c8:	52002000 	.word	0x52002000

080135cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80135cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80135d0:	b0c8      	sub	sp, #288	; 0x120
 80135d2:	af00      	add	r7, sp, #0
 80135d4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80135d8:	2300      	movs	r3, #0
 80135da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80135de:	2300      	movs	r3, #0
 80135e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80135e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80135f0:	2500      	movs	r5, #0
 80135f2:	ea54 0305 	orrs.w	r3, r4, r5
 80135f6:	d049      	beq.n	801368c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80135f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013602:	d02f      	beq.n	8013664 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8013604:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013608:	d828      	bhi.n	801365c <HAL_RCCEx_PeriphCLKConfig+0x90>
 801360a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801360e:	d01a      	beq.n	8013646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8013610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013614:	d822      	bhi.n	801365c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8013616:	2b00      	cmp	r3, #0
 8013618:	d003      	beq.n	8013622 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801361a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801361e:	d007      	beq.n	8013630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8013620:	e01c      	b.n	801365c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013622:	4ba7      	ldr	r3, [pc, #668]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013626:	4aa6      	ldr	r2, [pc, #664]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801362c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801362e:	e01a      	b.n	8013666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013634:	3308      	adds	r3, #8
 8013636:	2102      	movs	r1, #2
 8013638:	4618      	mov	r0, r3
 801363a:	f001 f985 	bl	8014948 <RCCEx_PLL2_Config>
 801363e:	4603      	mov	r3, r0
 8013640:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013644:	e00f      	b.n	8013666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801364a:	3328      	adds	r3, #40	; 0x28
 801364c:	2102      	movs	r1, #2
 801364e:	4618      	mov	r0, r3
 8013650:	f001 fa2c 	bl	8014aac <RCCEx_PLL3_Config>
 8013654:	4603      	mov	r3, r0
 8013656:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801365a:	e004      	b.n	8013666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801365c:	2301      	movs	r3, #1
 801365e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013662:	e000      	b.n	8013666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8013664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013666:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801366a:	2b00      	cmp	r3, #0
 801366c:	d10a      	bne.n	8013684 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801366e:	4b94      	ldr	r3, [pc, #592]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013672:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8013676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801367a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801367c:	4a90      	ldr	r2, [pc, #576]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801367e:	430b      	orrs	r3, r1
 8013680:	6513      	str	r3, [r2, #80]	; 0x50
 8013682:	e003      	b.n	801368c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013684:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013688:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801368c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013694:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8013698:	f04f 0900 	mov.w	r9, #0
 801369c:	ea58 0309 	orrs.w	r3, r8, r9
 80136a0:	d047      	beq.n	8013732 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80136a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136a8:	2b04      	cmp	r3, #4
 80136aa:	d82a      	bhi.n	8013702 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80136ac:	a201      	add	r2, pc, #4	; (adr r2, 80136b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80136ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136b2:	bf00      	nop
 80136b4:	080136c9 	.word	0x080136c9
 80136b8:	080136d7 	.word	0x080136d7
 80136bc:	080136ed 	.word	0x080136ed
 80136c0:	0801370b 	.word	0x0801370b
 80136c4:	0801370b 	.word	0x0801370b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80136c8:	4b7d      	ldr	r3, [pc, #500]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80136ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136cc:	4a7c      	ldr	r2, [pc, #496]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80136ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80136d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80136d4:	e01a      	b.n	801370c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80136d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136da:	3308      	adds	r3, #8
 80136dc:	2100      	movs	r1, #0
 80136de:	4618      	mov	r0, r3
 80136e0:	f001 f932 	bl	8014948 <RCCEx_PLL2_Config>
 80136e4:	4603      	mov	r3, r0
 80136e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80136ea:	e00f      	b.n	801370c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80136ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136f0:	3328      	adds	r3, #40	; 0x28
 80136f2:	2100      	movs	r1, #0
 80136f4:	4618      	mov	r0, r3
 80136f6:	f001 f9d9 	bl	8014aac <RCCEx_PLL3_Config>
 80136fa:	4603      	mov	r3, r0
 80136fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013700:	e004      	b.n	801370c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013702:	2301      	movs	r3, #1
 8013704:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013708:	e000      	b.n	801370c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801370a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801370c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013710:	2b00      	cmp	r3, #0
 8013712:	d10a      	bne.n	801372a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013714:	4b6a      	ldr	r3, [pc, #424]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013718:	f023 0107 	bic.w	r1, r3, #7
 801371c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013722:	4a67      	ldr	r2, [pc, #412]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013724:	430b      	orrs	r3, r1
 8013726:	6513      	str	r3, [r2, #80]	; 0x50
 8013728:	e003      	b.n	8013732 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801372a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801372e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8013732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 801373e:	f04f 0b00 	mov.w	fp, #0
 8013742:	ea5a 030b 	orrs.w	r3, sl, fp
 8013746:	d054      	beq.n	80137f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8013748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801374e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8013752:	d036      	beq.n	80137c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8013754:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8013758:	d82f      	bhi.n	80137ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801375a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801375e:	d032      	beq.n	80137c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8013760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013764:	d829      	bhi.n	80137ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8013766:	2bc0      	cmp	r3, #192	; 0xc0
 8013768:	d02f      	beq.n	80137ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 801376a:	2bc0      	cmp	r3, #192	; 0xc0
 801376c:	d825      	bhi.n	80137ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801376e:	2b80      	cmp	r3, #128	; 0x80
 8013770:	d018      	beq.n	80137a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8013772:	2b80      	cmp	r3, #128	; 0x80
 8013774:	d821      	bhi.n	80137ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8013776:	2b00      	cmp	r3, #0
 8013778:	d002      	beq.n	8013780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 801377a:	2b40      	cmp	r3, #64	; 0x40
 801377c:	d007      	beq.n	801378e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 801377e:	e01c      	b.n	80137ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013780:	4b4f      	ldr	r3, [pc, #316]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013784:	4a4e      	ldr	r2, [pc, #312]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801378a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 801378c:	e01e      	b.n	80137cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801378e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013792:	3308      	adds	r3, #8
 8013794:	2100      	movs	r1, #0
 8013796:	4618      	mov	r0, r3
 8013798:	f001 f8d6 	bl	8014948 <RCCEx_PLL2_Config>
 801379c:	4603      	mov	r3, r0
 801379e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80137a2:	e013      	b.n	80137cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80137a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137a8:	3328      	adds	r3, #40	; 0x28
 80137aa:	2100      	movs	r1, #0
 80137ac:	4618      	mov	r0, r3
 80137ae:	f001 f97d 	bl	8014aac <RCCEx_PLL3_Config>
 80137b2:	4603      	mov	r3, r0
 80137b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80137b8:	e008      	b.n	80137cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80137ba:	2301      	movs	r3, #1
 80137bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80137c0:	e004      	b.n	80137cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80137c2:	bf00      	nop
 80137c4:	e002      	b.n	80137cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80137c6:	bf00      	nop
 80137c8:	e000      	b.n	80137cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80137ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80137cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d10a      	bne.n	80137ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80137d4:	4b3a      	ldr	r3, [pc, #232]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80137d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80137dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80137e2:	4a37      	ldr	r2, [pc, #220]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80137e4:	430b      	orrs	r3, r1
 80137e6:	6513      	str	r3, [r2, #80]	; 0x50
 80137e8:	e003      	b.n	80137f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80137ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80137ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80137f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80137fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013802:	2300      	movs	r3, #0
 8013804:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013808:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 801380c:	460b      	mov	r3, r1
 801380e:	4313      	orrs	r3, r2
 8013810:	d05c      	beq.n	80138cc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8013812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013818:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 801381c:	d03b      	beq.n	8013896 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801381e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8013822:	d834      	bhi.n	801388e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8013824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013828:	d037      	beq.n	801389a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 801382a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801382e:	d82e      	bhi.n	801388e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8013830:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013834:	d033      	beq.n	801389e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8013836:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801383a:	d828      	bhi.n	801388e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 801383c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013840:	d01a      	beq.n	8013878 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8013842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013846:	d822      	bhi.n	801388e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8013848:	2b00      	cmp	r3, #0
 801384a:	d003      	beq.n	8013854 <HAL_RCCEx_PeriphCLKConfig+0x288>
 801384c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013850:	d007      	beq.n	8013862 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8013852:	e01c      	b.n	801388e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013854:	4b1a      	ldr	r3, [pc, #104]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8013856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013858:	4a19      	ldr	r2, [pc, #100]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801385a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801385e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8013860:	e01e      	b.n	80138a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013866:	3308      	adds	r3, #8
 8013868:	2100      	movs	r1, #0
 801386a:	4618      	mov	r0, r3
 801386c:	f001 f86c 	bl	8014948 <RCCEx_PLL2_Config>
 8013870:	4603      	mov	r3, r0
 8013872:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8013876:	e013      	b.n	80138a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801387c:	3328      	adds	r3, #40	; 0x28
 801387e:	2100      	movs	r1, #0
 8013880:	4618      	mov	r0, r3
 8013882:	f001 f913 	bl	8014aac <RCCEx_PLL3_Config>
 8013886:	4603      	mov	r3, r0
 8013888:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 801388c:	e008      	b.n	80138a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801388e:	2301      	movs	r3, #1
 8013890:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013894:	e004      	b.n	80138a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8013896:	bf00      	nop
 8013898:	e002      	b.n	80138a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 801389a:	bf00      	nop
 801389c:	e000      	b.n	80138a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 801389e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80138a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d10d      	bne.n	80138c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80138a8:	4b05      	ldr	r3, [pc, #20]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80138aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138ac:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80138b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138b6:	4a02      	ldr	r2, [pc, #8]	; (80138c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80138b8:	430b      	orrs	r3, r1
 80138ba:	6513      	str	r3, [r2, #80]	; 0x50
 80138bc:	e006      	b.n	80138cc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80138be:	bf00      	nop
 80138c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80138c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80138c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80138cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80138d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80138dc:	2300      	movs	r3, #0
 80138de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80138e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80138e6:	460b      	mov	r3, r1
 80138e8:	4313      	orrs	r3, r2
 80138ea:	d03a      	beq.n	8013962 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80138ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138f2:	2b30      	cmp	r3, #48	; 0x30
 80138f4:	d01f      	beq.n	8013936 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80138f6:	2b30      	cmp	r3, #48	; 0x30
 80138f8:	d819      	bhi.n	801392e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80138fa:	2b20      	cmp	r3, #32
 80138fc:	d00c      	beq.n	8013918 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80138fe:	2b20      	cmp	r3, #32
 8013900:	d815      	bhi.n	801392e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8013902:	2b00      	cmp	r3, #0
 8013904:	d019      	beq.n	801393a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8013906:	2b10      	cmp	r3, #16
 8013908:	d111      	bne.n	801392e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801390a:	4bae      	ldr	r3, [pc, #696]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801390e:	4aad      	ldr	r2, [pc, #692]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013914:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8013916:	e011      	b.n	801393c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801391c:	3308      	adds	r3, #8
 801391e:	2102      	movs	r1, #2
 8013920:	4618      	mov	r0, r3
 8013922:	f001 f811 	bl	8014948 <RCCEx_PLL2_Config>
 8013926:	4603      	mov	r3, r0
 8013928:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801392c:	e006      	b.n	801393c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801392e:	2301      	movs	r3, #1
 8013930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013934:	e002      	b.n	801393c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8013936:	bf00      	nop
 8013938:	e000      	b.n	801393c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 801393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801393c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013940:	2b00      	cmp	r3, #0
 8013942:	d10a      	bne.n	801395a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8013944:	4b9f      	ldr	r3, [pc, #636]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013948:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013952:	4a9c      	ldr	r2, [pc, #624]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013954:	430b      	orrs	r3, r1
 8013956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013958:	e003      	b.n	8013962 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801395a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801395e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8013962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801396e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8013972:	2300      	movs	r3, #0
 8013974:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013978:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 801397c:	460b      	mov	r3, r1
 801397e:	4313      	orrs	r3, r2
 8013980:	d051      	beq.n	8013a26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8013982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801398c:	d035      	beq.n	80139fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 801398e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013992:	d82e      	bhi.n	80139f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8013994:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013998:	d031      	beq.n	80139fe <HAL_RCCEx_PeriphCLKConfig+0x432>
 801399a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801399e:	d828      	bhi.n	80139f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80139a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80139a4:	d01a      	beq.n	80139dc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80139a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80139aa:	d822      	bhi.n	80139f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d003      	beq.n	80139b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80139b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80139b4:	d007      	beq.n	80139c6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80139b6:	e01c      	b.n	80139f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80139b8:	4b82      	ldr	r3, [pc, #520]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80139ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139bc:	4a81      	ldr	r2, [pc, #516]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80139be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80139c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80139c4:	e01c      	b.n	8013a00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80139c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139ca:	3308      	adds	r3, #8
 80139cc:	2100      	movs	r1, #0
 80139ce:	4618      	mov	r0, r3
 80139d0:	f000 ffba 	bl	8014948 <RCCEx_PLL2_Config>
 80139d4:	4603      	mov	r3, r0
 80139d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80139da:	e011      	b.n	8013a00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80139dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139e0:	3328      	adds	r3, #40	; 0x28
 80139e2:	2100      	movs	r1, #0
 80139e4:	4618      	mov	r0, r3
 80139e6:	f001 f861 	bl	8014aac <RCCEx_PLL3_Config>
 80139ea:	4603      	mov	r3, r0
 80139ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80139f0:	e006      	b.n	8013a00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80139f2:	2301      	movs	r3, #1
 80139f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80139f8:	e002      	b.n	8013a00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80139fa:	bf00      	nop
 80139fc:	e000      	b.n	8013a00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80139fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013a00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d10a      	bne.n	8013a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8013a08:	4b6e      	ldr	r3, [pc, #440]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a0c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8013a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013a16:	4a6b      	ldr	r2, [pc, #428]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013a18:	430b      	orrs	r3, r1
 8013a1a:	6513      	str	r3, [r2, #80]	; 0x50
 8013a1c:	e003      	b.n	8013a26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013a1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013a22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8013a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a2e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8013a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013a36:	2300      	movs	r3, #0
 8013a38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013a3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8013a40:	460b      	mov	r3, r1
 8013a42:	4313      	orrs	r3, r2
 8013a44:	d053      	beq.n	8013aee <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8013a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013a50:	d033      	beq.n	8013aba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8013a52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013a56:	d82c      	bhi.n	8013ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8013a58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013a5c:	d02f      	beq.n	8013abe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8013a5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013a62:	d826      	bhi.n	8013ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8013a64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013a68:	d02b      	beq.n	8013ac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8013a6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013a6e:	d820      	bhi.n	8013ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8013a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013a74:	d012      	beq.n	8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8013a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013a7a:	d81a      	bhi.n	8013ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d022      	beq.n	8013ac6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8013a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a84:	d115      	bne.n	8013ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a8a:	3308      	adds	r3, #8
 8013a8c:	2101      	movs	r1, #1
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f000 ff5a 	bl	8014948 <RCCEx_PLL2_Config>
 8013a94:	4603      	mov	r3, r0
 8013a96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8013a9a:	e015      	b.n	8013ac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013aa0:	3328      	adds	r3, #40	; 0x28
 8013aa2:	2101      	movs	r1, #1
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f001 f801 	bl	8014aac <RCCEx_PLL3_Config>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8013ab0:	e00a      	b.n	8013ac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013ab8:	e006      	b.n	8013ac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8013aba:	bf00      	nop
 8013abc:	e004      	b.n	8013ac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8013abe:	bf00      	nop
 8013ac0:	e002      	b.n	8013ac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8013ac2:	bf00      	nop
 8013ac4:	e000      	b.n	8013ac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8013ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013ac8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d10a      	bne.n	8013ae6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8013ad0:	4b3c      	ldr	r3, [pc, #240]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ad4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8013ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ade:	4a39      	ldr	r2, [pc, #228]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013ae0:	430b      	orrs	r3, r1
 8013ae2:	6513      	str	r3, [r2, #80]	; 0x50
 8013ae4:	e003      	b.n	8013aee <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013ae6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013aea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8013aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8013afa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013afe:	2300      	movs	r3, #0
 8013b00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013b04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8013b08:	460b      	mov	r3, r1
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	d060      	beq.n	8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8013b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013b16:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8013b1a:	d039      	beq.n	8013b90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8013b1c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8013b20:	d832      	bhi.n	8013b88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013b26:	d035      	beq.n	8013b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8013b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013b2c:	d82c      	bhi.n	8013b88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b32:	d031      	beq.n	8013b98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8013b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b38:	d826      	bhi.n	8013b88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013b3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013b3e:	d02d      	beq.n	8013b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8013b40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013b44:	d820      	bhi.n	8013b88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013b4a:	d012      	beq.n	8013b72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8013b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013b50:	d81a      	bhi.n	8013b88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d024      	beq.n	8013ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8013b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013b5a:	d115      	bne.n	8013b88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b60:	3308      	adds	r3, #8
 8013b62:	2101      	movs	r1, #1
 8013b64:	4618      	mov	r0, r3
 8013b66:	f000 feef 	bl	8014948 <RCCEx_PLL2_Config>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8013b70:	e017      	b.n	8013ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b76:	3328      	adds	r3, #40	; 0x28
 8013b78:	2101      	movs	r1, #1
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 ff96 	bl	8014aac <RCCEx_PLL3_Config>
 8013b80:	4603      	mov	r3, r0
 8013b82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8013b86:	e00c      	b.n	8013ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013b8e:	e008      	b.n	8013ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013b90:	bf00      	nop
 8013b92:	e006      	b.n	8013ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013b94:	bf00      	nop
 8013b96:	e004      	b.n	8013ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013b98:	bf00      	nop
 8013b9a:	e002      	b.n	8013ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013b9c:	bf00      	nop
 8013b9e:	e000      	b.n	8013ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013ba2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d10e      	bne.n	8013bc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8013baa:	4b06      	ldr	r3, [pc, #24]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013bae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8013bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013bba:	4a02      	ldr	r2, [pc, #8]	; (8013bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013bbc:	430b      	orrs	r3, r1
 8013bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8013bc0:	e006      	b.n	8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8013bc2:	bf00      	nop
 8013bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013bcc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8013bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8013bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013be0:	2300      	movs	r3, #0
 8013be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8013bea:	460b      	mov	r3, r1
 8013bec:	4313      	orrs	r3, r2
 8013bee:	d037      	beq.n	8013c60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8013bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013bfa:	d00e      	beq.n	8013c1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8013bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013c00:	d816      	bhi.n	8013c30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d018      	beq.n	8013c38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8013c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013c0a:	d111      	bne.n	8013c30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013c0c:	4bc4      	ldr	r3, [pc, #784]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c10:	4ac3      	ldr	r2, [pc, #780]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8013c18:	e00f      	b.n	8013c3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c1e:	3308      	adds	r3, #8
 8013c20:	2101      	movs	r1, #1
 8013c22:	4618      	mov	r0, r3
 8013c24:	f000 fe90 	bl	8014948 <RCCEx_PLL2_Config>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8013c2e:	e004      	b.n	8013c3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013c30:	2301      	movs	r3, #1
 8013c32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013c36:	e000      	b.n	8013c3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8013c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013c3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d10a      	bne.n	8013c58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8013c42:	4bb7      	ldr	r3, [pc, #732]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8013c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c50:	4ab3      	ldr	r2, [pc, #716]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013c52:	430b      	orrs	r3, r1
 8013c54:	6513      	str	r3, [r2, #80]	; 0x50
 8013c56:	e003      	b.n	8013c60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013c58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013c5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8013c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8013c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013c70:	2300      	movs	r3, #0
 8013c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8013c76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8013c7a:	460b      	mov	r3, r1
 8013c7c:	4313      	orrs	r3, r2
 8013c7e:	d039      	beq.n	8013cf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8013c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c86:	2b03      	cmp	r3, #3
 8013c88:	d81c      	bhi.n	8013cc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8013c8a:	a201      	add	r2, pc, #4	; (adr r2, 8013c90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8013c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c90:	08013ccd 	.word	0x08013ccd
 8013c94:	08013ca1 	.word	0x08013ca1
 8013c98:	08013caf 	.word	0x08013caf
 8013c9c:	08013ccd 	.word	0x08013ccd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013ca0:	4b9f      	ldr	r3, [pc, #636]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ca4:	4a9e      	ldr	r2, [pc, #632]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8013cac:	e00f      	b.n	8013cce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cb2:	3308      	adds	r3, #8
 8013cb4:	2102      	movs	r1, #2
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f000 fe46 	bl	8014948 <RCCEx_PLL2_Config>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8013cc2:	e004      	b.n	8013cce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013cca:	e000      	b.n	8013cce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8013ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013cce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d10a      	bne.n	8013cec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8013cd6:	4b92      	ldr	r3, [pc, #584]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013cda:	f023 0103 	bic.w	r1, r3, #3
 8013cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ce4:	4a8e      	ldr	r2, [pc, #568]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013ce6:	430b      	orrs	r3, r1
 8013ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013cea:	e003      	b.n	8013cf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013cec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013cf0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8013d00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013d04:	2300      	movs	r3, #0
 8013d06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013d0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8013d0e:	460b      	mov	r3, r1
 8013d10:	4313      	orrs	r3, r2
 8013d12:	f000 8099 	beq.w	8013e48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013d16:	4b83      	ldr	r3, [pc, #524]	; (8013f24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	4a82      	ldr	r2, [pc, #520]	; (8013f24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8013d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013d22:	f7f8 ff3f 	bl	800cba4 <HAL_GetTick>
 8013d26:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013d2a:	e00b      	b.n	8013d44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013d2c:	f7f8 ff3a 	bl	800cba4 <HAL_GetTick>
 8013d30:	4602      	mov	r2, r0
 8013d32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013d36:	1ad3      	subs	r3, r2, r3
 8013d38:	2b64      	cmp	r3, #100	; 0x64
 8013d3a:	d903      	bls.n	8013d44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8013d3c:	2303      	movs	r3, #3
 8013d3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013d42:	e005      	b.n	8013d50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013d44:	4b77      	ldr	r3, [pc, #476]	; (8013f24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d0ed      	beq.n	8013d2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8013d50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d173      	bne.n	8013e40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013d58:	4b71      	ldr	r3, [pc, #452]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013d64:	4053      	eors	r3, r2
 8013d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d015      	beq.n	8013d9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013d6e:	4b6c      	ldr	r3, [pc, #432]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8013d7a:	4b69      	ldr	r3, [pc, #420]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d7e:	4a68      	ldr	r2, [pc, #416]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013d84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013d86:	4b66      	ldr	r3, [pc, #408]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d8a:	4a65      	ldr	r2, [pc, #404]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013d90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8013d92:	4a63      	ldr	r2, [pc, #396]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013d98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8013d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013da6:	d118      	bne.n	8013dda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013da8:	f7f8 fefc 	bl	800cba4 <HAL_GetTick>
 8013dac:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013db0:	e00d      	b.n	8013dce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013db2:	f7f8 fef7 	bl	800cba4 <HAL_GetTick>
 8013db6:	4602      	mov	r2, r0
 8013db8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013dbc:	1ad2      	subs	r2, r2, r3
 8013dbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	d903      	bls.n	8013dce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8013dc6:	2303      	movs	r3, #3
 8013dc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8013dcc:	e005      	b.n	8013dda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013dce:	4b54      	ldr	r3, [pc, #336]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dd2:	f003 0302 	and.w	r3, r3, #2
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d0eb      	beq.n	8013db2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8013dda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d129      	bne.n	8013e36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013de6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013df2:	d10e      	bne.n	8013e12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8013df4:	4b4a      	ldr	r3, [pc, #296]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013df6:	691b      	ldr	r3, [r3, #16]
 8013df8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8013dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013e04:	091a      	lsrs	r2, r3, #4
 8013e06:	4b48      	ldr	r3, [pc, #288]	; (8013f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8013e08:	4013      	ands	r3, r2
 8013e0a:	4a45      	ldr	r2, [pc, #276]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013e0c:	430b      	orrs	r3, r1
 8013e0e:	6113      	str	r3, [r2, #16]
 8013e10:	e005      	b.n	8013e1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8013e12:	4b43      	ldr	r3, [pc, #268]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013e14:	691b      	ldr	r3, [r3, #16]
 8013e16:	4a42      	ldr	r2, [pc, #264]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013e18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013e1c:	6113      	str	r3, [r2, #16]
 8013e1e:	4b40      	ldr	r3, [pc, #256]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013e20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013e2e:	4a3c      	ldr	r2, [pc, #240]	; (8013f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013e30:	430b      	orrs	r3, r1
 8013e32:	6713      	str	r3, [r2, #112]	; 0x70
 8013e34:	e008      	b.n	8013e48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013e36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013e3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8013e3e:	e003      	b.n	8013e48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013e40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013e44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8013e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e50:	f002 0301 	and.w	r3, r2, #1
 8013e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013e58:	2300      	movs	r3, #0
 8013e5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013e5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8013e62:	460b      	mov	r3, r1
 8013e64:	4313      	orrs	r3, r2
 8013e66:	f000 8090 	beq.w	8013f8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8013e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013e72:	2b28      	cmp	r3, #40	; 0x28
 8013e74:	d870      	bhi.n	8013f58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8013e76:	a201      	add	r2, pc, #4	; (adr r2, 8013e7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8013e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e7c:	08013f61 	.word	0x08013f61
 8013e80:	08013f59 	.word	0x08013f59
 8013e84:	08013f59 	.word	0x08013f59
 8013e88:	08013f59 	.word	0x08013f59
 8013e8c:	08013f59 	.word	0x08013f59
 8013e90:	08013f59 	.word	0x08013f59
 8013e94:	08013f59 	.word	0x08013f59
 8013e98:	08013f59 	.word	0x08013f59
 8013e9c:	08013f2d 	.word	0x08013f2d
 8013ea0:	08013f59 	.word	0x08013f59
 8013ea4:	08013f59 	.word	0x08013f59
 8013ea8:	08013f59 	.word	0x08013f59
 8013eac:	08013f59 	.word	0x08013f59
 8013eb0:	08013f59 	.word	0x08013f59
 8013eb4:	08013f59 	.word	0x08013f59
 8013eb8:	08013f59 	.word	0x08013f59
 8013ebc:	08013f43 	.word	0x08013f43
 8013ec0:	08013f59 	.word	0x08013f59
 8013ec4:	08013f59 	.word	0x08013f59
 8013ec8:	08013f59 	.word	0x08013f59
 8013ecc:	08013f59 	.word	0x08013f59
 8013ed0:	08013f59 	.word	0x08013f59
 8013ed4:	08013f59 	.word	0x08013f59
 8013ed8:	08013f59 	.word	0x08013f59
 8013edc:	08013f61 	.word	0x08013f61
 8013ee0:	08013f59 	.word	0x08013f59
 8013ee4:	08013f59 	.word	0x08013f59
 8013ee8:	08013f59 	.word	0x08013f59
 8013eec:	08013f59 	.word	0x08013f59
 8013ef0:	08013f59 	.word	0x08013f59
 8013ef4:	08013f59 	.word	0x08013f59
 8013ef8:	08013f59 	.word	0x08013f59
 8013efc:	08013f61 	.word	0x08013f61
 8013f00:	08013f59 	.word	0x08013f59
 8013f04:	08013f59 	.word	0x08013f59
 8013f08:	08013f59 	.word	0x08013f59
 8013f0c:	08013f59 	.word	0x08013f59
 8013f10:	08013f59 	.word	0x08013f59
 8013f14:	08013f59 	.word	0x08013f59
 8013f18:	08013f59 	.word	0x08013f59
 8013f1c:	08013f61 	.word	0x08013f61
 8013f20:	58024400 	.word	0x58024400
 8013f24:	58024800 	.word	0x58024800
 8013f28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013f30:	3308      	adds	r3, #8
 8013f32:	2101      	movs	r1, #1
 8013f34:	4618      	mov	r0, r3
 8013f36:	f000 fd07 	bl	8014948 <RCCEx_PLL2_Config>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8013f40:	e00f      	b.n	8013f62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013f46:	3328      	adds	r3, #40	; 0x28
 8013f48:	2101      	movs	r1, #1
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f000 fdae 	bl	8014aac <RCCEx_PLL3_Config>
 8013f50:	4603      	mov	r3, r0
 8013f52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8013f56:	e004      	b.n	8013f62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013f58:	2301      	movs	r3, #1
 8013f5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8013f5e:	e000      	b.n	8013f62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8013f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013f62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d10b      	bne.n	8013f82 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8013f6a:	4bc0      	ldr	r3, [pc, #768]	; (801426c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f6e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8013f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f7a:	4abc      	ldr	r2, [pc, #752]	; (801426c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8013f7c:	430b      	orrs	r3, r1
 8013f7e:	6553      	str	r3, [r2, #84]	; 0x54
 8013f80:	e003      	b.n	8013f8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013f82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013f86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8013f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f92:	f002 0302 	and.w	r3, r2, #2
 8013f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8013fa0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	4313      	orrs	r3, r2
 8013fa8:	d043      	beq.n	8014032 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8013faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013fb2:	2b05      	cmp	r3, #5
 8013fb4:	d824      	bhi.n	8014000 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8013fb6:	a201      	add	r2, pc, #4	; (adr r2, 8013fbc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8013fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fbc:	08014009 	.word	0x08014009
 8013fc0:	08013fd5 	.word	0x08013fd5
 8013fc4:	08013feb 	.word	0x08013feb
 8013fc8:	08014009 	.word	0x08014009
 8013fcc:	08014009 	.word	0x08014009
 8013fd0:	08014009 	.word	0x08014009
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013fd8:	3308      	adds	r3, #8
 8013fda:	2101      	movs	r1, #1
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f000 fcb3 	bl	8014948 <RCCEx_PLL2_Config>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8013fe8:	e00f      	b.n	801400a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013fee:	3328      	adds	r3, #40	; 0x28
 8013ff0:	2101      	movs	r1, #1
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f000 fd5a 	bl	8014aac <RCCEx_PLL3_Config>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8013ffe:	e004      	b.n	801400a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014000:	2301      	movs	r3, #1
 8014002:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014006:	e000      	b.n	801400a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8014008:	bf00      	nop
    }

    if (ret == HAL_OK)
 801400a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801400e:	2b00      	cmp	r3, #0
 8014010:	d10b      	bne.n	801402a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8014012:	4b96      	ldr	r3, [pc, #600]	; (801426c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8014014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014016:	f023 0107 	bic.w	r1, r3, #7
 801401a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801401e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014022:	4a92      	ldr	r2, [pc, #584]	; (801426c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8014024:	430b      	orrs	r3, r1
 8014026:	6553      	str	r3, [r2, #84]	; 0x54
 8014028:	e003      	b.n	8014032 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801402a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801402e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801403a:	f002 0304 	and.w	r3, r2, #4
 801403e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014042:	2300      	movs	r3, #0
 8014044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014048:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801404c:	460b      	mov	r3, r1
 801404e:	4313      	orrs	r3, r2
 8014050:	d043      	beq.n	80140da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8014052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801405a:	2b05      	cmp	r3, #5
 801405c:	d824      	bhi.n	80140a8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 801405e:	a201      	add	r2, pc, #4	; (adr r2, 8014064 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8014060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014064:	080140b1 	.word	0x080140b1
 8014068:	0801407d 	.word	0x0801407d
 801406c:	08014093 	.word	0x08014093
 8014070:	080140b1 	.word	0x080140b1
 8014074:	080140b1 	.word	0x080140b1
 8014078:	080140b1 	.word	0x080140b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801407c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014080:	3308      	adds	r3, #8
 8014082:	2101      	movs	r1, #1
 8014084:	4618      	mov	r0, r3
 8014086:	f000 fc5f 	bl	8014948 <RCCEx_PLL2_Config>
 801408a:	4603      	mov	r3, r0
 801408c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8014090:	e00f      	b.n	80140b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014096:	3328      	adds	r3, #40	; 0x28
 8014098:	2101      	movs	r1, #1
 801409a:	4618      	mov	r0, r3
 801409c:	f000 fd06 	bl	8014aac <RCCEx_PLL3_Config>
 80140a0:	4603      	mov	r3, r0
 80140a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80140a6:	e004      	b.n	80140b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80140a8:	2301      	movs	r3, #1
 80140aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80140ae:	e000      	b.n	80140b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80140b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80140b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d10b      	bne.n	80140d2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80140ba:	4b6c      	ldr	r3, [pc, #432]	; (801426c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80140bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140be:	f023 0107 	bic.w	r1, r3, #7
 80140c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80140c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80140ca:	4a68      	ldr	r2, [pc, #416]	; (801426c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80140cc:	430b      	orrs	r3, r1
 80140ce:	6593      	str	r3, [r2, #88]	; 0x58
 80140d0:	e003      	b.n	80140da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80140d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80140d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80140da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80140de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e2:	f002 0320 	and.w	r3, r2, #32
 80140e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80140ea:	2300      	movs	r3, #0
 80140ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80140f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80140f4:	460b      	mov	r3, r1
 80140f6:	4313      	orrs	r3, r2
 80140f8:	d055      	beq.n	80141a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80140fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80140fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014106:	d033      	beq.n	8014170 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8014108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801410c:	d82c      	bhi.n	8014168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 801410e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014112:	d02f      	beq.n	8014174 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8014114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014118:	d826      	bhi.n	8014168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 801411a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801411e:	d02b      	beq.n	8014178 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8014120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8014124:	d820      	bhi.n	8014168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8014126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801412a:	d012      	beq.n	8014152 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 801412c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014130:	d81a      	bhi.n	8014168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8014132:	2b00      	cmp	r3, #0
 8014134:	d022      	beq.n	801417c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8014136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801413a:	d115      	bne.n	8014168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801413c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014140:	3308      	adds	r3, #8
 8014142:	2100      	movs	r1, #0
 8014144:	4618      	mov	r0, r3
 8014146:	f000 fbff 	bl	8014948 <RCCEx_PLL2_Config>
 801414a:	4603      	mov	r3, r0
 801414c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8014150:	e015      	b.n	801417e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014156:	3328      	adds	r3, #40	; 0x28
 8014158:	2102      	movs	r1, #2
 801415a:	4618      	mov	r0, r3
 801415c:	f000 fca6 	bl	8014aac <RCCEx_PLL3_Config>
 8014160:	4603      	mov	r3, r0
 8014162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8014166:	e00a      	b.n	801417e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014168:	2301      	movs	r3, #1
 801416a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801416e:	e006      	b.n	801417e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8014170:	bf00      	nop
 8014172:	e004      	b.n	801417e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8014174:	bf00      	nop
 8014176:	e002      	b.n	801417e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8014178:	bf00      	nop
 801417a:	e000      	b.n	801417e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 801417c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801417e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014182:	2b00      	cmp	r3, #0
 8014184:	d10b      	bne.n	801419e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8014186:	4b39      	ldr	r3, [pc, #228]	; (801426c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8014188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801418a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801418e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014196:	4a35      	ldr	r2, [pc, #212]	; (801426c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8014198:	430b      	orrs	r3, r1
 801419a:	6553      	str	r3, [r2, #84]	; 0x54
 801419c:	e003      	b.n	80141a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801419e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80141a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80141a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80141aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80141b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80141b6:	2300      	movs	r3, #0
 80141b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80141bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80141c0:	460b      	mov	r3, r1
 80141c2:	4313      	orrs	r3, r2
 80141c4:	d058      	beq.n	8014278 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80141c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80141ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80141ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80141d2:	d033      	beq.n	801423c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80141d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80141d8:	d82c      	bhi.n	8014234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80141da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80141de:	d02f      	beq.n	8014240 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80141e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80141e4:	d826      	bhi.n	8014234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80141e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80141ea:	d02b      	beq.n	8014244 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80141ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80141f0:	d820      	bhi.n	8014234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80141f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80141f6:	d012      	beq.n	801421e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80141f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80141fc:	d81a      	bhi.n	8014234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d022      	beq.n	8014248 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8014202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014206:	d115      	bne.n	8014234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801420c:	3308      	adds	r3, #8
 801420e:	2100      	movs	r1, #0
 8014210:	4618      	mov	r0, r3
 8014212:	f000 fb99 	bl	8014948 <RCCEx_PLL2_Config>
 8014216:	4603      	mov	r3, r0
 8014218:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801421c:	e015      	b.n	801424a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801421e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014222:	3328      	adds	r3, #40	; 0x28
 8014224:	2102      	movs	r1, #2
 8014226:	4618      	mov	r0, r3
 8014228:	f000 fc40 	bl	8014aac <RCCEx_PLL3_Config>
 801422c:	4603      	mov	r3, r0
 801422e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8014232:	e00a      	b.n	801424a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014234:	2301      	movs	r3, #1
 8014236:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801423a:	e006      	b.n	801424a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 801423c:	bf00      	nop
 801423e:	e004      	b.n	801424a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8014240:	bf00      	nop
 8014242:	e002      	b.n	801424a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8014244:	bf00      	nop
 8014246:	e000      	b.n	801424a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8014248:	bf00      	nop
    }

    if (ret == HAL_OK)
 801424a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801424e:	2b00      	cmp	r3, #0
 8014250:	d10e      	bne.n	8014270 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8014252:	4b06      	ldr	r3, [pc, #24]	; (801426c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8014254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014256:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801425a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801425e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014262:	4a02      	ldr	r2, [pc, #8]	; (801426c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8014264:	430b      	orrs	r3, r1
 8014266:	6593      	str	r3, [r2, #88]	; 0x58
 8014268:	e006      	b.n	8014278 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 801426a:	bf00      	nop
 801426c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014270:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014274:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8014278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014280:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8014284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014288:	2300      	movs	r3, #0
 801428a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801428e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8014292:	460b      	mov	r3, r1
 8014294:	4313      	orrs	r3, r2
 8014296:	d055      	beq.n	8014344 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8014298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801429c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80142a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80142a4:	d033      	beq.n	801430e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80142a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80142aa:	d82c      	bhi.n	8014306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80142ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80142b0:	d02f      	beq.n	8014312 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80142b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80142b6:	d826      	bhi.n	8014306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80142b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80142bc:	d02b      	beq.n	8014316 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80142be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80142c2:	d820      	bhi.n	8014306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80142c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80142c8:	d012      	beq.n	80142f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80142ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80142ce:	d81a      	bhi.n	8014306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d022      	beq.n	801431a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80142d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80142d8:	d115      	bne.n	8014306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80142da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80142de:	3308      	adds	r3, #8
 80142e0:	2100      	movs	r1, #0
 80142e2:	4618      	mov	r0, r3
 80142e4:	f000 fb30 	bl	8014948 <RCCEx_PLL2_Config>
 80142e8:	4603      	mov	r3, r0
 80142ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80142ee:	e015      	b.n	801431c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80142f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80142f4:	3328      	adds	r3, #40	; 0x28
 80142f6:	2102      	movs	r1, #2
 80142f8:	4618      	mov	r0, r3
 80142fa:	f000 fbd7 	bl	8014aac <RCCEx_PLL3_Config>
 80142fe:	4603      	mov	r3, r0
 8014300:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8014304:	e00a      	b.n	801431c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014306:	2301      	movs	r3, #1
 8014308:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801430c:	e006      	b.n	801431c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 801430e:	bf00      	nop
 8014310:	e004      	b.n	801431c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8014312:	bf00      	nop
 8014314:	e002      	b.n	801431c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8014316:	bf00      	nop
 8014318:	e000      	b.n	801431c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 801431a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801431c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10b      	bne.n	801433c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8014324:	4ba1      	ldr	r3, [pc, #644]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014328:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 801432c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014330:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014334:	4a9d      	ldr	r2, [pc, #628]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014336:	430b      	orrs	r3, r1
 8014338:	6593      	str	r3, [r2, #88]	; 0x58
 801433a:	e003      	b.n	8014344 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801433c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014340:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8014344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434c:	f002 0308 	and.w	r3, r2, #8
 8014350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014354:	2300      	movs	r3, #0
 8014356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801435a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801435e:	460b      	mov	r3, r1
 8014360:	4313      	orrs	r3, r2
 8014362:	d01e      	beq.n	80143a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8014364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014370:	d10c      	bne.n	801438c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014376:	3328      	adds	r3, #40	; 0x28
 8014378:	2102      	movs	r1, #2
 801437a:	4618      	mov	r0, r3
 801437c:	f000 fb96 	bl	8014aac <RCCEx_PLL3_Config>
 8014380:	4603      	mov	r3, r0
 8014382:	2b00      	cmp	r3, #0
 8014384:	d002      	beq.n	801438c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8014386:	2301      	movs	r3, #1
 8014388:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801438c:	4b87      	ldr	r3, [pc, #540]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014390:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801439c:	4a83      	ldr	r2, [pc, #524]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801439e:	430b      	orrs	r3, r1
 80143a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80143a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80143a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143aa:	f002 0310 	and.w	r3, r2, #16
 80143ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80143b2:	2300      	movs	r3, #0
 80143b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80143b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80143bc:	460b      	mov	r3, r1
 80143be:	4313      	orrs	r3, r2
 80143c0:	d01e      	beq.n	8014400 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80143c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80143c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80143ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143ce:	d10c      	bne.n	80143ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80143d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80143d4:	3328      	adds	r3, #40	; 0x28
 80143d6:	2102      	movs	r1, #2
 80143d8:	4618      	mov	r0, r3
 80143da:	f000 fb67 	bl	8014aac <RCCEx_PLL3_Config>
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d002      	beq.n	80143ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80143e4:	2301      	movs	r3, #1
 80143e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80143ea:	4b70      	ldr	r3, [pc, #448]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80143ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80143f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80143f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80143fa:	4a6c      	ldr	r2, [pc, #432]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80143fc:	430b      	orrs	r3, r1
 80143fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8014400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014408:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801440c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014410:	2300      	movs	r3, #0
 8014412:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014416:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801441a:	460b      	mov	r3, r1
 801441c:	4313      	orrs	r3, r2
 801441e:	d03e      	beq.n	801449e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8014420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014424:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801442c:	d022      	beq.n	8014474 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 801442e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014432:	d81b      	bhi.n	801446c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8014434:	2b00      	cmp	r3, #0
 8014436:	d003      	beq.n	8014440 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8014438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801443c:	d00b      	beq.n	8014456 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 801443e:	e015      	b.n	801446c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014444:	3308      	adds	r3, #8
 8014446:	2100      	movs	r1, #0
 8014448:	4618      	mov	r0, r3
 801444a:	f000 fa7d 	bl	8014948 <RCCEx_PLL2_Config>
 801444e:	4603      	mov	r3, r0
 8014450:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8014454:	e00f      	b.n	8014476 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801445a:	3328      	adds	r3, #40	; 0x28
 801445c:	2102      	movs	r1, #2
 801445e:	4618      	mov	r0, r3
 8014460:	f000 fb24 	bl	8014aac <RCCEx_PLL3_Config>
 8014464:	4603      	mov	r3, r0
 8014466:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 801446a:	e004      	b.n	8014476 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801446c:	2301      	movs	r3, #1
 801446e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014472:	e000      	b.n	8014476 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8014474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014476:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801447a:	2b00      	cmp	r3, #0
 801447c:	d10b      	bne.n	8014496 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801447e:	4b4b      	ldr	r3, [pc, #300]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014482:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8014486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801448a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801448e:	4a47      	ldr	r2, [pc, #284]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014490:	430b      	orrs	r3, r1
 8014492:	6593      	str	r3, [r2, #88]	; 0x58
 8014494:	e003      	b.n	801449e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014496:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801449a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801449e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80144a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80144aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80144ac:	2300      	movs	r3, #0
 80144ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80144b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80144b4:	460b      	mov	r3, r1
 80144b6:	4313      	orrs	r3, r2
 80144b8:	d03b      	beq.n	8014532 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80144ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80144be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80144c6:	d01f      	beq.n	8014508 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80144c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80144cc:	d818      	bhi.n	8014500 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80144ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80144d2:	d003      	beq.n	80144dc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80144d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80144d8:	d007      	beq.n	80144ea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80144da:	e011      	b.n	8014500 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80144dc:	4b33      	ldr	r3, [pc, #204]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80144de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144e0:	4a32      	ldr	r2, [pc, #200]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80144e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80144e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80144e8:	e00f      	b.n	801450a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80144ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80144ee:	3328      	adds	r3, #40	; 0x28
 80144f0:	2101      	movs	r1, #1
 80144f2:	4618      	mov	r0, r3
 80144f4:	f000 fada 	bl	8014aac <RCCEx_PLL3_Config>
 80144f8:	4603      	mov	r3, r0
 80144fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80144fe:	e004      	b.n	801450a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014500:	2301      	movs	r3, #1
 8014502:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014506:	e000      	b.n	801450a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8014508:	bf00      	nop
    }

    if (ret == HAL_OK)
 801450a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801450e:	2b00      	cmp	r3, #0
 8014510:	d10b      	bne.n	801452a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014512:	4b26      	ldr	r3, [pc, #152]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014516:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801451a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014522:	4a22      	ldr	r2, [pc, #136]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014524:	430b      	orrs	r3, r1
 8014526:	6553      	str	r3, [r2, #84]	; 0x54
 8014528:	e003      	b.n	8014532 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801452a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801452e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8014532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801453e:	673b      	str	r3, [r7, #112]	; 0x70
 8014540:	2300      	movs	r3, #0
 8014542:	677b      	str	r3, [r7, #116]	; 0x74
 8014544:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8014548:	460b      	mov	r3, r1
 801454a:	4313      	orrs	r3, r2
 801454c:	d034      	beq.n	80145b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801454e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014554:	2b00      	cmp	r3, #0
 8014556:	d003      	beq.n	8014560 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8014558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801455c:	d007      	beq.n	801456e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 801455e:	e011      	b.n	8014584 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014560:	4b12      	ldr	r3, [pc, #72]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014564:	4a11      	ldr	r2, [pc, #68]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801456a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801456c:	e00e      	b.n	801458c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801456e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014572:	3308      	adds	r3, #8
 8014574:	2102      	movs	r1, #2
 8014576:	4618      	mov	r0, r3
 8014578:	f000 f9e6 	bl	8014948 <RCCEx_PLL2_Config>
 801457c:	4603      	mov	r3, r0
 801457e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8014582:	e003      	b.n	801458c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8014584:	2301      	movs	r3, #1
 8014586:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801458a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801458c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014590:	2b00      	cmp	r3, #0
 8014592:	d10d      	bne.n	80145b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8014594:	4b05      	ldr	r3, [pc, #20]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8014596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801459c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80145a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145a2:	4a02      	ldr	r2, [pc, #8]	; (80145ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80145a4:	430b      	orrs	r3, r1
 80145a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80145a8:	e006      	b.n	80145b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80145aa:	bf00      	nop
 80145ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80145b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80145b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80145b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80145bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80145c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80145c6:	2300      	movs	r3, #0
 80145c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80145ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80145ce:	460b      	mov	r3, r1
 80145d0:	4313      	orrs	r3, r2
 80145d2:	d00c      	beq.n	80145ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80145d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80145d8:	3328      	adds	r3, #40	; 0x28
 80145da:	2102      	movs	r1, #2
 80145dc:	4618      	mov	r0, r3
 80145de:	f000 fa65 	bl	8014aac <RCCEx_PLL3_Config>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d002      	beq.n	80145ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80145e8:	2301      	movs	r3, #1
 80145ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80145ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80145f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80145fa:	663b      	str	r3, [r7, #96]	; 0x60
 80145fc:	2300      	movs	r3, #0
 80145fe:	667b      	str	r3, [r7, #100]	; 0x64
 8014600:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8014604:	460b      	mov	r3, r1
 8014606:	4313      	orrs	r3, r2
 8014608:	d038      	beq.n	801467c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 801460a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014616:	d018      	beq.n	801464a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8014618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801461c:	d811      	bhi.n	8014642 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 801461e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014622:	d014      	beq.n	801464e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8014624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014628:	d80b      	bhi.n	8014642 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 801462a:	2b00      	cmp	r3, #0
 801462c:	d011      	beq.n	8014652 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 801462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014632:	d106      	bne.n	8014642 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014634:	4bc3      	ldr	r3, [pc, #780]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014638:	4ac2      	ldr	r2, [pc, #776]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801463a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801463e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8014640:	e008      	b.n	8014654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014642:	2301      	movs	r3, #1
 8014644:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8014648:	e004      	b.n	8014654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 801464a:	bf00      	nop
 801464c:	e002      	b.n	8014654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 801464e:	bf00      	nop
 8014650:	e000      	b.n	8014654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8014652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014654:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014658:	2b00      	cmp	r3, #0
 801465a:	d10b      	bne.n	8014674 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801465c:	4bb9      	ldr	r3, [pc, #740]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014660:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8014664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801466c:	4ab5      	ldr	r2, [pc, #724]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801466e:	430b      	orrs	r3, r1
 8014670:	6553      	str	r3, [r2, #84]	; 0x54
 8014672:	e003      	b.n	801467c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014674:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014678:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801467c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014684:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8014688:	65bb      	str	r3, [r7, #88]	; 0x58
 801468a:	2300      	movs	r3, #0
 801468c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801468e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8014692:	460b      	mov	r3, r1
 8014694:	4313      	orrs	r3, r2
 8014696:	d009      	beq.n	80146ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8014698:	4baa      	ldr	r3, [pc, #680]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801469c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80146a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80146a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80146a6:	4aa7      	ldr	r2, [pc, #668]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80146a8:	430b      	orrs	r3, r1
 80146aa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80146ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80146b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80146b8:	653b      	str	r3, [r7, #80]	; 0x50
 80146ba:	2300      	movs	r3, #0
 80146bc:	657b      	str	r3, [r7, #84]	; 0x54
 80146be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80146c2:	460b      	mov	r3, r1
 80146c4:	4313      	orrs	r3, r2
 80146c6:	d009      	beq.n	80146dc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80146c8:	4b9e      	ldr	r3, [pc, #632]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80146ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146cc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80146d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80146d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146d6:	4a9b      	ldr	r2, [pc, #620]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80146d8:	430b      	orrs	r3, r1
 80146da:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80146dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80146e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80146e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80146ea:	2300      	movs	r3, #0
 80146ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80146ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80146f2:	460b      	mov	r3, r1
 80146f4:	4313      	orrs	r3, r2
 80146f6:	d009      	beq.n	801470c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80146f8:	4b92      	ldr	r3, [pc, #584]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80146fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146fc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8014700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014706:	4a8f      	ldr	r2, [pc, #572]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014708:	430b      	orrs	r3, r1
 801470a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801470c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014714:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8014718:	643b      	str	r3, [r7, #64]	; 0x40
 801471a:	2300      	movs	r3, #0
 801471c:	647b      	str	r3, [r7, #68]	; 0x44
 801471e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8014722:	460b      	mov	r3, r1
 8014724:	4313      	orrs	r3, r2
 8014726:	d00e      	beq.n	8014746 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8014728:	4b86      	ldr	r3, [pc, #536]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801472a:	691b      	ldr	r3, [r3, #16]
 801472c:	4a85      	ldr	r2, [pc, #532]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801472e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014732:	6113      	str	r3, [r2, #16]
 8014734:	4b83      	ldr	r3, [pc, #524]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014736:	6919      	ldr	r1, [r3, #16]
 8014738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801473c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014740:	4a80      	ldr	r2, [pc, #512]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014742:	430b      	orrs	r3, r1
 8014744:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8014746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8014752:	63bb      	str	r3, [r7, #56]	; 0x38
 8014754:	2300      	movs	r3, #0
 8014756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014758:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801475c:	460b      	mov	r3, r1
 801475e:	4313      	orrs	r3, r2
 8014760:	d009      	beq.n	8014776 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8014762:	4b78      	ldr	r3, [pc, #480]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014766:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801476a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801476e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014770:	4a74      	ldr	r2, [pc, #464]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014772:	430b      	orrs	r3, r1
 8014774:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8014776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801477e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8014782:	633b      	str	r3, [r7, #48]	; 0x30
 8014784:	2300      	movs	r3, #0
 8014786:	637b      	str	r3, [r7, #52]	; 0x34
 8014788:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801478c:	460b      	mov	r3, r1
 801478e:	4313      	orrs	r3, r2
 8014790:	d00a      	beq.n	80147a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8014792:	4b6c      	ldr	r3, [pc, #432]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8014794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014796:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801479a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801479e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80147a2:	4a68      	ldr	r2, [pc, #416]	; (8014944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80147a4:	430b      	orrs	r3, r1
 80147a6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80147a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b0:	2100      	movs	r1, #0
 80147b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80147b4:	f003 0301 	and.w	r3, r3, #1
 80147b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80147be:	460b      	mov	r3, r1
 80147c0:	4313      	orrs	r3, r2
 80147c2:	d011      	beq.n	80147e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80147c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147c8:	3308      	adds	r3, #8
 80147ca:	2100      	movs	r1, #0
 80147cc:	4618      	mov	r0, r3
 80147ce:	f000 f8bb 	bl	8014948 <RCCEx_PLL2_Config>
 80147d2:	4603      	mov	r3, r0
 80147d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80147d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d003      	beq.n	80147e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80147e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80147e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80147e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f0:	2100      	movs	r1, #0
 80147f2:	6239      	str	r1, [r7, #32]
 80147f4:	f003 0302 	and.w	r3, r3, #2
 80147f8:	627b      	str	r3, [r7, #36]	; 0x24
 80147fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80147fe:	460b      	mov	r3, r1
 8014800:	4313      	orrs	r3, r2
 8014802:	d011      	beq.n	8014828 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014808:	3308      	adds	r3, #8
 801480a:	2101      	movs	r1, #1
 801480c:	4618      	mov	r0, r3
 801480e:	f000 f89b 	bl	8014948 <RCCEx_PLL2_Config>
 8014812:	4603      	mov	r3, r0
 8014814:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014818:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801481c:	2b00      	cmp	r3, #0
 801481e:	d003      	beq.n	8014828 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014820:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014824:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8014828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014830:	2100      	movs	r1, #0
 8014832:	61b9      	str	r1, [r7, #24]
 8014834:	f003 0304 	and.w	r3, r3, #4
 8014838:	61fb      	str	r3, [r7, #28]
 801483a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801483e:	460b      	mov	r3, r1
 8014840:	4313      	orrs	r3, r2
 8014842:	d011      	beq.n	8014868 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014848:	3308      	adds	r3, #8
 801484a:	2102      	movs	r1, #2
 801484c:	4618      	mov	r0, r3
 801484e:	f000 f87b 	bl	8014948 <RCCEx_PLL2_Config>
 8014852:	4603      	mov	r3, r0
 8014854:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801485c:	2b00      	cmp	r3, #0
 801485e:	d003      	beq.n	8014868 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014860:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014864:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8014868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014870:	2100      	movs	r1, #0
 8014872:	6139      	str	r1, [r7, #16]
 8014874:	f003 0308 	and.w	r3, r3, #8
 8014878:	617b      	str	r3, [r7, #20]
 801487a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801487e:	460b      	mov	r3, r1
 8014880:	4313      	orrs	r3, r2
 8014882:	d011      	beq.n	80148a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014888:	3328      	adds	r3, #40	; 0x28
 801488a:	2100      	movs	r1, #0
 801488c:	4618      	mov	r0, r3
 801488e:	f000 f90d 	bl	8014aac <RCCEx_PLL3_Config>
 8014892:	4603      	mov	r3, r0
 8014894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8014898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801489c:	2b00      	cmp	r3, #0
 801489e:	d003      	beq.n	80148a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80148a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80148a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80148a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80148ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b0:	2100      	movs	r1, #0
 80148b2:	60b9      	str	r1, [r7, #8]
 80148b4:	f003 0310 	and.w	r3, r3, #16
 80148b8:	60fb      	str	r3, [r7, #12]
 80148ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80148be:	460b      	mov	r3, r1
 80148c0:	4313      	orrs	r3, r2
 80148c2:	d011      	beq.n	80148e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80148c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80148c8:	3328      	adds	r3, #40	; 0x28
 80148ca:	2101      	movs	r1, #1
 80148cc:	4618      	mov	r0, r3
 80148ce:	f000 f8ed 	bl	8014aac <RCCEx_PLL3_Config>
 80148d2:	4603      	mov	r3, r0
 80148d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80148d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d003      	beq.n	80148e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80148e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80148e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80148e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80148ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f0:	2100      	movs	r1, #0
 80148f2:	6039      	str	r1, [r7, #0]
 80148f4:	f003 0320 	and.w	r3, r3, #32
 80148f8:	607b      	str	r3, [r7, #4]
 80148fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80148fe:	460b      	mov	r3, r1
 8014900:	4313      	orrs	r3, r2
 8014902:	d011      	beq.n	8014928 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014908:	3328      	adds	r3, #40	; 0x28
 801490a:	2102      	movs	r1, #2
 801490c:	4618      	mov	r0, r3
 801490e:	f000 f8cd 	bl	8014aac <RCCEx_PLL3_Config>
 8014912:	4603      	mov	r3, r0
 8014914:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8014918:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801491c:	2b00      	cmp	r3, #0
 801491e:	d003      	beq.n	8014928 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014920:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014924:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8014928:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 801492c:	2b00      	cmp	r3, #0
 801492e:	d101      	bne.n	8014934 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8014930:	2300      	movs	r3, #0
 8014932:	e000      	b.n	8014936 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8014934:	2301      	movs	r3, #1
}
 8014936:	4618      	mov	r0, r3
 8014938:	f507 7790 	add.w	r7, r7, #288	; 0x120
 801493c:	46bd      	mov	sp, r7
 801493e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014942:	bf00      	nop
 8014944:	58024400 	.word	0x58024400

08014948 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b084      	sub	sp, #16
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014952:	2300      	movs	r3, #0
 8014954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014956:	4b53      	ldr	r3, [pc, #332]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801495a:	f003 0303 	and.w	r3, r3, #3
 801495e:	2b03      	cmp	r3, #3
 8014960:	d101      	bne.n	8014966 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8014962:	2301      	movs	r3, #1
 8014964:	e099      	b.n	8014a9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8014966:	4b4f      	ldr	r3, [pc, #316]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	4a4e      	ldr	r2, [pc, #312]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 801496c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014972:	f7f8 f917 	bl	800cba4 <HAL_GetTick>
 8014976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014978:	e008      	b.n	801498c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801497a:	f7f8 f913 	bl	800cba4 <HAL_GetTick>
 801497e:	4602      	mov	r2, r0
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	1ad3      	subs	r3, r2, r3
 8014984:	2b02      	cmp	r3, #2
 8014986:	d901      	bls.n	801498c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014988:	2303      	movs	r3, #3
 801498a:	e086      	b.n	8014a9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801498c:	4b45      	ldr	r3, [pc, #276]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014994:	2b00      	cmp	r3, #0
 8014996:	d1f0      	bne.n	801497a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014998:	4b42      	ldr	r3, [pc, #264]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 801499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801499c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	031b      	lsls	r3, r3, #12
 80149a6:	493f      	ldr	r1, [pc, #252]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 80149a8:	4313      	orrs	r3, r2
 80149aa:	628b      	str	r3, [r1, #40]	; 0x28
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	3b01      	subs	r3, #1
 80149b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	689b      	ldr	r3, [r3, #8]
 80149ba:	3b01      	subs	r3, #1
 80149bc:	025b      	lsls	r3, r3, #9
 80149be:	b29b      	uxth	r3, r3
 80149c0:	431a      	orrs	r2, r3
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	68db      	ldr	r3, [r3, #12]
 80149c6:	3b01      	subs	r3, #1
 80149c8:	041b      	lsls	r3, r3, #16
 80149ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80149ce:	431a      	orrs	r2, r3
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	691b      	ldr	r3, [r3, #16]
 80149d4:	3b01      	subs	r3, #1
 80149d6:	061b      	lsls	r3, r3, #24
 80149d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80149dc:	4931      	ldr	r1, [pc, #196]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 80149de:	4313      	orrs	r3, r2
 80149e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80149e2:	4b30      	ldr	r3, [pc, #192]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 80149e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	695b      	ldr	r3, [r3, #20]
 80149ee:	492d      	ldr	r1, [pc, #180]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 80149f0:	4313      	orrs	r3, r2
 80149f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80149f4:	4b2b      	ldr	r3, [pc, #172]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 80149f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149f8:	f023 0220 	bic.w	r2, r3, #32
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	699b      	ldr	r3, [r3, #24]
 8014a00:	4928      	ldr	r1, [pc, #160]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a02:	4313      	orrs	r3, r2
 8014a04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8014a06:	4b27      	ldr	r3, [pc, #156]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a0a:	4a26      	ldr	r2, [pc, #152]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a0c:	f023 0310 	bic.w	r3, r3, #16
 8014a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014a12:	4b24      	ldr	r3, [pc, #144]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014a16:	4b24      	ldr	r3, [pc, #144]	; (8014aa8 <RCCEx_PLL2_Config+0x160>)
 8014a18:	4013      	ands	r3, r2
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	69d2      	ldr	r2, [r2, #28]
 8014a1e:	00d2      	lsls	r2, r2, #3
 8014a20:	4920      	ldr	r1, [pc, #128]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a22:	4313      	orrs	r3, r2
 8014a24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8014a26:	4b1f      	ldr	r3, [pc, #124]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a2a:	4a1e      	ldr	r2, [pc, #120]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a2c:	f043 0310 	orr.w	r3, r3, #16
 8014a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d106      	bne.n	8014a46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8014a38:	4b1a      	ldr	r3, [pc, #104]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a3c:	4a19      	ldr	r2, [pc, #100]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014a44:	e00f      	b.n	8014a66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d106      	bne.n	8014a5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014a4c:	4b15      	ldr	r3, [pc, #84]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a50:	4a14      	ldr	r2, [pc, #80]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014a58:	e005      	b.n	8014a66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8014a5a:	4b12      	ldr	r3, [pc, #72]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a5e:	4a11      	ldr	r2, [pc, #68]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014a64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8014a66:	4b0f      	ldr	r3, [pc, #60]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	4a0e      	ldr	r2, [pc, #56]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014a72:	f7f8 f897 	bl	800cba4 <HAL_GetTick>
 8014a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014a78:	e008      	b.n	8014a8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014a7a:	f7f8 f893 	bl	800cba4 <HAL_GetTick>
 8014a7e:	4602      	mov	r2, r0
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	1ad3      	subs	r3, r2, r3
 8014a84:	2b02      	cmp	r3, #2
 8014a86:	d901      	bls.n	8014a8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014a88:	2303      	movs	r3, #3
 8014a8a:	e006      	b.n	8014a9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014a8c:	4b05      	ldr	r3, [pc, #20]	; (8014aa4 <RCCEx_PLL2_Config+0x15c>)
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d0f0      	beq.n	8014a7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	3710      	adds	r7, #16
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}
 8014aa2:	bf00      	nop
 8014aa4:	58024400 	.word	0x58024400
 8014aa8:	ffff0007 	.word	0xffff0007

08014aac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b084      	sub	sp, #16
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014aba:	4b53      	ldr	r3, [pc, #332]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014abe:	f003 0303 	and.w	r3, r3, #3
 8014ac2:	2b03      	cmp	r3, #3
 8014ac4:	d101      	bne.n	8014aca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	e099      	b.n	8014bfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014aca:	4b4f      	ldr	r3, [pc, #316]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	4a4e      	ldr	r2, [pc, #312]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014ad6:	f7f8 f865 	bl	800cba4 <HAL_GetTick>
 8014ada:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014adc:	e008      	b.n	8014af0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014ade:	f7f8 f861 	bl	800cba4 <HAL_GetTick>
 8014ae2:	4602      	mov	r2, r0
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	1ad3      	subs	r3, r2, r3
 8014ae8:	2b02      	cmp	r3, #2
 8014aea:	d901      	bls.n	8014af0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014aec:	2303      	movs	r3, #3
 8014aee:	e086      	b.n	8014bfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014af0:	4b45      	ldr	r3, [pc, #276]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d1f0      	bne.n	8014ade <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014afc:	4b42      	ldr	r3, [pc, #264]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	051b      	lsls	r3, r3, #20
 8014b0a:	493f      	ldr	r1, [pc, #252]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b0c:	4313      	orrs	r3, r2
 8014b0e:	628b      	str	r3, [r1, #40]	; 0x28
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	685b      	ldr	r3, [r3, #4]
 8014b14:	3b01      	subs	r3, #1
 8014b16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	689b      	ldr	r3, [r3, #8]
 8014b1e:	3b01      	subs	r3, #1
 8014b20:	025b      	lsls	r3, r3, #9
 8014b22:	b29b      	uxth	r3, r3
 8014b24:	431a      	orrs	r2, r3
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	68db      	ldr	r3, [r3, #12]
 8014b2a:	3b01      	subs	r3, #1
 8014b2c:	041b      	lsls	r3, r3, #16
 8014b2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014b32:	431a      	orrs	r2, r3
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	691b      	ldr	r3, [r3, #16]
 8014b38:	3b01      	subs	r3, #1
 8014b3a:	061b      	lsls	r3, r3, #24
 8014b3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014b40:	4931      	ldr	r1, [pc, #196]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b42:	4313      	orrs	r3, r2
 8014b44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8014b46:	4b30      	ldr	r3, [pc, #192]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	695b      	ldr	r3, [r3, #20]
 8014b52:	492d      	ldr	r1, [pc, #180]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b54:	4313      	orrs	r3, r2
 8014b56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8014b58:	4b2b      	ldr	r3, [pc, #172]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	699b      	ldr	r3, [r3, #24]
 8014b64:	4928      	ldr	r1, [pc, #160]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b66:	4313      	orrs	r3, r2
 8014b68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8014b6a:	4b27      	ldr	r3, [pc, #156]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b6e:	4a26      	ldr	r2, [pc, #152]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8014b76:	4b24      	ldr	r3, [pc, #144]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b7a:	4b24      	ldr	r3, [pc, #144]	; (8014c0c <RCCEx_PLL3_Config+0x160>)
 8014b7c:	4013      	ands	r3, r2
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	69d2      	ldr	r2, [r2, #28]
 8014b82:	00d2      	lsls	r2, r2, #3
 8014b84:	4920      	ldr	r1, [pc, #128]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b86:	4313      	orrs	r3, r2
 8014b88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8014b8a:	4b1f      	ldr	r3, [pc, #124]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b8e:	4a1e      	ldr	r2, [pc, #120]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d106      	bne.n	8014baa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014b9c:	4b1a      	ldr	r3, [pc, #104]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ba0:	4a19      	ldr	r2, [pc, #100]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014ba2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8014ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014ba8:	e00f      	b.n	8014bca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d106      	bne.n	8014bbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014bb0:	4b15      	ldr	r3, [pc, #84]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bb4:	4a14      	ldr	r2, [pc, #80]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014bb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014bba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014bbc:	e005      	b.n	8014bca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014bbe:	4b12      	ldr	r3, [pc, #72]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bc2:	4a11      	ldr	r2, [pc, #68]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014bc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014bca:	4b0f      	ldr	r3, [pc, #60]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	4a0e      	ldr	r2, [pc, #56]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014bd6:	f7f7 ffe5 	bl	800cba4 <HAL_GetTick>
 8014bda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014bdc:	e008      	b.n	8014bf0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014bde:	f7f7 ffe1 	bl	800cba4 <HAL_GetTick>
 8014be2:	4602      	mov	r2, r0
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	1ad3      	subs	r3, r2, r3
 8014be8:	2b02      	cmp	r3, #2
 8014bea:	d901      	bls.n	8014bf0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014bec:	2303      	movs	r3, #3
 8014bee:	e006      	b.n	8014bfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014bf0:	4b05      	ldr	r3, [pc, #20]	; (8014c08 <RCCEx_PLL3_Config+0x15c>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d0f0      	beq.n	8014bde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3710      	adds	r7, #16
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	58024400 	.word	0x58024400
 8014c0c:	ffff0007 	.word	0xffff0007

08014c10 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d101      	bne.n	8014c24 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8014c20:	2301      	movs	r3, #1
 8014c22:	e02b      	b.n	8014c7c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014c2a:	b2db      	uxtb	r3, r3
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d106      	bne.n	8014c3e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2200      	movs	r2, #0
 8014c34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f7f2 fe3f 	bl	80078bc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2202      	movs	r2, #2
 8014c42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	681a      	ldr	r2, [r3, #0]
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	3304      	adds	r3, #4
 8014c4e:	4619      	mov	r1, r3
 8014c50:	4610      	mov	r0, r2
 8014c52:	f000 fb4f 	bl	80152f4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	6818      	ldr	r0, [r3, #0]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	461a      	mov	r2, r3
 8014c60:	6839      	ldr	r1, [r7, #0]
 8014c62:	f000 fba3 	bl	80153ac <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8014c66:	4b07      	ldr	r3, [pc, #28]	; (8014c84 <HAL_SDRAM_Init+0x74>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	4a06      	ldr	r2, [pc, #24]	; (8014c84 <HAL_SDRAM_Init+0x74>)
 8014c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014c70:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	2201      	movs	r2, #1
 8014c76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8014c7a:	2300      	movs	r3, #0
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3708      	adds	r7, #8
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}
 8014c84:	52004000 	.word	0x52004000

08014c88 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b086      	sub	sp, #24
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	60f8      	str	r0, [r7, #12]
 8014c90:	60b9      	str	r1, [r7, #8]
 8014c92:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014c9a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8014c9c:	7dfb      	ldrb	r3, [r7, #23]
 8014c9e:	2b02      	cmp	r3, #2
 8014ca0:	d101      	bne.n	8014ca6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8014ca2:	2302      	movs	r3, #2
 8014ca4:	e021      	b.n	8014cea <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8014ca6:	7dfb      	ldrb	r3, [r7, #23]
 8014ca8:	2b01      	cmp	r3, #1
 8014caa:	d002      	beq.n	8014cb2 <HAL_SDRAM_SendCommand+0x2a>
 8014cac:	7dfb      	ldrb	r3, [r7, #23]
 8014cae:	2b05      	cmp	r3, #5
 8014cb0:	d118      	bne.n	8014ce4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	2202      	movs	r2, #2
 8014cb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	68b9      	ldr	r1, [r7, #8]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f000 fbdc 	bl	8015480 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	2b02      	cmp	r3, #2
 8014cce:	d104      	bne.n	8014cda <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	2205      	movs	r2, #5
 8014cd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8014cd8:	e006      	b.n	8014ce8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2201      	movs	r2, #1
 8014cde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8014ce2:	e001      	b.n	8014ce8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8014ce4:	2301      	movs	r3, #1
 8014ce6:	e000      	b.n	8014cea <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8014ce8:	2300      	movs	r3, #0
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	3718      	adds	r7, #24
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}

08014cf2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8014cf2:	b580      	push	{r7, lr}
 8014cf4:	b082      	sub	sp, #8
 8014cf6:	af00      	add	r7, sp, #0
 8014cf8:	6078      	str	r0, [r7, #4]
 8014cfa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014d02:	b2db      	uxtb	r3, r3
 8014d04:	2b02      	cmp	r3, #2
 8014d06:	d101      	bne.n	8014d0c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8014d08:	2302      	movs	r3, #2
 8014d0a:	e016      	b.n	8014d3a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	2b01      	cmp	r3, #1
 8014d16:	d10f      	bne.n	8014d38 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2202      	movs	r2, #2
 8014d1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	6839      	ldr	r1, [r7, #0]
 8014d26:	4618      	mov	r0, r3
 8014d28:	f000 fbce 	bl	80154c8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2201      	movs	r2, #1
 8014d30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8014d34:	2300      	movs	r3, #0
 8014d36:	e000      	b.n	8014d3a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8014d38:	2301      	movs	r3, #1
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3708      	adds	r7, #8
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}

08014d42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b082      	sub	sp, #8
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d101      	bne.n	8014d54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014d50:	2301      	movs	r3, #1
 8014d52:	e049      	b.n	8014de8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d106      	bne.n	8014d6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2200      	movs	r2, #0
 8014d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f000 f841 	bl	8014df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2202      	movs	r2, #2
 8014d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	3304      	adds	r3, #4
 8014d7e:	4619      	mov	r1, r3
 8014d80:	4610      	mov	r0, r2
 8014d82:	f000 f9ff 	bl	8015184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2201      	movs	r2, #1
 8014d8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2201      	movs	r2, #1
 8014d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2201      	movs	r2, #1
 8014d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2201      	movs	r2, #1
 8014da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2201      	movs	r2, #1
 8014daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	2201      	movs	r2, #1
 8014db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	2201      	movs	r2, #1
 8014dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2201      	movs	r2, #1
 8014dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2201      	movs	r2, #1
 8014dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	2201      	movs	r2, #1
 8014dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2201      	movs	r2, #1
 8014dda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	2201      	movs	r2, #1
 8014de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014de6:	2300      	movs	r3, #0
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3708      	adds	r7, #8
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8014df0:	b480      	push	{r7}
 8014df2:	b083      	sub	sp, #12
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8014df8:	bf00      	nop
 8014dfa:	370c      	adds	r7, #12
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr

08014e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b085      	sub	sp, #20
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e12:	b2db      	uxtb	r3, r3
 8014e14:	2b01      	cmp	r3, #1
 8014e16:	d001      	beq.n	8014e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014e18:	2301      	movs	r3, #1
 8014e1a:	e054      	b.n	8014ec6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2202      	movs	r2, #2
 8014e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	68da      	ldr	r2, [r3, #12]
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	f042 0201 	orr.w	r2, r2, #1
 8014e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	4a26      	ldr	r2, [pc, #152]	; (8014ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8014e3a:	4293      	cmp	r3, r2
 8014e3c:	d022      	beq.n	8014e84 <HAL_TIM_Base_Start_IT+0x80>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e46:	d01d      	beq.n	8014e84 <HAL_TIM_Base_Start_IT+0x80>
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	4a22      	ldr	r2, [pc, #136]	; (8014ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8014e4e:	4293      	cmp	r3, r2
 8014e50:	d018      	beq.n	8014e84 <HAL_TIM_Base_Start_IT+0x80>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	4a21      	ldr	r2, [pc, #132]	; (8014edc <HAL_TIM_Base_Start_IT+0xd8>)
 8014e58:	4293      	cmp	r3, r2
 8014e5a:	d013      	beq.n	8014e84 <HAL_TIM_Base_Start_IT+0x80>
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	4a1f      	ldr	r2, [pc, #124]	; (8014ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8014e62:	4293      	cmp	r3, r2
 8014e64:	d00e      	beq.n	8014e84 <HAL_TIM_Base_Start_IT+0x80>
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	4a1e      	ldr	r2, [pc, #120]	; (8014ee4 <HAL_TIM_Base_Start_IT+0xe0>)
 8014e6c:	4293      	cmp	r3, r2
 8014e6e:	d009      	beq.n	8014e84 <HAL_TIM_Base_Start_IT+0x80>
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	4a1c      	ldr	r2, [pc, #112]	; (8014ee8 <HAL_TIM_Base_Start_IT+0xe4>)
 8014e76:	4293      	cmp	r3, r2
 8014e78:	d004      	beq.n	8014e84 <HAL_TIM_Base_Start_IT+0x80>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	4a1b      	ldr	r2, [pc, #108]	; (8014eec <HAL_TIM_Base_Start_IT+0xe8>)
 8014e80:	4293      	cmp	r3, r2
 8014e82:	d115      	bne.n	8014eb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	689a      	ldr	r2, [r3, #8]
 8014e8a:	4b19      	ldr	r3, [pc, #100]	; (8014ef0 <HAL_TIM_Base_Start_IT+0xec>)
 8014e8c:	4013      	ands	r3, r2
 8014e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	2b06      	cmp	r3, #6
 8014e94:	d015      	beq.n	8014ec2 <HAL_TIM_Base_Start_IT+0xbe>
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e9c:	d011      	beq.n	8014ec2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	681a      	ldr	r2, [r3, #0]
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	f042 0201 	orr.w	r2, r2, #1
 8014eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014eae:	e008      	b.n	8014ec2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	681a      	ldr	r2, [r3, #0]
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	f042 0201 	orr.w	r2, r2, #1
 8014ebe:	601a      	str	r2, [r3, #0]
 8014ec0:	e000      	b.n	8014ec4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014ec4:	2300      	movs	r3, #0
}
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	3714      	adds	r7, #20
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed0:	4770      	bx	lr
 8014ed2:	bf00      	nop
 8014ed4:	40010000 	.word	0x40010000
 8014ed8:	40000400 	.word	0x40000400
 8014edc:	40000800 	.word	0x40000800
 8014ee0:	40000c00 	.word	0x40000c00
 8014ee4:	40010400 	.word	0x40010400
 8014ee8:	40001800 	.word	0x40001800
 8014eec:	40014000 	.word	0x40014000
 8014ef0:	00010007 	.word	0x00010007

08014ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	691b      	ldr	r3, [r3, #16]
 8014f02:	f003 0302 	and.w	r3, r3, #2
 8014f06:	2b02      	cmp	r3, #2
 8014f08:	d122      	bne.n	8014f50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	68db      	ldr	r3, [r3, #12]
 8014f10:	f003 0302 	and.w	r3, r3, #2
 8014f14:	2b02      	cmp	r3, #2
 8014f16:	d11b      	bne.n	8014f50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	f06f 0202 	mvn.w	r2, #2
 8014f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	2201      	movs	r2, #1
 8014f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	699b      	ldr	r3, [r3, #24]
 8014f2e:	f003 0303 	and.w	r3, r3, #3
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d003      	beq.n	8014f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f000 f905 	bl	8015146 <HAL_TIM_IC_CaptureCallback>
 8014f3c:	e005      	b.n	8014f4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	f000 f8f7 	bl	8015132 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f000 f908 	bl	801515a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	691b      	ldr	r3, [r3, #16]
 8014f56:	f003 0304 	and.w	r3, r3, #4
 8014f5a:	2b04      	cmp	r3, #4
 8014f5c:	d122      	bne.n	8014fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	68db      	ldr	r3, [r3, #12]
 8014f64:	f003 0304 	and.w	r3, r3, #4
 8014f68:	2b04      	cmp	r3, #4
 8014f6a:	d11b      	bne.n	8014fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	f06f 0204 	mvn.w	r2, #4
 8014f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2202      	movs	r2, #2
 8014f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	699b      	ldr	r3, [r3, #24]
 8014f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d003      	beq.n	8014f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f000 f8db 	bl	8015146 <HAL_TIM_IC_CaptureCallback>
 8014f90:	e005      	b.n	8014f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014f92:	6878      	ldr	r0, [r7, #4]
 8014f94:	f000 f8cd 	bl	8015132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f000 f8de 	bl	801515a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	691b      	ldr	r3, [r3, #16]
 8014faa:	f003 0308 	and.w	r3, r3, #8
 8014fae:	2b08      	cmp	r3, #8
 8014fb0:	d122      	bne.n	8014ff8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	68db      	ldr	r3, [r3, #12]
 8014fb8:	f003 0308 	and.w	r3, r3, #8
 8014fbc:	2b08      	cmp	r3, #8
 8014fbe:	d11b      	bne.n	8014ff8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	f06f 0208 	mvn.w	r2, #8
 8014fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2204      	movs	r2, #4
 8014fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	69db      	ldr	r3, [r3, #28]
 8014fd6:	f003 0303 	and.w	r3, r3, #3
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d003      	beq.n	8014fe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f000 f8b1 	bl	8015146 <HAL_TIM_IC_CaptureCallback>
 8014fe4:	e005      	b.n	8014ff2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f000 f8a3 	bl	8015132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f000 f8b4 	bl	801515a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	691b      	ldr	r3, [r3, #16]
 8014ffe:	f003 0310 	and.w	r3, r3, #16
 8015002:	2b10      	cmp	r3, #16
 8015004:	d122      	bne.n	801504c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	68db      	ldr	r3, [r3, #12]
 801500c:	f003 0310 	and.w	r3, r3, #16
 8015010:	2b10      	cmp	r3, #16
 8015012:	d11b      	bne.n	801504c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	f06f 0210 	mvn.w	r2, #16
 801501c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	2208      	movs	r2, #8
 8015022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	69db      	ldr	r3, [r3, #28]
 801502a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801502e:	2b00      	cmp	r3, #0
 8015030:	d003      	beq.n	801503a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f000 f887 	bl	8015146 <HAL_TIM_IC_CaptureCallback>
 8015038:	e005      	b.n	8015046 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801503a:	6878      	ldr	r0, [r7, #4]
 801503c:	f000 f879 	bl	8015132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	f000 f88a 	bl	801515a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2200      	movs	r2, #0
 801504a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	691b      	ldr	r3, [r3, #16]
 8015052:	f003 0301 	and.w	r3, r3, #1
 8015056:	2b01      	cmp	r3, #1
 8015058:	d10e      	bne.n	8015078 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	68db      	ldr	r3, [r3, #12]
 8015060:	f003 0301 	and.w	r3, r3, #1
 8015064:	2b01      	cmp	r3, #1
 8015066:	d107      	bne.n	8015078 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	f06f 0201 	mvn.w	r2, #1
 8015070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f7f2 f83e 	bl	80070f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	691b      	ldr	r3, [r3, #16]
 801507e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015082:	2b80      	cmp	r3, #128	; 0x80
 8015084:	d10e      	bne.n	80150a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	68db      	ldr	r3, [r3, #12]
 801508c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015090:	2b80      	cmp	r3, #128	; 0x80
 8015092:	d107      	bne.n	80150a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801509c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801509e:	6878      	ldr	r0, [r7, #4]
 80150a0:	f000 f914 	bl	80152cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	691b      	ldr	r3, [r3, #16]
 80150aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80150ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80150b2:	d10e      	bne.n	80150d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	68db      	ldr	r3, [r3, #12]
 80150ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80150be:	2b80      	cmp	r3, #128	; 0x80
 80150c0:	d107      	bne.n	80150d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80150ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f000 f907 	bl	80152e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	691b      	ldr	r3, [r3, #16]
 80150d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80150dc:	2b40      	cmp	r3, #64	; 0x40
 80150de:	d10e      	bne.n	80150fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	68db      	ldr	r3, [r3, #12]
 80150e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80150ea:	2b40      	cmp	r3, #64	; 0x40
 80150ec:	d107      	bne.n	80150fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80150f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f000 f838 	bl	801516e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	691b      	ldr	r3, [r3, #16]
 8015104:	f003 0320 	and.w	r3, r3, #32
 8015108:	2b20      	cmp	r3, #32
 801510a:	d10e      	bne.n	801512a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	68db      	ldr	r3, [r3, #12]
 8015112:	f003 0320 	and.w	r3, r3, #32
 8015116:	2b20      	cmp	r3, #32
 8015118:	d107      	bne.n	801512a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	f06f 0220 	mvn.w	r2, #32
 8015122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f000 f8c7 	bl	80152b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801512a:	bf00      	nop
 801512c:	3708      	adds	r7, #8
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}

08015132 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015132:	b480      	push	{r7}
 8015134:	b083      	sub	sp, #12
 8015136:	af00      	add	r7, sp, #0
 8015138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801513a:	bf00      	nop
 801513c:	370c      	adds	r7, #12
 801513e:	46bd      	mov	sp, r7
 8015140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015144:	4770      	bx	lr

08015146 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015146:	b480      	push	{r7}
 8015148:	b083      	sub	sp, #12
 801514a:	af00      	add	r7, sp, #0
 801514c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801514e:	bf00      	nop
 8015150:	370c      	adds	r7, #12
 8015152:	46bd      	mov	sp, r7
 8015154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015158:	4770      	bx	lr

0801515a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801515a:	b480      	push	{r7}
 801515c:	b083      	sub	sp, #12
 801515e:	af00      	add	r7, sp, #0
 8015160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015162:	bf00      	nop
 8015164:	370c      	adds	r7, #12
 8015166:	46bd      	mov	sp, r7
 8015168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516c:	4770      	bx	lr

0801516e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801516e:	b480      	push	{r7}
 8015170:	b083      	sub	sp, #12
 8015172:	af00      	add	r7, sp, #0
 8015174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015176:	bf00      	nop
 8015178:	370c      	adds	r7, #12
 801517a:	46bd      	mov	sp, r7
 801517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015180:	4770      	bx	lr
	...

08015184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015184:	b480      	push	{r7}
 8015186:	b085      	sub	sp, #20
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	4a40      	ldr	r2, [pc, #256]	; (8015298 <TIM_Base_SetConfig+0x114>)
 8015198:	4293      	cmp	r3, r2
 801519a:	d013      	beq.n	80151c4 <TIM_Base_SetConfig+0x40>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80151a2:	d00f      	beq.n	80151c4 <TIM_Base_SetConfig+0x40>
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	4a3d      	ldr	r2, [pc, #244]	; (801529c <TIM_Base_SetConfig+0x118>)
 80151a8:	4293      	cmp	r3, r2
 80151aa:	d00b      	beq.n	80151c4 <TIM_Base_SetConfig+0x40>
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	4a3c      	ldr	r2, [pc, #240]	; (80152a0 <TIM_Base_SetConfig+0x11c>)
 80151b0:	4293      	cmp	r3, r2
 80151b2:	d007      	beq.n	80151c4 <TIM_Base_SetConfig+0x40>
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	4a3b      	ldr	r2, [pc, #236]	; (80152a4 <TIM_Base_SetConfig+0x120>)
 80151b8:	4293      	cmp	r3, r2
 80151ba:	d003      	beq.n	80151c4 <TIM_Base_SetConfig+0x40>
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	4a3a      	ldr	r2, [pc, #232]	; (80152a8 <TIM_Base_SetConfig+0x124>)
 80151c0:	4293      	cmp	r3, r2
 80151c2:	d108      	bne.n	80151d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80151ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	685b      	ldr	r3, [r3, #4]
 80151d0:	68fa      	ldr	r2, [r7, #12]
 80151d2:	4313      	orrs	r3, r2
 80151d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	4a2f      	ldr	r2, [pc, #188]	; (8015298 <TIM_Base_SetConfig+0x114>)
 80151da:	4293      	cmp	r3, r2
 80151dc:	d01f      	beq.n	801521e <TIM_Base_SetConfig+0x9a>
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80151e4:	d01b      	beq.n	801521e <TIM_Base_SetConfig+0x9a>
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	4a2c      	ldr	r2, [pc, #176]	; (801529c <TIM_Base_SetConfig+0x118>)
 80151ea:	4293      	cmp	r3, r2
 80151ec:	d017      	beq.n	801521e <TIM_Base_SetConfig+0x9a>
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	4a2b      	ldr	r2, [pc, #172]	; (80152a0 <TIM_Base_SetConfig+0x11c>)
 80151f2:	4293      	cmp	r3, r2
 80151f4:	d013      	beq.n	801521e <TIM_Base_SetConfig+0x9a>
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	4a2a      	ldr	r2, [pc, #168]	; (80152a4 <TIM_Base_SetConfig+0x120>)
 80151fa:	4293      	cmp	r3, r2
 80151fc:	d00f      	beq.n	801521e <TIM_Base_SetConfig+0x9a>
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	4a29      	ldr	r2, [pc, #164]	; (80152a8 <TIM_Base_SetConfig+0x124>)
 8015202:	4293      	cmp	r3, r2
 8015204:	d00b      	beq.n	801521e <TIM_Base_SetConfig+0x9a>
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	4a28      	ldr	r2, [pc, #160]	; (80152ac <TIM_Base_SetConfig+0x128>)
 801520a:	4293      	cmp	r3, r2
 801520c:	d007      	beq.n	801521e <TIM_Base_SetConfig+0x9a>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	4a27      	ldr	r2, [pc, #156]	; (80152b0 <TIM_Base_SetConfig+0x12c>)
 8015212:	4293      	cmp	r3, r2
 8015214:	d003      	beq.n	801521e <TIM_Base_SetConfig+0x9a>
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	4a26      	ldr	r2, [pc, #152]	; (80152b4 <TIM_Base_SetConfig+0x130>)
 801521a:	4293      	cmp	r3, r2
 801521c:	d108      	bne.n	8015230 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	68db      	ldr	r3, [r3, #12]
 801522a:	68fa      	ldr	r2, [r7, #12]
 801522c:	4313      	orrs	r3, r2
 801522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	695b      	ldr	r3, [r3, #20]
 801523a:	4313      	orrs	r3, r2
 801523c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	68fa      	ldr	r2, [r7, #12]
 8015242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	689a      	ldr	r2, [r3, #8]
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	681a      	ldr	r2, [r3, #0]
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	4a10      	ldr	r2, [pc, #64]	; (8015298 <TIM_Base_SetConfig+0x114>)
 8015258:	4293      	cmp	r3, r2
 801525a:	d00f      	beq.n	801527c <TIM_Base_SetConfig+0xf8>
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	4a12      	ldr	r2, [pc, #72]	; (80152a8 <TIM_Base_SetConfig+0x124>)
 8015260:	4293      	cmp	r3, r2
 8015262:	d00b      	beq.n	801527c <TIM_Base_SetConfig+0xf8>
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	4a11      	ldr	r2, [pc, #68]	; (80152ac <TIM_Base_SetConfig+0x128>)
 8015268:	4293      	cmp	r3, r2
 801526a:	d007      	beq.n	801527c <TIM_Base_SetConfig+0xf8>
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	4a10      	ldr	r2, [pc, #64]	; (80152b0 <TIM_Base_SetConfig+0x12c>)
 8015270:	4293      	cmp	r3, r2
 8015272:	d003      	beq.n	801527c <TIM_Base_SetConfig+0xf8>
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	4a0f      	ldr	r2, [pc, #60]	; (80152b4 <TIM_Base_SetConfig+0x130>)
 8015278:	4293      	cmp	r3, r2
 801527a:	d103      	bne.n	8015284 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	691a      	ldr	r2, [r3, #16]
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2201      	movs	r2, #1
 8015288:	615a      	str	r2, [r3, #20]
}
 801528a:	bf00      	nop
 801528c:	3714      	adds	r7, #20
 801528e:	46bd      	mov	sp, r7
 8015290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015294:	4770      	bx	lr
 8015296:	bf00      	nop
 8015298:	40010000 	.word	0x40010000
 801529c:	40000400 	.word	0x40000400
 80152a0:	40000800 	.word	0x40000800
 80152a4:	40000c00 	.word	0x40000c00
 80152a8:	40010400 	.word	0x40010400
 80152ac:	40014000 	.word	0x40014000
 80152b0:	40014400 	.word	0x40014400
 80152b4:	40014800 	.word	0x40014800

080152b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80152b8:	b480      	push	{r7}
 80152ba:	b083      	sub	sp, #12
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80152c0:	bf00      	nop
 80152c2:	370c      	adds	r7, #12
 80152c4:	46bd      	mov	sp, r7
 80152c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ca:	4770      	bx	lr

080152cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80152cc:	b480      	push	{r7}
 80152ce:	b083      	sub	sp, #12
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80152d4:	bf00      	nop
 80152d6:	370c      	adds	r7, #12
 80152d8:	46bd      	mov	sp, r7
 80152da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152de:	4770      	bx	lr

080152e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80152e0:	b480      	push	{r7}
 80152e2:	b083      	sub	sp, #12
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80152e8:	bf00      	nop
 80152ea:	370c      	adds	r7, #12
 80152ec:	46bd      	mov	sp, r7
 80152ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f2:	4770      	bx	lr

080152f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80152f4:	b480      	push	{r7}
 80152f6:	b083      	sub	sp, #12
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d121      	bne.n	801534a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681a      	ldr	r2, [r3, #0]
 801530a:	4b27      	ldr	r3, [pc, #156]	; (80153a8 <FMC_SDRAM_Init+0xb4>)
 801530c:	4013      	ands	r3, r2
 801530e:	683a      	ldr	r2, [r7, #0]
 8015310:	6851      	ldr	r1, [r2, #4]
 8015312:	683a      	ldr	r2, [r7, #0]
 8015314:	6892      	ldr	r2, [r2, #8]
 8015316:	4311      	orrs	r1, r2
 8015318:	683a      	ldr	r2, [r7, #0]
 801531a:	68d2      	ldr	r2, [r2, #12]
 801531c:	4311      	orrs	r1, r2
 801531e:	683a      	ldr	r2, [r7, #0]
 8015320:	6912      	ldr	r2, [r2, #16]
 8015322:	4311      	orrs	r1, r2
 8015324:	683a      	ldr	r2, [r7, #0]
 8015326:	6952      	ldr	r2, [r2, #20]
 8015328:	4311      	orrs	r1, r2
 801532a:	683a      	ldr	r2, [r7, #0]
 801532c:	6992      	ldr	r2, [r2, #24]
 801532e:	4311      	orrs	r1, r2
 8015330:	683a      	ldr	r2, [r7, #0]
 8015332:	69d2      	ldr	r2, [r2, #28]
 8015334:	4311      	orrs	r1, r2
 8015336:	683a      	ldr	r2, [r7, #0]
 8015338:	6a12      	ldr	r2, [r2, #32]
 801533a:	4311      	orrs	r1, r2
 801533c:	683a      	ldr	r2, [r7, #0]
 801533e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015340:	430a      	orrs	r2, r1
 8015342:	431a      	orrs	r2, r3
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	601a      	str	r2, [r3, #0]
 8015348:	e026      	b.n	8015398 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	69d9      	ldr	r1, [r3, #28]
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	6a1b      	ldr	r3, [r3, #32]
 801535a:	4319      	orrs	r1, r3
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015360:	430b      	orrs	r3, r1
 8015362:	431a      	orrs	r2, r3
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	685a      	ldr	r2, [r3, #4]
 801536c:	4b0e      	ldr	r3, [pc, #56]	; (80153a8 <FMC_SDRAM_Init+0xb4>)
 801536e:	4013      	ands	r3, r2
 8015370:	683a      	ldr	r2, [r7, #0]
 8015372:	6851      	ldr	r1, [r2, #4]
 8015374:	683a      	ldr	r2, [r7, #0]
 8015376:	6892      	ldr	r2, [r2, #8]
 8015378:	4311      	orrs	r1, r2
 801537a:	683a      	ldr	r2, [r7, #0]
 801537c:	68d2      	ldr	r2, [r2, #12]
 801537e:	4311      	orrs	r1, r2
 8015380:	683a      	ldr	r2, [r7, #0]
 8015382:	6912      	ldr	r2, [r2, #16]
 8015384:	4311      	orrs	r1, r2
 8015386:	683a      	ldr	r2, [r7, #0]
 8015388:	6952      	ldr	r2, [r2, #20]
 801538a:	4311      	orrs	r1, r2
 801538c:	683a      	ldr	r2, [r7, #0]
 801538e:	6992      	ldr	r2, [r2, #24]
 8015390:	430a      	orrs	r2, r1
 8015392:	431a      	orrs	r2, r3
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8015398:	2300      	movs	r3, #0
}
 801539a:	4618      	mov	r0, r3
 801539c:	370c      	adds	r7, #12
 801539e:	46bd      	mov	sp, r7
 80153a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a4:	4770      	bx	lr
 80153a6:	bf00      	nop
 80153a8:	ffff8000 	.word	0xffff8000

080153ac <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b085      	sub	sp, #20
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	60f8      	str	r0, [r7, #12]
 80153b4:	60b9      	str	r1, [r7, #8]
 80153b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d128      	bne.n	8015410 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	689b      	ldr	r3, [r3, #8]
 80153c2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	1e59      	subs	r1, r3, #1
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	685b      	ldr	r3, [r3, #4]
 80153d0:	3b01      	subs	r3, #1
 80153d2:	011b      	lsls	r3, r3, #4
 80153d4:	4319      	orrs	r1, r3
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	689b      	ldr	r3, [r3, #8]
 80153da:	3b01      	subs	r3, #1
 80153dc:	021b      	lsls	r3, r3, #8
 80153de:	4319      	orrs	r1, r3
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	68db      	ldr	r3, [r3, #12]
 80153e4:	3b01      	subs	r3, #1
 80153e6:	031b      	lsls	r3, r3, #12
 80153e8:	4319      	orrs	r1, r3
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	691b      	ldr	r3, [r3, #16]
 80153ee:	3b01      	subs	r3, #1
 80153f0:	041b      	lsls	r3, r3, #16
 80153f2:	4319      	orrs	r1, r3
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	695b      	ldr	r3, [r3, #20]
 80153f8:	3b01      	subs	r3, #1
 80153fa:	051b      	lsls	r3, r3, #20
 80153fc:	4319      	orrs	r1, r3
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	699b      	ldr	r3, [r3, #24]
 8015402:	3b01      	subs	r3, #1
 8015404:	061b      	lsls	r3, r3, #24
 8015406:	430b      	orrs	r3, r1
 8015408:	431a      	orrs	r2, r3
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	609a      	str	r2, [r3, #8]
 801540e:	e02d      	b.n	801546c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	689a      	ldr	r2, [r3, #8]
 8015414:	4b19      	ldr	r3, [pc, #100]	; (801547c <FMC_SDRAM_Timing_Init+0xd0>)
 8015416:	4013      	ands	r3, r2
 8015418:	68ba      	ldr	r2, [r7, #8]
 801541a:	68d2      	ldr	r2, [r2, #12]
 801541c:	3a01      	subs	r2, #1
 801541e:	0311      	lsls	r1, r2, #12
 8015420:	68ba      	ldr	r2, [r7, #8]
 8015422:	6952      	ldr	r2, [r2, #20]
 8015424:	3a01      	subs	r2, #1
 8015426:	0512      	lsls	r2, r2, #20
 8015428:	430a      	orrs	r2, r1
 801542a:	431a      	orrs	r2, r3
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	68db      	ldr	r3, [r3, #12]
 8015434:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	1e59      	subs	r1, r3, #1
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	685b      	ldr	r3, [r3, #4]
 8015442:	3b01      	subs	r3, #1
 8015444:	011b      	lsls	r3, r3, #4
 8015446:	4319      	orrs	r1, r3
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	689b      	ldr	r3, [r3, #8]
 801544c:	3b01      	subs	r3, #1
 801544e:	021b      	lsls	r3, r3, #8
 8015450:	4319      	orrs	r1, r3
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	691b      	ldr	r3, [r3, #16]
 8015456:	3b01      	subs	r3, #1
 8015458:	041b      	lsls	r3, r3, #16
 801545a:	4319      	orrs	r1, r3
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	699b      	ldr	r3, [r3, #24]
 8015460:	3b01      	subs	r3, #1
 8015462:	061b      	lsls	r3, r3, #24
 8015464:	430b      	orrs	r3, r1
 8015466:	431a      	orrs	r2, r3
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 801546c:	2300      	movs	r3, #0
}
 801546e:	4618      	mov	r0, r3
 8015470:	3714      	adds	r7, #20
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr
 801547a:	bf00      	nop
 801547c:	ff0f0fff 	.word	0xff0f0fff

08015480 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8015480:	b480      	push	{r7}
 8015482:	b085      	sub	sp, #20
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	691a      	ldr	r2, [r3, #16]
 8015490:	4b0c      	ldr	r3, [pc, #48]	; (80154c4 <FMC_SDRAM_SendCommand+0x44>)
 8015492:	4013      	ands	r3, r2
 8015494:	68ba      	ldr	r2, [r7, #8]
 8015496:	6811      	ldr	r1, [r2, #0]
 8015498:	68ba      	ldr	r2, [r7, #8]
 801549a:	6852      	ldr	r2, [r2, #4]
 801549c:	4311      	orrs	r1, r2
 801549e:	68ba      	ldr	r2, [r7, #8]
 80154a0:	6892      	ldr	r2, [r2, #8]
 80154a2:	3a01      	subs	r2, #1
 80154a4:	0152      	lsls	r2, r2, #5
 80154a6:	4311      	orrs	r1, r2
 80154a8:	68ba      	ldr	r2, [r7, #8]
 80154aa:	68d2      	ldr	r2, [r2, #12]
 80154ac:	0252      	lsls	r2, r2, #9
 80154ae:	430a      	orrs	r2, r1
 80154b0:	431a      	orrs	r2, r3
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80154b6:	2300      	movs	r3, #0
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3714      	adds	r7, #20
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr
 80154c4:	ffc00000 	.word	0xffc00000

080154c8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80154c8:	b480      	push	{r7}
 80154ca:	b083      	sub	sp, #12
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	695a      	ldr	r2, [r3, #20]
 80154d6:	4b07      	ldr	r3, [pc, #28]	; (80154f4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80154d8:	4013      	ands	r3, r2
 80154da:	683a      	ldr	r2, [r7, #0]
 80154dc:	0052      	lsls	r2, r2, #1
 80154de:	431a      	orrs	r2, r3
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80154e4:	2300      	movs	r3, #0
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	370c      	adds	r7, #12
 80154ea:	46bd      	mov	sp, r7
 80154ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop
 80154f4:	ffffc001 	.word	0xffffc001

080154f8 <__NVIC_SetPriority>:
{
 80154f8:	b480      	push	{r7}
 80154fa:	b083      	sub	sp, #12
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	4603      	mov	r3, r0
 8015500:	6039      	str	r1, [r7, #0]
 8015502:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015508:	2b00      	cmp	r3, #0
 801550a:	db0a      	blt.n	8015522 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	b2da      	uxtb	r2, r3
 8015510:	490c      	ldr	r1, [pc, #48]	; (8015544 <__NVIC_SetPriority+0x4c>)
 8015512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015516:	0112      	lsls	r2, r2, #4
 8015518:	b2d2      	uxtb	r2, r2
 801551a:	440b      	add	r3, r1
 801551c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015520:	e00a      	b.n	8015538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	b2da      	uxtb	r2, r3
 8015526:	4908      	ldr	r1, [pc, #32]	; (8015548 <__NVIC_SetPriority+0x50>)
 8015528:	88fb      	ldrh	r3, [r7, #6]
 801552a:	f003 030f 	and.w	r3, r3, #15
 801552e:	3b04      	subs	r3, #4
 8015530:	0112      	lsls	r2, r2, #4
 8015532:	b2d2      	uxtb	r2, r2
 8015534:	440b      	add	r3, r1
 8015536:	761a      	strb	r2, [r3, #24]
}
 8015538:	bf00      	nop
 801553a:	370c      	adds	r7, #12
 801553c:	46bd      	mov	sp, r7
 801553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015542:	4770      	bx	lr
 8015544:	e000e100 	.word	0xe000e100
 8015548:	e000ed00 	.word	0xe000ed00

0801554c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801554c:	b580      	push	{r7, lr}
 801554e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015550:	4b05      	ldr	r3, [pc, #20]	; (8015568 <SysTick_Handler+0x1c>)
 8015552:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015554:	f003 f8d6 	bl	8018704 <xTaskGetSchedulerState>
 8015558:	4603      	mov	r3, r0
 801555a:	2b01      	cmp	r3, #1
 801555c:	d001      	beq.n	8015562 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801555e:	f001 f8fb 	bl	8016758 <xPortSysTickHandler>
  }
}
 8015562:	bf00      	nop
 8015564:	bd80      	pop	{r7, pc}
 8015566:	bf00      	nop
 8015568:	e000e010 	.word	0xe000e010

0801556c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801556c:	b580      	push	{r7, lr}
 801556e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015570:	2100      	movs	r1, #0
 8015572:	f06f 0004 	mvn.w	r0, #4
 8015576:	f7ff ffbf 	bl	80154f8 <__NVIC_SetPriority>
#endif
}
 801557a:	bf00      	nop
 801557c:	bd80      	pop	{r7, pc}
	...

08015580 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015580:	b480      	push	{r7}
 8015582:	b083      	sub	sp, #12
 8015584:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015586:	f3ef 8305 	mrs	r3, IPSR
 801558a:	603b      	str	r3, [r7, #0]
  return(result);
 801558c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801558e:	2b00      	cmp	r3, #0
 8015590:	d003      	beq.n	801559a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015592:	f06f 0305 	mvn.w	r3, #5
 8015596:	607b      	str	r3, [r7, #4]
 8015598:	e00c      	b.n	80155b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801559a:	4b0a      	ldr	r3, [pc, #40]	; (80155c4 <osKernelInitialize+0x44>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d105      	bne.n	80155ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80155a2:	4b08      	ldr	r3, [pc, #32]	; (80155c4 <osKernelInitialize+0x44>)
 80155a4:	2201      	movs	r2, #1
 80155a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80155a8:	2300      	movs	r3, #0
 80155aa:	607b      	str	r3, [r7, #4]
 80155ac:	e002      	b.n	80155b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80155ae:	f04f 33ff 	mov.w	r3, #4294967295
 80155b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80155b4:	687b      	ldr	r3, [r7, #4]
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	370c      	adds	r7, #12
 80155ba:	46bd      	mov	sp, r7
 80155bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c0:	4770      	bx	lr
 80155c2:	bf00      	nop
 80155c4:	2400db28 	.word	0x2400db28

080155c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b082      	sub	sp, #8
 80155cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80155ce:	f3ef 8305 	mrs	r3, IPSR
 80155d2:	603b      	str	r3, [r7, #0]
  return(result);
 80155d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d003      	beq.n	80155e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80155da:	f06f 0305 	mvn.w	r3, #5
 80155de:	607b      	str	r3, [r7, #4]
 80155e0:	e010      	b.n	8015604 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80155e2:	4b0b      	ldr	r3, [pc, #44]	; (8015610 <osKernelStart+0x48>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	2b01      	cmp	r3, #1
 80155e8:	d109      	bne.n	80155fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80155ea:	f7ff ffbf 	bl	801556c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80155ee:	4b08      	ldr	r3, [pc, #32]	; (8015610 <osKernelStart+0x48>)
 80155f0:	2202      	movs	r2, #2
 80155f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80155f4:	f002 fbdc 	bl	8017db0 <vTaskStartScheduler>
      stat = osOK;
 80155f8:	2300      	movs	r3, #0
 80155fa:	607b      	str	r3, [r7, #4]
 80155fc:	e002      	b.n	8015604 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80155fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015602:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015604:	687b      	ldr	r3, [r7, #4]
}
 8015606:	4618      	mov	r0, r3
 8015608:	3708      	adds	r7, #8
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
 801560e:	bf00      	nop
 8015610:	2400db28 	.word	0x2400db28

08015614 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015614:	b580      	push	{r7, lr}
 8015616:	b08e      	sub	sp, #56	; 0x38
 8015618:	af04      	add	r7, sp, #16
 801561a:	60f8      	str	r0, [r7, #12]
 801561c:	60b9      	str	r1, [r7, #8]
 801561e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015620:	2300      	movs	r3, #0
 8015622:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015624:	f3ef 8305 	mrs	r3, IPSR
 8015628:	617b      	str	r3, [r7, #20]
  return(result);
 801562a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801562c:	2b00      	cmp	r3, #0
 801562e:	d17e      	bne.n	801572e <osThreadNew+0x11a>
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d07b      	beq.n	801572e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015636:	2380      	movs	r3, #128	; 0x80
 8015638:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801563a:	2318      	movs	r3, #24
 801563c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801563e:	2300      	movs	r3, #0
 8015640:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015642:	f04f 33ff 	mov.w	r3, #4294967295
 8015646:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d045      	beq.n	80156da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d002      	beq.n	801565c <osThreadNew+0x48>
        name = attr->name;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	699b      	ldr	r3, [r3, #24]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d002      	beq.n	801566a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	699b      	ldr	r3, [r3, #24]
 8015668:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801566a:	69fb      	ldr	r3, [r7, #28]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d008      	beq.n	8015682 <osThreadNew+0x6e>
 8015670:	69fb      	ldr	r3, [r7, #28]
 8015672:	2b38      	cmp	r3, #56	; 0x38
 8015674:	d805      	bhi.n	8015682 <osThreadNew+0x6e>
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	f003 0301 	and.w	r3, r3, #1
 801567e:	2b00      	cmp	r3, #0
 8015680:	d001      	beq.n	8015686 <osThreadNew+0x72>
        return (NULL);
 8015682:	2300      	movs	r3, #0
 8015684:	e054      	b.n	8015730 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	695b      	ldr	r3, [r3, #20]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d003      	beq.n	8015696 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	695b      	ldr	r3, [r3, #20]
 8015692:	089b      	lsrs	r3, r3, #2
 8015694:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	689b      	ldr	r3, [r3, #8]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d00e      	beq.n	80156bc <osThreadNew+0xa8>
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	2b5f      	cmp	r3, #95	; 0x5f
 80156a4:	d90a      	bls.n	80156bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d006      	beq.n	80156bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	695b      	ldr	r3, [r3, #20]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d002      	beq.n	80156bc <osThreadNew+0xa8>
        mem = 1;
 80156b6:	2301      	movs	r3, #1
 80156b8:	61bb      	str	r3, [r7, #24]
 80156ba:	e010      	b.n	80156de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	689b      	ldr	r3, [r3, #8]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d10c      	bne.n	80156de <osThreadNew+0xca>
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	68db      	ldr	r3, [r3, #12]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d108      	bne.n	80156de <osThreadNew+0xca>
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	691b      	ldr	r3, [r3, #16]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d104      	bne.n	80156de <osThreadNew+0xca>
          mem = 0;
 80156d4:	2300      	movs	r3, #0
 80156d6:	61bb      	str	r3, [r7, #24]
 80156d8:	e001      	b.n	80156de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80156da:	2300      	movs	r3, #0
 80156dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80156de:	69bb      	ldr	r3, [r7, #24]
 80156e0:	2b01      	cmp	r3, #1
 80156e2:	d110      	bne.n	8015706 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80156e8:	687a      	ldr	r2, [r7, #4]
 80156ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80156ec:	9202      	str	r2, [sp, #8]
 80156ee:	9301      	str	r3, [sp, #4]
 80156f0:	69fb      	ldr	r3, [r7, #28]
 80156f2:	9300      	str	r3, [sp, #0]
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	6a3a      	ldr	r2, [r7, #32]
 80156f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80156fa:	68f8      	ldr	r0, [r7, #12]
 80156fc:	f002 f980 	bl	8017a00 <xTaskCreateStatic>
 8015700:	4603      	mov	r3, r0
 8015702:	613b      	str	r3, [r7, #16]
 8015704:	e013      	b.n	801572e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015706:	69bb      	ldr	r3, [r7, #24]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d110      	bne.n	801572e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801570c:	6a3b      	ldr	r3, [r7, #32]
 801570e:	b29a      	uxth	r2, r3
 8015710:	f107 0310 	add.w	r3, r7, #16
 8015714:	9301      	str	r3, [sp, #4]
 8015716:	69fb      	ldr	r3, [r7, #28]
 8015718:	9300      	str	r3, [sp, #0]
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801571e:	68f8      	ldr	r0, [r7, #12]
 8015720:	f002 f9cb 	bl	8017aba <xTaskCreate>
 8015724:	4603      	mov	r3, r0
 8015726:	2b01      	cmp	r3, #1
 8015728:	d001      	beq.n	801572e <osThreadNew+0x11a>
            hTask = NULL;
 801572a:	2300      	movs	r3, #0
 801572c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801572e:	693b      	ldr	r3, [r7, #16]
}
 8015730:	4618      	mov	r0, r3
 8015732:	3728      	adds	r7, #40	; 0x28
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015738:	b580      	push	{r7, lr}
 801573a:	b084      	sub	sp, #16
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015740:	f3ef 8305 	mrs	r3, IPSR
 8015744:	60bb      	str	r3, [r7, #8]
  return(result);
 8015746:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015748:	2b00      	cmp	r3, #0
 801574a:	d003      	beq.n	8015754 <osDelay+0x1c>
    stat = osErrorISR;
 801574c:	f06f 0305 	mvn.w	r3, #5
 8015750:	60fb      	str	r3, [r7, #12]
 8015752:	e007      	b.n	8015764 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015754:	2300      	movs	r3, #0
 8015756:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d002      	beq.n	8015764 <osDelay+0x2c>
      vTaskDelay(ticks);
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f002 faf2 	bl	8017d48 <vTaskDelay>
    }
  }

  return (stat);
 8015764:	68fb      	ldr	r3, [r7, #12]
}
 8015766:	4618      	mov	r0, r3
 8015768:	3710      	adds	r7, #16
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}

0801576e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801576e:	b580      	push	{r7, lr}
 8015770:	b088      	sub	sp, #32
 8015772:	af00      	add	r7, sp, #0
 8015774:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8015776:	2300      	movs	r3, #0
 8015778:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801577a:	f3ef 8305 	mrs	r3, IPSR
 801577e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015780:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8015782:	2b00      	cmp	r3, #0
 8015784:	d174      	bne.n	8015870 <osMutexNew+0x102>
    if (attr != NULL) {
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d003      	beq.n	8015794 <osMutexNew+0x26>
      type = attr->attr_bits;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	685b      	ldr	r3, [r3, #4]
 8015790:	61bb      	str	r3, [r7, #24]
 8015792:	e001      	b.n	8015798 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8015794:	2300      	movs	r3, #0
 8015796:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8015798:	69bb      	ldr	r3, [r7, #24]
 801579a:	f003 0301 	and.w	r3, r3, #1
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d002      	beq.n	80157a8 <osMutexNew+0x3a>
      rmtx = 1U;
 80157a2:	2301      	movs	r3, #1
 80157a4:	617b      	str	r3, [r7, #20]
 80157a6:	e001      	b.n	80157ac <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80157a8:	2300      	movs	r3, #0
 80157aa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80157ac:	69bb      	ldr	r3, [r7, #24]
 80157ae:	f003 0308 	and.w	r3, r3, #8
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d15c      	bne.n	8015870 <osMutexNew+0x102>
      mem = -1;
 80157b6:	f04f 33ff 	mov.w	r3, #4294967295
 80157ba:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d015      	beq.n	80157ee <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	689b      	ldr	r3, [r3, #8]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d006      	beq.n	80157d8 <osMutexNew+0x6a>
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	68db      	ldr	r3, [r3, #12]
 80157ce:	2b4f      	cmp	r3, #79	; 0x4f
 80157d0:	d902      	bls.n	80157d8 <osMutexNew+0x6a>
          mem = 1;
 80157d2:	2301      	movs	r3, #1
 80157d4:	613b      	str	r3, [r7, #16]
 80157d6:	e00c      	b.n	80157f2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	689b      	ldr	r3, [r3, #8]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d108      	bne.n	80157f2 <osMutexNew+0x84>
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	68db      	ldr	r3, [r3, #12]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d104      	bne.n	80157f2 <osMutexNew+0x84>
            mem = 0;
 80157e8:	2300      	movs	r3, #0
 80157ea:	613b      	str	r3, [r7, #16]
 80157ec:	e001      	b.n	80157f2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80157ee:	2300      	movs	r3, #0
 80157f0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80157f2:	693b      	ldr	r3, [r7, #16]
 80157f4:	2b01      	cmp	r3, #1
 80157f6:	d112      	bne.n	801581e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d007      	beq.n	801580e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	689b      	ldr	r3, [r3, #8]
 8015802:	4619      	mov	r1, r3
 8015804:	2004      	movs	r0, #4
 8015806:	f001 f9a6 	bl	8016b56 <xQueueCreateMutexStatic>
 801580a:	61f8      	str	r0, [r7, #28]
 801580c:	e016      	b.n	801583c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	689b      	ldr	r3, [r3, #8]
 8015812:	4619      	mov	r1, r3
 8015814:	2001      	movs	r0, #1
 8015816:	f001 f99e 	bl	8016b56 <xQueueCreateMutexStatic>
 801581a:	61f8      	str	r0, [r7, #28]
 801581c:	e00e      	b.n	801583c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 801581e:	693b      	ldr	r3, [r7, #16]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d10b      	bne.n	801583c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8015824:	697b      	ldr	r3, [r7, #20]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d004      	beq.n	8015834 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801582a:	2004      	movs	r0, #4
 801582c:	f001 f97b 	bl	8016b26 <xQueueCreateMutex>
 8015830:	61f8      	str	r0, [r7, #28]
 8015832:	e003      	b.n	801583c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8015834:	2001      	movs	r0, #1
 8015836:	f001 f976 	bl	8016b26 <xQueueCreateMutex>
 801583a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801583c:	69fb      	ldr	r3, [r7, #28]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d00c      	beq.n	801585c <osMutexNew+0xee>
        if (attr != NULL) {
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d003      	beq.n	8015850 <osMutexNew+0xe2>
          name = attr->name;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	60fb      	str	r3, [r7, #12]
 801584e:	e001      	b.n	8015854 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8015850:	2300      	movs	r3, #0
 8015852:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8015854:	68f9      	ldr	r1, [r7, #12]
 8015856:	69f8      	ldr	r0, [r7, #28]
 8015858:	f002 f84a 	bl	80178f0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d006      	beq.n	8015870 <osMutexNew+0x102>
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d003      	beq.n	8015870 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8015868:	69fb      	ldr	r3, [r7, #28]
 801586a:	f043 0301 	orr.w	r3, r3, #1
 801586e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8015870:	69fb      	ldr	r3, [r7, #28]
}
 8015872:	4618      	mov	r0, r3
 8015874:	3720      	adds	r7, #32
 8015876:	46bd      	mov	sp, r7
 8015878:	bd80      	pop	{r7, pc}

0801587a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801587a:	b580      	push	{r7, lr}
 801587c:	b086      	sub	sp, #24
 801587e:	af00      	add	r7, sp, #0
 8015880:	6078      	str	r0, [r7, #4]
 8015882:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f023 0301 	bic.w	r3, r3, #1
 801588a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f003 0301 	and.w	r3, r3, #1
 8015892:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015894:	2300      	movs	r3, #0
 8015896:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015898:	f3ef 8305 	mrs	r3, IPSR
 801589c:	60bb      	str	r3, [r7, #8]
  return(result);
 801589e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d003      	beq.n	80158ac <osMutexAcquire+0x32>
    stat = osErrorISR;
 80158a4:	f06f 0305 	mvn.w	r3, #5
 80158a8:	617b      	str	r3, [r7, #20]
 80158aa:	e02c      	b.n	8015906 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80158ac:	693b      	ldr	r3, [r7, #16]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d103      	bne.n	80158ba <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80158b2:	f06f 0303 	mvn.w	r3, #3
 80158b6:	617b      	str	r3, [r7, #20]
 80158b8:	e025      	b.n	8015906 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d011      	beq.n	80158e4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80158c0:	6839      	ldr	r1, [r7, #0]
 80158c2:	6938      	ldr	r0, [r7, #16]
 80158c4:	f001 f996 	bl	8016bf4 <xQueueTakeMutexRecursive>
 80158c8:	4603      	mov	r3, r0
 80158ca:	2b01      	cmp	r3, #1
 80158cc:	d01b      	beq.n	8015906 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80158ce:	683b      	ldr	r3, [r7, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d003      	beq.n	80158dc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80158d4:	f06f 0301 	mvn.w	r3, #1
 80158d8:	617b      	str	r3, [r7, #20]
 80158da:	e014      	b.n	8015906 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80158dc:	f06f 0302 	mvn.w	r3, #2
 80158e0:	617b      	str	r3, [r7, #20]
 80158e2:	e010      	b.n	8015906 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80158e4:	6839      	ldr	r1, [r7, #0]
 80158e6:	6938      	ldr	r0, [r7, #16]
 80158e8:	f001 fd2a 	bl	8017340 <xQueueSemaphoreTake>
 80158ec:	4603      	mov	r3, r0
 80158ee:	2b01      	cmp	r3, #1
 80158f0:	d009      	beq.n	8015906 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d003      	beq.n	8015900 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80158f8:	f06f 0301 	mvn.w	r3, #1
 80158fc:	617b      	str	r3, [r7, #20]
 80158fe:	e002      	b.n	8015906 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015900:	f06f 0302 	mvn.w	r3, #2
 8015904:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8015906:	697b      	ldr	r3, [r7, #20]
}
 8015908:	4618      	mov	r0, r3
 801590a:	3718      	adds	r7, #24
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}

08015910 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8015910:	b580      	push	{r7, lr}
 8015912:	b086      	sub	sp, #24
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f023 0301 	bic.w	r3, r3, #1
 801591e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	f003 0301 	and.w	r3, r3, #1
 8015926:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015928:	2300      	movs	r3, #0
 801592a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801592c:	f3ef 8305 	mrs	r3, IPSR
 8015930:	60bb      	str	r3, [r7, #8]
  return(result);
 8015932:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015934:	2b00      	cmp	r3, #0
 8015936:	d003      	beq.n	8015940 <osMutexRelease+0x30>
    stat = osErrorISR;
 8015938:	f06f 0305 	mvn.w	r3, #5
 801593c:	617b      	str	r3, [r7, #20]
 801593e:	e01f      	b.n	8015980 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8015940:	693b      	ldr	r3, [r7, #16]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d103      	bne.n	801594e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8015946:	f06f 0303 	mvn.w	r3, #3
 801594a:	617b      	str	r3, [r7, #20]
 801594c:	e018      	b.n	8015980 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d009      	beq.n	8015968 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8015954:	6938      	ldr	r0, [r7, #16]
 8015956:	f001 f919 	bl	8016b8c <xQueueGiveMutexRecursive>
 801595a:	4603      	mov	r3, r0
 801595c:	2b01      	cmp	r3, #1
 801595e:	d00f      	beq.n	8015980 <osMutexRelease+0x70>
        stat = osErrorResource;
 8015960:	f06f 0302 	mvn.w	r3, #2
 8015964:	617b      	str	r3, [r7, #20]
 8015966:	e00b      	b.n	8015980 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8015968:	2300      	movs	r3, #0
 801596a:	2200      	movs	r2, #0
 801596c:	2100      	movs	r1, #0
 801596e:	6938      	ldr	r0, [r7, #16]
 8015970:	f001 f9e0 	bl	8016d34 <xQueueGenericSend>
 8015974:	4603      	mov	r3, r0
 8015976:	2b01      	cmp	r3, #1
 8015978:	d002      	beq.n	8015980 <osMutexRelease+0x70>
        stat = osErrorResource;
 801597a:	f06f 0302 	mvn.w	r3, #2
 801597e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015980:	697b      	ldr	r3, [r7, #20]
}
 8015982:	4618      	mov	r0, r3
 8015984:	3718      	adds	r7, #24
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}

0801598a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801598a:	b580      	push	{r7, lr}
 801598c:	b08a      	sub	sp, #40	; 0x28
 801598e:	af02      	add	r7, sp, #8
 8015990:	60f8      	str	r0, [r7, #12]
 8015992:	60b9      	str	r1, [r7, #8]
 8015994:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015996:	2300      	movs	r3, #0
 8015998:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801599a:	f3ef 8305 	mrs	r3, IPSR
 801599e:	613b      	str	r3, [r7, #16]
  return(result);
 80159a0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d175      	bne.n	8015a92 <osSemaphoreNew+0x108>
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d072      	beq.n	8015a92 <osSemaphoreNew+0x108>
 80159ac:	68ba      	ldr	r2, [r7, #8]
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d86e      	bhi.n	8015a92 <osSemaphoreNew+0x108>
    mem = -1;
 80159b4:	f04f 33ff 	mov.w	r3, #4294967295
 80159b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d015      	beq.n	80159ec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	689b      	ldr	r3, [r3, #8]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d006      	beq.n	80159d6 <osSemaphoreNew+0x4c>
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	68db      	ldr	r3, [r3, #12]
 80159cc:	2b4f      	cmp	r3, #79	; 0x4f
 80159ce:	d902      	bls.n	80159d6 <osSemaphoreNew+0x4c>
        mem = 1;
 80159d0:	2301      	movs	r3, #1
 80159d2:	61bb      	str	r3, [r7, #24]
 80159d4:	e00c      	b.n	80159f0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	689b      	ldr	r3, [r3, #8]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d108      	bne.n	80159f0 <osSemaphoreNew+0x66>
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	68db      	ldr	r3, [r3, #12]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d104      	bne.n	80159f0 <osSemaphoreNew+0x66>
          mem = 0;
 80159e6:	2300      	movs	r3, #0
 80159e8:	61bb      	str	r3, [r7, #24]
 80159ea:	e001      	b.n	80159f0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80159ec:	2300      	movs	r3, #0
 80159ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80159f0:	69bb      	ldr	r3, [r7, #24]
 80159f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159f6:	d04c      	beq.n	8015a92 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	2b01      	cmp	r3, #1
 80159fc:	d128      	bne.n	8015a50 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80159fe:	69bb      	ldr	r3, [r7, #24]
 8015a00:	2b01      	cmp	r3, #1
 8015a02:	d10a      	bne.n	8015a1a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	689b      	ldr	r3, [r3, #8]
 8015a08:	2203      	movs	r2, #3
 8015a0a:	9200      	str	r2, [sp, #0]
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	2100      	movs	r1, #0
 8015a10:	2001      	movs	r0, #1
 8015a12:	f000 ff99 	bl	8016948 <xQueueGenericCreateStatic>
 8015a16:	61f8      	str	r0, [r7, #28]
 8015a18:	e005      	b.n	8015a26 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015a1a:	2203      	movs	r2, #3
 8015a1c:	2100      	movs	r1, #0
 8015a1e:	2001      	movs	r0, #1
 8015a20:	f001 f80a 	bl	8016a38 <xQueueGenericCreate>
 8015a24:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d022      	beq.n	8015a72 <osSemaphoreNew+0xe8>
 8015a2c:	68bb      	ldr	r3, [r7, #8]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d01f      	beq.n	8015a72 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015a32:	2300      	movs	r3, #0
 8015a34:	2200      	movs	r2, #0
 8015a36:	2100      	movs	r1, #0
 8015a38:	69f8      	ldr	r0, [r7, #28]
 8015a3a:	f001 f97b 	bl	8016d34 <xQueueGenericSend>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	2b01      	cmp	r3, #1
 8015a42:	d016      	beq.n	8015a72 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015a44:	69f8      	ldr	r0, [r7, #28]
 8015a46:	f001 fe07 	bl	8017658 <vQueueDelete>
            hSemaphore = NULL;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	61fb      	str	r3, [r7, #28]
 8015a4e:	e010      	b.n	8015a72 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015a50:	69bb      	ldr	r3, [r7, #24]
 8015a52:	2b01      	cmp	r3, #1
 8015a54:	d108      	bne.n	8015a68 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	689b      	ldr	r3, [r3, #8]
 8015a5a:	461a      	mov	r2, r3
 8015a5c:	68b9      	ldr	r1, [r7, #8]
 8015a5e:	68f8      	ldr	r0, [r7, #12]
 8015a60:	f001 f8fe 	bl	8016c60 <xQueueCreateCountingSemaphoreStatic>
 8015a64:	61f8      	str	r0, [r7, #28]
 8015a66:	e004      	b.n	8015a72 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015a68:	68b9      	ldr	r1, [r7, #8]
 8015a6a:	68f8      	ldr	r0, [r7, #12]
 8015a6c:	f001 f92f 	bl	8016cce <xQueueCreateCountingSemaphore>
 8015a70:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015a72:	69fb      	ldr	r3, [r7, #28]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d00c      	beq.n	8015a92 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d003      	beq.n	8015a86 <osSemaphoreNew+0xfc>
          name = attr->name;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	617b      	str	r3, [r7, #20]
 8015a84:	e001      	b.n	8015a8a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015a86:	2300      	movs	r3, #0
 8015a88:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015a8a:	6979      	ldr	r1, [r7, #20]
 8015a8c:	69f8      	ldr	r0, [r7, #28]
 8015a8e:	f001 ff2f 	bl	80178f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015a92:	69fb      	ldr	r3, [r7, #28]
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3720      	adds	r7, #32
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b086      	sub	sp, #24
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
 8015aa4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015aae:	693b      	ldr	r3, [r7, #16]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d103      	bne.n	8015abc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015ab4:	f06f 0303 	mvn.w	r3, #3
 8015ab8:	617b      	str	r3, [r7, #20]
 8015aba:	e039      	b.n	8015b30 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015abc:	f3ef 8305 	mrs	r3, IPSR
 8015ac0:	60fb      	str	r3, [r7, #12]
  return(result);
 8015ac2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d022      	beq.n	8015b0e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d003      	beq.n	8015ad6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8015ace:	f06f 0303 	mvn.w	r3, #3
 8015ad2:	617b      	str	r3, [r7, #20]
 8015ad4:	e02c      	b.n	8015b30 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015ada:	f107 0308 	add.w	r3, r7, #8
 8015ade:	461a      	mov	r2, r3
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	6938      	ldr	r0, [r7, #16]
 8015ae4:	f001 fd38 	bl	8017558 <xQueueReceiveFromISR>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	2b01      	cmp	r3, #1
 8015aec:	d003      	beq.n	8015af6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8015aee:	f06f 0302 	mvn.w	r3, #2
 8015af2:	617b      	str	r3, [r7, #20]
 8015af4:	e01c      	b.n	8015b30 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d019      	beq.n	8015b30 <osSemaphoreAcquire+0x94>
 8015afc:	4b0f      	ldr	r3, [pc, #60]	; (8015b3c <osSemaphoreAcquire+0xa0>)
 8015afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b02:	601a      	str	r2, [r3, #0]
 8015b04:	f3bf 8f4f 	dsb	sy
 8015b08:	f3bf 8f6f 	isb	sy
 8015b0c:	e010      	b.n	8015b30 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015b0e:	6839      	ldr	r1, [r7, #0]
 8015b10:	6938      	ldr	r0, [r7, #16]
 8015b12:	f001 fc15 	bl	8017340 <xQueueSemaphoreTake>
 8015b16:	4603      	mov	r3, r0
 8015b18:	2b01      	cmp	r3, #1
 8015b1a:	d009      	beq.n	8015b30 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d003      	beq.n	8015b2a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015b22:	f06f 0301 	mvn.w	r3, #1
 8015b26:	617b      	str	r3, [r7, #20]
 8015b28:	e002      	b.n	8015b30 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015b2a:	f06f 0302 	mvn.w	r3, #2
 8015b2e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015b30:	697b      	ldr	r3, [r7, #20]
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3718      	adds	r7, #24
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}
 8015b3a:	bf00      	nop
 8015b3c:	e000ed04 	.word	0xe000ed04

08015b40 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b086      	sub	sp, #24
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d103      	bne.n	8015b5e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015b56:	f06f 0303 	mvn.w	r3, #3
 8015b5a:	617b      	str	r3, [r7, #20]
 8015b5c:	e02c      	b.n	8015bb8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b5e:	f3ef 8305 	mrs	r3, IPSR
 8015b62:	60fb      	str	r3, [r7, #12]
  return(result);
 8015b64:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d01a      	beq.n	8015ba0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015b6e:	f107 0308 	add.w	r3, r7, #8
 8015b72:	4619      	mov	r1, r3
 8015b74:	6938      	ldr	r0, [r7, #16]
 8015b76:	f001 fa76 	bl	8017066 <xQueueGiveFromISR>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	2b01      	cmp	r3, #1
 8015b7e:	d003      	beq.n	8015b88 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015b80:	f06f 0302 	mvn.w	r3, #2
 8015b84:	617b      	str	r3, [r7, #20]
 8015b86:	e017      	b.n	8015bb8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d014      	beq.n	8015bb8 <osSemaphoreRelease+0x78>
 8015b8e:	4b0d      	ldr	r3, [pc, #52]	; (8015bc4 <osSemaphoreRelease+0x84>)
 8015b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b94:	601a      	str	r2, [r3, #0]
 8015b96:	f3bf 8f4f 	dsb	sy
 8015b9a:	f3bf 8f6f 	isb	sy
 8015b9e:	e00b      	b.n	8015bb8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	2100      	movs	r1, #0
 8015ba6:	6938      	ldr	r0, [r7, #16]
 8015ba8:	f001 f8c4 	bl	8016d34 <xQueueGenericSend>
 8015bac:	4603      	mov	r3, r0
 8015bae:	2b01      	cmp	r3, #1
 8015bb0:	d002      	beq.n	8015bb8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015bb2:	f06f 0302 	mvn.w	r3, #2
 8015bb6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015bb8:	697b      	ldr	r3, [r7, #20]
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	3718      	adds	r7, #24
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}
 8015bc2:	bf00      	nop
 8015bc4:	e000ed04 	.word	0xe000ed04

08015bc8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b08a      	sub	sp, #40	; 0x28
 8015bcc:	af02      	add	r7, sp, #8
 8015bce:	60f8      	str	r0, [r7, #12]
 8015bd0:	60b9      	str	r1, [r7, #8]
 8015bd2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bd8:	f3ef 8305 	mrs	r3, IPSR
 8015bdc:	613b      	str	r3, [r7, #16]
  return(result);
 8015bde:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d15f      	bne.n	8015ca4 <osMessageQueueNew+0xdc>
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d05c      	beq.n	8015ca4 <osMessageQueueNew+0xdc>
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d059      	beq.n	8015ca4 <osMessageQueueNew+0xdc>
    mem = -1;
 8015bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d029      	beq.n	8015c50 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	689b      	ldr	r3, [r3, #8]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d012      	beq.n	8015c2a <osMessageQueueNew+0x62>
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	68db      	ldr	r3, [r3, #12]
 8015c08:	2b4f      	cmp	r3, #79	; 0x4f
 8015c0a:	d90e      	bls.n	8015c2a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d00a      	beq.n	8015c2a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	695a      	ldr	r2, [r3, #20]
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	68b9      	ldr	r1, [r7, #8]
 8015c1c:	fb01 f303 	mul.w	r3, r1, r3
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d302      	bcc.n	8015c2a <osMessageQueueNew+0x62>
        mem = 1;
 8015c24:	2301      	movs	r3, #1
 8015c26:	61bb      	str	r3, [r7, #24]
 8015c28:	e014      	b.n	8015c54 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	689b      	ldr	r3, [r3, #8]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d110      	bne.n	8015c54 <osMessageQueueNew+0x8c>
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	68db      	ldr	r3, [r3, #12]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d10c      	bne.n	8015c54 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d108      	bne.n	8015c54 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	695b      	ldr	r3, [r3, #20]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d104      	bne.n	8015c54 <osMessageQueueNew+0x8c>
          mem = 0;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	61bb      	str	r3, [r7, #24]
 8015c4e:	e001      	b.n	8015c54 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8015c50:	2300      	movs	r3, #0
 8015c52:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015c54:	69bb      	ldr	r3, [r7, #24]
 8015c56:	2b01      	cmp	r3, #1
 8015c58:	d10b      	bne.n	8015c72 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	691a      	ldr	r2, [r3, #16]
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	689b      	ldr	r3, [r3, #8]
 8015c62:	2100      	movs	r1, #0
 8015c64:	9100      	str	r1, [sp, #0]
 8015c66:	68b9      	ldr	r1, [r7, #8]
 8015c68:	68f8      	ldr	r0, [r7, #12]
 8015c6a:	f000 fe6d 	bl	8016948 <xQueueGenericCreateStatic>
 8015c6e:	61f8      	str	r0, [r7, #28]
 8015c70:	e008      	b.n	8015c84 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8015c72:	69bb      	ldr	r3, [r7, #24]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d105      	bne.n	8015c84 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8015c78:	2200      	movs	r2, #0
 8015c7a:	68b9      	ldr	r1, [r7, #8]
 8015c7c:	68f8      	ldr	r0, [r7, #12]
 8015c7e:	f000 fedb 	bl	8016a38 <xQueueGenericCreate>
 8015c82:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015c84:	69fb      	ldr	r3, [r7, #28]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d00c      	beq.n	8015ca4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d003      	beq.n	8015c98 <osMessageQueueNew+0xd0>
        name = attr->name;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	617b      	str	r3, [r7, #20]
 8015c96:	e001      	b.n	8015c9c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8015c9c:	6979      	ldr	r1, [r7, #20]
 8015c9e:	69f8      	ldr	r0, [r7, #28]
 8015ca0:	f001 fe26 	bl	80178f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015ca4:	69fb      	ldr	r3, [r7, #28]
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3720      	adds	r7, #32
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd80      	pop	{r7, pc}
	...

08015cb0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b088      	sub	sp, #32
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	60f8      	str	r0, [r7, #12]
 8015cb8:	60b9      	str	r1, [r7, #8]
 8015cba:	603b      	str	r3, [r7, #0]
 8015cbc:	4613      	mov	r3, r2
 8015cbe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015cc8:	f3ef 8305 	mrs	r3, IPSR
 8015ccc:	617b      	str	r3, [r7, #20]
  return(result);
 8015cce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d028      	beq.n	8015d26 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015cd4:	69bb      	ldr	r3, [r7, #24]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d005      	beq.n	8015ce6 <osMessageQueuePut+0x36>
 8015cda:	68bb      	ldr	r3, [r7, #8]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d002      	beq.n	8015ce6 <osMessageQueuePut+0x36>
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d003      	beq.n	8015cee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8015ce6:	f06f 0303 	mvn.w	r3, #3
 8015cea:	61fb      	str	r3, [r7, #28]
 8015cec:	e038      	b.n	8015d60 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8015cf2:	f107 0210 	add.w	r2, r7, #16
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	68b9      	ldr	r1, [r7, #8]
 8015cfa:	69b8      	ldr	r0, [r7, #24]
 8015cfc:	f001 f918 	bl	8016f30 <xQueueGenericSendFromISR>
 8015d00:	4603      	mov	r3, r0
 8015d02:	2b01      	cmp	r3, #1
 8015d04:	d003      	beq.n	8015d0e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8015d06:	f06f 0302 	mvn.w	r3, #2
 8015d0a:	61fb      	str	r3, [r7, #28]
 8015d0c:	e028      	b.n	8015d60 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8015d0e:	693b      	ldr	r3, [r7, #16]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d025      	beq.n	8015d60 <osMessageQueuePut+0xb0>
 8015d14:	4b15      	ldr	r3, [pc, #84]	; (8015d6c <osMessageQueuePut+0xbc>)
 8015d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d1a:	601a      	str	r2, [r3, #0]
 8015d1c:	f3bf 8f4f 	dsb	sy
 8015d20:	f3bf 8f6f 	isb	sy
 8015d24:	e01c      	b.n	8015d60 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015d26:	69bb      	ldr	r3, [r7, #24]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d002      	beq.n	8015d32 <osMessageQueuePut+0x82>
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d103      	bne.n	8015d3a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8015d32:	f06f 0303 	mvn.w	r3, #3
 8015d36:	61fb      	str	r3, [r7, #28]
 8015d38:	e012      	b.n	8015d60 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	683a      	ldr	r2, [r7, #0]
 8015d3e:	68b9      	ldr	r1, [r7, #8]
 8015d40:	69b8      	ldr	r0, [r7, #24]
 8015d42:	f000 fff7 	bl	8016d34 <xQueueGenericSend>
 8015d46:	4603      	mov	r3, r0
 8015d48:	2b01      	cmp	r3, #1
 8015d4a:	d009      	beq.n	8015d60 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d003      	beq.n	8015d5a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8015d52:	f06f 0301 	mvn.w	r3, #1
 8015d56:	61fb      	str	r3, [r7, #28]
 8015d58:	e002      	b.n	8015d60 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8015d5a:	f06f 0302 	mvn.w	r3, #2
 8015d5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015d60:	69fb      	ldr	r3, [r7, #28]
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3720      	adds	r7, #32
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
 8015d6a:	bf00      	nop
 8015d6c:	e000ed04 	.word	0xe000ed04

08015d70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b088      	sub	sp, #32
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	60f8      	str	r0, [r7, #12]
 8015d78:	60b9      	str	r1, [r7, #8]
 8015d7a:	607a      	str	r2, [r7, #4]
 8015d7c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015d82:	2300      	movs	r3, #0
 8015d84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015d86:	f3ef 8305 	mrs	r3, IPSR
 8015d8a:	617b      	str	r3, [r7, #20]
  return(result);
 8015d8c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d028      	beq.n	8015de4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015d92:	69bb      	ldr	r3, [r7, #24]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d005      	beq.n	8015da4 <osMessageQueueGet+0x34>
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d002      	beq.n	8015da4 <osMessageQueueGet+0x34>
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d003      	beq.n	8015dac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8015da4:	f06f 0303 	mvn.w	r3, #3
 8015da8:	61fb      	str	r3, [r7, #28]
 8015daa:	e037      	b.n	8015e1c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8015dac:	2300      	movs	r3, #0
 8015dae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8015db0:	f107 0310 	add.w	r3, r7, #16
 8015db4:	461a      	mov	r2, r3
 8015db6:	68b9      	ldr	r1, [r7, #8]
 8015db8:	69b8      	ldr	r0, [r7, #24]
 8015dba:	f001 fbcd 	bl	8017558 <xQueueReceiveFromISR>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b01      	cmp	r3, #1
 8015dc2:	d003      	beq.n	8015dcc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8015dc4:	f06f 0302 	mvn.w	r3, #2
 8015dc8:	61fb      	str	r3, [r7, #28]
 8015dca:	e027      	b.n	8015e1c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8015dcc:	693b      	ldr	r3, [r7, #16]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d024      	beq.n	8015e1c <osMessageQueueGet+0xac>
 8015dd2:	4b15      	ldr	r3, [pc, #84]	; (8015e28 <osMessageQueueGet+0xb8>)
 8015dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dd8:	601a      	str	r2, [r3, #0]
 8015dda:	f3bf 8f4f 	dsb	sy
 8015dde:	f3bf 8f6f 	isb	sy
 8015de2:	e01b      	b.n	8015e1c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015de4:	69bb      	ldr	r3, [r7, #24]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d002      	beq.n	8015df0 <osMessageQueueGet+0x80>
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d103      	bne.n	8015df8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8015df0:	f06f 0303 	mvn.w	r3, #3
 8015df4:	61fb      	str	r3, [r7, #28]
 8015df6:	e011      	b.n	8015e1c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015df8:	683a      	ldr	r2, [r7, #0]
 8015dfa:	68b9      	ldr	r1, [r7, #8]
 8015dfc:	69b8      	ldr	r0, [r7, #24]
 8015dfe:	f001 f9bf 	bl	8017180 <xQueueReceive>
 8015e02:	4603      	mov	r3, r0
 8015e04:	2b01      	cmp	r3, #1
 8015e06:	d009      	beq.n	8015e1c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d003      	beq.n	8015e16 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8015e0e:	f06f 0301 	mvn.w	r3, #1
 8015e12:	61fb      	str	r3, [r7, #28]
 8015e14:	e002      	b.n	8015e1c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8015e16:	f06f 0302 	mvn.w	r3, #2
 8015e1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015e1c:	69fb      	ldr	r3, [r7, #28]
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3720      	adds	r7, #32
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop
 8015e28:	e000ed04 	.word	0xe000ed04

08015e2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015e2c:	b480      	push	{r7}
 8015e2e:	b085      	sub	sp, #20
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	60f8      	str	r0, [r7, #12]
 8015e34:	60b9      	str	r1, [r7, #8]
 8015e36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	4a07      	ldr	r2, [pc, #28]	; (8015e58 <vApplicationGetIdleTaskMemory+0x2c>)
 8015e3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	4a06      	ldr	r2, [pc, #24]	; (8015e5c <vApplicationGetIdleTaskMemory+0x30>)
 8015e42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2280      	movs	r2, #128	; 0x80
 8015e48:	601a      	str	r2, [r3, #0]
}
 8015e4a:	bf00      	nop
 8015e4c:	3714      	adds	r7, #20
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e54:	4770      	bx	lr
 8015e56:	bf00      	nop
 8015e58:	2400db2c 	.word	0x2400db2c
 8015e5c:	2400db8c 	.word	0x2400db8c

08015e60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015e60:	b480      	push	{r7}
 8015e62:	b085      	sub	sp, #20
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	60f8      	str	r0, [r7, #12]
 8015e68:	60b9      	str	r1, [r7, #8]
 8015e6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	4a07      	ldr	r2, [pc, #28]	; (8015e8c <vApplicationGetTimerTaskMemory+0x2c>)
 8015e70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015e72:	68bb      	ldr	r3, [r7, #8]
 8015e74:	4a06      	ldr	r2, [pc, #24]	; (8015e90 <vApplicationGetTimerTaskMemory+0x30>)
 8015e76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015e7e:	601a      	str	r2, [r3, #0]
}
 8015e80:	bf00      	nop
 8015e82:	3714      	adds	r7, #20
 8015e84:	46bd      	mov	sp, r7
 8015e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8a:	4770      	bx	lr
 8015e8c:	2400dd8c 	.word	0x2400dd8c
 8015e90:	2400ddec 	.word	0x2400ddec

08015e94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b08a      	sub	sp, #40	; 0x28
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015ea0:	f001 fff4 	bl	8017e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015ea4:	4b5b      	ldr	r3, [pc, #364]	; (8016014 <pvPortMalloc+0x180>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d101      	bne.n	8015eb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015eac:	f000 f920 	bl	80160f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015eb0:	4b59      	ldr	r3, [pc, #356]	; (8016018 <pvPortMalloc+0x184>)
 8015eb2:	681a      	ldr	r2, [r3, #0]
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	4013      	ands	r3, r2
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	f040 8093 	bne.w	8015fe4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d01d      	beq.n	8015f00 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015ec4:	2208      	movs	r2, #8
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	4413      	add	r3, r2
 8015eca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f003 0307 	and.w	r3, r3, #7
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d014      	beq.n	8015f00 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f023 0307 	bic.w	r3, r3, #7
 8015edc:	3308      	adds	r3, #8
 8015ede:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f003 0307 	and.w	r3, r3, #7
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d00a      	beq.n	8015f00 <pvPortMalloc+0x6c>
	__asm volatile
 8015eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eee:	f383 8811 	msr	BASEPRI, r3
 8015ef2:	f3bf 8f6f 	isb	sy
 8015ef6:	f3bf 8f4f 	dsb	sy
 8015efa:	617b      	str	r3, [r7, #20]
}
 8015efc:	bf00      	nop
 8015efe:	e7fe      	b.n	8015efe <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d06e      	beq.n	8015fe4 <pvPortMalloc+0x150>
 8015f06:	4b45      	ldr	r3, [pc, #276]	; (801601c <pvPortMalloc+0x188>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	d869      	bhi.n	8015fe4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f10:	4b43      	ldr	r3, [pc, #268]	; (8016020 <pvPortMalloc+0x18c>)
 8015f12:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015f14:	4b42      	ldr	r3, [pc, #264]	; (8016020 <pvPortMalloc+0x18c>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f1a:	e004      	b.n	8015f26 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f28:	685b      	ldr	r3, [r3, #4]
 8015f2a:	687a      	ldr	r2, [r7, #4]
 8015f2c:	429a      	cmp	r2, r3
 8015f2e:	d903      	bls.n	8015f38 <pvPortMalloc+0xa4>
 8015f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d1f1      	bne.n	8015f1c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015f38:	4b36      	ldr	r3, [pc, #216]	; (8016014 <pvPortMalloc+0x180>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d050      	beq.n	8015fe4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015f42:	6a3b      	ldr	r3, [r7, #32]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	2208      	movs	r2, #8
 8015f48:	4413      	add	r3, r2
 8015f4a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4e:	681a      	ldr	r2, [r3, #0]
 8015f50:	6a3b      	ldr	r3, [r7, #32]
 8015f52:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f56:	685a      	ldr	r2, [r3, #4]
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	1ad2      	subs	r2, r2, r3
 8015f5c:	2308      	movs	r3, #8
 8015f5e:	005b      	lsls	r3, r3, #1
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d91f      	bls.n	8015fa4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	4413      	add	r3, r2
 8015f6a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f6c:	69bb      	ldr	r3, [r7, #24]
 8015f6e:	f003 0307 	and.w	r3, r3, #7
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d00a      	beq.n	8015f8c <pvPortMalloc+0xf8>
	__asm volatile
 8015f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f7a:	f383 8811 	msr	BASEPRI, r3
 8015f7e:	f3bf 8f6f 	isb	sy
 8015f82:	f3bf 8f4f 	dsb	sy
 8015f86:	613b      	str	r3, [r7, #16]
}
 8015f88:	bf00      	nop
 8015f8a:	e7fe      	b.n	8015f8a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f8e:	685a      	ldr	r2, [r3, #4]
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	1ad2      	subs	r2, r2, r3
 8015f94:	69bb      	ldr	r3, [r7, #24]
 8015f96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f9a:	687a      	ldr	r2, [r7, #4]
 8015f9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015f9e:	69b8      	ldr	r0, [r7, #24]
 8015fa0:	f000 f90a 	bl	80161b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015fa4:	4b1d      	ldr	r3, [pc, #116]	; (801601c <pvPortMalloc+0x188>)
 8015fa6:	681a      	ldr	r2, [r3, #0]
 8015fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015faa:	685b      	ldr	r3, [r3, #4]
 8015fac:	1ad3      	subs	r3, r2, r3
 8015fae:	4a1b      	ldr	r2, [pc, #108]	; (801601c <pvPortMalloc+0x188>)
 8015fb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015fb2:	4b1a      	ldr	r3, [pc, #104]	; (801601c <pvPortMalloc+0x188>)
 8015fb4:	681a      	ldr	r2, [r3, #0]
 8015fb6:	4b1b      	ldr	r3, [pc, #108]	; (8016024 <pvPortMalloc+0x190>)
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d203      	bcs.n	8015fc6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015fbe:	4b17      	ldr	r3, [pc, #92]	; (801601c <pvPortMalloc+0x188>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	4a18      	ldr	r2, [pc, #96]	; (8016024 <pvPortMalloc+0x190>)
 8015fc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc8:	685a      	ldr	r2, [r3, #4]
 8015fca:	4b13      	ldr	r3, [pc, #76]	; (8016018 <pvPortMalloc+0x184>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	431a      	orrs	r2, r3
 8015fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015fda:	4b13      	ldr	r3, [pc, #76]	; (8016028 <pvPortMalloc+0x194>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	3301      	adds	r3, #1
 8015fe0:	4a11      	ldr	r2, [pc, #68]	; (8016028 <pvPortMalloc+0x194>)
 8015fe2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015fe4:	f001 ff60 	bl	8017ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015fe8:	69fb      	ldr	r3, [r7, #28]
 8015fea:	f003 0307 	and.w	r3, r3, #7
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d00a      	beq.n	8016008 <pvPortMalloc+0x174>
	__asm volatile
 8015ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff6:	f383 8811 	msr	BASEPRI, r3
 8015ffa:	f3bf 8f6f 	isb	sy
 8015ffe:	f3bf 8f4f 	dsb	sy
 8016002:	60fb      	str	r3, [r7, #12]
}
 8016004:	bf00      	nop
 8016006:	e7fe      	b.n	8016006 <pvPortMalloc+0x172>
	return pvReturn;
 8016008:	69fb      	ldr	r3, [r7, #28]
}
 801600a:	4618      	mov	r0, r3
 801600c:	3728      	adds	r7, #40	; 0x28
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}
 8016012:	bf00      	nop
 8016014:	24026894 	.word	0x24026894
 8016018:	240268a8 	.word	0x240268a8
 801601c:	24026898 	.word	0x24026898
 8016020:	2402688c 	.word	0x2402688c
 8016024:	2402689c 	.word	0x2402689c
 8016028:	240268a0 	.word	0x240268a0

0801602c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b086      	sub	sp, #24
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d04d      	beq.n	80160da <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801603e:	2308      	movs	r3, #8
 8016040:	425b      	negs	r3, r3
 8016042:	697a      	ldr	r2, [r7, #20]
 8016044:	4413      	add	r3, r2
 8016046:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	685a      	ldr	r2, [r3, #4]
 8016050:	4b24      	ldr	r3, [pc, #144]	; (80160e4 <vPortFree+0xb8>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	4013      	ands	r3, r2
 8016056:	2b00      	cmp	r3, #0
 8016058:	d10a      	bne.n	8016070 <vPortFree+0x44>
	__asm volatile
 801605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801605e:	f383 8811 	msr	BASEPRI, r3
 8016062:	f3bf 8f6f 	isb	sy
 8016066:	f3bf 8f4f 	dsb	sy
 801606a:	60fb      	str	r3, [r7, #12]
}
 801606c:	bf00      	nop
 801606e:	e7fe      	b.n	801606e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016070:	693b      	ldr	r3, [r7, #16]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d00a      	beq.n	801608e <vPortFree+0x62>
	__asm volatile
 8016078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801607c:	f383 8811 	msr	BASEPRI, r3
 8016080:	f3bf 8f6f 	isb	sy
 8016084:	f3bf 8f4f 	dsb	sy
 8016088:	60bb      	str	r3, [r7, #8]
}
 801608a:	bf00      	nop
 801608c:	e7fe      	b.n	801608c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801608e:	693b      	ldr	r3, [r7, #16]
 8016090:	685a      	ldr	r2, [r3, #4]
 8016092:	4b14      	ldr	r3, [pc, #80]	; (80160e4 <vPortFree+0xb8>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	4013      	ands	r3, r2
 8016098:	2b00      	cmp	r3, #0
 801609a:	d01e      	beq.n	80160da <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801609c:	693b      	ldr	r3, [r7, #16]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d11a      	bne.n	80160da <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	685a      	ldr	r2, [r3, #4]
 80160a8:	4b0e      	ldr	r3, [pc, #56]	; (80160e4 <vPortFree+0xb8>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	43db      	mvns	r3, r3
 80160ae:	401a      	ands	r2, r3
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80160b4:	f001 feea 	bl	8017e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	685a      	ldr	r2, [r3, #4]
 80160bc:	4b0a      	ldr	r3, [pc, #40]	; (80160e8 <vPortFree+0xbc>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	4413      	add	r3, r2
 80160c2:	4a09      	ldr	r2, [pc, #36]	; (80160e8 <vPortFree+0xbc>)
 80160c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80160c6:	6938      	ldr	r0, [r7, #16]
 80160c8:	f000 f876 	bl	80161b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80160cc:	4b07      	ldr	r3, [pc, #28]	; (80160ec <vPortFree+0xc0>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	3301      	adds	r3, #1
 80160d2:	4a06      	ldr	r2, [pc, #24]	; (80160ec <vPortFree+0xc0>)
 80160d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80160d6:	f001 fee7 	bl	8017ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80160da:	bf00      	nop
 80160dc:	3718      	adds	r7, #24
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}
 80160e2:	bf00      	nop
 80160e4:	240268a8 	.word	0x240268a8
 80160e8:	24026898 	.word	0x24026898
 80160ec:	240268a4 	.word	0x240268a4

080160f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80160f0:	b480      	push	{r7}
 80160f2:	b085      	sub	sp, #20
 80160f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80160f6:	4b29      	ldr	r3, [pc, #164]	; (801619c <prvHeapInit+0xac>)
 80160f8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80160fa:	4b29      	ldr	r3, [pc, #164]	; (80161a0 <prvHeapInit+0xb0>)
 80160fc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	f003 0307 	and.w	r3, r3, #7
 8016104:	2b00      	cmp	r3, #0
 8016106:	d00c      	beq.n	8016122 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	3307      	adds	r3, #7
 801610c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	f023 0307 	bic.w	r3, r3, #7
 8016114:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016116:	68ba      	ldr	r2, [r7, #8]
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	1ad3      	subs	r3, r2, r3
 801611c:	4a20      	ldr	r2, [pc, #128]	; (80161a0 <prvHeapInit+0xb0>)
 801611e:	4413      	add	r3, r2
 8016120:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016126:	4a1f      	ldr	r2, [pc, #124]	; (80161a4 <prvHeapInit+0xb4>)
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801612c:	4b1d      	ldr	r3, [pc, #116]	; (80161a4 <prvHeapInit+0xb4>)
 801612e:	2200      	movs	r2, #0
 8016130:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	68ba      	ldr	r2, [r7, #8]
 8016136:	4413      	add	r3, r2
 8016138:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801613a:	2208      	movs	r2, #8
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	1a9b      	subs	r3, r3, r2
 8016140:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	f023 0307 	bic.w	r3, r3, #7
 8016148:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	4a16      	ldr	r2, [pc, #88]	; (80161a8 <prvHeapInit+0xb8>)
 801614e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016150:	4b15      	ldr	r3, [pc, #84]	; (80161a8 <prvHeapInit+0xb8>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	2200      	movs	r2, #0
 8016156:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016158:	4b13      	ldr	r3, [pc, #76]	; (80161a8 <prvHeapInit+0xb8>)
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	2200      	movs	r2, #0
 801615e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	68fa      	ldr	r2, [r7, #12]
 8016168:	1ad2      	subs	r2, r2, r3
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801616e:	4b0e      	ldr	r3, [pc, #56]	; (80161a8 <prvHeapInit+0xb8>)
 8016170:	681a      	ldr	r2, [r3, #0]
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	685b      	ldr	r3, [r3, #4]
 801617a:	4a0c      	ldr	r2, [pc, #48]	; (80161ac <prvHeapInit+0xbc>)
 801617c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	4a0b      	ldr	r2, [pc, #44]	; (80161b0 <prvHeapInit+0xc0>)
 8016184:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016186:	4b0b      	ldr	r3, [pc, #44]	; (80161b4 <prvHeapInit+0xc4>)
 8016188:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801618c:	601a      	str	r2, [r3, #0]
}
 801618e:	bf00      	nop
 8016190:	3714      	adds	r7, #20
 8016192:	46bd      	mov	sp, r7
 8016194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016198:	4770      	bx	lr
 801619a:	bf00      	nop
 801619c:	000186a0 	.word	0x000186a0
 80161a0:	2400e1ec 	.word	0x2400e1ec
 80161a4:	2402688c 	.word	0x2402688c
 80161a8:	24026894 	.word	0x24026894
 80161ac:	2402689c 	.word	0x2402689c
 80161b0:	24026898 	.word	0x24026898
 80161b4:	240268a8 	.word	0x240268a8

080161b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80161b8:	b480      	push	{r7}
 80161ba:	b085      	sub	sp, #20
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80161c0:	4b28      	ldr	r3, [pc, #160]	; (8016264 <prvInsertBlockIntoFreeList+0xac>)
 80161c2:	60fb      	str	r3, [r7, #12]
 80161c4:	e002      	b.n	80161cc <prvInsertBlockIntoFreeList+0x14>
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	60fb      	str	r3, [r7, #12]
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	687a      	ldr	r2, [r7, #4]
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d8f7      	bhi.n	80161c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	685b      	ldr	r3, [r3, #4]
 80161de:	68ba      	ldr	r2, [r7, #8]
 80161e0:	4413      	add	r3, r2
 80161e2:	687a      	ldr	r2, [r7, #4]
 80161e4:	429a      	cmp	r2, r3
 80161e6:	d108      	bne.n	80161fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	685a      	ldr	r2, [r3, #4]
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	685b      	ldr	r3, [r3, #4]
 80161f0:	441a      	add	r2, r3
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	68ba      	ldr	r2, [r7, #8]
 8016204:	441a      	add	r2, r3
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	429a      	cmp	r2, r3
 801620c:	d118      	bne.n	8016240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681a      	ldr	r2, [r3, #0]
 8016212:	4b15      	ldr	r3, [pc, #84]	; (8016268 <prvInsertBlockIntoFreeList+0xb0>)
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	429a      	cmp	r2, r3
 8016218:	d00d      	beq.n	8016236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	685a      	ldr	r2, [r3, #4]
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	685b      	ldr	r3, [r3, #4]
 8016224:	441a      	add	r2, r3
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	681a      	ldr	r2, [r3, #0]
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	601a      	str	r2, [r3, #0]
 8016234:	e008      	b.n	8016248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016236:	4b0c      	ldr	r3, [pc, #48]	; (8016268 <prvInsertBlockIntoFreeList+0xb0>)
 8016238:	681a      	ldr	r2, [r3, #0]
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	601a      	str	r2, [r3, #0]
 801623e:	e003      	b.n	8016248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	681a      	ldr	r2, [r3, #0]
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016248:	68fa      	ldr	r2, [r7, #12]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	429a      	cmp	r2, r3
 801624e:	d002      	beq.n	8016256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	687a      	ldr	r2, [r7, #4]
 8016254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016256:	bf00      	nop
 8016258:	3714      	adds	r7, #20
 801625a:	46bd      	mov	sp, r7
 801625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016260:	4770      	bx	lr
 8016262:	bf00      	nop
 8016264:	2402688c 	.word	0x2402688c
 8016268:	24026894 	.word	0x24026894

0801626c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801626c:	b480      	push	{r7}
 801626e:	b083      	sub	sp, #12
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f103 0208 	add.w	r2, r3, #8
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f04f 32ff 	mov.w	r2, #4294967295
 8016284:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	f103 0208 	add.w	r2, r3, #8
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	f103 0208 	add.w	r2, r3, #8
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	2200      	movs	r2, #0
 801629e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80162a0:	bf00      	nop
 80162a2:	370c      	adds	r7, #12
 80162a4:	46bd      	mov	sp, r7
 80162a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162aa:	4770      	bx	lr

080162ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80162ac:	b480      	push	{r7}
 80162ae:	b083      	sub	sp, #12
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2200      	movs	r2, #0
 80162b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80162ba:	bf00      	nop
 80162bc:	370c      	adds	r7, #12
 80162be:	46bd      	mov	sp, r7
 80162c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c4:	4770      	bx	lr

080162c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80162c6:	b480      	push	{r7}
 80162c8:	b085      	sub	sp, #20
 80162ca:	af00      	add	r7, sp, #0
 80162cc:	6078      	str	r0, [r7, #4]
 80162ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	685b      	ldr	r3, [r3, #4]
 80162d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80162d6:	683b      	ldr	r3, [r7, #0]
 80162d8:	68fa      	ldr	r2, [r7, #12]
 80162da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	689a      	ldr	r2, [r3, #8]
 80162e0:	683b      	ldr	r3, [r7, #0]
 80162e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	689b      	ldr	r3, [r3, #8]
 80162e8:	683a      	ldr	r2, [r7, #0]
 80162ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	683a      	ldr	r2, [r7, #0]
 80162f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	1c5a      	adds	r2, r3, #1
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	601a      	str	r2, [r3, #0]
}
 8016302:	bf00      	nop
 8016304:	3714      	adds	r7, #20
 8016306:	46bd      	mov	sp, r7
 8016308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630c:	4770      	bx	lr

0801630e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801630e:	b480      	push	{r7}
 8016310:	b085      	sub	sp, #20
 8016312:	af00      	add	r7, sp, #0
 8016314:	6078      	str	r0, [r7, #4]
 8016316:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016324:	d103      	bne.n	801632e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	691b      	ldr	r3, [r3, #16]
 801632a:	60fb      	str	r3, [r7, #12]
 801632c:	e00c      	b.n	8016348 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	3308      	adds	r3, #8
 8016332:	60fb      	str	r3, [r7, #12]
 8016334:	e002      	b.n	801633c <vListInsert+0x2e>
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	60fb      	str	r3, [r7, #12]
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	68ba      	ldr	r2, [r7, #8]
 8016344:	429a      	cmp	r2, r3
 8016346:	d2f6      	bcs.n	8016336 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	685a      	ldr	r2, [r3, #4]
 801634c:	683b      	ldr	r3, [r7, #0]
 801634e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016350:	683b      	ldr	r3, [r7, #0]
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	683a      	ldr	r2, [r7, #0]
 8016356:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	68fa      	ldr	r2, [r7, #12]
 801635c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	683a      	ldr	r2, [r7, #0]
 8016362:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016364:	683b      	ldr	r3, [r7, #0]
 8016366:	687a      	ldr	r2, [r7, #4]
 8016368:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	1c5a      	adds	r2, r3, #1
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	601a      	str	r2, [r3, #0]
}
 8016374:	bf00      	nop
 8016376:	3714      	adds	r7, #20
 8016378:	46bd      	mov	sp, r7
 801637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637e:	4770      	bx	lr

08016380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016380:	b480      	push	{r7}
 8016382:	b085      	sub	sp, #20
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	691b      	ldr	r3, [r3, #16]
 801638c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	685b      	ldr	r3, [r3, #4]
 8016392:	687a      	ldr	r2, [r7, #4]
 8016394:	6892      	ldr	r2, [r2, #8]
 8016396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	689b      	ldr	r3, [r3, #8]
 801639c:	687a      	ldr	r2, [r7, #4]
 801639e:	6852      	ldr	r2, [r2, #4]
 80163a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	685b      	ldr	r3, [r3, #4]
 80163a6:	687a      	ldr	r2, [r7, #4]
 80163a8:	429a      	cmp	r2, r3
 80163aa:	d103      	bne.n	80163b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	689a      	ldr	r2, [r3, #8]
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2200      	movs	r2, #0
 80163b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	1e5a      	subs	r2, r3, #1
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	681b      	ldr	r3, [r3, #0]
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	3714      	adds	r7, #20
 80163cc:	46bd      	mov	sp, r7
 80163ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d2:	4770      	bx	lr

080163d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80163d4:	b480      	push	{r7}
 80163d6:	b085      	sub	sp, #20
 80163d8:	af00      	add	r7, sp, #0
 80163da:	60f8      	str	r0, [r7, #12]
 80163dc:	60b9      	str	r1, [r7, #8]
 80163de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	3b04      	subs	r3, #4
 80163e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80163ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	3b04      	subs	r3, #4
 80163f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	f023 0201 	bic.w	r2, r3, #1
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	3b04      	subs	r3, #4
 8016402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016404:	4a0c      	ldr	r2, [pc, #48]	; (8016438 <pxPortInitialiseStack+0x64>)
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	3b14      	subs	r3, #20
 801640e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016410:	687a      	ldr	r2, [r7, #4]
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	3b04      	subs	r3, #4
 801641a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	f06f 0202 	mvn.w	r2, #2
 8016422:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	3b20      	subs	r3, #32
 8016428:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801642a:	68fb      	ldr	r3, [r7, #12]
}
 801642c:	4618      	mov	r0, r3
 801642e:	3714      	adds	r7, #20
 8016430:	46bd      	mov	sp, r7
 8016432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016436:	4770      	bx	lr
 8016438:	0801643d 	.word	0x0801643d

0801643c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801643c:	b480      	push	{r7}
 801643e:	b085      	sub	sp, #20
 8016440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016442:	2300      	movs	r3, #0
 8016444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016446:	4b12      	ldr	r3, [pc, #72]	; (8016490 <prvTaskExitError+0x54>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801644e:	d00a      	beq.n	8016466 <prvTaskExitError+0x2a>
	__asm volatile
 8016450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016454:	f383 8811 	msr	BASEPRI, r3
 8016458:	f3bf 8f6f 	isb	sy
 801645c:	f3bf 8f4f 	dsb	sy
 8016460:	60fb      	str	r3, [r7, #12]
}
 8016462:	bf00      	nop
 8016464:	e7fe      	b.n	8016464 <prvTaskExitError+0x28>
	__asm volatile
 8016466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801646a:	f383 8811 	msr	BASEPRI, r3
 801646e:	f3bf 8f6f 	isb	sy
 8016472:	f3bf 8f4f 	dsb	sy
 8016476:	60bb      	str	r3, [r7, #8]
}
 8016478:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801647a:	bf00      	nop
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d0fc      	beq.n	801647c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016482:	bf00      	nop
 8016484:	bf00      	nop
 8016486:	3714      	adds	r7, #20
 8016488:	46bd      	mov	sp, r7
 801648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648e:	4770      	bx	lr
 8016490:	24000064 	.word	0x24000064
	...

080164a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80164a0:	4b07      	ldr	r3, [pc, #28]	; (80164c0 <pxCurrentTCBConst2>)
 80164a2:	6819      	ldr	r1, [r3, #0]
 80164a4:	6808      	ldr	r0, [r1, #0]
 80164a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164aa:	f380 8809 	msr	PSP, r0
 80164ae:	f3bf 8f6f 	isb	sy
 80164b2:	f04f 0000 	mov.w	r0, #0
 80164b6:	f380 8811 	msr	BASEPRI, r0
 80164ba:	4770      	bx	lr
 80164bc:	f3af 8000 	nop.w

080164c0 <pxCurrentTCBConst2>:
 80164c0:	240268f4 	.word	0x240268f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80164c4:	bf00      	nop
 80164c6:	bf00      	nop

080164c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80164c8:	4808      	ldr	r0, [pc, #32]	; (80164ec <prvPortStartFirstTask+0x24>)
 80164ca:	6800      	ldr	r0, [r0, #0]
 80164cc:	6800      	ldr	r0, [r0, #0]
 80164ce:	f380 8808 	msr	MSP, r0
 80164d2:	f04f 0000 	mov.w	r0, #0
 80164d6:	f380 8814 	msr	CONTROL, r0
 80164da:	b662      	cpsie	i
 80164dc:	b661      	cpsie	f
 80164de:	f3bf 8f4f 	dsb	sy
 80164e2:	f3bf 8f6f 	isb	sy
 80164e6:	df00      	svc	0
 80164e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80164ea:	bf00      	nop
 80164ec:	e000ed08 	.word	0xe000ed08

080164f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b086      	sub	sp, #24
 80164f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80164f6:	4b46      	ldr	r3, [pc, #280]	; (8016610 <xPortStartScheduler+0x120>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	4a46      	ldr	r2, [pc, #280]	; (8016614 <xPortStartScheduler+0x124>)
 80164fc:	4293      	cmp	r3, r2
 80164fe:	d10a      	bne.n	8016516 <xPortStartScheduler+0x26>
	__asm volatile
 8016500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016504:	f383 8811 	msr	BASEPRI, r3
 8016508:	f3bf 8f6f 	isb	sy
 801650c:	f3bf 8f4f 	dsb	sy
 8016510:	613b      	str	r3, [r7, #16]
}
 8016512:	bf00      	nop
 8016514:	e7fe      	b.n	8016514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016516:	4b3e      	ldr	r3, [pc, #248]	; (8016610 <xPortStartScheduler+0x120>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	4a3f      	ldr	r2, [pc, #252]	; (8016618 <xPortStartScheduler+0x128>)
 801651c:	4293      	cmp	r3, r2
 801651e:	d10a      	bne.n	8016536 <xPortStartScheduler+0x46>
	__asm volatile
 8016520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016524:	f383 8811 	msr	BASEPRI, r3
 8016528:	f3bf 8f6f 	isb	sy
 801652c:	f3bf 8f4f 	dsb	sy
 8016530:	60fb      	str	r3, [r7, #12]
}
 8016532:	bf00      	nop
 8016534:	e7fe      	b.n	8016534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016536:	4b39      	ldr	r3, [pc, #228]	; (801661c <xPortStartScheduler+0x12c>)
 8016538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801653a:	697b      	ldr	r3, [r7, #20]
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	b2db      	uxtb	r3, r3
 8016540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016542:	697b      	ldr	r3, [r7, #20]
 8016544:	22ff      	movs	r2, #255	; 0xff
 8016546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	781b      	ldrb	r3, [r3, #0]
 801654c:	b2db      	uxtb	r3, r3
 801654e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016550:	78fb      	ldrb	r3, [r7, #3]
 8016552:	b2db      	uxtb	r3, r3
 8016554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016558:	b2da      	uxtb	r2, r3
 801655a:	4b31      	ldr	r3, [pc, #196]	; (8016620 <xPortStartScheduler+0x130>)
 801655c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801655e:	4b31      	ldr	r3, [pc, #196]	; (8016624 <xPortStartScheduler+0x134>)
 8016560:	2207      	movs	r2, #7
 8016562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016564:	e009      	b.n	801657a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016566:	4b2f      	ldr	r3, [pc, #188]	; (8016624 <xPortStartScheduler+0x134>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	3b01      	subs	r3, #1
 801656c:	4a2d      	ldr	r2, [pc, #180]	; (8016624 <xPortStartScheduler+0x134>)
 801656e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016570:	78fb      	ldrb	r3, [r7, #3]
 8016572:	b2db      	uxtb	r3, r3
 8016574:	005b      	lsls	r3, r3, #1
 8016576:	b2db      	uxtb	r3, r3
 8016578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801657a:	78fb      	ldrb	r3, [r7, #3]
 801657c:	b2db      	uxtb	r3, r3
 801657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016582:	2b80      	cmp	r3, #128	; 0x80
 8016584:	d0ef      	beq.n	8016566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016586:	4b27      	ldr	r3, [pc, #156]	; (8016624 <xPortStartScheduler+0x134>)
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	f1c3 0307 	rsb	r3, r3, #7
 801658e:	2b04      	cmp	r3, #4
 8016590:	d00a      	beq.n	80165a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8016592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016596:	f383 8811 	msr	BASEPRI, r3
 801659a:	f3bf 8f6f 	isb	sy
 801659e:	f3bf 8f4f 	dsb	sy
 80165a2:	60bb      	str	r3, [r7, #8]
}
 80165a4:	bf00      	nop
 80165a6:	e7fe      	b.n	80165a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80165a8:	4b1e      	ldr	r3, [pc, #120]	; (8016624 <xPortStartScheduler+0x134>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	021b      	lsls	r3, r3, #8
 80165ae:	4a1d      	ldr	r2, [pc, #116]	; (8016624 <xPortStartScheduler+0x134>)
 80165b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80165b2:	4b1c      	ldr	r3, [pc, #112]	; (8016624 <xPortStartScheduler+0x134>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80165ba:	4a1a      	ldr	r2, [pc, #104]	; (8016624 <xPortStartScheduler+0x134>)
 80165bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	b2da      	uxtb	r2, r3
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80165c6:	4b18      	ldr	r3, [pc, #96]	; (8016628 <xPortStartScheduler+0x138>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	4a17      	ldr	r2, [pc, #92]	; (8016628 <xPortStartScheduler+0x138>)
 80165cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80165d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80165d2:	4b15      	ldr	r3, [pc, #84]	; (8016628 <xPortStartScheduler+0x138>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	4a14      	ldr	r2, [pc, #80]	; (8016628 <xPortStartScheduler+0x138>)
 80165d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80165dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80165de:	f000 f8dd 	bl	801679c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80165e2:	4b12      	ldr	r3, [pc, #72]	; (801662c <xPortStartScheduler+0x13c>)
 80165e4:	2200      	movs	r2, #0
 80165e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80165e8:	f000 f8fc 	bl	80167e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80165ec:	4b10      	ldr	r3, [pc, #64]	; (8016630 <xPortStartScheduler+0x140>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	4a0f      	ldr	r2, [pc, #60]	; (8016630 <xPortStartScheduler+0x140>)
 80165f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80165f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80165f8:	f7ff ff66 	bl	80164c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80165fc:	f001 fdfa 	bl	80181f4 <vTaskSwitchContext>
	prvTaskExitError();
 8016600:	f7ff ff1c 	bl	801643c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016604:	2300      	movs	r3, #0
}
 8016606:	4618      	mov	r0, r3
 8016608:	3718      	adds	r7, #24
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	e000ed00 	.word	0xe000ed00
 8016614:	410fc271 	.word	0x410fc271
 8016618:	410fc270 	.word	0x410fc270
 801661c:	e000e400 	.word	0xe000e400
 8016620:	240268ac 	.word	0x240268ac
 8016624:	240268b0 	.word	0x240268b0
 8016628:	e000ed20 	.word	0xe000ed20
 801662c:	24000064 	.word	0x24000064
 8016630:	e000ef34 	.word	0xe000ef34

08016634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016634:	b480      	push	{r7}
 8016636:	b083      	sub	sp, #12
 8016638:	af00      	add	r7, sp, #0
	__asm volatile
 801663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801663e:	f383 8811 	msr	BASEPRI, r3
 8016642:	f3bf 8f6f 	isb	sy
 8016646:	f3bf 8f4f 	dsb	sy
 801664a:	607b      	str	r3, [r7, #4]
}
 801664c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801664e:	4b0f      	ldr	r3, [pc, #60]	; (801668c <vPortEnterCritical+0x58>)
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	3301      	adds	r3, #1
 8016654:	4a0d      	ldr	r2, [pc, #52]	; (801668c <vPortEnterCritical+0x58>)
 8016656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016658:	4b0c      	ldr	r3, [pc, #48]	; (801668c <vPortEnterCritical+0x58>)
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	2b01      	cmp	r3, #1
 801665e:	d10f      	bne.n	8016680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016660:	4b0b      	ldr	r3, [pc, #44]	; (8016690 <vPortEnterCritical+0x5c>)
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	b2db      	uxtb	r3, r3
 8016666:	2b00      	cmp	r3, #0
 8016668:	d00a      	beq.n	8016680 <vPortEnterCritical+0x4c>
	__asm volatile
 801666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801666e:	f383 8811 	msr	BASEPRI, r3
 8016672:	f3bf 8f6f 	isb	sy
 8016676:	f3bf 8f4f 	dsb	sy
 801667a:	603b      	str	r3, [r7, #0]
}
 801667c:	bf00      	nop
 801667e:	e7fe      	b.n	801667e <vPortEnterCritical+0x4a>
	}
}
 8016680:	bf00      	nop
 8016682:	370c      	adds	r7, #12
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr
 801668c:	24000064 	.word	0x24000064
 8016690:	e000ed04 	.word	0xe000ed04

08016694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016694:	b480      	push	{r7}
 8016696:	b083      	sub	sp, #12
 8016698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801669a:	4b12      	ldr	r3, [pc, #72]	; (80166e4 <vPortExitCritical+0x50>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d10a      	bne.n	80166b8 <vPortExitCritical+0x24>
	__asm volatile
 80166a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a6:	f383 8811 	msr	BASEPRI, r3
 80166aa:	f3bf 8f6f 	isb	sy
 80166ae:	f3bf 8f4f 	dsb	sy
 80166b2:	607b      	str	r3, [r7, #4]
}
 80166b4:	bf00      	nop
 80166b6:	e7fe      	b.n	80166b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80166b8:	4b0a      	ldr	r3, [pc, #40]	; (80166e4 <vPortExitCritical+0x50>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	3b01      	subs	r3, #1
 80166be:	4a09      	ldr	r2, [pc, #36]	; (80166e4 <vPortExitCritical+0x50>)
 80166c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80166c2:	4b08      	ldr	r3, [pc, #32]	; (80166e4 <vPortExitCritical+0x50>)
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d105      	bne.n	80166d6 <vPortExitCritical+0x42>
 80166ca:	2300      	movs	r3, #0
 80166cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80166ce:	683b      	ldr	r3, [r7, #0]
 80166d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80166d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80166d6:	bf00      	nop
 80166d8:	370c      	adds	r7, #12
 80166da:	46bd      	mov	sp, r7
 80166dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e0:	4770      	bx	lr
 80166e2:	bf00      	nop
 80166e4:	24000064 	.word	0x24000064
	...

080166f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80166f0:	f3ef 8009 	mrs	r0, PSP
 80166f4:	f3bf 8f6f 	isb	sy
 80166f8:	4b15      	ldr	r3, [pc, #84]	; (8016750 <pxCurrentTCBConst>)
 80166fa:	681a      	ldr	r2, [r3, #0]
 80166fc:	f01e 0f10 	tst.w	lr, #16
 8016700:	bf08      	it	eq
 8016702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801670a:	6010      	str	r0, [r2, #0]
 801670c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016714:	f380 8811 	msr	BASEPRI, r0
 8016718:	f3bf 8f4f 	dsb	sy
 801671c:	f3bf 8f6f 	isb	sy
 8016720:	f001 fd68 	bl	80181f4 <vTaskSwitchContext>
 8016724:	f04f 0000 	mov.w	r0, #0
 8016728:	f380 8811 	msr	BASEPRI, r0
 801672c:	bc09      	pop	{r0, r3}
 801672e:	6819      	ldr	r1, [r3, #0]
 8016730:	6808      	ldr	r0, [r1, #0]
 8016732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016736:	f01e 0f10 	tst.w	lr, #16
 801673a:	bf08      	it	eq
 801673c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016740:	f380 8809 	msr	PSP, r0
 8016744:	f3bf 8f6f 	isb	sy
 8016748:	4770      	bx	lr
 801674a:	bf00      	nop
 801674c:	f3af 8000 	nop.w

08016750 <pxCurrentTCBConst>:
 8016750:	240268f4 	.word	0x240268f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016754:	bf00      	nop
 8016756:	bf00      	nop

08016758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b082      	sub	sp, #8
 801675c:	af00      	add	r7, sp, #0
	__asm volatile
 801675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016762:	f383 8811 	msr	BASEPRI, r3
 8016766:	f3bf 8f6f 	isb	sy
 801676a:	f3bf 8f4f 	dsb	sy
 801676e:	607b      	str	r3, [r7, #4]
}
 8016770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016772:	f001 fc47 	bl	8018004 <xTaskIncrementTick>
 8016776:	4603      	mov	r3, r0
 8016778:	2b00      	cmp	r3, #0
 801677a:	d003      	beq.n	8016784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801677c:	4b06      	ldr	r3, [pc, #24]	; (8016798 <xPortSysTickHandler+0x40>)
 801677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016782:	601a      	str	r2, [r3, #0]
 8016784:	2300      	movs	r3, #0
 8016786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	f383 8811 	msr	BASEPRI, r3
}
 801678e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016790:	bf00      	nop
 8016792:	3708      	adds	r7, #8
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}
 8016798:	e000ed04 	.word	0xe000ed04

0801679c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801679c:	b480      	push	{r7}
 801679e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80167a0:	4b0b      	ldr	r3, [pc, #44]	; (80167d0 <vPortSetupTimerInterrupt+0x34>)
 80167a2:	2200      	movs	r2, #0
 80167a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80167a6:	4b0b      	ldr	r3, [pc, #44]	; (80167d4 <vPortSetupTimerInterrupt+0x38>)
 80167a8:	2200      	movs	r2, #0
 80167aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80167ac:	4b0a      	ldr	r3, [pc, #40]	; (80167d8 <vPortSetupTimerInterrupt+0x3c>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	4a0a      	ldr	r2, [pc, #40]	; (80167dc <vPortSetupTimerInterrupt+0x40>)
 80167b2:	fba2 2303 	umull	r2, r3, r2, r3
 80167b6:	099b      	lsrs	r3, r3, #6
 80167b8:	4a09      	ldr	r2, [pc, #36]	; (80167e0 <vPortSetupTimerInterrupt+0x44>)
 80167ba:	3b01      	subs	r3, #1
 80167bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80167be:	4b04      	ldr	r3, [pc, #16]	; (80167d0 <vPortSetupTimerInterrupt+0x34>)
 80167c0:	2207      	movs	r2, #7
 80167c2:	601a      	str	r2, [r3, #0]
}
 80167c4:	bf00      	nop
 80167c6:	46bd      	mov	sp, r7
 80167c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167cc:	4770      	bx	lr
 80167ce:	bf00      	nop
 80167d0:	e000e010 	.word	0xe000e010
 80167d4:	e000e018 	.word	0xe000e018
 80167d8:	24000054 	.word	0x24000054
 80167dc:	10624dd3 	.word	0x10624dd3
 80167e0:	e000e014 	.word	0xe000e014

080167e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80167e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80167f4 <vPortEnableVFP+0x10>
 80167e8:	6801      	ldr	r1, [r0, #0]
 80167ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80167ee:	6001      	str	r1, [r0, #0]
 80167f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80167f2:	bf00      	nop
 80167f4:	e000ed88 	.word	0xe000ed88

080167f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80167f8:	b480      	push	{r7}
 80167fa:	b085      	sub	sp, #20
 80167fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80167fe:	f3ef 8305 	mrs	r3, IPSR
 8016802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	2b0f      	cmp	r3, #15
 8016808:	d914      	bls.n	8016834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801680a:	4a17      	ldr	r2, [pc, #92]	; (8016868 <vPortValidateInterruptPriority+0x70>)
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	4413      	add	r3, r2
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016814:	4b15      	ldr	r3, [pc, #84]	; (801686c <vPortValidateInterruptPriority+0x74>)
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	7afa      	ldrb	r2, [r7, #11]
 801681a:	429a      	cmp	r2, r3
 801681c:	d20a      	bcs.n	8016834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016822:	f383 8811 	msr	BASEPRI, r3
 8016826:	f3bf 8f6f 	isb	sy
 801682a:	f3bf 8f4f 	dsb	sy
 801682e:	607b      	str	r3, [r7, #4]
}
 8016830:	bf00      	nop
 8016832:	e7fe      	b.n	8016832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016834:	4b0e      	ldr	r3, [pc, #56]	; (8016870 <vPortValidateInterruptPriority+0x78>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801683c:	4b0d      	ldr	r3, [pc, #52]	; (8016874 <vPortValidateInterruptPriority+0x7c>)
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	429a      	cmp	r2, r3
 8016842:	d90a      	bls.n	801685a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016848:	f383 8811 	msr	BASEPRI, r3
 801684c:	f3bf 8f6f 	isb	sy
 8016850:	f3bf 8f4f 	dsb	sy
 8016854:	603b      	str	r3, [r7, #0]
}
 8016856:	bf00      	nop
 8016858:	e7fe      	b.n	8016858 <vPortValidateInterruptPriority+0x60>
	}
 801685a:	bf00      	nop
 801685c:	3714      	adds	r7, #20
 801685e:	46bd      	mov	sp, r7
 8016860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016864:	4770      	bx	lr
 8016866:	bf00      	nop
 8016868:	e000e3f0 	.word	0xe000e3f0
 801686c:	240268ac 	.word	0x240268ac
 8016870:	e000ed0c 	.word	0xe000ed0c
 8016874:	240268b0 	.word	0x240268b0

08016878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b084      	sub	sp, #16
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
 8016880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d10a      	bne.n	80168a2 <xQueueGenericReset+0x2a>
	__asm volatile
 801688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016890:	f383 8811 	msr	BASEPRI, r3
 8016894:	f3bf 8f6f 	isb	sy
 8016898:	f3bf 8f4f 	dsb	sy
 801689c:	60bb      	str	r3, [r7, #8]
}
 801689e:	bf00      	nop
 80168a0:	e7fe      	b.n	80168a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80168a2:	f7ff fec7 	bl	8016634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80168ae:	68f9      	ldr	r1, [r7, #12]
 80168b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80168b2:	fb01 f303 	mul.w	r3, r1, r3
 80168b6:	441a      	add	r2, r3
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	2200      	movs	r2, #0
 80168c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	681a      	ldr	r2, [r3, #0]
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	681a      	ldr	r2, [r3, #0]
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80168d2:	3b01      	subs	r3, #1
 80168d4:	68f9      	ldr	r1, [r7, #12]
 80168d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80168d8:	fb01 f303 	mul.w	r3, r1, r3
 80168dc:	441a      	add	r2, r3
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	22ff      	movs	r2, #255	; 0xff
 80168e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	22ff      	movs	r2, #255	; 0xff
 80168ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d114      	bne.n	8016922 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	691b      	ldr	r3, [r3, #16]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d01a      	beq.n	8016936 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	3310      	adds	r3, #16
 8016904:	4618      	mov	r0, r3
 8016906:	f001 fd2d 	bl	8018364 <xTaskRemoveFromEventList>
 801690a:	4603      	mov	r3, r0
 801690c:	2b00      	cmp	r3, #0
 801690e:	d012      	beq.n	8016936 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016910:	4b0c      	ldr	r3, [pc, #48]	; (8016944 <xQueueGenericReset+0xcc>)
 8016912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016916:	601a      	str	r2, [r3, #0]
 8016918:	f3bf 8f4f 	dsb	sy
 801691c:	f3bf 8f6f 	isb	sy
 8016920:	e009      	b.n	8016936 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	3310      	adds	r3, #16
 8016926:	4618      	mov	r0, r3
 8016928:	f7ff fca0 	bl	801626c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	3324      	adds	r3, #36	; 0x24
 8016930:	4618      	mov	r0, r3
 8016932:	f7ff fc9b 	bl	801626c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016936:	f7ff fead 	bl	8016694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801693a:	2301      	movs	r3, #1
}
 801693c:	4618      	mov	r0, r3
 801693e:	3710      	adds	r7, #16
 8016940:	46bd      	mov	sp, r7
 8016942:	bd80      	pop	{r7, pc}
 8016944:	e000ed04 	.word	0xe000ed04

08016948 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016948:	b580      	push	{r7, lr}
 801694a:	b08e      	sub	sp, #56	; 0x38
 801694c:	af02      	add	r7, sp, #8
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	60b9      	str	r1, [r7, #8]
 8016952:	607a      	str	r2, [r7, #4]
 8016954:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d10a      	bne.n	8016972 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016960:	f383 8811 	msr	BASEPRI, r3
 8016964:	f3bf 8f6f 	isb	sy
 8016968:	f3bf 8f4f 	dsb	sy
 801696c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801696e:	bf00      	nop
 8016970:	e7fe      	b.n	8016970 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016972:	683b      	ldr	r3, [r7, #0]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d10a      	bne.n	801698e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801697c:	f383 8811 	msr	BASEPRI, r3
 8016980:	f3bf 8f6f 	isb	sy
 8016984:	f3bf 8f4f 	dsb	sy
 8016988:	627b      	str	r3, [r7, #36]	; 0x24
}
 801698a:	bf00      	nop
 801698c:	e7fe      	b.n	801698c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d002      	beq.n	801699a <xQueueGenericCreateStatic+0x52>
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d001      	beq.n	801699e <xQueueGenericCreateStatic+0x56>
 801699a:	2301      	movs	r3, #1
 801699c:	e000      	b.n	80169a0 <xQueueGenericCreateStatic+0x58>
 801699e:	2300      	movs	r3, #0
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d10a      	bne.n	80169ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80169a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169a8:	f383 8811 	msr	BASEPRI, r3
 80169ac:	f3bf 8f6f 	isb	sy
 80169b0:	f3bf 8f4f 	dsb	sy
 80169b4:	623b      	str	r3, [r7, #32]
}
 80169b6:	bf00      	nop
 80169b8:	e7fe      	b.n	80169b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d102      	bne.n	80169c6 <xQueueGenericCreateStatic+0x7e>
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d101      	bne.n	80169ca <xQueueGenericCreateStatic+0x82>
 80169c6:	2301      	movs	r3, #1
 80169c8:	e000      	b.n	80169cc <xQueueGenericCreateStatic+0x84>
 80169ca:	2300      	movs	r3, #0
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d10a      	bne.n	80169e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80169d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169d4:	f383 8811 	msr	BASEPRI, r3
 80169d8:	f3bf 8f6f 	isb	sy
 80169dc:	f3bf 8f4f 	dsb	sy
 80169e0:	61fb      	str	r3, [r7, #28]
}
 80169e2:	bf00      	nop
 80169e4:	e7fe      	b.n	80169e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80169e6:	2350      	movs	r3, #80	; 0x50
 80169e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80169ea:	697b      	ldr	r3, [r7, #20]
 80169ec:	2b50      	cmp	r3, #80	; 0x50
 80169ee:	d00a      	beq.n	8016a06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80169f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169f4:	f383 8811 	msr	BASEPRI, r3
 80169f8:	f3bf 8f6f 	isb	sy
 80169fc:	f3bf 8f4f 	dsb	sy
 8016a00:	61bb      	str	r3, [r7, #24]
}
 8016a02:	bf00      	nop
 8016a04:	e7fe      	b.n	8016a04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016a06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d00d      	beq.n	8016a2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a14:	2201      	movs	r2, #1
 8016a16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016a1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a20:	9300      	str	r3, [sp, #0]
 8016a22:	4613      	mov	r3, r2
 8016a24:	687a      	ldr	r2, [r7, #4]
 8016a26:	68b9      	ldr	r1, [r7, #8]
 8016a28:	68f8      	ldr	r0, [r7, #12]
 8016a2a:	f000 f83f 	bl	8016aac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016a30:	4618      	mov	r0, r3
 8016a32:	3730      	adds	r7, #48	; 0x30
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}

08016a38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b08a      	sub	sp, #40	; 0x28
 8016a3c:	af02      	add	r7, sp, #8
 8016a3e:	60f8      	str	r0, [r7, #12]
 8016a40:	60b9      	str	r1, [r7, #8]
 8016a42:	4613      	mov	r3, r2
 8016a44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d10a      	bne.n	8016a62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8016a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a50:	f383 8811 	msr	BASEPRI, r3
 8016a54:	f3bf 8f6f 	isb	sy
 8016a58:	f3bf 8f4f 	dsb	sy
 8016a5c:	613b      	str	r3, [r7, #16]
}
 8016a5e:	bf00      	nop
 8016a60:	e7fe      	b.n	8016a60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	68ba      	ldr	r2, [r7, #8]
 8016a66:	fb02 f303 	mul.w	r3, r2, r3
 8016a6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016a6c:	69fb      	ldr	r3, [r7, #28]
 8016a6e:	3350      	adds	r3, #80	; 0x50
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7ff fa0f 	bl	8015e94 <pvPortMalloc>
 8016a76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016a78:	69bb      	ldr	r3, [r7, #24]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d011      	beq.n	8016aa2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016a7e:	69bb      	ldr	r3, [r7, #24]
 8016a80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016a82:	697b      	ldr	r3, [r7, #20]
 8016a84:	3350      	adds	r3, #80	; 0x50
 8016a86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016a88:	69bb      	ldr	r3, [r7, #24]
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016a90:	79fa      	ldrb	r2, [r7, #7]
 8016a92:	69bb      	ldr	r3, [r7, #24]
 8016a94:	9300      	str	r3, [sp, #0]
 8016a96:	4613      	mov	r3, r2
 8016a98:	697a      	ldr	r2, [r7, #20]
 8016a9a:	68b9      	ldr	r1, [r7, #8]
 8016a9c:	68f8      	ldr	r0, [r7, #12]
 8016a9e:	f000 f805 	bl	8016aac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016aa2:	69bb      	ldr	r3, [r7, #24]
	}
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	3720      	adds	r7, #32
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}

08016aac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b084      	sub	sp, #16
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	60f8      	str	r0, [r7, #12]
 8016ab4:	60b9      	str	r1, [r7, #8]
 8016ab6:	607a      	str	r2, [r7, #4]
 8016ab8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016aba:	68bb      	ldr	r3, [r7, #8]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d103      	bne.n	8016ac8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016ac0:	69bb      	ldr	r3, [r7, #24]
 8016ac2:	69ba      	ldr	r2, [r7, #24]
 8016ac4:	601a      	str	r2, [r3, #0]
 8016ac6:	e002      	b.n	8016ace <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016ac8:	69bb      	ldr	r3, [r7, #24]
 8016aca:	687a      	ldr	r2, [r7, #4]
 8016acc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016ace:	69bb      	ldr	r3, [r7, #24]
 8016ad0:	68fa      	ldr	r2, [r7, #12]
 8016ad2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016ad4:	69bb      	ldr	r3, [r7, #24]
 8016ad6:	68ba      	ldr	r2, [r7, #8]
 8016ad8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016ada:	2101      	movs	r1, #1
 8016adc:	69b8      	ldr	r0, [r7, #24]
 8016ade:	f7ff fecb 	bl	8016878 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016ae2:	69bb      	ldr	r3, [r7, #24]
 8016ae4:	78fa      	ldrb	r2, [r7, #3]
 8016ae6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016aea:	bf00      	nop
 8016aec:	3710      	adds	r7, #16
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bd80      	pop	{r7, pc}

08016af2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016af2:	b580      	push	{r7, lr}
 8016af4:	b082      	sub	sp, #8
 8016af6:	af00      	add	r7, sp, #0
 8016af8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d00e      	beq.n	8016b1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2200      	movs	r2, #0
 8016b04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	2200      	movs	r2, #0
 8016b0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	2200      	movs	r2, #0
 8016b10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016b12:	2300      	movs	r3, #0
 8016b14:	2200      	movs	r2, #0
 8016b16:	2100      	movs	r1, #0
 8016b18:	6878      	ldr	r0, [r7, #4]
 8016b1a:	f000 f90b 	bl	8016d34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016b1e:	bf00      	nop
 8016b20:	3708      	adds	r7, #8
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}

08016b26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016b26:	b580      	push	{r7, lr}
 8016b28:	b086      	sub	sp, #24
 8016b2a:	af00      	add	r7, sp, #0
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016b30:	2301      	movs	r3, #1
 8016b32:	617b      	str	r3, [r7, #20]
 8016b34:	2300      	movs	r3, #0
 8016b36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016b38:	79fb      	ldrb	r3, [r7, #7]
 8016b3a:	461a      	mov	r2, r3
 8016b3c:	6939      	ldr	r1, [r7, #16]
 8016b3e:	6978      	ldr	r0, [r7, #20]
 8016b40:	f7ff ff7a 	bl	8016a38 <xQueueGenericCreate>
 8016b44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016b46:	68f8      	ldr	r0, [r7, #12]
 8016b48:	f7ff ffd3 	bl	8016af2 <prvInitialiseMutex>

		return xNewQueue;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
	}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	3718      	adds	r7, #24
 8016b52:	46bd      	mov	sp, r7
 8016b54:	bd80      	pop	{r7, pc}

08016b56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016b56:	b580      	push	{r7, lr}
 8016b58:	b088      	sub	sp, #32
 8016b5a:	af02      	add	r7, sp, #8
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	6039      	str	r1, [r7, #0]
 8016b60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016b62:	2301      	movs	r3, #1
 8016b64:	617b      	str	r3, [r7, #20]
 8016b66:	2300      	movs	r3, #0
 8016b68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016b6a:	79fb      	ldrb	r3, [r7, #7]
 8016b6c:	9300      	str	r3, [sp, #0]
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	2200      	movs	r2, #0
 8016b72:	6939      	ldr	r1, [r7, #16]
 8016b74:	6978      	ldr	r0, [r7, #20]
 8016b76:	f7ff fee7 	bl	8016948 <xQueueGenericCreateStatic>
 8016b7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016b7c:	68f8      	ldr	r0, [r7, #12]
 8016b7e:	f7ff ffb8 	bl	8016af2 <prvInitialiseMutex>

		return xNewQueue;
 8016b82:	68fb      	ldr	r3, [r7, #12]
	}
 8016b84:	4618      	mov	r0, r3
 8016b86:	3718      	adds	r7, #24
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd80      	pop	{r7, pc}

08016b8c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016b8c:	b590      	push	{r4, r7, lr}
 8016b8e:	b087      	sub	sp, #28
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016b98:	693b      	ldr	r3, [r7, #16]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d10a      	bne.n	8016bb4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8016b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ba2:	f383 8811 	msr	BASEPRI, r3
 8016ba6:	f3bf 8f6f 	isb	sy
 8016baa:	f3bf 8f4f 	dsb	sy
 8016bae:	60fb      	str	r3, [r7, #12]
}
 8016bb0:	bf00      	nop
 8016bb2:	e7fe      	b.n	8016bb2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016bb4:	693b      	ldr	r3, [r7, #16]
 8016bb6:	689c      	ldr	r4, [r3, #8]
 8016bb8:	f001 fd94 	bl	80186e4 <xTaskGetCurrentTaskHandle>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	429c      	cmp	r4, r3
 8016bc0:	d111      	bne.n	8016be6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016bc2:	693b      	ldr	r3, [r7, #16]
 8016bc4:	68db      	ldr	r3, [r3, #12]
 8016bc6:	1e5a      	subs	r2, r3, #1
 8016bc8:	693b      	ldr	r3, [r7, #16]
 8016bca:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016bcc:	693b      	ldr	r3, [r7, #16]
 8016bce:	68db      	ldr	r3, [r3, #12]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d105      	bne.n	8016be0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	2100      	movs	r1, #0
 8016bda:	6938      	ldr	r0, [r7, #16]
 8016bdc:	f000 f8aa 	bl	8016d34 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016be0:	2301      	movs	r3, #1
 8016be2:	617b      	str	r3, [r7, #20]
 8016be4:	e001      	b.n	8016bea <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016be6:	2300      	movs	r3, #0
 8016be8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016bea:	697b      	ldr	r3, [r7, #20]
	}
 8016bec:	4618      	mov	r0, r3
 8016bee:	371c      	adds	r7, #28
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd90      	pop	{r4, r7, pc}

08016bf4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016bf4:	b590      	push	{r4, r7, lr}
 8016bf6:	b087      	sub	sp, #28
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016c02:	693b      	ldr	r3, [r7, #16]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d10a      	bne.n	8016c1e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8016c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c0c:	f383 8811 	msr	BASEPRI, r3
 8016c10:	f3bf 8f6f 	isb	sy
 8016c14:	f3bf 8f4f 	dsb	sy
 8016c18:	60fb      	str	r3, [r7, #12]
}
 8016c1a:	bf00      	nop
 8016c1c:	e7fe      	b.n	8016c1c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	689c      	ldr	r4, [r3, #8]
 8016c22:	f001 fd5f 	bl	80186e4 <xTaskGetCurrentTaskHandle>
 8016c26:	4603      	mov	r3, r0
 8016c28:	429c      	cmp	r4, r3
 8016c2a:	d107      	bne.n	8016c3c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016c2c:	693b      	ldr	r3, [r7, #16]
 8016c2e:	68db      	ldr	r3, [r3, #12]
 8016c30:	1c5a      	adds	r2, r3, #1
 8016c32:	693b      	ldr	r3, [r7, #16]
 8016c34:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016c36:	2301      	movs	r3, #1
 8016c38:	617b      	str	r3, [r7, #20]
 8016c3a:	e00c      	b.n	8016c56 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8016c3c:	6839      	ldr	r1, [r7, #0]
 8016c3e:	6938      	ldr	r0, [r7, #16]
 8016c40:	f000 fb7e 	bl	8017340 <xQueueSemaphoreTake>
 8016c44:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016c46:	697b      	ldr	r3, [r7, #20]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d004      	beq.n	8016c56 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016c4c:	693b      	ldr	r3, [r7, #16]
 8016c4e:	68db      	ldr	r3, [r3, #12]
 8016c50:	1c5a      	adds	r2, r3, #1
 8016c52:	693b      	ldr	r3, [r7, #16]
 8016c54:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016c56:	697b      	ldr	r3, [r7, #20]
	}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	371c      	adds	r7, #28
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd90      	pop	{r4, r7, pc}

08016c60 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b08a      	sub	sp, #40	; 0x28
 8016c64:	af02      	add	r7, sp, #8
 8016c66:	60f8      	str	r0, [r7, #12]
 8016c68:	60b9      	str	r1, [r7, #8]
 8016c6a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d10a      	bne.n	8016c88 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8016c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c76:	f383 8811 	msr	BASEPRI, r3
 8016c7a:	f3bf 8f6f 	isb	sy
 8016c7e:	f3bf 8f4f 	dsb	sy
 8016c82:	61bb      	str	r3, [r7, #24]
}
 8016c84:	bf00      	nop
 8016c86:	e7fe      	b.n	8016c86 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016c88:	68ba      	ldr	r2, [r7, #8]
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d90a      	bls.n	8016ca6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8016c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c94:	f383 8811 	msr	BASEPRI, r3
 8016c98:	f3bf 8f6f 	isb	sy
 8016c9c:	f3bf 8f4f 	dsb	sy
 8016ca0:	617b      	str	r3, [r7, #20]
}
 8016ca2:	bf00      	nop
 8016ca4:	e7fe      	b.n	8016ca4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016ca6:	2302      	movs	r3, #2
 8016ca8:	9300      	str	r3, [sp, #0]
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	2200      	movs	r2, #0
 8016cae:	2100      	movs	r1, #0
 8016cb0:	68f8      	ldr	r0, [r7, #12]
 8016cb2:	f7ff fe49 	bl	8016948 <xQueueGenericCreateStatic>
 8016cb6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016cb8:	69fb      	ldr	r3, [r7, #28]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d002      	beq.n	8016cc4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016cbe:	69fb      	ldr	r3, [r7, #28]
 8016cc0:	68ba      	ldr	r2, [r7, #8]
 8016cc2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016cc4:	69fb      	ldr	r3, [r7, #28]
	}
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	3720      	adds	r7, #32
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	bd80      	pop	{r7, pc}

08016cce <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016cce:	b580      	push	{r7, lr}
 8016cd0:	b086      	sub	sp, #24
 8016cd2:	af00      	add	r7, sp, #0
 8016cd4:	6078      	str	r0, [r7, #4]
 8016cd6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d10a      	bne.n	8016cf4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8016cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce2:	f383 8811 	msr	BASEPRI, r3
 8016ce6:	f3bf 8f6f 	isb	sy
 8016cea:	f3bf 8f4f 	dsb	sy
 8016cee:	613b      	str	r3, [r7, #16]
}
 8016cf0:	bf00      	nop
 8016cf2:	e7fe      	b.n	8016cf2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016cf4:	683a      	ldr	r2, [r7, #0]
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d90a      	bls.n	8016d12 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8016cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d00:	f383 8811 	msr	BASEPRI, r3
 8016d04:	f3bf 8f6f 	isb	sy
 8016d08:	f3bf 8f4f 	dsb	sy
 8016d0c:	60fb      	str	r3, [r7, #12]
}
 8016d0e:	bf00      	nop
 8016d10:	e7fe      	b.n	8016d10 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016d12:	2202      	movs	r2, #2
 8016d14:	2100      	movs	r1, #0
 8016d16:	6878      	ldr	r0, [r7, #4]
 8016d18:	f7ff fe8e 	bl	8016a38 <xQueueGenericCreate>
 8016d1c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d002      	beq.n	8016d2a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016d24:	697b      	ldr	r3, [r7, #20]
 8016d26:	683a      	ldr	r2, [r7, #0]
 8016d28:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016d2a:	697b      	ldr	r3, [r7, #20]
	}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	3718      	adds	r7, #24
 8016d30:	46bd      	mov	sp, r7
 8016d32:	bd80      	pop	{r7, pc}

08016d34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b08e      	sub	sp, #56	; 0x38
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	60f8      	str	r0, [r7, #12]
 8016d3c:	60b9      	str	r1, [r7, #8]
 8016d3e:	607a      	str	r2, [r7, #4]
 8016d40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016d42:	2300      	movs	r3, #0
 8016d44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d10a      	bne.n	8016d66 <xQueueGenericSend+0x32>
	__asm volatile
 8016d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d54:	f383 8811 	msr	BASEPRI, r3
 8016d58:	f3bf 8f6f 	isb	sy
 8016d5c:	f3bf 8f4f 	dsb	sy
 8016d60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016d62:	bf00      	nop
 8016d64:	e7fe      	b.n	8016d64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d103      	bne.n	8016d74 <xQueueGenericSend+0x40>
 8016d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d101      	bne.n	8016d78 <xQueueGenericSend+0x44>
 8016d74:	2301      	movs	r3, #1
 8016d76:	e000      	b.n	8016d7a <xQueueGenericSend+0x46>
 8016d78:	2300      	movs	r3, #0
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d10a      	bne.n	8016d94 <xQueueGenericSend+0x60>
	__asm volatile
 8016d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d82:	f383 8811 	msr	BASEPRI, r3
 8016d86:	f3bf 8f6f 	isb	sy
 8016d8a:	f3bf 8f4f 	dsb	sy
 8016d8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016d90:	bf00      	nop
 8016d92:	e7fe      	b.n	8016d92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	2b02      	cmp	r3, #2
 8016d98:	d103      	bne.n	8016da2 <xQueueGenericSend+0x6e>
 8016d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d9e:	2b01      	cmp	r3, #1
 8016da0:	d101      	bne.n	8016da6 <xQueueGenericSend+0x72>
 8016da2:	2301      	movs	r3, #1
 8016da4:	e000      	b.n	8016da8 <xQueueGenericSend+0x74>
 8016da6:	2300      	movs	r3, #0
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d10a      	bne.n	8016dc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8016dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016db0:	f383 8811 	msr	BASEPRI, r3
 8016db4:	f3bf 8f6f 	isb	sy
 8016db8:	f3bf 8f4f 	dsb	sy
 8016dbc:	623b      	str	r3, [r7, #32]
}
 8016dbe:	bf00      	nop
 8016dc0:	e7fe      	b.n	8016dc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016dc2:	f001 fc9f 	bl	8018704 <xTaskGetSchedulerState>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d102      	bne.n	8016dd2 <xQueueGenericSend+0x9e>
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d101      	bne.n	8016dd6 <xQueueGenericSend+0xa2>
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	e000      	b.n	8016dd8 <xQueueGenericSend+0xa4>
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d10a      	bne.n	8016df2 <xQueueGenericSend+0xbe>
	__asm volatile
 8016ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de0:	f383 8811 	msr	BASEPRI, r3
 8016de4:	f3bf 8f6f 	isb	sy
 8016de8:	f3bf 8f4f 	dsb	sy
 8016dec:	61fb      	str	r3, [r7, #28]
}
 8016dee:	bf00      	nop
 8016df0:	e7fe      	b.n	8016df0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016df2:	f7ff fc1f 	bl	8016634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016dfe:	429a      	cmp	r2, r3
 8016e00:	d302      	bcc.n	8016e08 <xQueueGenericSend+0xd4>
 8016e02:	683b      	ldr	r3, [r7, #0]
 8016e04:	2b02      	cmp	r3, #2
 8016e06:	d129      	bne.n	8016e5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016e08:	683a      	ldr	r2, [r7, #0]
 8016e0a:	68b9      	ldr	r1, [r7, #8]
 8016e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e0e:	f000 fc5e 	bl	80176ce <prvCopyDataToQueue>
 8016e12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d010      	beq.n	8016e3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e1e:	3324      	adds	r3, #36	; 0x24
 8016e20:	4618      	mov	r0, r3
 8016e22:	f001 fa9f 	bl	8018364 <xTaskRemoveFromEventList>
 8016e26:	4603      	mov	r3, r0
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d013      	beq.n	8016e54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016e2c:	4b3f      	ldr	r3, [pc, #252]	; (8016f2c <xQueueGenericSend+0x1f8>)
 8016e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e32:	601a      	str	r2, [r3, #0]
 8016e34:	f3bf 8f4f 	dsb	sy
 8016e38:	f3bf 8f6f 	isb	sy
 8016e3c:	e00a      	b.n	8016e54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d007      	beq.n	8016e54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016e44:	4b39      	ldr	r3, [pc, #228]	; (8016f2c <xQueueGenericSend+0x1f8>)
 8016e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e4a:	601a      	str	r2, [r3, #0]
 8016e4c:	f3bf 8f4f 	dsb	sy
 8016e50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016e54:	f7ff fc1e 	bl	8016694 <vPortExitCritical>
				return pdPASS;
 8016e58:	2301      	movs	r3, #1
 8016e5a:	e063      	b.n	8016f24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d103      	bne.n	8016e6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016e62:	f7ff fc17 	bl	8016694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016e66:	2300      	movs	r3, #0
 8016e68:	e05c      	b.n	8016f24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d106      	bne.n	8016e7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016e70:	f107 0314 	add.w	r3, r7, #20
 8016e74:	4618      	mov	r0, r3
 8016e76:	f001 fad9 	bl	801842c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016e7a:	2301      	movs	r3, #1
 8016e7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016e7e:	f7ff fc09 	bl	8016694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016e82:	f001 f803 	bl	8017e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016e86:	f7ff fbd5 	bl	8016634 <vPortEnterCritical>
 8016e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e90:	b25b      	sxtb	r3, r3
 8016e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e96:	d103      	bne.n	8016ea0 <xQueueGenericSend+0x16c>
 8016e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016ea6:	b25b      	sxtb	r3, r3
 8016ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eac:	d103      	bne.n	8016eb6 <xQueueGenericSend+0x182>
 8016eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016eb6:	f7ff fbed 	bl	8016694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016eba:	1d3a      	adds	r2, r7, #4
 8016ebc:	f107 0314 	add.w	r3, r7, #20
 8016ec0:	4611      	mov	r1, r2
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f001 fac8 	bl	8018458 <xTaskCheckForTimeOut>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d124      	bne.n	8016f18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ed0:	f000 fcf5 	bl	80178be <prvIsQueueFull>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d018      	beq.n	8016f0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016edc:	3310      	adds	r3, #16
 8016ede:	687a      	ldr	r2, [r7, #4]
 8016ee0:	4611      	mov	r1, r2
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f001 f9ee 	bl	80182c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016eea:	f000 fc80 	bl	80177ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016eee:	f000 ffdb 	bl	8017ea8 <xTaskResumeAll>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	f47f af7c 	bne.w	8016df2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016efa:	4b0c      	ldr	r3, [pc, #48]	; (8016f2c <xQueueGenericSend+0x1f8>)
 8016efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f00:	601a      	str	r2, [r3, #0]
 8016f02:	f3bf 8f4f 	dsb	sy
 8016f06:	f3bf 8f6f 	isb	sy
 8016f0a:	e772      	b.n	8016df2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f0e:	f000 fc6e 	bl	80177ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016f12:	f000 ffc9 	bl	8017ea8 <xTaskResumeAll>
 8016f16:	e76c      	b.n	8016df2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f1a:	f000 fc68 	bl	80177ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016f1e:	f000 ffc3 	bl	8017ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016f22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3738      	adds	r7, #56	; 0x38
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	e000ed04 	.word	0xe000ed04

08016f30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b090      	sub	sp, #64	; 0x40
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	60f8      	str	r0, [r7, #12]
 8016f38:	60b9      	str	r1, [r7, #8]
 8016f3a:	607a      	str	r2, [r7, #4]
 8016f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d10a      	bne.n	8016f5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f4c:	f383 8811 	msr	BASEPRI, r3
 8016f50:	f3bf 8f6f 	isb	sy
 8016f54:	f3bf 8f4f 	dsb	sy
 8016f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016f5a:	bf00      	nop
 8016f5c:	e7fe      	b.n	8016f5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016f5e:	68bb      	ldr	r3, [r7, #8]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d103      	bne.n	8016f6c <xQueueGenericSendFromISR+0x3c>
 8016f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d101      	bne.n	8016f70 <xQueueGenericSendFromISR+0x40>
 8016f6c:	2301      	movs	r3, #1
 8016f6e:	e000      	b.n	8016f72 <xQueueGenericSendFromISR+0x42>
 8016f70:	2300      	movs	r3, #0
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d10a      	bne.n	8016f8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f7a:	f383 8811 	msr	BASEPRI, r3
 8016f7e:	f3bf 8f6f 	isb	sy
 8016f82:	f3bf 8f4f 	dsb	sy
 8016f86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016f88:	bf00      	nop
 8016f8a:	e7fe      	b.n	8016f8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	2b02      	cmp	r3, #2
 8016f90:	d103      	bne.n	8016f9a <xQueueGenericSendFromISR+0x6a>
 8016f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f96:	2b01      	cmp	r3, #1
 8016f98:	d101      	bne.n	8016f9e <xQueueGenericSendFromISR+0x6e>
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	e000      	b.n	8016fa0 <xQueueGenericSendFromISR+0x70>
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d10a      	bne.n	8016fba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fa8:	f383 8811 	msr	BASEPRI, r3
 8016fac:	f3bf 8f6f 	isb	sy
 8016fb0:	f3bf 8f4f 	dsb	sy
 8016fb4:	623b      	str	r3, [r7, #32]
}
 8016fb6:	bf00      	nop
 8016fb8:	e7fe      	b.n	8016fb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016fba:	f7ff fc1d 	bl	80167f8 <vPortValidateInterruptPriority>
	__asm volatile
 8016fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8016fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fc6:	f383 8811 	msr	BASEPRI, r3
 8016fca:	f3bf 8f6f 	isb	sy
 8016fce:	f3bf 8f4f 	dsb	sy
 8016fd2:	61fa      	str	r2, [r7, #28]
 8016fd4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8016fd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016fd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	d302      	bcc.n	8016fec <xQueueGenericSendFromISR+0xbc>
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	2b02      	cmp	r3, #2
 8016fea:	d12f      	bne.n	801704c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016ffc:	683a      	ldr	r2, [r7, #0]
 8016ffe:	68b9      	ldr	r1, [r7, #8]
 8017000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017002:	f000 fb64 	bl	80176ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017006:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801700e:	d112      	bne.n	8017036 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017014:	2b00      	cmp	r3, #0
 8017016:	d016      	beq.n	8017046 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801701a:	3324      	adds	r3, #36	; 0x24
 801701c:	4618      	mov	r0, r3
 801701e:	f001 f9a1 	bl	8018364 <xTaskRemoveFromEventList>
 8017022:	4603      	mov	r3, r0
 8017024:	2b00      	cmp	r3, #0
 8017026:	d00e      	beq.n	8017046 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d00b      	beq.n	8017046 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	2201      	movs	r2, #1
 8017032:	601a      	str	r2, [r3, #0]
 8017034:	e007      	b.n	8017046 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017036:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801703a:	3301      	adds	r3, #1
 801703c:	b2db      	uxtb	r3, r3
 801703e:	b25a      	sxtb	r2, r3
 8017040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017046:	2301      	movs	r3, #1
 8017048:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801704a:	e001      	b.n	8017050 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801704c:	2300      	movs	r3, #0
 801704e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017052:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017054:	697b      	ldr	r3, [r7, #20]
 8017056:	f383 8811 	msr	BASEPRI, r3
}
 801705a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801705c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801705e:	4618      	mov	r0, r3
 8017060:	3740      	adds	r7, #64	; 0x40
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}

08017066 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017066:	b580      	push	{r7, lr}
 8017068:	b08e      	sub	sp, #56	; 0x38
 801706a:	af00      	add	r7, sp, #0
 801706c:	6078      	str	r0, [r7, #4]
 801706e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017076:	2b00      	cmp	r3, #0
 8017078:	d10a      	bne.n	8017090 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801707e:	f383 8811 	msr	BASEPRI, r3
 8017082:	f3bf 8f6f 	isb	sy
 8017086:	f3bf 8f4f 	dsb	sy
 801708a:	623b      	str	r3, [r7, #32]
}
 801708c:	bf00      	nop
 801708e:	e7fe      	b.n	801708e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017094:	2b00      	cmp	r3, #0
 8017096:	d00a      	beq.n	80170ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8017098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801709c:	f383 8811 	msr	BASEPRI, r3
 80170a0:	f3bf 8f6f 	isb	sy
 80170a4:	f3bf 8f4f 	dsb	sy
 80170a8:	61fb      	str	r3, [r7, #28]
}
 80170aa:	bf00      	nop
 80170ac:	e7fe      	b.n	80170ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80170ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d103      	bne.n	80170be <xQueueGiveFromISR+0x58>
 80170b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b8:	689b      	ldr	r3, [r3, #8]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d101      	bne.n	80170c2 <xQueueGiveFromISR+0x5c>
 80170be:	2301      	movs	r3, #1
 80170c0:	e000      	b.n	80170c4 <xQueueGiveFromISR+0x5e>
 80170c2:	2300      	movs	r3, #0
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d10a      	bne.n	80170de <xQueueGiveFromISR+0x78>
	__asm volatile
 80170c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170cc:	f383 8811 	msr	BASEPRI, r3
 80170d0:	f3bf 8f6f 	isb	sy
 80170d4:	f3bf 8f4f 	dsb	sy
 80170d8:	61bb      	str	r3, [r7, #24]
}
 80170da:	bf00      	nop
 80170dc:	e7fe      	b.n	80170dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80170de:	f7ff fb8b 	bl	80167f8 <vPortValidateInterruptPriority>
	__asm volatile
 80170e2:	f3ef 8211 	mrs	r2, BASEPRI
 80170e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ea:	f383 8811 	msr	BASEPRI, r3
 80170ee:	f3bf 8f6f 	isb	sy
 80170f2:	f3bf 8f4f 	dsb	sy
 80170f6:	617a      	str	r2, [r7, #20]
 80170f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80170fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80170fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017102:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801710a:	429a      	cmp	r2, r3
 801710c:	d22b      	bcs.n	8017166 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801711a:	1c5a      	adds	r2, r3, #1
 801711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801711e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017120:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017128:	d112      	bne.n	8017150 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801712e:	2b00      	cmp	r3, #0
 8017130:	d016      	beq.n	8017160 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017134:	3324      	adds	r3, #36	; 0x24
 8017136:	4618      	mov	r0, r3
 8017138:	f001 f914 	bl	8018364 <xTaskRemoveFromEventList>
 801713c:	4603      	mov	r3, r0
 801713e:	2b00      	cmp	r3, #0
 8017140:	d00e      	beq.n	8017160 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d00b      	beq.n	8017160 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	2201      	movs	r2, #1
 801714c:	601a      	str	r2, [r3, #0]
 801714e:	e007      	b.n	8017160 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017154:	3301      	adds	r3, #1
 8017156:	b2db      	uxtb	r3, r3
 8017158:	b25a      	sxtb	r2, r3
 801715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801715c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017160:	2301      	movs	r3, #1
 8017162:	637b      	str	r3, [r7, #52]	; 0x34
 8017164:	e001      	b.n	801716a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017166:	2300      	movs	r3, #0
 8017168:	637b      	str	r3, [r7, #52]	; 0x34
 801716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801716c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	f383 8811 	msr	BASEPRI, r3
}
 8017174:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017178:	4618      	mov	r0, r3
 801717a:	3738      	adds	r7, #56	; 0x38
 801717c:	46bd      	mov	sp, r7
 801717e:	bd80      	pop	{r7, pc}

08017180 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b08c      	sub	sp, #48	; 0x30
 8017184:	af00      	add	r7, sp, #0
 8017186:	60f8      	str	r0, [r7, #12]
 8017188:	60b9      	str	r1, [r7, #8]
 801718a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801718c:	2300      	movs	r3, #0
 801718e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017196:	2b00      	cmp	r3, #0
 8017198:	d10a      	bne.n	80171b0 <xQueueReceive+0x30>
	__asm volatile
 801719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801719e:	f383 8811 	msr	BASEPRI, r3
 80171a2:	f3bf 8f6f 	isb	sy
 80171a6:	f3bf 8f4f 	dsb	sy
 80171aa:	623b      	str	r3, [r7, #32]
}
 80171ac:	bf00      	nop
 80171ae:	e7fe      	b.n	80171ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d103      	bne.n	80171be <xQueueReceive+0x3e>
 80171b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d101      	bne.n	80171c2 <xQueueReceive+0x42>
 80171be:	2301      	movs	r3, #1
 80171c0:	e000      	b.n	80171c4 <xQueueReceive+0x44>
 80171c2:	2300      	movs	r3, #0
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d10a      	bne.n	80171de <xQueueReceive+0x5e>
	__asm volatile
 80171c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171cc:	f383 8811 	msr	BASEPRI, r3
 80171d0:	f3bf 8f6f 	isb	sy
 80171d4:	f3bf 8f4f 	dsb	sy
 80171d8:	61fb      	str	r3, [r7, #28]
}
 80171da:	bf00      	nop
 80171dc:	e7fe      	b.n	80171dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80171de:	f001 fa91 	bl	8018704 <xTaskGetSchedulerState>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d102      	bne.n	80171ee <xQueueReceive+0x6e>
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d101      	bne.n	80171f2 <xQueueReceive+0x72>
 80171ee:	2301      	movs	r3, #1
 80171f0:	e000      	b.n	80171f4 <xQueueReceive+0x74>
 80171f2:	2300      	movs	r3, #0
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d10a      	bne.n	801720e <xQueueReceive+0x8e>
	__asm volatile
 80171f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171fc:	f383 8811 	msr	BASEPRI, r3
 8017200:	f3bf 8f6f 	isb	sy
 8017204:	f3bf 8f4f 	dsb	sy
 8017208:	61bb      	str	r3, [r7, #24]
}
 801720a:	bf00      	nop
 801720c:	e7fe      	b.n	801720c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801720e:	f7ff fa11 	bl	8016634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017216:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801721a:	2b00      	cmp	r3, #0
 801721c:	d01f      	beq.n	801725e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801721e:	68b9      	ldr	r1, [r7, #8]
 8017220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017222:	f000 fabe 	bl	80177a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017228:	1e5a      	subs	r2, r3, #1
 801722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801722c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017230:	691b      	ldr	r3, [r3, #16]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d00f      	beq.n	8017256 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017238:	3310      	adds	r3, #16
 801723a:	4618      	mov	r0, r3
 801723c:	f001 f892 	bl	8018364 <xTaskRemoveFromEventList>
 8017240:	4603      	mov	r3, r0
 8017242:	2b00      	cmp	r3, #0
 8017244:	d007      	beq.n	8017256 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017246:	4b3d      	ldr	r3, [pc, #244]	; (801733c <xQueueReceive+0x1bc>)
 8017248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801724c:	601a      	str	r2, [r3, #0]
 801724e:	f3bf 8f4f 	dsb	sy
 8017252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017256:	f7ff fa1d 	bl	8016694 <vPortExitCritical>
				return pdPASS;
 801725a:	2301      	movs	r3, #1
 801725c:	e069      	b.n	8017332 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d103      	bne.n	801726c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017264:	f7ff fa16 	bl	8016694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017268:	2300      	movs	r3, #0
 801726a:	e062      	b.n	8017332 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726e:	2b00      	cmp	r3, #0
 8017270:	d106      	bne.n	8017280 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017272:	f107 0310 	add.w	r3, r7, #16
 8017276:	4618      	mov	r0, r3
 8017278:	f001 f8d8 	bl	801842c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801727c:	2301      	movs	r3, #1
 801727e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017280:	f7ff fa08 	bl	8016694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017284:	f000 fe02 	bl	8017e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017288:	f7ff f9d4 	bl	8016634 <vPortEnterCritical>
 801728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801728e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017292:	b25b      	sxtb	r3, r3
 8017294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017298:	d103      	bne.n	80172a2 <xQueueReceive+0x122>
 801729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801729c:	2200      	movs	r2, #0
 801729e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80172a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80172a8:	b25b      	sxtb	r3, r3
 80172aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172ae:	d103      	bne.n	80172b8 <xQueueReceive+0x138>
 80172b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172b2:	2200      	movs	r2, #0
 80172b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80172b8:	f7ff f9ec 	bl	8016694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80172bc:	1d3a      	adds	r2, r7, #4
 80172be:	f107 0310 	add.w	r3, r7, #16
 80172c2:	4611      	mov	r1, r2
 80172c4:	4618      	mov	r0, r3
 80172c6:	f001 f8c7 	bl	8018458 <xTaskCheckForTimeOut>
 80172ca:	4603      	mov	r3, r0
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d123      	bne.n	8017318 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80172d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80172d2:	f000 fade 	bl	8017892 <prvIsQueueEmpty>
 80172d6:	4603      	mov	r3, r0
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d017      	beq.n	801730c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80172dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172de:	3324      	adds	r3, #36	; 0x24
 80172e0:	687a      	ldr	r2, [r7, #4]
 80172e2:	4611      	mov	r1, r2
 80172e4:	4618      	mov	r0, r3
 80172e6:	f000 ffed 	bl	80182c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80172ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80172ec:	f000 fa7f 	bl	80177ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80172f0:	f000 fdda 	bl	8017ea8 <xTaskResumeAll>
 80172f4:	4603      	mov	r3, r0
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d189      	bne.n	801720e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80172fa:	4b10      	ldr	r3, [pc, #64]	; (801733c <xQueueReceive+0x1bc>)
 80172fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017300:	601a      	str	r2, [r3, #0]
 8017302:	f3bf 8f4f 	dsb	sy
 8017306:	f3bf 8f6f 	isb	sy
 801730a:	e780      	b.n	801720e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801730c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801730e:	f000 fa6e 	bl	80177ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017312:	f000 fdc9 	bl	8017ea8 <xTaskResumeAll>
 8017316:	e77a      	b.n	801720e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801731a:	f000 fa68 	bl	80177ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801731e:	f000 fdc3 	bl	8017ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017324:	f000 fab5 	bl	8017892 <prvIsQueueEmpty>
 8017328:	4603      	mov	r3, r0
 801732a:	2b00      	cmp	r3, #0
 801732c:	f43f af6f 	beq.w	801720e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017332:	4618      	mov	r0, r3
 8017334:	3730      	adds	r7, #48	; 0x30
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	e000ed04 	.word	0xe000ed04

08017340 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b08e      	sub	sp, #56	; 0x38
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
 8017348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801734a:	2300      	movs	r3, #0
 801734c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8017352:	2300      	movs	r3, #0
 8017354:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017358:	2b00      	cmp	r3, #0
 801735a:	d10a      	bne.n	8017372 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017360:	f383 8811 	msr	BASEPRI, r3
 8017364:	f3bf 8f6f 	isb	sy
 8017368:	f3bf 8f4f 	dsb	sy
 801736c:	623b      	str	r3, [r7, #32]
}
 801736e:	bf00      	nop
 8017370:	e7fe      	b.n	8017370 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017376:	2b00      	cmp	r3, #0
 8017378:	d00a      	beq.n	8017390 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801737e:	f383 8811 	msr	BASEPRI, r3
 8017382:	f3bf 8f6f 	isb	sy
 8017386:	f3bf 8f4f 	dsb	sy
 801738a:	61fb      	str	r3, [r7, #28]
}
 801738c:	bf00      	nop
 801738e:	e7fe      	b.n	801738e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017390:	f001 f9b8 	bl	8018704 <xTaskGetSchedulerState>
 8017394:	4603      	mov	r3, r0
 8017396:	2b00      	cmp	r3, #0
 8017398:	d102      	bne.n	80173a0 <xQueueSemaphoreTake+0x60>
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d101      	bne.n	80173a4 <xQueueSemaphoreTake+0x64>
 80173a0:	2301      	movs	r3, #1
 80173a2:	e000      	b.n	80173a6 <xQueueSemaphoreTake+0x66>
 80173a4:	2300      	movs	r3, #0
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d10a      	bne.n	80173c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80173aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173ae:	f383 8811 	msr	BASEPRI, r3
 80173b2:	f3bf 8f6f 	isb	sy
 80173b6:	f3bf 8f4f 	dsb	sy
 80173ba:	61bb      	str	r3, [r7, #24]
}
 80173bc:	bf00      	nop
 80173be:	e7fe      	b.n	80173be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80173c0:	f7ff f938 	bl	8016634 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80173c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80173ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d024      	beq.n	801741a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80173d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d2:	1e5a      	subs	r2, r3, #1
 80173d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80173d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d104      	bne.n	80173ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80173e0:	f001 fb06 	bl	80189f0 <pvTaskIncrementMutexHeldCount>
 80173e4:	4602      	mov	r2, r0
 80173e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80173ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ec:	691b      	ldr	r3, [r3, #16]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d00f      	beq.n	8017412 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80173f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f4:	3310      	adds	r3, #16
 80173f6:	4618      	mov	r0, r3
 80173f8:	f000 ffb4 	bl	8018364 <xTaskRemoveFromEventList>
 80173fc:	4603      	mov	r3, r0
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d007      	beq.n	8017412 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017402:	4b54      	ldr	r3, [pc, #336]	; (8017554 <xQueueSemaphoreTake+0x214>)
 8017404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017408:	601a      	str	r2, [r3, #0]
 801740a:	f3bf 8f4f 	dsb	sy
 801740e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017412:	f7ff f93f 	bl	8016694 <vPortExitCritical>
				return pdPASS;
 8017416:	2301      	movs	r3, #1
 8017418:	e097      	b.n	801754a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d111      	bne.n	8017444 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017422:	2b00      	cmp	r3, #0
 8017424:	d00a      	beq.n	801743c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8017426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801742a:	f383 8811 	msr	BASEPRI, r3
 801742e:	f3bf 8f6f 	isb	sy
 8017432:	f3bf 8f4f 	dsb	sy
 8017436:	617b      	str	r3, [r7, #20]
}
 8017438:	bf00      	nop
 801743a:	e7fe      	b.n	801743a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801743c:	f7ff f92a 	bl	8016694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017440:	2300      	movs	r3, #0
 8017442:	e082      	b.n	801754a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017446:	2b00      	cmp	r3, #0
 8017448:	d106      	bne.n	8017458 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801744a:	f107 030c 	add.w	r3, r7, #12
 801744e:	4618      	mov	r0, r3
 8017450:	f000 ffec 	bl	801842c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017454:	2301      	movs	r3, #1
 8017456:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017458:	f7ff f91c 	bl	8016694 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801745c:	f000 fd16 	bl	8017e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017460:	f7ff f8e8 	bl	8016634 <vPortEnterCritical>
 8017464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801746a:	b25b      	sxtb	r3, r3
 801746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017470:	d103      	bne.n	801747a <xQueueSemaphoreTake+0x13a>
 8017472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017474:	2200      	movs	r2, #0
 8017476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801747c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017480:	b25b      	sxtb	r3, r3
 8017482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017486:	d103      	bne.n	8017490 <xQueueSemaphoreTake+0x150>
 8017488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801748a:	2200      	movs	r2, #0
 801748c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017490:	f7ff f900 	bl	8016694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017494:	463a      	mov	r2, r7
 8017496:	f107 030c 	add.w	r3, r7, #12
 801749a:	4611      	mov	r1, r2
 801749c:	4618      	mov	r0, r3
 801749e:	f000 ffdb 	bl	8018458 <xTaskCheckForTimeOut>
 80174a2:	4603      	mov	r3, r0
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d132      	bne.n	801750e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80174a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174aa:	f000 f9f2 	bl	8017892 <prvIsQueueEmpty>
 80174ae:	4603      	mov	r3, r0
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d026      	beq.n	8017502 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80174b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d109      	bne.n	80174d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80174bc:	f7ff f8ba 	bl	8016634 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80174c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c2:	689b      	ldr	r3, [r3, #8]
 80174c4:	4618      	mov	r0, r3
 80174c6:	f001 f93b 	bl	8018740 <xTaskPriorityInherit>
 80174ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80174cc:	f7ff f8e2 	bl	8016694 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80174d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d2:	3324      	adds	r3, #36	; 0x24
 80174d4:	683a      	ldr	r2, [r7, #0]
 80174d6:	4611      	mov	r1, r2
 80174d8:	4618      	mov	r0, r3
 80174da:	f000 fef3 	bl	80182c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80174de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174e0:	f000 f985 	bl	80177ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80174e4:	f000 fce0 	bl	8017ea8 <xTaskResumeAll>
 80174e8:	4603      	mov	r3, r0
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	f47f af68 	bne.w	80173c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80174f0:	4b18      	ldr	r3, [pc, #96]	; (8017554 <xQueueSemaphoreTake+0x214>)
 80174f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174f6:	601a      	str	r2, [r3, #0]
 80174f8:	f3bf 8f4f 	dsb	sy
 80174fc:	f3bf 8f6f 	isb	sy
 8017500:	e75e      	b.n	80173c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017504:	f000 f973 	bl	80177ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017508:	f000 fcce 	bl	8017ea8 <xTaskResumeAll>
 801750c:	e758      	b.n	80173c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801750e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017510:	f000 f96d 	bl	80177ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017514:	f000 fcc8 	bl	8017ea8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801751a:	f000 f9ba 	bl	8017892 <prvIsQueueEmpty>
 801751e:	4603      	mov	r3, r0
 8017520:	2b00      	cmp	r3, #0
 8017522:	f43f af4d 	beq.w	80173c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017528:	2b00      	cmp	r3, #0
 801752a:	d00d      	beq.n	8017548 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801752c:	f7ff f882 	bl	8016634 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017532:	f000 f8b4 	bl	801769e <prvGetDisinheritPriorityAfterTimeout>
 8017536:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801753a:	689b      	ldr	r3, [r3, #8]
 801753c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801753e:	4618      	mov	r0, r3
 8017540:	f001 f9d4 	bl	80188ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017544:	f7ff f8a6 	bl	8016694 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801754a:	4618      	mov	r0, r3
 801754c:	3738      	adds	r7, #56	; 0x38
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}
 8017552:	bf00      	nop
 8017554:	e000ed04 	.word	0xe000ed04

08017558 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b08e      	sub	sp, #56	; 0x38
 801755c:	af00      	add	r7, sp, #0
 801755e:	60f8      	str	r0, [r7, #12]
 8017560:	60b9      	str	r1, [r7, #8]
 8017562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801756a:	2b00      	cmp	r3, #0
 801756c:	d10a      	bne.n	8017584 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017572:	f383 8811 	msr	BASEPRI, r3
 8017576:	f3bf 8f6f 	isb	sy
 801757a:	f3bf 8f4f 	dsb	sy
 801757e:	623b      	str	r3, [r7, #32]
}
 8017580:	bf00      	nop
 8017582:	e7fe      	b.n	8017582 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017584:	68bb      	ldr	r3, [r7, #8]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d103      	bne.n	8017592 <xQueueReceiveFromISR+0x3a>
 801758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801758e:	2b00      	cmp	r3, #0
 8017590:	d101      	bne.n	8017596 <xQueueReceiveFromISR+0x3e>
 8017592:	2301      	movs	r3, #1
 8017594:	e000      	b.n	8017598 <xQueueReceiveFromISR+0x40>
 8017596:	2300      	movs	r3, #0
 8017598:	2b00      	cmp	r3, #0
 801759a:	d10a      	bne.n	80175b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a0:	f383 8811 	msr	BASEPRI, r3
 80175a4:	f3bf 8f6f 	isb	sy
 80175a8:	f3bf 8f4f 	dsb	sy
 80175ac:	61fb      	str	r3, [r7, #28]
}
 80175ae:	bf00      	nop
 80175b0:	e7fe      	b.n	80175b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80175b2:	f7ff f921 	bl	80167f8 <vPortValidateInterruptPriority>
	__asm volatile
 80175b6:	f3ef 8211 	mrs	r2, BASEPRI
 80175ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175be:	f383 8811 	msr	BASEPRI, r3
 80175c2:	f3bf 8f6f 	isb	sy
 80175c6:	f3bf 8f4f 	dsb	sy
 80175ca:	61ba      	str	r2, [r7, #24]
 80175cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80175ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80175d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80175d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80175d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d02f      	beq.n	801763e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80175de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80175e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80175e8:	68b9      	ldr	r1, [r7, #8]
 80175ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80175ec:	f000 f8d9 	bl	80177a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80175f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f2:	1e5a      	subs	r2, r3, #1
 80175f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80175f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80175fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017600:	d112      	bne.n	8017628 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017604:	691b      	ldr	r3, [r3, #16]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d016      	beq.n	8017638 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801760c:	3310      	adds	r3, #16
 801760e:	4618      	mov	r0, r3
 8017610:	f000 fea8 	bl	8018364 <xTaskRemoveFromEventList>
 8017614:	4603      	mov	r3, r0
 8017616:	2b00      	cmp	r3, #0
 8017618:	d00e      	beq.n	8017638 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d00b      	beq.n	8017638 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	2201      	movs	r2, #1
 8017624:	601a      	str	r2, [r3, #0]
 8017626:	e007      	b.n	8017638 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801762c:	3301      	adds	r3, #1
 801762e:	b2db      	uxtb	r3, r3
 8017630:	b25a      	sxtb	r2, r3
 8017632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017638:	2301      	movs	r3, #1
 801763a:	637b      	str	r3, [r7, #52]	; 0x34
 801763c:	e001      	b.n	8017642 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801763e:	2300      	movs	r3, #0
 8017640:	637b      	str	r3, [r7, #52]	; 0x34
 8017642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017644:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017646:	693b      	ldr	r3, [r7, #16]
 8017648:	f383 8811 	msr	BASEPRI, r3
}
 801764c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801764e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017650:	4618      	mov	r0, r3
 8017652:	3738      	adds	r7, #56	; 0x38
 8017654:	46bd      	mov	sp, r7
 8017656:	bd80      	pop	{r7, pc}

08017658 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b084      	sub	sp, #16
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d10a      	bne.n	8017680 <vQueueDelete+0x28>
	__asm volatile
 801766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801766e:	f383 8811 	msr	BASEPRI, r3
 8017672:	f3bf 8f6f 	isb	sy
 8017676:	f3bf 8f4f 	dsb	sy
 801767a:	60bb      	str	r3, [r7, #8]
}
 801767c:	bf00      	nop
 801767e:	e7fe      	b.n	801767e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017680:	68f8      	ldr	r0, [r7, #12]
 8017682:	f000 f95f 	bl	8017944 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801768c:	2b00      	cmp	r3, #0
 801768e:	d102      	bne.n	8017696 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8017690:	68f8      	ldr	r0, [r7, #12]
 8017692:	f7fe fccb 	bl	801602c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017696:	bf00      	nop
 8017698:	3710      	adds	r7, #16
 801769a:	46bd      	mov	sp, r7
 801769c:	bd80      	pop	{r7, pc}

0801769e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801769e:	b480      	push	{r7}
 80176a0:	b085      	sub	sp, #20
 80176a2:	af00      	add	r7, sp, #0
 80176a4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d006      	beq.n	80176bc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80176b8:	60fb      	str	r3, [r7, #12]
 80176ba:	e001      	b.n	80176c0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80176bc:	2300      	movs	r3, #0
 80176be:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80176c0:	68fb      	ldr	r3, [r7, #12]
	}
 80176c2:	4618      	mov	r0, r3
 80176c4:	3714      	adds	r7, #20
 80176c6:	46bd      	mov	sp, r7
 80176c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176cc:	4770      	bx	lr

080176ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80176ce:	b580      	push	{r7, lr}
 80176d0:	b086      	sub	sp, #24
 80176d2:	af00      	add	r7, sp, #0
 80176d4:	60f8      	str	r0, [r7, #12]
 80176d6:	60b9      	str	r1, [r7, #8]
 80176d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80176da:	2300      	movs	r3, #0
 80176dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d10d      	bne.n	8017708 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d14d      	bne.n	8017790 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	689b      	ldr	r3, [r3, #8]
 80176f8:	4618      	mov	r0, r3
 80176fa:	f001 f889 	bl	8018810 <xTaskPriorityDisinherit>
 80176fe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	2200      	movs	r2, #0
 8017704:	609a      	str	r2, [r3, #8]
 8017706:	e043      	b.n	8017790 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d119      	bne.n	8017742 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	6858      	ldr	r0, [r3, #4]
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017716:	461a      	mov	r2, r3
 8017718:	68b9      	ldr	r1, [r7, #8]
 801771a:	f013 fb17 	bl	802ad4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	685a      	ldr	r2, [r3, #4]
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017726:	441a      	add	r2, r3
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	685a      	ldr	r2, [r3, #4]
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	689b      	ldr	r3, [r3, #8]
 8017734:	429a      	cmp	r2, r3
 8017736:	d32b      	bcc.n	8017790 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	681a      	ldr	r2, [r3, #0]
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	605a      	str	r2, [r3, #4]
 8017740:	e026      	b.n	8017790 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	68d8      	ldr	r0, [r3, #12]
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801774a:	461a      	mov	r2, r3
 801774c:	68b9      	ldr	r1, [r7, #8]
 801774e:	f013 fafd 	bl	802ad4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	68da      	ldr	r2, [r3, #12]
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801775a:	425b      	negs	r3, r3
 801775c:	441a      	add	r2, r3
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	68da      	ldr	r2, [r3, #12]
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	429a      	cmp	r2, r3
 801776c:	d207      	bcs.n	801777e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	689a      	ldr	r2, [r3, #8]
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017776:	425b      	negs	r3, r3
 8017778:	441a      	add	r2, r3
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2b02      	cmp	r3, #2
 8017782:	d105      	bne.n	8017790 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017784:	693b      	ldr	r3, [r7, #16]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d002      	beq.n	8017790 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801778a:	693b      	ldr	r3, [r7, #16]
 801778c:	3b01      	subs	r3, #1
 801778e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017790:	693b      	ldr	r3, [r7, #16]
 8017792:	1c5a      	adds	r2, r3, #1
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017798:	697b      	ldr	r3, [r7, #20]
}
 801779a:	4618      	mov	r0, r3
 801779c:	3718      	adds	r7, #24
 801779e:	46bd      	mov	sp, r7
 80177a0:	bd80      	pop	{r7, pc}

080177a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80177a2:	b580      	push	{r7, lr}
 80177a4:	b082      	sub	sp, #8
 80177a6:	af00      	add	r7, sp, #0
 80177a8:	6078      	str	r0, [r7, #4]
 80177aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d018      	beq.n	80177e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	68da      	ldr	r2, [r3, #12]
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177bc:	441a      	add	r2, r3
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	68da      	ldr	r2, [r3, #12]
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	689b      	ldr	r3, [r3, #8]
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d303      	bcc.n	80177d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	681a      	ldr	r2, [r3, #0]
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	68d9      	ldr	r1, [r3, #12]
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177de:	461a      	mov	r2, r3
 80177e0:	6838      	ldr	r0, [r7, #0]
 80177e2:	f013 fab3 	bl	802ad4c <memcpy>
	}
}
 80177e6:	bf00      	nop
 80177e8:	3708      	adds	r7, #8
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}

080177ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80177ee:	b580      	push	{r7, lr}
 80177f0:	b084      	sub	sp, #16
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80177f6:	f7fe ff1d 	bl	8016634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017800:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017802:	e011      	b.n	8017828 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017808:	2b00      	cmp	r3, #0
 801780a:	d012      	beq.n	8017832 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	3324      	adds	r3, #36	; 0x24
 8017810:	4618      	mov	r0, r3
 8017812:	f000 fda7 	bl	8018364 <xTaskRemoveFromEventList>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	d001      	beq.n	8017820 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801781c:	f000 fe7e 	bl	801851c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017820:	7bfb      	ldrb	r3, [r7, #15]
 8017822:	3b01      	subs	r3, #1
 8017824:	b2db      	uxtb	r3, r3
 8017826:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801782c:	2b00      	cmp	r3, #0
 801782e:	dce9      	bgt.n	8017804 <prvUnlockQueue+0x16>
 8017830:	e000      	b.n	8017834 <prvUnlockQueue+0x46>
					break;
 8017832:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	22ff      	movs	r2, #255	; 0xff
 8017838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801783c:	f7fe ff2a 	bl	8016694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017840:	f7fe fef8 	bl	8016634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801784a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801784c:	e011      	b.n	8017872 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	691b      	ldr	r3, [r3, #16]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d012      	beq.n	801787c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	3310      	adds	r3, #16
 801785a:	4618      	mov	r0, r3
 801785c:	f000 fd82 	bl	8018364 <xTaskRemoveFromEventList>
 8017860:	4603      	mov	r3, r0
 8017862:	2b00      	cmp	r3, #0
 8017864:	d001      	beq.n	801786a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017866:	f000 fe59 	bl	801851c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801786a:	7bbb      	ldrb	r3, [r7, #14]
 801786c:	3b01      	subs	r3, #1
 801786e:	b2db      	uxtb	r3, r3
 8017870:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017876:	2b00      	cmp	r3, #0
 8017878:	dce9      	bgt.n	801784e <prvUnlockQueue+0x60>
 801787a:	e000      	b.n	801787e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801787c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	22ff      	movs	r2, #255	; 0xff
 8017882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017886:	f7fe ff05 	bl	8016694 <vPortExitCritical>
}
 801788a:	bf00      	nop
 801788c:	3710      	adds	r7, #16
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}

08017892 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017892:	b580      	push	{r7, lr}
 8017894:	b084      	sub	sp, #16
 8017896:	af00      	add	r7, sp, #0
 8017898:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801789a:	f7fe fecb 	bl	8016634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d102      	bne.n	80178ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80178a6:	2301      	movs	r3, #1
 80178a8:	60fb      	str	r3, [r7, #12]
 80178aa:	e001      	b.n	80178b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80178ac:	2300      	movs	r3, #0
 80178ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80178b0:	f7fe fef0 	bl	8016694 <vPortExitCritical>

	return xReturn;
 80178b4:	68fb      	ldr	r3, [r7, #12]
}
 80178b6:	4618      	mov	r0, r3
 80178b8:	3710      	adds	r7, #16
 80178ba:	46bd      	mov	sp, r7
 80178bc:	bd80      	pop	{r7, pc}

080178be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80178be:	b580      	push	{r7, lr}
 80178c0:	b084      	sub	sp, #16
 80178c2:	af00      	add	r7, sp, #0
 80178c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80178c6:	f7fe feb5 	bl	8016634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178d2:	429a      	cmp	r2, r3
 80178d4:	d102      	bne.n	80178dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80178d6:	2301      	movs	r3, #1
 80178d8:	60fb      	str	r3, [r7, #12]
 80178da:	e001      	b.n	80178e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80178dc:	2300      	movs	r3, #0
 80178de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80178e0:	f7fe fed8 	bl	8016694 <vPortExitCritical>

	return xReturn;
 80178e4:	68fb      	ldr	r3, [r7, #12]
}
 80178e6:	4618      	mov	r0, r3
 80178e8:	3710      	adds	r7, #16
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd80      	pop	{r7, pc}
	...

080178f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80178f0:	b480      	push	{r7}
 80178f2:	b085      	sub	sp, #20
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
 80178f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80178fa:	2300      	movs	r3, #0
 80178fc:	60fb      	str	r3, [r7, #12]
 80178fe:	e014      	b.n	801792a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017900:	4a0f      	ldr	r2, [pc, #60]	; (8017940 <vQueueAddToRegistry+0x50>)
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d10b      	bne.n	8017924 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801790c:	490c      	ldr	r1, [pc, #48]	; (8017940 <vQueueAddToRegistry+0x50>)
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	683a      	ldr	r2, [r7, #0]
 8017912:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017916:	4a0a      	ldr	r2, [pc, #40]	; (8017940 <vQueueAddToRegistry+0x50>)
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	00db      	lsls	r3, r3, #3
 801791c:	4413      	add	r3, r2
 801791e:	687a      	ldr	r2, [r7, #4]
 8017920:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017922:	e006      	b.n	8017932 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	3301      	adds	r3, #1
 8017928:	60fb      	str	r3, [r7, #12]
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	2b07      	cmp	r3, #7
 801792e:	d9e7      	bls.n	8017900 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017930:	bf00      	nop
 8017932:	bf00      	nop
 8017934:	3714      	adds	r7, #20
 8017936:	46bd      	mov	sp, r7
 8017938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793c:	4770      	bx	lr
 801793e:	bf00      	nop
 8017940:	240268b4 	.word	0x240268b4

08017944 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017944:	b480      	push	{r7}
 8017946:	b085      	sub	sp, #20
 8017948:	af00      	add	r7, sp, #0
 801794a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801794c:	2300      	movs	r3, #0
 801794e:	60fb      	str	r3, [r7, #12]
 8017950:	e016      	b.n	8017980 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017952:	4a10      	ldr	r2, [pc, #64]	; (8017994 <vQueueUnregisterQueue+0x50>)
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	00db      	lsls	r3, r3, #3
 8017958:	4413      	add	r3, r2
 801795a:	685b      	ldr	r3, [r3, #4]
 801795c:	687a      	ldr	r2, [r7, #4]
 801795e:	429a      	cmp	r2, r3
 8017960:	d10b      	bne.n	801797a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017962:	4a0c      	ldr	r2, [pc, #48]	; (8017994 <vQueueUnregisterQueue+0x50>)
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	2100      	movs	r1, #0
 8017968:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801796c:	4a09      	ldr	r2, [pc, #36]	; (8017994 <vQueueUnregisterQueue+0x50>)
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	00db      	lsls	r3, r3, #3
 8017972:	4413      	add	r3, r2
 8017974:	2200      	movs	r2, #0
 8017976:	605a      	str	r2, [r3, #4]
				break;
 8017978:	e006      	b.n	8017988 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	3301      	adds	r3, #1
 801797e:	60fb      	str	r3, [r7, #12]
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	2b07      	cmp	r3, #7
 8017984:	d9e5      	bls.n	8017952 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017986:	bf00      	nop
 8017988:	bf00      	nop
 801798a:	3714      	adds	r7, #20
 801798c:	46bd      	mov	sp, r7
 801798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017992:	4770      	bx	lr
 8017994:	240268b4 	.word	0x240268b4

08017998 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017998:	b580      	push	{r7, lr}
 801799a:	b086      	sub	sp, #24
 801799c:	af00      	add	r7, sp, #0
 801799e:	60f8      	str	r0, [r7, #12]
 80179a0:	60b9      	str	r1, [r7, #8]
 80179a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80179a8:	f7fe fe44 	bl	8016634 <vPortEnterCritical>
 80179ac:	697b      	ldr	r3, [r7, #20]
 80179ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80179b2:	b25b      	sxtb	r3, r3
 80179b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179b8:	d103      	bne.n	80179c2 <vQueueWaitForMessageRestricted+0x2a>
 80179ba:	697b      	ldr	r3, [r7, #20]
 80179bc:	2200      	movs	r2, #0
 80179be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80179c2:	697b      	ldr	r3, [r7, #20]
 80179c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80179c8:	b25b      	sxtb	r3, r3
 80179ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179ce:	d103      	bne.n	80179d8 <vQueueWaitForMessageRestricted+0x40>
 80179d0:	697b      	ldr	r3, [r7, #20]
 80179d2:	2200      	movs	r2, #0
 80179d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80179d8:	f7fe fe5c 	bl	8016694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80179dc:	697b      	ldr	r3, [r7, #20]
 80179de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d106      	bne.n	80179f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80179e4:	697b      	ldr	r3, [r7, #20]
 80179e6:	3324      	adds	r3, #36	; 0x24
 80179e8:	687a      	ldr	r2, [r7, #4]
 80179ea:	68b9      	ldr	r1, [r7, #8]
 80179ec:	4618      	mov	r0, r3
 80179ee:	f000 fc8d 	bl	801830c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80179f2:	6978      	ldr	r0, [r7, #20]
 80179f4:	f7ff fefb 	bl	80177ee <prvUnlockQueue>
	}
 80179f8:	bf00      	nop
 80179fa:	3718      	adds	r7, #24
 80179fc:	46bd      	mov	sp, r7
 80179fe:	bd80      	pop	{r7, pc}

08017a00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b08e      	sub	sp, #56	; 0x38
 8017a04:	af04      	add	r7, sp, #16
 8017a06:	60f8      	str	r0, [r7, #12]
 8017a08:	60b9      	str	r1, [r7, #8]
 8017a0a:	607a      	str	r2, [r7, #4]
 8017a0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d10a      	bne.n	8017a2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8017a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a18:	f383 8811 	msr	BASEPRI, r3
 8017a1c:	f3bf 8f6f 	isb	sy
 8017a20:	f3bf 8f4f 	dsb	sy
 8017a24:	623b      	str	r3, [r7, #32]
}
 8017a26:	bf00      	nop
 8017a28:	e7fe      	b.n	8017a28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d10a      	bne.n	8017a46 <xTaskCreateStatic+0x46>
	__asm volatile
 8017a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a34:	f383 8811 	msr	BASEPRI, r3
 8017a38:	f3bf 8f6f 	isb	sy
 8017a3c:	f3bf 8f4f 	dsb	sy
 8017a40:	61fb      	str	r3, [r7, #28]
}
 8017a42:	bf00      	nop
 8017a44:	e7fe      	b.n	8017a44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017a46:	2360      	movs	r3, #96	; 0x60
 8017a48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017a4a:	693b      	ldr	r3, [r7, #16]
 8017a4c:	2b60      	cmp	r3, #96	; 0x60
 8017a4e:	d00a      	beq.n	8017a66 <xTaskCreateStatic+0x66>
	__asm volatile
 8017a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a54:	f383 8811 	msr	BASEPRI, r3
 8017a58:	f3bf 8f6f 	isb	sy
 8017a5c:	f3bf 8f4f 	dsb	sy
 8017a60:	61bb      	str	r3, [r7, #24]
}
 8017a62:	bf00      	nop
 8017a64:	e7fe      	b.n	8017a64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017a66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d01e      	beq.n	8017aac <xTaskCreateStatic+0xac>
 8017a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d01b      	beq.n	8017aac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a80:	2202      	movs	r2, #2
 8017a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017a86:	2300      	movs	r3, #0
 8017a88:	9303      	str	r3, [sp, #12]
 8017a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a8c:	9302      	str	r3, [sp, #8]
 8017a8e:	f107 0314 	add.w	r3, r7, #20
 8017a92:	9301      	str	r3, [sp, #4]
 8017a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a96:	9300      	str	r3, [sp, #0]
 8017a98:	683b      	ldr	r3, [r7, #0]
 8017a9a:	687a      	ldr	r2, [r7, #4]
 8017a9c:	68b9      	ldr	r1, [r7, #8]
 8017a9e:	68f8      	ldr	r0, [r7, #12]
 8017aa0:	f000 f850 	bl	8017b44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017aa6:	f000 f8df 	bl	8017c68 <prvAddNewTaskToReadyList>
 8017aaa:	e001      	b.n	8017ab0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017aac:	2300      	movs	r3, #0
 8017aae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017ab0:	697b      	ldr	r3, [r7, #20]
	}
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	3728      	adds	r7, #40	; 0x28
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bd80      	pop	{r7, pc}

08017aba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017aba:	b580      	push	{r7, lr}
 8017abc:	b08c      	sub	sp, #48	; 0x30
 8017abe:	af04      	add	r7, sp, #16
 8017ac0:	60f8      	str	r0, [r7, #12]
 8017ac2:	60b9      	str	r1, [r7, #8]
 8017ac4:	603b      	str	r3, [r7, #0]
 8017ac6:	4613      	mov	r3, r2
 8017ac8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017aca:	88fb      	ldrh	r3, [r7, #6]
 8017acc:	009b      	lsls	r3, r3, #2
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f7fe f9e0 	bl	8015e94 <pvPortMalloc>
 8017ad4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d00e      	beq.n	8017afa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017adc:	2060      	movs	r0, #96	; 0x60
 8017ade:	f7fe f9d9 	bl	8015e94 <pvPortMalloc>
 8017ae2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017ae4:	69fb      	ldr	r3, [r7, #28]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d003      	beq.n	8017af2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	697a      	ldr	r2, [r7, #20]
 8017aee:	631a      	str	r2, [r3, #48]	; 0x30
 8017af0:	e005      	b.n	8017afe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017af2:	6978      	ldr	r0, [r7, #20]
 8017af4:	f7fe fa9a 	bl	801602c <vPortFree>
 8017af8:	e001      	b.n	8017afe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017afa:	2300      	movs	r3, #0
 8017afc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017afe:	69fb      	ldr	r3, [r7, #28]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d017      	beq.n	8017b34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017b04:	69fb      	ldr	r3, [r7, #28]
 8017b06:	2200      	movs	r2, #0
 8017b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017b0c:	88fa      	ldrh	r2, [r7, #6]
 8017b0e:	2300      	movs	r3, #0
 8017b10:	9303      	str	r3, [sp, #12]
 8017b12:	69fb      	ldr	r3, [r7, #28]
 8017b14:	9302      	str	r3, [sp, #8]
 8017b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b18:	9301      	str	r3, [sp, #4]
 8017b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b1c:	9300      	str	r3, [sp, #0]
 8017b1e:	683b      	ldr	r3, [r7, #0]
 8017b20:	68b9      	ldr	r1, [r7, #8]
 8017b22:	68f8      	ldr	r0, [r7, #12]
 8017b24:	f000 f80e 	bl	8017b44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017b28:	69f8      	ldr	r0, [r7, #28]
 8017b2a:	f000 f89d 	bl	8017c68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017b2e:	2301      	movs	r3, #1
 8017b30:	61bb      	str	r3, [r7, #24]
 8017b32:	e002      	b.n	8017b3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017b34:	f04f 33ff 	mov.w	r3, #4294967295
 8017b38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017b3a:	69bb      	ldr	r3, [r7, #24]
	}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3720      	adds	r7, #32
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd80      	pop	{r7, pc}

08017b44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b088      	sub	sp, #32
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	60f8      	str	r0, [r7, #12]
 8017b4c:	60b9      	str	r1, [r7, #8]
 8017b4e:	607a      	str	r2, [r7, #4]
 8017b50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	009b      	lsls	r3, r3, #2
 8017b5a:	461a      	mov	r2, r3
 8017b5c:	21a5      	movs	r1, #165	; 0xa5
 8017b5e:	f013 f903 	bl	802ad68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017b66:	6879      	ldr	r1, [r7, #4]
 8017b68:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017b6c:	440b      	add	r3, r1
 8017b6e:	009b      	lsls	r3, r3, #2
 8017b70:	4413      	add	r3, r2
 8017b72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017b74:	69bb      	ldr	r3, [r7, #24]
 8017b76:	f023 0307 	bic.w	r3, r3, #7
 8017b7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017b7c:	69bb      	ldr	r3, [r7, #24]
 8017b7e:	f003 0307 	and.w	r3, r3, #7
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d00a      	beq.n	8017b9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8017b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b8a:	f383 8811 	msr	BASEPRI, r3
 8017b8e:	f3bf 8f6f 	isb	sy
 8017b92:	f3bf 8f4f 	dsb	sy
 8017b96:	617b      	str	r3, [r7, #20]
}
 8017b98:	bf00      	nop
 8017b9a:	e7fe      	b.n	8017b9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d01f      	beq.n	8017be2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	61fb      	str	r3, [r7, #28]
 8017ba6:	e012      	b.n	8017bce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017ba8:	68ba      	ldr	r2, [r7, #8]
 8017baa:	69fb      	ldr	r3, [r7, #28]
 8017bac:	4413      	add	r3, r2
 8017bae:	7819      	ldrb	r1, [r3, #0]
 8017bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bb2:	69fb      	ldr	r3, [r7, #28]
 8017bb4:	4413      	add	r3, r2
 8017bb6:	3334      	adds	r3, #52	; 0x34
 8017bb8:	460a      	mov	r2, r1
 8017bba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017bbc:	68ba      	ldr	r2, [r7, #8]
 8017bbe:	69fb      	ldr	r3, [r7, #28]
 8017bc0:	4413      	add	r3, r2
 8017bc2:	781b      	ldrb	r3, [r3, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d006      	beq.n	8017bd6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017bc8:	69fb      	ldr	r3, [r7, #28]
 8017bca:	3301      	adds	r3, #1
 8017bcc:	61fb      	str	r3, [r7, #28]
 8017bce:	69fb      	ldr	r3, [r7, #28]
 8017bd0:	2b0f      	cmp	r3, #15
 8017bd2:	d9e9      	bls.n	8017ba8 <prvInitialiseNewTask+0x64>
 8017bd4:	e000      	b.n	8017bd8 <prvInitialiseNewTask+0x94>
			{
				break;
 8017bd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bda:	2200      	movs	r2, #0
 8017bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017be0:	e003      	b.n	8017bea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017be4:	2200      	movs	r2, #0
 8017be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bec:	2b37      	cmp	r3, #55	; 0x37
 8017bee:	d901      	bls.n	8017bf4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017bf0:	2337      	movs	r3, #55	; 0x37
 8017bf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c02:	2200      	movs	r2, #0
 8017c04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c08:	3304      	adds	r3, #4
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7fe fb4e 	bl	80162ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c12:	3318      	adds	r3, #24
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7fe fb49 	bl	80162ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c32:	2200      	movs	r2, #0
 8017c34:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c38:	2200      	movs	r2, #0
 8017c3a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c3e:	2200      	movs	r2, #0
 8017c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017c44:	683a      	ldr	r2, [r7, #0]
 8017c46:	68f9      	ldr	r1, [r7, #12]
 8017c48:	69b8      	ldr	r0, [r7, #24]
 8017c4a:	f7fe fbc3 	bl	80163d4 <pxPortInitialiseStack>
 8017c4e:	4602      	mov	r2, r0
 8017c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d002      	beq.n	8017c60 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017c60:	bf00      	nop
 8017c62:	3720      	adds	r7, #32
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}

08017c68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017c70:	f7fe fce0 	bl	8016634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017c74:	4b2d      	ldr	r3, [pc, #180]	; (8017d2c <prvAddNewTaskToReadyList+0xc4>)
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	3301      	adds	r3, #1
 8017c7a:	4a2c      	ldr	r2, [pc, #176]	; (8017d2c <prvAddNewTaskToReadyList+0xc4>)
 8017c7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017c7e:	4b2c      	ldr	r3, [pc, #176]	; (8017d30 <prvAddNewTaskToReadyList+0xc8>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d109      	bne.n	8017c9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017c86:	4a2a      	ldr	r2, [pc, #168]	; (8017d30 <prvAddNewTaskToReadyList+0xc8>)
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017c8c:	4b27      	ldr	r3, [pc, #156]	; (8017d2c <prvAddNewTaskToReadyList+0xc4>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	2b01      	cmp	r3, #1
 8017c92:	d110      	bne.n	8017cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017c94:	f000 fc68 	bl	8018568 <prvInitialiseTaskLists>
 8017c98:	e00d      	b.n	8017cb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017c9a:	4b26      	ldr	r3, [pc, #152]	; (8017d34 <prvAddNewTaskToReadyList+0xcc>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d109      	bne.n	8017cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017ca2:	4b23      	ldr	r3, [pc, #140]	; (8017d30 <prvAddNewTaskToReadyList+0xc8>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cac:	429a      	cmp	r2, r3
 8017cae:	d802      	bhi.n	8017cb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017cb0:	4a1f      	ldr	r2, [pc, #124]	; (8017d30 <prvAddNewTaskToReadyList+0xc8>)
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017cb6:	4b20      	ldr	r3, [pc, #128]	; (8017d38 <prvAddNewTaskToReadyList+0xd0>)
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	4a1e      	ldr	r2, [pc, #120]	; (8017d38 <prvAddNewTaskToReadyList+0xd0>)
 8017cbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017cc0:	4b1d      	ldr	r3, [pc, #116]	; (8017d38 <prvAddNewTaskToReadyList+0xd0>)
 8017cc2:	681a      	ldr	r2, [r3, #0]
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ccc:	4b1b      	ldr	r3, [pc, #108]	; (8017d3c <prvAddNewTaskToReadyList+0xd4>)
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d903      	bls.n	8017cdc <prvAddNewTaskToReadyList+0x74>
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cd8:	4a18      	ldr	r2, [pc, #96]	; (8017d3c <prvAddNewTaskToReadyList+0xd4>)
 8017cda:	6013      	str	r3, [r2, #0]
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ce0:	4613      	mov	r3, r2
 8017ce2:	009b      	lsls	r3, r3, #2
 8017ce4:	4413      	add	r3, r2
 8017ce6:	009b      	lsls	r3, r3, #2
 8017ce8:	4a15      	ldr	r2, [pc, #84]	; (8017d40 <prvAddNewTaskToReadyList+0xd8>)
 8017cea:	441a      	add	r2, r3
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	3304      	adds	r3, #4
 8017cf0:	4619      	mov	r1, r3
 8017cf2:	4610      	mov	r0, r2
 8017cf4:	f7fe fae7 	bl	80162c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017cf8:	f7fe fccc 	bl	8016694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017cfc:	4b0d      	ldr	r3, [pc, #52]	; (8017d34 <prvAddNewTaskToReadyList+0xcc>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d00e      	beq.n	8017d22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017d04:	4b0a      	ldr	r3, [pc, #40]	; (8017d30 <prvAddNewTaskToReadyList+0xc8>)
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	d207      	bcs.n	8017d22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017d12:	4b0c      	ldr	r3, [pc, #48]	; (8017d44 <prvAddNewTaskToReadyList+0xdc>)
 8017d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d18:	601a      	str	r2, [r3, #0]
 8017d1a:	f3bf 8f4f 	dsb	sy
 8017d1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017d22:	bf00      	nop
 8017d24:	3708      	adds	r7, #8
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}
 8017d2a:	bf00      	nop
 8017d2c:	24026dc8 	.word	0x24026dc8
 8017d30:	240268f4 	.word	0x240268f4
 8017d34:	24026dd4 	.word	0x24026dd4
 8017d38:	24026de4 	.word	0x24026de4
 8017d3c:	24026dd0 	.word	0x24026dd0
 8017d40:	240268f8 	.word	0x240268f8
 8017d44:	e000ed04 	.word	0xe000ed04

08017d48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b084      	sub	sp, #16
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017d50:	2300      	movs	r3, #0
 8017d52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d017      	beq.n	8017d8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017d5a:	4b13      	ldr	r3, [pc, #76]	; (8017da8 <vTaskDelay+0x60>)
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d00a      	beq.n	8017d78 <vTaskDelay+0x30>
	__asm volatile
 8017d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d66:	f383 8811 	msr	BASEPRI, r3
 8017d6a:	f3bf 8f6f 	isb	sy
 8017d6e:	f3bf 8f4f 	dsb	sy
 8017d72:	60bb      	str	r3, [r7, #8]
}
 8017d74:	bf00      	nop
 8017d76:	e7fe      	b.n	8017d76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017d78:	f000 f888 	bl	8017e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017d7c:	2100      	movs	r1, #0
 8017d7e:	6878      	ldr	r0, [r7, #4]
 8017d80:	f000 fe4a 	bl	8018a18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017d84:	f000 f890 	bl	8017ea8 <xTaskResumeAll>
 8017d88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d107      	bne.n	8017da0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017d90:	4b06      	ldr	r3, [pc, #24]	; (8017dac <vTaskDelay+0x64>)
 8017d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d96:	601a      	str	r2, [r3, #0]
 8017d98:	f3bf 8f4f 	dsb	sy
 8017d9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017da0:	bf00      	nop
 8017da2:	3710      	adds	r7, #16
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}
 8017da8:	24026df0 	.word	0x24026df0
 8017dac:	e000ed04 	.word	0xe000ed04

08017db0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b08a      	sub	sp, #40	; 0x28
 8017db4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017db6:	2300      	movs	r3, #0
 8017db8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017dba:	2300      	movs	r3, #0
 8017dbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017dbe:	463a      	mov	r2, r7
 8017dc0:	1d39      	adds	r1, r7, #4
 8017dc2:	f107 0308 	add.w	r3, r7, #8
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f7fe f830 	bl	8015e2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017dcc:	6839      	ldr	r1, [r7, #0]
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	68ba      	ldr	r2, [r7, #8]
 8017dd2:	9202      	str	r2, [sp, #8]
 8017dd4:	9301      	str	r3, [sp, #4]
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	9300      	str	r3, [sp, #0]
 8017dda:	2300      	movs	r3, #0
 8017ddc:	460a      	mov	r2, r1
 8017dde:	4924      	ldr	r1, [pc, #144]	; (8017e70 <vTaskStartScheduler+0xc0>)
 8017de0:	4824      	ldr	r0, [pc, #144]	; (8017e74 <vTaskStartScheduler+0xc4>)
 8017de2:	f7ff fe0d 	bl	8017a00 <xTaskCreateStatic>
 8017de6:	4603      	mov	r3, r0
 8017de8:	4a23      	ldr	r2, [pc, #140]	; (8017e78 <vTaskStartScheduler+0xc8>)
 8017dea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017dec:	4b22      	ldr	r3, [pc, #136]	; (8017e78 <vTaskStartScheduler+0xc8>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d002      	beq.n	8017dfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017df4:	2301      	movs	r3, #1
 8017df6:	617b      	str	r3, [r7, #20]
 8017df8:	e001      	b.n	8017dfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017dfe:	697b      	ldr	r3, [r7, #20]
 8017e00:	2b01      	cmp	r3, #1
 8017e02:	d102      	bne.n	8017e0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017e04:	f000 fe5c 	bl	8018ac0 <xTimerCreateTimerTask>
 8017e08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	2b01      	cmp	r3, #1
 8017e0e:	d11c      	bne.n	8017e4a <vTaskStartScheduler+0x9a>
	__asm volatile
 8017e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e14:	f383 8811 	msr	BASEPRI, r3
 8017e18:	f3bf 8f6f 	isb	sy
 8017e1c:	f3bf 8f4f 	dsb	sy
 8017e20:	613b      	str	r3, [r7, #16]
}
 8017e22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017e24:	4b15      	ldr	r3, [pc, #84]	; (8017e7c <vTaskStartScheduler+0xcc>)
 8017e26:	f04f 32ff 	mov.w	r2, #4294967295
 8017e2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017e2c:	4b14      	ldr	r3, [pc, #80]	; (8017e80 <vTaskStartScheduler+0xd0>)
 8017e2e:	2201      	movs	r2, #1
 8017e30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017e32:	4b14      	ldr	r3, [pc, #80]	; (8017e84 <vTaskStartScheduler+0xd4>)
 8017e34:	2200      	movs	r2, #0
 8017e36:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8017e38:	4b13      	ldr	r3, [pc, #76]	; (8017e88 <vTaskStartScheduler+0xd8>)
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	2100      	movs	r1, #0
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f000 f9b6 	bl	80181b0 <xTaskCallApplicationTaskHook>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017e44:	f7fe fb54 	bl	80164f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017e48:	e00e      	b.n	8017e68 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017e4a:	697b      	ldr	r3, [r7, #20]
 8017e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e50:	d10a      	bne.n	8017e68 <vTaskStartScheduler+0xb8>
	__asm volatile
 8017e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e56:	f383 8811 	msr	BASEPRI, r3
 8017e5a:	f3bf 8f6f 	isb	sy
 8017e5e:	f3bf 8f4f 	dsb	sy
 8017e62:	60fb      	str	r3, [r7, #12]
}
 8017e64:	bf00      	nop
 8017e66:	e7fe      	b.n	8017e66 <vTaskStartScheduler+0xb6>
}
 8017e68:	bf00      	nop
 8017e6a:	3718      	adds	r7, #24
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	bd80      	pop	{r7, pc}
 8017e70:	0802dfb8 	.word	0x0802dfb8
 8017e74:	08018535 	.word	0x08018535
 8017e78:	24026dec 	.word	0x24026dec
 8017e7c:	24026de8 	.word	0x24026de8
 8017e80:	24026dd4 	.word	0x24026dd4
 8017e84:	24026dcc 	.word	0x24026dcc
 8017e88:	240268f4 	.word	0x240268f4

08017e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017e8c:	b480      	push	{r7}
 8017e8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017e90:	4b04      	ldr	r3, [pc, #16]	; (8017ea4 <vTaskSuspendAll+0x18>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	3301      	adds	r3, #1
 8017e96:	4a03      	ldr	r2, [pc, #12]	; (8017ea4 <vTaskSuspendAll+0x18>)
 8017e98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017e9a:	bf00      	nop
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea2:	4770      	bx	lr
 8017ea4:	24026df0 	.word	0x24026df0

08017ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b084      	sub	sp, #16
 8017eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017eae:	2300      	movs	r3, #0
 8017eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017eb6:	4b42      	ldr	r3, [pc, #264]	; (8017fc0 <xTaskResumeAll+0x118>)
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d10a      	bne.n	8017ed4 <xTaskResumeAll+0x2c>
	__asm volatile
 8017ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ec2:	f383 8811 	msr	BASEPRI, r3
 8017ec6:	f3bf 8f6f 	isb	sy
 8017eca:	f3bf 8f4f 	dsb	sy
 8017ece:	603b      	str	r3, [r7, #0]
}
 8017ed0:	bf00      	nop
 8017ed2:	e7fe      	b.n	8017ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017ed4:	f7fe fbae 	bl	8016634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017ed8:	4b39      	ldr	r3, [pc, #228]	; (8017fc0 <xTaskResumeAll+0x118>)
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	3b01      	subs	r3, #1
 8017ede:	4a38      	ldr	r2, [pc, #224]	; (8017fc0 <xTaskResumeAll+0x118>)
 8017ee0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017ee2:	4b37      	ldr	r3, [pc, #220]	; (8017fc0 <xTaskResumeAll+0x118>)
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d162      	bne.n	8017fb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017eea:	4b36      	ldr	r3, [pc, #216]	; (8017fc4 <xTaskResumeAll+0x11c>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d05e      	beq.n	8017fb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017ef2:	e02f      	b.n	8017f54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ef4:	4b34      	ldr	r3, [pc, #208]	; (8017fc8 <xTaskResumeAll+0x120>)
 8017ef6:	68db      	ldr	r3, [r3, #12]
 8017ef8:	68db      	ldr	r3, [r3, #12]
 8017efa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	3318      	adds	r3, #24
 8017f00:	4618      	mov	r0, r3
 8017f02:	f7fe fa3d 	bl	8016380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	3304      	adds	r3, #4
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7fe fa38 	bl	8016380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f14:	4b2d      	ldr	r3, [pc, #180]	; (8017fcc <xTaskResumeAll+0x124>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	d903      	bls.n	8017f24 <xTaskResumeAll+0x7c>
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f20:	4a2a      	ldr	r2, [pc, #168]	; (8017fcc <xTaskResumeAll+0x124>)
 8017f22:	6013      	str	r3, [r2, #0]
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f28:	4613      	mov	r3, r2
 8017f2a:	009b      	lsls	r3, r3, #2
 8017f2c:	4413      	add	r3, r2
 8017f2e:	009b      	lsls	r3, r3, #2
 8017f30:	4a27      	ldr	r2, [pc, #156]	; (8017fd0 <xTaskResumeAll+0x128>)
 8017f32:	441a      	add	r2, r3
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	3304      	adds	r3, #4
 8017f38:	4619      	mov	r1, r3
 8017f3a:	4610      	mov	r0, r2
 8017f3c:	f7fe f9c3 	bl	80162c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f44:	4b23      	ldr	r3, [pc, #140]	; (8017fd4 <xTaskResumeAll+0x12c>)
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f4a:	429a      	cmp	r2, r3
 8017f4c:	d302      	bcc.n	8017f54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017f4e:	4b22      	ldr	r3, [pc, #136]	; (8017fd8 <xTaskResumeAll+0x130>)
 8017f50:	2201      	movs	r2, #1
 8017f52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017f54:	4b1c      	ldr	r3, [pc, #112]	; (8017fc8 <xTaskResumeAll+0x120>)
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d1cb      	bne.n	8017ef4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d001      	beq.n	8017f66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017f62:	f000 fb9f 	bl	80186a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017f66:	4b1d      	ldr	r3, [pc, #116]	; (8017fdc <xTaskResumeAll+0x134>)
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d010      	beq.n	8017f94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017f72:	f000 f847 	bl	8018004 <xTaskIncrementTick>
 8017f76:	4603      	mov	r3, r0
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d002      	beq.n	8017f82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017f7c:	4b16      	ldr	r3, [pc, #88]	; (8017fd8 <xTaskResumeAll+0x130>)
 8017f7e:	2201      	movs	r2, #1
 8017f80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	3b01      	subs	r3, #1
 8017f86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d1f1      	bne.n	8017f72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017f8e:	4b13      	ldr	r3, [pc, #76]	; (8017fdc <xTaskResumeAll+0x134>)
 8017f90:	2200      	movs	r2, #0
 8017f92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017f94:	4b10      	ldr	r3, [pc, #64]	; (8017fd8 <xTaskResumeAll+0x130>)
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d009      	beq.n	8017fb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017f9c:	2301      	movs	r3, #1
 8017f9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017fa0:	4b0f      	ldr	r3, [pc, #60]	; (8017fe0 <xTaskResumeAll+0x138>)
 8017fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017fa6:	601a      	str	r2, [r3, #0]
 8017fa8:	f3bf 8f4f 	dsb	sy
 8017fac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017fb0:	f7fe fb70 	bl	8016694 <vPortExitCritical>

	return xAlreadyYielded;
 8017fb4:	68bb      	ldr	r3, [r7, #8]
}
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	3710      	adds	r7, #16
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}
 8017fbe:	bf00      	nop
 8017fc0:	24026df0 	.word	0x24026df0
 8017fc4:	24026dc8 	.word	0x24026dc8
 8017fc8:	24026d88 	.word	0x24026d88
 8017fcc:	24026dd0 	.word	0x24026dd0
 8017fd0:	240268f8 	.word	0x240268f8
 8017fd4:	240268f4 	.word	0x240268f4
 8017fd8:	24026ddc 	.word	0x24026ddc
 8017fdc:	24026dd8 	.word	0x24026dd8
 8017fe0:	e000ed04 	.word	0xe000ed04

08017fe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017fe4:	b480      	push	{r7}
 8017fe6:	b083      	sub	sp, #12
 8017fe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017fea:	4b05      	ldr	r3, [pc, #20]	; (8018000 <xTaskGetTickCount+0x1c>)
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017ff0:	687b      	ldr	r3, [r7, #4]
}
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	370c      	adds	r7, #12
 8017ff6:	46bd      	mov	sp, r7
 8017ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ffc:	4770      	bx	lr
 8017ffe:	bf00      	nop
 8018000:	24026dcc 	.word	0x24026dcc

08018004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b086      	sub	sp, #24
 8018008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801800a:	2300      	movs	r3, #0
 801800c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801800e:	4b4f      	ldr	r3, [pc, #316]	; (801814c <xTaskIncrementTick+0x148>)
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	2b00      	cmp	r3, #0
 8018014:	f040 808f 	bne.w	8018136 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018018:	4b4d      	ldr	r3, [pc, #308]	; (8018150 <xTaskIncrementTick+0x14c>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	3301      	adds	r3, #1
 801801e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018020:	4a4b      	ldr	r2, [pc, #300]	; (8018150 <xTaskIncrementTick+0x14c>)
 8018022:	693b      	ldr	r3, [r7, #16]
 8018024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018026:	693b      	ldr	r3, [r7, #16]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d120      	bne.n	801806e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801802c:	4b49      	ldr	r3, [pc, #292]	; (8018154 <xTaskIncrementTick+0x150>)
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d00a      	beq.n	801804c <xTaskIncrementTick+0x48>
	__asm volatile
 8018036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801803a:	f383 8811 	msr	BASEPRI, r3
 801803e:	f3bf 8f6f 	isb	sy
 8018042:	f3bf 8f4f 	dsb	sy
 8018046:	603b      	str	r3, [r7, #0]
}
 8018048:	bf00      	nop
 801804a:	e7fe      	b.n	801804a <xTaskIncrementTick+0x46>
 801804c:	4b41      	ldr	r3, [pc, #260]	; (8018154 <xTaskIncrementTick+0x150>)
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	60fb      	str	r3, [r7, #12]
 8018052:	4b41      	ldr	r3, [pc, #260]	; (8018158 <xTaskIncrementTick+0x154>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	4a3f      	ldr	r2, [pc, #252]	; (8018154 <xTaskIncrementTick+0x150>)
 8018058:	6013      	str	r3, [r2, #0]
 801805a:	4a3f      	ldr	r2, [pc, #252]	; (8018158 <xTaskIncrementTick+0x154>)
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	6013      	str	r3, [r2, #0]
 8018060:	4b3e      	ldr	r3, [pc, #248]	; (801815c <xTaskIncrementTick+0x158>)
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	3301      	adds	r3, #1
 8018066:	4a3d      	ldr	r2, [pc, #244]	; (801815c <xTaskIncrementTick+0x158>)
 8018068:	6013      	str	r3, [r2, #0]
 801806a:	f000 fb1b 	bl	80186a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801806e:	4b3c      	ldr	r3, [pc, #240]	; (8018160 <xTaskIncrementTick+0x15c>)
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	693a      	ldr	r2, [r7, #16]
 8018074:	429a      	cmp	r2, r3
 8018076:	d349      	bcc.n	801810c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018078:	4b36      	ldr	r3, [pc, #216]	; (8018154 <xTaskIncrementTick+0x150>)
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d104      	bne.n	801808c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018082:	4b37      	ldr	r3, [pc, #220]	; (8018160 <xTaskIncrementTick+0x15c>)
 8018084:	f04f 32ff 	mov.w	r2, #4294967295
 8018088:	601a      	str	r2, [r3, #0]
					break;
 801808a:	e03f      	b.n	801810c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801808c:	4b31      	ldr	r3, [pc, #196]	; (8018154 <xTaskIncrementTick+0x150>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	68db      	ldr	r3, [r3, #12]
 8018092:	68db      	ldr	r3, [r3, #12]
 8018094:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	685b      	ldr	r3, [r3, #4]
 801809a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801809c:	693a      	ldr	r2, [r7, #16]
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	429a      	cmp	r2, r3
 80180a2:	d203      	bcs.n	80180ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80180a4:	4a2e      	ldr	r2, [pc, #184]	; (8018160 <xTaskIncrementTick+0x15c>)
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80180aa:	e02f      	b.n	801810c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	3304      	adds	r3, #4
 80180b0:	4618      	mov	r0, r3
 80180b2:	f7fe f965 	bl	8016380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80180b6:	68bb      	ldr	r3, [r7, #8]
 80180b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d004      	beq.n	80180c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80180be:	68bb      	ldr	r3, [r7, #8]
 80180c0:	3318      	adds	r3, #24
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7fe f95c 	bl	8016380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80180c8:	68bb      	ldr	r3, [r7, #8]
 80180ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180cc:	4b25      	ldr	r3, [pc, #148]	; (8018164 <xTaskIncrementTick+0x160>)
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	429a      	cmp	r2, r3
 80180d2:	d903      	bls.n	80180dc <xTaskIncrementTick+0xd8>
 80180d4:	68bb      	ldr	r3, [r7, #8]
 80180d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180d8:	4a22      	ldr	r2, [pc, #136]	; (8018164 <xTaskIncrementTick+0x160>)
 80180da:	6013      	str	r3, [r2, #0]
 80180dc:	68bb      	ldr	r3, [r7, #8]
 80180de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180e0:	4613      	mov	r3, r2
 80180e2:	009b      	lsls	r3, r3, #2
 80180e4:	4413      	add	r3, r2
 80180e6:	009b      	lsls	r3, r3, #2
 80180e8:	4a1f      	ldr	r2, [pc, #124]	; (8018168 <xTaskIncrementTick+0x164>)
 80180ea:	441a      	add	r2, r3
 80180ec:	68bb      	ldr	r3, [r7, #8]
 80180ee:	3304      	adds	r3, #4
 80180f0:	4619      	mov	r1, r3
 80180f2:	4610      	mov	r0, r2
 80180f4:	f7fe f8e7 	bl	80162c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80180f8:	68bb      	ldr	r3, [r7, #8]
 80180fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180fc:	4b1b      	ldr	r3, [pc, #108]	; (801816c <xTaskIncrementTick+0x168>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018102:	429a      	cmp	r2, r3
 8018104:	d3b8      	bcc.n	8018078 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018106:	2301      	movs	r3, #1
 8018108:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801810a:	e7b5      	b.n	8018078 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801810c:	4b17      	ldr	r3, [pc, #92]	; (801816c <xTaskIncrementTick+0x168>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018112:	4915      	ldr	r1, [pc, #84]	; (8018168 <xTaskIncrementTick+0x164>)
 8018114:	4613      	mov	r3, r2
 8018116:	009b      	lsls	r3, r3, #2
 8018118:	4413      	add	r3, r2
 801811a:	009b      	lsls	r3, r3, #2
 801811c:	440b      	add	r3, r1
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	2b01      	cmp	r3, #1
 8018122:	d901      	bls.n	8018128 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018124:	2301      	movs	r3, #1
 8018126:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018128:	4b11      	ldr	r3, [pc, #68]	; (8018170 <xTaskIncrementTick+0x16c>)
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d007      	beq.n	8018140 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018130:	2301      	movs	r3, #1
 8018132:	617b      	str	r3, [r7, #20]
 8018134:	e004      	b.n	8018140 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018136:	4b0f      	ldr	r3, [pc, #60]	; (8018174 <xTaskIncrementTick+0x170>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	3301      	adds	r3, #1
 801813c:	4a0d      	ldr	r2, [pc, #52]	; (8018174 <xTaskIncrementTick+0x170>)
 801813e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018140:	697b      	ldr	r3, [r7, #20]
}
 8018142:	4618      	mov	r0, r3
 8018144:	3718      	adds	r7, #24
 8018146:	46bd      	mov	sp, r7
 8018148:	bd80      	pop	{r7, pc}
 801814a:	bf00      	nop
 801814c:	24026df0 	.word	0x24026df0
 8018150:	24026dcc 	.word	0x24026dcc
 8018154:	24026d80 	.word	0x24026d80
 8018158:	24026d84 	.word	0x24026d84
 801815c:	24026de0 	.word	0x24026de0
 8018160:	24026de8 	.word	0x24026de8
 8018164:	24026dd0 	.word	0x24026dd0
 8018168:	240268f8 	.word	0x240268f8
 801816c:	240268f4 	.word	0x240268f4
 8018170:	24026ddc 	.word	0x24026ddc
 8018174:	24026dd8 	.word	0x24026dd8

08018178 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8018178:	b580      	push	{r7, lr}
 801817a:	b084      	sub	sp, #16
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
 8018180:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d103      	bne.n	8018190 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8018188:	4b08      	ldr	r3, [pc, #32]	; (80181ac <vTaskSetApplicationTaskTag+0x34>)
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	60fb      	str	r3, [r7, #12]
 801818e:	e001      	b.n	8018194 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8018194:	f7fe fa4e 	bl	8016634 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	683a      	ldr	r2, [r7, #0]
 801819c:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 801819e:	f7fe fa79 	bl	8016694 <vPortExitCritical>
	}
 80181a2:	bf00      	nop
 80181a4:	3710      	adds	r7, #16
 80181a6:	46bd      	mov	sp, r7
 80181a8:	bd80      	pop	{r7, pc}
 80181aa:	bf00      	nop
 80181ac:	240268f4 	.word	0x240268f4

080181b0 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b084      	sub	sp, #16
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
 80181b8:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d103      	bne.n	80181c8 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = pxCurrentTCB;
 80181c0:	4b0b      	ldr	r3, [pc, #44]	; (80181f0 <xTaskCallApplicationTaskHook+0x40>)
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	60fb      	str	r3, [r7, #12]
 80181c6:	e001      	b.n	80181cc <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = xTask;
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d005      	beq.n	80181e0 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80181d8:	6838      	ldr	r0, [r7, #0]
 80181da:	4798      	blx	r3
 80181dc:	60b8      	str	r0, [r7, #8]
 80181de:	e001      	b.n	80181e4 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 80181e0:	2300      	movs	r3, #0
 80181e2:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 80181e4:	68bb      	ldr	r3, [r7, #8]
	}
 80181e6:	4618      	mov	r0, r3
 80181e8:	3710      	adds	r7, #16
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}
 80181ee:	bf00      	nop
 80181f0:	240268f4 	.word	0x240268f4

080181f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b084      	sub	sp, #16
 80181f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80181fa:	4b2d      	ldr	r3, [pc, #180]	; (80182b0 <vTaskSwitchContext+0xbc>)
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d003      	beq.n	801820a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018202:	4b2c      	ldr	r3, [pc, #176]	; (80182b4 <vTaskSwitchContext+0xc0>)
 8018204:	2201      	movs	r2, #1
 8018206:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018208:	e04d      	b.n	80182a6 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 801820a:	4b2a      	ldr	r3, [pc, #168]	; (80182b4 <vTaskSwitchContext+0xc0>)
 801820c:	2200      	movs	r2, #0
 801820e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8018210:	4b29      	ldr	r3, [pc, #164]	; (80182b8 <vTaskSwitchContext+0xc4>)
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	2101      	movs	r1, #1
 8018216:	4618      	mov	r0, r3
 8018218:	f7ff ffca 	bl	80181b0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801821c:	4b27      	ldr	r3, [pc, #156]	; (80182bc <vTaskSwitchContext+0xc8>)
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	60fb      	str	r3, [r7, #12]
 8018222:	e010      	b.n	8018246 <vTaskSwitchContext+0x52>
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d10a      	bne.n	8018240 <vTaskSwitchContext+0x4c>
	__asm volatile
 801822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801822e:	f383 8811 	msr	BASEPRI, r3
 8018232:	f3bf 8f6f 	isb	sy
 8018236:	f3bf 8f4f 	dsb	sy
 801823a:	607b      	str	r3, [r7, #4]
}
 801823c:	bf00      	nop
 801823e:	e7fe      	b.n	801823e <vTaskSwitchContext+0x4a>
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	3b01      	subs	r3, #1
 8018244:	60fb      	str	r3, [r7, #12]
 8018246:	491e      	ldr	r1, [pc, #120]	; (80182c0 <vTaskSwitchContext+0xcc>)
 8018248:	68fa      	ldr	r2, [r7, #12]
 801824a:	4613      	mov	r3, r2
 801824c:	009b      	lsls	r3, r3, #2
 801824e:	4413      	add	r3, r2
 8018250:	009b      	lsls	r3, r3, #2
 8018252:	440b      	add	r3, r1
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d0e4      	beq.n	8018224 <vTaskSwitchContext+0x30>
 801825a:	68fa      	ldr	r2, [r7, #12]
 801825c:	4613      	mov	r3, r2
 801825e:	009b      	lsls	r3, r3, #2
 8018260:	4413      	add	r3, r2
 8018262:	009b      	lsls	r3, r3, #2
 8018264:	4a16      	ldr	r2, [pc, #88]	; (80182c0 <vTaskSwitchContext+0xcc>)
 8018266:	4413      	add	r3, r2
 8018268:	60bb      	str	r3, [r7, #8]
 801826a:	68bb      	ldr	r3, [r7, #8]
 801826c:	685b      	ldr	r3, [r3, #4]
 801826e:	685a      	ldr	r2, [r3, #4]
 8018270:	68bb      	ldr	r3, [r7, #8]
 8018272:	605a      	str	r2, [r3, #4]
 8018274:	68bb      	ldr	r3, [r7, #8]
 8018276:	685a      	ldr	r2, [r3, #4]
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	3308      	adds	r3, #8
 801827c:	429a      	cmp	r2, r3
 801827e:	d104      	bne.n	801828a <vTaskSwitchContext+0x96>
 8018280:	68bb      	ldr	r3, [r7, #8]
 8018282:	685b      	ldr	r3, [r3, #4]
 8018284:	685a      	ldr	r2, [r3, #4]
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	605a      	str	r2, [r3, #4]
 801828a:	68bb      	ldr	r3, [r7, #8]
 801828c:	685b      	ldr	r3, [r3, #4]
 801828e:	68db      	ldr	r3, [r3, #12]
 8018290:	4a09      	ldr	r2, [pc, #36]	; (80182b8 <vTaskSwitchContext+0xc4>)
 8018292:	6013      	str	r3, [r2, #0]
 8018294:	4a09      	ldr	r2, [pc, #36]	; (80182bc <vTaskSwitchContext+0xc8>)
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801829a:	4b07      	ldr	r3, [pc, #28]	; (80182b8 <vTaskSwitchContext+0xc4>)
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	2100      	movs	r1, #0
 80182a0:	4618      	mov	r0, r3
 80182a2:	f7ff ff85 	bl	80181b0 <xTaskCallApplicationTaskHook>
}
 80182a6:	bf00      	nop
 80182a8:	3710      	adds	r7, #16
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bd80      	pop	{r7, pc}
 80182ae:	bf00      	nop
 80182b0:	24026df0 	.word	0x24026df0
 80182b4:	24026ddc 	.word	0x24026ddc
 80182b8:	240268f4 	.word	0x240268f4
 80182bc:	24026dd0 	.word	0x24026dd0
 80182c0:	240268f8 	.word	0x240268f8

080182c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	b084      	sub	sp, #16
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
 80182cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d10a      	bne.n	80182ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80182d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182d8:	f383 8811 	msr	BASEPRI, r3
 80182dc:	f3bf 8f6f 	isb	sy
 80182e0:	f3bf 8f4f 	dsb	sy
 80182e4:	60fb      	str	r3, [r7, #12]
}
 80182e6:	bf00      	nop
 80182e8:	e7fe      	b.n	80182e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80182ea:	4b07      	ldr	r3, [pc, #28]	; (8018308 <vTaskPlaceOnEventList+0x44>)
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	3318      	adds	r3, #24
 80182f0:	4619      	mov	r1, r3
 80182f2:	6878      	ldr	r0, [r7, #4]
 80182f4:	f7fe f80b 	bl	801630e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80182f8:	2101      	movs	r1, #1
 80182fa:	6838      	ldr	r0, [r7, #0]
 80182fc:	f000 fb8c 	bl	8018a18 <prvAddCurrentTaskToDelayedList>
}
 8018300:	bf00      	nop
 8018302:	3710      	adds	r7, #16
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}
 8018308:	240268f4 	.word	0x240268f4

0801830c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801830c:	b580      	push	{r7, lr}
 801830e:	b086      	sub	sp, #24
 8018310:	af00      	add	r7, sp, #0
 8018312:	60f8      	str	r0, [r7, #12]
 8018314:	60b9      	str	r1, [r7, #8]
 8018316:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d10a      	bne.n	8018334 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018322:	f383 8811 	msr	BASEPRI, r3
 8018326:	f3bf 8f6f 	isb	sy
 801832a:	f3bf 8f4f 	dsb	sy
 801832e:	617b      	str	r3, [r7, #20]
}
 8018330:	bf00      	nop
 8018332:	e7fe      	b.n	8018332 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018334:	4b0a      	ldr	r3, [pc, #40]	; (8018360 <vTaskPlaceOnEventListRestricted+0x54>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	3318      	adds	r3, #24
 801833a:	4619      	mov	r1, r3
 801833c:	68f8      	ldr	r0, [r7, #12]
 801833e:	f7fd ffc2 	bl	80162c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d002      	beq.n	801834e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018348:	f04f 33ff 	mov.w	r3, #4294967295
 801834c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801834e:	6879      	ldr	r1, [r7, #4]
 8018350:	68b8      	ldr	r0, [r7, #8]
 8018352:	f000 fb61 	bl	8018a18 <prvAddCurrentTaskToDelayedList>
	}
 8018356:	bf00      	nop
 8018358:	3718      	adds	r7, #24
 801835a:	46bd      	mov	sp, r7
 801835c:	bd80      	pop	{r7, pc}
 801835e:	bf00      	nop
 8018360:	240268f4 	.word	0x240268f4

08018364 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b086      	sub	sp, #24
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	68db      	ldr	r3, [r3, #12]
 8018370:	68db      	ldr	r3, [r3, #12]
 8018372:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018374:	693b      	ldr	r3, [r7, #16]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d10a      	bne.n	8018390 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801837e:	f383 8811 	msr	BASEPRI, r3
 8018382:	f3bf 8f6f 	isb	sy
 8018386:	f3bf 8f4f 	dsb	sy
 801838a:	60fb      	str	r3, [r7, #12]
}
 801838c:	bf00      	nop
 801838e:	e7fe      	b.n	801838e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018390:	693b      	ldr	r3, [r7, #16]
 8018392:	3318      	adds	r3, #24
 8018394:	4618      	mov	r0, r3
 8018396:	f7fd fff3 	bl	8016380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801839a:	4b1e      	ldr	r3, [pc, #120]	; (8018414 <xTaskRemoveFromEventList+0xb0>)
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d11d      	bne.n	80183de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80183a2:	693b      	ldr	r3, [r7, #16]
 80183a4:	3304      	adds	r3, #4
 80183a6:	4618      	mov	r0, r3
 80183a8:	f7fd ffea 	bl	8016380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80183ac:	693b      	ldr	r3, [r7, #16]
 80183ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183b0:	4b19      	ldr	r3, [pc, #100]	; (8018418 <xTaskRemoveFromEventList+0xb4>)
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d903      	bls.n	80183c0 <xTaskRemoveFromEventList+0x5c>
 80183b8:	693b      	ldr	r3, [r7, #16]
 80183ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183bc:	4a16      	ldr	r2, [pc, #88]	; (8018418 <xTaskRemoveFromEventList+0xb4>)
 80183be:	6013      	str	r3, [r2, #0]
 80183c0:	693b      	ldr	r3, [r7, #16]
 80183c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183c4:	4613      	mov	r3, r2
 80183c6:	009b      	lsls	r3, r3, #2
 80183c8:	4413      	add	r3, r2
 80183ca:	009b      	lsls	r3, r3, #2
 80183cc:	4a13      	ldr	r2, [pc, #76]	; (801841c <xTaskRemoveFromEventList+0xb8>)
 80183ce:	441a      	add	r2, r3
 80183d0:	693b      	ldr	r3, [r7, #16]
 80183d2:	3304      	adds	r3, #4
 80183d4:	4619      	mov	r1, r3
 80183d6:	4610      	mov	r0, r2
 80183d8:	f7fd ff75 	bl	80162c6 <vListInsertEnd>
 80183dc:	e005      	b.n	80183ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80183de:	693b      	ldr	r3, [r7, #16]
 80183e0:	3318      	adds	r3, #24
 80183e2:	4619      	mov	r1, r3
 80183e4:	480e      	ldr	r0, [pc, #56]	; (8018420 <xTaskRemoveFromEventList+0xbc>)
 80183e6:	f7fd ff6e 	bl	80162c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80183ea:	693b      	ldr	r3, [r7, #16]
 80183ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183ee:	4b0d      	ldr	r3, [pc, #52]	; (8018424 <xTaskRemoveFromEventList+0xc0>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183f4:	429a      	cmp	r2, r3
 80183f6:	d905      	bls.n	8018404 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80183f8:	2301      	movs	r3, #1
 80183fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80183fc:	4b0a      	ldr	r3, [pc, #40]	; (8018428 <xTaskRemoveFromEventList+0xc4>)
 80183fe:	2201      	movs	r2, #1
 8018400:	601a      	str	r2, [r3, #0]
 8018402:	e001      	b.n	8018408 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018404:	2300      	movs	r3, #0
 8018406:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018408:	697b      	ldr	r3, [r7, #20]
}
 801840a:	4618      	mov	r0, r3
 801840c:	3718      	adds	r7, #24
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}
 8018412:	bf00      	nop
 8018414:	24026df0 	.word	0x24026df0
 8018418:	24026dd0 	.word	0x24026dd0
 801841c:	240268f8 	.word	0x240268f8
 8018420:	24026d88 	.word	0x24026d88
 8018424:	240268f4 	.word	0x240268f4
 8018428:	24026ddc 	.word	0x24026ddc

0801842c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801842c:	b480      	push	{r7}
 801842e:	b083      	sub	sp, #12
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018434:	4b06      	ldr	r3, [pc, #24]	; (8018450 <vTaskInternalSetTimeOutState+0x24>)
 8018436:	681a      	ldr	r2, [r3, #0]
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801843c:	4b05      	ldr	r3, [pc, #20]	; (8018454 <vTaskInternalSetTimeOutState+0x28>)
 801843e:	681a      	ldr	r2, [r3, #0]
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	605a      	str	r2, [r3, #4]
}
 8018444:	bf00      	nop
 8018446:	370c      	adds	r7, #12
 8018448:	46bd      	mov	sp, r7
 801844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844e:	4770      	bx	lr
 8018450:	24026de0 	.word	0x24026de0
 8018454:	24026dcc 	.word	0x24026dcc

08018458 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b088      	sub	sp, #32
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]
 8018460:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d10a      	bne.n	801847e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801846c:	f383 8811 	msr	BASEPRI, r3
 8018470:	f3bf 8f6f 	isb	sy
 8018474:	f3bf 8f4f 	dsb	sy
 8018478:	613b      	str	r3, [r7, #16]
}
 801847a:	bf00      	nop
 801847c:	e7fe      	b.n	801847c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801847e:	683b      	ldr	r3, [r7, #0]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d10a      	bne.n	801849a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018488:	f383 8811 	msr	BASEPRI, r3
 801848c:	f3bf 8f6f 	isb	sy
 8018490:	f3bf 8f4f 	dsb	sy
 8018494:	60fb      	str	r3, [r7, #12]
}
 8018496:	bf00      	nop
 8018498:	e7fe      	b.n	8018498 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801849a:	f7fe f8cb 	bl	8016634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801849e:	4b1d      	ldr	r3, [pc, #116]	; (8018514 <xTaskCheckForTimeOut+0xbc>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	685b      	ldr	r3, [r3, #4]
 80184a8:	69ba      	ldr	r2, [r7, #24]
 80184aa:	1ad3      	subs	r3, r2, r3
 80184ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184b6:	d102      	bne.n	80184be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80184b8:	2300      	movs	r3, #0
 80184ba:	61fb      	str	r3, [r7, #28]
 80184bc:	e023      	b.n	8018506 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681a      	ldr	r2, [r3, #0]
 80184c2:	4b15      	ldr	r3, [pc, #84]	; (8018518 <xTaskCheckForTimeOut+0xc0>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	429a      	cmp	r2, r3
 80184c8:	d007      	beq.n	80184da <xTaskCheckForTimeOut+0x82>
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	685b      	ldr	r3, [r3, #4]
 80184ce:	69ba      	ldr	r2, [r7, #24]
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d302      	bcc.n	80184da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80184d4:	2301      	movs	r3, #1
 80184d6:	61fb      	str	r3, [r7, #28]
 80184d8:	e015      	b.n	8018506 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	697a      	ldr	r2, [r7, #20]
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d20b      	bcs.n	80184fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80184e4:	683b      	ldr	r3, [r7, #0]
 80184e6:	681a      	ldr	r2, [r3, #0]
 80184e8:	697b      	ldr	r3, [r7, #20]
 80184ea:	1ad2      	subs	r2, r2, r3
 80184ec:	683b      	ldr	r3, [r7, #0]
 80184ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80184f0:	6878      	ldr	r0, [r7, #4]
 80184f2:	f7ff ff9b 	bl	801842c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80184f6:	2300      	movs	r3, #0
 80184f8:	61fb      	str	r3, [r7, #28]
 80184fa:	e004      	b.n	8018506 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80184fc:	683b      	ldr	r3, [r7, #0]
 80184fe:	2200      	movs	r2, #0
 8018500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018502:	2301      	movs	r3, #1
 8018504:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018506:	f7fe f8c5 	bl	8016694 <vPortExitCritical>

	return xReturn;
 801850a:	69fb      	ldr	r3, [r7, #28]
}
 801850c:	4618      	mov	r0, r3
 801850e:	3720      	adds	r7, #32
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}
 8018514:	24026dcc 	.word	0x24026dcc
 8018518:	24026de0 	.word	0x24026de0

0801851c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801851c:	b480      	push	{r7}
 801851e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018520:	4b03      	ldr	r3, [pc, #12]	; (8018530 <vTaskMissedYield+0x14>)
 8018522:	2201      	movs	r2, #1
 8018524:	601a      	str	r2, [r3, #0]
}
 8018526:	bf00      	nop
 8018528:	46bd      	mov	sp, r7
 801852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852e:	4770      	bx	lr
 8018530:	24026ddc 	.word	0x24026ddc

08018534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b082      	sub	sp, #8
 8018538:	af00      	add	r7, sp, #0
 801853a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801853c:	f000 f854 	bl	80185e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018540:	4b07      	ldr	r3, [pc, #28]	; (8018560 <prvIdleTask+0x2c>)
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	2b01      	cmp	r3, #1
 8018546:	d907      	bls.n	8018558 <prvIdleTask+0x24>
			{
				taskYIELD();
 8018548:	4b06      	ldr	r3, [pc, #24]	; (8018564 <prvIdleTask+0x30>)
 801854a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801854e:	601a      	str	r2, [r3, #0]
 8018550:	f3bf 8f4f 	dsb	sy
 8018554:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8018558:	f7ee f8be 	bl	80066d8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801855c:	e7ee      	b.n	801853c <prvIdleTask+0x8>
 801855e:	bf00      	nop
 8018560:	240268f8 	.word	0x240268f8
 8018564:	e000ed04 	.word	0xe000ed04

08018568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b082      	sub	sp, #8
 801856c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801856e:	2300      	movs	r3, #0
 8018570:	607b      	str	r3, [r7, #4]
 8018572:	e00c      	b.n	801858e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018574:	687a      	ldr	r2, [r7, #4]
 8018576:	4613      	mov	r3, r2
 8018578:	009b      	lsls	r3, r3, #2
 801857a:	4413      	add	r3, r2
 801857c:	009b      	lsls	r3, r3, #2
 801857e:	4a12      	ldr	r2, [pc, #72]	; (80185c8 <prvInitialiseTaskLists+0x60>)
 8018580:	4413      	add	r3, r2
 8018582:	4618      	mov	r0, r3
 8018584:	f7fd fe72 	bl	801626c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	3301      	adds	r3, #1
 801858c:	607b      	str	r3, [r7, #4]
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	2b37      	cmp	r3, #55	; 0x37
 8018592:	d9ef      	bls.n	8018574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018594:	480d      	ldr	r0, [pc, #52]	; (80185cc <prvInitialiseTaskLists+0x64>)
 8018596:	f7fd fe69 	bl	801626c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801859a:	480d      	ldr	r0, [pc, #52]	; (80185d0 <prvInitialiseTaskLists+0x68>)
 801859c:	f7fd fe66 	bl	801626c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80185a0:	480c      	ldr	r0, [pc, #48]	; (80185d4 <prvInitialiseTaskLists+0x6c>)
 80185a2:	f7fd fe63 	bl	801626c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80185a6:	480c      	ldr	r0, [pc, #48]	; (80185d8 <prvInitialiseTaskLists+0x70>)
 80185a8:	f7fd fe60 	bl	801626c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80185ac:	480b      	ldr	r0, [pc, #44]	; (80185dc <prvInitialiseTaskLists+0x74>)
 80185ae:	f7fd fe5d 	bl	801626c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80185b2:	4b0b      	ldr	r3, [pc, #44]	; (80185e0 <prvInitialiseTaskLists+0x78>)
 80185b4:	4a05      	ldr	r2, [pc, #20]	; (80185cc <prvInitialiseTaskLists+0x64>)
 80185b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80185b8:	4b0a      	ldr	r3, [pc, #40]	; (80185e4 <prvInitialiseTaskLists+0x7c>)
 80185ba:	4a05      	ldr	r2, [pc, #20]	; (80185d0 <prvInitialiseTaskLists+0x68>)
 80185bc:	601a      	str	r2, [r3, #0]
}
 80185be:	bf00      	nop
 80185c0:	3708      	adds	r7, #8
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	bf00      	nop
 80185c8:	240268f8 	.word	0x240268f8
 80185cc:	24026d58 	.word	0x24026d58
 80185d0:	24026d6c 	.word	0x24026d6c
 80185d4:	24026d88 	.word	0x24026d88
 80185d8:	24026d9c 	.word	0x24026d9c
 80185dc:	24026db4 	.word	0x24026db4
 80185e0:	24026d80 	.word	0x24026d80
 80185e4:	24026d84 	.word	0x24026d84

080185e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b082      	sub	sp, #8
 80185ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80185ee:	e019      	b.n	8018624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80185f0:	f7fe f820 	bl	8016634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185f4:	4b10      	ldr	r3, [pc, #64]	; (8018638 <prvCheckTasksWaitingTermination+0x50>)
 80185f6:	68db      	ldr	r3, [r3, #12]
 80185f8:	68db      	ldr	r3, [r3, #12]
 80185fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	3304      	adds	r3, #4
 8018600:	4618      	mov	r0, r3
 8018602:	f7fd febd 	bl	8016380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018606:	4b0d      	ldr	r3, [pc, #52]	; (801863c <prvCheckTasksWaitingTermination+0x54>)
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	3b01      	subs	r3, #1
 801860c:	4a0b      	ldr	r2, [pc, #44]	; (801863c <prvCheckTasksWaitingTermination+0x54>)
 801860e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018610:	4b0b      	ldr	r3, [pc, #44]	; (8018640 <prvCheckTasksWaitingTermination+0x58>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	3b01      	subs	r3, #1
 8018616:	4a0a      	ldr	r2, [pc, #40]	; (8018640 <prvCheckTasksWaitingTermination+0x58>)
 8018618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801861a:	f7fe f83b 	bl	8016694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801861e:	6878      	ldr	r0, [r7, #4]
 8018620:	f000 f810 	bl	8018644 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018624:	4b06      	ldr	r3, [pc, #24]	; (8018640 <prvCheckTasksWaitingTermination+0x58>)
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d1e1      	bne.n	80185f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801862c:	bf00      	nop
 801862e:	bf00      	nop
 8018630:	3708      	adds	r7, #8
 8018632:	46bd      	mov	sp, r7
 8018634:	bd80      	pop	{r7, pc}
 8018636:	bf00      	nop
 8018638:	24026d9c 	.word	0x24026d9c
 801863c:	24026dc8 	.word	0x24026dc8
 8018640:	24026db0 	.word	0x24026db0

08018644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018644:	b580      	push	{r7, lr}
 8018646:	b084      	sub	sp, #16
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018652:	2b00      	cmp	r3, #0
 8018654:	d108      	bne.n	8018668 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801865a:	4618      	mov	r0, r3
 801865c:	f7fd fce6 	bl	801602c <vPortFree>
				vPortFree( pxTCB );
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f7fd fce3 	bl	801602c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018666:	e018      	b.n	801869a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801866e:	2b01      	cmp	r3, #1
 8018670:	d103      	bne.n	801867a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018672:	6878      	ldr	r0, [r7, #4]
 8018674:	f7fd fcda 	bl	801602c <vPortFree>
	}
 8018678:	e00f      	b.n	801869a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018680:	2b02      	cmp	r3, #2
 8018682:	d00a      	beq.n	801869a <prvDeleteTCB+0x56>
	__asm volatile
 8018684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018688:	f383 8811 	msr	BASEPRI, r3
 801868c:	f3bf 8f6f 	isb	sy
 8018690:	f3bf 8f4f 	dsb	sy
 8018694:	60fb      	str	r3, [r7, #12]
}
 8018696:	bf00      	nop
 8018698:	e7fe      	b.n	8018698 <prvDeleteTCB+0x54>
	}
 801869a:	bf00      	nop
 801869c:	3710      	adds	r7, #16
 801869e:	46bd      	mov	sp, r7
 80186a0:	bd80      	pop	{r7, pc}
	...

080186a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80186a4:	b480      	push	{r7}
 80186a6:	b083      	sub	sp, #12
 80186a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80186aa:	4b0c      	ldr	r3, [pc, #48]	; (80186dc <prvResetNextTaskUnblockTime+0x38>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d104      	bne.n	80186be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80186b4:	4b0a      	ldr	r3, [pc, #40]	; (80186e0 <prvResetNextTaskUnblockTime+0x3c>)
 80186b6:	f04f 32ff 	mov.w	r2, #4294967295
 80186ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80186bc:	e008      	b.n	80186d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80186be:	4b07      	ldr	r3, [pc, #28]	; (80186dc <prvResetNextTaskUnblockTime+0x38>)
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	68db      	ldr	r3, [r3, #12]
 80186c4:	68db      	ldr	r3, [r3, #12]
 80186c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	685b      	ldr	r3, [r3, #4]
 80186cc:	4a04      	ldr	r2, [pc, #16]	; (80186e0 <prvResetNextTaskUnblockTime+0x3c>)
 80186ce:	6013      	str	r3, [r2, #0]
}
 80186d0:	bf00      	nop
 80186d2:	370c      	adds	r7, #12
 80186d4:	46bd      	mov	sp, r7
 80186d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186da:	4770      	bx	lr
 80186dc:	24026d80 	.word	0x24026d80
 80186e0:	24026de8 	.word	0x24026de8

080186e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80186e4:	b480      	push	{r7}
 80186e6:	b083      	sub	sp, #12
 80186e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80186ea:	4b05      	ldr	r3, [pc, #20]	; (8018700 <xTaskGetCurrentTaskHandle+0x1c>)
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 80186f0:	687b      	ldr	r3, [r7, #4]
	}
 80186f2:	4618      	mov	r0, r3
 80186f4:	370c      	adds	r7, #12
 80186f6:	46bd      	mov	sp, r7
 80186f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fc:	4770      	bx	lr
 80186fe:	bf00      	nop
 8018700:	240268f4 	.word	0x240268f4

08018704 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018704:	b480      	push	{r7}
 8018706:	b083      	sub	sp, #12
 8018708:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801870a:	4b0b      	ldr	r3, [pc, #44]	; (8018738 <xTaskGetSchedulerState+0x34>)
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d102      	bne.n	8018718 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018712:	2301      	movs	r3, #1
 8018714:	607b      	str	r3, [r7, #4]
 8018716:	e008      	b.n	801872a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018718:	4b08      	ldr	r3, [pc, #32]	; (801873c <xTaskGetSchedulerState+0x38>)
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d102      	bne.n	8018726 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018720:	2302      	movs	r3, #2
 8018722:	607b      	str	r3, [r7, #4]
 8018724:	e001      	b.n	801872a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018726:	2300      	movs	r3, #0
 8018728:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801872a:	687b      	ldr	r3, [r7, #4]
	}
 801872c:	4618      	mov	r0, r3
 801872e:	370c      	adds	r7, #12
 8018730:	46bd      	mov	sp, r7
 8018732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018736:	4770      	bx	lr
 8018738:	24026dd4 	.word	0x24026dd4
 801873c:	24026df0 	.word	0x24026df0

08018740 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018740:	b580      	push	{r7, lr}
 8018742:	b084      	sub	sp, #16
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801874c:	2300      	movs	r3, #0
 801874e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d051      	beq.n	80187fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018756:	68bb      	ldr	r3, [r7, #8]
 8018758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801875a:	4b2a      	ldr	r3, [pc, #168]	; (8018804 <xTaskPriorityInherit+0xc4>)
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018760:	429a      	cmp	r2, r3
 8018762:	d241      	bcs.n	80187e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018764:	68bb      	ldr	r3, [r7, #8]
 8018766:	699b      	ldr	r3, [r3, #24]
 8018768:	2b00      	cmp	r3, #0
 801876a:	db06      	blt.n	801877a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801876c:	4b25      	ldr	r3, [pc, #148]	; (8018804 <xTaskPriorityInherit+0xc4>)
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018772:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018776:	68bb      	ldr	r3, [r7, #8]
 8018778:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801877a:	68bb      	ldr	r3, [r7, #8]
 801877c:	6959      	ldr	r1, [r3, #20]
 801877e:	68bb      	ldr	r3, [r7, #8]
 8018780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018782:	4613      	mov	r3, r2
 8018784:	009b      	lsls	r3, r3, #2
 8018786:	4413      	add	r3, r2
 8018788:	009b      	lsls	r3, r3, #2
 801878a:	4a1f      	ldr	r2, [pc, #124]	; (8018808 <xTaskPriorityInherit+0xc8>)
 801878c:	4413      	add	r3, r2
 801878e:	4299      	cmp	r1, r3
 8018790:	d122      	bne.n	80187d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018792:	68bb      	ldr	r3, [r7, #8]
 8018794:	3304      	adds	r3, #4
 8018796:	4618      	mov	r0, r3
 8018798:	f7fd fdf2 	bl	8016380 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801879c:	4b19      	ldr	r3, [pc, #100]	; (8018804 <xTaskPriorityInherit+0xc4>)
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187a2:	68bb      	ldr	r3, [r7, #8]
 80187a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80187a6:	68bb      	ldr	r3, [r7, #8]
 80187a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187aa:	4b18      	ldr	r3, [pc, #96]	; (801880c <xTaskPriorityInherit+0xcc>)
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	429a      	cmp	r2, r3
 80187b0:	d903      	bls.n	80187ba <xTaskPriorityInherit+0x7a>
 80187b2:	68bb      	ldr	r3, [r7, #8]
 80187b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187b6:	4a15      	ldr	r2, [pc, #84]	; (801880c <xTaskPriorityInherit+0xcc>)
 80187b8:	6013      	str	r3, [r2, #0]
 80187ba:	68bb      	ldr	r3, [r7, #8]
 80187bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187be:	4613      	mov	r3, r2
 80187c0:	009b      	lsls	r3, r3, #2
 80187c2:	4413      	add	r3, r2
 80187c4:	009b      	lsls	r3, r3, #2
 80187c6:	4a10      	ldr	r2, [pc, #64]	; (8018808 <xTaskPriorityInherit+0xc8>)
 80187c8:	441a      	add	r2, r3
 80187ca:	68bb      	ldr	r3, [r7, #8]
 80187cc:	3304      	adds	r3, #4
 80187ce:	4619      	mov	r1, r3
 80187d0:	4610      	mov	r0, r2
 80187d2:	f7fd fd78 	bl	80162c6 <vListInsertEnd>
 80187d6:	e004      	b.n	80187e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80187d8:	4b0a      	ldr	r3, [pc, #40]	; (8018804 <xTaskPriorityInherit+0xc4>)
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187de:	68bb      	ldr	r3, [r7, #8]
 80187e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80187e2:	2301      	movs	r3, #1
 80187e4:	60fb      	str	r3, [r7, #12]
 80187e6:	e008      	b.n	80187fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80187e8:	68bb      	ldr	r3, [r7, #8]
 80187ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80187ec:	4b05      	ldr	r3, [pc, #20]	; (8018804 <xTaskPriorityInherit+0xc4>)
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187f2:	429a      	cmp	r2, r3
 80187f4:	d201      	bcs.n	80187fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80187f6:	2301      	movs	r3, #1
 80187f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80187fa:	68fb      	ldr	r3, [r7, #12]
	}
 80187fc:	4618      	mov	r0, r3
 80187fe:	3710      	adds	r7, #16
 8018800:	46bd      	mov	sp, r7
 8018802:	bd80      	pop	{r7, pc}
 8018804:	240268f4 	.word	0x240268f4
 8018808:	240268f8 	.word	0x240268f8
 801880c:	24026dd0 	.word	0x24026dd0

08018810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018810:	b580      	push	{r7, lr}
 8018812:	b086      	sub	sp, #24
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801881c:	2300      	movs	r3, #0
 801881e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d056      	beq.n	80188d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018826:	4b2e      	ldr	r3, [pc, #184]	; (80188e0 <xTaskPriorityDisinherit+0xd0>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	693a      	ldr	r2, [r7, #16]
 801882c:	429a      	cmp	r2, r3
 801882e:	d00a      	beq.n	8018846 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018834:	f383 8811 	msr	BASEPRI, r3
 8018838:	f3bf 8f6f 	isb	sy
 801883c:	f3bf 8f4f 	dsb	sy
 8018840:	60fb      	str	r3, [r7, #12]
}
 8018842:	bf00      	nop
 8018844:	e7fe      	b.n	8018844 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018846:	693b      	ldr	r3, [r7, #16]
 8018848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801884a:	2b00      	cmp	r3, #0
 801884c:	d10a      	bne.n	8018864 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018852:	f383 8811 	msr	BASEPRI, r3
 8018856:	f3bf 8f6f 	isb	sy
 801885a:	f3bf 8f4f 	dsb	sy
 801885e:	60bb      	str	r3, [r7, #8]
}
 8018860:	bf00      	nop
 8018862:	e7fe      	b.n	8018862 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018864:	693b      	ldr	r3, [r7, #16]
 8018866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018868:	1e5a      	subs	r2, r3, #1
 801886a:	693b      	ldr	r3, [r7, #16]
 801886c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801886e:	693b      	ldr	r3, [r7, #16]
 8018870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018872:	693b      	ldr	r3, [r7, #16]
 8018874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018876:	429a      	cmp	r2, r3
 8018878:	d02c      	beq.n	80188d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801887a:	693b      	ldr	r3, [r7, #16]
 801887c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801887e:	2b00      	cmp	r3, #0
 8018880:	d128      	bne.n	80188d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018882:	693b      	ldr	r3, [r7, #16]
 8018884:	3304      	adds	r3, #4
 8018886:	4618      	mov	r0, r3
 8018888:	f7fd fd7a 	bl	8016380 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801888c:	693b      	ldr	r3, [r7, #16]
 801888e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018890:	693b      	ldr	r3, [r7, #16]
 8018892:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018894:	693b      	ldr	r3, [r7, #16]
 8018896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018898:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801889c:	693b      	ldr	r3, [r7, #16]
 801889e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80188a0:	693b      	ldr	r3, [r7, #16]
 80188a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188a4:	4b0f      	ldr	r3, [pc, #60]	; (80188e4 <xTaskPriorityDisinherit+0xd4>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d903      	bls.n	80188b4 <xTaskPriorityDisinherit+0xa4>
 80188ac:	693b      	ldr	r3, [r7, #16]
 80188ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188b0:	4a0c      	ldr	r2, [pc, #48]	; (80188e4 <xTaskPriorityDisinherit+0xd4>)
 80188b2:	6013      	str	r3, [r2, #0]
 80188b4:	693b      	ldr	r3, [r7, #16]
 80188b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188b8:	4613      	mov	r3, r2
 80188ba:	009b      	lsls	r3, r3, #2
 80188bc:	4413      	add	r3, r2
 80188be:	009b      	lsls	r3, r3, #2
 80188c0:	4a09      	ldr	r2, [pc, #36]	; (80188e8 <xTaskPriorityDisinherit+0xd8>)
 80188c2:	441a      	add	r2, r3
 80188c4:	693b      	ldr	r3, [r7, #16]
 80188c6:	3304      	adds	r3, #4
 80188c8:	4619      	mov	r1, r3
 80188ca:	4610      	mov	r0, r2
 80188cc:	f7fd fcfb 	bl	80162c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80188d0:	2301      	movs	r3, #1
 80188d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80188d4:	697b      	ldr	r3, [r7, #20]
	}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3718      	adds	r7, #24
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}
 80188de:	bf00      	nop
 80188e0:	240268f4 	.word	0x240268f4
 80188e4:	24026dd0 	.word	0x24026dd0
 80188e8:	240268f8 	.word	0x240268f8

080188ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b088      	sub	sp, #32
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80188fa:	2301      	movs	r3, #1
 80188fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d06a      	beq.n	80189da <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018904:	69bb      	ldr	r3, [r7, #24]
 8018906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018908:	2b00      	cmp	r3, #0
 801890a:	d10a      	bne.n	8018922 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018910:	f383 8811 	msr	BASEPRI, r3
 8018914:	f3bf 8f6f 	isb	sy
 8018918:	f3bf 8f4f 	dsb	sy
 801891c:	60fb      	str	r3, [r7, #12]
}
 801891e:	bf00      	nop
 8018920:	e7fe      	b.n	8018920 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018922:	69bb      	ldr	r3, [r7, #24]
 8018924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018926:	683a      	ldr	r2, [r7, #0]
 8018928:	429a      	cmp	r2, r3
 801892a:	d902      	bls.n	8018932 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	61fb      	str	r3, [r7, #28]
 8018930:	e002      	b.n	8018938 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018932:	69bb      	ldr	r3, [r7, #24]
 8018934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018936:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018938:	69bb      	ldr	r3, [r7, #24]
 801893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801893c:	69fa      	ldr	r2, [r7, #28]
 801893e:	429a      	cmp	r2, r3
 8018940:	d04b      	beq.n	80189da <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018942:	69bb      	ldr	r3, [r7, #24]
 8018944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018946:	697a      	ldr	r2, [r7, #20]
 8018948:	429a      	cmp	r2, r3
 801894a:	d146      	bne.n	80189da <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801894c:	4b25      	ldr	r3, [pc, #148]	; (80189e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	69ba      	ldr	r2, [r7, #24]
 8018952:	429a      	cmp	r2, r3
 8018954:	d10a      	bne.n	801896c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8018956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801895a:	f383 8811 	msr	BASEPRI, r3
 801895e:	f3bf 8f6f 	isb	sy
 8018962:	f3bf 8f4f 	dsb	sy
 8018966:	60bb      	str	r3, [r7, #8]
}
 8018968:	bf00      	nop
 801896a:	e7fe      	b.n	801896a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801896c:	69bb      	ldr	r3, [r7, #24]
 801896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018970:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018972:	69bb      	ldr	r3, [r7, #24]
 8018974:	69fa      	ldr	r2, [r7, #28]
 8018976:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018978:	69bb      	ldr	r3, [r7, #24]
 801897a:	699b      	ldr	r3, [r3, #24]
 801897c:	2b00      	cmp	r3, #0
 801897e:	db04      	blt.n	801898a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018980:	69fb      	ldr	r3, [r7, #28]
 8018982:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018986:	69bb      	ldr	r3, [r7, #24]
 8018988:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801898a:	69bb      	ldr	r3, [r7, #24]
 801898c:	6959      	ldr	r1, [r3, #20]
 801898e:	693a      	ldr	r2, [r7, #16]
 8018990:	4613      	mov	r3, r2
 8018992:	009b      	lsls	r3, r3, #2
 8018994:	4413      	add	r3, r2
 8018996:	009b      	lsls	r3, r3, #2
 8018998:	4a13      	ldr	r2, [pc, #76]	; (80189e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801899a:	4413      	add	r3, r2
 801899c:	4299      	cmp	r1, r3
 801899e:	d11c      	bne.n	80189da <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80189a0:	69bb      	ldr	r3, [r7, #24]
 80189a2:	3304      	adds	r3, #4
 80189a4:	4618      	mov	r0, r3
 80189a6:	f7fd fceb 	bl	8016380 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80189aa:	69bb      	ldr	r3, [r7, #24]
 80189ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189ae:	4b0f      	ldr	r3, [pc, #60]	; (80189ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	429a      	cmp	r2, r3
 80189b4:	d903      	bls.n	80189be <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80189b6:	69bb      	ldr	r3, [r7, #24]
 80189b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189ba:	4a0c      	ldr	r2, [pc, #48]	; (80189ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80189bc:	6013      	str	r3, [r2, #0]
 80189be:	69bb      	ldr	r3, [r7, #24]
 80189c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189c2:	4613      	mov	r3, r2
 80189c4:	009b      	lsls	r3, r3, #2
 80189c6:	4413      	add	r3, r2
 80189c8:	009b      	lsls	r3, r3, #2
 80189ca:	4a07      	ldr	r2, [pc, #28]	; (80189e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80189cc:	441a      	add	r2, r3
 80189ce:	69bb      	ldr	r3, [r7, #24]
 80189d0:	3304      	adds	r3, #4
 80189d2:	4619      	mov	r1, r3
 80189d4:	4610      	mov	r0, r2
 80189d6:	f7fd fc76 	bl	80162c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80189da:	bf00      	nop
 80189dc:	3720      	adds	r7, #32
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}
 80189e2:	bf00      	nop
 80189e4:	240268f4 	.word	0x240268f4
 80189e8:	240268f8 	.word	0x240268f8
 80189ec:	24026dd0 	.word	0x24026dd0

080189f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80189f0:	b480      	push	{r7}
 80189f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80189f4:	4b07      	ldr	r3, [pc, #28]	; (8018a14 <pvTaskIncrementMutexHeldCount+0x24>)
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d004      	beq.n	8018a06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80189fc:	4b05      	ldr	r3, [pc, #20]	; (8018a14 <pvTaskIncrementMutexHeldCount+0x24>)
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018a02:	3201      	adds	r2, #1
 8018a04:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018a06:	4b03      	ldr	r3, [pc, #12]	; (8018a14 <pvTaskIncrementMutexHeldCount+0x24>)
 8018a08:	681b      	ldr	r3, [r3, #0]
	}
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a12:	4770      	bx	lr
 8018a14:	240268f4 	.word	0x240268f4

08018a18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	b084      	sub	sp, #16
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	6078      	str	r0, [r7, #4]
 8018a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018a22:	4b21      	ldr	r3, [pc, #132]	; (8018aa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a28:	4b20      	ldr	r3, [pc, #128]	; (8018aac <prvAddCurrentTaskToDelayedList+0x94>)
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	3304      	adds	r3, #4
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f7fd fca6 	bl	8016380 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a3a:	d10a      	bne.n	8018a52 <prvAddCurrentTaskToDelayedList+0x3a>
 8018a3c:	683b      	ldr	r3, [r7, #0]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d007      	beq.n	8018a52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018a42:	4b1a      	ldr	r3, [pc, #104]	; (8018aac <prvAddCurrentTaskToDelayedList+0x94>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	3304      	adds	r3, #4
 8018a48:	4619      	mov	r1, r3
 8018a4a:	4819      	ldr	r0, [pc, #100]	; (8018ab0 <prvAddCurrentTaskToDelayedList+0x98>)
 8018a4c:	f7fd fc3b 	bl	80162c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018a50:	e026      	b.n	8018aa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018a52:	68fa      	ldr	r2, [r7, #12]
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	4413      	add	r3, r2
 8018a58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018a5a:	4b14      	ldr	r3, [pc, #80]	; (8018aac <prvAddCurrentTaskToDelayedList+0x94>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	68ba      	ldr	r2, [r7, #8]
 8018a60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018a62:	68ba      	ldr	r2, [r7, #8]
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	429a      	cmp	r2, r3
 8018a68:	d209      	bcs.n	8018a7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018a6a:	4b12      	ldr	r3, [pc, #72]	; (8018ab4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018a6c:	681a      	ldr	r2, [r3, #0]
 8018a6e:	4b0f      	ldr	r3, [pc, #60]	; (8018aac <prvAddCurrentTaskToDelayedList+0x94>)
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	3304      	adds	r3, #4
 8018a74:	4619      	mov	r1, r3
 8018a76:	4610      	mov	r0, r2
 8018a78:	f7fd fc49 	bl	801630e <vListInsert>
}
 8018a7c:	e010      	b.n	8018aa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018a7e:	4b0e      	ldr	r3, [pc, #56]	; (8018ab8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018a80:	681a      	ldr	r2, [r3, #0]
 8018a82:	4b0a      	ldr	r3, [pc, #40]	; (8018aac <prvAddCurrentTaskToDelayedList+0x94>)
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	3304      	adds	r3, #4
 8018a88:	4619      	mov	r1, r3
 8018a8a:	4610      	mov	r0, r2
 8018a8c:	f7fd fc3f 	bl	801630e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018a90:	4b0a      	ldr	r3, [pc, #40]	; (8018abc <prvAddCurrentTaskToDelayedList+0xa4>)
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	68ba      	ldr	r2, [r7, #8]
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d202      	bcs.n	8018aa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018a9a:	4a08      	ldr	r2, [pc, #32]	; (8018abc <prvAddCurrentTaskToDelayedList+0xa4>)
 8018a9c:	68bb      	ldr	r3, [r7, #8]
 8018a9e:	6013      	str	r3, [r2, #0]
}
 8018aa0:	bf00      	nop
 8018aa2:	3710      	adds	r7, #16
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}
 8018aa8:	24026dcc 	.word	0x24026dcc
 8018aac:	240268f4 	.word	0x240268f4
 8018ab0:	24026db4 	.word	0x24026db4
 8018ab4:	24026d84 	.word	0x24026d84
 8018ab8:	24026d80 	.word	0x24026d80
 8018abc:	24026de8 	.word	0x24026de8

08018ac0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b08a      	sub	sp, #40	; 0x28
 8018ac4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018aca:	f000 fb07 	bl	80190dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018ace:	4b1c      	ldr	r3, [pc, #112]	; (8018b40 <xTimerCreateTimerTask+0x80>)
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d021      	beq.n	8018b1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018ada:	2300      	movs	r3, #0
 8018adc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018ade:	1d3a      	adds	r2, r7, #4
 8018ae0:	f107 0108 	add.w	r1, r7, #8
 8018ae4:	f107 030c 	add.w	r3, r7, #12
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f7fd f9b9 	bl	8015e60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018aee:	6879      	ldr	r1, [r7, #4]
 8018af0:	68bb      	ldr	r3, [r7, #8]
 8018af2:	68fa      	ldr	r2, [r7, #12]
 8018af4:	9202      	str	r2, [sp, #8]
 8018af6:	9301      	str	r3, [sp, #4]
 8018af8:	2302      	movs	r3, #2
 8018afa:	9300      	str	r3, [sp, #0]
 8018afc:	2300      	movs	r3, #0
 8018afe:	460a      	mov	r2, r1
 8018b00:	4910      	ldr	r1, [pc, #64]	; (8018b44 <xTimerCreateTimerTask+0x84>)
 8018b02:	4811      	ldr	r0, [pc, #68]	; (8018b48 <xTimerCreateTimerTask+0x88>)
 8018b04:	f7fe ff7c 	bl	8017a00 <xTaskCreateStatic>
 8018b08:	4603      	mov	r3, r0
 8018b0a:	4a10      	ldr	r2, [pc, #64]	; (8018b4c <xTimerCreateTimerTask+0x8c>)
 8018b0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018b0e:	4b0f      	ldr	r3, [pc, #60]	; (8018b4c <xTimerCreateTimerTask+0x8c>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d001      	beq.n	8018b1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018b16:	2301      	movs	r3, #1
 8018b18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d10a      	bne.n	8018b36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b24:	f383 8811 	msr	BASEPRI, r3
 8018b28:	f3bf 8f6f 	isb	sy
 8018b2c:	f3bf 8f4f 	dsb	sy
 8018b30:	613b      	str	r3, [r7, #16]
}
 8018b32:	bf00      	nop
 8018b34:	e7fe      	b.n	8018b34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018b36:	697b      	ldr	r3, [r7, #20]
}
 8018b38:	4618      	mov	r0, r3
 8018b3a:	3718      	adds	r7, #24
 8018b3c:	46bd      	mov	sp, r7
 8018b3e:	bd80      	pop	{r7, pc}
 8018b40:	24026e24 	.word	0x24026e24
 8018b44:	0802dfc0 	.word	0x0802dfc0
 8018b48:	08018c85 	.word	0x08018c85
 8018b4c:	24026e28 	.word	0x24026e28

08018b50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b08a      	sub	sp, #40	; 0x28
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	60f8      	str	r0, [r7, #12]
 8018b58:	60b9      	str	r1, [r7, #8]
 8018b5a:	607a      	str	r2, [r7, #4]
 8018b5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018b5e:	2300      	movs	r3, #0
 8018b60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d10a      	bne.n	8018b7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8018b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b6c:	f383 8811 	msr	BASEPRI, r3
 8018b70:	f3bf 8f6f 	isb	sy
 8018b74:	f3bf 8f4f 	dsb	sy
 8018b78:	623b      	str	r3, [r7, #32]
}
 8018b7a:	bf00      	nop
 8018b7c:	e7fe      	b.n	8018b7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018b7e:	4b1a      	ldr	r3, [pc, #104]	; (8018be8 <xTimerGenericCommand+0x98>)
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d02a      	beq.n	8018bdc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	2b05      	cmp	r3, #5
 8018b96:	dc18      	bgt.n	8018bca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018b98:	f7ff fdb4 	bl	8018704 <xTaskGetSchedulerState>
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	2b02      	cmp	r3, #2
 8018ba0:	d109      	bne.n	8018bb6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018ba2:	4b11      	ldr	r3, [pc, #68]	; (8018be8 <xTimerGenericCommand+0x98>)
 8018ba4:	6818      	ldr	r0, [r3, #0]
 8018ba6:	f107 0110 	add.w	r1, r7, #16
 8018baa:	2300      	movs	r3, #0
 8018bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bae:	f7fe f8c1 	bl	8016d34 <xQueueGenericSend>
 8018bb2:	6278      	str	r0, [r7, #36]	; 0x24
 8018bb4:	e012      	b.n	8018bdc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018bb6:	4b0c      	ldr	r3, [pc, #48]	; (8018be8 <xTimerGenericCommand+0x98>)
 8018bb8:	6818      	ldr	r0, [r3, #0]
 8018bba:	f107 0110 	add.w	r1, r7, #16
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	2200      	movs	r2, #0
 8018bc2:	f7fe f8b7 	bl	8016d34 <xQueueGenericSend>
 8018bc6:	6278      	str	r0, [r7, #36]	; 0x24
 8018bc8:	e008      	b.n	8018bdc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018bca:	4b07      	ldr	r3, [pc, #28]	; (8018be8 <xTimerGenericCommand+0x98>)
 8018bcc:	6818      	ldr	r0, [r3, #0]
 8018bce:	f107 0110 	add.w	r1, r7, #16
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	683a      	ldr	r2, [r7, #0]
 8018bd6:	f7fe f9ab 	bl	8016f30 <xQueueGenericSendFromISR>
 8018bda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018bde:	4618      	mov	r0, r3
 8018be0:	3728      	adds	r7, #40	; 0x28
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bd80      	pop	{r7, pc}
 8018be6:	bf00      	nop
 8018be8:	24026e24 	.word	0x24026e24

08018bec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b088      	sub	sp, #32
 8018bf0:	af02      	add	r7, sp, #8
 8018bf2:	6078      	str	r0, [r7, #4]
 8018bf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018bf6:	4b22      	ldr	r3, [pc, #136]	; (8018c80 <prvProcessExpiredTimer+0x94>)
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	68db      	ldr	r3, [r3, #12]
 8018bfc:	68db      	ldr	r3, [r3, #12]
 8018bfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018c00:	697b      	ldr	r3, [r7, #20]
 8018c02:	3304      	adds	r3, #4
 8018c04:	4618      	mov	r0, r3
 8018c06:	f7fd fbbb 	bl	8016380 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018c0a:	697b      	ldr	r3, [r7, #20]
 8018c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018c10:	f003 0304 	and.w	r3, r3, #4
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d022      	beq.n	8018c5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018c18:	697b      	ldr	r3, [r7, #20]
 8018c1a:	699a      	ldr	r2, [r3, #24]
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	18d1      	adds	r1, r2, r3
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	683a      	ldr	r2, [r7, #0]
 8018c24:	6978      	ldr	r0, [r7, #20]
 8018c26:	f000 f8d1 	bl	8018dcc <prvInsertTimerInActiveList>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d01f      	beq.n	8018c70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018c30:	2300      	movs	r3, #0
 8018c32:	9300      	str	r3, [sp, #0]
 8018c34:	2300      	movs	r3, #0
 8018c36:	687a      	ldr	r2, [r7, #4]
 8018c38:	2100      	movs	r1, #0
 8018c3a:	6978      	ldr	r0, [r7, #20]
 8018c3c:	f7ff ff88 	bl	8018b50 <xTimerGenericCommand>
 8018c40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018c42:	693b      	ldr	r3, [r7, #16]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d113      	bne.n	8018c70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c4c:	f383 8811 	msr	BASEPRI, r3
 8018c50:	f3bf 8f6f 	isb	sy
 8018c54:	f3bf 8f4f 	dsb	sy
 8018c58:	60fb      	str	r3, [r7, #12]
}
 8018c5a:	bf00      	nop
 8018c5c:	e7fe      	b.n	8018c5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018c5e:	697b      	ldr	r3, [r7, #20]
 8018c60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018c64:	f023 0301 	bic.w	r3, r3, #1
 8018c68:	b2da      	uxtb	r2, r3
 8018c6a:	697b      	ldr	r3, [r7, #20]
 8018c6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018c70:	697b      	ldr	r3, [r7, #20]
 8018c72:	6a1b      	ldr	r3, [r3, #32]
 8018c74:	6978      	ldr	r0, [r7, #20]
 8018c76:	4798      	blx	r3
}
 8018c78:	bf00      	nop
 8018c7a:	3718      	adds	r7, #24
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}
 8018c80:	24026e1c 	.word	0x24026e1c

08018c84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b084      	sub	sp, #16
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018c8c:	f107 0308 	add.w	r3, r7, #8
 8018c90:	4618      	mov	r0, r3
 8018c92:	f000 f857 	bl	8018d44 <prvGetNextExpireTime>
 8018c96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018c98:	68bb      	ldr	r3, [r7, #8]
 8018c9a:	4619      	mov	r1, r3
 8018c9c:	68f8      	ldr	r0, [r7, #12]
 8018c9e:	f000 f803 	bl	8018ca8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018ca2:	f000 f8d5 	bl	8018e50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018ca6:	e7f1      	b.n	8018c8c <prvTimerTask+0x8>

08018ca8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b084      	sub	sp, #16
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
 8018cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018cb2:	f7ff f8eb 	bl	8017e8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018cb6:	f107 0308 	add.w	r3, r7, #8
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f000 f866 	bl	8018d8c <prvSampleTimeNow>
 8018cc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018cc2:	68bb      	ldr	r3, [r7, #8]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d130      	bne.n	8018d2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d10a      	bne.n	8018ce4 <prvProcessTimerOrBlockTask+0x3c>
 8018cce:	687a      	ldr	r2, [r7, #4]
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	429a      	cmp	r2, r3
 8018cd4:	d806      	bhi.n	8018ce4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018cd6:	f7ff f8e7 	bl	8017ea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018cda:	68f9      	ldr	r1, [r7, #12]
 8018cdc:	6878      	ldr	r0, [r7, #4]
 8018cde:	f7ff ff85 	bl	8018bec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018ce2:	e024      	b.n	8018d2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018ce4:	683b      	ldr	r3, [r7, #0]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d008      	beq.n	8018cfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018cea:	4b13      	ldr	r3, [pc, #76]	; (8018d38 <prvProcessTimerOrBlockTask+0x90>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d101      	bne.n	8018cf8 <prvProcessTimerOrBlockTask+0x50>
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	e000      	b.n	8018cfa <prvProcessTimerOrBlockTask+0x52>
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018cfc:	4b0f      	ldr	r3, [pc, #60]	; (8018d3c <prvProcessTimerOrBlockTask+0x94>)
 8018cfe:	6818      	ldr	r0, [r3, #0]
 8018d00:	687a      	ldr	r2, [r7, #4]
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	1ad3      	subs	r3, r2, r3
 8018d06:	683a      	ldr	r2, [r7, #0]
 8018d08:	4619      	mov	r1, r3
 8018d0a:	f7fe fe45 	bl	8017998 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018d0e:	f7ff f8cb 	bl	8017ea8 <xTaskResumeAll>
 8018d12:	4603      	mov	r3, r0
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d10a      	bne.n	8018d2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018d18:	4b09      	ldr	r3, [pc, #36]	; (8018d40 <prvProcessTimerOrBlockTask+0x98>)
 8018d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d1e:	601a      	str	r2, [r3, #0]
 8018d20:	f3bf 8f4f 	dsb	sy
 8018d24:	f3bf 8f6f 	isb	sy
}
 8018d28:	e001      	b.n	8018d2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018d2a:	f7ff f8bd 	bl	8017ea8 <xTaskResumeAll>
}
 8018d2e:	bf00      	nop
 8018d30:	3710      	adds	r7, #16
 8018d32:	46bd      	mov	sp, r7
 8018d34:	bd80      	pop	{r7, pc}
 8018d36:	bf00      	nop
 8018d38:	24026e20 	.word	0x24026e20
 8018d3c:	24026e24 	.word	0x24026e24
 8018d40:	e000ed04 	.word	0xe000ed04

08018d44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018d44:	b480      	push	{r7}
 8018d46:	b085      	sub	sp, #20
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018d4c:	4b0e      	ldr	r3, [pc, #56]	; (8018d88 <prvGetNextExpireTime+0x44>)
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d101      	bne.n	8018d5a <prvGetNextExpireTime+0x16>
 8018d56:	2201      	movs	r2, #1
 8018d58:	e000      	b.n	8018d5c <prvGetNextExpireTime+0x18>
 8018d5a:	2200      	movs	r2, #0
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d105      	bne.n	8018d74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018d68:	4b07      	ldr	r3, [pc, #28]	; (8018d88 <prvGetNextExpireTime+0x44>)
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	68db      	ldr	r3, [r3, #12]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	60fb      	str	r3, [r7, #12]
 8018d72:	e001      	b.n	8018d78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018d74:	2300      	movs	r3, #0
 8018d76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018d78:	68fb      	ldr	r3, [r7, #12]
}
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	3714      	adds	r7, #20
 8018d7e:	46bd      	mov	sp, r7
 8018d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d84:	4770      	bx	lr
 8018d86:	bf00      	nop
 8018d88:	24026e1c 	.word	0x24026e1c

08018d8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b084      	sub	sp, #16
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018d94:	f7ff f926 	bl	8017fe4 <xTaskGetTickCount>
 8018d98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018d9a:	4b0b      	ldr	r3, [pc, #44]	; (8018dc8 <prvSampleTimeNow+0x3c>)
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	68fa      	ldr	r2, [r7, #12]
 8018da0:	429a      	cmp	r2, r3
 8018da2:	d205      	bcs.n	8018db0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018da4:	f000 f936 	bl	8019014 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	2201      	movs	r2, #1
 8018dac:	601a      	str	r2, [r3, #0]
 8018dae:	e002      	b.n	8018db6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	2200      	movs	r2, #0
 8018db4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018db6:	4a04      	ldr	r2, [pc, #16]	; (8018dc8 <prvSampleTimeNow+0x3c>)
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018dbc:	68fb      	ldr	r3, [r7, #12]
}
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	3710      	adds	r7, #16
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	bd80      	pop	{r7, pc}
 8018dc6:	bf00      	nop
 8018dc8:	24026e2c 	.word	0x24026e2c

08018dcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b086      	sub	sp, #24
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	60f8      	str	r0, [r7, #12]
 8018dd4:	60b9      	str	r1, [r7, #8]
 8018dd6:	607a      	str	r2, [r7, #4]
 8018dd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018dda:	2300      	movs	r3, #0
 8018ddc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	68ba      	ldr	r2, [r7, #8]
 8018de2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	68fa      	ldr	r2, [r7, #12]
 8018de8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018dea:	68ba      	ldr	r2, [r7, #8]
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	429a      	cmp	r2, r3
 8018df0:	d812      	bhi.n	8018e18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018df2:	687a      	ldr	r2, [r7, #4]
 8018df4:	683b      	ldr	r3, [r7, #0]
 8018df6:	1ad2      	subs	r2, r2, r3
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	699b      	ldr	r3, [r3, #24]
 8018dfc:	429a      	cmp	r2, r3
 8018dfe:	d302      	bcc.n	8018e06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018e00:	2301      	movs	r3, #1
 8018e02:	617b      	str	r3, [r7, #20]
 8018e04:	e01b      	b.n	8018e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018e06:	4b10      	ldr	r3, [pc, #64]	; (8018e48 <prvInsertTimerInActiveList+0x7c>)
 8018e08:	681a      	ldr	r2, [r3, #0]
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	3304      	adds	r3, #4
 8018e0e:	4619      	mov	r1, r3
 8018e10:	4610      	mov	r0, r2
 8018e12:	f7fd fa7c 	bl	801630e <vListInsert>
 8018e16:	e012      	b.n	8018e3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018e18:	687a      	ldr	r2, [r7, #4]
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	429a      	cmp	r2, r3
 8018e1e:	d206      	bcs.n	8018e2e <prvInsertTimerInActiveList+0x62>
 8018e20:	68ba      	ldr	r2, [r7, #8]
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	429a      	cmp	r2, r3
 8018e26:	d302      	bcc.n	8018e2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018e28:	2301      	movs	r3, #1
 8018e2a:	617b      	str	r3, [r7, #20]
 8018e2c:	e007      	b.n	8018e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018e2e:	4b07      	ldr	r3, [pc, #28]	; (8018e4c <prvInsertTimerInActiveList+0x80>)
 8018e30:	681a      	ldr	r2, [r3, #0]
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	3304      	adds	r3, #4
 8018e36:	4619      	mov	r1, r3
 8018e38:	4610      	mov	r0, r2
 8018e3a:	f7fd fa68 	bl	801630e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018e3e:	697b      	ldr	r3, [r7, #20]
}
 8018e40:	4618      	mov	r0, r3
 8018e42:	3718      	adds	r7, #24
 8018e44:	46bd      	mov	sp, r7
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	24026e20 	.word	0x24026e20
 8018e4c:	24026e1c 	.word	0x24026e1c

08018e50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b08e      	sub	sp, #56	; 0x38
 8018e54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018e56:	e0ca      	b.n	8018fee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	da18      	bge.n	8018e90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018e5e:	1d3b      	adds	r3, r7, #4
 8018e60:	3304      	adds	r3, #4
 8018e62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d10a      	bne.n	8018e80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e6e:	f383 8811 	msr	BASEPRI, r3
 8018e72:	f3bf 8f6f 	isb	sy
 8018e76:	f3bf 8f4f 	dsb	sy
 8018e7a:	61fb      	str	r3, [r7, #28]
}
 8018e7c:	bf00      	nop
 8018e7e:	e7fe      	b.n	8018e7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e86:	6850      	ldr	r0, [r2, #4]
 8018e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e8a:	6892      	ldr	r2, [r2, #8]
 8018e8c:	4611      	mov	r1, r2
 8018e8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	f2c0 80aa 	blt.w	8018fec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e9e:	695b      	ldr	r3, [r3, #20]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d004      	beq.n	8018eae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ea6:	3304      	adds	r3, #4
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	f7fd fa69 	bl	8016380 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018eae:	463b      	mov	r3, r7
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f7ff ff6b 	bl	8018d8c <prvSampleTimeNow>
 8018eb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2b09      	cmp	r3, #9
 8018ebc:	f200 8097 	bhi.w	8018fee <prvProcessReceivedCommands+0x19e>
 8018ec0:	a201      	add	r2, pc, #4	; (adr r2, 8018ec8 <prvProcessReceivedCommands+0x78>)
 8018ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ec6:	bf00      	nop
 8018ec8:	08018ef1 	.word	0x08018ef1
 8018ecc:	08018ef1 	.word	0x08018ef1
 8018ed0:	08018ef1 	.word	0x08018ef1
 8018ed4:	08018f65 	.word	0x08018f65
 8018ed8:	08018f79 	.word	0x08018f79
 8018edc:	08018fc3 	.word	0x08018fc3
 8018ee0:	08018ef1 	.word	0x08018ef1
 8018ee4:	08018ef1 	.word	0x08018ef1
 8018ee8:	08018f65 	.word	0x08018f65
 8018eec:	08018f79 	.word	0x08018f79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ef6:	f043 0301 	orr.w	r3, r3, #1
 8018efa:	b2da      	uxtb	r2, r3
 8018efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018f02:	68ba      	ldr	r2, [r7, #8]
 8018f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f06:	699b      	ldr	r3, [r3, #24]
 8018f08:	18d1      	adds	r1, r2, r3
 8018f0a:	68bb      	ldr	r3, [r7, #8]
 8018f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f10:	f7ff ff5c 	bl	8018dcc <prvInsertTimerInActiveList>
 8018f14:	4603      	mov	r3, r0
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d069      	beq.n	8018fee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f1c:	6a1b      	ldr	r3, [r3, #32]
 8018f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f28:	f003 0304 	and.w	r3, r3, #4
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d05e      	beq.n	8018fee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018f30:	68ba      	ldr	r2, [r7, #8]
 8018f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f34:	699b      	ldr	r3, [r3, #24]
 8018f36:	441a      	add	r2, r3
 8018f38:	2300      	movs	r3, #0
 8018f3a:	9300      	str	r3, [sp, #0]
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	2100      	movs	r1, #0
 8018f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f42:	f7ff fe05 	bl	8018b50 <xTimerGenericCommand>
 8018f46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018f48:	6a3b      	ldr	r3, [r7, #32]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d14f      	bne.n	8018fee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f52:	f383 8811 	msr	BASEPRI, r3
 8018f56:	f3bf 8f6f 	isb	sy
 8018f5a:	f3bf 8f4f 	dsb	sy
 8018f5e:	61bb      	str	r3, [r7, #24]
}
 8018f60:	bf00      	nop
 8018f62:	e7fe      	b.n	8018f62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f6a:	f023 0301 	bic.w	r3, r3, #1
 8018f6e:	b2da      	uxtb	r2, r3
 8018f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018f76:	e03a      	b.n	8018fee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f7e:	f043 0301 	orr.w	r3, r3, #1
 8018f82:	b2da      	uxtb	r2, r3
 8018f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018f8a:	68ba      	ldr	r2, [r7, #8]
 8018f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f92:	699b      	ldr	r3, [r3, #24]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d10a      	bne.n	8018fae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f9c:	f383 8811 	msr	BASEPRI, r3
 8018fa0:	f3bf 8f6f 	isb	sy
 8018fa4:	f3bf 8f4f 	dsb	sy
 8018fa8:	617b      	str	r3, [r7, #20]
}
 8018faa:	bf00      	nop
 8018fac:	e7fe      	b.n	8018fac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fb0:	699a      	ldr	r2, [r3, #24]
 8018fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fb4:	18d1      	adds	r1, r2, r3
 8018fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fbc:	f7ff ff06 	bl	8018dcc <prvInsertTimerInActiveList>
					break;
 8018fc0:	e015      	b.n	8018fee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fc8:	f003 0302 	and.w	r3, r3, #2
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d103      	bne.n	8018fd8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fd2:	f7fd f82b 	bl	801602c <vPortFree>
 8018fd6:	e00a      	b.n	8018fee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fde:	f023 0301 	bic.w	r3, r3, #1
 8018fe2:	b2da      	uxtb	r2, r3
 8018fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018fea:	e000      	b.n	8018fee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018fec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018fee:	4b08      	ldr	r3, [pc, #32]	; (8019010 <prvProcessReceivedCommands+0x1c0>)
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	1d39      	adds	r1, r7, #4
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f7fe f8c2 	bl	8017180 <xQueueReceive>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	f47f af2a 	bne.w	8018e58 <prvProcessReceivedCommands+0x8>
	}
}
 8019004:	bf00      	nop
 8019006:	bf00      	nop
 8019008:	3730      	adds	r7, #48	; 0x30
 801900a:	46bd      	mov	sp, r7
 801900c:	bd80      	pop	{r7, pc}
 801900e:	bf00      	nop
 8019010:	24026e24 	.word	0x24026e24

08019014 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b088      	sub	sp, #32
 8019018:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801901a:	e048      	b.n	80190ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801901c:	4b2d      	ldr	r3, [pc, #180]	; (80190d4 <prvSwitchTimerLists+0xc0>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	68db      	ldr	r3, [r3, #12]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019026:	4b2b      	ldr	r3, [pc, #172]	; (80190d4 <prvSwitchTimerLists+0xc0>)
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	68db      	ldr	r3, [r3, #12]
 801902c:	68db      	ldr	r3, [r3, #12]
 801902e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	3304      	adds	r3, #4
 8019034:	4618      	mov	r0, r3
 8019036:	f7fd f9a3 	bl	8016380 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	6a1b      	ldr	r3, [r3, #32]
 801903e:	68f8      	ldr	r0, [r7, #12]
 8019040:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019048:	f003 0304 	and.w	r3, r3, #4
 801904c:	2b00      	cmp	r3, #0
 801904e:	d02e      	beq.n	80190ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	699b      	ldr	r3, [r3, #24]
 8019054:	693a      	ldr	r2, [r7, #16]
 8019056:	4413      	add	r3, r2
 8019058:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801905a:	68ba      	ldr	r2, [r7, #8]
 801905c:	693b      	ldr	r3, [r7, #16]
 801905e:	429a      	cmp	r2, r3
 8019060:	d90e      	bls.n	8019080 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	68ba      	ldr	r2, [r7, #8]
 8019066:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	68fa      	ldr	r2, [r7, #12]
 801906c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801906e:	4b19      	ldr	r3, [pc, #100]	; (80190d4 <prvSwitchTimerLists+0xc0>)
 8019070:	681a      	ldr	r2, [r3, #0]
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	3304      	adds	r3, #4
 8019076:	4619      	mov	r1, r3
 8019078:	4610      	mov	r0, r2
 801907a:	f7fd f948 	bl	801630e <vListInsert>
 801907e:	e016      	b.n	80190ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019080:	2300      	movs	r3, #0
 8019082:	9300      	str	r3, [sp, #0]
 8019084:	2300      	movs	r3, #0
 8019086:	693a      	ldr	r2, [r7, #16]
 8019088:	2100      	movs	r1, #0
 801908a:	68f8      	ldr	r0, [r7, #12]
 801908c:	f7ff fd60 	bl	8018b50 <xTimerGenericCommand>
 8019090:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d10a      	bne.n	80190ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801909c:	f383 8811 	msr	BASEPRI, r3
 80190a0:	f3bf 8f6f 	isb	sy
 80190a4:	f3bf 8f4f 	dsb	sy
 80190a8:	603b      	str	r3, [r7, #0]
}
 80190aa:	bf00      	nop
 80190ac:	e7fe      	b.n	80190ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80190ae:	4b09      	ldr	r3, [pc, #36]	; (80190d4 <prvSwitchTimerLists+0xc0>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d1b1      	bne.n	801901c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80190b8:	4b06      	ldr	r3, [pc, #24]	; (80190d4 <prvSwitchTimerLists+0xc0>)
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80190be:	4b06      	ldr	r3, [pc, #24]	; (80190d8 <prvSwitchTimerLists+0xc4>)
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	4a04      	ldr	r2, [pc, #16]	; (80190d4 <prvSwitchTimerLists+0xc0>)
 80190c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80190c6:	4a04      	ldr	r2, [pc, #16]	; (80190d8 <prvSwitchTimerLists+0xc4>)
 80190c8:	697b      	ldr	r3, [r7, #20]
 80190ca:	6013      	str	r3, [r2, #0]
}
 80190cc:	bf00      	nop
 80190ce:	3718      	adds	r7, #24
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}
 80190d4:	24026e1c 	.word	0x24026e1c
 80190d8:	24026e20 	.word	0x24026e20

080190dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b082      	sub	sp, #8
 80190e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80190e2:	f7fd faa7 	bl	8016634 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80190e6:	4b15      	ldr	r3, [pc, #84]	; (801913c <prvCheckForValidListAndQueue+0x60>)
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d120      	bne.n	8019130 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80190ee:	4814      	ldr	r0, [pc, #80]	; (8019140 <prvCheckForValidListAndQueue+0x64>)
 80190f0:	f7fd f8bc 	bl	801626c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80190f4:	4813      	ldr	r0, [pc, #76]	; (8019144 <prvCheckForValidListAndQueue+0x68>)
 80190f6:	f7fd f8b9 	bl	801626c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80190fa:	4b13      	ldr	r3, [pc, #76]	; (8019148 <prvCheckForValidListAndQueue+0x6c>)
 80190fc:	4a10      	ldr	r2, [pc, #64]	; (8019140 <prvCheckForValidListAndQueue+0x64>)
 80190fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019100:	4b12      	ldr	r3, [pc, #72]	; (801914c <prvCheckForValidListAndQueue+0x70>)
 8019102:	4a10      	ldr	r2, [pc, #64]	; (8019144 <prvCheckForValidListAndQueue+0x68>)
 8019104:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019106:	2300      	movs	r3, #0
 8019108:	9300      	str	r3, [sp, #0]
 801910a:	4b11      	ldr	r3, [pc, #68]	; (8019150 <prvCheckForValidListAndQueue+0x74>)
 801910c:	4a11      	ldr	r2, [pc, #68]	; (8019154 <prvCheckForValidListAndQueue+0x78>)
 801910e:	2110      	movs	r1, #16
 8019110:	200a      	movs	r0, #10
 8019112:	f7fd fc19 	bl	8016948 <xQueueGenericCreateStatic>
 8019116:	4603      	mov	r3, r0
 8019118:	4a08      	ldr	r2, [pc, #32]	; (801913c <prvCheckForValidListAndQueue+0x60>)
 801911a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801911c:	4b07      	ldr	r3, [pc, #28]	; (801913c <prvCheckForValidListAndQueue+0x60>)
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d005      	beq.n	8019130 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019124:	4b05      	ldr	r3, [pc, #20]	; (801913c <prvCheckForValidListAndQueue+0x60>)
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	490b      	ldr	r1, [pc, #44]	; (8019158 <prvCheckForValidListAndQueue+0x7c>)
 801912a:	4618      	mov	r0, r3
 801912c:	f7fe fbe0 	bl	80178f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019130:	f7fd fab0 	bl	8016694 <vPortExitCritical>
}
 8019134:	bf00      	nop
 8019136:	46bd      	mov	sp, r7
 8019138:	bd80      	pop	{r7, pc}
 801913a:	bf00      	nop
 801913c:	24026e24 	.word	0x24026e24
 8019140:	24026df4 	.word	0x24026df4
 8019144:	24026e08 	.word	0x24026e08
 8019148:	24026e1c 	.word	0x24026e1c
 801914c:	24026e20 	.word	0x24026e20
 8019150:	24026ed0 	.word	0x24026ed0
 8019154:	24026e30 	.word	0x24026e30
 8019158:	0802dfc8 	.word	0x0802dfc8

0801915c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 801915c:	b480      	push	{r7}
 801915e:	b097      	sub	sp, #92	; 0x5c
 8019160:	af00      	add	r7, sp, #0
 8019162:	60f8      	str	r0, [r7, #12]
 8019164:	60b9      	str	r1, [r7, #8]
 8019166:	607a      	str	r2, [r7, #4]
 8019168:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 801916a:	683b      	ldr	r3, [r7, #0]
 801916c:	4a9a      	ldr	r2, [pc, #616]	; (80193d8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x27c>)
 801916e:	fba2 2303 	umull	r2, r3, r2, r3
 8019172:	0a1b      	lsrs	r3, r3, #8
 8019174:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801917a:	e11e      	b.n	80193ba <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x25e>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 801917c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801917e:	011a      	lsls	r2, r3, #4
 8019180:	4b96      	ldr	r3, [pc, #600]	; (80193dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 8019182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019184:	fbb2 f3f3 	udiv	r3, r2, r3
 8019188:	011b      	lsls	r3, r3, #4
 801918a:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801918c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801918e:	011b      	lsls	r3, r3, #4
 8019190:	4a92      	ldr	r2, [pc, #584]	; (80193dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 8019192:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019194:	fbb3 f1f2 	udiv	r1, r3, r2
 8019198:	fb01 f202 	mul.w	r2, r1, r2
 801919c:	1a9b      	subs	r3, r3, r2
 801919e:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80191a0:	4b8e      	ldr	r3, [pc, #568]	; (80193dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80191a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80191a6:	fb02 f103 	mul.w	r1, r2, r3
 80191aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80191ac:	4613      	mov	r3, r2
 80191ae:	005b      	lsls	r3, r3, #1
 80191b0:	4413      	add	r3, r2
 80191b2:	440b      	add	r3, r1
 80191b4:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80191b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80191b8:	3301      	adds	r3, #1
 80191ba:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80191c2:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  16; i+=2)
 80191c8:	2300      	movs	r3, #0
 80191ca:	657b      	str	r3, [r7, #84]	; 0x54
 80191cc:	e0ed      	b.n	80193aa <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24e>
    {
      if(i == 8)
 80191ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80191d0:	2b08      	cmp	r3, #8
 80191d2:	d102      	bne.n	80191da <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      {
        pLum = pInBuffer + 128;
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	3380      	adds	r3, #128	; 0x80
 80191d8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80191da:	4b80      	ldr	r3, [pc, #512]	; (80193dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80191dc:	691b      	ldr	r3, [r3, #16]
 80191de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80191e0:	429a      	cmp	r2, r3
 80191e2:	f080 80df 	bcs.w	80193a4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x248>
      {
        pOutAddr = pOutBuffer + refline;
 80191e6:	68ba      	ldr	r2, [r7, #8]
 80191e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80191ea:	4413      	add	r3, r2
 80191ec:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80191ee:	4b7b      	ldr	r3, [pc, #492]	; (80193dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 80191f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80191f4:	4413      	add	r3, r2
 80191f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        for(k= 0; k<2; k++)
 80191f8:	2300      	movs	r3, #0
 80191fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80191fc:	e0c5      	b.n	801938a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22e>
        {
          for(j=0; j < 8; j+=2)
 80191fe:	2300      	movs	r3, #0
 8019200:	653b      	str	r3, [r7, #80]	; 0x50
 8019202:	e0b8      	b.n	8019376 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21a>
          {           
            cbcomp = (int32_t)(*(pChrom));
 8019204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019206:	781b      	ldrb	r3, [r3, #0]
 8019208:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801920c:	009b      	lsls	r3, r3, #2
 801920e:	4a74      	ldr	r2, [pc, #464]	; (80193e0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x284>)
 8019210:	4413      	add	r3, r2
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8019216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019218:	3340      	adds	r3, #64	; 0x40
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 801921e:	69fb      	ldr	r3, [r7, #28]
 8019220:	009b      	lsls	r3, r3, #2
 8019222:	4a70      	ldr	r2, [pc, #448]	; (80193e4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x288>)
 8019224:	4413      	add	r3, r2
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801922a:	69fb      	ldr	r3, [r7, #28]
 801922c:	009b      	lsls	r3, r3, #2
 801922e:	4a6e      	ldr	r2, [pc, #440]	; (80193e8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x28c>)
 8019230:	4413      	add	r3, r2
 8019232:	681a      	ldr	r2, [r3, #0]
 8019234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019236:	009b      	lsls	r3, r3, #2
 8019238:	496c      	ldr	r1, [pc, #432]	; (80193ec <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x290>)
 801923a:	440b      	add	r3, r1
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	4413      	add	r3, r2
 8019240:	141b      	asrs	r3, r3, #16
 8019242:	617b      	str	r3, [r7, #20]
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);

            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 8019244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019248:	4413      	add	r3, r2
 801924a:	781b      	ldrb	r3, [r3, #0]
 801924c:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801924e:	693a      	ldr	r2, [r7, #16]
 8019250:	69bb      	ldr	r3, [r7, #24]
 8019252:	4413      	add	r3, r2
 8019254:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801925a:	3302      	adds	r3, #2
 801925c:	4964      	ldr	r1, [pc, #400]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801925e:	5c8a      	ldrb	r2, [r1, r2]
 8019260:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019262:	693a      	ldr	r2, [r7, #16]
 8019264:	697b      	ldr	r3, [r7, #20]
 8019266:	4413      	add	r3, r2
 8019268:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801926c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801926e:	3301      	adds	r3, #1
 8019270:	495f      	ldr	r1, [pc, #380]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019272:	5c8a      	ldrb	r2, [r1, r2]
 8019274:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019276:	693a      	ldr	r2, [r7, #16]
 8019278:	6a3b      	ldr	r3, [r7, #32]
 801927a:	4413      	add	r3, r2
 801927c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019280:	4a5b      	ldr	r2, [pc, #364]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019282:	5cd2      	ldrb	r2, [r2, r3]
 8019284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019286:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8019288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801928a:	3301      	adds	r3, #1
 801928c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801928e:	4413      	add	r3, r2
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	613b      	str	r3, [r7, #16]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8019294:	693a      	ldr	r2, [r7, #16]
 8019296:	69bb      	ldr	r3, [r7, #24]
 8019298:	4413      	add	r3, r2
 801929a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801929e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192a0:	3305      	adds	r3, #5
 80192a2:	4953      	ldr	r1, [pc, #332]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80192a4:	5c8a      	ldrb	r2, [r1, r2]
 80192a6:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80192a8:	693a      	ldr	r2, [r7, #16]
 80192aa:	697b      	ldr	r3, [r7, #20]
 80192ac:	4413      	add	r3, r2
 80192ae:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80192b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192b4:	3304      	adds	r3, #4
 80192b6:	494e      	ldr	r1, [pc, #312]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80192b8:	5c8a      	ldrb	r2, [r1, r2]
 80192ba:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80192bc:	693a      	ldr	r2, [r7, #16]
 80192be:	6a3b      	ldr	r3, [r7, #32]
 80192c0:	4413      	add	r3, r2
 80192c2:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80192c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192c8:	3303      	adds	r3, #3
 80192ca:	4949      	ldr	r1, [pc, #292]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80192cc:	5c8a      	ldrb	r2, [r1, r2]
 80192ce:	701a      	strb	r2, [r3, #0]

            /**********/            
            ycomp = (int32_t)(*(pLum +j +8));
 80192d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192d2:	3308      	adds	r3, #8
 80192d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80192d6:	4413      	add	r3, r2
 80192d8:	781b      	ldrb	r3, [r3, #0]
 80192da:	613b      	str	r3, [r7, #16]

            pOutAddr2[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80192dc:	693a      	ldr	r2, [r7, #16]
 80192de:	69bb      	ldr	r3, [r7, #24]
 80192e0:	4413      	add	r3, r2
 80192e2:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80192e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192e8:	3302      	adds	r3, #2
 80192ea:	4941      	ldr	r1, [pc, #260]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 80192ec:	5c8a      	ldrb	r2, [r1, r2]
 80192ee:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80192f0:	693a      	ldr	r2, [r7, #16]
 80192f2:	697b      	ldr	r3, [r7, #20]
 80192f4:	4413      	add	r3, r2
 80192f6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80192fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192fc:	3301      	adds	r3, #1
 80192fe:	493c      	ldr	r1, [pc, #240]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019300:	5c8a      	ldrb	r2, [r1, r2]
 8019302:	701a      	strb	r2, [r3, #0]
            pOutAddr2[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019304:	693a      	ldr	r2, [r7, #16]
 8019306:	6a3b      	ldr	r3, [r7, #32]
 8019308:	4413      	add	r3, r2
 801930a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801930e:	4a38      	ldr	r2, [pc, #224]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019310:	5cd2      	ldrb	r2, [r2, r3]
 8019312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019314:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));            
 8019316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019318:	3309      	adds	r3, #9
 801931a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801931c:	4413      	add	r3, r2
 801931e:	781b      	ldrb	r3, [r3, #0]
 8019320:	613b      	str	r3, [r7, #16]
            
            pOutAddr2[3+ JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 8019322:	693a      	ldr	r2, [r7, #16]
 8019324:	69bb      	ldr	r3, [r7, #24]
 8019326:	4413      	add	r3, r2
 8019328:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801932c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801932e:	3305      	adds	r3, #5
 8019330:	492f      	ldr	r1, [pc, #188]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019332:	5c8a      	ldrb	r2, [r1, r2]
 8019334:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019336:	693a      	ldr	r2, [r7, #16]
 8019338:	697b      	ldr	r3, [r7, #20]
 801933a:	4413      	add	r3, r2
 801933c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019342:	3304      	adds	r3, #4
 8019344:	492a      	ldr	r1, [pc, #168]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 8019346:	5c8a      	ldrb	r2, [r1, r2]
 8019348:	701a      	strb	r2, [r3, #0]
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 801934a:	693a      	ldr	r2, [r7, #16]
 801934c:	6a3b      	ldr	r3, [r7, #32]
 801934e:	4413      	add	r3, r2
 8019350:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019356:	3303      	adds	r3, #3
 8019358:	4925      	ldr	r1, [pc, #148]	; (80193f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x294>)
 801935a:	5c8a      	ldrb	r2, [r1, r2]
 801935c:	701a      	strb	r2, [r3, #0]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801935e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019360:	3306      	adds	r3, #6
 8019362:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8019364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019366:	3306      	adds	r3, #6
 8019368:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 801936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801936c:	3301      	adds	r3, #1
 801936e:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8019370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019372:	3302      	adds	r3, #2
 8019374:	653b      	str	r3, [r7, #80]	; 0x50
 8019376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019378:	2b07      	cmp	r3, #7
 801937a:	f67f af43 	bls.w	8019204 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>
          }
          pLum += 64;                      
 801937e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019380:	3340      	adds	r3, #64	; 0x40
 8019382:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 8019384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019386:	3301      	adds	r3, #1
 8019388:	64fb      	str	r3, [r7, #76]	; 0x4c
 801938a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801938c:	2b01      	cmp	r3, #1
 801938e:	f67f af36 	bls.w	80191fe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
        }

        pLum = pLum - 128 + 16;
 8019392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019394:	3b70      	subs	r3, #112	; 0x70
 8019396:	637b      	str	r3, [r7, #52]	; 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8019398:	4b10      	ldr	r3, [pc, #64]	; (80193dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x280>)
 801939a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801939c:	005b      	lsls	r3, r3, #1
 801939e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80193a0:	4413      	add	r3, r2
 80193a2:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 80193a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193a6:	3302      	adds	r3, #2
 80193a8:	657b      	str	r3, [r7, #84]	; 0x54
 80193aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193ac:	2b0f      	cmp	r3, #15
 80193ae:	f67f af0e 	bls.w	80191ce <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x72>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80193b8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80193ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	4413      	add	r3, r2
 80193c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80193c2:	429a      	cmp	r2, r3
 80193c4:	f4ff aeda 	bcc.w	801917c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80193c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80193ca:	4618      	mov	r0, r3
 80193cc:	375c      	adds	r7, #92	; 0x5c
 80193ce:	46bd      	mov	sp, r7
 80193d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d4:	4770      	bx	lr
 80193d6:	bf00      	nop
 80193d8:	aaaaaaab 	.word	0xaaaaaaab
 80193dc:	24026f20 	.word	0x24026f20
 80193e0:	24027360 	.word	0x24027360
 80193e4:	24026f60 	.word	0x24026f60
 80193e8:	24027760 	.word	0x24027760
 80193ec:	24027b60 	.word	0x24027b60
 80193f0:	0802f010 	.word	0x0802f010

080193f4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80193f4:	b480      	push	{r7}
 80193f6:	b097      	sub	sp, #92	; 0x5c
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	60f8      	str	r0, [r7, #12]
 80193fc:	60b9      	str	r1, [r7, #8]
 80193fe:	607a      	str	r2, [r7, #4]
 8019400:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8019402:	683b      	ldr	r3, [r7, #0]
 8019404:	0a1b      	lsrs	r3, r3, #8
 8019406:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801940c:	e0c5      	b.n	801959a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801940e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019410:	011a      	lsls	r2, r3, #4
 8019412:	4b69      	ldr	r3, [pc, #420]	; (80195b8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019416:	fbb2 f3f3 	udiv	r3, r2, r3
 801941a:	00db      	lsls	r3, r3, #3
 801941c:	633b      	str	r3, [r7, #48]	; 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801941e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019420:	011b      	lsls	r3, r3, #4
 8019422:	4a65      	ldr	r2, [pc, #404]	; (80195b8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019426:	fbb3 f1f2 	udiv	r1, r3, r2
 801942a:	fb01 f202 	mul.w	r2, r1, r2
 801942e:	1a9b      	subs	r3, r3, r2
 8019430:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019432:	4b61      	ldr	r3, [pc, #388]	; (80195b8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019438:	fb02 f103 	mul.w	r1, r2, r3
 801943c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801943e:	4613      	mov	r3, r2
 8019440:	005b      	lsls	r3, r3, #1
 8019442:	4413      	add	r3, r2
 8019444:	440b      	add	r3, r1
 8019446:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8019448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801944a:	3301      	adds	r3, #1
 801944c:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	3380      	adds	r3, #128	; 0x80
 8019452:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pLum = pInBuffer;
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	63bb      	str	r3, [r7, #56]	; 0x38
    
    for(i= 0; i <  8; i++)
 8019458:	2300      	movs	r3, #0
 801945a:	657b      	str	r3, [r7, #84]	; 0x54
 801945c:	e095      	b.n	801958a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x196>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801945e:	4b56      	ldr	r3, [pc, #344]	; (80195b8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 8019460:	691b      	ldr	r3, [r3, #16]
 8019462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019464:	429a      	cmp	r2, r3
 8019466:	f080 808d 	bcs.w	8019584 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x190>
      {
        pOutAddr = pOutBuffer + refline;
 801946a:	68ba      	ldr	r2, [r7, #8]
 801946c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801946e:	4413      	add	r3, r2
 8019470:	643b      	str	r3, [r7, #64]	; 0x40
        
        for(k= 0; k<2; k++)
 8019472:	2300      	movs	r3, #0
 8019474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019476:	e07a      	b.n	801956e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x17a>
        {
          for(j=0; j < 8; j+=2)
 8019478:	2300      	movs	r3, #0
 801947a:	653b      	str	r3, [r7, #80]	; 0x50
 801947c:	e06e      	b.n	801955c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x168>
          {           
            cbcomp = (int32_t)(*(pChrom));
 801947e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019480:	781b      	ldrb	r3, [r3, #0]
 8019482:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8019484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019486:	009b      	lsls	r3, r3, #2
 8019488:	4a4c      	ldr	r2, [pc, #304]	; (80195bc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c8>)
 801948a:	4413      	add	r3, r2
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	627b      	str	r3, [r7, #36]	; 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 8019490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019492:	3340      	adds	r3, #64	; 0x40
 8019494:	781b      	ldrb	r3, [r3, #0]
 8019496:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8019498:	6a3b      	ldr	r3, [r7, #32]
 801949a:	009b      	lsls	r3, r3, #2
 801949c:	4a48      	ldr	r2, [pc, #288]	; (80195c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1cc>)
 801949e:	4413      	add	r3, r2
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80194a4:	6a3b      	ldr	r3, [r7, #32]
 80194a6:	009b      	lsls	r3, r3, #2
 80194a8:	4a46      	ldr	r2, [pc, #280]	; (80195c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d0>)
 80194aa:	4413      	add	r3, r2
 80194ac:	681a      	ldr	r2, [r3, #0]
 80194ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194b0:	009b      	lsls	r3, r3, #2
 80194b2:	4945      	ldr	r1, [pc, #276]	; (80195c8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d4>)
 80194b4:	440b      	add	r3, r1
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	4413      	add	r3, r2
 80194ba:	141b      	asrs	r3, r3, #16
 80194bc:	61bb      	str	r3, [r7, #24]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
           ycomp = (int32_t)(*(pLum +j));
 80194be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194c2:	4413      	add	r3, r2
 80194c4:	781b      	ldrb	r3, [r3, #0]
 80194c6:	617b      	str	r3, [r7, #20]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80194c8:	697a      	ldr	r2, [r7, #20]
 80194ca:	69fb      	ldr	r3, [r7, #28]
 80194cc:	4413      	add	r3, r2
 80194ce:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80194d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194d4:	3302      	adds	r3, #2
 80194d6:	493d      	ldr	r1, [pc, #244]	; (80195cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80194d8:	5c8a      	ldrb	r2, [r1, r2]
 80194da:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80194dc:	697a      	ldr	r2, [r7, #20]
 80194de:	69bb      	ldr	r3, [r7, #24]
 80194e0:	4413      	add	r3, r2
 80194e2:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80194e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194e8:	3301      	adds	r3, #1
 80194ea:	4938      	ldr	r1, [pc, #224]	; (80195cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80194ec:	5c8a      	ldrb	r2, [r1, r2]
 80194ee:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 80194f0:	697a      	ldr	r2, [r7, #20]
 80194f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194f4:	4413      	add	r3, r2
 80194f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80194fa:	4a34      	ldr	r2, [pc, #208]	; (80195cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 80194fc:	5cd2      	ldrb	r2, [r2, r3]
 80194fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019500:	701a      	strb	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8019502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019504:	3301      	adds	r3, #1
 8019506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019508:	4413      	add	r3, r2
 801950a:	781b      	ldrb	r3, [r3, #0]
 801950c:	617b      	str	r3, [r7, #20]

            pOutAddr[3 + JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 801950e:	697a      	ldr	r2, [r7, #20]
 8019510:	69fb      	ldr	r3, [r7, #28]
 8019512:	4413      	add	r3, r2
 8019514:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801951a:	3305      	adds	r3, #5
 801951c:	492b      	ldr	r1, [pc, #172]	; (80195cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 801951e:	5c8a      	ldrb	r2, [r1, r2]
 8019520:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 8019522:	697a      	ldr	r2, [r7, #20]
 8019524:	69bb      	ldr	r3, [r7, #24]
 8019526:	4413      	add	r3, r2
 8019528:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801952c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801952e:	3304      	adds	r3, #4
 8019530:	4926      	ldr	r1, [pc, #152]	; (80195cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8019532:	5c8a      	ldrb	r2, [r1, r2]
 8019534:	701a      	strb	r2, [r3, #0]
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 8019536:	697a      	ldr	r2, [r7, #20]
 8019538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801953a:	4413      	add	r3, r2
 801953c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8019540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019542:	3303      	adds	r3, #3
 8019544:	4921      	ldr	r1, [pc, #132]	; (80195cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1d8>)
 8019546:	5c8a      	ldrb	r2, [r1, r2]
 8019548:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801954a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801954c:	3306      	adds	r3, #6
 801954e:	643b      	str	r3, [r7, #64]	; 0x40
          
            pChrom++;
 8019550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019552:	3301      	adds	r3, #1
 8019554:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8019556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019558:	3302      	adds	r3, #2
 801955a:	653b      	str	r3, [r7, #80]	; 0x50
 801955c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801955e:	2b07      	cmp	r3, #7
 8019560:	d98d      	bls.n	801947e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x8a>
          }
          pLum += 64;                      
 8019562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019564:	3340      	adds	r3, #64	; 0x40
 8019566:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8019568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801956a:	3301      	adds	r3, #1
 801956c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801956e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019570:	2b01      	cmp	r3, #1
 8019572:	d981      	bls.n	8019478 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x84>
        }
        
        pLum = pLum - 128 + 8;
 8019574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019576:	3b78      	subs	r3, #120	; 0x78
 8019578:	63bb      	str	r3, [r7, #56]	; 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 801957a:	4b0f      	ldr	r3, [pc, #60]	; (80195b8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1c4>)
 801957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801957e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019580:	4413      	add	r3, r2
 8019582:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8019584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019586:	3301      	adds	r3, #1
 8019588:	657b      	str	r3, [r7, #84]	; 0x54
 801958a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801958c:	2b07      	cmp	r3, #7
 801958e:	f67f af66 	bls.w	801945e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x6a>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019598:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801959a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	4413      	add	r3, r2
 80195a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80195a2:	429a      	cmp	r2, r3
 80195a4:	f4ff af33 	bcc.w	801940e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80195a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80195aa:	4618      	mov	r0, r3
 80195ac:	375c      	adds	r7, #92	; 0x5c
 80195ae:	46bd      	mov	sp, r7
 80195b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b4:	4770      	bx	lr
 80195b6:	bf00      	nop
 80195b8:	24026f20 	.word	0x24026f20
 80195bc:	24027360 	.word	0x24027360
 80195c0:	24026f60 	.word	0x24026f60
 80195c4:	24027760 	.word	0x24027760
 80195c8:	24027b60 	.word	0x24027b60
 80195cc:	0802f010 	.word	0x0802f010

080195d0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80195d0:	b480      	push	{r7}
 80195d2:	b095      	sub	sp, #84	; 0x54
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	60f8      	str	r0, [r7, #12]
 80195d8:	60b9      	str	r1, [r7, #8]
 80195da:	607a      	str	r2, [r7, #4]
 80195dc:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80195de:	683b      	ldr	r3, [r7, #0]
 80195e0:	4a54      	ldr	r2, [pc, #336]	; (8019734 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x164>)
 80195e2:	fba2 2303 	umull	r2, r3, r2, r3
 80195e6:	09db      	lsrs	r3, r3, #7
 80195e8:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	647b      	str	r3, [r7, #68]	; 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 80195ee:	e092      	b.n	8019716 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x146>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80195f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80195f2:	00da      	lsls	r2, r3, #3
 80195f4:	4b50      	ldr	r3, [pc, #320]	; (8019738 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80195f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80195fc:	00db      	lsls	r3, r3, #3
 80195fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8019600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019602:	00db      	lsls	r3, r3, #3
 8019604:	4a4c      	ldr	r2, [pc, #304]	; (8019738 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019606:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019608:	fbb3 f1f2 	udiv	r1, r3, r2
 801960c:	fb01 f202 	mul.w	r2, r1, r2
 8019610:	1a9b      	subs	r3, r3, r2
 8019612:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8019614:	4b48      	ldr	r3, [pc, #288]	; (8019738 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801961a:	fb02 f103 	mul.w	r1, r2, r3
 801961e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019620:	4613      	mov	r3, r2
 8019622:	005b      	lsls	r3, r3, #1
 8019624:	4413      	add	r3, r2
 8019626:	440b      	add	r3, r1
 8019628:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;   
 801962a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801962c:	3301      	adds	r3, #1
 801962e:	647b      	str	r3, [r7, #68]	; 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	3340      	adds	r3, #64	; 0x40
 8019634:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  8; i++)
 801963a:	2300      	movs	r3, #0
 801963c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801963e:	e064      	b.n	801970a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x13a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8019640:	4b3d      	ldr	r3, [pc, #244]	; (8019738 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 8019642:	691b      	ldr	r3, [r3, #16]
 8019644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019646:	429a      	cmp	r2, r3
 8019648:	d25c      	bcs.n	8019704 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x134>
      {
        pOutAddr = pOutBuffer+ refline;
 801964a:	68ba      	ldr	r2, [r7, #8]
 801964c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801964e:	4413      	add	r3, r2
 8019650:	63fb      	str	r3, [r7, #60]	; 0x3c
        

          for(j=0; j < 8; j++)
 8019652:	2300      	movs	r3, #0
 8019654:	64bb      	str	r3, [r7, #72]	; 0x48
 8019656:	e04a      	b.n	80196ee <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x11e>
          {           
            cbcomp = (int32_t)(*pChrom);
 8019658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801965a:	781b      	ldrb	r3, [r3, #0]
 801965c:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019660:	009b      	lsls	r3, r3, #2
 8019662:	4a36      	ldr	r2, [pc, #216]	; (801973c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x16c>)
 8019664:	4413      	add	r3, r2
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 801966a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801966c:	3340      	adds	r3, #64	; 0x40
 801966e:	781b      	ldrb	r3, [r3, #0]
 8019670:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8019672:	69fb      	ldr	r3, [r7, #28]
 8019674:	009b      	lsls	r3, r3, #2
 8019676:	4a32      	ldr	r2, [pc, #200]	; (8019740 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x170>)
 8019678:	4413      	add	r3, r2
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801967e:	69fb      	ldr	r3, [r7, #28]
 8019680:	009b      	lsls	r3, r3, #2
 8019682:	4a30      	ldr	r2, [pc, #192]	; (8019744 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 8019684:	4413      	add	r3, r2
 8019686:	681a      	ldr	r2, [r3, #0]
 8019688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801968a:	009b      	lsls	r3, r3, #2
 801968c:	492e      	ldr	r1, [pc, #184]	; (8019748 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801968e:	440b      	add	r3, r1
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	4413      	add	r3, r2
 8019694:	141b      	asrs	r3, r3, #16
 8019696:	617b      	str	r3, [r7, #20]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
            ycomp = (int32_t)(*(pLum +j));
 8019698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801969a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801969c:	4413      	add	r3, r2
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	613b      	str	r3, [r7, #16]
          
            pOutAddr[JPEG_RED_OFFSET/8] = CLAMP(ycomp + c_red);
 80196a2:	693a      	ldr	r2, [r7, #16]
 80196a4:	69bb      	ldr	r3, [r7, #24]
 80196a6:	4413      	add	r3, r2
 80196a8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80196ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196ae:	3302      	adds	r3, #2
 80196b0:	4926      	ldr	r1, [pc, #152]	; (801974c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80196b2:	5c8a      	ldrb	r2, [r1, r2]
 80196b4:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
 80196b6:	693a      	ldr	r2, [r7, #16]
 80196b8:	697b      	ldr	r3, [r7, #20]
 80196ba:	4413      	add	r3, r2
 80196bc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80196c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196c2:	3301      	adds	r3, #1
 80196c4:	4921      	ldr	r1, [pc, #132]	; (801974c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80196c6:	5c8a      	ldrb	r2, [r1, r2]
 80196c8:	701a      	strb	r2, [r3, #0]
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        
 80196ca:	693a      	ldr	r2, [r7, #16]
 80196cc:	6a3b      	ldr	r3, [r7, #32]
 80196ce:	4413      	add	r3, r2
 80196d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80196d4:	4a1d      	ldr	r2, [pc, #116]	; (801974c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80196d6:	5cd2      	ldrb	r2, [r2, r3]
 80196d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196da:	701a      	strb	r2, [r3, #0]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80196dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196de:	3303      	adds	r3, #3
 80196e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 80196e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e4:	3301      	adds	r3, #1
 80196e6:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 80196e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196ea:	3301      	adds	r3, #1
 80196ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80196ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196f0:	2b07      	cmp	r3, #7
 80196f2:	d9b1      	bls.n	8019658 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x88>
          }
          pLum += 8;
 80196f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196f6:	3308      	adds	r3, #8
 80196f8:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 80196fa:	4b0f      	ldr	r3, [pc, #60]	; (8019738 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x168>)
 80196fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019700:	4413      	add	r3, r2
 8019702:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 8019704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019706:	3301      	adds	r3, #1
 8019708:	64fb      	str	r3, [r7, #76]	; 0x4c
 801970a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801970c:	2b07      	cmp	r3, #7
 801970e:	d997      	bls.n	8019640 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	33c0      	adds	r3, #192	; 0xc0
 8019714:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8019716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	4413      	add	r3, r2
 801971c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801971e:	429a      	cmp	r2, r3
 8019720:	f4ff af66 	bcc.w	80195f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8019724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8019726:	4618      	mov	r0, r3
 8019728:	3754      	adds	r7, #84	; 0x54
 801972a:	46bd      	mov	sp, r7
 801972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019730:	4770      	bx	lr
 8019732:	bf00      	nop
 8019734:	aaaaaaab 	.word	0xaaaaaaab
 8019738:	24026f20 	.word	0x24026f20
 801973c:	24027360 	.word	0x24027360
 8019740:	24026f60 	.word	0x24026f60
 8019744:	24027760 	.word	0x24027760
 8019748:	24027b60 	.word	0x24027b60
 801974c:	0802f010 	.word	0x0802f010

08019750 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8019750:	b480      	push	{r7}
 8019752:	b08f      	sub	sp, #60	; 0x3c
 8019754:	af00      	add	r7, sp, #0
 8019756:	60f8      	str	r0, [r7, #12]
 8019758:	60b9      	str	r1, [r7, #8]
 801975a:	607a      	str	r2, [r7, #4]
 801975c:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 801975e:	683b      	ldr	r3, [r7, #0]
 8019760:	099b      	lsrs	r3, r3, #6
 8019762:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	637b      	str	r3, [r7, #52]	; 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 8019768:	e05b      	b.n	8019822 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd2>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801976a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801976c:	00da      	lsls	r2, r3, #3
 801976e:	4b33      	ldr	r3, [pc, #204]	; (801983c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019772:	fbb2 f3f3 	udiv	r3, r2, r3
 8019776:	00db      	lsls	r3, r3, #3
 8019778:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801977c:	00db      	lsls	r3, r3, #3
 801977e:	4a2f      	ldr	r2, [pc, #188]	; (801983c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019782:	fbb3 f1f2 	udiv	r1, r3, r2
 8019786:	fb01 f202 	mul.w	r2, r1, r2
 801978a:	1a9b      	subs	r3, r3, r2
 801978c:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801978e:	4b2b      	ldr	r3, [pc, #172]	; (801983c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019792:	69ba      	ldr	r2, [r7, #24]
 8019794:	fb02 f103 	mul.w	r1, r2, r3
 8019798:	697a      	ldr	r2, [r7, #20]
 801979a:	4613      	mov	r3, r2
 801979c:	005b      	lsls	r3, r3, #1
 801979e:	4413      	add	r3, r2
 80197a0:	440b      	add	r3, r1
 80197a2:	633b      	str	r3, [r7, #48]	; 0x30
    
    currentMCU++;
 80197a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197a6:	3301      	adds	r3, #1
 80197a8:	637b      	str	r3, [r7, #52]	; 0x34
  
    pLum = pInBuffer;
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 80197ae:	2300      	movs	r3, #0
 80197b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80197b2:	e030      	b.n	8019816 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
    { 
      pOutAddr = pOutBuffer + refline;
 80197b4:	68ba      	ldr	r2, [r7, #8]
 80197b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197b8:	4413      	add	r3, r2
 80197ba:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80197bc:	4b1f      	ldr	r3, [pc, #124]	; (801983c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 80197be:	691b      	ldr	r3, [r3, #16]
 80197c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197c2:	429a      	cmp	r2, r3
 80197c4:	d224      	bcs.n	8019810 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc0>
      {  
        for(j=0; j < 8; j++)
 80197c6:	2300      	movs	r3, #0
 80197c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80197ca:	e019      	b.n	8019800 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb0>
        { 
          ySample =   (uint32_t)(*pLum);
 80197cc:	6a3b      	ldr	r3, [r7, #32]
 80197ce:	781b      	ldrb	r3, [r3, #0]
 80197d0:	613b      	str	r3, [r7, #16]
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
          
          pOutAddr[0] =  ySample;
 80197d2:	693b      	ldr	r3, [r7, #16]
 80197d4:	b2da      	uxtb	r2, r3
 80197d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197d8:	701a      	strb	r2, [r3, #0]
          pOutAddr[1] =  ySample;
 80197da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197dc:	3301      	adds	r3, #1
 80197de:	693a      	ldr	r2, [r7, #16]
 80197e0:	b2d2      	uxtb	r2, r2
 80197e2:	701a      	strb	r2, [r3, #0]
          pOutAddr[2] =  ySample;     
 80197e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197e6:	3302      	adds	r3, #2
 80197e8:	693a      	ldr	r2, [r7, #16]
 80197ea:	b2d2      	uxtb	r2, r2
 80197ec:	701a      	strb	r2, [r3, #0]
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 80197ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197f0:	3303      	adds	r3, #3
 80197f2:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 80197f4:	6a3b      	ldr	r3, [r7, #32]
 80197f6:	3301      	adds	r3, #1
 80197f8:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 80197fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197fc:	3301      	adds	r3, #1
 80197fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8019800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019802:	2b07      	cmp	r3, #7
 8019804:	d9e2      	bls.n	80197cc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 8019806:	4b0d      	ldr	r3, [pc, #52]	; (801983c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xec>)
 8019808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801980a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801980c:	4413      	add	r3, r2
 801980e:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 8019810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019812:	3301      	adds	r3, #1
 8019814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019818:	2b07      	cmp	r3, #7
 801981a:	d9cb      	bls.n	80197b4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x64>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	3340      	adds	r3, #64	; 0x40
 8019820:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8019822:	69fa      	ldr	r2, [r7, #28]
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	4413      	add	r3, r2
 8019828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801982a:	429a      	cmp	r2, r3
 801982c:	d39d      	bcc.n	801976a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 801982e:	69fb      	ldr	r3, [r7, #28]
}
 8019830:	4618      	mov	r0, r3
 8019832:	373c      	adds	r7, #60	; 0x3c
 8019834:	46bd      	mov	sp, r7
 8019836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801983a:	4770      	bx	lr
 801983c:	24026f20 	.word	0x24026f20

08019840 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8019840:	b480      	push	{r7}
 8019842:	b093      	sub	sp, #76	; 0x4c
 8019844:	af00      	add	r7, sp, #0
 8019846:	60f8      	str	r0, [r7, #12]
 8019848:	60b9      	str	r1, [r7, #8]
 801984a:	607a      	str	r2, [r7, #4]
 801984c:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 801984e:	683b      	ldr	r3, [r7, #0]
 8019850:	0a1b      	lsrs	r3, r3, #8
 8019852:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	63fb      	str	r3, [r7, #60]	; 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 8019858:	e089      	b.n	801996e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12e>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801985a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801985c:	00da      	lsls	r2, r3, #3
 801985e:	4b4b      	ldr	r3, [pc, #300]	; (801998c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019862:	fbb2 f3f3 	udiv	r3, r2, r3
 8019866:	00db      	lsls	r3, r3, #3
 8019868:	62bb      	str	r3, [r7, #40]	; 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801986a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801986c:	00db      	lsls	r3, r3, #3
 801986e:	4a47      	ldr	r2, [pc, #284]	; (801998c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019870:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019872:	fbb3 f1f2 	udiv	r1, r3, r2
 8019876:	fb01 f202 	mul.w	r2, r1, r2
 801987a:	1a9b      	subs	r3, r3, r2
 801987c:	627b      	str	r3, [r7, #36]	; 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801987e:	4b43      	ldr	r3, [pc, #268]	; (801998c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019884:	fb02 f103 	mul.w	r1, r2, r3
 8019888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801988a:	4613      	mov	r3, r2
 801988c:	005b      	lsls	r3, r3, #1
 801988e:	4413      	add	r3, r2
 8019890:	440b      	add	r3, r1
 8019892:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8019894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019896:	3301      	adds	r3, #1
 8019898:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pChrom = pInBuffer;
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	633b      	str	r3, [r7, #48]	; 0x30
    
    for(i= 0; i <  8; i++)
 801989e:	2300      	movs	r3, #0
 80198a0:	647b      	str	r3, [r7, #68]	; 0x44
 80198a2:	e05d      	b.n	8019960 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x120>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80198a4:	4b39      	ldr	r3, [pc, #228]	; (801998c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 80198a6:	691b      	ldr	r3, [r3, #16]
 80198a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80198aa:	429a      	cmp	r2, r3
 80198ac:	d255      	bcs.n	801995a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11a>
      {
        pOutAddr = pOutBuffer+ refline;        
 80198ae:	68ba      	ldr	r2, [r7, #8]
 80198b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198b2:	4413      	add	r3, r2
 80198b4:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 80198b6:	2300      	movs	r3, #0
 80198b8:	643b      	str	r3, [r7, #64]	; 0x40
 80198ba:	e046      	b.n	801994a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10a>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 80198bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198be:	33c0      	adds	r3, #192	; 0xc0
 80198c0:	781b      	ldrb	r3, [r3, #0]
 80198c2:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80198c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198c6:	781b      	ldrb	r3, [r3, #0]
 80198c8:	461a      	mov	r2, r3
 80198ca:	6a3b      	ldr	r3, [r7, #32]
 80198cc:	fb02 f303 	mul.w	r3, r2, r3
 80198d0:	4a2f      	ldr	r2, [pc, #188]	; (8019990 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80198d2:	fb82 1203 	smull	r1, r2, r2, r3
 80198d6:	441a      	add	r2, r3
 80198d8:	11d2      	asrs	r2, r2, #7
 80198da:	17db      	asrs	r3, r3, #31
 80198dc:	1ad3      	subs	r3, r2, r3
 80198de:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 80198e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e2:	3340      	adds	r3, #64	; 0x40
 80198e4:	781b      	ldrb	r3, [r3, #0]
 80198e6:	461a      	mov	r2, r3
 80198e8:	6a3b      	ldr	r3, [r7, #32]
 80198ea:	fb02 f303 	mul.w	r3, r2, r3
 80198ee:	4a28      	ldr	r2, [pc, #160]	; (8019990 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80198f0:	fb82 1203 	smull	r1, r2, r2, r3
 80198f4:	441a      	add	r2, r3
 80198f6:	11d2      	asrs	r2, r2, #7
 80198f8:	17db      	asrs	r3, r3, #31
 80198fa:	1ad3      	subs	r3, r2, r3
 80198fc:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 80198fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019900:	3380      	adds	r3, #128	; 0x80
 8019902:	781b      	ldrb	r3, [r3, #0]
 8019904:	461a      	mov	r2, r3
 8019906:	6a3b      	ldr	r3, [r7, #32]
 8019908:	fb02 f303 	mul.w	r3, r2, r3
 801990c:	4a20      	ldr	r2, [pc, #128]	; (8019990 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801990e:	fb82 1203 	smull	r1, r2, r2, r3
 8019912:	441a      	add	r2, r3
 8019914:	11d2      	asrs	r2, r2, #7
 8019916:	17db      	asrs	r3, r3, #31
 8019918:	1ad3      	subs	r3, r2, r3
 801991a:	617b      	str	r3, [r7, #20]
            (c_green << JPEG_GREEN_OFFSET) | \
            (c_blue << JPEG_BLUE_OFFSET);     
            
#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
            
          pOutAddr[JPEG_RED_OFFSET/8]   =  c_red;
 801991c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801991e:	3302      	adds	r3, #2
 8019920:	69fa      	ldr	r2, [r7, #28]
 8019922:	b2d2      	uxtb	r2, r2
 8019924:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_GREEN_OFFSET/8] =  c_green;
 8019926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019928:	3301      	adds	r3, #1
 801992a:	69ba      	ldr	r2, [r7, #24]
 801992c:	b2d2      	uxtb	r2, r2
 801992e:	701a      	strb	r2, [r3, #0]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	b2da      	uxtb	r2, r3
 8019934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019936:	701a      	strb	r2, [r3, #0]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8019938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801993a:	3303      	adds	r3, #3
 801993c:	637b      	str	r3, [r7, #52]	; 0x34
          
            pChrom++;
 801993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019940:	3301      	adds	r3, #1
 8019942:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8019944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019946:	3301      	adds	r3, #1
 8019948:	643b      	str	r3, [r7, #64]	; 0x40
 801994a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801994c:	2b07      	cmp	r3, #7
 801994e:	d9b5      	bls.n	80198bc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7c>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8019950:	4b0e      	ldr	r3, [pc, #56]	; (801998c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x14c>)
 8019952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019956:	4413      	add	r3, r2
 8019958:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 801995a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801995c:	3301      	adds	r3, #1
 801995e:	647b      	str	r3, [r7, #68]	; 0x44
 8019960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019962:	2b07      	cmp	r3, #7
 8019964:	d99e      	bls.n	80198a4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x64>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801996c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801996e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	4413      	add	r3, r2
 8019974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019976:	429a      	cmp	r2, r3
 8019978:	f4ff af6f 	bcc.w	801985a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 801997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801997e:	4618      	mov	r0, r3
 8019980:	374c      	adds	r7, #76	; 0x4c
 8019982:	46bd      	mov	sp, r7
 8019984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019988:	4770      	bx	lr
 801998a:	bf00      	nop
 801998c:	24026f20 	.word	0x24026f20
 8019990:	80808081 	.word	0x80808081

08019994 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8019994:	b480      	push	{r7}
 8019996:	b087      	sub	sp, #28
 8019998:	af00      	add	r7, sp, #0
 801999a:	60f8      	str	r0, [r7, #12]
 801999c:	60b9      	str	r1, [r7, #8]
 801999e:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	4a7c      	ldr	r2, [pc, #496]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199a6:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	68db      	ldr	r3, [r3, #12]
 80199ac:	4a7a      	ldr	r2, [pc, #488]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199ae:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	689b      	ldr	r3, [r3, #8]
 80199b4:	4a78      	ldr	r2, [pc, #480]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199b6:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	68db      	ldr	r3, [r3, #12]
 80199bc:	68fa      	ldr	r2, [r7, #12]
 80199be:	6892      	ldr	r2, [r2, #8]
 80199c0:	fb03 f202 	mul.w	r2, r3, r2
 80199c4:	4613      	mov	r3, r2
 80199c6:	005b      	lsls	r3, r3, #1
 80199c8:	4413      	add	r3, r2
 80199ca:	4a73      	ldr	r2, [pc, #460]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199cc:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	685b      	ldr	r3, [r3, #4]
 80199d2:	4a71      	ldr	r2, [pc, #452]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199d4:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80199d6:	4b70      	ldr	r3, [pc, #448]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	2b10      	cmp	r3, #16
 80199dc:	d155      	bne.n	8019a8a <JPEG_GetDecodeColorConvertFunc+0xf6>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80199de:	4b6e      	ldr	r3, [pc, #440]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199e0:	685b      	ldr	r3, [r3, #4]
 80199e2:	2b01      	cmp	r3, #1
 80199e4:	d119      	bne.n	8019a1a <JPEG_GetDecodeColorConvertFunc+0x86>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 80199e6:	68bb      	ldr	r3, [r7, #8]
 80199e8:	4a6c      	ldr	r2, [pc, #432]	; (8019b9c <JPEG_GetDecodeColorConvertFunc+0x208>)
 80199ea:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80199ec:	4b6a      	ldr	r3, [pc, #424]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199ee:	689b      	ldr	r3, [r3, #8]
 80199f0:	f003 030f 	and.w	r3, r3, #15
 80199f4:	4a68      	ldr	r2, [pc, #416]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199f6:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 80199f8:	4b67      	ldr	r3, [pc, #412]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 80199fa:	695b      	ldr	r3, [r3, #20]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d005      	beq.n	8019a0c <JPEG_GetDecodeColorConvertFunc+0x78>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8019a00:	4b65      	ldr	r3, [pc, #404]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a02:	695b      	ldr	r3, [r3, #20]
 8019a04:	f1c3 0310 	rsb	r3, r3, #16
 8019a08:	4a63      	ldr	r2, [pc, #396]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a0a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8019a0c:	4b62      	ldr	r3, [pc, #392]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a0e:	2210      	movs	r2, #16
 8019a10:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8019a12:	4b61      	ldr	r3, [pc, #388]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a14:	2210      	movs	r2, #16
 8019a16:	621a      	str	r2, [r3, #32]
 8019a18:	e075      	b.n	8019b06 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8019a1a:	4b5f      	ldr	r3, [pc, #380]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a1c:	685b      	ldr	r3, [r3, #4]
 8019a1e:	2b02      	cmp	r3, #2
 8019a20:	d119      	bne.n	8019a56 <JPEG_GetDecodeColorConvertFunc+0xc2>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8019a22:	68bb      	ldr	r3, [r7, #8]
 8019a24:	4a5e      	ldr	r2, [pc, #376]	; (8019ba0 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 8019a26:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8019a28:	4b5b      	ldr	r3, [pc, #364]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a2a:	689b      	ldr	r3, [r3, #8]
 8019a2c:	f003 030f 	and.w	r3, r3, #15
 8019a30:	4a59      	ldr	r2, [pc, #356]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a32:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8019a34:	4b58      	ldr	r3, [pc, #352]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a36:	695b      	ldr	r3, [r3, #20]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d005      	beq.n	8019a48 <JPEG_GetDecodeColorConvertFunc+0xb4>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8019a3c:	4b56      	ldr	r3, [pc, #344]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a3e:	695b      	ldr	r3, [r3, #20]
 8019a40:	f1c3 0310 	rsb	r3, r3, #16
 8019a44:	4a54      	ldr	r2, [pc, #336]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a46:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8019a48:	4b53      	ldr	r3, [pc, #332]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a4a:	2210      	movs	r2, #16
 8019a4c:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8019a4e:	4b52      	ldr	r3, [pc, #328]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a50:	2208      	movs	r2, #8
 8019a52:	621a      	str	r2, [r3, #32]
 8019a54:	e057      	b.n	8019b06 <JPEG_GetDecodeColorConvertFunc+0x172>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8019a56:	68bb      	ldr	r3, [r7, #8]
 8019a58:	4a52      	ldr	r2, [pc, #328]	; (8019ba4 <JPEG_GetDecodeColorConvertFunc+0x210>)
 8019a5a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8019a5c:	4b4e      	ldr	r3, [pc, #312]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a5e:	689b      	ldr	r3, [r3, #8]
 8019a60:	f003 0307 	and.w	r3, r3, #7
 8019a64:	4a4c      	ldr	r2, [pc, #304]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a66:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8019a68:	4b4b      	ldr	r3, [pc, #300]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a6a:	695b      	ldr	r3, [r3, #20]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d005      	beq.n	8019a7c <JPEG_GetDecodeColorConvertFunc+0xe8>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019a70:	4b49      	ldr	r3, [pc, #292]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a72:	695b      	ldr	r3, [r3, #20]
 8019a74:	f1c3 0308 	rsb	r3, r3, #8
 8019a78:	4a47      	ldr	r2, [pc, #284]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a7a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8019a7c:	4b46      	ldr	r3, [pc, #280]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a7e:	2208      	movs	r2, #8
 8019a80:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8019a82:	4b45      	ldr	r3, [pc, #276]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a84:	2208      	movs	r2, #8
 8019a86:	621a      	str	r2, [r3, #32]
 8019a88:	e03d      	b.n	8019b06 <JPEG_GetDecodeColorConvertFunc+0x172>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8019a8a:	4b43      	ldr	r3, [pc, #268]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d119      	bne.n	8019ac6 <JPEG_GetDecodeColorConvertFunc+0x132>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8019a92:	68bb      	ldr	r3, [r7, #8]
 8019a94:	4a44      	ldr	r2, [pc, #272]	; (8019ba8 <JPEG_GetDecodeColorConvertFunc+0x214>)
 8019a96:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8019a98:	4b3f      	ldr	r3, [pc, #252]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019a9a:	689b      	ldr	r3, [r3, #8]
 8019a9c:	f003 0307 	and.w	r3, r3, #7
 8019aa0:	4a3d      	ldr	r2, [pc, #244]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019aa2:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8019aa4:	4b3c      	ldr	r3, [pc, #240]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019aa6:	695b      	ldr	r3, [r3, #20]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d005      	beq.n	8019ab8 <JPEG_GetDecodeColorConvertFunc+0x124>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019aac:	4b3a      	ldr	r3, [pc, #232]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019aae:	695b      	ldr	r3, [r3, #20]
 8019ab0:	f1c3 0308 	rsb	r3, r3, #8
 8019ab4:	4a38      	ldr	r2, [pc, #224]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ab6:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8019ab8:	4b37      	ldr	r3, [pc, #220]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019aba:	2208      	movs	r2, #8
 8019abc:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8019abe:	4b36      	ldr	r3, [pc, #216]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ac0:	2208      	movs	r2, #8
 8019ac2:	621a      	str	r2, [r3, #32]
 8019ac4:	e01f      	b.n	8019b06 <JPEG_GetDecodeColorConvertFunc+0x172>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8019ac6:	4b34      	ldr	r3, [pc, #208]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	2b30      	cmp	r3, #48	; 0x30
 8019acc:	d119      	bne.n	8019b02 <JPEG_GetDecodeColorConvertFunc+0x16e>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8019ace:	68bb      	ldr	r3, [r7, #8]
 8019ad0:	4a36      	ldr	r2, [pc, #216]	; (8019bac <JPEG_GetDecodeColorConvertFunc+0x218>)
 8019ad2:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8019ad4:	4b30      	ldr	r3, [pc, #192]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ad6:	689b      	ldr	r3, [r3, #8]
 8019ad8:	f003 0307 	and.w	r3, r3, #7
 8019adc:	4a2e      	ldr	r2, [pc, #184]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ade:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8019ae0:	4b2d      	ldr	r3, [pc, #180]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019ae2:	695b      	ldr	r3, [r3, #20]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d005      	beq.n	8019af4 <JPEG_GetDecodeColorConvertFunc+0x160>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8019ae8:	4b2b      	ldr	r3, [pc, #172]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019aea:	695b      	ldr	r3, [r3, #20]
 8019aec:	f1c3 0308 	rsb	r3, r3, #8
 8019af0:	4a29      	ldr	r2, [pc, #164]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019af2:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8019af4:	4b28      	ldr	r3, [pc, #160]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019af6:	2208      	movs	r2, #8
 8019af8:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8019afa:	4b27      	ldr	r3, [pc, #156]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019afc:	2208      	movs	r2, #8
 8019afe:	621a      	str	r2, [r3, #32]
 8019b00:	e001      	b.n	8019b06 <JPEG_GetDecodeColorConvertFunc+0x172>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 8019b02:	2301      	movs	r3, #1
 8019b04:	e042      	b.n	8019b8c <JPEG_GetDecodeColorConvertFunc+0x1f8>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8019b06:	4b24      	ldr	r3, [pc, #144]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b08:	689a      	ldr	r2, [r3, #8]
 8019b0a:	4b23      	ldr	r3, [pc, #140]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b0c:	695b      	ldr	r3, [r3, #20]
 8019b0e:	4413      	add	r3, r2
 8019b10:	4a21      	ldr	r2, [pc, #132]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b12:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8019b14:	4b20      	ldr	r3, [pc, #128]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b16:	689a      	ldr	r2, [r3, #8]
 8019b18:	4613      	mov	r3, r2
 8019b1a:	005b      	lsls	r3, r3, #1
 8019b1c:	4413      	add	r3, r2
 8019b1e:	4a1e      	ldr	r2, [pc, #120]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b20:	6293      	str	r3, [r2, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8019b22:	4b1d      	ldr	r3, [pc, #116]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b24:	689a      	ldr	r2, [r3, #8]
 8019b26:	4b1c      	ldr	r3, [pc, #112]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b28:	69db      	ldr	r3, [r3, #28]
 8019b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b2e:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8019b30:	4b19      	ldr	r3, [pc, #100]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b32:	689b      	ldr	r3, [r3, #8]
 8019b34:	4a18      	ldr	r2, [pc, #96]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b36:	69d2      	ldr	r2, [r2, #28]
 8019b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b3c:	fb01 f202 	mul.w	r2, r1, r2
 8019b40:	1a9b      	subs	r3, r3, r2
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d002      	beq.n	8019b4c <JPEG_GetDecodeColorConvertFunc+0x1b8>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8019b46:	697b      	ldr	r3, [r7, #20]
 8019b48:	3301      	adds	r3, #1
 8019b4a:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8019b4c:	4b12      	ldr	r3, [pc, #72]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b4e:	68da      	ldr	r2, [r3, #12]
 8019b50:	4b11      	ldr	r3, [pc, #68]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b52:	6a1b      	ldr	r3, [r3, #32]
 8019b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b58:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8019b5a:	4b0f      	ldr	r3, [pc, #60]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b5c:	68db      	ldr	r3, [r3, #12]
 8019b5e:	4a0e      	ldr	r2, [pc, #56]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b60:	6a12      	ldr	r2, [r2, #32]
 8019b62:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b66:	fb01 f202 	mul.w	r2, r1, r2
 8019b6a:	1a9b      	subs	r3, r3, r2
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d002      	beq.n	8019b76 <JPEG_GetDecodeColorConvertFunc+0x1e2>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8019b70:	693b      	ldr	r3, [r7, #16]
 8019b72:	3301      	adds	r3, #1
 8019b74:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8019b76:	697b      	ldr	r3, [r7, #20]
 8019b78:	693a      	ldr	r2, [r7, #16]
 8019b7a:	fb02 f303 	mul.w	r3, r2, r3
 8019b7e:	4a06      	ldr	r2, [pc, #24]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b80:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8019b82:	4b05      	ldr	r3, [pc, #20]	; (8019b98 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8019b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8019b8a:	2300      	movs	r3, #0
}
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	371c      	adds	r7, #28
 8019b90:	46bd      	mov	sp, r7
 8019b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b96:	4770      	bx	lr
 8019b98:	24026f20 	.word	0x24026f20
 8019b9c:	0801915d 	.word	0x0801915d
 8019ba0:	080193f5 	.word	0x080193f5
 8019ba4:	080195d1 	.word	0x080195d1
 8019ba8:	08019751 	.word	0x08019751
 8019bac:	08019841 	.word	0x08019841

08019bb0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8019bb0:	8880      	ldrh	r0, [r0, #4]
 8019bb2:	4770      	bx	lr

08019bb4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8019bb4:	b570      	push	{r4, r5, r6, lr}
 8019bb6:	6803      	ldr	r3, [r0, #0]
 8019bb8:	460c      	mov	r4, r1
 8019bba:	2100      	movs	r1, #0
 8019bbc:	4605      	mov	r5, r0
 8019bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bc0:	4798      	blx	r3
 8019bc2:	4606      	mov	r6, r0
 8019bc4:	682b      	ldr	r3, [r5, #0]
 8019bc6:	4628      	mov	r0, r5
 8019bc8:	1ba4      	subs	r4, r4, r6
 8019bca:	6a1b      	ldr	r3, [r3, #32]
 8019bcc:	b2a4      	uxth	r4, r4
 8019bce:	4798      	blx	r3
 8019bd0:	fbb4 f0f0 	udiv	r0, r4, r0
 8019bd4:	bd70      	pop	{r4, r5, r6, pc}

08019bd6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	8083      	strh	r3, [r0, #4]
 8019bda:	4770      	bx	lr

08019bdc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8019bdc:	b510      	push	{r4, lr}
 8019bde:	6803      	ldr	r3, [r0, #0]
 8019be0:	4604      	mov	r4, r0
 8019be2:	8881      	ldrh	r1, [r0, #4]
 8019be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019be6:	4798      	blx	r3
 8019be8:	88a3      	ldrh	r3, [r4, #4]
 8019bea:	3301      	adds	r3, #1
 8019bec:	80a3      	strh	r3, [r4, #4]
 8019bee:	bd10      	pop	{r4, pc}

08019bf0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8019bf0:	6803      	ldr	r3, [r0, #0]
 8019bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bf4:	4718      	bx	r3

08019bf6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8019bf6:	4770      	bx	lr

08019bf8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8019bf8:	4a02      	ldr	r2, [pc, #8]	; (8019c04 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8019bfa:	6002      	str	r2, [r0, #0]
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	8082      	strh	r2, [r0, #4]
 8019c00:	4770      	bx	lr
 8019c02:	bf00      	nop
 8019c04:	0802f318 	.word	0x0802f318

08019c08 <_ZN8touchgfx9Container13getFirstChildEv>:
 8019c08:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019c0a:	4770      	bx	lr

08019c0c <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 8019c0c:	b510      	push	{r4, lr}
 8019c0e:	6803      	ldr	r3, [r0, #0]
 8019c10:	4604      	mov	r4, r0
 8019c12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8019c16:	4798      	blx	r3
 8019c18:	b110      	cbz	r0, 8019c20 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 8019c1a:	4620      	mov	r0, r4
 8019c1c:	f7ea fab4 	bl	8004188 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8019c20:	bd10      	pop	{r4, pc}

08019c22 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8019c22:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8019c26:	4770      	bx	lr

08019c28 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8019c28:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8019c2c:	4770      	bx	lr

08019c2e <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8019c2e:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8019c32:	4770      	bx	lr

08019c34 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8019c34:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8019c38:	4770      	bx	lr

08019c3a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8019c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c3c:	461e      	mov	r6, r3
 8019c3e:	6803      	ldr	r3, [r0, #0]
 8019c40:	460f      	mov	r7, r1
 8019c42:	4604      	mov	r4, r0
 8019c44:	4615      	mov	r5, r2
 8019c46:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8019c4a:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8019c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019c52:	4798      	blx	r3
 8019c54:	b93e      	cbnz	r6, 8019c66 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 8019c56:	1bed      	subs	r5, r5, r7
 8019c58:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8019c5c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019c60:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 8019c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c66:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 8019c6a:	e7f7      	b.n	8019c5c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

08019c6c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8019c6c:	b510      	push	{r4, lr}
 8019c6e:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8019c72:	600c      	str	r4, [r1, #0]
 8019c74:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8019c78:	6011      	str	r1, [r2, #0]
 8019c7a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8019c7e:	801a      	strh	r2, [r3, #0]
 8019c80:	9b02      	ldr	r3, [sp, #8]
 8019c82:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8019c86:	801a      	strh	r2, [r3, #0]
 8019c88:	bd10      	pop	{r4, pc}

08019c8a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8019c8a:	b510      	push	{r4, lr}
 8019c8c:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8019c90:	600c      	str	r4, [r1, #0]
 8019c92:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8019c96:	6011      	str	r1, [r2, #0]
 8019c98:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8019c9c:	801a      	strh	r2, [r3, #0]
 8019c9e:	bd10      	pop	{r4, pc}

08019ca0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8019ca0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8019ca4:	600b      	str	r3, [r1, #0]
 8019ca6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8019caa:	6013      	str	r3, [r2, #0]
 8019cac:	4770      	bx	lr

08019cae <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8019cae:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8019cb2:	4770      	bx	lr

08019cb4 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8019cb4:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8019cb8:	4770      	bx	lr

08019cba <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8019cba:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8019cbe:	4770      	bx	lr

08019cc0 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8019cc0:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8019cc4:	4770      	bx	lr

08019cc6 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8019cc6:	b570      	push	{r4, r5, r6, lr}
 8019cc8:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8019ccc:	4604      	mov	r4, r0
 8019cce:	4616      	mov	r6, r2
 8019cd0:	428d      	cmp	r5, r1
 8019cd2:	bfb8      	it	lt
 8019cd4:	460d      	movlt	r5, r1
 8019cd6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8019cda:	428d      	cmp	r5, r1
 8019cdc:	bfa8      	it	ge
 8019cde:	460d      	movge	r5, r1
 8019ce0:	b99a      	cbnz	r2, 8019d0a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8019ce2:	6803      	ldr	r3, [r0, #0]
 8019ce4:	4629      	mov	r1, r5
 8019ce6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019cea:	4798      	blx	r3
 8019cec:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8019cf0:	b368      	cbz	r0, 8019d4e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8019cf2:	6803      	ldr	r3, [r0, #0]
 8019cf4:	68db      	ldr	r3, [r3, #12]
 8019cf6:	4798      	blx	r3
 8019cf8:	b348      	cbz	r0, 8019d4e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8019cfa:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8019cfe:	4621      	mov	r1, r4
 8019d00:	6803      	ldr	r3, [r0, #0]
 8019d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d06:	689b      	ldr	r3, [r3, #8]
 8019d08:	4718      	bx	r3
 8019d0a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	dd08      	ble.n	8019d24 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 8019d12:	f005 fa2b 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 8019d16:	4621      	mov	r1, r4
 8019d18:	3004      	adds	r0, #4
 8019d1a:	f005 fa4c 	bl	801f1b6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8019d1e:	2300      	movs	r3, #0
 8019d20:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8019d24:	6823      	ldr	r3, [r4, #0]
 8019d26:	4620      	mov	r0, r4
 8019d28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019d2c:	4798      	blx	r3
 8019d2e:	2300      	movs	r3, #0
 8019d30:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8019d34:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8019d38:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8019d3c:	f005 fa16 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 8019d40:	4621      	mov	r1, r4
 8019d42:	3004      	adds	r0, #4
 8019d44:	f005 fae0 	bl	801f308 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8019d48:	2301      	movs	r3, #1
 8019d4a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8019d4e:	bd70      	pop	{r4, r5, r6, pc}

08019d50 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8019d50:	b510      	push	{r4, lr}
 8019d52:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8019d56:	4604      	mov	r4, r0
 8019d58:	4299      	cmp	r1, r3
 8019d5a:	bfb8      	it	lt
 8019d5c:	4619      	movlt	r1, r3
 8019d5e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8019d62:	4299      	cmp	r1, r3
 8019d64:	bfa8      	it	ge
 8019d66:	4619      	movge	r1, r3
 8019d68:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8019d6c:	428b      	cmp	r3, r1
 8019d6e:	d010      	beq.n	8019d92 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8019d70:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8019d74:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8019d78:	b158      	cbz	r0, 8019d92 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8019d7a:	6803      	ldr	r3, [r0, #0]
 8019d7c:	68db      	ldr	r3, [r3, #12]
 8019d7e:	4798      	blx	r3
 8019d80:	b138      	cbz	r0, 8019d92 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8019d82:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8019d86:	4621      	mov	r1, r4
 8019d88:	6803      	ldr	r3, [r0, #0]
 8019d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d8e:	689b      	ldr	r3, [r3, #8]
 8019d90:	4718      	bx	r3
 8019d92:	bd10      	pop	{r4, pc}

08019d94 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8019d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019d96:	4604      	mov	r4, r0
 8019d98:	460d      	mov	r5, r1
 8019d9a:	b1a9      	cbz	r1, 8019dc8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8019d9c:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8019da0:	ab01      	add	r3, sp, #4
 8019da2:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8019da6:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8019daa:	1b89      	subs	r1, r1, r6
 8019dac:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8019db0:	1a12      	subs	r2, r2, r0
 8019db2:	1a38      	subs	r0, r7, r0
 8019db4:	f006 fc33 	bl	802061e <_ZN8touchgfx6muldivElllRl>
 8019db8:	4629      	mov	r1, r5
 8019dba:	ab01      	add	r3, sp, #4
 8019dbc:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8019dc0:	4430      	add	r0, r6
 8019dc2:	f006 fc2c 	bl	802061e <_ZN8touchgfx6muldivElllRl>
 8019dc6:	b285      	uxth	r5, r0
 8019dc8:	4628      	mov	r0, r5
 8019dca:	b003      	add	sp, #12
 8019dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019dce <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8019dce:	b570      	push	{r4, r5, r6, lr}
 8019dd0:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8019dd4:	4604      	mov	r4, r0
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d035      	beq.n	8019e46 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8019dda:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8019dde:	2100      	movs	r1, #0
 8019de0:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8019de4:	3001      	adds	r0, #1
 8019de6:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8019dea:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8019dee:	b280      	uxth	r0, r0
 8019df0:	1ad2      	subs	r2, r2, r3
 8019df2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8019df6:	b212      	sxth	r2, r2
 8019df8:	47a8      	blx	r5
 8019dfa:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8019dfe:	6823      	ldr	r3, [r4, #0]
 8019e00:	4401      	add	r1, r0
 8019e02:	4620      	mov	r0, r4
 8019e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019e08:	4798      	blx	r3
 8019e0a:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8019e0e:	429a      	cmp	r2, r3
 8019e10:	db19      	blt.n	8019e46 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8019e12:	2500      	movs	r5, #0
 8019e14:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8019e18:	f005 f9a8 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 8019e1c:	4621      	mov	r1, r4
 8019e1e:	3004      	adds	r0, #4
 8019e20:	f005 f9c9 	bl	801f1b6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8019e24:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8019e28:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8019e2c:	b158      	cbz	r0, 8019e46 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8019e2e:	6803      	ldr	r3, [r0, #0]
 8019e30:	68db      	ldr	r3, [r3, #12]
 8019e32:	4798      	blx	r3
 8019e34:	b138      	cbz	r0, 8019e46 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8019e36:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8019e3a:	4621      	mov	r1, r4
 8019e3c:	6803      	ldr	r3, [r0, #0]
 8019e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e42:	689b      	ldr	r3, [r3, #8]
 8019e44:	4718      	bx	r3
 8019e46:	bd70      	pop	{r4, r5, r6, pc}

08019e48 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8019e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e4c:	4604      	mov	r4, r0
 8019e4e:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8019e52:	4698      	mov	r8, r3
 8019e54:	460e      	mov	r6, r1
 8019e56:	4615      	mov	r5, r2
 8019e58:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8019e5c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8019e60:	4619      	mov	r1, r3
 8019e62:	463a      	mov	r2, r7
 8019e64:	3058      	adds	r0, #88	; 0x58
 8019e66:	f7ed ff3c 	bl	8007ce2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019e6a:	4446      	add	r6, r8
 8019e6c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8019e70:	443d      	add	r5, r7
 8019e72:	42b3      	cmp	r3, r6
 8019e74:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8019e78:	bfb8      	it	lt
 8019e7a:	8126      	strhlt	r6, [r4, #8]
 8019e7c:	42ab      	cmp	r3, r5
 8019e7e:	bfb8      	it	lt
 8019e80:	8165      	strhlt	r5, [r4, #10]
 8019e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e86 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8019e86:	b510      	push	{r4, lr}
 8019e88:	4604      	mov	r4, r0
 8019e8a:	302c      	adds	r0, #44	; 0x2c
 8019e8c:	f003 fa36 	bl	801d2fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8019e90:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8019e94:	4620      	mov	r0, r4
 8019e96:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8019e9a:	f7ed ff22 	bl	8007ce2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019e9e:	bd10      	pop	{r4, pc}

08019ea0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8019ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019ea2:	4604      	mov	r4, r0
 8019ea4:	2500      	movs	r5, #0
 8019ea6:	f7ed fead 	bl	8007c04 <_ZN8touchgfx8DrawableC1Ev>
 8019eaa:	4b24      	ldr	r3, [pc, #144]	; (8019f3c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8019eac:	4626      	mov	r6, r4
 8019eae:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8019eb2:	2226      	movs	r2, #38	; 0x26
 8019eb4:	4629      	mov	r1, r5
 8019eb6:	62a5      	str	r5, [r4, #40]	; 0x28
 8019eb8:	f846 3b2c 	str.w	r3, [r6], #44
 8019ebc:	4630      	mov	r0, r6
 8019ebe:	f8ad 7004 	strh.w	r7, [sp, #4]
 8019ec2:	f010 ff51 	bl	802ad68 <memset>
 8019ec6:	4630      	mov	r0, r6
 8019ec8:	f7ed fe9c 	bl	8007c04 <_ZN8touchgfx8DrawableC1Ev>
 8019ecc:	a902      	add	r1, sp, #8
 8019ece:	4b1c      	ldr	r3, [pc, #112]	; (8019f40 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8019ed0:	4630      	mov	r0, r6
 8019ed2:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8019ed6:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8019eda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019edc:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8019ee0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019ee4:	f003 fa0a 	bl	801d2fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8019ee8:	4638      	mov	r0, r7
 8019eea:	f7ed fe8b 	bl	8007c04 <_ZN8touchgfx8DrawableC1Ev>
 8019eee:	4b15      	ldr	r3, [pc, #84]	; (8019f44 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8019ef0:	4629      	mov	r1, r5
 8019ef2:	4630      	mov	r0, r6
 8019ef4:	65a3      	str	r3, [r4, #88]	; 0x58
 8019ef6:	2364      	movs	r3, #100	; 0x64
 8019ef8:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8019efc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8019f00:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8019f04:	4b10      	ldr	r3, [pc, #64]	; (8019f48 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8019f06:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8019f0a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8019f0e:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8019f12:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8019f16:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8019f1a:	f7ea f96d 	bl	80041f8 <_ZN8touchgfx8Drawable4setXEs>
 8019f1e:	4629      	mov	r1, r5
 8019f20:	4630      	mov	r0, r6
 8019f22:	f7ea f978 	bl	8004216 <_ZN8touchgfx8Drawable4setYEs>
 8019f26:	4631      	mov	r1, r6
 8019f28:	4620      	mov	r0, r4
 8019f2a:	f000 f819 	bl	8019f60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8019f2e:	4620      	mov	r0, r4
 8019f30:	4639      	mov	r1, r7
 8019f32:	f000 f815 	bl	8019f60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8019f36:	4620      	mov	r0, r4
 8019f38:	b003      	add	sp, #12
 8019f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f3c:	0802f34c 	.word	0x0802f34c
 8019f40:	0802fc18 	.word	0x0802fc18
 8019f44:	0802f420 	.word	0x0802f420
 8019f48:	08020c81 	.word	0x08020c81

08019f4c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8019f4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019f4e:	2000      	movs	r0, #0
 8019f50:	b12b      	cbz	r3, 8019f5e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019f52:	b920      	cbnz	r0, 8019f5e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019f54:	1a5a      	subs	r2, r3, r1
 8019f56:	699b      	ldr	r3, [r3, #24]
 8019f58:	4250      	negs	r0, r2
 8019f5a:	4150      	adcs	r0, r2
 8019f5c:	e7f8      	b.n	8019f50 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8019f5e:	4770      	bx	lr

08019f60 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8019f60:	2300      	movs	r3, #0
 8019f62:	6148      	str	r0, [r1, #20]
 8019f64:	618b      	str	r3, [r1, #24]
 8019f66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019f68:	b913      	cbnz	r3, 8019f70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8019f6a:	6281      	str	r1, [r0, #40]	; 0x28
 8019f6c:	4770      	bx	lr
 8019f6e:	4613      	mov	r3, r2
 8019f70:	699a      	ldr	r2, [r3, #24]
 8019f72:	2a00      	cmp	r2, #0
 8019f74:	d1fb      	bne.n	8019f6e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8019f76:	6199      	str	r1, [r3, #24]
 8019f78:	4770      	bx	lr

08019f7a <_ZN8touchgfx9Container9removeAllEv>:
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019f7e:	b123      	cbz	r3, 8019f8a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8019f80:	6999      	ldr	r1, [r3, #24]
 8019f82:	6281      	str	r1, [r0, #40]	; 0x28
 8019f84:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8019f88:	e7f8      	b.n	8019f7c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8019f8a:	4770      	bx	lr

08019f8c <_ZN8touchgfx9Container6unlinkEv>:
 8019f8c:	2300      	movs	r3, #0
 8019f8e:	6283      	str	r3, [r0, #40]	; 0x28
 8019f90:	4770      	bx	lr

08019f92 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8019f92:	2200      	movs	r2, #0
 8019f94:	8002      	strh	r2, [r0, #0]
 8019f96:	8042      	strh	r2, [r0, #2]
 8019f98:	8082      	strh	r2, [r0, #4]
 8019f9a:	80c2      	strh	r2, [r0, #6]
 8019f9c:	4770      	bx	lr

08019f9e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8019f9e:	b570      	push	{r4, r5, r6, lr}
 8019fa0:	460d      	mov	r5, r1
 8019fa2:	4616      	mov	r6, r2
 8019fa4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019fa6:	b13c      	cbz	r4, 8019fb8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8019fa8:	6823      	ldr	r3, [r4, #0]
 8019faa:	4620      	mov	r0, r4
 8019fac:	4632      	mov	r2, r6
 8019fae:	4629      	mov	r1, r5
 8019fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fb2:	4798      	blx	r3
 8019fb4:	69a4      	ldr	r4, [r4, #24]
 8019fb6:	e7f6      	b.n	8019fa6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8019fb8:	bd70      	pop	{r4, r5, r6, pc}

08019fba <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8019fba:	b538      	push	{r3, r4, r5, lr}
 8019fbc:	460d      	mov	r5, r1
 8019fbe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019fc0:	b134      	cbz	r4, 8019fd0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8019fc2:	682b      	ldr	r3, [r5, #0]
 8019fc4:	4621      	mov	r1, r4
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	689b      	ldr	r3, [r3, #8]
 8019fca:	4798      	blx	r3
 8019fcc:	69a4      	ldr	r4, [r4, #24]
 8019fce:	e7f7      	b.n	8019fc0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8019fd0:	bd38      	pop	{r3, r4, r5, pc}

08019fd2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8019fd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019fd4:	b19b      	cbz	r3, 8019ffe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8019fd6:	428b      	cmp	r3, r1
 8019fd8:	d109      	bne.n	8019fee <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8019fda:	699a      	ldr	r2, [r3, #24]
 8019fdc:	2100      	movs	r1, #0
 8019fde:	6159      	str	r1, [r3, #20]
 8019fe0:	6282      	str	r2, [r0, #40]	; 0x28
 8019fe2:	b902      	cbnz	r2, 8019fe6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8019fe4:	4770      	bx	lr
 8019fe6:	6199      	str	r1, [r3, #24]
 8019fe8:	4770      	bx	lr
 8019fea:	4613      	mov	r3, r2
 8019fec:	b13a      	cbz	r2, 8019ffe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8019fee:	699a      	ldr	r2, [r3, #24]
 8019ff0:	428a      	cmp	r2, r1
 8019ff2:	d1fa      	bne.n	8019fea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8019ff4:	698a      	ldr	r2, [r1, #24]
 8019ff6:	619a      	str	r2, [r3, #24]
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8019ffe:	4770      	bx	lr

0801a000 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801a000:	b410      	push	{r4}
 801a002:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a004:	4604      	mov	r4, r0
 801a006:	b92b      	cbnz	r3, 801a014 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801a008:	6803      	ldr	r3, [r0, #0]
 801a00a:	4611      	mov	r1, r2
 801a00c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a012:	4718      	bx	r3
 801a014:	b941      	cbnz	r1, 801a028 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801a016:	6193      	str	r3, [r2, #24]
 801a018:	6282      	str	r2, [r0, #40]	; 0x28
 801a01a:	6154      	str	r4, [r2, #20]
 801a01c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a020:	4770      	bx	lr
 801a022:	4603      	mov	r3, r0
 801a024:	2800      	cmp	r0, #0
 801a026:	d0f9      	beq.n	801a01c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801a028:	4299      	cmp	r1, r3
 801a02a:	6998      	ldr	r0, [r3, #24]
 801a02c:	d1f9      	bne.n	801a022 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801a02e:	6190      	str	r0, [r2, #24]
 801a030:	618a      	str	r2, [r1, #24]
 801a032:	e7f2      	b.n	801a01a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0801a034 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801a034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a038:	461f      	mov	r7, r3
 801a03a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801a03e:	460d      	mov	r5, r1
 801a040:	4616      	mov	r6, r2
 801a042:	b103      	cbz	r3, 801a046 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801a044:	6038      	str	r0, [r7, #0]
 801a046:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a048:	b314      	cbz	r4, 801a090 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801a04a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a04e:	b1eb      	cbz	r3, 801a08c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a050:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a054:	428d      	cmp	r5, r1
 801a056:	db19      	blt.n	801a08c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a058:	b289      	uxth	r1, r1
 801a05a:	8923      	ldrh	r3, [r4, #8]
 801a05c:	440b      	add	r3, r1
 801a05e:	b21b      	sxth	r3, r3
 801a060:	429d      	cmp	r5, r3
 801a062:	da13      	bge.n	801a08c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a064:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a068:	4296      	cmp	r6, r2
 801a06a:	db0f      	blt.n	801a08c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a06c:	b292      	uxth	r2, r2
 801a06e:	8963      	ldrh	r3, [r4, #10]
 801a070:	4413      	add	r3, r2
 801a072:	b21b      	sxth	r3, r3
 801a074:	429e      	cmp	r6, r3
 801a076:	da09      	bge.n	801a08c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a078:	6823      	ldr	r3, [r4, #0]
 801a07a:	1ab2      	subs	r2, r6, r2
 801a07c:	1a69      	subs	r1, r5, r1
 801a07e:	4620      	mov	r0, r4
 801a080:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 801a084:	b212      	sxth	r2, r2
 801a086:	463b      	mov	r3, r7
 801a088:	b209      	sxth	r1, r1
 801a08a:	47c0      	blx	r8
 801a08c:	69a4      	ldr	r4, [r4, #24]
 801a08e:	e7db      	b.n	801a048 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801a090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a094 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 801a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a098:	4c6d      	ldr	r4, [pc, #436]	; (801a250 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801a09a:	b0a1      	sub	sp, #132	; 0x84
 801a09c:	4606      	mov	r6, r0
 801a09e:	6824      	ldr	r4, [r4, #0]
 801a0a0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801a0a2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 801a0a6:	2400      	movs	r4, #0
 801a0a8:	9303      	str	r3, [sp, #12]
 801a0aa:	802c      	strh	r4, [r5, #0]
 801a0ac:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801a0ae:	802c      	strh	r4, [r5, #0]
 801a0b0:	601c      	str	r4, [r3, #0]
 801a0b2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801a0b6:	f7ff ffbd 	bl	801a034 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a0ba:	f1b9 0f03 	cmp.w	r9, #3
 801a0be:	f340 80c1 	ble.w	801a244 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801a0c2:	4631      	mov	r1, r6
 801a0c4:	a80c      	add	r0, sp, #48	; 0x30
 801a0c6:	f006 f97b 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0ca:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a0ce:	9306      	str	r3, [sp, #24]
 801a0d0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a0d4:	9307      	str	r3, [sp, #28]
 801a0d6:	9b03      	ldr	r3, [sp, #12]
 801a0d8:	f8d3 a000 	ldr.w	sl, [r3]
 801a0dc:	f1ba 0f00 	cmp.w	sl, #0
 801a0e0:	f000 80b3 	beq.w	801a24a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 801a0e4:	4651      	mov	r1, sl
 801a0e6:	a810      	add	r0, sp, #64	; 0x40
 801a0e8:	f006 f96a 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0ec:	2002      	movs	r0, #2
 801a0ee:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801a0f2:	9b01      	ldr	r3, [sp, #4]
 801a0f4:	9a06      	ldr	r2, [sp, #24]
 801a0f6:	fb91 f1f0 	sdiv	r1, r1, r0
 801a0fa:	189d      	adds	r5, r3, r2
 801a0fc:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801a100:	9a07      	ldr	r2, [sp, #28]
 801a102:	4419      	add	r1, r3
 801a104:	9b02      	ldr	r3, [sp, #8]
 801a106:	4413      	add	r3, r2
 801a108:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801a10c:	1a6d      	subs	r5, r5, r1
 801a10e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a112:	fb92 f2f0 	sdiv	r2, r2, r0
 801a116:	440a      	add	r2, r1
 801a118:	1a9b      	subs	r3, r3, r2
 801a11a:	435b      	muls	r3, r3
 801a11c:	fb05 3505 	mla	r5, r5, r5, r3
 801a120:	4f4c      	ldr	r7, [pc, #304]	; (801a254 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801a122:	ac10      	add	r4, sp, #64	; 0x40
 801a124:	f1b9 0f0c 	cmp.w	r9, #12
 801a128:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a12a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a12c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a12e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a130:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a134:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801a138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a13c:	f04f 0303 	mov.w	r3, #3
 801a140:	bfd8      	it	le
 801a142:	f109 32ff 	addle.w	r2, r9, #4294967295
 801a146:	f04f 0400 	mov.w	r4, #0
 801a14a:	f8cd 9000 	str.w	r9, [sp]
 801a14e:	bfcc      	ite	gt
 801a150:	4698      	movgt	r8, r3
 801a152:	fb92 f8f3 	sdivle	r8, r2, r3
 801a156:	1c63      	adds	r3, r4, #1
 801a158:	aa10      	add	r2, sp, #64	; 0x40
 801a15a:	f004 0401 	and.w	r4, r4, #1
 801a15e:	f04f 0b00 	mov.w	fp, #0
 801a162:	9308      	str	r3, [sp, #32]
 801a164:	9b00      	ldr	r3, [sp, #0]
 801a166:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801a16a:	fb93 f3f8 	sdiv	r3, r3, r8
 801a16e:	3404      	adds	r4, #4
 801a170:	b29b      	uxth	r3, r3
 801a172:	9304      	str	r3, [sp, #16]
 801a174:	9a04      	ldr	r2, [sp, #16]
 801a176:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a17a:	fb13 f302 	smulbb	r3, r3, r2
 801a17e:	9a01      	ldr	r2, [sp, #4]
 801a180:	b29b      	uxth	r3, r3
 801a182:	1899      	adds	r1, r3, r2
 801a184:	9305      	str	r3, [sp, #20]
 801a186:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801a18a:	b209      	sxth	r1, r1
 801a18c:	4299      	cmp	r1, r3
 801a18e:	db4d      	blt.n	801a22c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a190:	8932      	ldrh	r2, [r6, #8]
 801a192:	4413      	add	r3, r2
 801a194:	b21b      	sxth	r3, r3
 801a196:	4299      	cmp	r1, r3
 801a198:	da48      	bge.n	801a22c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a19a:	9b04      	ldr	r3, [sp, #16]
 801a19c:	6827      	ldr	r7, [r4, #0]
 801a19e:	fb17 f703 	smulbb	r7, r7, r3
 801a1a2:	9b02      	ldr	r3, [sp, #8]
 801a1a4:	b2bf      	uxth	r7, r7
 801a1a6:	18fa      	adds	r2, r7, r3
 801a1a8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801a1ac:	b212      	sxth	r2, r2
 801a1ae:	429a      	cmp	r2, r3
 801a1b0:	db3c      	blt.n	801a22c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a1b2:	8970      	ldrh	r0, [r6, #10]
 801a1b4:	4403      	add	r3, r0
 801a1b6:	b21b      	sxth	r3, r3
 801a1b8:	429a      	cmp	r2, r3
 801a1ba:	da37      	bge.n	801a22c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a1bc:	2300      	movs	r3, #0
 801a1be:	4630      	mov	r0, r6
 801a1c0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a1c2:	ab0b      	add	r3, sp, #44	; 0x2c
 801a1c4:	f7ff ff36 	bl	801a034 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a1c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a1ca:	b37a      	cbz	r2, 801a22c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a1cc:	4552      	cmp	r2, sl
 801a1ce:	d02d      	beq.n	801a22c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801a1d0:	4611      	mov	r1, r2
 801a1d2:	a80e      	add	r0, sp, #56	; 0x38
 801a1d4:	9209      	str	r2, [sp, #36]	; 0x24
 801a1d6:	f006 f8f3 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1da:	f04f 0e02 	mov.w	lr, #2
 801a1de:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801a1e2:	9a06      	ldr	r2, [sp, #24]
 801a1e4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801a1e8:	9b01      	ldr	r3, [sp, #4]
 801a1ea:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801a1ee:	4413      	add	r3, r2
 801a1f0:	9a07      	ldr	r2, [sp, #28]
 801a1f2:	fb91 f1fe 	sdiv	r1, r1, lr
 801a1f6:	fb9c fcfe 	sdiv	ip, ip, lr
 801a1fa:	4401      	add	r1, r0
 801a1fc:	1a58      	subs	r0, r3, r1
 801a1fe:	9b02      	ldr	r3, [sp, #8]
 801a200:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801a204:	4413      	add	r3, r2
 801a206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a208:	448c      	add	ip, r1
 801a20a:	eba3 030c 	sub.w	r3, r3, ip
 801a20e:	435b      	muls	r3, r3
 801a210:	fb00 3300 	mla	r3, r0, r0, r3
 801a214:	42ab      	cmp	r3, r5
 801a216:	d208      	bcs.n	801a22a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 801a218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a21a:	461d      	mov	r5, r3
 801a21c:	9803      	ldr	r0, [sp, #12]
 801a21e:	6001      	str	r1, [r0, #0]
 801a220:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a222:	9805      	ldr	r0, [sp, #20]
 801a224:	8008      	strh	r0, [r1, #0]
 801a226:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a228:	800f      	strh	r7, [r1, #0]
 801a22a:	4692      	mov	sl, r2
 801a22c:	f10b 0b01 	add.w	fp, fp, #1
 801a230:	3408      	adds	r4, #8
 801a232:	f1bb 0f04 	cmp.w	fp, #4
 801a236:	d19d      	bne.n	801a174 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 801a238:	9b00      	ldr	r3, [sp, #0]
 801a23a:	9c08      	ldr	r4, [sp, #32]
 801a23c:	444b      	add	r3, r9
 801a23e:	4544      	cmp	r4, r8
 801a240:	9300      	str	r3, [sp, #0]
 801a242:	d188      	bne.n	801a156 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801a244:	b021      	add	sp, #132	; 0x84
 801a246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a24a:	f04f 35ff 	mov.w	r5, #4294967295
 801a24e:	e767      	b.n	801a120 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801a250:	24027f6c 	.word	0x24027f6c
 801a254:	0802dfd0 	.word	0x0802dfd0

0801a258 <_ZN8touchgfx4RectaNERKS0_>:
 801a258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a25c:	f9b1 7000 	ldrsh.w	r7, [r1]
 801a260:	888c      	ldrh	r4, [r1, #4]
 801a262:	f9b0 9000 	ldrsh.w	r9, [r0]
 801a266:	443c      	add	r4, r7
 801a268:	b2a4      	uxth	r4, r4
 801a26a:	fa0f f884 	sxth.w	r8, r4
 801a26e:	45c1      	cmp	r9, r8
 801a270:	da2f      	bge.n	801a2d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a272:	8882      	ldrh	r2, [r0, #4]
 801a274:	444a      	add	r2, r9
 801a276:	b292      	uxth	r2, r2
 801a278:	fa0f fe82 	sxth.w	lr, r2
 801a27c:	4577      	cmp	r7, lr
 801a27e:	da28      	bge.n	801a2d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a280:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801a284:	88cb      	ldrh	r3, [r1, #6]
 801a286:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801a28a:	442b      	add	r3, r5
 801a28c:	b21b      	sxth	r3, r3
 801a28e:	429e      	cmp	r6, r3
 801a290:	da1f      	bge.n	801a2d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a292:	88c3      	ldrh	r3, [r0, #6]
 801a294:	4433      	add	r3, r6
 801a296:	b29b      	uxth	r3, r3
 801a298:	fa0f fc83 	sxth.w	ip, r3
 801a29c:	4565      	cmp	r5, ip
 801a29e:	da18      	bge.n	801a2d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801a2a0:	454f      	cmp	r7, r9
 801a2a2:	bfb8      	it	lt
 801a2a4:	464f      	movlt	r7, r9
 801a2a6:	42b5      	cmp	r5, r6
 801a2a8:	bfb8      	it	lt
 801a2aa:	4635      	movlt	r5, r6
 801a2ac:	45f0      	cmp	r8, lr
 801a2ae:	bfd8      	it	le
 801a2b0:	4622      	movle	r2, r4
 801a2b2:	1bd2      	subs	r2, r2, r7
 801a2b4:	8082      	strh	r2, [r0, #4]
 801a2b6:	884a      	ldrh	r2, [r1, #2]
 801a2b8:	88c9      	ldrh	r1, [r1, #6]
 801a2ba:	8007      	strh	r7, [r0, #0]
 801a2bc:	440a      	add	r2, r1
 801a2be:	8045      	strh	r5, [r0, #2]
 801a2c0:	b292      	uxth	r2, r2
 801a2c2:	b211      	sxth	r1, r2
 801a2c4:	458c      	cmp	ip, r1
 801a2c6:	bfa8      	it	ge
 801a2c8:	4613      	movge	r3, r2
 801a2ca:	1b5b      	subs	r3, r3, r5
 801a2cc:	80c3      	strh	r3, [r0, #6]
 801a2ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	8003      	strh	r3, [r0, #0]
 801a2d6:	8043      	strh	r3, [r0, #2]
 801a2d8:	8083      	strh	r3, [r0, #4]
 801a2da:	80c3      	strh	r3, [r0, #6]
 801a2dc:	e7f7      	b.n	801a2ce <_ZN8touchgfx4RectaNERKS0_+0x76>

0801a2de <_ZNK8touchgfx4Rect7isEmptyEv>:
 801a2de:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	dd06      	ble.n	801a2f4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801a2e6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801a2ea:	2800      	cmp	r0, #0
 801a2ec:	bfcc      	ite	gt
 801a2ee:	2000      	movgt	r0, #0
 801a2f0:	2001      	movle	r0, #1
 801a2f2:	4770      	bx	lr
 801a2f4:	2001      	movs	r0, #1
 801a2f6:	4770      	bx	lr

0801a2f8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801a2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	4604      	mov	r4, r0
 801a300:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a302:	8003      	strh	r3, [r0, #0]
 801a304:	8043      	strh	r3, [r0, #2]
 801a306:	8083      	strh	r3, [r0, #4]
 801a308:	80c3      	strh	r3, [r0, #6]
 801a30a:	2d00      	cmp	r5, #0
 801a30c:	d040      	beq.n	801a390 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801a30e:	1d28      	adds	r0, r5, #4
 801a310:	f7ff ffe5 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a314:	b988      	cbnz	r0, 801a33a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801a316:	4620      	mov	r0, r4
 801a318:	f7ff ffe1 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a31c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801a320:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a324:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801a328:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801a32c:	b138      	cbz	r0, 801a33e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801a32e:	8022      	strh	r2, [r4, #0]
 801a330:	8063      	strh	r3, [r4, #2]
 801a332:	f8a4 e004 	strh.w	lr, [r4, #4]
 801a336:	f8a4 c006 	strh.w	ip, [r4, #6]
 801a33a:	69ad      	ldr	r5, [r5, #24]
 801a33c:	e7e5      	b.n	801a30a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801a33e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a342:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a346:	4290      	cmp	r0, r2
 801a348:	4607      	mov	r7, r0
 801a34a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801a34e:	460e      	mov	r6, r1
 801a350:	bfa8      	it	ge
 801a352:	4617      	movge	r7, r2
 801a354:	4299      	cmp	r1, r3
 801a356:	4472      	add	r2, lr
 801a358:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801a35c:	bfa8      	it	ge
 801a35e:	461e      	movge	r6, r3
 801a360:	4440      	add	r0, r8
 801a362:	4471      	add	r1, lr
 801a364:	4463      	add	r3, ip
 801a366:	b200      	sxth	r0, r0
 801a368:	8027      	strh	r7, [r4, #0]
 801a36a:	b212      	sxth	r2, r2
 801a36c:	8066      	strh	r6, [r4, #2]
 801a36e:	b209      	sxth	r1, r1
 801a370:	b21b      	sxth	r3, r3
 801a372:	4290      	cmp	r0, r2
 801a374:	bfac      	ite	ge
 801a376:	ebc7 0200 	rsbge	r2, r7, r0
 801a37a:	ebc7 0202 	rsblt	r2, r7, r2
 801a37e:	4299      	cmp	r1, r3
 801a380:	bfac      	ite	ge
 801a382:	ebc6 0301 	rsbge	r3, r6, r1
 801a386:	ebc6 0303 	rsblt	r3, r6, r3
 801a38a:	80a2      	strh	r2, [r4, #4]
 801a38c:	80e3      	strh	r3, [r4, #6]
 801a38e:	e7d4      	b.n	801a33a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801a390:	4620      	mov	r0, r4
 801a392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a396 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801a396:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a39a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a39e:	b383      	cbz	r3, 801a402 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801a3a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a3a2:	b374      	cbz	r4, 801a402 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801a3a4:	f9b1 5000 	ldrsh.w	r5, [r1]
 801a3a8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801a3ac:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801a3b0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801a3b4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a3b8:	b303      	cbz	r3, 801a3fc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801a3ba:	4668      	mov	r0, sp
 801a3bc:	1d21      	adds	r1, r4, #4
 801a3be:	f8ad 5000 	strh.w	r5, [sp]
 801a3c2:	f8ad 6002 	strh.w	r6, [sp, #2]
 801a3c6:	f8ad 7004 	strh.w	r7, [sp, #4]
 801a3ca:	f8ad 8006 	strh.w	r8, [sp, #6]
 801a3ce:	f7ff ff43 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 801a3d2:	4668      	mov	r0, sp
 801a3d4:	f7ff ff83 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a3d8:	b980      	cbnz	r0, 801a3fc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801a3da:	f8bd 3000 	ldrh.w	r3, [sp]
 801a3de:	4669      	mov	r1, sp
 801a3e0:	88a2      	ldrh	r2, [r4, #4]
 801a3e2:	4620      	mov	r0, r4
 801a3e4:	1a9b      	subs	r3, r3, r2
 801a3e6:	88e2      	ldrh	r2, [r4, #6]
 801a3e8:	f8ad 3000 	strh.w	r3, [sp]
 801a3ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a3f0:	1a9b      	subs	r3, r3, r2
 801a3f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a3f6:	6823      	ldr	r3, [r4, #0]
 801a3f8:	689b      	ldr	r3, [r3, #8]
 801a3fa:	4798      	blx	r3
 801a3fc:	69a4      	ldr	r4, [r4, #24]
 801a3fe:	2c00      	cmp	r4, #0
 801a400:	d1d8      	bne.n	801a3b4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801a402:	b002      	add	sp, #8
 801a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a408 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801a408:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a40a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a40e:	460d      	mov	r5, r1
 801a410:	4616      	mov	r6, r2
 801a412:	b323      	cbz	r3, 801a45e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801a414:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a416:	b314      	cbz	r4, 801a45e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801a418:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a41c:	b1eb      	cbz	r3, 801a45a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801a41e:	6828      	ldr	r0, [r5, #0]
 801a420:	466b      	mov	r3, sp
 801a422:	6869      	ldr	r1, [r5, #4]
 801a424:	c303      	stmia	r3!, {r0, r1}
 801a426:	4668      	mov	r0, sp
 801a428:	1d21      	adds	r1, r4, #4
 801a42a:	f7ff ff15 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 801a42e:	4668      	mov	r0, sp
 801a430:	f7ff ff55 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a434:	b988      	cbnz	r0, 801a45a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801a436:	f8bd 3000 	ldrh.w	r3, [sp]
 801a43a:	4669      	mov	r1, sp
 801a43c:	88a2      	ldrh	r2, [r4, #4]
 801a43e:	4620      	mov	r0, r4
 801a440:	1a9b      	subs	r3, r3, r2
 801a442:	88e2      	ldrh	r2, [r4, #6]
 801a444:	f8ad 3000 	strh.w	r3, [sp]
 801a448:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a44c:	1a9b      	subs	r3, r3, r2
 801a44e:	4632      	mov	r2, r6
 801a450:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a454:	6823      	ldr	r3, [r4, #0]
 801a456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a458:	4798      	blx	r3
 801a45a:	69a4      	ldr	r4, [r4, #24]
 801a45c:	e7db      	b.n	801a416 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801a45e:	b002      	add	sp, #8
 801a460:	bd70      	pop	{r4, r5, r6, pc}

0801a462 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801a462:	4770      	bx	lr

0801a464 <_ZN8touchgfx3HAL10FlushCacheEv>:
 801a464:	4770      	bx	lr

0801a466 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801a466:	6803      	ldr	r3, [r0, #0]
 801a468:	b513      	push	{r0, r1, r4, lr}
 801a46a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 801a46e:	2300      	movs	r3, #0
 801a470:	e9cd 3300 	strd	r3, r3, [sp]
 801a474:	466b      	mov	r3, sp
 801a476:	47a0      	blx	r4
 801a478:	b002      	add	sp, #8
 801a47a:	bd10      	pop	{r4, pc}

0801a47c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801a47c:	2301      	movs	r3, #1
 801a47e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801a482:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801a486:	4770      	bx	lr

0801a488 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801a488:	2301      	movs	r3, #1
 801a48a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801a48e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801a492:	4770      	bx	lr

0801a494 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801a494:	6843      	ldr	r3, [r0, #4]
 801a496:	2201      	movs	r2, #1
 801a498:	725a      	strb	r2, [r3, #9]
 801a49a:	6840      	ldr	r0, [r0, #4]
 801a49c:	6803      	ldr	r3, [r0, #0]
 801a49e:	691b      	ldr	r3, [r3, #16]
 801a4a0:	4718      	bx	r3

0801a4a2 <_ZN8touchgfx3HAL8flushDMAEv>:
 801a4a2:	6840      	ldr	r0, [r0, #4]
 801a4a4:	6803      	ldr	r3, [r0, #0]
 801a4a6:	689b      	ldr	r3, [r3, #8]
 801a4a8:	4718      	bx	r3

0801a4aa <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801a4aa:	b530      	push	{r4, r5, lr}
 801a4ac:	b08b      	sub	sp, #44	; 0x2c
 801a4ae:	6804      	ldr	r4, [r0, #0]
 801a4b0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801a4b4:	9509      	str	r5, [sp, #36]	; 0x24
 801a4b6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801a4ba:	9508      	str	r5, [sp, #32]
 801a4bc:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801a4c0:	9507      	str	r5, [sp, #28]
 801a4c2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801a4c6:	9506      	str	r5, [sp, #24]
 801a4c8:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801a4cc:	9505      	str	r5, [sp, #20]
 801a4ce:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801a4d2:	9504      	str	r5, [sp, #16]
 801a4d4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801a4d8:	9503      	str	r5, [sp, #12]
 801a4da:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801a4de:	9502      	str	r5, [sp, #8]
 801a4e0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801a4e4:	e9cd 3500 	strd	r3, r5, [sp]
 801a4e8:	4613      	mov	r3, r2
 801a4ea:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801a4ec:	2200      	movs	r2, #0
 801a4ee:	47a0      	blx	r4
 801a4f0:	b00b      	add	sp, #44	; 0x2c
 801a4f2:	bd30      	pop	{r4, r5, pc}

0801a4f4 <_ZN8touchgfx3HAL10beginFrameEv>:
 801a4f4:	4b04      	ldr	r3, [pc, #16]	; (801a508 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801a4f6:	781b      	ldrb	r3, [r3, #0]
 801a4f8:	b123      	cbz	r3, 801a504 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801a4fa:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801a4fe:	f080 0001 	eor.w	r0, r0, #1
 801a502:	4770      	bx	lr
 801a504:	2001      	movs	r0, #1
 801a506:	4770      	bx	lr
 801a508:	24027f6a 	.word	0x24027f6a

0801a50c <_ZN8touchgfx3HAL8endFrameEv>:
 801a50c:	b510      	push	{r4, lr}
 801a50e:	4604      	mov	r4, r0
 801a510:	6840      	ldr	r0, [r0, #4]
 801a512:	6803      	ldr	r3, [r0, #0]
 801a514:	689b      	ldr	r3, [r3, #8]
 801a516:	4798      	blx	r3
 801a518:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801a51c:	b113      	cbz	r3, 801a524 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801a51e:	2301      	movs	r3, #1
 801a520:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801a524:	bd10      	pop	{r4, pc}

0801a526 <_ZN8touchgfx3HAL10initializeEv>:
 801a526:	b510      	push	{r4, lr}
 801a528:	4604      	mov	r4, r0
 801a52a:	f7e8 f871 	bl	8002610 <_ZN8touchgfx10OSWrappers10initializeEv>
 801a52e:	f7e6 fabf 	bl	8000ab0 <_ZN8touchgfx4GPIO4initEv>
 801a532:	6860      	ldr	r0, [r4, #4]
 801a534:	6803      	ldr	r3, [r0, #0]
 801a536:	68db      	ldr	r3, [r3, #12]
 801a538:	4798      	blx	r3
 801a53a:	68e0      	ldr	r0, [r4, #12]
 801a53c:	6803      	ldr	r3, [r0, #0]
 801a53e:	689b      	ldr	r3, [r3, #8]
 801a540:	4798      	blx	r3
 801a542:	6823      	ldr	r3, [r4, #0]
 801a544:	4620      	mov	r0, r4
 801a546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a54c:	4718      	bx	r3

0801a54e <_ZN8touchgfx3HAL9taskEntryEv>:
 801a54e:	b508      	push	{r3, lr}
 801a550:	6803      	ldr	r3, [r0, #0]
 801a552:	4604      	mov	r4, r0
 801a554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a558:	4798      	blx	r3
 801a55a:	6823      	ldr	r3, [r4, #0]
 801a55c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a55e:	4620      	mov	r0, r4
 801a560:	4798      	blx	r3
 801a562:	f7e8 f8cb 	bl	80026fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801a566:	6823      	ldr	r3, [r4, #0]
 801a568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a56a:	e7f8      	b.n	801a55e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801a56c <_ZN8touchgfx3HAL4tickEv>:
 801a56c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a56e:	6803      	ldr	r3, [r0, #0]
 801a570:	4604      	mov	r4, r0
 801a572:	4d5b      	ldr	r5, [pc, #364]	; (801a6e0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801a574:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a578:	4798      	blx	r3
 801a57a:	2800      	cmp	r0, #0
 801a57c:	f000 8095 	beq.w	801a6aa <_ZN8touchgfx3HAL4tickEv+0x13e>
 801a580:	2001      	movs	r0, #1
 801a582:	2600      	movs	r6, #0
 801a584:	f7e6 faba 	bl	8000afc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a588:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801a58c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801a590:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a594:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801a598:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801a59c:	b133      	cbz	r3, 801a5ac <_ZN8touchgfx3HAL4tickEv+0x40>
 801a59e:	6823      	ldr	r3, [r4, #0]
 801a5a0:	4620      	mov	r0, r4
 801a5a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a5a6:	4798      	blx	r3
 801a5a8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801a5ac:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a5b0:	2601      	movs	r6, #1
 801a5b2:	6862      	ldr	r2, [r4, #4]
 801a5b4:	f083 0301 	eor.w	r3, r3, #1
 801a5b8:	702e      	strb	r6, [r5, #0]
 801a5ba:	7253      	strb	r3, [r2, #9]
 801a5bc:	f004 fdd6 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 801a5c0:	6803      	ldr	r3, [r0, #0]
 801a5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a5c4:	4798      	blx	r3
 801a5c6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a5ca:	b90b      	cbnz	r3, 801a5d0 <_ZN8touchgfx3HAL4tickEv+0x64>
 801a5cc:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801a5d0:	f004 fdcc 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 801a5d4:	6803      	ldr	r3, [r0, #0]
 801a5d6:	695b      	ldr	r3, [r3, #20]
 801a5d8:	4798      	blx	r3
 801a5da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a5dc:	6803      	ldr	r3, [r0, #0]
 801a5de:	691b      	ldr	r3, [r3, #16]
 801a5e0:	4798      	blx	r3
 801a5e2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a5e6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801a5ea:	3b01      	subs	r3, #1
 801a5ec:	b2db      	uxtb	r3, r3
 801a5ee:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a5f2:	b10a      	cbz	r2, 801a5f8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d1eb      	bne.n	801a5d0 <_ZN8touchgfx3HAL4tickEv+0x64>
 801a5f8:	4a3a      	ldr	r2, [pc, #232]	; (801a6e4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801a5fa:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801a5fe:	7813      	ldrb	r3, [r2, #0]
 801a600:	3301      	adds	r3, #1
 801a602:	b25b      	sxtb	r3, r3
 801a604:	4299      	cmp	r1, r3
 801a606:	7013      	strb	r3, [r2, #0]
 801a608:	dc10      	bgt.n	801a62c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a60a:	2300      	movs	r3, #0
 801a60c:	68e0      	ldr	r0, [r4, #12]
 801a60e:	a902      	add	r1, sp, #8
 801a610:	7013      	strb	r3, [r2, #0]
 801a612:	aa03      	add	r2, sp, #12
 801a614:	6803      	ldr	r3, [r0, #0]
 801a616:	68db      	ldr	r3, [r3, #12]
 801a618:	4798      	blx	r3
 801a61a:	6823      	ldr	r3, [r4, #0]
 801a61c:	2800      	cmp	r0, #0
 801a61e:	d050      	beq.n	801a6c2 <_ZN8touchgfx3HAL4tickEv+0x156>
 801a620:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a624:	4620      	mov	r0, r4
 801a626:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a62a:	4798      	blx	r3
 801a62c:	2300      	movs	r3, #0
 801a62e:	6960      	ldr	r0, [r4, #20]
 801a630:	f88d 3007 	strb.w	r3, [sp, #7]
 801a634:	b158      	cbz	r0, 801a64e <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a636:	6803      	ldr	r3, [r0, #0]
 801a638:	f10d 0107 	add.w	r1, sp, #7
 801a63c:	68db      	ldr	r3, [r3, #12]
 801a63e:	4798      	blx	r3
 801a640:	b128      	cbz	r0, 801a64e <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a642:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a644:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a648:	6803      	ldr	r3, [r0, #0]
 801a64a:	68db      	ldr	r3, [r3, #12]
 801a64c:	4798      	blx	r3
 801a64e:	f104 001c 	add.w	r0, r4, #28
 801a652:	f00f fd47 	bl	802a0e4 <_ZN8touchgfx8Gestures4tickEv>
 801a656:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801a65a:	b30b      	cbz	r3, 801a6a0 <_ZN8touchgfx3HAL4tickEv+0x134>
 801a65c:	6920      	ldr	r0, [r4, #16]
 801a65e:	6803      	ldr	r3, [r0, #0]
 801a660:	691b      	ldr	r3, [r3, #16]
 801a662:	4798      	blx	r3
 801a664:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a666:	4606      	mov	r6, r0
 801a668:	b903      	cbnz	r3, 801a66c <_ZN8touchgfx3HAL4tickEv+0x100>
 801a66a:	6720      	str	r0, [r4, #112]	; 0x70
 801a66c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a66e:	4a1e      	ldr	r2, [pc, #120]	; (801a6e8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801a670:	1af3      	subs	r3, r6, r3
 801a672:	4293      	cmp	r3, r2
 801a674:	d914      	bls.n	801a6a0 <_ZN8touchgfx3HAL4tickEv+0x134>
 801a676:	6920      	ldr	r0, [r4, #16]
 801a678:	6803      	ldr	r3, [r0, #0]
 801a67a:	699b      	ldr	r3, [r3, #24]
 801a67c:	4798      	blx	r3
 801a67e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a680:	2264      	movs	r2, #100	; 0x64
 801a682:	1af3      	subs	r3, r6, r3
 801a684:	fbb3 f3f2 	udiv	r3, r3, r2
 801a688:	fbb0 f0f3 	udiv	r0, r0, r3
 801a68c:	2800      	cmp	r0, #0
 801a68e:	dc1d      	bgt.n	801a6cc <_ZN8touchgfx3HAL4tickEv+0x160>
 801a690:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801a694:	6920      	ldr	r0, [r4, #16]
 801a696:	2100      	movs	r1, #0
 801a698:	6803      	ldr	r3, [r0, #0]
 801a69a:	69db      	ldr	r3, [r3, #28]
 801a69c:	4798      	blx	r3
 801a69e:	6726      	str	r6, [r4, #112]	; 0x70
 801a6a0:	f004 fd64 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 801a6a4:	6803      	ldr	r3, [r0, #0]
 801a6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6a8:	4798      	blx	r3
 801a6aa:	6823      	ldr	r3, [r4, #0]
 801a6ac:	4620      	mov	r0, r4
 801a6ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a6b2:	4798      	blx	r3
 801a6b4:	2001      	movs	r0, #1
 801a6b6:	f7e6 fa7f 	bl	8000bb8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a6ba:	2300      	movs	r3, #0
 801a6bc:	702b      	strb	r3, [r5, #0]
 801a6be:	b004      	add	sp, #16
 801a6c0:	bd70      	pop	{r4, r5, r6, pc}
 801a6c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a6c6:	4620      	mov	r0, r4
 801a6c8:	4798      	blx	r3
 801a6ca:	e7af      	b.n	801a62c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a6cc:	2863      	cmp	r0, #99	; 0x63
 801a6ce:	bfcb      	itete	gt
 801a6d0:	2300      	movgt	r3, #0
 801a6d2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801a6d6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801a6da:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801a6de:	e7d9      	b.n	801a694 <_ZN8touchgfx3HAL4tickEv+0x128>
 801a6e0:	24027f70 	.word	0x24027f70
 801a6e4:	24027f71 	.word	0x24027f71
 801a6e8:	05f5e100 	.word	0x05f5e100

0801a6ec <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801a6ec:	f7e7 bfd2 	b.w	8002694 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a6f0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801a6f0:	6581      	str	r1, [r0, #88]	; 0x58
 801a6f2:	301c      	adds	r0, #28
 801a6f4:	f00f bcf4 	b.w	802a0e0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801a6f8 <_ZN8touchgfx3HAL5touchEll>:
 801a6f8:	b530      	push	{r4, r5, lr}
 801a6fa:	b087      	sub	sp, #28
 801a6fc:	4604      	mov	r4, r0
 801a6fe:	a804      	add	r0, sp, #16
 801a700:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801a704:	f004 fb20 	bl	801ed48 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801a708:	9b04      	ldr	r3, [sp, #16]
 801a70a:	a906      	add	r1, sp, #24
 801a70c:	a803      	add	r0, sp, #12
 801a70e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a712:	9b05      	ldr	r3, [sp, #20]
 801a714:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801a718:	f004 fb68 	bl	801edec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801a71c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801a720:	f104 001c 	add.w	r0, r4, #28
 801a724:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a728:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a72c:	b189      	cbz	r1, 801a752 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801a72e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801a732:	9300      	str	r3, [sp, #0]
 801a734:	4613      	mov	r3, r2
 801a736:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a73a:	462a      	mov	r2, r5
 801a73c:	f00f fce0 	bl	802a100 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801a740:	b128      	cbz	r0, 801a74e <_ZN8touchgfx3HAL5touchEll+0x56>
 801a742:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a746:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a748:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a74c:	6623      	str	r3, [r4, #96]	; 0x60
 801a74e:	b007      	add	sp, #28
 801a750:	bd30      	pop	{r4, r5, pc}
 801a752:	f00f fd15 	bl	802a180 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a756:	2301      	movs	r3, #1
 801a758:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a75c:	e7f1      	b.n	801a742 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801a75e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801a75e:	b510      	push	{r4, lr}
 801a760:	2b00      	cmp	r3, #0
 801a762:	d046      	beq.n	801a7f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a764:	ea81 0002 	eor.w	r0, r1, r2
 801a768:	07c4      	lsls	r4, r0, #31
 801a76a:	d508      	bpl.n	801a77e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801a76c:	440b      	add	r3, r1
 801a76e:	3a01      	subs	r2, #1
 801a770:	428b      	cmp	r3, r1
 801a772:	d93e      	bls.n	801a7f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a774:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a778:	f801 0b01 	strb.w	r0, [r1], #1
 801a77c:	e7f8      	b.n	801a770 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801a77e:	07d0      	lsls	r0, r2, #31
 801a780:	bf42      	ittt	mi
 801a782:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801a786:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801a78a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801a78e:	2b01      	cmp	r3, #1
 801a790:	d911      	bls.n	801a7b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a792:	ea81 0402 	eor.w	r4, r1, r2
 801a796:	4610      	mov	r0, r2
 801a798:	07a4      	lsls	r4, r4, #30
 801a79a:	d022      	beq.n	801a7e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801a79c:	f023 0401 	bic.w	r4, r3, #1
 801a7a0:	440c      	add	r4, r1
 801a7a2:	428c      	cmp	r4, r1
 801a7a4:	4602      	mov	r2, r0
 801a7a6:	d904      	bls.n	801a7b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801a7a8:	8812      	ldrh	r2, [r2, #0]
 801a7aa:	3002      	adds	r0, #2
 801a7ac:	f821 2b02 	strh.w	r2, [r1], #2
 801a7b0:	e7f7      	b.n	801a7a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801a7b2:	f003 0301 	and.w	r3, r3, #1
 801a7b6:	f023 0003 	bic.w	r0, r3, #3
 801a7ba:	4408      	add	r0, r1
 801a7bc:	4288      	cmp	r0, r1
 801a7be:	4614      	mov	r4, r2
 801a7c0:	d904      	bls.n	801a7cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801a7c2:	6824      	ldr	r4, [r4, #0]
 801a7c4:	3204      	adds	r2, #4
 801a7c6:	f841 4b04 	str.w	r4, [r1], #4
 801a7ca:	e7f7      	b.n	801a7bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801a7cc:	f003 0303 	and.w	r3, r3, #3
 801a7d0:	3a01      	subs	r2, #1
 801a7d2:	440b      	add	r3, r1
 801a7d4:	428b      	cmp	r3, r1
 801a7d6:	d90c      	bls.n	801a7f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a7d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a7dc:	f801 0b01 	strb.w	r0, [r1], #1
 801a7e0:	e7f8      	b.n	801a7d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801a7e2:	0790      	lsls	r0, r2, #30
 801a7e4:	d0e7      	beq.n	801a7b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a7e6:	f832 0b02 	ldrh.w	r0, [r2], #2
 801a7ea:	3b02      	subs	r3, #2
 801a7ec:	f821 0b02 	strh.w	r0, [r1], #2
 801a7f0:	e7e1      	b.n	801a7b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a7f2:	2001      	movs	r0, #1
 801a7f4:	bd10      	pop	{r4, pc}

0801a7f6 <_ZN8touchgfx3HAL7noTouchEv>:
 801a7f6:	b510      	push	{r4, lr}
 801a7f8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801a7fc:	4604      	mov	r4, r0
 801a7fe:	b153      	cbz	r3, 801a816 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801a800:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801a804:	2101      	movs	r1, #1
 801a806:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801a80a:	301c      	adds	r0, #28
 801a80c:	f00f fcb8 	bl	802a180 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a810:	2300      	movs	r3, #0
 801a812:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a816:	bd10      	pop	{r4, pc}

0801a818 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801a818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a81c:	b085      	sub	sp, #20
 801a81e:	4604      	mov	r4, r0
 801a820:	2000      	movs	r0, #0
 801a822:	4699      	mov	r9, r3
 801a824:	ad04      	add	r5, sp, #16
 801a826:	460f      	mov	r7, r1
 801a828:	4690      	mov	r8, r2
 801a82a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801a82e:	69a0      	ldr	r0, [r4, #24]
 801a830:	6806      	ldr	r6, [r0, #0]
 801a832:	9501      	str	r5, [sp, #4]
 801a834:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801a838:	9500      	str	r5, [sp, #0]
 801a83a:	6835      	ldr	r5, [r6, #0]
 801a83c:	47a8      	blx	r5
 801a83e:	4d10      	ldr	r5, [pc, #64]	; (801a880 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 801a840:	4606      	mov	r6, r0
 801a842:	f8a5 9000 	strh.w	r9, [r5]
 801a846:	f7e9 fdbd 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 801a84a:	6803      	ldr	r3, [r0, #0]
 801a84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a84e:	4798      	blx	r3
 801a850:	b128      	cbz	r0, 801a85e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801a852:	2801      	cmp	r0, #1
 801a854:	d00b      	beq.n	801a86e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801a856:	4630      	mov	r0, r6
 801a858:	b005      	add	sp, #20
 801a85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a85e:	882b      	ldrh	r3, [r5, #0]
 801a860:	fb08 7203 	mla	r2, r8, r3, r7
 801a864:	9b03      	ldr	r3, [sp, #12]
 801a866:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801a86a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801a86c:	e7f3      	b.n	801a856 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a86e:	882a      	ldrh	r2, [r5, #0]
 801a870:	9b03      	ldr	r3, [sp, #12]
 801a872:	fb08 7202 	mla	r2, r8, r2, r7
 801a876:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a87a:	1a9a      	subs	r2, r3, r2
 801a87c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801a87e:	e7ea      	b.n	801a856 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a880:	24027f66 	.word	0x24027f66

0801a884 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801a884:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a886:	b08b      	sub	sp, #44	; 0x2c
 801a888:	4617      	mov	r7, r2
 801a88a:	4604      	mov	r4, r0
 801a88c:	460e      	mov	r6, r1
 801a88e:	461d      	mov	r5, r3
 801a890:	f7e9 fd98 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 801a894:	6803      	ldr	r3, [r0, #0]
 801a896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a898:	4798      	blx	r3
 801a89a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801a89e:	9007      	str	r0, [sp, #28]
 801a8a0:	4631      	mov	r1, r6
 801a8a2:	6822      	ldr	r2, [r4, #0]
 801a8a4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801a8a8:	4b0c      	ldr	r3, [pc, #48]	; (801a8dc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801a8aa:	4620      	mov	r0, r4
 801a8ac:	881b      	ldrh	r3, [r3, #0]
 801a8ae:	9306      	str	r3, [sp, #24]
 801a8b0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801a8b4:	9305      	str	r3, [sp, #20]
 801a8b6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801a8ba:	9304      	str	r3, [sp, #16]
 801a8bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a8c0:	9303      	str	r3, [sp, #12]
 801a8c2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a8c6:	9302      	str	r3, [sp, #8]
 801a8c8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a8cc:	e9cd 5300 	strd	r5, r3, [sp]
 801a8d0:	463b      	mov	r3, r7
 801a8d2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801a8d4:	2200      	movs	r2, #0
 801a8d6:	47a8      	blx	r5
 801a8d8:	b00b      	add	sp, #44	; 0x2c
 801a8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8dc:	24027f66 	.word	0x24027f66

0801a8e0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801a8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a8e4:	4698      	mov	r8, r3
 801a8e6:	6803      	ldr	r3, [r0, #0]
 801a8e8:	b08b      	sub	sp, #44	; 0x2c
 801a8ea:	4617      	mov	r7, r2
 801a8ec:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801a8ee:	460e      	mov	r6, r1
 801a8f0:	4b13      	ldr	r3, [pc, #76]	; (801a940 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801a8f2:	4604      	mov	r4, r0
 801a8f4:	f8b3 9000 	ldrh.w	r9, [r3]
 801a8f8:	f7e9 fd64 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 801a8fc:	6803      	ldr	r3, [r0, #0]
 801a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a900:	4798      	blx	r3
 801a902:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801a906:	2200      	movs	r2, #0
 801a908:	4631      	mov	r1, r6
 801a90a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801a90e:	2302      	movs	r3, #2
 801a910:	4620      	mov	r0, r4
 801a912:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801a916:	2301      	movs	r3, #1
 801a918:	9305      	str	r3, [sp, #20]
 801a91a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801a91e:	9304      	str	r3, [sp, #16]
 801a920:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a924:	9303      	str	r3, [sp, #12]
 801a926:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a92a:	9302      	str	r3, [sp, #8]
 801a92c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a930:	e9cd 8300 	strd	r8, r3, [sp]
 801a934:	463b      	mov	r3, r7
 801a936:	47a8      	blx	r5
 801a938:	b00b      	add	sp, #44	; 0x2c
 801a93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a93e:	bf00      	nop
 801a940:	24027f66 	.word	0x24027f66

0801a944 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801a944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a948:	4698      	mov	r8, r3
 801a94a:	6803      	ldr	r3, [r0, #0]
 801a94c:	b087      	sub	sp, #28
 801a94e:	460e      	mov	r6, r1
 801a950:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801a952:	4617      	mov	r7, r2
 801a954:	4b0f      	ldr	r3, [pc, #60]	; (801a994 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801a956:	4604      	mov	r4, r0
 801a958:	f8b3 9000 	ldrh.w	r9, [r3]
 801a95c:	f7e9 fd32 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 801a960:	6803      	ldr	r3, [r0, #0]
 801a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a964:	4798      	blx	r3
 801a966:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801a96a:	463a      	mov	r2, r7
 801a96c:	4631      	mov	r1, r6
 801a96e:	f8cd 900c 	str.w	r9, [sp, #12]
 801a972:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801a976:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801a97a:	4620      	mov	r0, r4
 801a97c:	9302      	str	r3, [sp, #8]
 801a97e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a982:	9301      	str	r3, [sp, #4]
 801a984:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a988:	9300      	str	r3, [sp, #0]
 801a98a:	4643      	mov	r3, r8
 801a98c:	47a8      	blx	r5
 801a98e:	b007      	add	sp, #28
 801a990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a994:	24027f66 	.word	0x24027f66

0801a998 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801a998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a99c:	4604      	mov	r4, r0
 801a99e:	b08f      	sub	sp, #60	; 0x3c
 801a9a0:	4610      	mov	r0, r2
 801a9a2:	460d      	mov	r5, r1
 801a9a4:	4691      	mov	r9, r2
 801a9a6:	461e      	mov	r6, r3
 801a9a8:	f007 fa04 	bl	8021db4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801a9ac:	2800      	cmp	r0, #0
 801a9ae:	f000 809d 	beq.w	801aaec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801a9b2:	6823      	ldr	r3, [r4, #0]
 801a9b4:	4620      	mov	r0, r4
 801a9b6:	f8df b198 	ldr.w	fp, [pc, #408]	; 801ab50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801a9ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801a9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9c0:	4798      	blx	r3
 801a9c2:	6823      	ldr	r3, [r4, #0]
 801a9c4:	4620      	mov	r0, r4
 801a9c6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801ab54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9cc:	4798      	blx	r3
 801a9ce:	f8bb 3000 	ldrh.w	r3, [fp]
 801a9d2:	4f5c      	ldr	r7, [pc, #368]	; (801ab44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a9d4:	9301      	str	r3, [sp, #4]
 801a9d6:	f8ba 3000 	ldrh.w	r3, [sl]
 801a9da:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801a9de:	4640      	mov	r0, r8
 801a9e0:	9302      	str	r3, [sp, #8]
 801a9e2:	883b      	ldrh	r3, [r7, #0]
 801a9e4:	9303      	str	r3, [sp, #12]
 801a9e6:	4b58      	ldr	r3, [pc, #352]	; (801ab48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a9e8:	881a      	ldrh	r2, [r3, #0]
 801a9ea:	9305      	str	r3, [sp, #20]
 801a9ec:	9204      	str	r2, [sp, #16]
 801a9ee:	f007 fb25 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a9f2:	8038      	strh	r0, [r7, #0]
 801a9f4:	4640      	mov	r0, r8
 801a9f6:	f007 fb55 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a9fa:	9b05      	ldr	r3, [sp, #20]
 801a9fc:	b280      	uxth	r0, r0
 801a9fe:	8018      	strh	r0, [r3, #0]
 801aa00:	4b52      	ldr	r3, [pc, #328]	; (801ab4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801aa02:	781b      	ldrb	r3, [r3, #0]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d174      	bne.n	801aaf2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801aa08:	883b      	ldrh	r3, [r7, #0]
 801aa0a:	f8aa 0000 	strh.w	r0, [sl]
 801aa0e:	f8ab 3000 	strh.w	r3, [fp]
 801aa12:	4648      	mov	r0, r9
 801aa14:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801aa18:	f007 f9cc 	bl	8021db4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801aa1c:	2200      	movs	r2, #0
 801aa1e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801aa22:	4611      	mov	r1, r2
 801aa24:	4628      	mov	r0, r5
 801aa26:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801aa2a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801aa2e:	f7ed f93a 	bl	8007ca6 <_ZN8touchgfx8Drawable5setXYEss>
 801aa32:	2301      	movs	r3, #1
 801aa34:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801aa38:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801aa3c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	dd5c      	ble.n	801aafe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801aa44:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	dd58      	ble.n	801aafe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801aa4c:	462a      	mov	r2, r5
 801aa4e:	ab0a      	add	r3, sp, #40	; 0x28
 801aa50:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801aa54:	6851      	ldr	r1, [r2, #4]
 801aa56:	c303      	stmia	r3!, {r0, r1}
 801aa58:	4631      	mov	r1, r6
 801aa5a:	a80a      	add	r0, sp, #40	; 0x28
 801aa5c:	f7ff fbfc 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 801aa60:	4b38      	ldr	r3, [pc, #224]	; (801ab44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801aa62:	2100      	movs	r1, #0
 801aa64:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa68:	4b37      	ldr	r3, [pc, #220]	; (801ab48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801aa6a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801aa6e:	aa0a      	add	r2, sp, #40	; 0x28
 801aa70:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aa74:	910c      	str	r1, [sp, #48]	; 0x30
 801aa76:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801aa7a:	ab08      	add	r3, sp, #32
 801aa7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aa80:	e883 0003 	stmia.w	r3, {r0, r1}
 801aa84:	4618      	mov	r0, r3
 801aa86:	a90c      	add	r1, sp, #48	; 0x30
 801aa88:	f7ff fbe6 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 801aa8c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d13c      	bne.n	801ab0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801aa92:	2000      	movs	r0, #0
 801aa94:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801aa98:	2600      	movs	r6, #0
 801aa9a:	696b      	ldr	r3, [r5, #20]
 801aa9c:	a908      	add	r1, sp, #32
 801aa9e:	682a      	ldr	r2, [r5, #0]
 801aaa0:	4628      	mov	r0, r5
 801aaa2:	9305      	str	r3, [sp, #20]
 801aaa4:	616e      	str	r6, [r5, #20]
 801aaa6:	6892      	ldr	r2, [r2, #8]
 801aaa8:	4790      	blx	r2
 801aaaa:	9b05      	ldr	r3, [sp, #20]
 801aaac:	4652      	mov	r2, sl
 801aaae:	4649      	mov	r1, r9
 801aab0:	616b      	str	r3, [r5, #20]
 801aab2:	4628      	mov	r0, r5
 801aab4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801aab8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801aabc:	f7ed f8f3 	bl	8007ca6 <_ZN8touchgfx8Drawable5setXYEss>
 801aac0:	9a01      	ldr	r2, [sp, #4]
 801aac2:	4b23      	ldr	r3, [pc, #140]	; (801ab50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801aac4:	4620      	mov	r0, r4
 801aac6:	801a      	strh	r2, [r3, #0]
 801aac8:	9a02      	ldr	r2, [sp, #8]
 801aaca:	4b22      	ldr	r3, [pc, #136]	; (801ab54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801aacc:	801a      	strh	r2, [r3, #0]
 801aace:	9a03      	ldr	r2, [sp, #12]
 801aad0:	4b1c      	ldr	r3, [pc, #112]	; (801ab44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801aad2:	801a      	strh	r2, [r3, #0]
 801aad4:	4b1c      	ldr	r3, [pc, #112]	; (801ab48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801aad6:	9a04      	ldr	r2, [sp, #16]
 801aad8:	801a      	strh	r2, [r3, #0]
 801aada:	6823      	ldr	r3, [r4, #0]
 801aadc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801aae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aae2:	4798      	blx	r3
 801aae4:	6823      	ldr	r3, [r4, #0]
 801aae6:	4620      	mov	r0, r4
 801aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaea:	4798      	blx	r3
 801aaec:	b00f      	add	sp, #60	; 0x3c
 801aaee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf2:	883b      	ldrh	r3, [r7, #0]
 801aaf4:	f8ab 0000 	strh.w	r0, [fp]
 801aaf8:	f8aa 3000 	strh.w	r3, [sl]
 801aafc:	e789      	b.n	801aa12 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801aafe:	462a      	mov	r2, r5
 801ab00:	ab0a      	add	r3, sp, #40	; 0x28
 801ab02:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801ab06:	6851      	ldr	r1, [r2, #4]
 801ab08:	c303      	stmia	r3!, {r0, r1}
 801ab0a:	e7a9      	b.n	801aa60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801ab0c:	a807      	add	r0, sp, #28
 801ab0e:	f007 fc05 	bl	802231c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ab12:	4606      	mov	r6, r0
 801ab14:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801ab16:	6803      	ldr	r3, [r0, #0]
 801ab18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab1a:	4798      	blx	r3
 801ab1c:	4286      	cmp	r6, r0
 801ab1e:	d1b8      	bne.n	801aa92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801ab20:	f7e9 fc50 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 801ab24:	6803      	ldr	r3, [r0, #0]
 801ab26:	4606      	mov	r6, r0
 801ab28:	a807      	add	r0, sp, #28
 801ab2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ab2c:	9305      	str	r3, [sp, #20]
 801ab2e:	f007 fbf5 	bl	802231c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ab32:	9b05      	ldr	r3, [sp, #20]
 801ab34:	4601      	mov	r1, r0
 801ab36:	4630      	mov	r0, r6
 801ab38:	4798      	blx	r3
 801ab3a:	f080 0001 	eor.w	r0, r0, #1
 801ab3e:	b2c0      	uxtb	r0, r0
 801ab40:	e7a8      	b.n	801aa94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801ab42:	bf00      	nop
 801ab44:	24027f60 	.word	0x24027f60
 801ab48:	24027f62 	.word	0x24027f62
 801ab4c:	24027f64 	.word	0x24027f64
 801ab50:	24027f66 	.word	0x24027f66
 801ab54:	24027f68 	.word	0x24027f68

0801ab58 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801ab58:	4b07      	ldr	r3, [pc, #28]	; (801ab78 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801ab5a:	b510      	push	{r4, lr}
 801ab5c:	781b      	ldrb	r3, [r3, #0]
 801ab5e:	4604      	mov	r4, r0
 801ab60:	b13b      	cbz	r3, 801ab72 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801ab62:	6803      	ldr	r3, [r0, #0]
 801ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab66:	4798      	blx	r3
 801ab68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ab6a:	4283      	cmp	r3, r0
 801ab6c:	d101      	bne.n	801ab72 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801ab6e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ab70:	bd10      	pop	{r4, pc}
 801ab72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801ab74:	e7fc      	b.n	801ab70 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801ab76:	bf00      	nop
 801ab78:	24027f6a 	.word	0x24027f6a

0801ab7c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801ab7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab80:	461d      	mov	r5, r3
 801ab82:	b08a      	sub	sp, #40	; 0x28
 801ab84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ab88:	4690      	mov	r8, r2
 801ab8a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801ab8e:	2400      	movs	r4, #0
 801ab90:	4607      	mov	r7, r0
 801ab92:	fb06 8505 	mla	r5, r6, r5, r8
 801ab96:	9404      	str	r4, [sp, #16]
 801ab98:	f88d 4020 	strb.w	r4, [sp, #32]
 801ab9c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801aba0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801aba4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801aba8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801abac:	f8ad 301a 	strh.w	r3, [sp, #26]
 801abb0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801abb4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801abb8:	f7ff ffce 	bl	801ab58 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801abbc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801abc0:	6878      	ldr	r0, [r7, #4]
 801abc2:	f8ad 601e 	strh.w	r6, [sp, #30]
 801abc6:	a901      	add	r1, sp, #4
 801abc8:	9505      	str	r5, [sp, #20]
 801abca:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801abce:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801abd2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801abd6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801abda:	6803      	ldr	r3, [r0, #0]
 801abdc:	685b      	ldr	r3, [r3, #4]
 801abde:	4798      	blx	r3
 801abe0:	b00a      	add	sp, #40	; 0x28
 801abe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801abe6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801abe6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801abea:	b08b      	sub	sp, #44	; 0x2c
 801abec:	2400      	movs	r4, #0
 801abee:	4691      	mov	r9, r2
 801abf0:	461d      	mov	r5, r3
 801abf2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801abf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801abfa:	4688      	mov	r8, r1
 801abfc:	4607      	mov	r7, r0
 801abfe:	9404      	str	r4, [sp, #16]
 801ac00:	fb06 9505 	mla	r5, r6, r5, r9
 801ac04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ac08:	f7ff ffa6 	bl	801ab58 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ac0c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ac10:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801ac14:	6878      	ldr	r0, [r7, #4]
 801ac16:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ac1a:	a901      	add	r1, sp, #4
 801ac1c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801ac20:	9505      	str	r5, [sp, #20]
 801ac22:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ac26:	f8ad 401c 	strh.w	r4, [sp, #28]
 801ac2a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801ac2e:	f8cd 8010 	str.w	r8, [sp, #16]
 801ac32:	f8ad 4020 	strh.w	r4, [sp, #32]
 801ac36:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801ac3a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801ac3e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801ac42:	6803      	ldr	r3, [r0, #0]
 801ac44:	685b      	ldr	r3, [r3, #4]
 801ac46:	4798      	blx	r3
 801ac48:	b00b      	add	sp, #44	; 0x2c
 801ac4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801ac50 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801ac50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac54:	b08a      	sub	sp, #40	; 0x28
 801ac56:	4698      	mov	r8, r3
 801ac58:	2300      	movs	r3, #0
 801ac5a:	4606      	mov	r6, r0
 801ac5c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801ac60:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801ac64:	2d0b      	cmp	r5, #11
 801ac66:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801ac6a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801ac6e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801ac72:	9304      	str	r3, [sp, #16]
 801ac74:	d137      	bne.n	801ace6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801ac76:	2380      	movs	r3, #128	; 0x80
 801ac78:	f88d 0020 	strb.w	r0, [sp, #32]
 801ac7c:	4630      	mov	r0, r6
 801ac7e:	9203      	str	r2, [sp, #12]
 801ac80:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801ac84:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ac88:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ac8c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ac90:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ac94:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801ac98:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ac9c:	f7ff ff5c 	bl	801ab58 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801aca0:	2c0b      	cmp	r4, #11
 801aca2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801aca6:	f8ad 701e 	strh.w	r7, [sp, #30]
 801acaa:	bf94      	ite	ls
 801acac:	4b19      	ldrls	r3, [pc, #100]	; (801ad14 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801acae:	2100      	movhi	r1, #0
 801acb0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801acb4:	bf98      	it	ls
 801acb6:	5d19      	ldrbls	r1, [r3, r4]
 801acb8:	fb02 8307 	mla	r3, r2, r7, r8
 801acbc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801acc0:	10c9      	asrs	r1, r1, #3
 801acc2:	fb01 0003 	mla	r0, r1, r3, r0
 801acc6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801acca:	a901      	add	r1, sp, #4
 801accc:	9005      	str	r0, [sp, #20]
 801acce:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801acd2:	2300      	movs	r3, #0
 801acd4:	6870      	ldr	r0, [r6, #4]
 801acd6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801acda:	6803      	ldr	r3, [r0, #0]
 801acdc:	685b      	ldr	r3, [r3, #4]
 801acde:	4798      	blx	r3
 801ace0:	b00a      	add	sp, #40	; 0x28
 801ace2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ace6:	2d02      	cmp	r5, #2
 801ace8:	d109      	bne.n	801acfe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801acea:	28ff      	cmp	r0, #255	; 0xff
 801acec:	d105      	bne.n	801acfa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801acee:	f1bc 0f00 	cmp.w	ip, #0
 801acf2:	bf14      	ite	ne
 801acf4:	2340      	movne	r3, #64	; 0x40
 801acf6:	2320      	moveq	r3, #32
 801acf8:	e7be      	b.n	801ac78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801acfa:	2340      	movs	r3, #64	; 0x40
 801acfc:	e7bc      	b.n	801ac78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801acfe:	28ff      	cmp	r0, #255	; 0xff
 801ad00:	d105      	bne.n	801ad0e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801ad02:	f1bc 0f00 	cmp.w	ip, #0
 801ad06:	bf14      	ite	ne
 801ad08:	2304      	movne	r3, #4
 801ad0a:	2301      	moveq	r3, #1
 801ad0c:	e7b4      	b.n	801ac78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ad0e:	2304      	movs	r3, #4
 801ad10:	e7b2      	b.n	801ac78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801ad12:	bf00      	nop
 801ad14:	0802f4a8 	.word	0x0802f4a8

0801ad18 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad1c:	b08b      	sub	sp, #44	; 0x2c
 801ad1e:	461d      	mov	r5, r3
 801ad20:	2400      	movs	r4, #0
 801ad22:	4688      	mov	r8, r1
 801ad24:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801ad28:	4693      	mov	fp, r2
 801ad2a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801ad2e:	4607      	mov	r7, r0
 801ad30:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ad34:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801ad38:	9404      	str	r4, [sp, #16]
 801ad3a:	bf14      	ite	ne
 801ad3c:	2308      	movne	r3, #8
 801ad3e:	2302      	moveq	r3, #2
 801ad40:	fb05 b50a 	mla	r5, r5, sl, fp
 801ad44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ad48:	f7ff ff06 	bl	801ab58 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ad4c:	2e0b      	cmp	r6, #11
 801ad4e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ad52:	a901      	add	r1, sp, #4
 801ad54:	bf98      	it	ls
 801ad56:	4b13      	ldrls	r3, [pc, #76]	; (801ada4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801ad58:	f8ad a01e 	strh.w	sl, [sp, #30]
 801ad5c:	bf98      	it	ls
 801ad5e:	5d9c      	ldrbls	r4, [r3, r6]
 801ad60:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801ad64:	10e4      	asrs	r4, r4, #3
 801ad66:	f8cd 8010 	str.w	r8, [sp, #16]
 801ad6a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ad6e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801ad72:	fb04 0405 	mla	r4, r4, r5, r0
 801ad76:	6878      	ldr	r0, [r7, #4]
 801ad78:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	9405      	str	r4, [sp, #20]
 801ad80:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ad84:	f88d 9020 	strb.w	r9, [sp, #32]
 801ad88:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801ad8c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801ad90:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801ad94:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801ad98:	6803      	ldr	r3, [r0, #0]
 801ad9a:	685b      	ldr	r3, [r3, #4]
 801ad9c:	4798      	blx	r3
 801ad9e:	b00b      	add	sp, #44	; 0x2c
 801ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ada4:	0802f4a8 	.word	0x0802f4a8

0801ada8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801ada8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adac:	461e      	mov	r6, r3
 801adae:	4b0a      	ldr	r3, [pc, #40]	; (801add8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801adb0:	460f      	mov	r7, r1
 801adb2:	4690      	mov	r8, r2
 801adb4:	881d      	ldrh	r5, [r3, #0]
 801adb6:	f7e9 fb05 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 801adba:	6803      	ldr	r3, [r0, #0]
 801adbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801adbe:	4798      	blx	r3
 801adc0:	280b      	cmp	r0, #11
 801adc2:	bf96      	itet	ls
 801adc4:	4b05      	ldrls	r3, [pc, #20]	; (801addc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801adc6:	2400      	movhi	r4, #0
 801adc8:	5c1c      	ldrbls	r4, [r3, r0]
 801adca:	fb08 7005 	mla	r0, r8, r5, r7
 801adce:	10e4      	asrs	r4, r4, #3
 801add0:	fb04 6000 	mla	r0, r4, r0, r6
 801add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801add8:	24027f66 	.word	0x24027f66
 801addc:	0802f4a8 	.word	0x0802f4a8

0801ade0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801ade0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ade2:	b08b      	sub	sp, #44	; 0x2c
 801ade4:	461f      	mov	r7, r3
 801ade6:	4604      	mov	r4, r0
 801ade8:	4616      	mov	r6, r2
 801adea:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801adee:	2500      	movs	r5, #0
 801adf0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801adf4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801adf8:	9504      	str	r5, [sp, #16]
 801adfa:	f8ad 3018 	strh.w	r3, [sp, #24]
 801adfe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ae02:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ae06:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ae0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ae0e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801ae12:	f88d 3020 	strb.w	r3, [sp, #32]
 801ae16:	f7ff fe9f 	bl	801ab58 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ae1a:	463a      	mov	r2, r7
 801ae1c:	4631      	mov	r1, r6
 801ae1e:	4603      	mov	r3, r0
 801ae20:	4620      	mov	r0, r4
 801ae22:	f7ff ffc1 	bl	801ada8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801ae26:	4b0e      	ldr	r3, [pc, #56]	; (801ae60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801ae28:	9005      	str	r0, [sp, #20]
 801ae2a:	881b      	ldrh	r3, [r3, #0]
 801ae2c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ae30:	f7e9 fac8 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 801ae34:	6803      	ldr	r3, [r0, #0]
 801ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae38:	4798      	blx	r3
 801ae3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ae3c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801ae40:	a901      	add	r1, sp, #4
 801ae42:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801ae46:	9304      	str	r3, [sp, #16]
 801ae48:	6860      	ldr	r0, [r4, #4]
 801ae4a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801ae4e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801ae52:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801ae56:	6803      	ldr	r3, [r0, #0]
 801ae58:	685b      	ldr	r3, [r3, #4]
 801ae5a:	4798      	blx	r3
 801ae5c:	b00b      	add	sp, #44	; 0x2c
 801ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae60:	24027f66 	.word	0x24027f66

0801ae64 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801ae64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae66:	b08d      	sub	sp, #52	; 0x34
 801ae68:	2501      	movs	r5, #1
 801ae6a:	4604      	mov	r4, r0
 801ae6c:	466b      	mov	r3, sp
 801ae6e:	9503      	str	r5, [sp, #12]
 801ae70:	e883 0006 	stmia.w	r3, {r1, r2}
 801ae74:	2300      	movs	r3, #0
 801ae76:	f8bd 6000 	ldrh.w	r6, [sp]
 801ae7a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801ae7e:	9306      	str	r3, [sp, #24]
 801ae80:	6803      	ldr	r3, [r0, #0]
 801ae82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae84:	4798      	blx	r3
 801ae86:	463a      	mov	r2, r7
 801ae88:	4631      	mov	r1, r6
 801ae8a:	4603      	mov	r3, r0
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	f7ff ff8b 	bl	801ada8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801ae92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801ae94:	9004      	str	r0, [sp, #16]
 801ae96:	9307      	str	r3, [sp, #28]
 801ae98:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ae9c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801aea0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801aea4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801aea8:	4b0e      	ldr	r3, [pc, #56]	; (801aee4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801aeaa:	881b      	ldrh	r3, [r3, #0]
 801aeac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801aeb0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801aeb4:	f7e9 fa86 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 801aeb8:	6803      	ldr	r3, [r0, #0]
 801aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aebc:	4798      	blx	r3
 801aebe:	23ff      	movs	r3, #255	; 0xff
 801aec0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801aec4:	a903      	add	r1, sp, #12
 801aec6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801aeca:	6860      	ldr	r0, [r4, #4]
 801aecc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801aed0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801aed4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801aed8:	6803      	ldr	r3, [r0, #0]
 801aeda:	685b      	ldr	r3, [r3, #4]
 801aedc:	4798      	blx	r3
 801aede:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801aee0:	b00d      	add	sp, #52	; 0x34
 801aee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aee4:	24027f66 	.word	0x24027f66

0801aee8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801aee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aeec:	b08c      	sub	sp, #48	; 0x30
 801aeee:	461e      	mov	r6, r3
 801aef0:	2300      	movs	r3, #0
 801aef2:	4604      	mov	r4, r0
 801aef4:	466d      	mov	r5, sp
 801aef6:	9306      	str	r3, [sp, #24]
 801aef8:	6803      	ldr	r3, [r0, #0]
 801aefa:	e885 0006 	stmia.w	r5, {r1, r2}
 801aefe:	2501      	movs	r5, #1
 801af00:	f8bd 7000 	ldrh.w	r7, [sp]
 801af04:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801af08:	9503      	str	r5, [sp, #12]
 801af0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af0c:	4798      	blx	r3
 801af0e:	4642      	mov	r2, r8
 801af10:	4639      	mov	r1, r7
 801af12:	4603      	mov	r3, r0
 801af14:	4620      	mov	r0, r4
 801af16:	f7ff ff47 	bl	801ada8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801af1a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801af1e:	9004      	str	r0, [sp, #16]
 801af20:	f8ad 3020 	strh.w	r3, [sp, #32]
 801af24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801af28:	9607      	str	r6, [sp, #28]
 801af2a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801af2e:	4b10      	ldr	r3, [pc, #64]	; (801af70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801af30:	881b      	ldrh	r3, [r3, #0]
 801af32:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801af36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801af38:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801af3c:	f7e9 fa42 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 801af40:	6803      	ldr	r3, [r0, #0]
 801af42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af44:	4798      	blx	r3
 801af46:	23ff      	movs	r3, #255	; 0xff
 801af48:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801af4c:	a903      	add	r1, sp, #12
 801af4e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801af52:	6860      	ldr	r0, [r4, #4]
 801af54:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801af58:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801af5c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801af60:	6803      	ldr	r3, [r0, #0]
 801af62:	685b      	ldr	r3, [r3, #4]
 801af64:	4798      	blx	r3
 801af66:	4630      	mov	r0, r6
 801af68:	b00c      	add	sp, #48	; 0x30
 801af6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af6e:	bf00      	nop
 801af70:	24027f66 	.word	0x24027f66

0801af74 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801af74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af76:	b085      	sub	sp, #20
 801af78:	4605      	mov	r5, r0
 801af7a:	ac02      	add	r4, sp, #8
 801af7c:	e884 0006 	stmia.w	r4, {r1, r2}
 801af80:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801af84:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801af88:	f7ff fde6 	bl	801ab58 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801af8c:	4631      	mov	r1, r6
 801af8e:	4603      	mov	r3, r0
 801af90:	463a      	mov	r2, r7
 801af92:	4628      	mov	r0, r5
 801af94:	f7ff ff08 	bl	801ada8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801af98:	4a05      	ldr	r2, [pc, #20]	; (801afb0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801af9a:	682b      	ldr	r3, [r5, #0]
 801af9c:	8812      	ldrh	r2, [r2, #0]
 801af9e:	9200      	str	r2, [sp, #0]
 801afa0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801afa2:	4603      	mov	r3, r0
 801afa4:	4628      	mov	r0, r5
 801afa6:	e894 0006 	ldmia.w	r4, {r1, r2}
 801afaa:	47b0      	blx	r6
 801afac:	b005      	add	sp, #20
 801afae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afb0:	24027f66 	.word	0x24027f66

0801afb4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801afb4:	b570      	push	{r4, r5, r6, lr}
 801afb6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801afba:	4604      	mov	r4, r0
 801afbc:	b19b      	cbz	r3, 801afe6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801afbe:	2002      	movs	r0, #2
 801afc0:	f7e5 fe58 	bl	8000c74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801afc4:	2300      	movs	r3, #0
 801afc6:	4620      	mov	r0, r4
 801afc8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801afcc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801afd0:	6823      	ldr	r3, [r4, #0]
 801afd2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801afd6:	f7ff fdbf 	bl	801ab58 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801afda:	4601      	mov	r1, r0
 801afdc:	4620      	mov	r0, r4
 801afde:	462b      	mov	r3, r5
 801afe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801afe4:	4718      	bx	r3
 801afe6:	bd70      	pop	{r4, r5, r6, pc}

0801afe8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801afe8:	b570      	push	{r4, r5, r6, lr}
 801afea:	4605      	mov	r5, r0
 801afec:	460c      	mov	r4, r1
 801afee:	2003      	movs	r0, #3
 801aff0:	b149      	cbz	r1, 801b006 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801aff2:	f7e5 fd83 	bl	8000afc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801aff6:	6928      	ldr	r0, [r5, #16]
 801aff8:	b168      	cbz	r0, 801b016 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801affa:	6803      	ldr	r3, [r0, #0]
 801affc:	2101      	movs	r1, #1
 801affe:	695b      	ldr	r3, [r3, #20]
 801b000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b004:	4718      	bx	r3
 801b006:	f7e5 fdd7 	bl	8000bb8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801b00a:	6928      	ldr	r0, [r5, #16]
 801b00c:	b118      	cbz	r0, 801b016 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801b00e:	6803      	ldr	r3, [r0, #0]
 801b010:	4621      	mov	r1, r4
 801b012:	695b      	ldr	r3, [r3, #20]
 801b014:	e7f4      	b.n	801b000 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801b016:	bd70      	pop	{r4, r5, r6, pc}

0801b018 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801b018:	b538      	push	{r3, r4, r5, lr}
 801b01a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801b01e:	4604      	mov	r4, r0
 801b020:	460d      	mov	r5, r1
 801b022:	428b      	cmp	r3, r1
 801b024:	d006      	beq.n	801b034 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801b026:	6803      	ldr	r3, [r0, #0]
 801b028:	b929      	cbnz	r1, 801b036 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801b02a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801b02e:	4798      	blx	r3
 801b030:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801b034:	bd38      	pop	{r3, r4, r5, pc}
 801b036:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801b03a:	e7f8      	b.n	801b02e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801b03c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801b03c:	4b0d      	ldr	r3, [pc, #52]	; (801b074 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801b03e:	b510      	push	{r4, lr}
 801b040:	781b      	ldrb	r3, [r3, #0]
 801b042:	4604      	mov	r4, r0
 801b044:	b95b      	cbnz	r3, 801b05e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b046:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801b04a:	2b02      	cmp	r3, #2
 801b04c:	d007      	beq.n	801b05e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b04e:	6840      	ldr	r0, [r0, #4]
 801b050:	f000 f926 	bl	801b2a0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801b054:	b118      	cbz	r0, 801b05e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b056:	6862      	ldr	r2, [r4, #4]
 801b058:	7a53      	ldrb	r3, [r2, #9]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d0fc      	beq.n	801b058 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801b05e:	f7e7 fb0b 	bl	8002678 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801b062:	4620      	mov	r0, r4
 801b064:	2100      	movs	r1, #0
 801b066:	f7ff ffd7 	bl	801b018 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801b06a:	4620      	mov	r0, r4
 801b06c:	f7ff fd74 	bl	801ab58 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b070:	bd10      	pop	{r4, pc}
 801b072:	bf00      	nop
 801b074:	24027f6a 	.word	0x24027f6a

0801b078 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801b078:	b570      	push	{r4, r5, r6, lr}
 801b07a:	4604      	mov	r4, r0
 801b07c:	6803      	ldr	r3, [r0, #0]
 801b07e:	b919      	cbnz	r1, 801b088 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 801b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b086:	4718      	bx	r3
 801b088:	2200      	movs	r2, #0
 801b08a:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 801b08e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 801b092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b094:	4798      	blx	r3
 801b096:	4605      	mov	r5, r0
 801b098:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 801b09c:	4620      	mov	r0, r4
 801b09e:	2101      	movs	r1, #1
 801b0a0:	f7ff ffba 	bl	801b018 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801b0a4:	4628      	mov	r0, r5
 801b0a6:	bd70      	pop	{r4, r5, r6, pc}

0801b0a8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801b0a8:	4770      	bx	lr

0801b0aa <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801b0aa:	2000      	movs	r0, #0
 801b0ac:	4770      	bx	lr

0801b0ae <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801b0ae:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801b0b2:	1a13      	subs	r3, r2, r0
 801b0b4:	4258      	negs	r0, r3
 801b0b6:	4158      	adcs	r0, r3
 801b0b8:	4770      	bx	lr

0801b0ba <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801b0ba:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801b0be:	1a9b      	subs	r3, r3, r2
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	bfdc      	itt	le
 801b0c4:	6882      	ldrle	r2, [r0, #8]
 801b0c6:	189b      	addle	r3, r3, r2
 801b0c8:	2b01      	cmp	r3, #1
 801b0ca:	bfcc      	ite	gt
 801b0cc:	2000      	movgt	r0, #0
 801b0ce:	2001      	movle	r0, #1
 801b0d0:	4770      	bx	lr

0801b0d2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801b0d2:	6902      	ldr	r2, [r0, #16]
 801b0d4:	6843      	ldr	r3, [r0, #4]
 801b0d6:	2024      	movs	r0, #36	; 0x24
 801b0d8:	fb00 3002 	mla	r0, r0, r2, r3
 801b0dc:	4770      	bx	lr

0801b0de <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801b0de:	6803      	ldr	r3, [r0, #0]
 801b0e0:	691b      	ldr	r3, [r3, #16]
 801b0e2:	4718      	bx	r3

0801b0e4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801b0e4:	2301      	movs	r3, #1
 801b0e6:	b570      	push	{r4, r5, r6, lr}
 801b0e8:	7203      	strb	r3, [r0, #8]
 801b0ea:	4604      	mov	r4, r0
 801b0ec:	6840      	ldr	r0, [r0, #4]
 801b0ee:	6803      	ldr	r3, [r0, #0]
 801b0f0:	699b      	ldr	r3, [r3, #24]
 801b0f2:	4798      	blx	r3
 801b0f4:	6803      	ldr	r3, [r0, #0]
 801b0f6:	4605      	mov	r5, r0
 801b0f8:	2b40      	cmp	r3, #64	; 0x40
 801b0fa:	d00c      	beq.n	801b116 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b0fc:	d810      	bhi.n	801b120 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801b0fe:	2b04      	cmp	r3, #4
 801b100:	d01d      	beq.n	801b13e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801b102:	d804      	bhi.n	801b10e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801b104:	2b01      	cmp	r3, #1
 801b106:	d006      	beq.n	801b116 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b108:	2b02      	cmp	r3, #2
 801b10a:	d02c      	beq.n	801b166 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801b10c:	bd70      	pop	{r4, r5, r6, pc}
 801b10e:	2b08      	cmp	r3, #8
 801b110:	d01d      	beq.n	801b14e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801b112:	2b20      	cmp	r3, #32
 801b114:	d1fa      	bne.n	801b10c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801b116:	6823      	ldr	r3, [r4, #0]
 801b118:	4620      	mov	r0, r4
 801b11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b11c:	4798      	blx	r3
 801b11e:	e013      	b.n	801b148 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801b120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b124:	d0f7      	beq.n	801b116 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b126:	d804      	bhi.n	801b132 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801b128:	2b80      	cmp	r3, #128	; 0x80
 801b12a:	d0f4      	beq.n	801b116 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b12c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b130:	e7f0      	b.n	801b114 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801b132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b136:	d0ee      	beq.n	801b116 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b13c:	e7e5      	b.n	801b10a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801b13e:	6823      	ldr	r3, [r4, #0]
 801b140:	7f01      	ldrb	r1, [r0, #28]
 801b142:	4620      	mov	r0, r4
 801b144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b146:	4798      	blx	r3
 801b148:	6823      	ldr	r3, [r4, #0]
 801b14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b14c:	e006      	b.n	801b15c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801b14e:	6823      	ldr	r3, [r4, #0]
 801b150:	7f01      	ldrb	r1, [r0, #28]
 801b152:	4620      	mov	r0, r4
 801b154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b156:	4798      	blx	r3
 801b158:	6823      	ldr	r3, [r4, #0]
 801b15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b15c:	4629      	mov	r1, r5
 801b15e:	4620      	mov	r0, r4
 801b160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b164:	4718      	bx	r3
 801b166:	6823      	ldr	r3, [r4, #0]
 801b168:	4620      	mov	r0, r4
 801b16a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b16c:	4798      	blx	r3
 801b16e:	e7f3      	b.n	801b158 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801b170 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801b170:	4770      	bx	lr

0801b172 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801b172:	4770      	bx	lr

0801b174 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801b174:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801b178:	b510      	push	{r4, lr}
 801b17a:	1ad2      	subs	r2, r2, r3
 801b17c:	2a00      	cmp	r2, #0
 801b17e:	bfdc      	itt	le
 801b180:	6884      	ldrle	r4, [r0, #8]
 801b182:	1912      	addle	r2, r2, r4
 801b184:	2a01      	cmp	r2, #1
 801b186:	dd16      	ble.n	801b1b6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801b188:	6842      	ldr	r2, [r0, #4]
 801b18a:	2424      	movs	r4, #36	; 0x24
 801b18c:	fb04 2303 	mla	r3, r4, r3, r2
 801b190:	f101 0220 	add.w	r2, r1, #32
 801b194:	f851 4b04 	ldr.w	r4, [r1], #4
 801b198:	4291      	cmp	r1, r2
 801b19a:	f843 4b04 	str.w	r4, [r3], #4
 801b19e:	d1f9      	bne.n	801b194 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801b1a0:	780a      	ldrb	r2, [r1, #0]
 801b1a2:	701a      	strb	r2, [r3, #0]
 801b1a4:	68c3      	ldr	r3, [r0, #12]
 801b1a6:	6882      	ldr	r2, [r0, #8]
 801b1a8:	f3bf 8f5b 	dmb	ish
 801b1ac:	3301      	adds	r3, #1
 801b1ae:	429a      	cmp	r2, r3
 801b1b0:	bfd8      	it	le
 801b1b2:	1a9b      	suble	r3, r3, r2
 801b1b4:	60c3      	str	r3, [r0, #12]
 801b1b6:	bd10      	pop	{r4, pc}

0801b1b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801b1b8:	6903      	ldr	r3, [r0, #16]
 801b1ba:	6882      	ldr	r2, [r0, #8]
 801b1bc:	f3bf 8f5b 	dmb	ish
 801b1c0:	3301      	adds	r3, #1
 801b1c2:	429a      	cmp	r2, r3
 801b1c4:	bfd8      	it	le
 801b1c6:	1a9b      	suble	r3, r3, r2
 801b1c8:	6103      	str	r3, [r0, #16]
 801b1ca:	4770      	bx	lr

0801b1cc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801b1cc:	b570      	push	{r4, r5, r6, lr}
 801b1ce:	4604      	mov	r4, r0
 801b1d0:	460e      	mov	r6, r1
 801b1d2:	6860      	ldr	r0, [r4, #4]
 801b1d4:	6803      	ldr	r3, [r0, #0]
 801b1d6:	685b      	ldr	r3, [r3, #4]
 801b1d8:	4798      	blx	r3
 801b1da:	2800      	cmp	r0, #0
 801b1dc:	d1f9      	bne.n	801b1d2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801b1de:	4d0d      	ldr	r5, [pc, #52]	; (801b214 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801b1e0:	6828      	ldr	r0, [r5, #0]
 801b1e2:	6803      	ldr	r3, [r0, #0]
 801b1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b1e6:	4798      	blx	r3
 801b1e8:	f7e7 fa60 	bl	80026ac <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801b1ec:	6828      	ldr	r0, [r5, #0]
 801b1ee:	2101      	movs	r1, #1
 801b1f0:	f7ff ff12 	bl	801b018 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801b1f4:	6860      	ldr	r0, [r4, #4]
 801b1f6:	4631      	mov	r1, r6
 801b1f8:	6803      	ldr	r3, [r0, #0]
 801b1fa:	689b      	ldr	r3, [r3, #8]
 801b1fc:	4798      	blx	r3
 801b1fe:	6823      	ldr	r3, [r4, #0]
 801b200:	4620      	mov	r0, r4
 801b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b204:	4798      	blx	r3
 801b206:	6828      	ldr	r0, [r5, #0]
 801b208:	6803      	ldr	r3, [r0, #0]
 801b20a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b20e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b210:	4718      	bx	r3
 801b212:	bf00      	nop
 801b214:	24027f6c 	.word	0x24027f6c

0801b218 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801b218:	b508      	push	{r3, lr}
 801b21a:	f7e7 fa2d 	bl	8002678 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801b21e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b222:	f7e7 ba37 	b.w	8002694 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801b226 <_ZN8touchgfx13DMA_Interface5startEv>:
 801b226:	b510      	push	{r4, lr}
 801b228:	4604      	mov	r4, r0
 801b22a:	6840      	ldr	r0, [r0, #4]
 801b22c:	6803      	ldr	r3, [r0, #0]
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	4798      	blx	r3
 801b232:	b948      	cbnz	r0, 801b248 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b234:	7a63      	ldrb	r3, [r4, #9]
 801b236:	b13b      	cbz	r3, 801b248 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b238:	7a23      	ldrb	r3, [r4, #8]
 801b23a:	b92b      	cbnz	r3, 801b248 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b23c:	6823      	ldr	r3, [r4, #0]
 801b23e:	4620      	mov	r0, r4
 801b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b246:	4718      	bx	r3
 801b248:	bd10      	pop	{r4, pc}

0801b24a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801b24a:	b570      	push	{r4, r5, r6, lr}
 801b24c:	4604      	mov	r4, r0
 801b24e:	6840      	ldr	r0, [r0, #4]
 801b250:	6803      	ldr	r3, [r0, #0]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	4798      	blx	r3
 801b256:	4605      	mov	r5, r0
 801b258:	b930      	cbnz	r0, 801b268 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801b25a:	7a23      	ldrb	r3, [r4, #8]
 801b25c:	b123      	cbz	r3, 801b268 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801b25e:	6860      	ldr	r0, [r4, #4]
 801b260:	6803      	ldr	r3, [r0, #0]
 801b262:	695b      	ldr	r3, [r3, #20]
 801b264:	4798      	blx	r3
 801b266:	7225      	strb	r5, [r4, #8]
 801b268:	6860      	ldr	r0, [r4, #4]
 801b26a:	6803      	ldr	r3, [r0, #0]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	4798      	blx	r3
 801b270:	b928      	cbnz	r0, 801b27e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801b272:	6823      	ldr	r3, [r4, #0]
 801b274:	4620      	mov	r0, r4
 801b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b27c:	4718      	bx	r3
 801b27e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b282:	f7e7 ba1f 	b.w	80026c4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801b288 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801b288:	b510      	push	{r4, lr}
 801b28a:	6082      	str	r2, [r0, #8]
 801b28c:	2200      	movs	r2, #0
 801b28e:	4c03      	ldr	r4, [pc, #12]	; (801b29c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801b290:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801b294:	e9c0 4100 	strd	r4, r1, [r0]
 801b298:	bd10      	pop	{r4, pc}
 801b29a:	bf00      	nop
 801b29c:	0802f5e4 	.word	0x0802f5e4

0801b2a0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801b2a0:	6840      	ldr	r0, [r0, #4]
 801b2a2:	6803      	ldr	r3, [r0, #0]
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	4718      	bx	r3

0801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801b2a8:	b507      	push	{r0, r1, r2, lr}
 801b2aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801b2ae:	ab01      	add	r3, sp, #4
 801b2b0:	6809      	ldr	r1, [r1, #0]
 801b2b2:	6800      	ldr	r0, [r0, #0]
 801b2b4:	f005 f9b3 	bl	802061e <_ZN8touchgfx6muldivElllRl>
 801b2b8:	b003      	add	sp, #12
 801b2ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801b2c0 <_ZN8touchgfx7CWRUtil4sineEi>:
 801b2c0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801b2c4:	fb90 f2f3 	sdiv	r2, r0, r3
 801b2c8:	fb02 0013 	mls	r0, r2, r3, r0
 801b2cc:	2800      	cmp	r0, #0
 801b2ce:	bfb8      	it	lt
 801b2d0:	18c0      	addlt	r0, r0, r3
 801b2d2:	4b0a      	ldr	r3, [pc, #40]	; (801b2fc <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 801b2d4:	285a      	cmp	r0, #90	; 0x5a
 801b2d6:	dc02      	bgt.n	801b2de <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 801b2d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801b2dc:	4770      	bx	lr
 801b2de:	28b4      	cmp	r0, #180	; 0xb4
 801b2e0:	dc02      	bgt.n	801b2e8 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 801b2e2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801b2e6:	e7f7      	b.n	801b2d8 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 801b2e8:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801b2ec:	bfd4      	ite	le
 801b2ee:	38b4      	suble	r0, #180	; 0xb4
 801b2f0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801b2f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801b2f8:	4240      	negs	r0, r0
 801b2fa:	4770      	bx	lr
 801b2fc:	0802f600 	.word	0x0802f600

0801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 801b300:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 801b304:	fb90 f2f3 	sdiv	r2, r0, r3
 801b308:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b30a:	fb02 0013 	mls	r0, r2, r3, r0
 801b30e:	2800      	cmp	r0, #0
 801b310:	bfb8      	it	lt
 801b312:	18c0      	addlt	r0, r0, r3
 801b314:	1144      	asrs	r4, r0, #5
 801b316:	f000 061f 	and.w	r6, r0, #31
 801b31a:	4620      	mov	r0, r4
 801b31c:	f7ff ffd0 	bl	801b2c0 <_ZN8touchgfx7CWRUtil4sineEi>
 801b320:	4605      	mov	r5, r0
 801b322:	b90e      	cbnz	r6, 801b328 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 801b324:	b002      	add	sp, #8
 801b326:	bd70      	pop	{r4, r5, r6, pc}
 801b328:	1c60      	adds	r0, r4, #1
 801b32a:	f7ff ffc9 	bl	801b2c0 <_ZN8touchgfx7CWRUtil4sineEi>
 801b32e:	ab01      	add	r3, sp, #4
 801b330:	2220      	movs	r2, #32
 801b332:	4631      	mov	r1, r6
 801b334:	1b40      	subs	r0, r0, r5
 801b336:	f005 f972 	bl	802061e <_ZN8touchgfx6muldivElllRl>
 801b33a:	4428      	add	r0, r5
 801b33c:	e7f2      	b.n	801b324 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

0801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 801b33e:	b508      	push	{r3, lr}
 801b340:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 801b344:	f7ff ffdc 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801b348:	bd08      	pop	{r3, pc}
	...

0801b34c <_ZN8touchgfx6CircleC1Ev>:
 801b34c:	b510      	push	{r4, lr}
 801b34e:	4604      	mov	r4, r0
 801b350:	f000 fd78 	bl	801be44 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801b354:	4b08      	ldr	r3, [pc, #32]	; (801b378 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 801b356:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 801b35a:	4620      	mov	r0, r4
 801b35c:	6023      	str	r3, [r4, #0]
 801b35e:	2300      	movs	r3, #0
 801b360:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 801b364:	f24b 4205 	movw	r2, #46085	; 0xb405
 801b368:	60a3      	str	r3, [r4, #8]
 801b36a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801b36e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801b372:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 801b376:	bd10      	pop	{r4, pc}
 801b378:	0802f6c0 	.word	0x0802f6c0

0801b37c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 801b37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b380:	428a      	cmp	r2, r1
 801b382:	4680      	mov	r8, r0
 801b384:	4610      	mov	r0, r2
 801b386:	4699      	mov	r9, r3
 801b388:	bfaa      	itet	ge
 801b38a:	460a      	movge	r2, r1
 801b38c:	460b      	movlt	r3, r1
 801b38e:	4603      	movge	r3, r0
 801b390:	b085      	sub	sp, #20
 801b392:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 801b396:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 801b39a:	1a99      	subs	r1, r3, r2
 801b39c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801b39e:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 801b3a2:	bfa4      	itt	ge
 801b3a4:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 801b3a8:	2200      	movge	r2, #0
 801b3aa:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 801b3ae:	9300      	str	r3, [sp, #0]
 801b3b0:	f102 0b01 	add.w	fp, r2, #1
 801b3b4:	2c00      	cmp	r4, #0
 801b3b6:	f040 80ae 	bne.w	801b516 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19a>
 801b3ba:	4610      	mov	r0, r2
 801b3bc:	9201      	str	r2, [sp, #4]
 801b3be:	f7ff ff9f 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801b3c2:	a903      	add	r1, sp, #12
 801b3c4:	9003      	str	r0, [sp, #12]
 801b3c6:	4650      	mov	r0, sl
 801b3c8:	f7ff ff6e 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b3cc:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 801b3d0:	9a01      	ldr	r2, [sp, #4]
 801b3d2:	4408      	add	r0, r1
 801b3d4:	f8d9 1000 	ldr.w	r1, [r9]
 801b3d8:	4281      	cmp	r1, r0
 801b3da:	bfc8      	it	gt
 801b3dc:	f8c9 0000 	strgt.w	r0, [r9]
 801b3e0:	6839      	ldr	r1, [r7, #0]
 801b3e2:	4288      	cmp	r0, r1
 801b3e4:	bfc8      	it	gt
 801b3e6:	6038      	strgt	r0, [r7, #0]
 801b3e8:	4610      	mov	r0, r2
 801b3ea:	f7ff ffa8 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801b3ee:	a903      	add	r1, sp, #12
 801b3f0:	9003      	str	r0, [sp, #12]
 801b3f2:	4650      	mov	r0, sl
 801b3f4:	f7ff ff58 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b3f8:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801b3fc:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 801b400:	1a10      	subs	r0, r2, r0
 801b402:	6832      	ldr	r2, [r6, #0]
 801b404:	4282      	cmp	r2, r0
 801b406:	bfc8      	it	gt
 801b408:	6030      	strgt	r0, [r6, #0]
 801b40a:	682a      	ldr	r2, [r5, #0]
 801b40c:	4290      	cmp	r0, r2
 801b40e:	fb9b f2f1 	sdiv	r2, fp, r1
 801b412:	fb01 b212 	mls	r2, r1, r2, fp
 801b416:	bfc8      	it	gt
 801b418:	6028      	strgt	r0, [r5, #0]
 801b41a:	1a8a      	subs	r2, r1, r2
 801b41c:	fb92 f0f1 	sdiv	r0, r2, r1
 801b420:	fb01 2210 	mls	r2, r1, r0, r2
 801b424:	4493      	add	fp, r2
 801b426:	9b00      	ldr	r3, [sp, #0]
 801b428:	455b      	cmp	r3, fp
 801b42a:	db2a      	blt.n	801b482 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x106>
 801b42c:	4658      	mov	r0, fp
 801b42e:	f7ff ff67 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801b432:	a903      	add	r1, sp, #12
 801b434:	9003      	str	r0, [sp, #12]
 801b436:	4650      	mov	r0, sl
 801b438:	f7ff ff36 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b43c:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801b440:	4410      	add	r0, r2
 801b442:	f8d9 2000 	ldr.w	r2, [r9]
 801b446:	4282      	cmp	r2, r0
 801b448:	bfc8      	it	gt
 801b44a:	f8c9 0000 	strgt.w	r0, [r9]
 801b44e:	683a      	ldr	r2, [r7, #0]
 801b450:	4290      	cmp	r0, r2
 801b452:	bfc8      	it	gt
 801b454:	6038      	strgt	r0, [r7, #0]
 801b456:	4658      	mov	r0, fp
 801b458:	f7ff ff71 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801b45c:	a903      	add	r1, sp, #12
 801b45e:	9003      	str	r0, [sp, #12]
 801b460:	4650      	mov	r0, sl
 801b462:	f7ff ff21 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b466:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801b46a:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 801b46e:	1a10      	subs	r0, r2, r0
 801b470:	6832      	ldr	r2, [r6, #0]
 801b472:	4282      	cmp	r2, r0
 801b474:	bfc8      	it	gt
 801b476:	6030      	strgt	r0, [r6, #0]
 801b478:	682a      	ldr	r2, [r5, #0]
 801b47a:	4290      	cmp	r0, r2
 801b47c:	bfc8      	it	gt
 801b47e:	6028      	strgt	r0, [r5, #0]
 801b480:	e7d1      	b.n	801b426 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xaa>
 801b482:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 801b486:	9b00      	ldr	r3, [sp, #0]
 801b488:	455b      	cmp	r3, fp
 801b48a:	dd27      	ble.n	801b4dc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x160>
 801b48c:	4618      	mov	r0, r3
 801b48e:	f7ff ff37 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801b492:	a903      	add	r1, sp, #12
 801b494:	9003      	str	r0, [sp, #12]
 801b496:	4650      	mov	r0, sl
 801b498:	f7ff ff06 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b49c:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801b4a0:	4410      	add	r0, r2
 801b4a2:	f8d9 2000 	ldr.w	r2, [r9]
 801b4a6:	4282      	cmp	r2, r0
 801b4a8:	bfc8      	it	gt
 801b4aa:	f8c9 0000 	strgt.w	r0, [r9]
 801b4ae:	683a      	ldr	r2, [r7, #0]
 801b4b0:	4290      	cmp	r0, r2
 801b4b2:	bfc8      	it	gt
 801b4b4:	6038      	strgt	r0, [r7, #0]
 801b4b6:	9800      	ldr	r0, [sp, #0]
 801b4b8:	f7ff ff41 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801b4bc:	a903      	add	r1, sp, #12
 801b4be:	9003      	str	r0, [sp, #12]
 801b4c0:	4650      	mov	r0, sl
 801b4c2:	f7ff fef1 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b4c6:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801b4ca:	1a10      	subs	r0, r2, r0
 801b4cc:	6832      	ldr	r2, [r6, #0]
 801b4ce:	4282      	cmp	r2, r0
 801b4d0:	bfc8      	it	gt
 801b4d2:	6030      	strgt	r0, [r6, #0]
 801b4d4:	682a      	ldr	r2, [r5, #0]
 801b4d6:	4290      	cmp	r0, r2
 801b4d8:	bfc8      	it	gt
 801b4da:	6028      	strgt	r0, [r5, #0]
 801b4dc:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801b4e0:	f8d9 1000 	ldr.w	r1, [r9]
 801b4e4:	4291      	cmp	r1, r2
 801b4e6:	bfc8      	it	gt
 801b4e8:	f8c9 2000 	strgt.w	r2, [r9]
 801b4ec:	683a      	ldr	r2, [r7, #0]
 801b4ee:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 801b4f2:	429a      	cmp	r2, r3
 801b4f4:	bfb8      	it	lt
 801b4f6:	603b      	strlt	r3, [r7, #0]
 801b4f8:	6832      	ldr	r2, [r6, #0]
 801b4fa:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 801b4fe:	429a      	cmp	r2, r3
 801b500:	bfc8      	it	gt
 801b502:	6033      	strgt	r3, [r6, #0]
 801b504:	682a      	ldr	r2, [r5, #0]
 801b506:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 801b50a:	429a      	cmp	r2, r3
 801b50c:	da00      	bge.n	801b510 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 801b50e:	602b      	str	r3, [r5, #0]
 801b510:	b005      	add	sp, #20
 801b512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b516:	2002      	movs	r0, #2
 801b518:	3401      	adds	r4, #1
 801b51a:	9201      	str	r2, [sp, #4]
 801b51c:	fb94 f4f0 	sdiv	r4, r4, r0
 801b520:	4610      	mov	r0, r2
 801b522:	f7ff feed 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801b526:	a903      	add	r1, sp, #12
 801b528:	9003      	str	r0, [sp, #12]
 801b52a:	4650      	mov	r0, sl
 801b52c:	f7ff febc 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b530:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 801b534:	9a01      	ldr	r2, [sp, #4]
 801b536:	4408      	add	r0, r1
 801b538:	f8d9 1000 	ldr.w	r1, [r9]
 801b53c:	1b03      	subs	r3, r0, r4
 801b53e:	4420      	add	r0, r4
 801b540:	4299      	cmp	r1, r3
 801b542:	bfc8      	it	gt
 801b544:	f8c9 3000 	strgt.w	r3, [r9]
 801b548:	6839      	ldr	r1, [r7, #0]
 801b54a:	428b      	cmp	r3, r1
 801b54c:	bfc8      	it	gt
 801b54e:	603b      	strgt	r3, [r7, #0]
 801b550:	f8d9 1000 	ldr.w	r1, [r9]
 801b554:	4281      	cmp	r1, r0
 801b556:	bfc8      	it	gt
 801b558:	f8c9 0000 	strgt.w	r0, [r9]
 801b55c:	6839      	ldr	r1, [r7, #0]
 801b55e:	4288      	cmp	r0, r1
 801b560:	bfc8      	it	gt
 801b562:	6038      	strgt	r0, [r7, #0]
 801b564:	4610      	mov	r0, r2
 801b566:	f7ff feea 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801b56a:	a903      	add	r1, sp, #12
 801b56c:	9003      	str	r0, [sp, #12]
 801b56e:	4650      	mov	r0, sl
 801b570:	f7ff fe9a 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b574:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801b578:	1a10      	subs	r0, r2, r0
 801b57a:	6832      	ldr	r2, [r6, #0]
 801b57c:	1b01      	subs	r1, r0, r4
 801b57e:	4420      	add	r0, r4
 801b580:	428a      	cmp	r2, r1
 801b582:	bfc8      	it	gt
 801b584:	6031      	strgt	r1, [r6, #0]
 801b586:	682a      	ldr	r2, [r5, #0]
 801b588:	4291      	cmp	r1, r2
 801b58a:	bfc8      	it	gt
 801b58c:	6029      	strgt	r1, [r5, #0]
 801b58e:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 801b592:	6832      	ldr	r2, [r6, #0]
 801b594:	4282      	cmp	r2, r0
 801b596:	bfc8      	it	gt
 801b598:	6030      	strgt	r0, [r6, #0]
 801b59a:	682a      	ldr	r2, [r5, #0]
 801b59c:	4290      	cmp	r0, r2
 801b59e:	fb9b f2f1 	sdiv	r2, fp, r1
 801b5a2:	fb01 b212 	mls	r2, r1, r2, fp
 801b5a6:	bfc8      	it	gt
 801b5a8:	6028      	strgt	r0, [r5, #0]
 801b5aa:	1a8a      	subs	r2, r1, r2
 801b5ac:	fb92 f0f1 	sdiv	r0, r2, r1
 801b5b0:	fb01 2210 	mls	r2, r1, r0, r2
 801b5b4:	4493      	add	fp, r2
 801b5b6:	9b00      	ldr	r3, [sp, #0]
 801b5b8:	455b      	cmp	r3, fp
 801b5ba:	db40      	blt.n	801b63e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c2>
 801b5bc:	4658      	mov	r0, fp
 801b5be:	f7ff fe9f 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801b5c2:	a903      	add	r1, sp, #12
 801b5c4:	9003      	str	r0, [sp, #12]
 801b5c6:	4650      	mov	r0, sl
 801b5c8:	f7ff fe6e 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b5cc:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801b5d0:	4410      	add	r0, r2
 801b5d2:	f8d9 2000 	ldr.w	r2, [r9]
 801b5d6:	1b01      	subs	r1, r0, r4
 801b5d8:	4420      	add	r0, r4
 801b5da:	428a      	cmp	r2, r1
 801b5dc:	bfc8      	it	gt
 801b5de:	f8c9 1000 	strgt.w	r1, [r9]
 801b5e2:	683a      	ldr	r2, [r7, #0]
 801b5e4:	4291      	cmp	r1, r2
 801b5e6:	bfc8      	it	gt
 801b5e8:	6039      	strgt	r1, [r7, #0]
 801b5ea:	f8d9 2000 	ldr.w	r2, [r9]
 801b5ee:	4282      	cmp	r2, r0
 801b5f0:	bfc8      	it	gt
 801b5f2:	f8c9 0000 	strgt.w	r0, [r9]
 801b5f6:	683a      	ldr	r2, [r7, #0]
 801b5f8:	4290      	cmp	r0, r2
 801b5fa:	bfc8      	it	gt
 801b5fc:	6038      	strgt	r0, [r7, #0]
 801b5fe:	4658      	mov	r0, fp
 801b600:	f7ff fe9d 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801b604:	a903      	add	r1, sp, #12
 801b606:	9003      	str	r0, [sp, #12]
 801b608:	4650      	mov	r0, sl
 801b60a:	f7ff fe4d 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b60e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801b612:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 801b616:	1a10      	subs	r0, r2, r0
 801b618:	6832      	ldr	r2, [r6, #0]
 801b61a:	1b01      	subs	r1, r0, r4
 801b61c:	4420      	add	r0, r4
 801b61e:	428a      	cmp	r2, r1
 801b620:	bfc8      	it	gt
 801b622:	6031      	strgt	r1, [r6, #0]
 801b624:	682a      	ldr	r2, [r5, #0]
 801b626:	4291      	cmp	r1, r2
 801b628:	bfc8      	it	gt
 801b62a:	6029      	strgt	r1, [r5, #0]
 801b62c:	6832      	ldr	r2, [r6, #0]
 801b62e:	4282      	cmp	r2, r0
 801b630:	bfc8      	it	gt
 801b632:	6030      	strgt	r0, [r6, #0]
 801b634:	682a      	ldr	r2, [r5, #0]
 801b636:	4290      	cmp	r0, r2
 801b638:	bfc8      	it	gt
 801b63a:	6028      	strgt	r0, [r5, #0]
 801b63c:	e7bb      	b.n	801b5b6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23a>
 801b63e:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 801b642:	9b00      	ldr	r3, [sp, #0]
 801b644:	455b      	cmp	r3, fp
 801b646:	f77f af63 	ble.w	801b510 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 801b64a:	4618      	mov	r0, r3
 801b64c:	f7ff fe58 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801b650:	a903      	add	r1, sp, #12
 801b652:	9003      	str	r0, [sp, #12]
 801b654:	4650      	mov	r0, sl
 801b656:	f7ff fe27 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b65a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801b65e:	4410      	add	r0, r2
 801b660:	f8d9 2000 	ldr.w	r2, [r9]
 801b664:	1b01      	subs	r1, r0, r4
 801b666:	4420      	add	r0, r4
 801b668:	428a      	cmp	r2, r1
 801b66a:	bfc8      	it	gt
 801b66c:	f8c9 1000 	strgt.w	r1, [r9]
 801b670:	683a      	ldr	r2, [r7, #0]
 801b672:	4291      	cmp	r1, r2
 801b674:	bfc8      	it	gt
 801b676:	6039      	strgt	r1, [r7, #0]
 801b678:	f8d9 2000 	ldr.w	r2, [r9]
 801b67c:	4282      	cmp	r2, r0
 801b67e:	bfc8      	it	gt
 801b680:	f8c9 0000 	strgt.w	r0, [r9]
 801b684:	683b      	ldr	r3, [r7, #0]
 801b686:	4298      	cmp	r0, r3
 801b688:	bfc8      	it	gt
 801b68a:	6038      	strgt	r0, [r7, #0]
 801b68c:	9800      	ldr	r0, [sp, #0]
 801b68e:	f7ff fe56 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801b692:	a903      	add	r1, sp, #12
 801b694:	9003      	str	r0, [sp, #12]
 801b696:	4650      	mov	r0, sl
 801b698:	f7ff fe06 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b69c:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 801b6a0:	6832      	ldr	r2, [r6, #0]
 801b6a2:	1a18      	subs	r0, r3, r0
 801b6a4:	1b03      	subs	r3, r0, r4
 801b6a6:	4404      	add	r4, r0
 801b6a8:	429a      	cmp	r2, r3
 801b6aa:	bfc8      	it	gt
 801b6ac:	6033      	strgt	r3, [r6, #0]
 801b6ae:	682a      	ldr	r2, [r5, #0]
 801b6b0:	4293      	cmp	r3, r2
 801b6b2:	bfc8      	it	gt
 801b6b4:	602b      	strgt	r3, [r5, #0]
 801b6b6:	6833      	ldr	r3, [r6, #0]
 801b6b8:	42a3      	cmp	r3, r4
 801b6ba:	bfc8      	it	gt
 801b6bc:	6034      	strgt	r4, [r6, #0]
 801b6be:	682b      	ldr	r3, [r5, #0]
 801b6c0:	429c      	cmp	r4, r3
 801b6c2:	bfc8      	it	gt
 801b6c4:	602c      	strgt	r4, [r5, #0]
 801b6c6:	e723      	b.n	801b510 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>

0801b6c8 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801b6c8:	b530      	push	{r4, r5, lr}
 801b6ca:	4604      	mov	r4, r0
 801b6cc:	4608      	mov	r0, r1
 801b6ce:	4611      	mov	r1, r2
 801b6d0:	461a      	mov	r2, r3
 801b6d2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b6d6:	b089      	sub	sp, #36	; 0x24
 801b6d8:	2500      	movs	r5, #0
 801b6da:	015b      	lsls	r3, r3, #5
 801b6dc:	9505      	str	r5, [sp, #20]
 801b6de:	9304      	str	r3, [sp, #16]
 801b6e0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b6e4:	015b      	lsls	r3, r3, #5
 801b6e6:	e9cd 3506 	strd	r3, r5, [sp, #24]
 801b6ea:	ab07      	add	r3, sp, #28
 801b6ec:	2520      	movs	r5, #32
 801b6ee:	9302      	str	r3, [sp, #8]
 801b6f0:	ab06      	add	r3, sp, #24
 801b6f2:	9301      	str	r3, [sp, #4]
 801b6f4:	ab05      	add	r3, sp, #20
 801b6f6:	9300      	str	r3, [sp, #0]
 801b6f8:	ab04      	add	r3, sp, #16
 801b6fa:	f7ff fe3f 	bl	801b37c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 801b6fe:	9a04      	ldr	r2, [sp, #16]
 801b700:	9805      	ldr	r0, [sp, #20]
 801b702:	9b06      	ldr	r3, [sp, #24]
 801b704:	9907      	ldr	r1, [sp, #28]
 801b706:	fb92 f2f5 	sdiv	r2, r2, r5
 801b70a:	fb90 f0f5 	sdiv	r0, r0, r5
 801b70e:	fb93 f3f5 	sdiv	r3, r3, r5
 801b712:	fb91 f1f5 	sdiv	r1, r1, r5
 801b716:	b292      	uxth	r2, r2
 801b718:	3002      	adds	r0, #2
 801b71a:	b29b      	uxth	r3, r3
 801b71c:	3102      	adds	r1, #2
 801b71e:	1a80      	subs	r0, r0, r2
 801b720:	3a01      	subs	r2, #1
 801b722:	1ac9      	subs	r1, r1, r3
 801b724:	3b01      	subs	r3, #1
 801b726:	80a0      	strh	r0, [r4, #4]
 801b728:	4620      	mov	r0, r4
 801b72a:	8022      	strh	r2, [r4, #0]
 801b72c:	8063      	strh	r3, [r4, #2]
 801b72e:	80e1      	strh	r1, [r4, #6]
 801b730:	b009      	add	sp, #36	; 0x24
 801b732:	bd30      	pop	{r4, r5, pc}

0801b734 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801b734:	b510      	push	{r4, lr}
 801b736:	4604      	mov	r4, r0
 801b738:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 801b73c:	f7ff ffc4 	bl	801b6c8 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 801b740:	4620      	mov	r0, r4
 801b742:	bd10      	pop	{r4, pc}

0801b744 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 801b744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b746:	e9d1 540e 	ldrd	r5, r4, [r1, #56]	; 0x38
 801b74a:	4606      	mov	r6, r0
 801b74c:	f891 0044 	ldrb.w	r0, [r1, #68]	; 0x44
 801b750:	42a5      	cmp	r5, r4
 801b752:	6813      	ldr	r3, [r2, #0]
 801b754:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801b758:	da2b      	bge.n	801b7b2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 801b75a:	42a3      	cmp	r3, r4
 801b75c:	dd14      	ble.n	801b788 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 801b75e:	b168      	cbz	r0, 801b77c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 801b760:	4267      	negs	r7, r4
 801b762:	fb97 f2f0 	sdiv	r2, r7, r0
 801b766:	fb00 7212 	mls	r2, r0, r2, r7
 801b76a:	1a82      	subs	r2, r0, r2
 801b76c:	fb92 f7f0 	sdiv	r7, r2, r0
 801b770:	fb00 2017 	mls	r0, r0, r7, r2
 801b774:	1a24      	subs	r4, r4, r0
 801b776:	42ac      	cmp	r4, r5
 801b778:	bfb8      	it	lt
 801b77a:	462c      	movlt	r4, r5
 801b77c:	4630      	mov	r0, r6
 801b77e:	4622      	mov	r2, r4
 801b780:	f7ff ffa2 	bl	801b6c8 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 801b784:	4630      	mov	r0, r6
 801b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b788:	42ab      	cmp	r3, r5
 801b78a:	dd0e      	ble.n	801b7aa <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 801b78c:	b168      	cbz	r0, 801b7aa <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 801b78e:	425f      	negs	r7, r3
 801b790:	fb97 f2f0 	sdiv	r2, r7, r0
 801b794:	fb00 7212 	mls	r2, r0, r2, r7
 801b798:	1a82      	subs	r2, r0, r2
 801b79a:	fb92 f7f0 	sdiv	r7, r2, r0
 801b79e:	fb00 2017 	mls	r0, r0, r7, r2
 801b7a2:	1a1b      	subs	r3, r3, r0
 801b7a4:	42ab      	cmp	r3, r5
 801b7a6:	bfb8      	it	lt
 801b7a8:	462b      	movlt	r3, r5
 801b7aa:	4622      	mov	r2, r4
 801b7ac:	461c      	mov	r4, r3
 801b7ae:	4613      	mov	r3, r2
 801b7b0:	e7e4      	b.n	801b77c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 801b7b2:	42a3      	cmp	r3, r4
 801b7b4:	da10      	bge.n	801b7d8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 801b7b6:	b148      	cbz	r0, 801b7cc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 801b7b8:	fb94 f2f0 	sdiv	r2, r4, r0
 801b7bc:	fb00 4212 	mls	r2, r0, r2, r4
 801b7c0:	1a82      	subs	r2, r0, r2
 801b7c2:	fb92 f7f0 	sdiv	r7, r2, r0
 801b7c6:	fb00 2017 	mls	r0, r0, r7, r2
 801b7ca:	4404      	add	r4, r0
 801b7cc:	42a5      	cmp	r5, r4
 801b7ce:	bfa8      	it	ge
 801b7d0:	4625      	movge	r5, r4
 801b7d2:	461c      	mov	r4, r3
 801b7d4:	462b      	mov	r3, r5
 801b7d6:	e7d1      	b.n	801b77c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 801b7d8:	42ab      	cmp	r3, r5
 801b7da:	dacf      	bge.n	801b77c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 801b7dc:	2800      	cmp	r0, #0
 801b7de:	d0cd      	beq.n	801b77c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 801b7e0:	fb93 f2f0 	sdiv	r2, r3, r0
 801b7e4:	fb00 3212 	mls	r2, r0, r2, r3
 801b7e8:	1a82      	subs	r2, r0, r2
 801b7ea:	fb92 f7f0 	sdiv	r7, r2, r0
 801b7ee:	fb00 2017 	mls	r0, r0, r7, r2
 801b7f2:	4403      	add	r3, r0
 801b7f4:	42ab      	cmp	r3, r5
 801b7f6:	bfa8      	it	ge
 801b7f8:	462b      	movge	r3, r5
 801b7fa:	e7bf      	b.n	801b77c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

0801b7fc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 801b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b800:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 801b804:	2220      	movs	r2, #32
 801b806:	468b      	mov	fp, r1
 801b808:	42ae      	cmp	r6, r5
 801b80a:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 801b80e:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 801b812:	b0ab      	sub	sp, #172	; 0xac
 801b814:	bfa4      	itt	ge
 801b816:	4633      	movge	r3, r6
 801b818:	462e      	movge	r6, r5
 801b81a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801b81c:	4604      	mov	r4, r0
 801b81e:	bfa8      	it	ge
 801b820:	461d      	movge	r5, r3
 801b822:	1bab      	subs	r3, r5, r6
 801b824:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801b828:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801b82a:	bfa4      	itt	ge
 801b82c:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 801b830:	2600      	movge	r6, #0
 801b832:	fb99 f9f2 	sdiv	r9, r9, r2
 801b836:	fb9a faf2 	sdiv	sl, sl, r2
 801b83a:	2900      	cmp	r1, #0
 801b83c:	f000 80f1 	beq.w	801ba22 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x226>
 801b840:	f9bb 0000 	ldrsh.w	r0, [fp]
 801b844:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 801b848:	eba9 0700 	sub.w	r7, r9, r0
 801b84c:	ebaa 0802 	sub.w	r8, sl, r2
 801b850:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 801b854:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 801b858:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 801b85c:	4407      	add	r7, r0
 801b85e:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 801b862:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 801b866:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 801b86a:	b23f      	sxth	r7, r7
 801b86c:	4490      	add	r8, r2
 801b86e:	2202      	movs	r2, #2
 801b870:	eba9 0707 	sub.w	r7, r9, r7
 801b874:	fa0f f888 	sxth.w	r8, r8
 801b878:	9201      	str	r2, [sp, #4]
 801b87a:	2f00      	cmp	r7, #0
 801b87c:	ebaa 0808 	sub.w	r8, sl, r8
 801b880:	bfb8      	it	lt
 801b882:	427f      	neglt	r7, r7
 801b884:	f1b8 0f00 	cmp.w	r8, #0
 801b888:	bfb8      	it	lt
 801b88a:	f1c8 0800 	rsblt	r8, r8, #0
 801b88e:	45bc      	cmp	ip, r7
 801b890:	bfcc      	ite	gt
 801b892:	f10c 0701 	addgt.w	r7, ip, #1
 801b896:	3701      	addle	r7, #1
 801b898:	4540      	cmp	r0, r8
 801b89a:	bfc8      	it	gt
 801b89c:	f100 0801 	addgt.w	r8, r0, #1
 801b8a0:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801b8a4:	bfd8      	it	le
 801b8a6:	f108 0801 	addle.w	r8, r8, #1
 801b8aa:	3001      	adds	r0, #1
 801b8ac:	fb08 f808 	mul.w	r8, r8, r8
 801b8b0:	1040      	asrs	r0, r0, #1
 801b8b2:	fb07 8707 	mla	r7, r7, r7, r8
 801b8b6:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801b8ba:	fb91 f1f2 	sdiv	r1, r1, r2
 801b8be:	1a5b      	subs	r3, r3, r1
 801b8c0:	930d      	str	r3, [sp, #52]	; 0x34
 801b8c2:	f7ff fcfd 	bl	801b2c0 <_ZN8touchgfx7CWRUtil4sineEi>
 801b8c6:	a92a      	add	r1, sp, #168	; 0xa8
 801b8c8:	f841 0d70 	str.w	r0, [r1, #-112]!
 801b8cc:	a80d      	add	r0, sp, #52	; 0x34
 801b8ce:	f7ff fceb 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b8d2:	f04f 0c20 	mov.w	ip, #32
 801b8d6:	9a01      	ldr	r2, [sp, #4]
 801b8d8:	fb90 f0fc 	sdiv	r0, r0, ip
 801b8dc:	4340      	muls	r0, r0
 801b8de:	4287      	cmp	r7, r0
 801b8e0:	da04      	bge.n	801b8ec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf0>
 801b8e2:	2401      	movs	r4, #1
 801b8e4:	4620      	mov	r0, r4
 801b8e6:	b02b      	add	sp, #172	; 0xac
 801b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b8ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801b8f0:	fb91 f3f2 	sdiv	r3, r1, r2
 801b8f4:	4403      	add	r3, r0
 801b8f6:	fb93 f3fc 	sdiv	r3, r3, ip
 801b8fa:	f9bb 1000 	ldrsh.w	r1, [fp]
 801b8fe:	3301      	adds	r3, #1
 801b900:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 801b904:	435b      	muls	r3, r3
 801b906:	440a      	add	r2, r1
 801b908:	b212      	sxth	r2, r2
 801b90a:	454a      	cmp	r2, r9
 801b90c:	bfa8      	it	ge
 801b90e:	464a      	movge	r2, r9
 801b910:	428a      	cmp	r2, r1
 801b912:	bfac      	ite	ge
 801b914:	eba9 0902 	subge.w	r9, r9, r2
 801b918:	eba9 0901 	sublt.w	r9, r9, r1
 801b91c:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 801b920:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801b924:	440a      	add	r2, r1
 801b926:	b212      	sxth	r2, r2
 801b928:	4552      	cmp	r2, sl
 801b92a:	bfa8      	it	ge
 801b92c:	4652      	movge	r2, sl
 801b92e:	428a      	cmp	r2, r1
 801b930:	bfac      	ite	ge
 801b932:	ebaa 0a02 	subge.w	sl, sl, r2
 801b936:	ebaa 0a01 	sublt.w	sl, sl, r1
 801b93a:	fb0a fa0a 	mul.w	sl, sl, sl
 801b93e:	fb09 a909 	mla	r9, r9, r9, sl
 801b942:	4599      	cmp	r9, r3
 801b944:	dccd      	bgt.n	801b8e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe6>
 801b946:	465a      	mov	r2, fp
 801b948:	4621      	mov	r1, r4
 801b94a:	a80e      	add	r0, sp, #56	; 0x38
 801b94c:	f00e fd66 	bl	802a41c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801b950:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801b952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b954:	9209      	str	r2, [sp, #36]	; 0x24
 801b956:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801b95a:	930a      	str	r3, [sp, #40]	; 0x28
 801b95c:	dd07      	ble.n	801b96e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x172>
 801b95e:	2102      	movs	r1, #2
 801b960:	fb93 f3f1 	sdiv	r3, r3, r1
 801b964:	4413      	add	r3, r2
 801b966:	930a      	str	r3, [sp, #40]	; 0x28
 801b968:	fb93 f3f1 	sdiv	r3, r3, r1
 801b96c:	9309      	str	r3, [sp, #36]	; 0x24
 801b96e:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 801b972:	f04f 0a02 	mov.w	sl, #2
 801b976:	4630      	mov	r0, r6
 801b978:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 801b97c:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 801b980:	017f      	lsls	r7, r7, #5
 801b982:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b986:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b98a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b98c:	f7ff fcb8 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801b990:	f849 0d74 	str.w	r0, [r9, #-116]!
 801b994:	a80b      	add	r0, sp, #44	; 0x2c
 801b996:	4649      	mov	r1, r9
 801b998:	f7ff fc86 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b99c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b99e:	fb90 f0fa 	sdiv	r0, r0, sl
 801b9a2:	eb00 0b03 	add.w	fp, r0, r3
 801b9a6:	4630      	mov	r0, r6
 801b9a8:	f7ff fcc9 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801b9ac:	f848 0d78 	str.w	r0, [r8, #-120]!
 801b9b0:	a80b      	add	r0, sp, #44	; 0x2c
 801b9b2:	4641      	mov	r1, r8
 801b9b4:	f7ff fc78 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b9b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b9ba:	4659      	mov	r1, fp
 801b9bc:	fb90 f0fa 	sdiv	r0, r0, sl
 801b9c0:	1a12      	subs	r2, r2, r0
 801b9c2:	a80e      	add	r0, sp, #56	; 0x38
 801b9c4:	f00e fea4 	bl	802a710 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801b9c8:	f106 0a20 	add.w	sl, r6, #32
 801b9cc:	bb67      	cbnz	r7, 801ba28 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 801b9ce:	46b3      	mov	fp, r6
 801b9d0:	45aa      	cmp	sl, r5
 801b9d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b9d4:	dc33      	bgt.n	801ba3e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x242>
 801b9d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b9d8:	4650      	mov	r0, sl
 801b9da:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801b9de:	920b      	str	r2, [sp, #44]	; 0x2c
 801b9e0:	f7ff fc8e 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801b9e4:	4641      	mov	r1, r8
 801b9e6:	900c      	str	r0, [sp, #48]	; 0x30
 801b9e8:	a80b      	add	r0, sp, #44	; 0x2c
 801b9ea:	f7ff fc5d 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b9ee:	2302      	movs	r3, #2
 801b9f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b9f2:	fb90 f0f3 	sdiv	r0, r0, r3
 801b9f6:	eb00 0b02 	add.w	fp, r0, r2
 801b9fa:	4650      	mov	r0, sl
 801b9fc:	f7ff fc9f 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801ba00:	4649      	mov	r1, r9
 801ba02:	900d      	str	r0, [sp, #52]	; 0x34
 801ba04:	a80b      	add	r0, sp, #44	; 0x2c
 801ba06:	f7ff fc4f 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801ba0a:	2302      	movs	r3, #2
 801ba0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ba0e:	4659      	mov	r1, fp
 801ba10:	46d3      	mov	fp, sl
 801ba12:	44ba      	add	sl, r7
 801ba14:	fb90 f0f3 	sdiv	r0, r0, r3
 801ba18:	1a12      	subs	r2, r2, r0
 801ba1a:	a80e      	add	r0, sp, #56	; 0x38
 801ba1c:	f00e fec5 	bl	802a7aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801ba20:	e7d6      	b.n	801b9d0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d4>
 801ba22:	fb93 f3f2 	sdiv	r3, r3, r2
 801ba26:	e768      	b.n	801b8fa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xfe>
 801ba28:	fb9a f2f7 	sdiv	r2, sl, r7
 801ba2c:	fb07 a212 	mls	r2, r7, r2, sl
 801ba30:	1aba      	subs	r2, r7, r2
 801ba32:	fb92 f1f7 	sdiv	r1, r2, r7
 801ba36:	fb07 2211 	mls	r2, r7, r1, r2
 801ba3a:	4492      	add	sl, r2
 801ba3c:	e7c7      	b.n	801b9ce <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d2>
 801ba3e:	45ab      	cmp	fp, r5
 801ba40:	da23      	bge.n	801ba8a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x28e>
 801ba42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba44:	f04f 0a02 	mov.w	sl, #2
 801ba48:	4628      	mov	r0, r5
 801ba4a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801ba4e:	920b      	str	r2, [sp, #44]	; 0x2c
 801ba50:	f7ff fc56 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801ba54:	4641      	mov	r1, r8
 801ba56:	900c      	str	r0, [sp, #48]	; 0x30
 801ba58:	a80b      	add	r0, sp, #44	; 0x2c
 801ba5a:	f7ff fc25 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801ba5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ba60:	fb90 f0fa 	sdiv	r0, r0, sl
 801ba64:	4403      	add	r3, r0
 801ba66:	4628      	mov	r0, r5
 801ba68:	9301      	str	r3, [sp, #4]
 801ba6a:	f7ff fc68 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801ba6e:	4649      	mov	r1, r9
 801ba70:	900d      	str	r0, [sp, #52]	; 0x34
 801ba72:	a80b      	add	r0, sp, #44	; 0x2c
 801ba74:	f7ff fc18 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801ba78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ba7a:	9b01      	ldr	r3, [sp, #4]
 801ba7c:	fb90 f0fa 	sdiv	r0, r0, sl
 801ba80:	4619      	mov	r1, r3
 801ba82:	1a12      	subs	r2, r2, r0
 801ba84:	a80e      	add	r0, sp, #56	; 0x38
 801ba86:	f00e fe90 	bl	802a7aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801ba8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba8c:	b99b      	cbnz	r3, 801bab6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 801ba8e:	1bad      	subs	r5, r5, r6
 801ba90:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 801ba94:	da04      	bge.n	801baa0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 801ba96:	a80e      	add	r0, sp, #56	; 0x38
 801ba98:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 801ba9c:	f00e fe85 	bl	802a7aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801baa0:	21ff      	movs	r1, #255	; 0xff
 801baa2:	a80e      	add	r0, sp, #56	; 0x38
 801baa4:	f00e fd76 	bl	802a594 <_ZN8touchgfx6Canvas6renderEh>
 801baa8:	4604      	mov	r4, r0
 801baaa:	4b8a      	ldr	r3, [pc, #552]	; (801bcd4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d8>)
 801baac:	a816      	add	r0, sp, #88	; 0x58
 801baae:	930e      	str	r3, [sp, #56]	; 0x38
 801bab0:	f001 fc90 	bl	801d3d4 <_ZN8touchgfx7OutlineD1Ev>
 801bab4:	e716      	b.n	801b8e4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe8>
 801bab6:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 801baba:	429a      	cmp	r2, r3
 801babc:	f0c0 8107 	bcc.w	801bcce <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d2>
 801bac0:	1bab      	subs	r3, r5, r6
 801bac2:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 801bac6:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801baca:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 801bace:	9301      	str	r3, [sp, #4]
 801bad0:	da43      	bge.n	801bb5a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 801bad2:	4628      	mov	r0, r5
 801bad4:	f7ff fc14 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801bad8:	4649      	mov	r1, r9
 801bada:	900d      	str	r0, [sp, #52]	; 0x34
 801badc:	a809      	add	r0, sp, #36	; 0x24
 801bade:	f7ff fbe3 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801bae4:	18c3      	adds	r3, r0, r3
 801bae6:	4628      	mov	r0, r5
 801bae8:	9303      	str	r3, [sp, #12]
 801baea:	f7ff fc28 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801baee:	4649      	mov	r1, r9
 801baf0:	900d      	str	r0, [sp, #52]	; 0x34
 801baf2:	a809      	add	r0, sp, #36	; 0x24
 801baf4:	f7ff fbd8 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801baf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bafa:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 801bafe:	1a1b      	subs	r3, r3, r0
 801bb00:	9204      	str	r2, [sp, #16]
 801bb02:	9302      	str	r3, [sp, #8]
 801bb04:	eb0a 0305 	add.w	r3, sl, r5
 801bb08:	9a04      	ldr	r2, [sp, #16]
 801bb0a:	4293      	cmp	r3, r2
 801bb0c:	da25      	bge.n	801bb5a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 801bb0e:	4618      	mov	r0, r3
 801bb10:	9306      	str	r3, [sp, #24]
 801bb12:	f7ff fbf5 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801bb16:	4649      	mov	r1, r9
 801bb18:	900d      	str	r0, [sp, #52]	; 0x34
 801bb1a:	a80a      	add	r0, sp, #40	; 0x28
 801bb1c:	f7ff fbc4 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bb20:	2202      	movs	r2, #2
 801bb22:	9b03      	ldr	r3, [sp, #12]
 801bb24:	9207      	str	r2, [sp, #28]
 801bb26:	fb90 f0f2 	sdiv	r0, r0, r2
 801bb2a:	18c3      	adds	r3, r0, r3
 801bb2c:	9305      	str	r3, [sp, #20]
 801bb2e:	9b06      	ldr	r3, [sp, #24]
 801bb30:	4618      	mov	r0, r3
 801bb32:	f7ff fc04 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801bb36:	a92a      	add	r1, sp, #168	; 0xa8
 801bb38:	f841 0d78 	str.w	r0, [r1, #-120]!
 801bb3c:	a80a      	add	r0, sp, #40	; 0x28
 801bb3e:	f7ff fbb3 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bb42:	9a07      	ldr	r2, [sp, #28]
 801bb44:	9b02      	ldr	r3, [sp, #8]
 801bb46:	9905      	ldr	r1, [sp, #20]
 801bb48:	fb90 f2f2 	sdiv	r2, r0, r2
 801bb4c:	a80e      	add	r0, sp, #56	; 0x38
 801bb4e:	1a9a      	subs	r2, r3, r2
 801bb50:	f00e fe2b 	bl	802a7aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801bb54:	9b06      	ldr	r3, [sp, #24]
 801bb56:	4453      	add	r3, sl
 801bb58:	e7d6      	b.n	801bb08 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x30c>
 801bb5a:	45ab      	cmp	fp, r5
 801bb5c:	da25      	bge.n	801bbaa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ae>
 801bb5e:	4628      	mov	r0, r5
 801bb60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bb64:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801bb68:	930b      	str	r3, [sp, #44]	; 0x2c
 801bb6a:	f7ff fbc9 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801bb6e:	4641      	mov	r1, r8
 801bb70:	900c      	str	r0, [sp, #48]	; 0x30
 801bb72:	a80b      	add	r0, sp, #44	; 0x2c
 801bb74:	f7ff fb98 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bb78:	2202      	movs	r2, #2
 801bb7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801bb7c:	9202      	str	r2, [sp, #8]
 801bb7e:	fb90 f0f2 	sdiv	r0, r0, r2
 801bb82:	eb00 0903 	add.w	r9, r0, r3
 801bb86:	4628      	mov	r0, r5
 801bb88:	f7ff fbd9 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801bb8c:	a92a      	add	r1, sp, #168	; 0xa8
 801bb8e:	f841 0d74 	str.w	r0, [r1, #-116]!
 801bb92:	a80b      	add	r0, sp, #44	; 0x2c
 801bb94:	f7ff fb88 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bb98:	9a02      	ldr	r2, [sp, #8]
 801bb9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bb9c:	4649      	mov	r1, r9
 801bb9e:	fb90 f2f2 	sdiv	r2, r0, r2
 801bba2:	a80e      	add	r0, sp, #56	; 0x38
 801bba4:	1a9a      	subs	r2, r3, r2
 801bba6:	f00e fe00 	bl	802a7aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801bbaa:	46d9      	mov	r9, fp
 801bbac:	2502      	movs	r5, #2
 801bbae:	45b1      	cmp	r9, r6
 801bbb0:	db25      	blt.n	801bbfe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x402>
 801bbb2:	4648      	mov	r0, r9
 801bbb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bbb8:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801bbbc:	930b      	str	r3, [sp, #44]	; 0x2c
 801bbbe:	f7ff fb9f 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801bbc2:	4641      	mov	r1, r8
 801bbc4:	900c      	str	r0, [sp, #48]	; 0x30
 801bbc6:	a80b      	add	r0, sp, #44	; 0x2c
 801bbc8:	f7ff fb6e 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bbcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801bbce:	fb90 f0f5 	sdiv	r0, r0, r5
 801bbd2:	eb00 0b03 	add.w	fp, r0, r3
 801bbd6:	4648      	mov	r0, r9
 801bbd8:	f7ff fbb1 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801bbdc:	a90d      	add	r1, sp, #52	; 0x34
 801bbde:	900d      	str	r0, [sp, #52]	; 0x34
 801bbe0:	a80b      	add	r0, sp, #44	; 0x2c
 801bbe2:	f7ff fb61 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bbe6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801bbe8:	4659      	mov	r1, fp
 801bbea:	46cb      	mov	fp, r9
 801bbec:	eba9 0907 	sub.w	r9, r9, r7
 801bbf0:	fb90 f0f5 	sdiv	r0, r0, r5
 801bbf4:	1a12      	subs	r2, r2, r0
 801bbf6:	a80e      	add	r0, sp, #56	; 0x38
 801bbf8:	f00e fdd7 	bl	802a7aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801bbfc:	e7d7      	b.n	801bbae <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3b2>
 801bbfe:	455e      	cmp	r6, fp
 801bc00:	da22      	bge.n	801bc48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x44c>
 801bc02:	2502      	movs	r5, #2
 801bc04:	4630      	mov	r0, r6
 801bc06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bc0a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801bc0e:	930b      	str	r3, [sp, #44]	; 0x2c
 801bc10:	f7ff fb76 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801bc14:	4641      	mov	r1, r8
 801bc16:	900c      	str	r0, [sp, #48]	; 0x30
 801bc18:	a80b      	add	r0, sp, #44	; 0x2c
 801bc1a:	f7ff fb45 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bc1e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801bc20:	fb90 f0f5 	sdiv	r0, r0, r5
 801bc24:	4407      	add	r7, r0
 801bc26:	4630      	mov	r0, r6
 801bc28:	f7ff fb89 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801bc2c:	a92a      	add	r1, sp, #168	; 0xa8
 801bc2e:	f841 0d74 	str.w	r0, [r1, #-116]!
 801bc32:	a80b      	add	r0, sp, #44	; 0x2c
 801bc34:	f7ff fb38 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bc38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801bc3a:	4639      	mov	r1, r7
 801bc3c:	fb90 f0f5 	sdiv	r0, r0, r5
 801bc40:	1a12      	subs	r2, r2, r0
 801bc42:	a80e      	add	r0, sp, #56	; 0x38
 801bc44:	f00e fdb1 	bl	802a7aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801bc48:	9b01      	ldr	r3, [sp, #4]
 801bc4a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801bc4e:	f6bf af27 	bge.w	801baa0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 801bc52:	ad2a      	add	r5, sp, #168	; 0xa8
 801bc54:	4630      	mov	r0, r6
 801bc56:	f7ff fb53 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801bc5a:	f04f 0b02 	mov.w	fp, #2
 801bc5e:	f845 0d74 	str.w	r0, [r5, #-116]!
 801bc62:	a809      	add	r0, sp, #36	; 0x24
 801bc64:	4629      	mov	r1, r5
 801bc66:	f7ff fb1f 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bc6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801bc6c:	eb00 0903 	add.w	r9, r0, r3
 801bc70:	4630      	mov	r0, r6
 801bc72:	f7ff fb64 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801bc76:	4629      	mov	r1, r5
 801bc78:	900d      	str	r0, [sp, #52]	; 0x34
 801bc7a:	a809      	add	r0, sp, #36	; 0x24
 801bc7c:	f7ff fb14 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bc80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bc82:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 801bc86:	eba3 0800 	sub.w	r8, r3, r0
 801bc8a:	4454      	add	r4, sl
 801bc8c:	42a6      	cmp	r6, r4
 801bc8e:	f77f af07 	ble.w	801baa0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 801bc92:	4620      	mov	r0, r4
 801bc94:	f7ff fb34 	bl	801b300 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801bc98:	4629      	mov	r1, r5
 801bc9a:	900d      	str	r0, [sp, #52]	; 0x34
 801bc9c:	a80a      	add	r0, sp, #40	; 0x28
 801bc9e:	f7ff fb03 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bca2:	fb90 f0fb 	sdiv	r0, r0, fp
 801bca6:	eb00 0709 	add.w	r7, r0, r9
 801bcaa:	4620      	mov	r0, r4
 801bcac:	f7ff fb47 	bl	801b33e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801bcb0:	a90c      	add	r1, sp, #48	; 0x30
 801bcb2:	900c      	str	r0, [sp, #48]	; 0x30
 801bcb4:	a80a      	add	r0, sp, #40	; 0x28
 801bcb6:	f7ff faf7 	bl	801b2a8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bcba:	4639      	mov	r1, r7
 801bcbc:	4454      	add	r4, sl
 801bcbe:	fb90 f2fb 	sdiv	r2, r0, fp
 801bcc2:	a80e      	add	r0, sp, #56	; 0x38
 801bcc4:	eba8 0202 	sub.w	r2, r8, r2
 801bcc8:	f00e fd6f 	bl	802a7aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801bccc:	e7de      	b.n	801bc8c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x490>
 801bcce:	2400      	movs	r4, #0
 801bcd0:	e6eb      	b.n	801baaa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ae>
 801bcd2:	bf00      	nop
 801bcd4:	08030058 	.word	0x08030058

0801bcd8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 801bcd8:	b508      	push	{r3, lr}
 801bcda:	4b05      	ldr	r3, [pc, #20]	; (801bcf0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 801bcdc:	6818      	ldr	r0, [r3, #0]
 801bcde:	6803      	ldr	r3, [r0, #0]
 801bce0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801bce4:	4798      	blx	r3
 801bce6:	1e43      	subs	r3, r0, #1
 801bce8:	4258      	negs	r0, r3
 801bcea:	4158      	adcs	r0, r3
 801bcec:	bd08      	pop	{r3, pc}
 801bcee:	bf00      	nop
 801bcf0:	24027f6c 	.word	0x24027f6c

0801bcf4 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 801bcf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bcf8:	b410      	push	{r4}
 801bcfa:	188c      	adds	r4, r1, r2
 801bcfc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801bd00:	68c2      	ldr	r2, [r0, #12]
 801bd02:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801bd06:	4620      	mov	r0, r4
 801bd08:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bd0c:	f7e7 b9f4 	b.w	80030f8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0801bd10 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 801bd10:	f7e7 b9da 	b.w	80030c8 <_ZN8touchgfx5paint8tearDownEv>

0801bd14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801bd14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bd16:	6803      	ldr	r3, [r0, #0]
 801bd18:	460d      	mov	r5, r1
 801bd1a:	4604      	mov	r4, r0
 801bd1c:	4601      	mov	r1, r0
 801bd1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801bd20:	a802      	add	r0, sp, #8
 801bd22:	4798      	blx	r3
 801bd24:	6828      	ldr	r0, [r5, #0]
 801bd26:	6869      	ldr	r1, [r5, #4]
 801bd28:	466b      	mov	r3, sp
 801bd2a:	c303      	stmia	r3!, {r0, r1}
 801bd2c:	4668      	mov	r0, sp
 801bd2e:	4619      	mov	r1, r3
 801bd30:	f7fe fa92 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 801bd34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801bd36:	b1a8      	cbz	r0, 801bd64 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801bd38:	6803      	ldr	r3, [r0, #0]
 801bd3a:	1d21      	adds	r1, r4, #4
 801bd3c:	68db      	ldr	r3, [r3, #12]
 801bd3e:	4798      	blx	r3
 801bd40:	b180      	cbz	r0, 801bd64 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801bd42:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	dd0c      	ble.n	801bd64 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801bd4a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801bd4e:	2d00      	cmp	r5, #0
 801bd50:	dd08      	ble.n	801bd64 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801bd52:	4a2d      	ldr	r2, [pc, #180]	; (801be08 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 801bd54:	7812      	ldrb	r2, [r2, #0]
 801bd56:	b13a      	cbz	r2, 801bd68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 801bd58:	2a01      	cmp	r2, #1
 801bd5a:	d02d      	beq.n	801bdb8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 801bd5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801bd5e:	6803      	ldr	r3, [r0, #0]
 801bd60:	691b      	ldr	r3, [r3, #16]
 801bd62:	4798      	blx	r3
 801bd64:	b004      	add	sp, #16
 801bd66:	bd70      	pop	{r4, r5, r6, pc}
 801bd68:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bd6c:	441d      	add	r5, r3
 801bd6e:	b2ad      	uxth	r5, r5
 801bd70:	b22e      	sxth	r6, r5
 801bd72:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801bd76:	42b3      	cmp	r3, r6
 801bd78:	daf0      	bge.n	801bd5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801bd7a:	6823      	ldr	r3, [r4, #0]
 801bd7c:	4669      	mov	r1, sp
 801bd7e:	4620      	mov	r0, r4
 801bd80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bd82:	4798      	blx	r3
 801bd84:	b940      	cbnz	r0, 801bd98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801bd86:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801bd8a:	2b01      	cmp	r3, #1
 801bd8c:	d004      	beq.n	801bd98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801bd8e:	3301      	adds	r3, #1
 801bd90:	105b      	asrs	r3, r3, #1
 801bd92:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bd96:	e7f0      	b.n	801bd7a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 801bd98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801bd9c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bda0:	4413      	add	r3, r2
 801bda2:	b29b      	uxth	r3, r3
 801bda4:	441a      	add	r2, r3
 801bda6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801bdaa:	b212      	sxth	r2, r2
 801bdac:	4296      	cmp	r6, r2
 801bdae:	dae0      	bge.n	801bd72 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801bdb0:	1aeb      	subs	r3, r5, r3
 801bdb2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bdb6:	e7dc      	b.n	801bd72 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801bdb8:	f8bd 5000 	ldrh.w	r5, [sp]
 801bdbc:	441d      	add	r5, r3
 801bdbe:	b2ad      	uxth	r5, r5
 801bdc0:	b22e      	sxth	r6, r5
 801bdc2:	f9bd 3000 	ldrsh.w	r3, [sp]
 801bdc6:	42b3      	cmp	r3, r6
 801bdc8:	dac8      	bge.n	801bd5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801bdca:	6823      	ldr	r3, [r4, #0]
 801bdcc:	4669      	mov	r1, sp
 801bdce:	4620      	mov	r0, r4
 801bdd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bdd2:	4798      	blx	r3
 801bdd4:	b940      	cbnz	r0, 801bde8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801bdd6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801bdda:	2b01      	cmp	r3, #1
 801bddc:	d004      	beq.n	801bde8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801bdde:	3301      	adds	r3, #1
 801bde0:	105b      	asrs	r3, r3, #1
 801bde2:	f8ad 3004 	strh.w	r3, [sp, #4]
 801bde6:	e7f0      	b.n	801bdca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 801bde8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801bdec:	f8bd 3000 	ldrh.w	r3, [sp]
 801bdf0:	4413      	add	r3, r2
 801bdf2:	b29b      	uxth	r3, r3
 801bdf4:	441a      	add	r2, r3
 801bdf6:	f8ad 3000 	strh.w	r3, [sp]
 801bdfa:	b212      	sxth	r2, r2
 801bdfc:	4296      	cmp	r6, r2
 801bdfe:	dae0      	bge.n	801bdc2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801be00:	1aeb      	subs	r3, r5, r3
 801be02:	f8ad 3004 	strh.w	r3, [sp, #4]
 801be06:	e7dc      	b.n	801bdc2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801be08:	24027f64 	.word	0x24027f64

0801be0c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801be0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801be0e:	6803      	ldr	r3, [r0, #0]
 801be10:	4604      	mov	r4, r0
 801be12:	4601      	mov	r1, r0
 801be14:	4668      	mov	r0, sp
 801be16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801be18:	4798      	blx	r3
 801be1a:	2100      	movs	r1, #0
 801be1c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801be20:	4668      	mov	r0, sp
 801be22:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801be26:	9102      	str	r1, [sp, #8]
 801be28:	a902      	add	r1, sp, #8
 801be2a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801be2e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801be32:	f7fe fa11 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 801be36:	6823      	ldr	r3, [r4, #0]
 801be38:	4669      	mov	r1, sp
 801be3a:	4620      	mov	r0, r4
 801be3c:	691b      	ldr	r3, [r3, #16]
 801be3e:	4798      	blx	r3
 801be40:	b004      	add	sp, #16
 801be42:	bd10      	pop	{r4, pc}

0801be44 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801be44:	2101      	movs	r1, #1
 801be46:	2200      	movs	r2, #0
 801be48:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801be4c:	490a      	ldr	r1, [pc, #40]	; (801be78 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801be4e:	8082      	strh	r2, [r0, #4]
 801be50:	6001      	str	r1, [r0, #0]
 801be52:	21ff      	movs	r1, #255	; 0xff
 801be54:	80c2      	strh	r2, [r0, #6]
 801be56:	8102      	strh	r2, [r0, #8]
 801be58:	8142      	strh	r2, [r0, #10]
 801be5a:	8182      	strh	r2, [r0, #12]
 801be5c:	81c2      	strh	r2, [r0, #14]
 801be5e:	8202      	strh	r2, [r0, #16]
 801be60:	8242      	strh	r2, [r0, #18]
 801be62:	61c2      	str	r2, [r0, #28]
 801be64:	8402      	strh	r2, [r0, #32]
 801be66:	8442      	strh	r2, [r0, #34]	; 0x22
 801be68:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801be6c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801be70:	6282      	str	r2, [r0, #40]	; 0x28
 801be72:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801be76:	4770      	bx	lr
 801be78:	0802f770 	.word	0x0802f770

0801be7c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801be7c:	790b      	ldrb	r3, [r1, #4]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	bf0c      	ite	eq
 801be82:	2301      	moveq	r3, #1
 801be84:	2300      	movne	r3, #0
 801be86:	b570      	push	{r4, r5, r6, lr}
 801be88:	4604      	mov	r4, r0
 801be8a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801be8e:	460e      	mov	r6, r1
 801be90:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801be94:	d109      	bne.n	801beaa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801be96:	b14d      	cbz	r5, 801beac <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801be98:	7933      	ldrb	r3, [r6, #4]
 801be9a:	2b01      	cmp	r3, #1
 801be9c:	d10c      	bne.n	801beb8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801be9e:	6823      	ldr	r3, [r4, #0]
 801bea0:	4620      	mov	r0, r4
 801bea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bea8:	4718      	bx	r3
 801beaa:	b12d      	cbz	r5, 801beb8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801beac:	6823      	ldr	r3, [r4, #0]
 801beae:	4620      	mov	r0, r4
 801beb0:	695b      	ldr	r3, [r3, #20]
 801beb2:	4798      	blx	r3
 801beb4:	2d00      	cmp	r5, #0
 801beb6:	d1ef      	bne.n	801be98 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801beb8:	bd70      	pop	{r4, r5, r6, pc}

0801beba <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 801beba:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801bebe:	4770      	bx	lr

0801bec0 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 801bec0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801bec4:	4770      	bx	lr

0801bec6 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 801bec6:	6802      	ldr	r2, [r0, #0]
 801bec8:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801becc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801bece:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801bed2:	4710      	bx	r2

0801bed4 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 801bed4:	6802      	ldr	r2, [r0, #0]
 801bed6:	eef0 0a40 	vmov.f32	s1, s0
 801beda:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801bede:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801bee0:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801bee4:	4710      	bx	r2

0801bee6 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 801bee6:	6802      	ldr	r2, [r0, #0]
 801bee8:	eeb0 1a40 	vmov.f32	s2, s0
 801beec:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801bef0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801bef2:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801bef6:	4710      	bx	r2

0801bef8 <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 801bef8:	6802      	ldr	r2, [r0, #0]
 801befa:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801befe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801bf00:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801bf04:	4710      	bx	r2

0801bf06 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 801bf06:	6802      	ldr	r2, [r0, #0]
 801bf08:	eef0 0a40 	vmov.f32	s1, s0
 801bf0c:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801bf10:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801bf12:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801bf16:	4710      	bx	r2

0801bf18 <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 801bf18:	6802      	ldr	r2, [r0, #0]
 801bf1a:	eeb0 1a40 	vmov.f32	s2, s0
 801bf1e:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801bf22:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801bf24:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801bf28:	4710      	bx	r2

0801bf2a <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 801bf2a:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801bf2e:	4770      	bx	lr

0801bf30 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 801bf30:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 801bf34:	4770      	bx	lr

0801bf36 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 801bf36:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 801bf3a:	4770      	bx	lr

0801bf3c <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 801bf3c:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 801bf40:	4770      	bx	lr

0801bf42 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 801bf42:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 801bf46:	4770      	bx	lr

0801bf48 <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 801bf48:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 801bf4c:	4770      	bx	lr

0801bf4e <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 801bf4e:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 801bf52:	4770      	bx	lr

0801bf54 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 801bf54:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 801bf58:	4770      	bx	lr

0801bf5a <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 801bf5a:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 801bf5e:	4770      	bx	lr

0801bf60 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 801bf60:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 801bf64:	4770      	bx	lr

0801bf66 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 801bf66:	ee07 2a90 	vmov	s15, r2
 801bf6a:	6803      	ldr	r3, [r0, #0]
 801bf6c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801bf70:	ee07 1a90 	vmov	s15, r1
 801bf74:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801bf78:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801bf7c:	4718      	bx	r3

0801bf7e <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 801bf7e:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 801bf82:	4770      	bx	lr

0801bf84 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 801bf84:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801bf88:	4770      	bx	lr

0801bf8a <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 801bf8a:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 801bf8e:	4770      	bx	lr

0801bf90 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 801bf90:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 801bf94:	4770      	bx	lr

0801bf96 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 801bf96:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 801bf9a:	4770      	bx	lr

0801bf9c <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 801bf9c:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 801bfa0:	4770      	bx	lr

0801bfa2 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 801bfa2:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 801bfa6:	4770      	bx	lr

0801bfa8 <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 801bfa8:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 801bfac:	4770      	bx	lr

0801bfae <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 801bfae:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 801bfb2:	4770      	bx	lr

0801bfb4 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 801bfb4:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 801bfb8:	4770      	bx	lr

0801bfba <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 801bfba:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 801bfbe:	4770      	bx	lr

0801bfc0 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 801bfc0:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 801bfc4:	4770      	bx	lr

0801bfc6 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 801bfc6:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 801bfca:	4770      	bx	lr

0801bfcc <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 801bfcc:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 801bfd0:	4770      	bx	lr

0801bfd2 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 801bfd2:	b510      	push	{r4, lr}
 801bfd4:	ed2d 8b04 	vpush	{d8-d9}
 801bfd8:	6803      	ldr	r3, [r0, #0]
 801bfda:	4604      	mov	r4, r0
 801bfdc:	eeb0 8a40 	vmov.f32	s16, s0
 801bfe0:	eef0 8a60 	vmov.f32	s17, s1
 801bfe4:	699b      	ldr	r3, [r3, #24]
 801bfe6:	eeb0 9a41 	vmov.f32	s18, s2
 801bfea:	4798      	blx	r3
 801bfec:	6823      	ldr	r3, [r4, #0]
 801bfee:	4620      	mov	r0, r4
 801bff0:	eef0 0a68 	vmov.f32	s1, s17
 801bff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bff6:	eeb0 1a49 	vmov.f32	s2, s18
 801bffa:	eeb0 0a48 	vmov.f32	s0, s16
 801bffe:	4798      	blx	r3
 801c000:	6823      	ldr	r3, [r4, #0]
 801c002:	4620      	mov	r0, r4
 801c004:	699b      	ldr	r3, [r3, #24]
 801c006:	ecbd 8b04 	vpop	{d8-d9}
 801c00a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c00e:	4718      	bx	r3

0801c010 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 801c010:	b510      	push	{r4, lr}
 801c012:	ed2d 8b02 	vpush	{d8}
 801c016:	6803      	ldr	r3, [r0, #0]
 801c018:	4604      	mov	r4, r0
 801c01a:	eeb0 8a40 	vmov.f32	s16, s0
 801c01e:	699b      	ldr	r3, [r3, #24]
 801c020:	4798      	blx	r3
 801c022:	6823      	ldr	r3, [r4, #0]
 801c024:	4620      	mov	r0, r4
 801c026:	eeb0 0a48 	vmov.f32	s0, s16
 801c02a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c02e:	4798      	blx	r3
 801c030:	6823      	ldr	r3, [r4, #0]
 801c032:	4620      	mov	r0, r4
 801c034:	699b      	ldr	r3, [r3, #24]
 801c036:	ecbd 8b02 	vpop	{d8}
 801c03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c03e:	4718      	bx	r3

0801c040 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 801c040:	2200      	movs	r2, #0
 801c042:	8002      	strh	r2, [r0, #0]
 801c044:	8042      	strh	r2, [r0, #2]
 801c046:	8082      	strh	r2, [r0, #4]
 801c048:	80c2      	strh	r2, [r0, #6]
 801c04a:	4770      	bx	lr

0801c04c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 801c04c:	b538      	push	{r3, r4, r5, lr}
 801c04e:	2301      	movs	r3, #1
 801c050:	2500      	movs	r5, #0
 801c052:	4604      	mov	r4, r0
 801c054:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 801c058:	4b1f      	ldr	r3, [pc, #124]	; (801c0d8 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 801c05a:	8085      	strh	r5, [r0, #4]
 801c05c:	80c5      	strh	r5, [r0, #6]
 801c05e:	8105      	strh	r5, [r0, #8]
 801c060:	8145      	strh	r5, [r0, #10]
 801c062:	8185      	strh	r5, [r0, #12]
 801c064:	81c5      	strh	r5, [r0, #14]
 801c066:	8205      	strh	r5, [r0, #16]
 801c068:	8245      	strh	r5, [r0, #18]
 801c06a:	61c5      	str	r5, [r0, #28]
 801c06c:	8405      	strh	r5, [r0, #32]
 801c06e:	8445      	strh	r5, [r0, #34]	; 0x22
 801c070:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 801c074:	6003      	str	r3, [r0, #0]
 801c076:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801c07a:	880b      	ldrh	r3, [r1, #0]
 801c07c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c07e:	23ff      	movs	r3, #255	; 0xff
 801c080:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c084:	f001 f93a 	bl	801d2fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801c088:	4b14      	ldr	r3, [pc, #80]	; (801c0dc <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 801c08a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c08e:	4914      	ldr	r1, [pc, #80]	; (801c0e0 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 801c090:	6023      	str	r3, [r4, #0]
 801c092:	2300      	movs	r3, #0
 801c094:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801c098:	4620      	mov	r0, r4
 801c09a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c09c:	6323      	str	r3, [r4, #48]	; 0x30
 801c09e:	6363      	str	r3, [r4, #52]	; 0x34
 801c0a0:	63a3      	str	r3, [r4, #56]	; 0x38
 801c0a2:	63e3      	str	r3, [r4, #60]	; 0x3c
 801c0a4:	6463      	str	r3, [r4, #68]	; 0x44
 801c0a6:	64a3      	str	r3, [r4, #72]	; 0x48
 801c0a8:	6523      	str	r3, [r4, #80]	; 0x50
 801c0aa:	6563      	str	r3, [r4, #84]	; 0x54
 801c0ac:	65e3      	str	r3, [r4, #92]	; 0x5c
 801c0ae:	6623      	str	r3, [r4, #96]	; 0x60
 801c0b0:	66a3      	str	r3, [r4, #104]	; 0x68
 801c0b2:	66e3      	str	r3, [r4, #108]	; 0x6c
 801c0b4:	6763      	str	r3, [r4, #116]	; 0x74
 801c0b6:	67a3      	str	r3, [r4, #120]	; 0x78
 801c0b8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801c0bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801c0c0:	230c      	movs	r3, #12
 801c0c2:	6422      	str	r2, [r4, #64]	; 0x40
 801c0c4:	64e1      	str	r1, [r4, #76]	; 0x4c
 801c0c6:	65a1      	str	r1, [r4, #88]	; 0x58
 801c0c8:	6662      	str	r2, [r4, #100]	; 0x64
 801c0ca:	6722      	str	r2, [r4, #112]	; 0x70
 801c0cc:	67e2      	str	r2, [r4, #124]	; 0x7c
 801c0ce:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 801c0d2:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 801c0d6:	bd38      	pop	{r3, r4, r5, pc}
 801c0d8:	0802fc18 	.word	0x0802fc18
 801c0dc:	0802f858 	.word	0x0802f858
 801c0e0:	447a0000 	.word	0x447a0000

0801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 801c0e4:	b570      	push	{r4, r5, r6, lr}
 801c0e6:	ed2d 8b04 	vpush	{d8-d9}
 801c0ea:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 801c0ee:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801c0f0:	4604      	mov	r4, r0
 801c0f2:	add0      	add	r5, sp, #832	; 0x340
 801c0f4:	f825 3d40 	strh.w	r3, [r5, #-64]!
 801c0f8:	4628      	mov	r0, r5
 801c0fa:	f005 ff9f 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c0fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801c100:	4606      	mov	r6, r0
 801c102:	4628      	mov	r0, r5
 801c104:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 801c108:	f005 ffcc 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c10c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c110:	1c72      	adds	r2, r6, #1
 801c112:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801c116:	3001      	adds	r0, #1
 801c118:	ee07 2a90 	vmov	s15, r2
 801c11c:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801c120:	ee76 5ac7 	vsub.f32	s11, s13, s14
 801c124:	ee06 0a90 	vmov	s13, r0
 801c128:	ee36 6a47 	vsub.f32	s12, s12, s14
 801c12c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c12e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c132:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 801c136:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c13a:	9312      	str	r3, [sp, #72]	; 0x48
 801c13c:	9316      	str	r3, [sp, #88]	; 0x58
 801c13e:	a830      	add	r0, sp, #192	; 0xc0
 801c140:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c144:	931a      	str	r3, [sp, #104]	; 0x68
 801c146:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801c14a:	931e      	str	r3, [sp, #120]	; 0x78
 801c14c:	2300      	movs	r3, #0
 801c14e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c152:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 801c156:	ae70      	add	r6, sp, #448	; 0x1c0
 801c158:	9320      	str	r3, [sp, #128]	; 0x80
 801c15a:	9321      	str	r3, [sp, #132]	; 0x84
 801c15c:	9322      	str	r3, [sp, #136]	; 0x88
 801c15e:	9324      	str	r3, [sp, #144]	; 0x90
 801c160:	9325      	str	r3, [sp, #148]	; 0x94
 801c162:	9326      	str	r3, [sp, #152]	; 0x98
 801c164:	9328      	str	r3, [sp, #160]	; 0xa0
 801c166:	9329      	str	r3, [sp, #164]	; 0xa4
 801c168:	932a      	str	r3, [sp, #168]	; 0xa8
 801c16a:	932c      	str	r3, [sp, #176]	; 0xb0
 801c16c:	932d      	str	r3, [sp, #180]	; 0xb4
 801c16e:	932e      	str	r3, [sp, #184]	; 0xb8
 801c170:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 801c174:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801c178:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 801c17c:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 801c180:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 801c184:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 801c188:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 801c18c:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 801c190:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801c194:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 801c198:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 801c19c:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 801c1a0:	f005 fab2 	bl	8021708 <_ZN8touchgfx9Matrix4x4C1Ev>
 801c1a4:	eeb1 0a49 	vneg.f32	s0, s18
 801c1a8:	a830      	add	r0, sp, #192	; 0xc0
 801c1aa:	f005 fb7d 	bl	80218a8 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801c1ae:	eeb1 0a68 	vneg.f32	s0, s17
 801c1b2:	f005 fb87 	bl	80218c4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801c1b6:	eeb1 0a48 	vneg.f32	s0, s16
 801c1ba:	f005 fb92 	bl	80218e2 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 801c1be:	a840      	add	r0, sp, #256	; 0x100
 801c1c0:	f005 faa2 	bl	8021708 <_ZN8touchgfx9Matrix4x4C1Ev>
 801c1c4:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 801c1c8:	a840      	add	r0, sp, #256	; 0x100
 801c1ca:	f005 faf1 	bl	80217b0 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 801c1ce:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 801c1d2:	f005 fb17 	bl	8021804 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 801c1d6:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 801c1da:	f005 fb3c 	bl	8021856 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 801c1de:	a850      	add	r0, sp, #320	; 0x140
 801c1e0:	f005 fa92 	bl	8021708 <_ZN8touchgfx9Matrix4x4C1Ev>
 801c1e4:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801c1e8:	a850      	add	r0, sp, #320	; 0x140
 801c1ea:	f005 fb89 	bl	8021900 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 801c1ee:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801c1f2:	f005 fb91 	bl	8021918 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 801c1f6:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801c1fa:	f005 fb9a 	bl	8021932 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 801c1fe:	a860      	add	r0, sp, #384	; 0x180
 801c200:	f005 fa82 	bl	8021708 <_ZN8touchgfx9Matrix4x4C1Ev>
 801c204:	eeb0 0a49 	vmov.f32	s0, s18
 801c208:	a860      	add	r0, sp, #384	; 0x180
 801c20a:	f005 fb4d 	bl	80218a8 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801c20e:	eeb0 0a68 	vmov.f32	s0, s17
 801c212:	f005 fb57 	bl	80218c4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801c216:	eeb0 0a48 	vmov.f32	s0, s16
 801c21a:	f005 fb62 	bl	80218e2 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 801c21e:	aa50      	add	r2, sp, #320	; 0x140
 801c220:	a960      	add	r1, sp, #384	; 0x180
 801c222:	a8b0      	add	r0, sp, #704	; 0x2c0
 801c224:	f005 fa88 	bl	8021738 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801c228:	4628      	mov	r0, r5
 801c22a:	aa40      	add	r2, sp, #256	; 0x100
 801c22c:	a9b0      	add	r1, sp, #704	; 0x2c0
 801c22e:	f005 fa83 	bl	8021738 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801c232:	4629      	mov	r1, r5
 801c234:	aa30      	add	r2, sp, #192	; 0xc0
 801c236:	a870      	add	r0, sp, #448	; 0x1c0
 801c238:	f005 fa7e 	bl	8021738 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801c23c:	a880      	add	r0, sp, #512	; 0x200
 801c23e:	f005 fa63 	bl	8021708 <_ZN8touchgfx9Matrix4x4C1Ev>
 801c242:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801c246:	a880      	add	r0, sp, #512	; 0x200
 801c248:	eeb1 0a40 	vneg.f32	s0, s0
 801c24c:	f005 fb2c 	bl	80218a8 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801c250:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 801c254:	a880      	add	r0, sp, #512	; 0x200
 801c256:	eeb1 0a40 	vneg.f32	s0, s0
 801c25a:	f005 fb33 	bl	80218c4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801c25e:	a890      	add	r0, sp, #576	; 0x240
 801c260:	f005 fa52 	bl	8021708 <_ZN8touchgfx9Matrix4x4C1Ev>
 801c264:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 801c268:	a890      	add	r0, sp, #576	; 0x240
 801c26a:	f005 fa91 	bl	8021790 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 801c26e:	a8a0      	add	r0, sp, #640	; 0x280
 801c270:	f005 fa4a 	bl	8021708 <_ZN8touchgfx9Matrix4x4C1Ev>
 801c274:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801c278:	a8a0      	add	r0, sp, #640	; 0x280
 801c27a:	f005 fb15 	bl	80218a8 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801c27e:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 801c282:	f005 fb1f 	bl	80218c4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801c286:	aa90      	add	r2, sp, #576	; 0x240
 801c288:	a9a0      	add	r1, sp, #640	; 0x280
 801c28a:	a8b0      	add	r0, sp, #704	; 0x2c0
 801c28c:	f005 fa54 	bl	8021738 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801c290:	4628      	mov	r0, r5
 801c292:	aa80      	add	r2, sp, #512	; 0x200
 801c294:	a9b0      	add	r1, sp, #704	; 0x2c0
 801c296:	f005 fa4f 	bl	8021738 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801c29a:	4629      	mov	r1, r5
 801c29c:	466d      	mov	r5, sp
 801c29e:	aa70      	add	r2, sp, #448	; 0x1c0
 801c2a0:	4668      	mov	r0, sp
 801c2a2:	f005 fa49 	bl	8021738 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801c2a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c2a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c2aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c2ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c2ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c2b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c2b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801c2b6:	2500      	movs	r5, #0
 801c2b8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801c2bc:	0129      	lsls	r1, r5, #4
 801c2be:	ab20      	add	r3, sp, #128	; 0x80
 801c2c0:	3501      	adds	r5, #1
 801c2c2:	a870      	add	r0, sp, #448	; 0x1c0
 801c2c4:	185e      	adds	r6, r3, r1
 801c2c6:	ab10      	add	r3, sp, #64	; 0x40
 801c2c8:	4419      	add	r1, r3
 801c2ca:	f005 f9ed 	bl	80216a8 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 801c2ce:	2d04      	cmp	r5, #4
 801c2d0:	ed86 0a00 	vstr	s0, [r6]
 801c2d4:	edc6 0a01 	vstr	s1, [r6, #4]
 801c2d8:	ed86 1a02 	vstr	s2, [r6, #8]
 801c2dc:	edc6 1a03 	vstr	s3, [r6, #12]
 801c2e0:	d1ec      	bne.n	801c2bc <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 801c2e2:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 801c2e6:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 801c2ea:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 801c2ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801c2f2:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 801c2f6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801c2fa:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 801c2fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801c302:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 801c306:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801c30a:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 801c30e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801c312:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 801c316:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801c31a:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 801c31e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801c322:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 801c326:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801c32a:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 801c32e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801c332:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 801c336:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 801c33a:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 801c33e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801c342:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 801c346:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801c34a:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 801c34e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801c352:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 801c356:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801c35a:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 801c35e:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 801c362:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 801c366:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801c36a:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 801c36e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801c372:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801c376:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c37a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801c37e:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 801c382:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 801c386:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 801c38a:	ecbd 8b04 	vpop	{d8-d9}
 801c38e:	bd70      	pop	{r4, r5, r6, pc}

0801c390 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 801c390:	b510      	push	{r4, lr}
 801c392:	4604      	mov	r4, r0
 801c394:	f000 ffb2 	bl	801d2fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801c398:	4620      	mov	r0, r4
 801c39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c39e:	f7ff bea1 	b.w	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801c3a2 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 801c3a2:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 801c3a6:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 801c3aa:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 801c3ae:	f7ff be99 	b.w	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801c3b2 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 801c3b2:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 801c3b6:	f7ff be95 	b.w	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801c3ba <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 801c3ba:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 801c3be:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 801c3c2:	f7ff be8f 	b.w	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801c3c6 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 801c3c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c3ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801c3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3d2:	fe30 0a27 	vselgt.f32	s0, s0, s15
 801c3d6:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 801c3da:	f7ff be83 	b.w	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801c3de <_ZN8touchgfx13TextureMapper9setCameraEff>:
 801c3de:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 801c3e2:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 801c3e6:	f7ff be7d 	b.w	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801c3ea <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 801c3ea:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 801c3ee:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 801c3f2:	f7ff be77 	b.w	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801c3f6 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 801c3f6:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 801c3fa:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 801c3fe:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 801c402:	f7ff be6f 	b.w	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801c406 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 801c406:	b510      	push	{r4, lr}
 801c408:	edd1 5a1a 	vldr	s11, [r1, #104]	; 0x68
 801c40c:	edd1 7a17 	vldr	s15, [r1, #92]	; 0x5c
 801c410:	ed91 6a1d 	vldr	s12, [r1, #116]	; 0x74
 801c414:	eef4 7ae5 	vcmpe.f32	s15, s11
 801c418:	edd1 6a20 	vldr	s13, [r1, #128]	; 0x80
 801c41c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801c420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c424:	bf54      	ite	pl
 801c426:	eeb0 7a65 	vmovpl.f32	s14, s11
 801c42a:	eeb0 7a67 	vmovmi.f32	s14, s15
 801c42e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801c432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c436:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801c43a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801c43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c442:	fe37 7a26 	vselgt.f32	s14, s14, s13
 801c446:	febb 7a47 	vrintm.f32	s14, s14
 801c44a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c452:	eef4 7ae5 	vcmpe.f32	s15, s11
 801c456:	bf56      	itet	pl
 801c458:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 801c45c:	2200      	movmi	r2, #0
 801c45e:	ee17 3a10 	vmovpl	r3, s14
 801c462:	ee07 4a10 	vmov	s14, r4
 801c466:	bf58      	it	pl
 801c468:	b21a      	sxthpl	r2, r3
 801c46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c46e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c472:	8002      	strh	r2, [r0, #0]
 801c474:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801c478:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c47c:	edd1 5a1b 	vldr	s11, [r1, #108]	; 0x6c
 801c480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c484:	bf58      	it	pl
 801c486:	eef0 7a46 	vmovpl.f32	s15, s12
 801c48a:	ed91 6a1e 	vldr	s12, [r1, #120]	; 0x78
 801c48e:	eef4 6ae7 	vcmpe.f32	s13, s15
 801c492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c496:	bf58      	it	pl
 801c498:	eef0 7a66 	vmovpl.f32	s15, s13
 801c49c:	edd1 6a21 	vldr	s13, [r1, #132]	; 0x84
 801c4a0:	fefa 7a67 	vrintp.f32	s15, s15
 801c4a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4ac:	bfdc      	itt	le
 801c4ae:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801c4b2:	ee17 3a90 	vmovle	r3, s15
 801c4b6:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
 801c4ba:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801c4be:	eef4 7ae5 	vcmpe.f32	s15, s11
 801c4c2:	bfd8      	it	le
 801c4c4:	b21c      	sxthle	r4, r3
 801c4c6:	1aa2      	subs	r2, r4, r2
 801c4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4cc:	8082      	strh	r2, [r0, #4]
 801c4ce:	bf54      	ite	pl
 801c4d0:	eeb0 7a65 	vmovpl.f32	s14, s11
 801c4d4:	eeb0 7a67 	vmovmi.f32	s14, s15
 801c4d8:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801c4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4e0:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801c4e4:	eef4 6ac7 	vcmpe.f32	s13, s14
 801c4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4ec:	fe37 7a26 	vselgt.f32	s14, s14, s13
 801c4f0:	febb 7a47 	vrintm.f32	s14, s14
 801c4f4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4fc:	eef4 7ae5 	vcmpe.f32	s15, s11
 801c500:	bf56      	itet	pl
 801c502:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 801c506:	2300      	movmi	r3, #0
 801c508:	ee17 3a10 	vmovpl	r3, s14
 801c50c:	ee07 1a10 	vmov	s14, r1
 801c510:	bf58      	it	pl
 801c512:	b21b      	sxthpl	r3, r3
 801c514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c518:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c51c:	8043      	strh	r3, [r0, #2]
 801c51e:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801c522:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c52a:	bf58      	it	pl
 801c52c:	eef0 7a46 	vmovpl.f32	s15, s12
 801c530:	eef4 6ae7 	vcmpe.f32	s13, s15
 801c534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c538:	bf58      	it	pl
 801c53a:	eef0 7a66 	vmovpl.f32	s15, s13
 801c53e:	fefa 7a67 	vrintp.f32	s15, s15
 801c542:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c54a:	bfde      	ittt	le
 801c54c:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801c550:	ee17 1a90 	vmovle	r1, s15
 801c554:	b209      	sxthle	r1, r1
 801c556:	1acb      	subs	r3, r1, r3
 801c558:	80c3      	strh	r3, [r0, #6]
 801c55a:	bd10      	pop	{r4, pc}

0801c55c <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 801c55c:	b513      	push	{r0, r1, r4, lr}
 801c55e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801c562:	4604      	mov	r4, r0
 801c564:	b143      	cbz	r3, 801c578 <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 801c566:	4601      	mov	r1, r0
 801c568:	4668      	mov	r0, sp
 801c56a:	f7ff ff4c 	bl	801c406 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801c56e:	6823      	ldr	r3, [r4, #0]
 801c570:	4669      	mov	r1, sp
 801c572:	4620      	mov	r0, r4
 801c574:	691b      	ldr	r3, [r3, #16]
 801c576:	4798      	blx	r3
 801c578:	b002      	add	sp, #8
 801c57a:	bd10      	pop	{r4, pc}

0801c57c <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 801c57c:	4603      	mov	r3, r0
 801c57e:	3026      	adds	r0, #38	; 0x26
 801c580:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801c584:	b90b      	cbnz	r3, 801c58a <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 801c586:	f003 bfbf 	b.w	8020508 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801c58a:	f003 bfcd 	b.w	8020528 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0801c590 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801c590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c594:	4604      	mov	r4, r0
 801c596:	469b      	mov	fp, r3
 801c598:	ed2d 8b04 	vpush	{d8-d9}
 801c59c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801c5a0:	b0b3      	sub	sp, #204	; 0xcc
 801c5a2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801c5a6:	f9b1 6000 	ldrsh.w	r6, [r1]
 801c5aa:	8888      	ldrh	r0, [r1, #4]
 801c5ac:	9206      	str	r2, [sp, #24]
 801c5ae:	2200      	movs	r2, #0
 801c5b0:	4430      	add	r0, r6
 801c5b2:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 801c5b6:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 801c5ba:	b280      	uxth	r0, r0
 801c5bc:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 801c5c0:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 801c5c2:	fa0f fe80 	sxth.w	lr, r0
 801c5c6:	9211      	str	r2, [sp, #68]	; 0x44
 801c5c8:	4596      	cmp	lr, r2
 801c5ca:	f340 8129 	ble.w	801c820 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801c5ce:	45b4      	cmp	ip, r6
 801c5d0:	f340 8126 	ble.w	801c820 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801c5d4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801c5d8:	88ca      	ldrh	r2, [r1, #6]
 801c5da:	442a      	add	r2, r5
 801c5dc:	b292      	uxth	r2, r2
 801c5de:	b211      	sxth	r1, r2
 801c5e0:	2900      	cmp	r1, #0
 801c5e2:	f340 811d 	ble.w	801c820 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801c5e6:	42ab      	cmp	r3, r5
 801c5e8:	f340 811a 	ble.w	801c820 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801c5ec:	45f4      	cmp	ip, lr
 801c5ee:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801c5f2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801c5f6:	bfb8      	it	lt
 801c5f8:	fa1f f08c 	uxthlt.w	r0, ip
 801c5fc:	428b      	cmp	r3, r1
 801c5fe:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801c602:	bfb8      	it	lt
 801c604:	b29a      	uxthlt	r2, r3
 801c606:	1b80      	subs	r0, r0, r6
 801c608:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801c60c:	1b52      	subs	r2, r2, r5
 801c60e:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801c612:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801c616:	ab11      	add	r3, sp, #68	; 0x44
 801c618:	ad13      	add	r5, sp, #76	; 0x4c
 801c61a:	6822      	ldr	r2, [r4, #0]
 801c61c:	1d26      	adds	r6, r4, #4
 801c61e:	9307      	str	r3, [sp, #28]
 801c620:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801c622:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c626:	e885 0003 	stmia.w	r5, {r0, r1}
 801c62a:	4629      	mov	r1, r5
 801c62c:	4620      	mov	r0, r4
 801c62e:	4790      	blx	r2
 801c630:	4621      	mov	r1, r4
 801c632:	a815      	add	r0, sp, #84	; 0x54
 801c634:	f003 fec4 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c638:	a815      	add	r0, sp, #84	; 0x54
 801c63a:	f002 fc05 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c63e:	9b07      	ldr	r3, [sp, #28]
 801c640:	4631      	mov	r1, r6
 801c642:	4618      	mov	r0, r3
 801c644:	f002 fc44 	bl	801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c648:	4628      	mov	r0, r5
 801c64a:	f104 0526 	add.w	r5, r4, #38	; 0x26
 801c64e:	f002 fbfb 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c652:	4628      	mov	r0, r5
 801c654:	f005 fdde 	bl	8022214 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c658:	9007      	str	r0, [sp, #28]
 801c65a:	2800      	cmp	r0, #0
 801c65c:	f000 80db 	beq.w	801c816 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 801c660:	f8db 2000 	ldr.w	r2, [fp]
 801c664:	a90d      	add	r1, sp, #52	; 0x34
 801c666:	a809      	add	r0, sp, #36	; 0x24
 801c668:	9209      	str	r2, [sp, #36]	; 0x24
 801c66a:	f8db 2004 	ldr.w	r2, [fp, #4]
 801c66e:	920a      	str	r2, [sp, #40]	; 0x28
 801c670:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c674:	920b      	str	r2, [sp, #44]	; 0x2c
 801c676:	f8db 200c 	ldr.w	r2, [fp, #12]
 801c67a:	920c      	str	r2, [sp, #48]	; 0x30
 801c67c:	f8da 2000 	ldr.w	r2, [sl]
 801c680:	920d      	str	r2, [sp, #52]	; 0x34
 801c682:	f8da 2004 	ldr.w	r2, [sl, #4]
 801c686:	920e      	str	r2, [sp, #56]	; 0x38
 801c688:	f8da 2008 	ldr.w	r2, [sl, #8]
 801c68c:	920f      	str	r2, [sp, #60]	; 0x3c
 801c68e:	f8da 200c 	ldr.w	r2, [sl, #12]
 801c692:	9210      	str	r2, [sp, #64]	; 0x40
 801c694:	4632      	mov	r2, r6
 801c696:	f002 fbff 	bl	801ee98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801c69a:	4632      	mov	r2, r6
 801c69c:	a90e      	add	r1, sp, #56	; 0x38
 801c69e:	a80a      	add	r0, sp, #40	; 0x28
 801c6a0:	f002 fbfa 	bl	801ee98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801c6a4:	4632      	mov	r2, r6
 801c6a6:	a90f      	add	r1, sp, #60	; 0x3c
 801c6a8:	a80b      	add	r0, sp, #44	; 0x2c
 801c6aa:	f002 fbf5 	bl	801ee98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801c6ae:	4632      	mov	r2, r6
 801c6b0:	a910      	add	r1, sp, #64	; 0x40
 801c6b2:	a80c      	add	r0, sp, #48	; 0x30
 801c6b4:	f002 fbf0 	bl	801ee98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801c6b8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801c6bc:	edd7 4a00 	vldr	s9, [r7]
 801c6c0:	eef0 6a67 	vmov.f32	s13, s15
 801c6c4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801c6c8:	edd7 5a01 	vldr	s11, [r7, #4]
 801c6cc:	eeb0 7a67 	vmov.f32	s14, s15
 801c6d0:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801c6d4:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801c6d8:	ed98 4a00 	vldr	s8, [r8]
 801c6dc:	eeb0 6a67 	vmov.f32	s12, s15
 801c6e0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801c6e4:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801c6e8:	ed98 5a01 	vldr	s10, [r8, #4]
 801c6ec:	ed99 9a00 	vldr	s18, [r9]
 801c6f0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801c6f4:	ed99 8a01 	vldr	s16, [r9, #4]
 801c6f8:	edd9 8a02 	vldr	s17, [r9, #8]
 801c6fc:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801c700:	ee16 6a10 	vmov	r6, s12
 801c704:	eeb0 6a67 	vmov.f32	s12, s15
 801c708:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801c70c:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801c710:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801c714:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801c718:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 801c71c:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 801c720:	ee16 0a10 	vmov	r0, s12
 801c724:	eeb0 6a67 	vmov.f32	s12, s15
 801c728:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801c72c:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801c730:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801c734:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 801c738:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 801c73c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801c740:	ee16 1a10 	vmov	r1, s12
 801c744:	eeb0 6a67 	vmov.f32	s12, s15
 801c748:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801c74c:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801c750:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801c754:	68ff      	ldr	r7, [r7, #12]
 801c756:	9624      	str	r6, [sp, #144]	; 0x90
 801c758:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801c75c:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 801c760:	ee16 2a10 	vmov	r2, s12
 801c764:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801c768:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 801c76c:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801c770:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801c774:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801c778:	4628      	mov	r0, r5
 801c77a:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 801c77e:	9b06      	ldr	r3, [sp, #24]
 801c780:	922d      	str	r2, [sp, #180]	; 0xb4
 801c782:	4a29      	ldr	r2, [pc, #164]	; (801c828 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 801c784:	9317      	str	r3, [sp, #92]	; 0x5c
 801c786:	8812      	ldrh	r2, [r2, #0]
 801c788:	9b07      	ldr	r3, [sp, #28]
 801c78a:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801c78e:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 801c792:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801c796:	9218      	str	r2, [sp, #96]	; 0x60
 801c798:	9319      	str	r3, [sp, #100]	; 0x64
 801c79a:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801c79e:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801c7a2:	9731      	str	r7, [sp, #196]	; 0xc4
 801c7a4:	f005 fd66 	bl	8022274 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c7a8:	901a      	str	r0, [sp, #104]	; 0x68
 801c7aa:	4628      	mov	r0, r5
 801c7ac:	f005 fc46 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c7b0:	901b      	str	r0, [sp, #108]	; 0x6c
 801c7b2:	4628      	mov	r0, r5
 801c7b4:	f005 fc76 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c7b8:	901c      	str	r0, [sp, #112]	; 0x70
 801c7ba:	4628      	mov	r0, r5
 801c7bc:	f005 fc3e 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c7c0:	eeb4 9a48 	vcmp.f32	s18, s16
 801c7c4:	901d      	str	r0, [sp, #116]	; 0x74
 801c7c6:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 801c7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7ce:	d107      	bne.n	801c7e0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 801c7d0:	eeb4 8a68 	vcmp.f32	s16, s17
 801c7d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7dc:	bf08      	it	eq
 801c7de:	461e      	moveq	r6, r3
 801c7e0:	4b12      	ldr	r3, [pc, #72]	; (801c82c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c7e8:	b10a      	cbz	r2, 801c7ee <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 801c7ea:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801c7ec:	b905      	cbnz	r5, 801c7f0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 801c7ee:	689d      	ldr	r5, [r3, #8]
 801c7f0:	682b      	ldr	r3, [r5, #0]
 801c7f2:	4620      	mov	r0, r4
 801c7f4:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 801c7f6:	f7ff fec1 	bl	801c57c <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 801c7fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801c7fe:	aa1e      	add	r2, sp, #120	; 0x78
 801c800:	9604      	str	r6, [sp, #16]
 801c802:	a917      	add	r1, sp, #92	; 0x5c
 801c804:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801c808:	ab13      	add	r3, sp, #76	; 0x4c
 801c80a:	4628      	mov	r0, r5
 801c80c:	9301      	str	r3, [sp, #4]
 801c80e:	ab15      	add	r3, sp, #84	; 0x54
 801c810:	9300      	str	r3, [sp, #0]
 801c812:	ab19      	add	r3, sp, #100	; 0x64
 801c814:	47b8      	blx	r7
 801c816:	b033      	add	sp, #204	; 0xcc
 801c818:	ecbd 8b04 	vpop	{d8-d9}
 801c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c820:	2300      	movs	r3, #0
 801c822:	9312      	str	r3, [sp, #72]	; 0x48
 801c824:	e6f7      	b.n	801c616 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 801c826:	bf00      	nop
 801c828:	24027f66 	.word	0x24027f66
 801c82c:	24027f6c 	.word	0x24027f6c

0801c830 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 801c830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c834:	ed2d 8b02 	vpush	{d8}
 801c838:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801c83c:	b098      	sub	sp, #96	; 0x60
 801c83e:	4604      	mov	r4, r0
 801c840:	4688      	mov	r8, r1
 801c842:	2b00      	cmp	r3, #0
 801c844:	d077      	beq.n	801c936 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 801c846:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801c84a:	4628      	mov	r0, r5
 801c84c:	f005 fbf6 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c850:	ee07 0a90 	vmov	s15, r0
 801c854:	4628      	mov	r0, r5
 801c856:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801c85a:	f005 fc23 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c85e:	4b4e      	ldr	r3, [pc, #312]	; (801c998 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 801c860:	ee07 0a90 	vmov	s15, r0
 801c864:	781b      	ldrb	r3, [r3, #0]
 801c866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c86a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801c86e:	2b01      	cmp	r3, #1
 801c870:	d066      	beq.n	801c940 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 801c872:	eeb0 6a47 	vmov.f32	s12, s14
 801c876:	ee17 3a10 	vmov	r3, s14
 801c87a:	eeb0 4a48 	vmov.f32	s8, s16
 801c87e:	eeb0 7a48 	vmov.f32	s14, s16
 801c882:	eef0 4a67 	vmov.f32	s9, s15
 801c886:	eeb0 8a67 	vmov.f32	s16, s15
 801c88a:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 801c88e:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 801c892:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 801c896:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 801c89a:	ee73 1a65 	vsub.f32	s3, s6, s11
 801c89e:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 801c8a2:	ee72 6ac5 	vsub.f32	s13, s5, s10
 801c8a6:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 801c8aa:	ee32 1a45 	vsub.f32	s2, s4, s10
 801c8ae:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801c8b0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801c8b2:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 801c8b6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801c8b8:	ee73 1ae5 	vsub.f32	s3, s7, s11
 801c8bc:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 801c8c0:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 801c8c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801c8c8:	eee1 6a21 	vfma.f32	s13, s2, s3
 801c8cc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801c8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8d4:	dd3d      	ble.n	801c952 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 801c8d6:	ed8d 5a04 	vstr	s10, [sp, #16]
 801c8da:	ed8d 2a05 	vstr	s4, [sp, #20]
 801c8de:	edcd 2a06 	vstr	s5, [sp, #24]
 801c8e2:	f8cd c01c 	str.w	ip, [sp, #28]
 801c8e6:	edcd 5a08 	vstr	s11, [sp, #32]
 801c8ea:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 801c8ee:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 801c8f2:	970b      	str	r7, [sp, #44]	; 0x2c
 801c8f4:	960c      	str	r6, [sp, #48]	; 0x30
 801c8f6:	950d      	str	r5, [sp, #52]	; 0x34
 801c8f8:	920e      	str	r2, [sp, #56]	; 0x38
 801c8fa:	900f      	str	r0, [sp, #60]	; 0x3c
 801c8fc:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801c900:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 801c904:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 801c908:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 801c90c:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 801c910:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801c914:	9316      	str	r3, [sp, #88]	; 0x58
 801c916:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 801c91a:	ab14      	add	r3, sp, #80	; 0x50
 801c91c:	2200      	movs	r2, #0
 801c91e:	4641      	mov	r1, r8
 801c920:	4620      	mov	r0, r4
 801c922:	9303      	str	r3, [sp, #12]
 801c924:	ab10      	add	r3, sp, #64	; 0x40
 801c926:	9302      	str	r3, [sp, #8]
 801c928:	ab0c      	add	r3, sp, #48	; 0x30
 801c92a:	9301      	str	r3, [sp, #4]
 801c92c:	ab08      	add	r3, sp, #32
 801c92e:	9300      	str	r3, [sp, #0]
 801c930:	ab04      	add	r3, sp, #16
 801c932:	f7ff fe2d 	bl	801c590 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801c936:	b018      	add	sp, #96	; 0x60
 801c938:	ecbd 8b02 	vpop	{d8}
 801c93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c940:	eeb0 6a48 	vmov.f32	s12, s16
 801c944:	ee17 3a90 	vmov	r3, s15
 801c948:	eef0 4a47 	vmov.f32	s9, s14
 801c94c:	eeb0 4a67 	vmov.f32	s8, s15
 801c950:	e79b      	b.n	801c88a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 801c952:	ed8d 5a05 	vstr	s10, [sp, #20]
 801c956:	ed8d 2a04 	vstr	s4, [sp, #16]
 801c95a:	f8cd c018 	str.w	ip, [sp, #24]
 801c95e:	edcd 2a07 	vstr	s5, [sp, #28]
 801c962:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 801c966:	ed8d 3a08 	vstr	s6, [sp, #32]
 801c96a:	970a      	str	r7, [sp, #40]	; 0x28
 801c96c:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 801c970:	960d      	str	r6, [sp, #52]	; 0x34
 801c972:	950c      	str	r5, [sp, #48]	; 0x30
 801c974:	900e      	str	r0, [sp, #56]	; 0x38
 801c976:	920f      	str	r2, [sp, #60]	; 0x3c
 801c978:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801c97c:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 801c980:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 801c984:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 801c988:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 801c98c:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801c990:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 801c994:	9317      	str	r3, [sp, #92]	; 0x5c
 801c996:	e7c0      	b.n	801c91a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 801c998:	24027f64 	.word	0x24027f64

0801c99c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 801c99c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801c9a0:	b133      	cbz	r3, 801c9b0 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801c9a2:	790b      	ldrb	r3, [r1, #4]
 801c9a4:	2b01      	cmp	r3, #1
 801c9a6:	bf01      	itttt	eq
 801c9a8:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 801c9aa:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 801c9ac:	8603      	strheq	r3, [r0, #48]	; 0x30
 801c9ae:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 801c9b0:	f7ff ba64 	b.w	801be7c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0801c9b4 <_ZNK8touchgfx5Image17invalidateContentEv>:
 801c9b4:	b508      	push	{r3, lr}
 801c9b6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801c9ba:	b10b      	cbz	r3, 801c9c0 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 801c9bc:	f7e7 fbe4 	bl	8004188 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801c9c0:	bd08      	pop	{r3, pc}

0801c9c2 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801c9c2:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c9c6:	4770      	bx	lr

0801c9c8 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 801c9c8:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801c9cc:	4770      	bx	lr

0801c9ce <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 801c9ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c9d0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801c9d4:	4605      	mov	r5, r0
 801c9d6:	2bff      	cmp	r3, #255	; 0xff
 801c9d8:	d11e      	bne.n	801ca18 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801c9da:	f101 0426 	add.w	r4, r1, #38	; 0x26
 801c9de:	4668      	mov	r0, sp
 801c9e0:	4621      	mov	r1, r4
 801c9e2:	f005 fb93 	bl	802210c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c9e6:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 801c9ea:	4620      	mov	r0, r4
 801c9ec:	f005 fb26 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c9f0:	4286      	cmp	r6, r0
 801c9f2:	d111      	bne.n	801ca18 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801c9f4:	4621      	mov	r1, r4
 801c9f6:	a802      	add	r0, sp, #8
 801c9f8:	f005 fb88 	bl	802210c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c9fc:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801ca00:	4620      	mov	r0, r4
 801ca02:	f005 fb4f 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ca06:	4286      	cmp	r6, r0
 801ca08:	d106      	bne.n	801ca18 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 801ca0a:	4621      	mov	r1, r4
 801ca0c:	4628      	mov	r0, r5
 801ca0e:	f005 fb7d 	bl	802210c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ca12:	4628      	mov	r0, r5
 801ca14:	b004      	add	sp, #16
 801ca16:	bd70      	pop	{r4, r5, r6, pc}
 801ca18:	2300      	movs	r3, #0
 801ca1a:	802b      	strh	r3, [r5, #0]
 801ca1c:	806b      	strh	r3, [r5, #2]
 801ca1e:	80ab      	strh	r3, [r5, #4]
 801ca20:	80eb      	strh	r3, [r5, #6]
 801ca22:	e7f6      	b.n	801ca12 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

0801ca24 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 801ca24:	b538      	push	{r3, r4, r5, lr}
 801ca26:	2300      	movs	r3, #0
 801ca28:	2501      	movs	r5, #1
 801ca2a:	4604      	mov	r4, r0
 801ca2c:	8083      	strh	r3, [r0, #4]
 801ca2e:	80c3      	strh	r3, [r0, #6]
 801ca30:	8103      	strh	r3, [r0, #8]
 801ca32:	8143      	strh	r3, [r0, #10]
 801ca34:	8183      	strh	r3, [r0, #12]
 801ca36:	81c3      	strh	r3, [r0, #14]
 801ca38:	8203      	strh	r3, [r0, #16]
 801ca3a:	8243      	strh	r3, [r0, #18]
 801ca3c:	61c3      	str	r3, [r0, #28]
 801ca3e:	8403      	strh	r3, [r0, #32]
 801ca40:	8443      	strh	r3, [r0, #34]	; 0x22
 801ca42:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801ca46:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 801ca4a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801ca4e:	4b07      	ldr	r3, [pc, #28]	; (801ca6c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 801ca50:	6003      	str	r3, [r0, #0]
 801ca52:	880b      	ldrh	r3, [r1, #0]
 801ca54:	84c3      	strh	r3, [r0, #38]	; 0x26
 801ca56:	23ff      	movs	r3, #255	; 0xff
 801ca58:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801ca5c:	f000 fc4e 	bl	801d2fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801ca60:	4b03      	ldr	r3, [pc, #12]	; (801ca70 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 801ca62:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801ca66:	4620      	mov	r0, r4
 801ca68:	6023      	str	r3, [r4, #0]
 801ca6a:	bd38      	pop	{r3, r4, r5, pc}
 801ca6c:	0802fc18 	.word	0x0802fc18
 801ca70:	0802f9e0 	.word	0x0802f9e0

0801ca74 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 801ca74:	4603      	mov	r3, r0
 801ca76:	3026      	adds	r0, #38	; 0x26
 801ca78:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801ca7c:	b90b      	cbnz	r3, 801ca82 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801ca7e:	f003 bd43 	b.w	8020508 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801ca82:	f003 bd51 	b.w	8020528 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0801ca88 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca8c:	4604      	mov	r4, r0
 801ca8e:	469b      	mov	fp, r3
 801ca90:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801ca94:	b0b3      	sub	sp, #204	; 0xcc
 801ca96:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801ca9a:	f9b1 6000 	ldrsh.w	r6, [r1]
 801ca9e:	8888      	ldrh	r0, [r1, #4]
 801caa0:	9206      	str	r2, [sp, #24]
 801caa2:	2200      	movs	r2, #0
 801caa4:	4430      	add	r0, r6
 801caa6:	9211      	str	r2, [sp, #68]	; 0x44
 801caa8:	b280      	uxth	r0, r0
 801caaa:	fa0f fe80 	sxth.w	lr, r0
 801caae:	4596      	cmp	lr, r2
 801cab0:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 801cab4:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 801cab8:	f340 811a 	ble.w	801ccf0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801cabc:	45b4      	cmp	ip, r6
 801cabe:	f340 8117 	ble.w	801ccf0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801cac2:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801cac6:	88ca      	ldrh	r2, [r1, #6]
 801cac8:	442a      	add	r2, r5
 801caca:	b292      	uxth	r2, r2
 801cacc:	b211      	sxth	r1, r2
 801cace:	2900      	cmp	r1, #0
 801cad0:	f340 810e 	ble.w	801ccf0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801cad4:	42ab      	cmp	r3, r5
 801cad6:	f340 810b 	ble.w	801ccf0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801cada:	45f4      	cmp	ip, lr
 801cadc:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801cae0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801cae4:	bfb8      	it	lt
 801cae6:	fa1f f08c 	uxthlt.w	r0, ip
 801caea:	428b      	cmp	r3, r1
 801caec:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801caf0:	bfb8      	it	lt
 801caf2:	b29a      	uxthlt	r2, r3
 801caf4:	1b80      	subs	r0, r0, r6
 801caf6:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801cafa:	1b52      	subs	r2, r2, r5
 801cafc:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801cb00:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801cb04:	ab11      	add	r3, sp, #68	; 0x44
 801cb06:	ad13      	add	r5, sp, #76	; 0x4c
 801cb08:	6822      	ldr	r2, [r4, #0]
 801cb0a:	1d26      	adds	r6, r4, #4
 801cb0c:	9307      	str	r3, [sp, #28]
 801cb0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801cb10:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cb14:	e885 0003 	stmia.w	r5, {r0, r1}
 801cb18:	4629      	mov	r1, r5
 801cb1a:	4620      	mov	r0, r4
 801cb1c:	4790      	blx	r2
 801cb1e:	4621      	mov	r1, r4
 801cb20:	a815      	add	r0, sp, #84	; 0x54
 801cb22:	f003 fc4d 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb26:	a815      	add	r0, sp, #84	; 0x54
 801cb28:	f002 f98e 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cb2c:	9b07      	ldr	r3, [sp, #28]
 801cb2e:	4631      	mov	r1, r6
 801cb30:	4618      	mov	r0, r3
 801cb32:	f002 f9cd 	bl	801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cb36:	4628      	mov	r0, r5
 801cb38:	f104 0526 	add.w	r5, r4, #38	; 0x26
 801cb3c:	f002 f984 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cb40:	4628      	mov	r0, r5
 801cb42:	f005 fb67 	bl	8022214 <_ZNK8touchgfx6Bitmap7getDataEv>
 801cb46:	9007      	str	r0, [sp, #28]
 801cb48:	2800      	cmp	r0, #0
 801cb4a:	f000 80ce 	beq.w	801ccea <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 801cb4e:	f8db 2000 	ldr.w	r2, [fp]
 801cb52:	a90d      	add	r1, sp, #52	; 0x34
 801cb54:	a809      	add	r0, sp, #36	; 0x24
 801cb56:	9209      	str	r2, [sp, #36]	; 0x24
 801cb58:	f8db 2004 	ldr.w	r2, [fp, #4]
 801cb5c:	920a      	str	r2, [sp, #40]	; 0x28
 801cb5e:	f8db 2008 	ldr.w	r2, [fp, #8]
 801cb62:	920b      	str	r2, [sp, #44]	; 0x2c
 801cb64:	f8db 200c 	ldr.w	r2, [fp, #12]
 801cb68:	920c      	str	r2, [sp, #48]	; 0x30
 801cb6a:	f8da 2000 	ldr.w	r2, [sl]
 801cb6e:	920d      	str	r2, [sp, #52]	; 0x34
 801cb70:	f8da 2004 	ldr.w	r2, [sl, #4]
 801cb74:	920e      	str	r2, [sp, #56]	; 0x38
 801cb76:	f8da 2008 	ldr.w	r2, [sl, #8]
 801cb7a:	920f      	str	r2, [sp, #60]	; 0x3c
 801cb7c:	f8da 200c 	ldr.w	r2, [sl, #12]
 801cb80:	9210      	str	r2, [sp, #64]	; 0x40
 801cb82:	4632      	mov	r2, r6
 801cb84:	f002 f988 	bl	801ee98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801cb88:	4632      	mov	r2, r6
 801cb8a:	a90e      	add	r1, sp, #56	; 0x38
 801cb8c:	a80a      	add	r0, sp, #40	; 0x28
 801cb8e:	f002 f983 	bl	801ee98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801cb92:	4632      	mov	r2, r6
 801cb94:	a90f      	add	r1, sp, #60	; 0x3c
 801cb96:	a80b      	add	r0, sp, #44	; 0x2c
 801cb98:	f002 f97e 	bl	801ee98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801cb9c:	4632      	mov	r2, r6
 801cb9e:	a910      	add	r1, sp, #64	; 0x40
 801cba0:	a80c      	add	r0, sp, #48	; 0x30
 801cba2:	f002 f979 	bl	801ee98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801cba6:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801cbaa:	edd7 3a00 	vldr	s7, [r7]
 801cbae:	eef0 6a67 	vmov.f32	s13, s15
 801cbb2:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801cbb6:	ed97 5a01 	vldr	s10, [r7, #4]
 801cbba:	eeb0 7a67 	vmov.f32	s14, s15
 801cbbe:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801cbc2:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801cbc6:	edd9 2a00 	vldr	s5, [r9]
 801cbca:	eeb0 6a67 	vmov.f32	s12, s15
 801cbce:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801cbd2:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801cbd6:	ed98 3a00 	vldr	s6, [r8]
 801cbda:	ed99 4a01 	vldr	s8, [r9, #4]
 801cbde:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801cbe2:	edd8 4a01 	vldr	s9, [r8, #4]
 801cbe6:	edd9 5a02 	vldr	s11, [r9, #8]
 801cbea:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801cbee:	ee16 6a10 	vmov	r6, s12
 801cbf2:	eeb0 6a67 	vmov.f32	s12, s15
 801cbf6:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801cbfa:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801cbfe:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801cc02:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801cc06:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 801cc0a:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 801cc0e:	ee16 0a10 	vmov	r0, s12
 801cc12:	eeb0 6a67 	vmov.f32	s12, s15
 801cc16:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801cc1a:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 801cc1e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801cc22:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801cc26:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 801cc2a:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 801cc2e:	ee16 1a10 	vmov	r1, s12
 801cc32:	eeb0 6a67 	vmov.f32	s12, s15
 801cc36:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801cc3a:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 801cc3e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801cc42:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801cc46:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801cc4a:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801cc4e:	68ff      	ldr	r7, [r7, #12]
 801cc50:	ee16 2a10 	vmov	r2, s12
 801cc54:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801cc58:	9624      	str	r6, [sp, #144]	; 0x90
 801cc5a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801cc5e:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801cc62:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801cc66:	4628      	mov	r0, r5
 801cc68:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 801cc6c:	9b06      	ldr	r3, [sp, #24]
 801cc6e:	922d      	str	r2, [sp, #180]	; 0xb4
 801cc70:	4a21      	ldr	r2, [pc, #132]	; (801ccf8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 801cc72:	9317      	str	r3, [sp, #92]	; 0x5c
 801cc74:	8812      	ldrh	r2, [r2, #0]
 801cc76:	9b07      	ldr	r3, [sp, #28]
 801cc78:	9218      	str	r2, [sp, #96]	; 0x60
 801cc7a:	9319      	str	r3, [sp, #100]	; 0x64
 801cc7c:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801cc80:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 801cc84:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801cc88:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801cc8c:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801cc90:	9731      	str	r7, [sp, #196]	; 0xc4
 801cc92:	f005 faef 	bl	8022274 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801cc96:	901a      	str	r0, [sp, #104]	; 0x68
 801cc98:	4628      	mov	r0, r5
 801cc9a:	f005 f9cf 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cc9e:	901b      	str	r0, [sp, #108]	; 0x6c
 801cca0:	4628      	mov	r0, r5
 801cca2:	f005 f9ff 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cca6:	901c      	str	r0, [sp, #112]	; 0x70
 801cca8:	4628      	mov	r0, r5
 801ccaa:	f005 f9c7 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ccae:	4b13      	ldr	r3, [pc, #76]	; (801ccfc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 801ccb0:	901d      	str	r0, [sp, #116]	; 0x74
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ccb8:	b10a      	cbz	r2, 801ccbe <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 801ccba:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801ccbc:	b905      	cbnz	r5, 801ccc0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 801ccbe:	689d      	ldr	r5, [r3, #8]
 801ccc0:	682b      	ldr	r3, [r5, #0]
 801ccc2:	4620      	mov	r0, r4
 801ccc4:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801ccc6:	f7ff fed5 	bl	801ca74 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801ccca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ccce:	aa1e      	add	r2, sp, #120	; 0x78
 801ccd0:	a917      	add	r1, sp, #92	; 0x5c
 801ccd2:	9304      	str	r3, [sp, #16]
 801ccd4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801ccd8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801ccdc:	ab13      	add	r3, sp, #76	; 0x4c
 801ccde:	4628      	mov	r0, r5
 801cce0:	9301      	str	r3, [sp, #4]
 801cce2:	ab15      	add	r3, sp, #84	; 0x54
 801cce4:	9300      	str	r3, [sp, #0]
 801cce6:	ab19      	add	r3, sp, #100	; 0x64
 801cce8:	47b0      	blx	r6
 801ccea:	b033      	add	sp, #204	; 0xcc
 801ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccf0:	2300      	movs	r3, #0
 801ccf2:	9312      	str	r3, [sp, #72]	; 0x48
 801ccf4:	e706      	b.n	801cb04 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 801ccf6:	bf00      	nop
 801ccf8:	24027f66 	.word	0x24027f66
 801ccfc:	24027f6c 	.word	0x24027f6c

0801cd00 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 801cd00:	b570      	push	{r4, r5, r6, lr}
 801cd02:	ed2d 8b04 	vpush	{d8-d9}
 801cd06:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801cd0a:	b098      	sub	sp, #96	; 0x60
 801cd0c:	4604      	mov	r4, r0
 801cd0e:	460e      	mov	r6, r1
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d065      	beq.n	801cde0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 801cd14:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801cd18:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801cd1c:	ed9f 8a37 	vldr	s16, [pc, #220]	; 801cdfc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 801cd20:	ee09 3a10 	vmov	s18, r3
 801cd24:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801cd28:	4628      	mov	r0, r5
 801cd2a:	ee08 3a90 	vmov	s17, r3
 801cd2e:	4b34      	ldr	r3, [pc, #208]	; (801ce00 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 801cd30:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801cd34:	930c      	str	r3, [sp, #48]	; 0x30
 801cd36:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801cd3a:	930d      	str	r3, [sp, #52]	; 0x34
 801cd3c:	930e      	str	r3, [sp, #56]	; 0x38
 801cd3e:	ee39 9a08 	vadd.f32	s18, s18, s16
 801cd42:	930f      	str	r3, [sp, #60]	; 0x3c
 801cd44:	f005 f97a 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cd48:	ee07 0a90 	vmov	s15, r0
 801cd4c:	4628      	mov	r0, r5
 801cd4e:	ee78 8a88 	vadd.f32	s17, s17, s16
 801cd52:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801cd56:	f005 f9a5 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cd5a:	4b2a      	ldr	r3, [pc, #168]	; (801ce04 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 801cd5c:	ee07 0a90 	vmov	s15, r0
 801cd60:	781b      	ldrb	r3, [r3, #0]
 801cd62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cd66:	eef0 7a48 	vmov.f32	s15, s16
 801cd6a:	2b01      	cmp	r3, #1
 801cd6c:	d13c      	bne.n	801cde8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 801cd6e:	eef0 6a69 	vmov.f32	s13, s19
 801cd72:	ee19 3a90 	vmov	r3, s19
 801cd76:	eeb0 6a47 	vmov.f32	s12, s14
 801cd7a:	eef0 5a47 	vmov.f32	s11, s14
 801cd7e:	eef0 9a48 	vmov.f32	s19, s16
 801cd82:	eeb0 7a48 	vmov.f32	s14, s16
 801cd86:	9314      	str	r3, [sp, #80]	; 0x50
 801cd88:	ab14      	add	r3, sp, #80	; 0x50
 801cd8a:	2200      	movs	r2, #0
 801cd8c:	4631      	mov	r1, r6
 801cd8e:	9303      	str	r3, [sp, #12]
 801cd90:	ab10      	add	r3, sp, #64	; 0x40
 801cd92:	4620      	mov	r0, r4
 801cd94:	edcd 7a04 	vstr	s15, [sp, #16]
 801cd98:	9302      	str	r3, [sp, #8]
 801cd9a:	ab0c      	add	r3, sp, #48	; 0x30
 801cd9c:	ed8d 9a05 	vstr	s18, [sp, #20]
 801cda0:	9301      	str	r3, [sp, #4]
 801cda2:	ab08      	add	r3, sp, #32
 801cda4:	ed8d 9a06 	vstr	s18, [sp, #24]
 801cda8:	9300      	str	r3, [sp, #0]
 801cdaa:	ab04      	add	r3, sp, #16
 801cdac:	edcd 7a07 	vstr	s15, [sp, #28]
 801cdb0:	edcd 7a08 	vstr	s15, [sp, #32]
 801cdb4:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801cdb8:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 801cdbc:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 801cdc0:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801cdc4:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 801cdc8:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 801cdcc:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801cdd0:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801cdd4:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 801cdd8:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 801cddc:	f7ff fe54 	bl	801ca88 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801cde0:	b018      	add	sp, #96	; 0x60
 801cde2:	ecbd 8b04 	vpop	{d8-d9}
 801cde6:	bd70      	pop	{r4, r5, r6, pc}
 801cde8:	eef0 6a47 	vmov.f32	s13, s14
 801cdec:	ee18 3a10 	vmov	r3, s16
 801cdf0:	eef0 5a69 	vmov.f32	s11, s19
 801cdf4:	eeb0 6a48 	vmov.f32	s12, s16
 801cdf8:	e7c5      	b.n	801cd86 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 801cdfa:	bf00      	nop
 801cdfc:	00000000 	.word	0x00000000
 801ce00:	42c80000 	.word	0x42c80000
 801ce04:	24027f64 	.word	0x24027f64

0801ce08 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801ce08:	2300      	movs	r3, #0
 801ce0a:	8083      	strh	r3, [r0, #4]
 801ce0c:	80c3      	strh	r3, [r0, #6]
 801ce0e:	8003      	strh	r3, [r0, #0]
 801ce10:	8043      	strh	r3, [r0, #2]
 801ce12:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801ce16:	2bff      	cmp	r3, #255	; 0xff
 801ce18:	bf01      	itttt	eq
 801ce1a:	890b      	ldrheq	r3, [r1, #8]
 801ce1c:	8083      	strheq	r3, [r0, #4]
 801ce1e:	894b      	ldrheq	r3, [r1, #10]
 801ce20:	80c3      	strheq	r3, [r0, #6]
 801ce22:	4770      	bx	lr

0801ce24 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801ce24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ce26:	4604      	mov	r4, r0
 801ce28:	466b      	mov	r3, sp
 801ce2a:	6808      	ldr	r0, [r1, #0]
 801ce2c:	6849      	ldr	r1, [r1, #4]
 801ce2e:	c303      	stmia	r3!, {r0, r1}
 801ce30:	6823      	ldr	r3, [r4, #0]
 801ce32:	4669      	mov	r1, sp
 801ce34:	4620      	mov	r0, r4
 801ce36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce38:	4798      	blx	r3
 801ce3a:	4b08      	ldr	r3, [pc, #32]	; (801ce5c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ce42:	b10a      	cbz	r2, 801ce48 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801ce44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ce46:	b900      	cbnz	r0, 801ce4a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801ce48:	6898      	ldr	r0, [r3, #8]
 801ce4a:	6803      	ldr	r3, [r0, #0]
 801ce4c:	4669      	mov	r1, sp
 801ce4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801ce50:	6a1d      	ldr	r5, [r3, #32]
 801ce52:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801ce56:	47a8      	blx	r5
 801ce58:	b003      	add	sp, #12
 801ce5a:	bd30      	pop	{r4, r5, pc}
 801ce5c:	24027f6c 	.word	0x24027f6c

0801ce60 <_ZNK8touchgfx3Box17invalidateContentEv>:
 801ce60:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801ce64:	b12a      	cbz	r2, 801ce72 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801ce66:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801ce6a:	b112      	cbz	r2, 801ce72 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801ce6c:	6803      	ldr	r3, [r0, #0]
 801ce6e:	695b      	ldr	r3, [r3, #20]
 801ce70:	4718      	bx	r3
 801ce72:	4770      	bx	lr

0801ce74 <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 801ce74:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 801ce78:	600b      	str	r3, [r1, #0]
 801ce7a:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 801ce7e:	6013      	str	r3, [r2, #0]
 801ce80:	4770      	bx	lr

0801ce82 <_ZN8touchgfx5Gauge8setWidthEs>:
 801ce82:	8101      	strh	r1, [r0, #8]
 801ce84:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 801ce88:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 801ce8c:	4770      	bx	lr

0801ce8e <_ZN8touchgfx5Gauge9setHeightEs>:
 801ce8e:	8141      	strh	r1, [r0, #10]
 801ce90:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 801ce94:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 801ce98:	4770      	bx	lr

0801ce9a <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 801ce9a:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 801ce9e:	4770      	bx	lr

0801cea0 <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 801cea0:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801cea4:	4770      	bx	lr

0801cea6 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 801cea6:	4770      	bx	lr

0801cea8 <_ZN8touchgfx5Gauge8setAlphaEh>:
 801cea8:	b538      	push	{r3, r4, r5, lr}
 801ceaa:	4604      	mov	r4, r0
 801ceac:	460d      	mov	r5, r1
 801ceae:	f7fc ff04 	bl	8019cba <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801ceb2:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801ceb6:	f884 517e 	strb.w	r5, [r4, #382]	; 0x17e
 801ceba:	bd38      	pop	{r3, r4, r5, pc}

0801cebc <_ZNK8touchgfx5Gauge17invalidateContentEv>:
 801cebc:	b510      	push	{r4, lr}
 801cebe:	6803      	ldr	r3, [r0, #0]
 801cec0:	4604      	mov	r4, r0
 801cec2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801cec6:	4798      	blx	r3
 801cec8:	b170      	cbz	r0, 801cee8 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 801ceca:	6823      	ldr	r3, [r4, #0]
 801cecc:	4620      	mov	r0, r4
 801cece:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801ced2:	4798      	blx	r3
 801ced4:	b140      	cbz	r0, 801cee8 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 801ced6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801ceda:	b12b      	cbz	r3, 801cee8 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 801cedc:	6823      	ldr	r3, [r4, #0]
 801cede:	4620      	mov	r0, r4
 801cee0:	695b      	ldr	r3, [r3, #20]
 801cee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cee6:	4718      	bx	r3
 801cee8:	bd10      	pop	{r4, pc}
	...

0801ceec <_ZN8touchgfx5GaugeC1Ev>:
 801ceec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ceee:	4604      	mov	r4, r0
 801cef0:	f7fc ffd6 	bl	8019ea0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801cef4:	4b18      	ldr	r3, [pc, #96]	; (801cf58 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 801cef6:	a902      	add	r1, sp, #8
 801cef8:	4626      	mov	r6, r4
 801cefa:	2500      	movs	r5, #0
 801cefc:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 801cf00:	f846 3bb4 	str.w	r3, [r6], #180
 801cf04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cf08:	4630      	mov	r0, r6
 801cf0a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801cf0e:	f7ff f89d 	bl	801c04c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801cf12:	2301      	movs	r3, #1
 801cf14:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 801cf18:	4638      	mov	r0, r7
 801cf1a:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 801cf1e:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 801cf22:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 801cf26:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 801cf2a:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 801cf2e:	f7fe fa0d 	bl	801b34c <_ZN8touchgfx6CircleC1Ev>
 801cf32:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801cf36:	4620      	mov	r0, r4
 801cf38:	f7fd f84b 	bl	8019fd2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801cf3c:	4639      	mov	r1, r7
 801cf3e:	4620      	mov	r0, r4
 801cf40:	f7fd f80e 	bl	8019f60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801cf44:	4620      	mov	r0, r4
 801cf46:	4631      	mov	r1, r6
 801cf48:	f7fd f80a 	bl	8019f60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801cf4c:	4620      	mov	r0, r4
 801cf4e:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 801cf52:	b003      	add	sp, #12
 801cf54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf56:	bf00      	nop
 801cf58:	0802fabc 	.word	0x0802fabc

0801cf5c <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801cf5c:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 801cf60:	4770      	bx	lr

0801cf62 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801cf62:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 801cf66:	4770      	bx	lr

0801cf68 <_ZN8touchgfx5Gauge13setArcVisibleEb>:
 801cf68:	f880 117d 	strb.w	r1, [r0, #381]	; 0x17d
 801cf6c:	4770      	bx	lr

0801cf6e <_ZN8touchgfx5Gauge11putArcOnTopEb>:
 801cf6e:	b570      	push	{r4, r5, r6, lr}
 801cf70:	6803      	ldr	r3, [r0, #0]
 801cf72:	4604      	mov	r4, r0
 801cf74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cf76:	b151      	cbz	r1, 801cf8e <_ZN8touchgfx5Gauge11putArcOnTopEb+0x20>
 801cf78:	f500 75ac 	add.w	r5, r0, #344	; 0x158
 801cf7c:	4629      	mov	r1, r5
 801cf7e:	4798      	blx	r3
 801cf80:	6823      	ldr	r3, [r4, #0]
 801cf82:	4629      	mov	r1, r5
 801cf84:	4620      	mov	r0, r4
 801cf86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cf88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf8c:	4718      	bx	r3
 801cf8e:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 801cf92:	e7f3      	b.n	801cf7c <_ZN8touchgfx5Gauge11putArcOnTopEb+0xe>

0801cf94 <_ZN8touchgfx5Gauge6getArcEv>:
 801cf94:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 801cf98:	4770      	bx	lr
	...

0801cf9c <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 801cf9c:	b538      	push	{r3, r4, r5, lr}
 801cf9e:	8902      	ldrh	r2, [r0, #8]
 801cfa0:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 801cfa4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801cfa8:	4604      	mov	r4, r0
 801cfaa:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 801cfae:	2200      	movs	r2, #0
 801cfb0:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 801cfb4:	4628      	mov	r0, r5
 801cfb6:	4611      	mov	r1, r2
 801cfb8:	f7ea fe75 	bl	8007ca6 <_ZN8touchgfx8Drawable5setXYEss>
 801cfbc:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 801cfc0:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801cfc4:	4628      	mov	r0, r5
 801cfc6:	1a9b      	subs	r3, r3, r2
 801cfc8:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 801cfcc:	ee07 3a90 	vmov	s15, r3
 801cfd0:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 801cfd4:	1a9b      	subs	r3, r3, r2
 801cfd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cfda:	ee07 3a10 	vmov	s14, r3
 801cfde:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 801cfe2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cfe6:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 801cfea:	f7ff f87b 	bl	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801cfee:	4b16      	ldr	r3, [pc, #88]	; (801d048 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 801cff0:	4628      	mov	r0, r5
 801cff2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 801cff6:	f7ff f875 	bl	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801cffa:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801cffe:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 801d002:	4628      	mov	r0, r5
 801d004:	ee07 3a90 	vmov	s15, r3
 801d008:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 801d00c:	ee07 2a10 	vmov	s14, r2
 801d010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d014:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801d018:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d01c:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 801d020:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801d024:	f7ff f85e 	bl	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801d028:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 801d02c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 801d030:	4628      	mov	r0, r5
 801d032:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 801d036:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 801d03a:	f7ff f853 	bl	801c0e4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801d03e:	2301      	movs	r3, #1
 801d040:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801d044:	bd38      	pop	{r3, r4, r5, pc}
 801d046:	bf00      	nop
 801d048:	43960000 	.word	0x43960000

0801d04c <_ZN8touchgfx5Gauge9setNeedleEtss>:
 801d04c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d04e:	4604      	mov	r4, r0
 801d050:	a802      	add	r0, sp, #8
 801d052:	4616      	mov	r6, r2
 801d054:	461d      	mov	r5, r3
 801d056:	f820 1d04 	strh.w	r1, [r0, #-4]!
 801d05a:	4601      	mov	r1, r0
 801d05c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801d060:	f7ff f996 	bl	801c390 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 801d064:	4620      	mov	r0, r4
 801d066:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 801d06a:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 801d06e:	f7ff ff95 	bl	801cf9c <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801d072:	b002      	add	sp, #8
 801d074:	bd70      	pop	{r4, r5, r6, pc}

0801d076 <_ZN8touchgfx5Gauge9setCenterEii>:
 801d076:	b570      	push	{r4, r5, r6, lr}
 801d078:	4606      	mov	r6, r0
 801d07a:	460d      	mov	r5, r1
 801d07c:	4614      	mov	r4, r2
 801d07e:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 801d082:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 801d086:	f7ff ff89 	bl	801cf9c <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801d08a:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 801d08e:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 801d092:	1aa4      	subs	r4, r4, r2
 801d094:	1a6d      	subs	r5, r5, r1
 801d096:	0164      	lsls	r4, r4, #5
 801d098:	016d      	lsls	r5, r5, #5
 801d09a:	3410      	adds	r4, #16
 801d09c:	3510      	adds	r5, #16
 801d09e:	f8c6 4188 	str.w	r4, [r6, #392]	; 0x188
 801d0a2:	f8c6 5184 	str.w	r5, [r6, #388]	; 0x184
 801d0a6:	bd70      	pop	{r4, r5, r6, pc}

0801d0a8 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 801d0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d0aa:	0149      	lsls	r1, r1, #5
 801d0ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801d0ae:	4604      	mov	r4, r0
 801d0b0:	4299      	cmp	r1, r3
 801d0b2:	9101      	str	r1, [sp, #4]
 801d0b4:	d00b      	beq.n	801d0ce <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 801d0b6:	4601      	mov	r1, r0
 801d0b8:	aa01      	add	r2, sp, #4
 801d0ba:	a802      	add	r0, sp, #8
 801d0bc:	f7fe fb42 	bl	801b744 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 801d0c0:	9b01      	ldr	r3, [sp, #4]
 801d0c2:	a902      	add	r1, sp, #8
 801d0c4:	4620      	mov	r0, r4
 801d0c6:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d0c8:	6823      	ldr	r3, [r4, #0]
 801d0ca:	691b      	ldr	r3, [r3, #16]
 801d0cc:	4798      	blx	r3
 801d0ce:	b004      	add	sp, #16
 801d0d0:	bd10      	pop	{r4, pc}
	...

0801d0d4 <_ZN8touchgfx5Gauge8setValueEi>:
 801d0d4:	b570      	push	{r4, r5, r6, lr}
 801d0d6:	4604      	mov	r4, r0
 801d0d8:	f7fc fe3a 	bl	8019d50 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801d0dc:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801d0e0:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 801d0e4:	4620      	mov	r0, r4
 801d0e6:	429a      	cmp	r2, r3
 801d0e8:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 801d0ec:	bfac      	ite	ge
 801d0ee:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 801d0f2:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 801d0f6:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801d0fa:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801d0fe:	1ac9      	subs	r1, r1, r3
 801d100:	2900      	cmp	r1, #0
 801d102:	bfb8      	it	lt
 801d104:	4249      	neglt	r1, r1
 801d106:	b289      	uxth	r1, r1
 801d108:	f7fc fe44 	bl	8019d94 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801d10c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801d110:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801d114:	4605      	mov	r5, r0
 801d116:	eddf 6a18 	vldr	s13, [pc, #96]	; 801d178 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801d11a:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801d11e:	429a      	cmp	r2, r3
 801d120:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801d17c <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 801d124:	da15      	bge.n	801d152 <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 801d126:	1b5b      	subs	r3, r3, r5
 801d128:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801d12c:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801d130:	ee07 3a90 	vmov	s15, r3
 801d134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d138:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801d13c:	ee21 1a07 	vmul.f32	s2, s2, s14
 801d140:	f7fe ff47 	bl	801bfd2 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801d144:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801d148:	1b49      	subs	r1, r1, r5
 801d14a:	4630      	mov	r0, r6
 801d14c:	f7ff ffac 	bl	801d0a8 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 801d150:	bd70      	pop	{r4, r5, r6, pc}
 801d152:	442b      	add	r3, r5
 801d154:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801d158:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801d15c:	ee07 3a90 	vmov	s15, r3
 801d160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d164:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801d168:	ee21 1a07 	vmul.f32	s2, s2, s14
 801d16c:	f7fe ff31 	bl	801bfd2 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801d170:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801d174:	4429      	add	r1, r5
 801d176:	e7e8      	b.n	801d14a <_ZN8touchgfx5Gauge8setValueEi+0x76>
 801d178:	43340000 	.word	0x43340000
 801d17c:	40490fdb 	.word	0x40490fdb

0801d180 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 801d180:	b510      	push	{r4, lr}
 801d182:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 801d186:	0149      	lsls	r1, r1, #5
 801d188:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 801d18c:	0152      	lsls	r2, r2, #5
 801d18e:	4604      	mov	r4, r0
 801d190:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
 801d194:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 801d198:	f7fc fd8c 	bl	8019cb4 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 801d19c:	4601      	mov	r1, r0
 801d19e:	4620      	mov	r0, r4
 801d1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d1a4:	f7ff bf96 	b.w	801d0d4 <_ZN8touchgfx5Gauge8setValueEi>

0801d1a8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801d1a8:	b570      	push	{r4, r5, r6, lr}
 801d1aa:	880b      	ldrh	r3, [r1, #0]
 801d1ac:	4605      	mov	r5, r0
 801d1ae:	4604      	mov	r4, r0
 801d1b0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801d1b2:	8813      	ldrh	r3, [r2, #0]
 801d1b4:	f825 3f30 	strh.w	r3, [r5, #48]!
 801d1b8:	4628      	mov	r0, r5
 801d1ba:	f004 ff3f 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d1be:	4606      	mov	r6, r0
 801d1c0:	4628      	mov	r0, r5
 801d1c2:	f004 ff6f 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d1c6:	6823      	ldr	r3, [r4, #0]
 801d1c8:	4605      	mov	r5, r0
 801d1ca:	4631      	mov	r1, r6
 801d1cc:	4620      	mov	r0, r4
 801d1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1d0:	4798      	blx	r3
 801d1d2:	6823      	ldr	r3, [r4, #0]
 801d1d4:	4629      	mov	r1, r5
 801d1d6:	4620      	mov	r0, r4
 801d1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d1da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d1de:	4718      	bx	r3

0801d1e0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801d1e0:	b510      	push	{r4, lr}
 801d1e2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801d1e6:	4604      	mov	r4, r0
 801d1e8:	2bff      	cmp	r3, #255	; 0xff
 801d1ea:	d006      	beq.n	801d1fa <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801d1ec:	2300      	movs	r3, #0
 801d1ee:	8003      	strh	r3, [r0, #0]
 801d1f0:	8043      	strh	r3, [r0, #2]
 801d1f2:	8083      	strh	r3, [r0, #4]
 801d1f4:	80c3      	strh	r3, [r0, #6]
 801d1f6:	4620      	mov	r0, r4
 801d1f8:	bd10      	pop	{r4, pc}
 801d1fa:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801d1fe:	b11b      	cbz	r3, 801d208 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801d200:	3130      	adds	r1, #48	; 0x30
 801d202:	f004 ff83 	bl	802210c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d206:	e7f6      	b.n	801d1f6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801d208:	312e      	adds	r1, #46	; 0x2e
 801d20a:	e7fa      	b.n	801d202 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801d20c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801d20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d210:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801d214:	b08a      	sub	sp, #40	; 0x28
 801d216:	4604      	mov	r4, r0
 801d218:	4688      	mov	r8, r1
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d066      	beq.n	801d2ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801d21e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801d220:	a805      	add	r0, sp, #20
 801d222:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d226:	f004 ff09 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d22a:	4607      	mov	r7, r0
 801d22c:	a805      	add	r0, sp, #20
 801d22e:	f004 ff39 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d232:	f9b8 6000 	ldrsh.w	r6, [r8]
 801d236:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801d23a:	2300      	movs	r3, #0
 801d23c:	4432      	add	r2, r6
 801d23e:	9306      	str	r3, [sp, #24]
 801d240:	b292      	uxth	r2, r2
 801d242:	fa0f fc82 	sxth.w	ip, r2
 801d246:	459c      	cmp	ip, r3
 801d248:	dd52      	ble.n	801d2f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801d24a:	42b7      	cmp	r7, r6
 801d24c:	dd50      	ble.n	801d2f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801d24e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801d252:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801d256:	442b      	add	r3, r5
 801d258:	b29b      	uxth	r3, r3
 801d25a:	b219      	sxth	r1, r3
 801d25c:	2900      	cmp	r1, #0
 801d25e:	dd47      	ble.n	801d2f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801d260:	42a8      	cmp	r0, r5
 801d262:	dd45      	ble.n	801d2f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801d264:	4567      	cmp	r7, ip
 801d266:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801d26a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801d26e:	bfb8      	it	lt
 801d270:	b2ba      	uxthlt	r2, r7
 801d272:	4288      	cmp	r0, r1
 801d274:	f8ad 6018 	strh.w	r6, [sp, #24]
 801d278:	bfb8      	it	lt
 801d27a:	b283      	uxthlt	r3, r0
 801d27c:	1b92      	subs	r2, r2, r6
 801d27e:	f8ad 501a 	strh.w	r5, [sp, #26]
 801d282:	1b5b      	subs	r3, r3, r5
 801d284:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d288:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d28c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d294:	429a      	cmp	r2, r3
 801d296:	d026      	beq.n	801d2e6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801d298:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	dd22      	ble.n	801d2e6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801d2a0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	dd1e      	ble.n	801d2e6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	a908      	add	r1, sp, #32
 801d2ac:	4620      	mov	r0, r4
 801d2ae:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d2b2:	6823      	ldr	r3, [r4, #0]
 801d2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2b6:	4798      	blx	r3
 801d2b8:	4b0f      	ldr	r3, [pc, #60]	; (801d2f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d2c0:	b10a      	cbz	r2, 801d2c6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801d2c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d2c4:	b900      	cbnz	r0, 801d2c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801d2c6:	6898      	ldr	r0, [r3, #8]
 801d2c8:	2501      	movs	r5, #1
 801d2ca:	6801      	ldr	r1, [r0, #0]
 801d2cc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d2d0:	9502      	str	r5, [sp, #8]
 801d2d2:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801d2d6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d2da:	9401      	str	r4, [sp, #4]
 801d2dc:	ac06      	add	r4, sp, #24
 801d2de:	9400      	str	r4, [sp, #0]
 801d2e0:	688c      	ldr	r4, [r1, #8]
 801d2e2:	a905      	add	r1, sp, #20
 801d2e4:	47a0      	blx	r4
 801d2e6:	b00a      	add	sp, #40	; 0x28
 801d2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2ec:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801d2ee:	e797      	b.n	801d220 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	9307      	str	r3, [sp, #28]
 801d2f4:	e7ca      	b.n	801d28c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801d2f6:	bf00      	nop
 801d2f8:	24027f6c 	.word	0x24027f6c

0801d2fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801d2fc:	b570      	push	{r4, r5, r6, lr}
 801d2fe:	880b      	ldrh	r3, [r1, #0]
 801d300:	460d      	mov	r5, r1
 801d302:	4604      	mov	r4, r0
 801d304:	84c3      	strh	r3, [r0, #38]	; 0x26
 801d306:	4608      	mov	r0, r1
 801d308:	f004 fe98 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d30c:	4606      	mov	r6, r0
 801d30e:	4628      	mov	r0, r5
 801d310:	f004 fec8 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d314:	6823      	ldr	r3, [r4, #0]
 801d316:	4605      	mov	r5, r0
 801d318:	4631      	mov	r1, r6
 801d31a:	4620      	mov	r0, r4
 801d31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d31e:	4798      	blx	r3
 801d320:	6823      	ldr	r3, [r4, #0]
 801d322:	4629      	mov	r1, r5
 801d324:	4620      	mov	r0, r4
 801d326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d32c:	4718      	bx	r3

0801d32e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801d32e:	b510      	push	{r4, lr}
 801d330:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801d334:	4604      	mov	r4, r0
 801d336:	2bff      	cmp	r3, #255	; 0xff
 801d338:	d006      	beq.n	801d348 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801d33a:	2300      	movs	r3, #0
 801d33c:	8003      	strh	r3, [r0, #0]
 801d33e:	8043      	strh	r3, [r0, #2]
 801d340:	8083      	strh	r3, [r0, #4]
 801d342:	80c3      	strh	r3, [r0, #6]
 801d344:	4620      	mov	r0, r4
 801d346:	bd10      	pop	{r4, pc}
 801d348:	3126      	adds	r1, #38	; 0x26
 801d34a:	f004 fedf 	bl	802210c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d34e:	e7f9      	b.n	801d344 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801d350 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801d350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d354:	4604      	mov	r4, r0
 801d356:	b088      	sub	sp, #32
 801d358:	2500      	movs	r5, #0
 801d35a:	460f      	mov	r7, r1
 801d35c:	f854 3b26 	ldr.w	r3, [r4], #38
 801d360:	a904      	add	r1, sp, #16
 801d362:	4606      	mov	r6, r0
 801d364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d366:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d36a:	4798      	blx	r3
 801d36c:	4620      	mov	r0, r4
 801d36e:	f004 fe65 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d372:	4680      	mov	r8, r0
 801d374:	4620      	mov	r0, r4
 801d376:	f004 fe95 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d37a:	9506      	str	r5, [sp, #24]
 801d37c:	ad06      	add	r5, sp, #24
 801d37e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d382:	4639      	mov	r1, r7
 801d384:	f8ad 801c 	strh.w	r8, [sp, #28]
 801d388:	4628      	mov	r0, r5
 801d38a:	f7fc ff65 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 801d38e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d392:	2b00      	cmp	r3, #0
 801d394:	dd19      	ble.n	801d3ca <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801d396:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	dd15      	ble.n	801d3ca <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801d39e:	4b0c      	ldr	r3, [pc, #48]	; (801d3d0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d3a6:	b10a      	cbz	r2, 801d3ac <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801d3a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d3aa:	b900      	cbnz	r0, 801d3ae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801d3ac:	6898      	ldr	r0, [r3, #8]
 801d3ae:	2701      	movs	r7, #1
 801d3b0:	6801      	ldr	r1, [r0, #0]
 801d3b2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d3b6:	9702      	str	r7, [sp, #8]
 801d3b8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801d3bc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d3c0:	e9cd 5600 	strd	r5, r6, [sp]
 801d3c4:	688d      	ldr	r5, [r1, #8]
 801d3c6:	4621      	mov	r1, r4
 801d3c8:	47a8      	blx	r5
 801d3ca:	b008      	add	sp, #32
 801d3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3d0:	24027f6c 	.word	0x24027f6c

0801d3d4 <_ZN8touchgfx7OutlineD1Ev>:
 801d3d4:	4770      	bx	lr

0801d3d6 <_ZN8touchgfx7OutlineD0Ev>:
 801d3d6:	b510      	push	{r4, lr}
 801d3d8:	4604      	mov	r4, r0
 801d3da:	2130      	movs	r1, #48	; 0x30
 801d3dc:	f00d fa59 	bl	802a892 <_ZdlPvj>
 801d3e0:	4620      	mov	r0, r4
 801d3e2:	bd10      	pop	{r4, pc}

0801d3e4 <_ZN8touchgfx7Outline5resetEv>:
 801d3e4:	b510      	push	{r4, lr}
 801d3e6:	4604      	mov	r4, r0
 801d3e8:	f000 fe86 	bl	801e0f8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801d3ec:	60e0      	str	r0, [r4, #12]
 801d3ee:	f000 fe89 	bl	801e104 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801d3f2:	68e3      	ldr	r3, [r4, #12]
 801d3f4:	08c0      	lsrs	r0, r0, #3
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801d3fc:	6123      	str	r3, [r4, #16]
 801d3fe:	3801      	subs	r0, #1
 801d400:	60a2      	str	r2, [r4, #8]
 801d402:	6060      	str	r0, [r4, #4]
 801d404:	8019      	strh	r1, [r3, #0]
 801d406:	8059      	strh	r1, [r3, #2]
 801d408:	809a      	strh	r2, [r3, #4]
 801d40a:	80da      	strh	r2, [r3, #6]
 801d40c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d40e:	f023 0301 	bic.w	r3, r3, #1
 801d412:	f043 0302 	orr.w	r3, r3, #2
 801d416:	6263      	str	r3, [r4, #36]	; 0x24
 801d418:	bd10      	pop	{r4, pc}
	...

0801d41c <_ZN8touchgfx7OutlineC1Ev>:
 801d41c:	4b0a      	ldr	r3, [pc, #40]	; (801d448 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801d41e:	b510      	push	{r4, lr}
 801d420:	6003      	str	r3, [r0, #0]
 801d422:	2300      	movs	r3, #0
 801d424:	4604      	mov	r4, r0
 801d426:	6243      	str	r3, [r0, #36]	; 0x24
 801d428:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801d42c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d430:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801d434:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801d438:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801d43c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 801d440:	f7ff ffd0 	bl	801d3e4 <_ZN8touchgfx7Outline5resetEv>
 801d444:	4620      	mov	r0, r4
 801d446:	bd10      	pop	{r4, pc}
 801d448:	0802fc84 	.word	0x0802fc84

0801d44c <_ZN8touchgfx7Outline10renderLineEiiii>:
 801d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d450:	b093      	sub	sp, #76	; 0x4c
 801d452:	1156      	asrs	r6, r2, #5
 801d454:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801d456:	9305      	str	r3, [sp, #20]
 801d458:	1153      	asrs	r3, r2, #5
 801d45a:	f004 051f 	and.w	r5, r4, #31
 801d45e:	9303      	str	r3, [sp, #12]
 801d460:	1163      	asrs	r3, r4, #5
 801d462:	9504      	str	r5, [sp, #16]
 801d464:	1165      	asrs	r5, r4, #5
 801d466:	9306      	str	r3, [sp, #24]
 801d468:	f002 031f 	and.w	r3, r2, #31
 801d46c:	42ae      	cmp	r6, r5
 801d46e:	f040 80f4 	bne.w	801d65a <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801d472:	9c04      	ldr	r4, [sp, #16]
 801d474:	9a05      	ldr	r2, [sp, #20]
 801d476:	42a3      	cmp	r3, r4
 801d478:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801d47c:	6902      	ldr	r2, [r0, #16]
 801d47e:	d125      	bne.n	801d4cc <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 801d480:	f9b2 3000 	ldrsh.w	r3, [r2]
 801d484:	459e      	cmp	lr, r3
 801d486:	d103      	bne.n	801d490 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801d488:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801d48c:	429e      	cmp	r6, r3
 801d48e:	d035      	beq.n	801d4fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801d490:	88d1      	ldrh	r1, [r2, #6]
 801d492:	8893      	ldrh	r3, [r2, #4]
 801d494:	430b      	orrs	r3, r1
 801d496:	d010      	beq.n	801d4ba <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801d498:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	db0c      	blt.n	801d4ba <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801d4a0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801d4a2:	428b      	cmp	r3, r1
 801d4a4:	da09      	bge.n	801d4ba <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801d4a6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801d4aa:	428b      	cmp	r3, r1
 801d4ac:	f103 0301 	add.w	r3, r3, #1
 801d4b0:	bf38      	it	cc
 801d4b2:	3208      	addcc	r2, #8
 801d4b4:	6083      	str	r3, [r0, #8]
 801d4b6:	bf38      	it	cc
 801d4b8:	6102      	strcc	r2, [r0, #16]
 801d4ba:	6903      	ldr	r3, [r0, #16]
 801d4bc:	9a03      	ldr	r2, [sp, #12]
 801d4be:	f8a3 e000 	strh.w	lr, [r3]
 801d4c2:	805a      	strh	r2, [r3, #2]
 801d4c4:	2200      	movs	r2, #0
 801d4c6:	809a      	strh	r2, [r3, #4]
 801d4c8:	80da      	strh	r2, [r3, #6]
 801d4ca:	e017      	b.n	801d4fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801d4cc:	9c05      	ldr	r4, [sp, #20]
 801d4ce:	114e      	asrs	r6, r1, #5
 801d4d0:	f001 0c1f 	and.w	ip, r1, #31
 801d4d4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801d4d8:	f004 041f 	and.w	r4, r4, #31
 801d4dc:	4576      	cmp	r6, lr
 801d4de:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801d4e2:	9402      	str	r4, [sp, #8]
 801d4e4:	9c04      	ldr	r4, [sp, #16]
 801d4e6:	eba4 0403 	sub.w	r4, r4, r3
 801d4ea:	d10a      	bne.n	801d502 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801d4ec:	9b02      	ldr	r3, [sp, #8]
 801d4ee:	44a0      	add	r8, r4
 801d4f0:	449c      	add	ip, r3
 801d4f2:	f8a2 8004 	strh.w	r8, [r2, #4]
 801d4f6:	fb04 a40c 	mla	r4, r4, ip, sl
 801d4fa:	80d4      	strh	r4, [r2, #6]
 801d4fc:	b013      	add	sp, #76	; 0x4c
 801d4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d502:	9d05      	ldr	r5, [sp, #20]
 801d504:	1a69      	subs	r1, r5, r1
 801d506:	bf51      	iteee	pl
 801d508:	f1cc 0520 	rsbpl	r5, ip, #32
 801d50c:	fb04 f40c 	mulmi.w	r4, r4, ip
 801d510:	4249      	negmi	r1, r1
 801d512:	2500      	movmi	r5, #0
 801d514:	bf5d      	ittte	pl
 801d516:	436c      	mulpl	r4, r5
 801d518:	2520      	movpl	r5, #32
 801d51a:	f04f 0901 	movpl.w	r9, #1
 801d51e:	f04f 39ff 	movmi.w	r9, #4294967295
 801d522:	9501      	str	r5, [sp, #4]
 801d524:	9f01      	ldr	r7, [sp, #4]
 801d526:	444e      	add	r6, r9
 801d528:	fb94 f5f1 	sdiv	r5, r4, r1
 801d52c:	fb01 4415 	mls	r4, r1, r5, r4
 801d530:	44bc      	add	ip, r7
 801d532:	2c00      	cmp	r4, #0
 801d534:	bfbc      	itt	lt
 801d536:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801d53a:	1864      	addlt	r4, r4, r1
 801d53c:	44a8      	add	r8, r5
 801d53e:	fb05 ac0c 	mla	ip, r5, ip, sl
 801d542:	f8a2 8004 	strh.w	r8, [r2, #4]
 801d546:	f8a2 c006 	strh.w	ip, [r2, #6]
 801d54a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801d54e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801d552:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801d556:	ea58 0202 	orrs.w	r2, r8, r2
 801d55a:	d011      	beq.n	801d580 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801d55c:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801d560:	f1b8 0f00 	cmp.w	r8, #0
 801d564:	db0c      	blt.n	801d580 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801d566:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801d568:	4590      	cmp	r8, r2
 801d56a:	da09      	bge.n	801d580 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801d56c:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 801d570:	4590      	cmp	r8, r2
 801d572:	bf3c      	itt	cc
 801d574:	f10c 0208 	addcc.w	r2, ip, #8
 801d578:	6102      	strcc	r2, [r0, #16]
 801d57a:	f108 0201 	add.w	r2, r8, #1
 801d57e:	6082      	str	r2, [r0, #8]
 801d580:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801d584:	2700      	movs	r7, #0
 801d586:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d58a:	45b6      	cmp	lr, r6
 801d58c:	f8ac 6000 	strh.w	r6, [ip]
 801d590:	442b      	add	r3, r5
 801d592:	f8ac 2002 	strh.w	r2, [ip, #2]
 801d596:	f8ac 7004 	strh.w	r7, [ip, #4]
 801d59a:	f8ac 7006 	strh.w	r7, [ip, #6]
 801d59e:	d04b      	beq.n	801d638 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 801d5a0:	9f04      	ldr	r7, [sp, #16]
 801d5a2:	1a64      	subs	r4, r4, r1
 801d5a4:	f04f 0a00 	mov.w	sl, #0
 801d5a8:	1aff      	subs	r7, r7, r3
 801d5aa:	443d      	add	r5, r7
 801d5ac:	016d      	lsls	r5, r5, #5
 801d5ae:	fb95 f8f1 	sdiv	r8, r5, r1
 801d5b2:	fb01 5518 	mls	r5, r1, r8, r5
 801d5b6:	2d00      	cmp	r5, #0
 801d5b8:	bfbc      	itt	lt
 801d5ba:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801d5be:	186d      	addlt	r5, r5, r1
 801d5c0:	f108 0701 	add.w	r7, r8, #1
 801d5c4:	9703      	str	r7, [sp, #12]
 801d5c6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801d5ca:	1964      	adds	r4, r4, r5
 801d5cc:	444e      	add	r6, r9
 801d5ce:	bf54      	ite	pl
 801d5d0:	9f03      	ldrpl	r7, [sp, #12]
 801d5d2:	4647      	movmi	r7, r8
 801d5d4:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801d5d8:	bf58      	it	pl
 801d5da:	1a64      	subpl	r4, r4, r1
 801d5dc:	443b      	add	r3, r7
 801d5de:	44bb      	add	fp, r7
 801d5e0:	f8ac b004 	strh.w	fp, [ip, #4]
 801d5e4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801d5e8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801d5ec:	f8ac b006 	strh.w	fp, [ip, #6]
 801d5f0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801d5f4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801d5f8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801d5fc:	ea5b 0707 	orrs.w	r7, fp, r7
 801d600:	d011      	beq.n	801d626 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801d602:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801d606:	f1bb 0f00 	cmp.w	fp, #0
 801d60a:	db0c      	blt.n	801d626 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801d60c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801d60e:	45bb      	cmp	fp, r7
 801d610:	da09      	bge.n	801d626 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801d612:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801d616:	45bb      	cmp	fp, r7
 801d618:	bf3c      	itt	cc
 801d61a:	f10c 0708 	addcc.w	r7, ip, #8
 801d61e:	6107      	strcc	r7, [r0, #16]
 801d620:	f10b 0701 	add.w	r7, fp, #1
 801d624:	6087      	str	r7, [r0, #8]
 801d626:	6907      	ldr	r7, [r0, #16]
 801d628:	45b6      	cmp	lr, r6
 801d62a:	803e      	strh	r6, [r7, #0]
 801d62c:	807a      	strh	r2, [r7, #2]
 801d62e:	f8a7 a004 	strh.w	sl, [r7, #4]
 801d632:	f8a7 a006 	strh.w	sl, [r7, #6]
 801d636:	d1c6      	bne.n	801d5c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801d638:	9a04      	ldr	r2, [sp, #16]
 801d63a:	1ad3      	subs	r3, r2, r3
 801d63c:	6902      	ldr	r2, [r0, #16]
 801d63e:	8891      	ldrh	r1, [r2, #4]
 801d640:	88d6      	ldrh	r6, [r2, #6]
 801d642:	4419      	add	r1, r3
 801d644:	8091      	strh	r1, [r2, #4]
 801d646:	9902      	ldr	r1, [sp, #8]
 801d648:	f101 0c20 	add.w	ip, r1, #32
 801d64c:	9901      	ldr	r1, [sp, #4]
 801d64e:	ebac 0c01 	sub.w	ip, ip, r1
 801d652:	fb03 630c 	mla	r3, r3, ip, r6
 801d656:	80d3      	strh	r3, [r2, #6]
 801d658:	e750      	b.n	801d4fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801d65a:	9d05      	ldr	r5, [sp, #20]
 801d65c:	1aa2      	subs	r2, r4, r2
 801d65e:	eba5 0501 	sub.w	r5, r5, r1
 801d662:	9202      	str	r2, [sp, #8]
 801d664:	9508      	str	r5, [sp, #32]
 801d666:	f140 8128 	bpl.w	801d8ba <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801d66a:	9a03      	ldr	r2, [sp, #12]
 801d66c:	2a00      	cmp	r2, #0
 801d66e:	f6ff af45 	blt.w	801d4fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801d672:	9a02      	ldr	r2, [sp, #8]
 801d674:	f04f 34ff 	mov.w	r4, #4294967295
 801d678:	4252      	negs	r2, r2
 801d67a:	940b      	str	r4, [sp, #44]	; 0x2c
 801d67c:	2400      	movs	r4, #0
 801d67e:	9202      	str	r2, [sp, #8]
 801d680:	9a06      	ldr	r2, [sp, #24]
 801d682:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801d686:	9206      	str	r2, [sp, #24]
 801d688:	462a      	mov	r2, r5
 801d68a:	435a      	muls	r2, r3
 801d68c:	9401      	str	r4, [sp, #4]
 801d68e:	9c02      	ldr	r4, [sp, #8]
 801d690:	9d02      	ldr	r5, [sp, #8]
 801d692:	fb92 f4f4 	sdiv	r4, r2, r4
 801d696:	fb05 2214 	mls	r2, r5, r4, r2
 801d69a:	2a00      	cmp	r2, #0
 801d69c:	9207      	str	r2, [sp, #28]
 801d69e:	bfbc      	itt	lt
 801d6a0:	1952      	addlt	r2, r2, r5
 801d6a2:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801d6a6:	6905      	ldr	r5, [r0, #16]
 801d6a8:	bfb8      	it	lt
 801d6aa:	9207      	strlt	r2, [sp, #28]
 801d6ac:	eb04 0901 	add.w	r9, r4, r1
 801d6b0:	9a01      	ldr	r2, [sp, #4]
 801d6b2:	ea4f 1669 	mov.w	r6, r9, asr #5
 801d6b6:	429a      	cmp	r2, r3
 801d6b8:	f040 8111 	bne.w	801d8de <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 801d6bc:	f9b5 3000 	ldrsh.w	r3, [r5]
 801d6c0:	429e      	cmp	r6, r3
 801d6c2:	d104      	bne.n	801d6ce <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801d6c4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801d6c8:	9a03      	ldr	r2, [sp, #12]
 801d6ca:	429a      	cmp	r2, r3
 801d6cc:	d01b      	beq.n	801d706 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801d6ce:	88ea      	ldrh	r2, [r5, #6]
 801d6d0:	88ab      	ldrh	r3, [r5, #4]
 801d6d2:	4313      	orrs	r3, r2
 801d6d4:	d010      	beq.n	801d6f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801d6d6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801d6da:	2a00      	cmp	r2, #0
 801d6dc:	db0c      	blt.n	801d6f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801d6de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801d6e0:	429a      	cmp	r2, r3
 801d6e2:	da09      	bge.n	801d6f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801d6e4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801d6e8:	429a      	cmp	r2, r3
 801d6ea:	f102 0201 	add.w	r2, r2, #1
 801d6ee:	bf38      	it	cc
 801d6f0:	3508      	addcc	r5, #8
 801d6f2:	6082      	str	r2, [r0, #8]
 801d6f4:	bf38      	it	cc
 801d6f6:	6105      	strcc	r5, [r0, #16]
 801d6f8:	6903      	ldr	r3, [r0, #16]
 801d6fa:	9a03      	ldr	r2, [sp, #12]
 801d6fc:	801e      	strh	r6, [r3, #0]
 801d6fe:	805a      	strh	r2, [r3, #2]
 801d700:	2200      	movs	r2, #0
 801d702:	809a      	strh	r2, [r3, #4]
 801d704:	80da      	strh	r2, [r3, #6]
 801d706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d708:	9a03      	ldr	r2, [sp, #12]
 801d70a:	6901      	ldr	r1, [r0, #16]
 801d70c:	441a      	add	r2, r3
 801d70e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801d712:	42b3      	cmp	r3, r6
 801d714:	d103      	bne.n	801d71e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801d716:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801d71a:	429a      	cmp	r2, r3
 801d71c:	d01a      	beq.n	801d754 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801d71e:	88cc      	ldrh	r4, [r1, #6]
 801d720:	888b      	ldrh	r3, [r1, #4]
 801d722:	4323      	orrs	r3, r4
 801d724:	d010      	beq.n	801d748 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801d726:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801d72a:	2c00      	cmp	r4, #0
 801d72c:	db0c      	blt.n	801d748 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801d72e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801d730:	429c      	cmp	r4, r3
 801d732:	da09      	bge.n	801d748 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801d734:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801d738:	429c      	cmp	r4, r3
 801d73a:	f104 0401 	add.w	r4, r4, #1
 801d73e:	bf38      	it	cc
 801d740:	3108      	addcc	r1, #8
 801d742:	6084      	str	r4, [r0, #8]
 801d744:	bf38      	it	cc
 801d746:	6101      	strcc	r1, [r0, #16]
 801d748:	6903      	ldr	r3, [r0, #16]
 801d74a:	2100      	movs	r1, #0
 801d74c:	801e      	strh	r6, [r3, #0]
 801d74e:	805a      	strh	r2, [r3, #2]
 801d750:	8099      	strh	r1, [r3, #4]
 801d752:	80d9      	strh	r1, [r3, #6]
 801d754:	9b06      	ldr	r3, [sp, #24]
 801d756:	4293      	cmp	r3, r2
 801d758:	f000 8082 	beq.w	801d860 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801d75c:	9b08      	ldr	r3, [sp, #32]
 801d75e:	9902      	ldr	r1, [sp, #8]
 801d760:	015b      	lsls	r3, r3, #5
 801d762:	9c02      	ldr	r4, [sp, #8]
 801d764:	fb93 f1f1 	sdiv	r1, r3, r1
 801d768:	fb04 3311 	mls	r3, r4, r1, r3
 801d76c:	9103      	str	r1, [sp, #12]
 801d76e:	2b00      	cmp	r3, #0
 801d770:	9308      	str	r3, [sp, #32]
 801d772:	da04      	bge.n	801d77e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801d774:	1e4b      	subs	r3, r1, #1
 801d776:	9303      	str	r3, [sp, #12]
 801d778:	9b08      	ldr	r3, [sp, #32]
 801d77a:	4423      	add	r3, r4
 801d77c:	9308      	str	r3, [sp, #32]
 801d77e:	9b07      	ldr	r3, [sp, #28]
 801d780:	464f      	mov	r7, r9
 801d782:	9902      	ldr	r1, [sp, #8]
 801d784:	2600      	movs	r6, #0
 801d786:	1a5b      	subs	r3, r3, r1
 801d788:	9307      	str	r3, [sp, #28]
 801d78a:	9b01      	ldr	r3, [sp, #4]
 801d78c:	f1c3 0320 	rsb	r3, r3, #32
 801d790:	930e      	str	r3, [sp, #56]	; 0x38
 801d792:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d794:	9b01      	ldr	r3, [sp, #4]
 801d796:	1a5b      	subs	r3, r3, r1
 801d798:	930a      	str	r3, [sp, #40]	; 0x28
 801d79a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801d79e:	185b      	adds	r3, r3, r1
 801d7a0:	bf58      	it	pl
 801d7a2:	9902      	ldrpl	r1, [sp, #8]
 801d7a4:	9307      	str	r3, [sp, #28]
 801d7a6:	bf57      	itett	pl
 801d7a8:	1a5b      	subpl	r3, r3, r1
 801d7aa:	9903      	ldrmi	r1, [sp, #12]
 801d7ac:	9307      	strpl	r3, [sp, #28]
 801d7ae:	9b03      	ldrpl	r3, [sp, #12]
 801d7b0:	bf58      	it	pl
 801d7b2:	1c59      	addpl	r1, r3, #1
 801d7b4:	2a00      	cmp	r2, #0
 801d7b6:	4489      	add	r9, r1
 801d7b8:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801d7bc:	db2e      	blt.n	801d81c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801d7be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801d7c0:	4293      	cmp	r3, r2
 801d7c2:	dd2b      	ble.n	801d81c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801d7c4:	9c01      	ldr	r4, [sp, #4]
 801d7c6:	6905      	ldr	r5, [r0, #16]
 801d7c8:	46a0      	mov	r8, r4
 801d7ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d7cc:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801d7d0:	45a0      	cmp	r8, r4
 801d7d2:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801d7d6:	f040 814c 	bne.w	801da72 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801d7da:	f9b5 1000 	ldrsh.w	r1, [r5]
 801d7de:	4551      	cmp	r1, sl
 801d7e0:	d103      	bne.n	801d7ea <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801d7e2:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801d7e6:	4291      	cmp	r1, r2
 801d7e8:	d018      	beq.n	801d81c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801d7ea:	ea5c 010e 	orrs.w	r1, ip, lr
 801d7ee:	d00f      	beq.n	801d810 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801d7f0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801d7f4:	2900      	cmp	r1, #0
 801d7f6:	db0b      	blt.n	801d810 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801d7f8:	428b      	cmp	r3, r1
 801d7fa:	dd09      	ble.n	801d810 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801d7fc:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801d800:	4299      	cmp	r1, r3
 801d802:	f101 0101 	add.w	r1, r1, #1
 801d806:	bf38      	it	cc
 801d808:	3508      	addcc	r5, #8
 801d80a:	6081      	str	r1, [r0, #8]
 801d80c:	bf38      	it	cc
 801d80e:	6105      	strcc	r5, [r0, #16]
 801d810:	6903      	ldr	r3, [r0, #16]
 801d812:	f8a3 a000 	strh.w	sl, [r3]
 801d816:	805a      	strh	r2, [r3, #2]
 801d818:	809e      	strh	r6, [r3, #4]
 801d81a:	80de      	strh	r6, [r3, #6]
 801d81c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d81e:	6901      	ldr	r1, [r0, #16]
 801d820:	441a      	add	r2, r3
 801d822:	88cc      	ldrh	r4, [r1, #6]
 801d824:	888b      	ldrh	r3, [r1, #4]
 801d826:	4323      	orrs	r3, r4
 801d828:	d010      	beq.n	801d84c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801d82a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801d82e:	2c00      	cmp	r4, #0
 801d830:	db0c      	blt.n	801d84c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801d832:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801d834:	429c      	cmp	r4, r3
 801d836:	da09      	bge.n	801d84c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801d838:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801d83c:	429c      	cmp	r4, r3
 801d83e:	f104 0401 	add.w	r4, r4, #1
 801d842:	bf38      	it	cc
 801d844:	3108      	addcc	r1, #8
 801d846:	6084      	str	r4, [r0, #8]
 801d848:	bf38      	it	cc
 801d84a:	6101      	strcc	r1, [r0, #16]
 801d84c:	6903      	ldr	r3, [r0, #16]
 801d84e:	464f      	mov	r7, r9
 801d850:	f8a3 a000 	strh.w	sl, [r3]
 801d854:	805a      	strh	r2, [r3, #2]
 801d856:	809e      	strh	r6, [r3, #4]
 801d858:	80de      	strh	r6, [r3, #6]
 801d85a:	9b06      	ldr	r3, [sp, #24]
 801d85c:	4293      	cmp	r3, r2
 801d85e:	d19c      	bne.n	801d79a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 801d860:	9b01      	ldr	r3, [sp, #4]
 801d862:	6907      	ldr	r7, [r0, #16]
 801d864:	f1c3 0620 	rsb	r6, r3, #32
 801d868:	9b05      	ldr	r3, [sp, #20]
 801d86a:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801d86e:	9b04      	ldr	r3, [sp, #16]
 801d870:	429e      	cmp	r6, r3
 801d872:	f040 81c7 	bne.w	801dc04 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801d876:	f9b7 3000 	ldrsh.w	r3, [r7]
 801d87a:	459e      	cmp	lr, r3
 801d87c:	d104      	bne.n	801d888 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801d87e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d882:	429a      	cmp	r2, r3
 801d884:	f43f ae3a 	beq.w	801d4fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801d888:	88f9      	ldrh	r1, [r7, #6]
 801d88a:	88bb      	ldrh	r3, [r7, #4]
 801d88c:	430b      	orrs	r3, r1
 801d88e:	d010      	beq.n	801d8b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801d890:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d894:	2b00      	cmp	r3, #0
 801d896:	db0c      	blt.n	801d8b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801d898:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801d89a:	428b      	cmp	r3, r1
 801d89c:	da09      	bge.n	801d8b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801d89e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801d8a2:	428b      	cmp	r3, r1
 801d8a4:	f103 0301 	add.w	r3, r3, #1
 801d8a8:	bf38      	it	cc
 801d8aa:	3708      	addcc	r7, #8
 801d8ac:	6083      	str	r3, [r0, #8]
 801d8ae:	bf38      	it	cc
 801d8b0:	6107      	strcc	r7, [r0, #16]
 801d8b2:	6903      	ldr	r3, [r0, #16]
 801d8b4:	f8a3 e000 	strh.w	lr, [r3]
 801d8b8:	e603      	b.n	801d4c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801d8ba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801d8bc:	9c03      	ldr	r4, [sp, #12]
 801d8be:	42a2      	cmp	r2, r4
 801d8c0:	f6ff ae1c 	blt.w	801d4fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801d8c4:	9c06      	ldr	r4, [sp, #24]
 801d8c6:	42a2      	cmp	r2, r4
 801d8c8:	9c08      	ldr	r4, [sp, #32]
 801d8ca:	bfbc      	itt	lt
 801d8cc:	3201      	addlt	r2, #1
 801d8ce:	9206      	strlt	r2, [sp, #24]
 801d8d0:	f1c3 0220 	rsb	r2, r3, #32
 801d8d4:	4362      	muls	r2, r4
 801d8d6:	2401      	movs	r4, #1
 801d8d8:	940b      	str	r4, [sp, #44]	; 0x2c
 801d8da:	2420      	movs	r4, #32
 801d8dc:	e6d6      	b.n	801d68c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801d8de:	ea4f 1861 	mov.w	r8, r1, asr #5
 801d8e2:	f009 021f 	and.w	r2, r9, #31
 801d8e6:	f001 011f 	and.w	r1, r1, #31
 801d8ea:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801d8ee:	920c      	str	r2, [sp, #48]	; 0x30
 801d8f0:	45b0      	cmp	r8, r6
 801d8f2:	9a01      	ldr	r2, [sp, #4]
 801d8f4:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801d8f8:	eba2 0203 	sub.w	r2, r2, r3
 801d8fc:	d108      	bne.n	801d910 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801d8fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d900:	4496      	add	lr, r2
 801d902:	4419      	add	r1, r3
 801d904:	f8a5 e004 	strh.w	lr, [r5, #4]
 801d908:	fb02 a101 	mla	r1, r2, r1, sl
 801d90c:	80e9      	strh	r1, [r5, #6]
 801d90e:	e6fa      	b.n	801d706 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801d910:	2c00      	cmp	r4, #0
 801d912:	f2c0 80a7 	blt.w	801da64 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801d916:	2701      	movs	r7, #1
 801d918:	f1c1 0c20 	rsb	ip, r1, #32
 801d91c:	970a      	str	r7, [sp, #40]	; 0x28
 801d91e:	2720      	movs	r7, #32
 801d920:	fb02 f20c 	mul.w	r2, r2, ip
 801d924:	9709      	str	r7, [sp, #36]	; 0x24
 801d926:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d928:	fb92 fcf4 	sdiv	ip, r2, r4
 801d92c:	fb04 221c 	mls	r2, r4, ip, r2
 801d930:	4439      	add	r1, r7
 801d932:	2a00      	cmp	r2, #0
 801d934:	bfbc      	itt	lt
 801d936:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801d93a:	1912      	addlt	r2, r2, r4
 801d93c:	fb0c a101 	mla	r1, ip, r1, sl
 801d940:	44e6      	add	lr, ip
 801d942:	80e9      	strh	r1, [r5, #6]
 801d944:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d946:	f8a5 e004 	strh.w	lr, [r5, #4]
 801d94a:	eb08 0501 	add.w	r5, r8, r1
 801d94e:	6901      	ldr	r1, [r0, #16]
 801d950:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801d954:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801d958:	ea58 070e 	orrs.w	r7, r8, lr
 801d95c:	d010      	beq.n	801d980 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801d95e:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801d962:	f1be 0f00 	cmp.w	lr, #0
 801d966:	db0b      	blt.n	801d980 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801d968:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801d96a:	45be      	cmp	lr, r7
 801d96c:	da08      	bge.n	801d980 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801d96e:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801d972:	45be      	cmp	lr, r7
 801d974:	bf3c      	itt	cc
 801d976:	3108      	addcc	r1, #8
 801d978:	6101      	strcc	r1, [r0, #16]
 801d97a:	f10e 0101 	add.w	r1, lr, #1
 801d97e:	6081      	str	r1, [r0, #8]
 801d980:	6901      	ldr	r1, [r0, #16]
 801d982:	f04f 0e00 	mov.w	lr, #0
 801d986:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801d98a:	42ae      	cmp	r6, r5
 801d98c:	800d      	strh	r5, [r1, #0]
 801d98e:	4463      	add	r3, ip
 801d990:	f8a1 8002 	strh.w	r8, [r1, #2]
 801d994:	f8a1 e004 	strh.w	lr, [r1, #4]
 801d998:	f8a1 e006 	strh.w	lr, [r1, #6]
 801d99c:	d053      	beq.n	801da46 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801d99e:	9901      	ldr	r1, [sp, #4]
 801d9a0:	1b12      	subs	r2, r2, r4
 801d9a2:	1ac9      	subs	r1, r1, r3
 801d9a4:	4461      	add	r1, ip
 801d9a6:	0149      	lsls	r1, r1, #5
 801d9a8:	fb91 fef4 	sdiv	lr, r1, r4
 801d9ac:	fb04 111e 	mls	r1, r4, lr, r1
 801d9b0:	2900      	cmp	r1, #0
 801d9b2:	bfbc      	itt	lt
 801d9b4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801d9b8:	1909      	addlt	r1, r1, r4
 801d9ba:	f10e 0701 	add.w	r7, lr, #1
 801d9be:	970d      	str	r7, [sp, #52]	; 0x34
 801d9c0:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801d9c4:	1852      	adds	r2, r2, r1
 801d9c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d9c8:	bf54      	ite	pl
 801d9ca:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 801d9ce:	46f4      	movmi	ip, lr
 801d9d0:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801d9d4:	bf58      	it	pl
 801d9d6:	1b12      	subpl	r2, r2, r4
 801d9d8:	4463      	add	r3, ip
 801d9da:	443d      	add	r5, r7
 801d9dc:	44e3      	add	fp, ip
 801d9de:	f8aa b004 	strh.w	fp, [sl, #4]
 801d9e2:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801d9e6:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801d9ea:	f8aa b006 	strh.w	fp, [sl, #6]
 801d9ee:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801d9f2:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801d9f6:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801d9fa:	ea5b 070a 	orrs.w	r7, fp, sl
 801d9fe:	d014      	beq.n	801da2a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801da00:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801da04:	f1ba 0f00 	cmp.w	sl, #0
 801da08:	db0f      	blt.n	801da2a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801da0a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801da0c:	45ba      	cmp	sl, r7
 801da0e:	da0c      	bge.n	801da2a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801da10:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801da14:	45ba      	cmp	sl, r7
 801da16:	f10a 0a01 	add.w	sl, sl, #1
 801da1a:	bf38      	it	cc
 801da1c:	f10c 0c08 	addcc.w	ip, ip, #8
 801da20:	f8c0 a008 	str.w	sl, [r0, #8]
 801da24:	bf38      	it	cc
 801da26:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801da2a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801da2e:	f04f 0700 	mov.w	r7, #0
 801da32:	42ae      	cmp	r6, r5
 801da34:	f8ac 5000 	strh.w	r5, [ip]
 801da38:	f8ac 8002 	strh.w	r8, [ip, #2]
 801da3c:	f8ac 7004 	strh.w	r7, [ip, #4]
 801da40:	f8ac 7006 	strh.w	r7, [ip, #6]
 801da44:	d1bc      	bne.n	801d9c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801da46:	6904      	ldr	r4, [r0, #16]
 801da48:	9a01      	ldr	r2, [sp, #4]
 801da4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801da4c:	1ad3      	subs	r3, r2, r3
 801da4e:	88a2      	ldrh	r2, [r4, #4]
 801da50:	3120      	adds	r1, #32
 801da52:	441a      	add	r2, r3
 801da54:	80a2      	strh	r2, [r4, #4]
 801da56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da58:	1a89      	subs	r1, r1, r2
 801da5a:	88e2      	ldrh	r2, [r4, #6]
 801da5c:	fb03 2301 	mla	r3, r3, r1, r2
 801da60:	80e3      	strh	r3, [r4, #6]
 801da62:	e650      	b.n	801d706 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801da64:	f04f 37ff 	mov.w	r7, #4294967295
 801da68:	434a      	muls	r2, r1
 801da6a:	4264      	negs	r4, r4
 801da6c:	970a      	str	r7, [sp, #40]	; 0x28
 801da6e:	2700      	movs	r7, #0
 801da70:	e758      	b.n	801d924 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801da72:	ea4f 1867 	mov.w	r8, r7, asr #5
 801da76:	f009 031f 	and.w	r3, r9, #31
 801da7a:	f007 071f 	and.w	r7, r7, #31
 801da7e:	fa1f fc8c 	uxth.w	ip, ip
 801da82:	45d0      	cmp	r8, sl
 801da84:	930f      	str	r3, [sp, #60]	; 0x3c
 801da86:	fa1f fe8e 	uxth.w	lr, lr
 801da8a:	d10a      	bne.n	801daa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801da8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da8e:	449c      	add	ip, r3
 801da90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801da92:	441f      	add	r7, r3
 801da94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da96:	f8a5 c004 	strh.w	ip, [r5, #4]
 801da9a:	fb03 e707 	mla	r7, r3, r7, lr
 801da9e:	80ef      	strh	r7, [r5, #6]
 801daa0:	e6bc      	b.n	801d81c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801daa2:	2900      	cmp	r1, #0
 801daa4:	f2c0 80a6 	blt.w	801dbf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 801daa8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801daaa:	f1c7 0320 	rsb	r3, r7, #32
 801daae:	4363      	muls	r3, r4
 801dab0:	2401      	movs	r4, #1
 801dab2:	940d      	str	r4, [sp, #52]	; 0x34
 801dab4:	2420      	movs	r4, #32
 801dab6:	940c      	str	r4, [sp, #48]	; 0x30
 801dab8:	fb93 f4f1 	sdiv	r4, r3, r1
 801dabc:	fb01 3b14 	mls	fp, r1, r4, r3
 801dac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dac2:	f1bb 0f00 	cmp.w	fp, #0
 801dac6:	441f      	add	r7, r3
 801dac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801daca:	bfbc      	itt	lt
 801dacc:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801dad0:	448b      	addlt	fp, r1
 801dad2:	fb04 e707 	mla	r7, r4, r7, lr
 801dad6:	44a4      	add	ip, r4
 801dad8:	80ef      	strh	r7, [r5, #6]
 801dada:	f8a5 c004 	strh.w	ip, [r5, #4]
 801dade:	eb08 0503 	add.w	r5, r8, r3
 801dae2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801dae6:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801daea:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801daee:	ea5e 0307 	orrs.w	r3, lr, r7
 801daf2:	d011      	beq.n	801db18 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801daf4:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801daf8:	f1be 0f00 	cmp.w	lr, #0
 801dafc:	db0c      	blt.n	801db18 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801dafe:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801db00:	45be      	cmp	lr, r7
 801db02:	da09      	bge.n	801db18 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801db04:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801db08:	45be      	cmp	lr, r7
 801db0a:	bf3c      	itt	cc
 801db0c:	f10c 0708 	addcc.w	r7, ip, #8
 801db10:	6107      	strcc	r7, [r0, #16]
 801db12:	f10e 0701 	add.w	r7, lr, #1
 801db16:	6087      	str	r7, [r0, #8]
 801db18:	6907      	ldr	r7, [r0, #16]
 801db1a:	b213      	sxth	r3, r2
 801db1c:	4555      	cmp	r5, sl
 801db1e:	9310      	str	r3, [sp, #64]	; 0x40
 801db20:	807b      	strh	r3, [r7, #2]
 801db22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db24:	803d      	strh	r5, [r7, #0]
 801db26:	80be      	strh	r6, [r7, #4]
 801db28:	eb04 0c03 	add.w	ip, r4, r3
 801db2c:	80fe      	strh	r6, [r7, #6]
 801db2e:	d050      	beq.n	801dbd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 801db30:	9b01      	ldr	r3, [sp, #4]
 801db32:	eba3 070c 	sub.w	r7, r3, ip
 801db36:	ebab 0301 	sub.w	r3, fp, r1
 801db3a:	443c      	add	r4, r7
 801db3c:	9309      	str	r3, [sp, #36]	; 0x24
 801db3e:	0164      	lsls	r4, r4, #5
 801db40:	fb94 f8f1 	sdiv	r8, r4, r1
 801db44:	fb01 4418 	mls	r4, r1, r8, r4
 801db48:	2c00      	cmp	r4, #0
 801db4a:	bfbc      	itt	lt
 801db4c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801db50:	1864      	addlt	r4, r4, r1
 801db52:	f108 0701 	add.w	r7, r8, #1
 801db56:	9711      	str	r7, [sp, #68]	; 0x44
 801db58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db5a:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801db5e:	191b      	adds	r3, r3, r4
 801db60:	f8be b004 	ldrh.w	fp, [lr, #4]
 801db64:	bf54      	ite	pl
 801db66:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 801db68:	4647      	movmi	r7, r8
 801db6a:	9309      	str	r3, [sp, #36]	; 0x24
 801db6c:	bf58      	it	pl
 801db6e:	1a5b      	subpl	r3, r3, r1
 801db70:	44bb      	add	fp, r7
 801db72:	44bc      	add	ip, r7
 801db74:	bf58      	it	pl
 801db76:	9309      	strpl	r3, [sp, #36]	; 0x24
 801db78:	f8ae b004 	strh.w	fp, [lr, #4]
 801db7c:	f8be b006 	ldrh.w	fp, [lr, #6]
 801db80:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801db84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801db86:	f8ae b006 	strh.w	fp, [lr, #6]
 801db8a:	443d      	add	r5, r7
 801db8c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801db90:	f8be b006 	ldrh.w	fp, [lr, #6]
 801db94:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801db98:	ea5b 0307 	orrs.w	r3, fp, r7
 801db9c:	d011      	beq.n	801dbc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801db9e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801dba2:	f1bb 0f00 	cmp.w	fp, #0
 801dba6:	db0c      	blt.n	801dbc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801dba8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801dbaa:	45bb      	cmp	fp, r7
 801dbac:	da09      	bge.n	801dbc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801dbae:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801dbb2:	45bb      	cmp	fp, r7
 801dbb4:	bf3c      	itt	cc
 801dbb6:	f10e 0708 	addcc.w	r7, lr, #8
 801dbba:	6107      	strcc	r7, [r0, #16]
 801dbbc:	f10b 0701 	add.w	r7, fp, #1
 801dbc0:	6087      	str	r7, [r0, #8]
 801dbc2:	6907      	ldr	r7, [r0, #16]
 801dbc4:	4555      	cmp	r5, sl
 801dbc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dbc8:	803d      	strh	r5, [r7, #0]
 801dbca:	807b      	strh	r3, [r7, #2]
 801dbcc:	80be      	strh	r6, [r7, #4]
 801dbce:	80fe      	strh	r6, [r7, #6]
 801dbd0:	d1c2      	bne.n	801db58 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801dbd2:	9b01      	ldr	r3, [sp, #4]
 801dbd4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801dbd6:	eba3 0c0c 	sub.w	ip, r3, ip
 801dbda:	6903      	ldr	r3, [r0, #16]
 801dbdc:	3720      	adds	r7, #32
 801dbde:	8899      	ldrh	r1, [r3, #4]
 801dbe0:	4461      	add	r1, ip
 801dbe2:	8099      	strh	r1, [r3, #4]
 801dbe4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dbe6:	1a7f      	subs	r7, r7, r1
 801dbe8:	88d9      	ldrh	r1, [r3, #6]
 801dbea:	fb0c 1c07 	mla	ip, ip, r7, r1
 801dbee:	f8a3 c006 	strh.w	ip, [r3, #6]
 801dbf2:	e613      	b.n	801d81c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801dbf4:	f04f 34ff 	mov.w	r4, #4294967295
 801dbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dbfa:	4249      	negs	r1, r1
 801dbfc:	940d      	str	r4, [sp, #52]	; 0x34
 801dbfe:	2400      	movs	r4, #0
 801dc00:	437b      	muls	r3, r7
 801dc02:	e758      	b.n	801dab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 801dc04:	9905      	ldr	r1, [sp, #20]
 801dc06:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801dc0a:	f009 0c1f 	and.w	ip, r9, #31
 801dc0e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801dc12:	f001 011f 	and.w	r1, r1, #31
 801dc16:	45f3      	cmp	fp, lr
 801dc18:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801dc1c:	9102      	str	r1, [sp, #8]
 801dc1e:	9904      	ldr	r1, [sp, #16]
 801dc20:	eba1 0406 	sub.w	r4, r1, r6
 801dc24:	d108      	bne.n	801dc38 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801dc26:	9b02      	ldr	r3, [sp, #8]
 801dc28:	44a0      	add	r8, r4
 801dc2a:	449c      	add	ip, r3
 801dc2c:	f8a7 8004 	strh.w	r8, [r7, #4]
 801dc30:	fb04 a40c 	mla	r4, r4, ip, sl
 801dc34:	80fc      	strh	r4, [r7, #6]
 801dc36:	e461      	b.n	801d4fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801dc38:	9905      	ldr	r1, [sp, #20]
 801dc3a:	ebb1 0109 	subs.w	r1, r1, r9
 801dc3e:	bf51      	iteee	pl
 801dc40:	f1cc 0520 	rsbpl	r5, ip, #32
 801dc44:	fb04 f40c 	mulmi.w	r4, r4, ip
 801dc48:	4249      	negmi	r1, r1
 801dc4a:	2500      	movmi	r5, #0
 801dc4c:	bf5d      	ittte	pl
 801dc4e:	436c      	mulpl	r4, r5
 801dc50:	2520      	movpl	r5, #32
 801dc52:	f04f 0901 	movpl.w	r9, #1
 801dc56:	f04f 39ff 	movmi.w	r9, #4294967295
 801dc5a:	9501      	str	r5, [sp, #4]
 801dc5c:	9b01      	ldr	r3, [sp, #4]
 801dc5e:	fb94 f5f1 	sdiv	r5, r4, r1
 801dc62:	fb01 4415 	mls	r4, r1, r5, r4
 801dc66:	449c      	add	ip, r3
 801dc68:	eb0b 0309 	add.w	r3, fp, r9
 801dc6c:	2c00      	cmp	r4, #0
 801dc6e:	bfbc      	itt	lt
 801dc70:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801dc74:	1864      	addlt	r4, r4, r1
 801dc76:	44a8      	add	r8, r5
 801dc78:	fb05 ac0c 	mla	ip, r5, ip, sl
 801dc7c:	f8a7 8004 	strh.w	r8, [r7, #4]
 801dc80:	f8a7 c006 	strh.w	ip, [r7, #6]
 801dc84:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801dc88:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801dc8c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801dc90:	ea58 0707 	orrs.w	r7, r8, r7
 801dc94:	d011      	beq.n	801dcba <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801dc96:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801dc9a:	f1b8 0f00 	cmp.w	r8, #0
 801dc9e:	db0c      	blt.n	801dcba <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801dca0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801dca2:	45b8      	cmp	r8, r7
 801dca4:	da09      	bge.n	801dcba <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801dca6:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801dcaa:	45b8      	cmp	r8, r7
 801dcac:	bf3c      	itt	cc
 801dcae:	f10c 0708 	addcc.w	r7, ip, #8
 801dcb2:	6107      	strcc	r7, [r0, #16]
 801dcb4:	f108 0701 	add.w	r7, r8, #1
 801dcb8:	6087      	str	r7, [r0, #8]
 801dcba:	6907      	ldr	r7, [r0, #16]
 801dcbc:	f04f 0c00 	mov.w	ip, #0
 801dcc0:	b212      	sxth	r2, r2
 801dcc2:	459e      	cmp	lr, r3
 801dcc4:	803b      	strh	r3, [r7, #0]
 801dcc6:	442e      	add	r6, r5
 801dcc8:	807a      	strh	r2, [r7, #2]
 801dcca:	f8a7 c004 	strh.w	ip, [r7, #4]
 801dcce:	f8a7 c006 	strh.w	ip, [r7, #6]
 801dcd2:	d04b      	beq.n	801dd6c <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801dcd4:	9f04      	ldr	r7, [sp, #16]
 801dcd6:	1a64      	subs	r4, r4, r1
 801dcd8:	f04f 0a00 	mov.w	sl, #0
 801dcdc:	1bbf      	subs	r7, r7, r6
 801dcde:	443d      	add	r5, r7
 801dce0:	016d      	lsls	r5, r5, #5
 801dce2:	fb95 f8f1 	sdiv	r8, r5, r1
 801dce6:	fb01 5518 	mls	r5, r1, r8, r5
 801dcea:	4565      	cmp	r5, ip
 801dcec:	bfbc      	itt	lt
 801dcee:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801dcf2:	186d      	addlt	r5, r5, r1
 801dcf4:	f108 0701 	add.w	r7, r8, #1
 801dcf8:	9703      	str	r7, [sp, #12]
 801dcfa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801dcfe:	1964      	adds	r4, r4, r5
 801dd00:	444b      	add	r3, r9
 801dd02:	bf54      	ite	pl
 801dd04:	9f03      	ldrpl	r7, [sp, #12]
 801dd06:	4647      	movmi	r7, r8
 801dd08:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801dd0c:	bf58      	it	pl
 801dd0e:	1a64      	subpl	r4, r4, r1
 801dd10:	443e      	add	r6, r7
 801dd12:	44bb      	add	fp, r7
 801dd14:	f8ac b004 	strh.w	fp, [ip, #4]
 801dd18:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801dd1c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801dd20:	f8ac b006 	strh.w	fp, [ip, #6]
 801dd24:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801dd28:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801dd2c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801dd30:	ea5b 0707 	orrs.w	r7, fp, r7
 801dd34:	d011      	beq.n	801dd5a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801dd36:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801dd3a:	f1bb 0f00 	cmp.w	fp, #0
 801dd3e:	db0c      	blt.n	801dd5a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801dd40:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801dd42:	45bb      	cmp	fp, r7
 801dd44:	da09      	bge.n	801dd5a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801dd46:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801dd4a:	45bb      	cmp	fp, r7
 801dd4c:	bf3c      	itt	cc
 801dd4e:	f10c 0708 	addcc.w	r7, ip, #8
 801dd52:	6107      	strcc	r7, [r0, #16]
 801dd54:	f10b 0701 	add.w	r7, fp, #1
 801dd58:	6087      	str	r7, [r0, #8]
 801dd5a:	6907      	ldr	r7, [r0, #16]
 801dd5c:	459e      	cmp	lr, r3
 801dd5e:	803b      	strh	r3, [r7, #0]
 801dd60:	807a      	strh	r2, [r7, #2]
 801dd62:	f8a7 a004 	strh.w	sl, [r7, #4]
 801dd66:	f8a7 a006 	strh.w	sl, [r7, #6]
 801dd6a:	d1c6      	bne.n	801dcfa <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 801dd6c:	9b04      	ldr	r3, [sp, #16]
 801dd6e:	1b9e      	subs	r6, r3, r6
 801dd70:	6903      	ldr	r3, [r0, #16]
 801dd72:	889a      	ldrh	r2, [r3, #4]
 801dd74:	4432      	add	r2, r6
 801dd76:	809a      	strh	r2, [r3, #4]
 801dd78:	9a02      	ldr	r2, [sp, #8]
 801dd7a:	f102 0c20 	add.w	ip, r2, #32
 801dd7e:	9a01      	ldr	r2, [sp, #4]
 801dd80:	ebac 0c02 	sub.w	ip, ip, r2
 801dd84:	88da      	ldrh	r2, [r3, #6]
 801dd86:	fb06 260c 	mla	r6, r6, ip, r2
 801dd8a:	80de      	strh	r6, [r3, #6]
 801dd8c:	f7ff bbb6 	b.w	801d4fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

0801dd90 <_ZN8touchgfx7Outline6lineToEii>:
 801dd90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801dd92:	079b      	lsls	r3, r3, #30
 801dd94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dd96:	460e      	mov	r6, r1
 801dd98:	4615      	mov	r5, r2
 801dd9a:	d511      	bpl.n	801ddc0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801dd9c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801dda0:	ea86 0701 	eor.w	r7, r6, r1
 801dda4:	ea85 0302 	eor.w	r3, r5, r2
 801dda8:	433b      	orrs	r3, r7
 801ddaa:	d009      	beq.n	801ddc0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801ddac:	4633      	mov	r3, r6
 801ddae:	9500      	str	r5, [sp, #0]
 801ddb0:	f7ff fb4c 	bl	801d44c <_ZN8touchgfx7Outline10renderLineEiiii>
 801ddb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ddb6:	f043 0301 	orr.w	r3, r3, #1
 801ddba:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801ddbe:	6243      	str	r3, [r0, #36]	; 0x24
 801ddc0:	b003      	add	sp, #12
 801ddc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ddc4 <_ZN8touchgfx7Outline6moveToEii>:
 801ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ddc8:	4615      	mov	r5, r2
 801ddca:	4604      	mov	r4, r0
 801ddcc:	460e      	mov	r6, r1
 801ddce:	079a      	lsls	r2, r3, #30
 801ddd0:	d401      	bmi.n	801ddd6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801ddd2:	f7ff fb07 	bl	801d3e4 <_ZN8touchgfx7Outline5resetEv>
 801ddd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ddd8:	07db      	lsls	r3, r3, #31
 801ddda:	d504      	bpl.n	801dde6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801dddc:	4620      	mov	r0, r4
 801ddde:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801dde2:	f7ff ffd5 	bl	801dd90 <_ZN8touchgfx7Outline6lineToEii>
 801dde6:	6923      	ldr	r3, [r4, #16]
 801dde8:	1170      	asrs	r0, r6, #5
 801ddea:	1169      	asrs	r1, r5, #5
 801ddec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ddf0:	4290      	cmp	r0, r2
 801ddf2:	d103      	bne.n	801ddfc <_ZN8touchgfx7Outline6moveToEii+0x38>
 801ddf4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ddf8:	4291      	cmp	r1, r2
 801ddfa:	d01a      	beq.n	801de32 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801ddfc:	88df      	ldrh	r7, [r3, #6]
 801ddfe:	889a      	ldrh	r2, [r3, #4]
 801de00:	433a      	orrs	r2, r7
 801de02:	d010      	beq.n	801de26 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801de04:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801de08:	2a00      	cmp	r2, #0
 801de0a:	db0c      	blt.n	801de26 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801de0c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801de0e:	42ba      	cmp	r2, r7
 801de10:	da09      	bge.n	801de26 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801de12:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801de16:	42ba      	cmp	r2, r7
 801de18:	f102 0201 	add.w	r2, r2, #1
 801de1c:	bf38      	it	cc
 801de1e:	3308      	addcc	r3, #8
 801de20:	60a2      	str	r2, [r4, #8]
 801de22:	bf38      	it	cc
 801de24:	6123      	strcc	r3, [r4, #16]
 801de26:	6923      	ldr	r3, [r4, #16]
 801de28:	2200      	movs	r2, #0
 801de2a:	8018      	strh	r0, [r3, #0]
 801de2c:	8059      	strh	r1, [r3, #2]
 801de2e:	809a      	strh	r2, [r3, #4]
 801de30:	80da      	strh	r2, [r3, #6]
 801de32:	6166      	str	r6, [r4, #20]
 801de34:	6225      	str	r5, [r4, #32]
 801de36:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801de3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801de3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801de3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de40:	b0d0      	sub	sp, #320	; 0x140
 801de42:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801de46:	466c      	mov	r4, sp
 801de48:	4627      	mov	r7, r4
 801de4a:	1a0d      	subs	r5, r1, r0
 801de4c:	f100 0308 	add.w	r3, r0, #8
 801de50:	2d48      	cmp	r5, #72	; 0x48
 801de52:	f340 80d5 	ble.w	801e000 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801de56:	112d      	asrs	r5, r5, #4
 801de58:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801de5c:	f9b0 9000 	ldrsh.w	r9, [r0]
 801de60:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801de64:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801de68:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801de6c:	6816      	ldr	r6, [r2, #0]
 801de6e:	6006      	str	r6, [r0, #0]
 801de70:	6856      	ldr	r6, [r2, #4]
 801de72:	6046      	str	r6, [r0, #4]
 801de74:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801de78:	f8a2 8002 	strh.w	r8, [r2, #2]
 801de7c:	f8a2 e004 	strh.w	lr, [r2, #4]
 801de80:	f8a2 c006 	strh.w	ip, [r2, #6]
 801de84:	f1a1 0208 	sub.w	r2, r1, #8
 801de88:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801de8c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801de90:	4565      	cmp	r5, ip
 801de92:	db06      	blt.n	801dea2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801de94:	d119      	bne.n	801deca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801de96:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801de9a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801de9e:	42ae      	cmp	r6, r5
 801dea0:	dd13      	ble.n	801deca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801dea2:	460e      	mov	r6, r1
 801dea4:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801dea8:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801deac:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801deb0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801deb4:	601d      	str	r5, [r3, #0]
 801deb6:	6875      	ldr	r5, [r6, #4]
 801deb8:	605d      	str	r5, [r3, #4]
 801deba:	f821 9c08 	strh.w	r9, [r1, #-8]
 801debe:	f821 cc06 	strh.w	ip, [r1, #-6]
 801dec2:	f821 8c04 	strh.w	r8, [r1, #-4]
 801dec6:	f821 ec02 	strh.w	lr, [r1, #-2]
 801deca:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801dece:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801ded2:	42ae      	cmp	r6, r5
 801ded4:	db06      	blt.n	801dee4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801ded6:	d116      	bne.n	801df06 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801ded8:	f9b0 c000 	ldrsh.w	ip, [r0]
 801dedc:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801dee0:	45ac      	cmp	ip, r5
 801dee2:	da10      	bge.n	801df06 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801dee4:	681d      	ldr	r5, [r3, #0]
 801dee6:	f9b0 8000 	ldrsh.w	r8, [r0]
 801deea:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801deee:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801def2:	6005      	str	r5, [r0, #0]
 801def4:	685d      	ldr	r5, [r3, #4]
 801def6:	f8a0 8008 	strh.w	r8, [r0, #8]
 801defa:	6045      	str	r5, [r0, #4]
 801defc:	8146      	strh	r6, [r0, #10]
 801defe:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801df02:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801df06:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801df0a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801df0e:	4565      	cmp	r5, ip
 801df10:	db06      	blt.n	801df20 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801df12:	d119      	bne.n	801df48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801df14:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801df18:	f9b0 5000 	ldrsh.w	r5, [r0]
 801df1c:	42ae      	cmp	r6, r5
 801df1e:	da13      	bge.n	801df48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801df20:	460e      	mov	r6, r1
 801df22:	f9b0 9000 	ldrsh.w	r9, [r0]
 801df26:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801df2a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801df2e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801df32:	6005      	str	r5, [r0, #0]
 801df34:	6875      	ldr	r5, [r6, #4]
 801df36:	6045      	str	r5, [r0, #4]
 801df38:	f821 9c08 	strh.w	r9, [r1, #-8]
 801df3c:	f821 cc06 	strh.w	ip, [r1, #-6]
 801df40:	f821 8c04 	strh.w	r8, [r1, #-4]
 801df44:	f821 ec02 	strh.w	lr, [r1, #-2]
 801df48:	3308      	adds	r3, #8
 801df4a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801df4e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801df52:	45e6      	cmp	lr, ip
 801df54:	dbf8      	blt.n	801df48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801df56:	d105      	bne.n	801df64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801df58:	f9b3 6000 	ldrsh.w	r6, [r3]
 801df5c:	f9b0 5000 	ldrsh.w	r5, [r0]
 801df60:	42ae      	cmp	r6, r5
 801df62:	dbf1      	blt.n	801df48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801df64:	4615      	mov	r5, r2
 801df66:	3a08      	subs	r2, #8
 801df68:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801df6c:	45b4      	cmp	ip, r6
 801df6e:	dbf9      	blt.n	801df64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801df70:	d105      	bne.n	801df7e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801df72:	f9b0 8000 	ldrsh.w	r8, [r0]
 801df76:	f9b2 6000 	ldrsh.w	r6, [r2]
 801df7a:	45b0      	cmp	r8, r6
 801df7c:	dbf2      	blt.n	801df64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801df7e:	4293      	cmp	r3, r2
 801df80:	f1a5 0608 	sub.w	r6, r5, #8
 801df84:	d816      	bhi.n	801dfb4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801df86:	f8d6 c000 	ldr.w	ip, [r6]
 801df8a:	f9b3 a000 	ldrsh.w	sl, [r3]
 801df8e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801df92:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801df96:	f8c3 c000 	str.w	ip, [r3]
 801df9a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801df9e:	f8c3 c004 	str.w	ip, [r3, #4]
 801dfa2:	f825 ac08 	strh.w	sl, [r5, #-8]
 801dfa6:	f825 ec06 	strh.w	lr, [r5, #-6]
 801dfaa:	f825 9c04 	strh.w	r9, [r5, #-4]
 801dfae:	f825 8c02 	strh.w	r8, [r5, #-2]
 801dfb2:	e7c9      	b.n	801df48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801dfb4:	f8d6 e000 	ldr.w	lr, [r6]
 801dfb8:	f9b0 a000 	ldrsh.w	sl, [r0]
 801dfbc:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801dfc0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801dfc4:	f8c0 e000 	str.w	lr, [r0]
 801dfc8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801dfcc:	1a16      	subs	r6, r2, r0
 801dfce:	f8c0 e004 	str.w	lr, [r0, #4]
 801dfd2:	f825 ac08 	strh.w	sl, [r5, #-8]
 801dfd6:	f825 cc06 	strh.w	ip, [r5, #-6]
 801dfda:	f825 9c04 	strh.w	r9, [r5, #-4]
 801dfde:	f825 8c02 	strh.w	r8, [r5, #-2]
 801dfe2:	1acd      	subs	r5, r1, r3
 801dfe4:	10ed      	asrs	r5, r5, #3
 801dfe6:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801dfea:	bfb5      	itete	lt
 801dfec:	e9c4 0200 	strdlt	r0, r2, [r4]
 801dff0:	e9c4 3100 	strdge	r3, r1, [r4]
 801dff4:	460a      	movlt	r2, r1
 801dff6:	4603      	movge	r3, r0
 801dff8:	3408      	adds	r4, #8
 801dffa:	4618      	mov	r0, r3
 801dffc:	4611      	mov	r1, r2
 801dffe:	e724      	b.n	801de4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801e000:	4299      	cmp	r1, r3
 801e002:	d927      	bls.n	801e054 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801e004:	f1a3 0210 	sub.w	r2, r3, #16
 801e008:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801e00c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801e010:	45ac      	cmp	ip, r5
 801e012:	db06      	blt.n	801e022 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801e014:	d11c      	bne.n	801e050 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801e016:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801e01a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801e01e:	42ae      	cmp	r6, r5
 801e020:	da16      	bge.n	801e050 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801e022:	4615      	mov	r5, r2
 801e024:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801e028:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801e02c:	3a08      	subs	r2, #8
 801e02e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801e032:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801e036:	6196      	str	r6, [r2, #24]
 801e038:	42a8      	cmp	r0, r5
 801e03a:	686e      	ldr	r6, [r5, #4]
 801e03c:	f8a2 9010 	strh.w	r9, [r2, #16]
 801e040:	61d6      	str	r6, [r2, #28]
 801e042:	f8a2 c012 	strh.w	ip, [r2, #18]
 801e046:	f8a2 8014 	strh.w	r8, [r2, #20]
 801e04a:	f8a2 e016 	strh.w	lr, [r2, #22]
 801e04e:	d1db      	bne.n	801e008 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801e050:	3308      	adds	r3, #8
 801e052:	e7d5      	b.n	801e000 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801e054:	42bc      	cmp	r4, r7
 801e056:	d903      	bls.n	801e060 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 801e058:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801e05c:	3c08      	subs	r4, #8
 801e05e:	e6f4      	b.n	801de4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801e060:	b050      	add	sp, #320	; 0x140
 801e062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801e066 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801e066:	b510      	push	{r4, lr}
 801e068:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801e06a:	4604      	mov	r4, r0
 801e06c:	07da      	lsls	r2, r3, #31
 801e06e:	d507      	bpl.n	801e080 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801e070:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801e074:	f7ff fe8c 	bl	801dd90 <_ZN8touchgfx7Outline6lineToEii>
 801e078:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801e07a:	f023 0301 	bic.w	r3, r3, #1
 801e07e:	6243      	str	r3, [r0, #36]	; 0x24
 801e080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e082:	079b      	lsls	r3, r3, #30
 801e084:	d521      	bpl.n	801e0ca <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801e086:	6923      	ldr	r3, [r4, #16]
 801e088:	88d9      	ldrh	r1, [r3, #6]
 801e08a:	889a      	ldrh	r2, [r3, #4]
 801e08c:	430a      	orrs	r2, r1
 801e08e:	d010      	beq.n	801e0b2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801e090:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e094:	2a00      	cmp	r2, #0
 801e096:	db0c      	blt.n	801e0b2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801e098:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801e09a:	428a      	cmp	r2, r1
 801e09c:	da09      	bge.n	801e0b2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801e09e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801e0a2:	4291      	cmp	r1, r2
 801e0a4:	f102 0201 	add.w	r2, r2, #1
 801e0a8:	bf88      	it	hi
 801e0aa:	3308      	addhi	r3, #8
 801e0ac:	60a2      	str	r2, [r4, #8]
 801e0ae:	bf88      	it	hi
 801e0b0:	6123      	strhi	r3, [r4, #16]
 801e0b2:	68a1      	ldr	r1, [r4, #8]
 801e0b4:	b129      	cbz	r1, 801e0c2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801e0b6:	6863      	ldr	r3, [r4, #4]
 801e0b8:	4299      	cmp	r1, r3
 801e0ba:	d802      	bhi.n	801e0c2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801e0bc:	68e0      	ldr	r0, [r4, #12]
 801e0be:	f7ff febd 	bl	801de3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801e0c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e0c4:	f023 0302 	bic.w	r3, r3, #2
 801e0c8:	6263      	str	r3, [r4, #36]	; 0x24
 801e0ca:	68e0      	ldr	r0, [r4, #12]
 801e0cc:	bd10      	pop	{r4, pc}
	...

0801e0d0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801e0d0:	4b02      	ldr	r3, [pc, #8]	; (801e0dc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801e0d2:	6018      	str	r0, [r3, #0]
 801e0d4:	4b02      	ldr	r3, [pc, #8]	; (801e0e0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801e0d6:	6019      	str	r1, [r3, #0]
 801e0d8:	4770      	bx	lr
 801e0da:	bf00      	nop
 801e0dc:	24027f74 	.word	0x24027f74
 801e0e0:	24027f78 	.word	0x24027f78

0801e0e4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 801e0e4:	2300      	movs	r3, #0
 801e0e6:	4a02      	ldr	r2, [pc, #8]	; (801e0f0 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 801e0e8:	6013      	str	r3, [r2, #0]
 801e0ea:	4a02      	ldr	r2, [pc, #8]	; (801e0f4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 801e0ec:	6013      	str	r3, [r2, #0]
 801e0ee:	4770      	bx	lr
 801e0f0:	24027f74 	.word	0x24027f74
 801e0f4:	24027f78 	.word	0x24027f78

0801e0f8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801e0f8:	4b01      	ldr	r3, [pc, #4]	; (801e100 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801e0fa:	6818      	ldr	r0, [r3, #0]
 801e0fc:	4770      	bx	lr
 801e0fe:	bf00      	nop
 801e100:	24027f74 	.word	0x24027f74

0801e104 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801e104:	4b01      	ldr	r3, [pc, #4]	; (801e10c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801e106:	6818      	ldr	r0, [r3, #0]
 801e108:	4770      	bx	lr
 801e10a:	bf00      	nop
 801e10c:	24027f78 	.word	0x24027f78

0801e110 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801e110:	b510      	push	{r4, lr}
 801e112:	6803      	ldr	r3, [r0, #0]
 801e114:	460c      	mov	r4, r1
 801e116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e118:	4798      	blx	r3
 801e11a:	1b03      	subs	r3, r0, r4
 801e11c:	4258      	negs	r0, r3
 801e11e:	4158      	adcs	r0, r3
 801e120:	bd10      	pop	{r4, pc}
	...

0801e124 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801e124:	4b01      	ldr	r3, [pc, #4]	; (801e12c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801e126:	6019      	str	r1, [r3, #0]
 801e128:	4770      	bx	lr
 801e12a:	bf00      	nop
 801e12c:	24027f7c 	.word	0x24027f7c

0801e130 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e134:	4696      	mov	lr, r2
 801e136:	b097      	sub	sp, #92	; 0x5c
 801e138:	4605      	mov	r5, r0
 801e13a:	4614      	mov	r4, r2
 801e13c:	460e      	mov	r6, r1
 801e13e:	461f      	mov	r7, r3
 801e140:	f10d 0c1c 	add.w	ip, sp, #28
 801e144:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801e148:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801e14c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801e150:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e158:	f8de 3000 	ldr.w	r3, [lr]
 801e15c:	f104 0e14 	add.w	lr, r4, #20
 801e160:	f8cc 3000 	str.w	r3, [ip]
 801e164:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801e168:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e16c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e170:	f8de 3000 	ldr.w	r3, [lr]
 801e174:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801e178:	f8cc 3000 	str.w	r3, [ip]
 801e17c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801e180:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e188:	f8de 3000 	ldr.w	r3, [lr]
 801e18c:	4631      	mov	r1, r6
 801e18e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e190:	4628      	mov	r0, r5
 801e192:	f8cc 3000 	str.w	r3, [ip]
 801e196:	682b      	ldr	r3, [r5, #0]
 801e198:	9201      	str	r2, [sp, #4]
 801e19a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e19c:	f8cd 8008 	str.w	r8, [sp, #8]
 801e1a0:	9200      	str	r2, [sp, #0]
 801e1a2:	aa07      	add	r2, sp, #28
 801e1a4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801e1a8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801e1ac:	463b      	mov	r3, r7
 801e1ae:	47d8      	blx	fp
 801e1b0:	46a6      	mov	lr, r4
 801e1b2:	f10d 0c1c 	add.w	ip, sp, #28
 801e1b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e1ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e1be:	f8de 3000 	ldr.w	r3, [lr]
 801e1c2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801e1c6:	343c      	adds	r4, #60	; 0x3c
 801e1c8:	f8cc 3000 	str.w	r3, [ip]
 801e1cc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801e1d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e1d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e1d8:	f8de 3000 	ldr.w	r3, [lr]
 801e1dc:	f8cc 3000 	str.w	r3, [ip]
 801e1e0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801e1e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e1e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e1ea:	6823      	ldr	r3, [r4, #0]
 801e1ec:	4631      	mov	r1, r6
 801e1ee:	4628      	mov	r0, r5
 801e1f0:	f8cc 3000 	str.w	r3, [ip]
 801e1f4:	682b      	ldr	r3, [r5, #0]
 801e1f6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801e1fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e1fc:	f8cd 8008 	str.w	r8, [sp, #8]
 801e200:	9201      	str	r2, [sp, #4]
 801e202:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e204:	9200      	str	r2, [sp, #0]
 801e206:	aa07      	add	r2, sp, #28
 801e208:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801e20a:	463b      	mov	r3, r7
 801e20c:	47a0      	blx	r4
 801e20e:	b017      	add	sp, #92	; 0x5c
 801e210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e214 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e214:	2000      	movs	r0, #0
 801e216:	4770      	bx	lr

0801e218 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801e218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e21c:	b08d      	sub	sp, #52	; 0x34
 801e21e:	4688      	mov	r8, r1
 801e220:	f8d3 c000 	ldr.w	ip, [r3]
 801e224:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e226:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801e22a:	680f      	ldr	r7, [r1, #0]
 801e22c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801e230:	eba7 070c 	sub.w	r7, r7, ip
 801e234:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801e238:	edd3 6a07 	vldr	s13, [r3, #28]
 801e23c:	42bc      	cmp	r4, r7
 801e23e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e240:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801e244:	bfa8      	it	ge
 801e246:	463c      	movge	r4, r7
 801e248:	f9b1 9000 	ldrsh.w	r9, [r1]
 801e24c:	f9ba 1000 	ldrsh.w	r1, [sl]
 801e250:	ee07 4a90 	vmov	s15, r4
 801e254:	eb09 0e0c 	add.w	lr, r9, ip
 801e258:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801e25c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801e260:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801e264:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801e268:	4571      	cmp	r1, lr
 801e26a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801e26e:	ee65 4a24 	vmul.f32	s9, s10, s9
 801e272:	ee25 5a27 	vmul.f32	s10, s10, s15
 801e276:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e27a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801e27e:	ee32 1a05 	vadd.f32	s2, s4, s10
 801e282:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e286:	ee36 0a84 	vadd.f32	s0, s13, s8
 801e28a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801e28e:	ee22 2a07 	vmul.f32	s4, s4, s14
 801e292:	f340 808c 	ble.w	801e3ae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801e296:	eba1 060e 	sub.w	r6, r1, lr
 801e29a:	fb96 f5f4 	sdiv	r5, r6, r4
 801e29e:	ee07 5a10 	vmov	s14, r5
 801e2a2:	2d00      	cmp	r5, #0
 801e2a4:	fb04 6615 	mls	r6, r4, r5, r6
 801e2a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e2ac:	eea7 0a04 	vfma.f32	s0, s14, s8
 801e2b0:	eee7 0a24 	vfma.f32	s1, s14, s9
 801e2b4:	eea7 1a05 	vfma.f32	s2, s14, s10
 801e2b8:	dd12      	ble.n	801e2e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801e2ba:	ee70 6a44 	vsub.f32	s13, s0, s8
 801e2be:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801e2c2:	ee31 2a45 	vsub.f32	s4, s2, s10
 801e2c6:	eef5 6a40 	vcmp.f32	s13, #0.0
 801e2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2ce:	bf14      	ite	ne
 801e2d0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801e2d4:	eeb0 7a67 	vmoveq.f32	s14, s15
 801e2d8:	ee61 1a87 	vmul.f32	s3, s3, s14
 801e2dc:	ee22 2a07 	vmul.f32	s4, s4, s14
 801e2e0:	fb05 f204 	mul.w	r2, r5, r4
 801e2e4:	1abf      	subs	r7, r7, r2
 801e2e6:	4494      	add	ip, r2
 801e2e8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801e2ec:	4411      	add	r1, r2
 801e2ee:	eb09 020c 	add.w	r2, r9, ip
 801e2f2:	b209      	sxth	r1, r1
 801e2f4:	443a      	add	r2, r7
 801e2f6:	428a      	cmp	r2, r1
 801e2f8:	bfc4      	itt	gt
 801e2fa:	eba1 0209 	subgt.w	r2, r1, r9
 801e2fe:	eba2 070c 	subgt.w	r7, r2, ip
 801e302:	2f00      	cmp	r7, #0
 801e304:	dd50      	ble.n	801e3a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801e306:	fb97 f1f4 	sdiv	r1, r7, r4
 801e30a:	fb04 7211 	mls	r2, r4, r1, r7
 801e30e:	b90a      	cbnz	r2, 801e314 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801e310:	3901      	subs	r1, #1
 801e312:	4622      	mov	r2, r4
 801e314:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801e318:	6840      	ldr	r0, [r0, #4]
 801e31a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801e31e:	44b6      	add	lr, r6
 801e320:	f8d0 a000 	ldr.w	sl, [r0]
 801e324:	2900      	cmp	r1, #0
 801e326:	bfcc      	ite	gt
 801e328:	46a1      	movgt	r9, r4
 801e32a:	4691      	movle	r9, r2
 801e32c:	900b      	str	r0, [sp, #44]	; 0x2c
 801e32e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801e330:	fb04 e505 	mla	r5, r4, r5, lr
 801e334:	eef0 6a42 	vmov.f32	s13, s4
 801e338:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801e33c:	9008      	str	r0, [sp, #32]
 801e33e:	eeb0 7a61 	vmov.f32	s14, s3
 801e342:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e344:	695b      	ldr	r3, [r3, #20]
 801e346:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e34a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801e34e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e352:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e354:	445b      	add	r3, fp
 801e356:	9307      	str	r3, [sp, #28]
 801e358:	ee16 3a90 	vmov	r3, s13
 801e35c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801e360:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801e364:	ee21 3a23 	vmul.f32	s6, s2, s7
 801e368:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801e36c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801e370:	ee17 7a90 	vmov	r7, s15
 801e374:	ee73 7a42 	vsub.f32	s15, s6, s4
 801e378:	fb97 f7f4 	sdiv	r7, r7, r4
 801e37c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801e380:	ee17 ca90 	vmov	ip, s15
 801e384:	fb9c fcf4 	sdiv	ip, ip, r4
 801e388:	fb0c 3306 	mla	r3, ip, r6, r3
 801e38c:	9302      	str	r3, [sp, #8]
 801e38e:	ee17 3a10 	vmov	r3, s14
 801e392:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801e396:	fb07 3706 	mla	r7, r7, r6, r3
 801e39a:	eba9 0306 	sub.w	r3, r9, r6
 801e39e:	e9cd 4700 	strd	r4, r7, [sp]
 801e3a2:	f8da 4008 	ldr.w	r4, [sl, #8]
 801e3a6:	47a0      	blx	r4
 801e3a8:	b00d      	add	sp, #52	; 0x34
 801e3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3ae:	2500      	movs	r5, #0
 801e3b0:	462e      	mov	r6, r5
 801e3b2:	e799      	b.n	801e2e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801e3b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3b8:	b0db      	sub	sp, #364	; 0x16c
 801e3ba:	461d      	mov	r5, r3
 801e3bc:	4614      	mov	r4, r2
 801e3be:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801e3c2:	910f      	str	r1, [sp, #60]	; 0x3c
 801e3c4:	4629      	mov	r1, r5
 801e3c6:	930a      	str	r3, [sp, #40]	; 0x28
 801e3c8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801e3cc:	9009      	str	r0, [sp, #36]	; 0x24
 801e3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 801e3d0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801e3d4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801e3d8:	9310      	str	r3, [sp, #64]	; 0x40
 801e3da:	6803      	ldr	r3, [r0, #0]
 801e3dc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801e3de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e3e2:	47b8      	blx	r7
 801e3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3e6:	6058      	str	r0, [r3, #4]
 801e3e8:	2800      	cmp	r0, #0
 801e3ea:	f000 83a1 	beq.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e3ee:	682b      	ldr	r3, [r5, #0]
 801e3f0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801e3f4:	ed94 7a02 	vldr	s14, [r4, #8]
 801e3f8:	9314      	str	r3, [sp, #80]	; 0x50
 801e3fa:	686b      	ldr	r3, [r5, #4]
 801e3fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e400:	9315      	str	r3, [sp, #84]	; 0x54
 801e402:	4bc1      	ldr	r3, [pc, #772]	; (801e708 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801e404:	7819      	ldrb	r1, [r3, #0]
 801e406:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801e40a:	2900      	cmp	r1, #0
 801e40c:	bf16      	itet	ne
 801e40e:	4619      	movne	r1, r3
 801e410:	4611      	moveq	r1, r2
 801e412:	4613      	movne	r3, r2
 801e414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e418:	9116      	str	r1, [sp, #88]	; 0x58
 801e41a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801e41e:	f240 8387 	bls.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e422:	ed94 7a07 	vldr	s14, [r4, #28]
 801e426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e42e:	f240 837f 	bls.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e432:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801e436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e43e:	f240 8377 	bls.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e442:	6822      	ldr	r2, [r4, #0]
 801e444:	4bb1      	ldr	r3, [pc, #708]	; (801e70c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801e446:	429a      	cmp	r2, r3
 801e448:	f2c0 8372 	blt.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e44c:	49b0      	ldr	r1, [pc, #704]	; (801e710 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801e44e:	6963      	ldr	r3, [r4, #20]
 801e450:	428a      	cmp	r2, r1
 801e452:	f300 836d 	bgt.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e456:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801e45a:	48ae      	ldr	r0, [pc, #696]	; (801e714 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801e45c:	33ff      	adds	r3, #255	; 0xff
 801e45e:	4283      	cmp	r3, r0
 801e460:	f200 8366 	bhi.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e464:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e466:	4dac      	ldr	r5, [pc, #688]	; (801e718 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801e468:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801e46c:	33ff      	adds	r3, #255	; 0xff
 801e46e:	42ab      	cmp	r3, r5
 801e470:	f200 835e 	bhi.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e474:	6862      	ldr	r2, [r4, #4]
 801e476:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801e47a:	33ff      	adds	r3, #255	; 0xff
 801e47c:	4283      	cmp	r3, r0
 801e47e:	f200 8357 	bhi.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e482:	69a1      	ldr	r1, [r4, #24]
 801e484:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801e488:	33ff      	adds	r3, #255	; 0xff
 801e48a:	4283      	cmp	r3, r0
 801e48c:	f200 8350 	bhi.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e490:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e492:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801e496:	30ff      	adds	r0, #255	; 0xff
 801e498:	42a8      	cmp	r0, r5
 801e49a:	f200 8349 	bhi.w	801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801e49e:	428a      	cmp	r2, r1
 801e4a0:	f280 8110 	bge.w	801e6c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801e4a4:	429a      	cmp	r2, r3
 801e4a6:	f300 8119 	bgt.w	801e6dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801e4aa:	4299      	cmp	r1, r3
 801e4ac:	f280 811d 	bge.w	801e6ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801e4b0:	2502      	movs	r5, #2
 801e4b2:	2701      	movs	r7, #1
 801e4b4:	46a9      	mov	r9, r5
 801e4b6:	46b8      	mov	r8, r7
 801e4b8:	f04f 0a00 	mov.w	sl, #0
 801e4bc:	4621      	mov	r1, r4
 801e4be:	a849      	add	r0, sp, #292	; 0x124
 801e4c0:	f003 fa44 	bl	802194c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801e4c4:	4622      	mov	r2, r4
 801e4c6:	4653      	mov	r3, sl
 801e4c8:	a949      	add	r1, sp, #292	; 0x124
 801e4ca:	f8cd 9000 	str.w	r9, [sp]
 801e4ce:	a819      	add	r0, sp, #100	; 0x64
 801e4d0:	f003 fb6c 	bl	8021bac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801e4d4:	4622      	mov	r2, r4
 801e4d6:	4653      	mov	r3, sl
 801e4d8:	a949      	add	r1, sp, #292	; 0x124
 801e4da:	f8cd 8000 	str.w	r8, [sp]
 801e4de:	a829      	add	r0, sp, #164	; 0xa4
 801e4e0:	f003 fb64 	bl	8021bac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801e4e4:	4643      	mov	r3, r8
 801e4e6:	4622      	mov	r2, r4
 801e4e8:	a949      	add	r1, sp, #292	; 0x124
 801e4ea:	f8cd 9000 	str.w	r9, [sp]
 801e4ee:	a839      	add	r0, sp, #228	; 0xe4
 801e4f0:	f003 fb5c 	bl	8021bac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801e4f4:	42af      	cmp	r7, r5
 801e4f6:	af12      	add	r7, sp, #72	; 0x48
 801e4f8:	bfb7      	itett	lt
 801e4fa:	2300      	movlt	r3, #0
 801e4fc:	2301      	movge	r3, #1
 801e4fe:	ad29      	addlt	r5, sp, #164	; 0xa4
 801e500:	ac19      	addlt	r4, sp, #100	; 0x64
 801e502:	bfb1      	iteee	lt
 801e504:	930e      	strlt	r3, [sp, #56]	; 0x38
 801e506:	ad19      	addge	r5, sp, #100	; 0x64
 801e508:	930e      	strge	r3, [sp, #56]	; 0x38
 801e50a:	ac29      	addge	r4, sp, #164	; 0xa4
 801e50c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e50e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801e512:	e887 0003 	stmia.w	r7, {r0, r1}
 801e516:	b928      	cbnz	r0, 801e524 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801e518:	4b80      	ldr	r3, [pc, #512]	; (801e71c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801e51a:	6818      	ldr	r0, [r3, #0]
 801e51c:	6803      	ldr	r3, [r0, #0]
 801e51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e520:	4798      	blx	r3
 801e522:	6038      	str	r0, [r7, #0]
 801e524:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801e526:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801e52a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e52e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e530:	930c      	str	r3, [sp, #48]	; 0x30
 801e532:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e534:	6963      	ldr	r3, [r4, #20]
 801e536:	440b      	add	r3, r1
 801e538:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801e53c:	4408      	add	r0, r1
 801e53e:	b200      	sxth	r0, r0
 801e540:	4283      	cmp	r3, r0
 801e542:	900d      	str	r0, [sp, #52]	; 0x34
 801e544:	f280 80dd 	bge.w	801e702 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801e548:	428b      	cmp	r3, r1
 801e54a:	da08      	bge.n	801e55e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801e54c:	2a00      	cmp	r2, #0
 801e54e:	dd06      	ble.n	801e55e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801e550:	1acb      	subs	r3, r1, r3
 801e552:	429a      	cmp	r2, r3
 801e554:	f2c0 80e4 	blt.w	801e720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801e558:	2b00      	cmp	r3, #0
 801e55a:	f300 80e2 	bgt.w	801e722 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801e55e:	6967      	ldr	r7, [r4, #20]
 801e560:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801e564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e566:	443b      	add	r3, r7
 801e568:	461f      	mov	r7, r3
 801e56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e56c:	1bdf      	subs	r7, r3, r7
 801e56e:	4297      	cmp	r7, r2
 801e570:	bfa8      	it	ge
 801e572:	4617      	movge	r7, r2
 801e574:	2f00      	cmp	r7, #0
 801e576:	f340 8166 	ble.w	801e846 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801e57a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801e57c:	6829      	ldr	r1, [r5, #0]
 801e57e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e582:	f9bb 3000 	ldrsh.w	r3, [fp]
 801e586:	4411      	add	r1, r2
 801e588:	6820      	ldr	r0, [r4, #0]
 801e58a:	4299      	cmp	r1, r3
 801e58c:	dd1a      	ble.n	801e5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801e58e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801e592:	4402      	add	r2, r0
 801e594:	440b      	add	r3, r1
 801e596:	b21b      	sxth	r3, r3
 801e598:	429a      	cmp	r2, r3
 801e59a:	dc13      	bgt.n	801e5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801e59c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e59e:	a912      	add	r1, sp, #72	; 0x48
 801e5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e5a4:	681b      	ldr	r3, [r3, #0]
 801e5a6:	9206      	str	r2, [sp, #24]
 801e5a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e5aa:	9500      	str	r5, [sp, #0]
 801e5ac:	9205      	str	r2, [sp, #20]
 801e5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e5b0:	e9cd b203 	strd	fp, r2, [sp, #12]
 801e5b4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801e5b6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801e5ba:	aa49      	add	r2, sp, #292	; 0x124
 801e5bc:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801e5c0:	4623      	mov	r3, r4
 801e5c2:	47c8      	blx	r9
 801e5c4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801e5c8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801e5cc:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801e5d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e5d4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801e5d8:	68a1      	ldr	r1, [r4, #8]
 801e5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e5de:	ed94 6a08 	vldr	s12, [r4, #32]
 801e5e2:	edd4 6a07 	vldr	s13, [r4, #28]
 801e5e6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801e5ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 801e5ee:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801e5f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e5f6:	edc4 6a07 	vstr	s13, [r4, #28]
 801e5fa:	441a      	add	r2, r3
 801e5fc:	6963      	ldr	r3, [r4, #20]
 801e5fe:	3301      	adds	r3, #1
 801e600:	6022      	str	r2, [r4, #0]
 801e602:	6163      	str	r3, [r4, #20]
 801e604:	69a3      	ldr	r3, [r4, #24]
 801e606:	3b01      	subs	r3, #1
 801e608:	61a3      	str	r3, [r4, #24]
 801e60a:	6923      	ldr	r3, [r4, #16]
 801e60c:	440b      	add	r3, r1
 801e60e:	68e1      	ldr	r1, [r4, #12]
 801e610:	428b      	cmp	r3, r1
 801e612:	6123      	str	r3, [r4, #16]
 801e614:	db15      	blt.n	801e642 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801e616:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801e61a:	3201      	adds	r2, #1
 801e61c:	1a5b      	subs	r3, r3, r1
 801e61e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801e622:	6022      	str	r2, [r4, #0]
 801e624:	6123      	str	r3, [r4, #16]
 801e626:	edc4 6a07 	vstr	s13, [r4, #28]
 801e62a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801e62e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801e632:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801e636:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801e63a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e63e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801e642:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801e646:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801e64a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801e64e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e652:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801e656:	68a9      	ldr	r1, [r5, #8]
 801e658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e65c:	ed95 6a08 	vldr	s12, [r5, #32]
 801e660:	edd5 6a07 	vldr	s13, [r5, #28]
 801e664:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801e668:	ee76 6a86 	vadd.f32	s13, s13, s12
 801e66c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801e670:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e674:	edc5 6a07 	vstr	s13, [r5, #28]
 801e678:	441a      	add	r2, r3
 801e67a:	696b      	ldr	r3, [r5, #20]
 801e67c:	3301      	adds	r3, #1
 801e67e:	602a      	str	r2, [r5, #0]
 801e680:	616b      	str	r3, [r5, #20]
 801e682:	69ab      	ldr	r3, [r5, #24]
 801e684:	3b01      	subs	r3, #1
 801e686:	61ab      	str	r3, [r5, #24]
 801e688:	692b      	ldr	r3, [r5, #16]
 801e68a:	440b      	add	r3, r1
 801e68c:	68e9      	ldr	r1, [r5, #12]
 801e68e:	428b      	cmp	r3, r1
 801e690:	612b      	str	r3, [r5, #16]
 801e692:	db15      	blt.n	801e6c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801e694:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801e698:	3201      	adds	r2, #1
 801e69a:	1a5b      	subs	r3, r3, r1
 801e69c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801e6a0:	602a      	str	r2, [r5, #0]
 801e6a2:	612b      	str	r3, [r5, #16]
 801e6a4:	edc5 6a07 	vstr	s13, [r5, #28]
 801e6a8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801e6ac:	ee36 7a87 	vadd.f32	s14, s13, s14
 801e6b0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801e6b4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801e6b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e6bc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801e6c0:	3f01      	subs	r7, #1
 801e6c2:	e757      	b.n	801e574 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801e6c4:	4299      	cmp	r1, r3
 801e6c6:	dc13      	bgt.n	801e6f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801e6c8:	429a      	cmp	r2, r3
 801e6ca:	da14      	bge.n	801e6f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801e6cc:	2502      	movs	r5, #2
 801e6ce:	2703      	movs	r7, #3
 801e6d0:	f04f 0800 	mov.w	r8, #0
 801e6d4:	46a9      	mov	r9, r5
 801e6d6:	f04f 0a01 	mov.w	sl, #1
 801e6da:	e6ef      	b.n	801e4bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801e6dc:	2501      	movs	r5, #1
 801e6de:	2700      	movs	r7, #0
 801e6e0:	46a9      	mov	r9, r5
 801e6e2:	46b8      	mov	r8, r7
 801e6e4:	f04f 0a02 	mov.w	sl, #2
 801e6e8:	e6e8      	b.n	801e4bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801e6ea:	2501      	movs	r5, #1
 801e6ec:	2702      	movs	r7, #2
 801e6ee:	e6e1      	b.n	801e4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801e6f0:	2500      	movs	r5, #0
 801e6f2:	2701      	movs	r7, #1
 801e6f4:	e7f4      	b.n	801e6e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801e6f6:	2702      	movs	r7, #2
 801e6f8:	2503      	movs	r5, #3
 801e6fa:	f04f 0900 	mov.w	r9, #0
 801e6fe:	46b8      	mov	r8, r7
 801e700:	e7e9      	b.n	801e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801e702:	4613      	mov	r3, r2
 801e704:	e728      	b.n	801e558 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801e706:	bf00      	nop
 801e708:	24027f64 	.word	0x24027f64
 801e70c:	fffd8f01 	.word	0xfffd8f01
 801e710:	00027100 	.word	0x00027100
 801e714:	0004e1ff 	.word	0x0004e1ff
 801e718:	0004e1fe 	.word	0x0004e1fe
 801e71c:	24027f6c 	.word	0x24027f6c
 801e720:	4613      	mov	r3, r2
 801e722:	992b      	ldr	r1, [sp, #172]	; 0xac
 801e724:	469e      	mov	lr, r3
 801e726:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801e728:	469c      	mov	ip, r3
 801e72a:	9111      	str	r1, [sp, #68]	; 0x44
 801e72c:	f04f 0900 	mov.w	r9, #0
 801e730:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801e734:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801e738:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801e73c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801e740:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801e744:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801e748:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801e74c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801e750:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801e754:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801e758:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801e75c:	f1bc 0f00 	cmp.w	ip, #0
 801e760:	d147      	bne.n	801e7f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801e762:	eb03 0c07 	add.w	ip, r3, r7
 801e766:	1ad7      	subs	r7, r2, r3
 801e768:	f1b9 0f00 	cmp.w	r9, #0
 801e76c:	d009      	beq.n	801e782 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801e76e:	9029      	str	r0, [sp, #164]	; 0xa4
 801e770:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801e774:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801e778:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801e77c:	912d      	str	r1, [sp, #180]	; 0xb4
 801e77e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801e782:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801e784:	f04f 0800 	mov.w	r8, #0
 801e788:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801e78c:	9111      	str	r1, [sp, #68]	; 0x44
 801e78e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801e792:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801e796:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801e79a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801e79e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801e7a2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801e7a6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801e7aa:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801e7ae:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801e7b2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801e7b6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801e7ba:	f1be 0f00 	cmp.w	lr, #0
 801e7be:	d031      	beq.n	801e824 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801e7c0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e7c2:	4450      	add	r0, sl
 801e7c4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801e7c8:	4431      	add	r1, r6
 801e7ca:	ee37 7a04 	vadd.f32	s14, s14, s8
 801e7ce:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801e7d2:	4549      	cmp	r1, r9
 801e7d4:	db08      	blt.n	801e7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801e7d6:	ee77 7a85 	vadd.f32	s15, s15, s10
 801e7da:	3001      	adds	r0, #1
 801e7dc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801e7e0:	eba1 0109 	sub.w	r1, r1, r9
 801e7e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 801e7e8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e7ec:	f04f 0801 	mov.w	r8, #1
 801e7f0:	e7e3      	b.n	801e7ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801e7f2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e7f4:	4450      	add	r0, sl
 801e7f6:	ee37 7a24 	vadd.f32	s14, s14, s9
 801e7fa:	4431      	add	r1, r6
 801e7fc:	ee77 7a84 	vadd.f32	s15, s15, s8
 801e800:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801e804:	4541      	cmp	r1, r8
 801e806:	db08      	blt.n	801e81a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801e808:	ee76 6a85 	vadd.f32	s13, s13, s10
 801e80c:	3001      	adds	r0, #1
 801e80e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801e812:	eba1 0108 	sub.w	r1, r1, r8
 801e816:	ee77 7a86 	vadd.f32	s15, s15, s12
 801e81a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e81e:	f04f 0901 	mov.w	r9, #1
 801e822:	e79b      	b.n	801e75c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801e824:	449c      	add	ip, r3
 801e826:	1aff      	subs	r7, r7, r3
 801e828:	f1b8 0f00 	cmp.w	r8, #0
 801e82c:	d009      	beq.n	801e842 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801e82e:	9019      	str	r0, [sp, #100]	; 0x64
 801e830:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801e834:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801e838:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801e83c:	911d      	str	r1, [sp, #116]	; 0x74
 801e83e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801e842:	1ad2      	subs	r2, r2, r3
 801e844:	e68b      	b.n	801e55e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801e846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e848:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	f000 80d1 	beq.w	801e9f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801e850:	ad19      	add	r5, sp, #100	; 0x64
 801e852:	ac39      	add	r4, sp, #228	; 0xe4
 801e854:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801e856:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801e85a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e85e:	930c      	str	r3, [sp, #48]	; 0x30
 801e860:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e862:	6963      	ldr	r3, [r4, #20]
 801e864:	440b      	add	r3, r1
 801e866:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801e86a:	4408      	add	r0, r1
 801e86c:	b200      	sxth	r0, r0
 801e86e:	4283      	cmp	r3, r0
 801e870:	900d      	str	r0, [sp, #52]	; 0x34
 801e872:	f280 80c1 	bge.w	801e9f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801e876:	428b      	cmp	r3, r1
 801e878:	da08      	bge.n	801e88c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801e87a:	2a00      	cmp	r2, #0
 801e87c:	dd06      	ble.n	801e88c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801e87e:	1acb      	subs	r3, r1, r3
 801e880:	429a      	cmp	r2, r3
 801e882:	f2c0 80bb 	blt.w	801e9fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801e886:	2b00      	cmp	r3, #0
 801e888:	f300 80b9 	bgt.w	801e9fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801e88c:	6967      	ldr	r7, [r4, #20]
 801e88e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801e892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e894:	443b      	add	r3, r7
 801e896:	461f      	mov	r7, r3
 801e898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e89a:	1bdf      	subs	r7, r3, r7
 801e89c:	4297      	cmp	r7, r2
 801e89e:	bfa8      	it	ge
 801e8a0:	4617      	movge	r7, r2
 801e8a2:	2f00      	cmp	r7, #0
 801e8a4:	f340 813c 	ble.w	801eb20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801e8a8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801e8aa:	6829      	ldr	r1, [r5, #0]
 801e8ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e8b0:	f9bb 3000 	ldrsh.w	r3, [fp]
 801e8b4:	4411      	add	r1, r2
 801e8b6:	6820      	ldr	r0, [r4, #0]
 801e8b8:	4299      	cmp	r1, r3
 801e8ba:	dd1a      	ble.n	801e8f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801e8bc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801e8c0:	4402      	add	r2, r0
 801e8c2:	440b      	add	r3, r1
 801e8c4:	b21b      	sxth	r3, r3
 801e8c6:	429a      	cmp	r2, r3
 801e8c8:	dc13      	bgt.n	801e8f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801e8ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e8cc:	a912      	add	r1, sp, #72	; 0x48
 801e8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	9206      	str	r2, [sp, #24]
 801e8d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e8d8:	9500      	str	r5, [sp, #0]
 801e8da:	9205      	str	r2, [sp, #20]
 801e8dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e8de:	e9cd b203 	strd	fp, r2, [sp, #12]
 801e8e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801e8e4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801e8e8:	aa49      	add	r2, sp, #292	; 0x124
 801e8ea:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801e8ee:	4623      	mov	r3, r4
 801e8f0:	47c8      	blx	r9
 801e8f2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801e8f6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801e8fa:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801e8fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e902:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801e906:	68a1      	ldr	r1, [r4, #8]
 801e908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e90c:	ed94 6a08 	vldr	s12, [r4, #32]
 801e910:	edd4 6a07 	vldr	s13, [r4, #28]
 801e914:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801e918:	ee76 6a86 	vadd.f32	s13, s13, s12
 801e91c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801e920:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e924:	edc4 6a07 	vstr	s13, [r4, #28]
 801e928:	441a      	add	r2, r3
 801e92a:	6963      	ldr	r3, [r4, #20]
 801e92c:	3301      	adds	r3, #1
 801e92e:	6022      	str	r2, [r4, #0]
 801e930:	6163      	str	r3, [r4, #20]
 801e932:	69a3      	ldr	r3, [r4, #24]
 801e934:	3b01      	subs	r3, #1
 801e936:	61a3      	str	r3, [r4, #24]
 801e938:	6923      	ldr	r3, [r4, #16]
 801e93a:	440b      	add	r3, r1
 801e93c:	68e1      	ldr	r1, [r4, #12]
 801e93e:	428b      	cmp	r3, r1
 801e940:	6123      	str	r3, [r4, #16]
 801e942:	db15      	blt.n	801e970 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801e944:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801e948:	3201      	adds	r2, #1
 801e94a:	1a5b      	subs	r3, r3, r1
 801e94c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801e950:	6022      	str	r2, [r4, #0]
 801e952:	6123      	str	r3, [r4, #16]
 801e954:	edc4 6a07 	vstr	s13, [r4, #28]
 801e958:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801e95c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801e960:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801e964:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801e968:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e96c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801e970:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801e974:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801e978:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801e97c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e980:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801e984:	68a9      	ldr	r1, [r5, #8]
 801e986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e98a:	ed95 6a08 	vldr	s12, [r5, #32]
 801e98e:	edd5 6a07 	vldr	s13, [r5, #28]
 801e992:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801e996:	ee76 6a86 	vadd.f32	s13, s13, s12
 801e99a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801e99e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e9a2:	edc5 6a07 	vstr	s13, [r5, #28]
 801e9a6:	441a      	add	r2, r3
 801e9a8:	696b      	ldr	r3, [r5, #20]
 801e9aa:	3301      	adds	r3, #1
 801e9ac:	602a      	str	r2, [r5, #0]
 801e9ae:	616b      	str	r3, [r5, #20]
 801e9b0:	69ab      	ldr	r3, [r5, #24]
 801e9b2:	3b01      	subs	r3, #1
 801e9b4:	61ab      	str	r3, [r5, #24]
 801e9b6:	692b      	ldr	r3, [r5, #16]
 801e9b8:	440b      	add	r3, r1
 801e9ba:	68e9      	ldr	r1, [r5, #12]
 801e9bc:	428b      	cmp	r3, r1
 801e9be:	612b      	str	r3, [r5, #16]
 801e9c0:	db15      	blt.n	801e9ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801e9c2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801e9c6:	3201      	adds	r2, #1
 801e9c8:	1a5b      	subs	r3, r3, r1
 801e9ca:	ee76 6a26 	vadd.f32	s13, s12, s13
 801e9ce:	602a      	str	r2, [r5, #0]
 801e9d0:	612b      	str	r3, [r5, #16]
 801e9d2:	edc5 6a07 	vstr	s13, [r5, #28]
 801e9d6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801e9da:	ee36 7a87 	vadd.f32	s14, s13, s14
 801e9de:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801e9e2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801e9e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e9ea:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801e9ee:	3f01      	subs	r7, #1
 801e9f0:	e757      	b.n	801e8a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801e9f2:	ad39      	add	r5, sp, #228	; 0xe4
 801e9f4:	ac19      	add	r4, sp, #100	; 0x64
 801e9f6:	e72d      	b.n	801e854 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801e9f8:	4613      	mov	r3, r2
 801e9fa:	e744      	b.n	801e886 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801e9fc:	4613      	mov	r3, r2
 801e9fe:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801ea00:	469e      	mov	lr, r3
 801ea02:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801ea06:	461f      	mov	r7, r3
 801ea08:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801ea0c:	f04f 0900 	mov.w	r9, #0
 801ea10:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801ea14:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801ea18:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801ea1c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801ea20:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801ea24:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801ea26:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801ea2a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801ea2e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801ea32:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801ea36:	960e      	str	r6, [sp, #56]	; 0x38
 801ea38:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801ea3c:	2f00      	cmp	r7, #0
 801ea3e:	d146      	bne.n	801eace <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801ea40:	449c      	add	ip, r3
 801ea42:	1ad7      	subs	r7, r2, r3
 801ea44:	f1b9 0f00 	cmp.w	r9, #0
 801ea48:	d009      	beq.n	801ea5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801ea4a:	9039      	str	r0, [sp, #228]	; 0xe4
 801ea4c:	913d      	str	r1, [sp, #244]	; 0xf4
 801ea4e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801ea52:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801ea56:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801ea5a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801ea5e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ea60:	f04f 0800 	mov.w	r8, #0
 801ea64:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ea68:	910e      	str	r1, [sp, #56]	; 0x38
 801ea6a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ea6e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801ea72:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ea76:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ea7a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801ea7e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801ea82:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801ea86:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ea8a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ea8e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ea92:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ea96:	f1be 0f00 	cmp.w	lr, #0
 801ea9a:	d030      	beq.n	801eafe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801ea9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ea9e:	4450      	add	r0, sl
 801eaa0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801eaa4:	4431      	add	r1, r6
 801eaa6:	ee37 7a04 	vadd.f32	s14, s14, s8
 801eaaa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801eaae:	4549      	cmp	r1, r9
 801eab0:	db08      	blt.n	801eac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801eab2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801eab6:	3001      	adds	r0, #1
 801eab8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801eabc:	eba1 0109 	sub.w	r1, r1, r9
 801eac0:	ee37 7a06 	vadd.f32	s14, s14, s12
 801eac4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eac8:	f04f 0801 	mov.w	r8, #1
 801eacc:	e7e3      	b.n	801ea96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801eace:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ead0:	4450      	add	r0, sl
 801ead2:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ead6:	4431      	add	r1, r6
 801ead8:	ee77 7a84 	vadd.f32	s15, s15, s8
 801eadc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801eae0:	4541      	cmp	r1, r8
 801eae2:	db08      	blt.n	801eaf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801eae4:	ee76 6a85 	vadd.f32	s13, s13, s10
 801eae8:	3001      	adds	r0, #1
 801eaea:	ee37 7a25 	vadd.f32	s14, s14, s11
 801eaee:	eba1 0108 	sub.w	r1, r1, r8
 801eaf2:	ee77 7a86 	vadd.f32	s15, s15, s12
 801eaf6:	3f01      	subs	r7, #1
 801eaf8:	f04f 0901 	mov.w	r9, #1
 801eafc:	e79e      	b.n	801ea3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801eafe:	449c      	add	ip, r3
 801eb00:	1aff      	subs	r7, r7, r3
 801eb02:	f1b8 0f00 	cmp.w	r8, #0
 801eb06:	d009      	beq.n	801eb1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801eb08:	9019      	str	r0, [sp, #100]	; 0x64
 801eb0a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801eb0e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801eb12:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801eb16:	911d      	str	r1, [sp, #116]	; 0x74
 801eb18:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801eb1c:	1ad2      	subs	r2, r2, r3
 801eb1e:	e6b5      	b.n	801e88c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801eb20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	b923      	cbnz	r3, 801eb30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801eb26:	4b04      	ldr	r3, [pc, #16]	; (801eb38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801eb28:	6818      	ldr	r0, [r3, #0]
 801eb2a:	6803      	ldr	r3, [r0, #0]
 801eb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb2e:	4798      	blx	r3
 801eb30:	b05b      	add	sp, #364	; 0x16c
 801eb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb36:	bf00      	nop
 801eb38:	24027f6c 	.word	0x24027f6c

0801eb3c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801eb3c:	2b03      	cmp	r3, #3
 801eb3e:	d818      	bhi.n	801eb72 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801eb40:	e8df f003 	tbb	[pc, r3]
 801eb44:	130d0602 	.word	0x130d0602
 801eb48:	f9b0 2000 	ldrsh.w	r2, [r0]
 801eb4c:	1850      	adds	r0, r2, r1
 801eb4e:	4770      	bx	lr
 801eb50:	8803      	ldrh	r3, [r0, #0]
 801eb52:	8880      	ldrh	r0, [r0, #4]
 801eb54:	4418      	add	r0, r3
 801eb56:	b200      	sxth	r0, r0
 801eb58:	1a80      	subs	r0, r0, r2
 801eb5a:	3801      	subs	r0, #1
 801eb5c:	4770      	bx	lr
 801eb5e:	8803      	ldrh	r3, [r0, #0]
 801eb60:	8880      	ldrh	r0, [r0, #4]
 801eb62:	4418      	add	r0, r3
 801eb64:	b200      	sxth	r0, r0
 801eb66:	1a40      	subs	r0, r0, r1
 801eb68:	e7f7      	b.n	801eb5a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801eb6a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801eb6e:	4410      	add	r0, r2
 801eb70:	4770      	bx	lr
 801eb72:	2000      	movs	r0, #0
 801eb74:	4770      	bx	lr

0801eb76 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801eb76:	2b03      	cmp	r3, #3
 801eb78:	d817      	bhi.n	801ebaa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801eb7a:	e8df f003 	tbb	[pc, r3]
 801eb7e:	0602      	.short	0x0602
 801eb80:	1009      	.short	0x1009
 801eb82:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801eb86:	1850      	adds	r0, r2, r1
 801eb88:	4770      	bx	lr
 801eb8a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801eb8e:	e7fa      	b.n	801eb86 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801eb90:	8843      	ldrh	r3, [r0, #2]
 801eb92:	88c0      	ldrh	r0, [r0, #6]
 801eb94:	4418      	add	r0, r3
 801eb96:	b200      	sxth	r0, r0
 801eb98:	1a80      	subs	r0, r0, r2
 801eb9a:	3801      	subs	r0, #1
 801eb9c:	4770      	bx	lr
 801eb9e:	8843      	ldrh	r3, [r0, #2]
 801eba0:	88c0      	ldrh	r0, [r0, #6]
 801eba2:	4418      	add	r0, r3
 801eba4:	b200      	sxth	r0, r0
 801eba6:	1a40      	subs	r0, r0, r1
 801eba8:	e7f7      	b.n	801eb9a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ebaa:	2000      	movs	r0, #0
 801ebac:	4770      	bx	lr
	...

0801ebb0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ebb0:	4b01      	ldr	r3, [pc, #4]	; (801ebb8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ebb2:	2200      	movs	r2, #0
 801ebb4:	601a      	str	r2, [r3, #0]
 801ebb6:	4770      	bx	lr
 801ebb8:	24027f7c 	.word	0x24027f7c

0801ebbc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ebbc:	4603      	mov	r3, r0
 801ebbe:	b1c8      	cbz	r0, 801ebf4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ebc0:	0c02      	lsrs	r2, r0, #16
 801ebc2:	0412      	lsls	r2, r2, #16
 801ebc4:	b9a2      	cbnz	r2, 801ebf0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ebc6:	0403      	lsls	r3, r0, #16
 801ebc8:	2010      	movs	r0, #16
 801ebca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ebce:	bf04      	itt	eq
 801ebd0:	021b      	lsleq	r3, r3, #8
 801ebd2:	3008      	addeq	r0, #8
 801ebd4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ebd8:	bf04      	itt	eq
 801ebda:	011b      	lsleq	r3, r3, #4
 801ebdc:	3004      	addeq	r0, #4
 801ebde:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ebe2:	bf04      	itt	eq
 801ebe4:	009b      	lsleq	r3, r3, #2
 801ebe6:	3002      	addeq	r0, #2
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	db04      	blt.n	801ebf6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801ebec:	3001      	adds	r0, #1
 801ebee:	4770      	bx	lr
 801ebf0:	2000      	movs	r0, #0
 801ebf2:	e7ea      	b.n	801ebca <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801ebf4:	2020      	movs	r0, #32
 801ebf6:	4770      	bx	lr

0801ebf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebfc:	b087      	sub	sp, #28
 801ebfe:	4681      	mov	r9, r0
 801ec00:	4698      	mov	r8, r3
 801ec02:	4610      	mov	r0, r2
 801ec04:	460d      	mov	r5, r1
 801ec06:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801ec0a:	b981      	cbnz	r1, 801ec2e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801ec0c:	b14b      	cbz	r3, 801ec22 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801ec0e:	460b      	mov	r3, r1
 801ec10:	464a      	mov	r2, r9
 801ec12:	4641      	mov	r1, r8
 801ec14:	e9cd 4700 	strd	r4, r7, [sp]
 801ec18:	f7ff ffee 	bl	801ebf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ec1c:	b007      	add	sp, #28
 801ec1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec22:	f04f 33ff 	mov.w	r3, #4294967295
 801ec26:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ec2a:	603b      	str	r3, [r7, #0]
 801ec2c:	e7f6      	b.n	801ec1c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ec2e:	fa32 fa01 	lsrs.w	sl, r2, r1
 801ec32:	d107      	bne.n	801ec44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801ec34:	fb09 f602 	mul.w	r6, r9, r2
 801ec38:	fbb6 f0f4 	udiv	r0, r6, r4
 801ec3c:	fb04 6610 	mls	r6, r4, r0, r6
 801ec40:	603e      	str	r6, [r7, #0]
 801ec42:	e7eb      	b.n	801ec1c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ec44:	2601      	movs	r6, #1
 801ec46:	fa09 fb01 	lsl.w	fp, r9, r1
 801ec4a:	408e      	lsls	r6, r1
 801ec4c:	fbbb f3f4 	udiv	r3, fp, r4
 801ec50:	3e01      	subs	r6, #1
 801ec52:	9302      	str	r3, [sp, #8]
 801ec54:	fb0a f303 	mul.w	r3, sl, r3
 801ec58:	4016      	ands	r6, r2
 801ec5a:	9303      	str	r3, [sp, #12]
 801ec5c:	4630      	mov	r0, r6
 801ec5e:	f7ff ffad 	bl	801ebbc <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ec62:	464a      	mov	r2, r9
 801ec64:	460b      	mov	r3, r1
 801ec66:	4601      	mov	r1, r0
 801ec68:	4630      	mov	r0, r6
 801ec6a:	e9cd 4700 	strd	r4, r7, [sp]
 801ec6e:	f7ff ffc3 	bl	801ebf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ec72:	9b02      	ldr	r3, [sp, #8]
 801ec74:	4606      	mov	r6, r0
 801ec76:	eb05 0108 	add.w	r1, r5, r8
 801ec7a:	fb04 bb13 	mls	fp, r4, r3, fp
 801ec7e:	4658      	mov	r0, fp
 801ec80:	f7ff ff9c 	bl	801ebbc <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ec84:	ab05      	add	r3, sp, #20
 801ec86:	465a      	mov	r2, fp
 801ec88:	e9cd 4300 	strd	r4, r3, [sp]
 801ec8c:	4603      	mov	r3, r0
 801ec8e:	4650      	mov	r0, sl
 801ec90:	f7ff ffb2 	bl	801ebf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ec94:	6839      	ldr	r1, [r7, #0]
 801ec96:	9a05      	ldr	r2, [sp, #20]
 801ec98:	9b03      	ldr	r3, [sp, #12]
 801ec9a:	4411      	add	r1, r2
 801ec9c:	fbb1 f2f4 	udiv	r2, r1, r4
 801eca0:	18d3      	adds	r3, r2, r3
 801eca2:	fb04 1412 	mls	r4, r4, r2, r1
 801eca6:	441e      	add	r6, r3
 801eca8:	603c      	str	r4, [r7, #0]
 801ecaa:	4430      	add	r0, r6
 801ecac:	e7b6      	b.n	801ec1c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801ecae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801ecae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ecb2:	b085      	sub	sp, #20
 801ecb4:	f1b0 0900 	subs.w	r9, r0, #0
 801ecb8:	461d      	mov	r5, r3
 801ecba:	4617      	mov	r7, r2
 801ecbc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ecbe:	bfbb      	ittet	lt
 801ecc0:	f1c9 0900 	rsblt	r9, r9, #0
 801ecc4:	f04f 36ff 	movlt.w	r6, #4294967295
 801ecc8:	2601      	movge	r6, #1
 801ecca:	6823      	ldrlt	r3, [r4, #0]
 801eccc:	bfbc      	itt	lt
 801ecce:	425b      	neglt	r3, r3
 801ecd0:	6023      	strlt	r3, [r4, #0]
 801ecd2:	2a00      	cmp	r2, #0
 801ecd4:	da04      	bge.n	801ece0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801ecd6:	6823      	ldr	r3, [r4, #0]
 801ecd8:	4257      	negs	r7, r2
 801ecda:	4276      	negs	r6, r6
 801ecdc:	425b      	negs	r3, r3
 801ecde:	6023      	str	r3, [r4, #0]
 801ece0:	2d00      	cmp	r5, #0
 801ece2:	4638      	mov	r0, r7
 801ece4:	bfba      	itte	lt
 801ece6:	426d      	neglt	r5, r5
 801ece8:	f04f 38ff 	movlt.w	r8, #4294967295
 801ecec:	f04f 0801 	movge.w	r8, #1
 801ecf0:	f7ff ff64 	bl	801ebbc <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ecf4:	ab03      	add	r3, sp, #12
 801ecf6:	463a      	mov	r2, r7
 801ecf8:	e9cd 5300 	strd	r5, r3, [sp]
 801ecfc:	4603      	mov	r3, r0
 801ecfe:	4648      	mov	r0, r9
 801ed00:	f7ff ff7a 	bl	801ebf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ed04:	6823      	ldr	r3, [r4, #0]
 801ed06:	9a03      	ldr	r2, [sp, #12]
 801ed08:	4546      	cmp	r6, r8
 801ed0a:	441a      	add	r2, r3
 801ed0c:	fb92 f3f5 	sdiv	r3, r2, r5
 801ed10:	4418      	add	r0, r3
 801ed12:	fb05 2313 	mls	r3, r5, r3, r2
 801ed16:	bf18      	it	ne
 801ed18:	4240      	negne	r0, r0
 801ed1a:	1c72      	adds	r2, r6, #1
 801ed1c:	6023      	str	r3, [r4, #0]
 801ed1e:	d105      	bne.n	801ed2c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	f1c3 0200 	rsb	r2, r3, #0
 801ed26:	db0b      	blt.n	801ed40 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801ed28:	6022      	str	r2, [r4, #0]
 801ed2a:	e006      	b.n	801ed3a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ed2c:	2e01      	cmp	r6, #1
 801ed2e:	d104      	bne.n	801ed3a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	da02      	bge.n	801ed3a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ed34:	442b      	add	r3, r5
 801ed36:	3801      	subs	r0, #1
 801ed38:	6023      	str	r3, [r4, #0]
 801ed3a:	b005      	add	sp, #20
 801ed3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ed40:	3801      	subs	r0, #1
 801ed42:	1b52      	subs	r2, r2, r5
 801ed44:	e7f0      	b.n	801ed28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801ed48 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ed48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801ed4c:	4c1c      	ldr	r4, [pc, #112]	; (801edc0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801ed4e:	4605      	mov	r5, r0
 801ed50:	6807      	ldr	r7, [r0, #0]
 801ed52:	69a3      	ldr	r3, [r4, #24]
 801ed54:	b92b      	cbnz	r3, 801ed62 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801ed56:	6840      	ldr	r0, [r0, #4]
 801ed58:	e9c5 7000 	strd	r7, r0, [r5]
 801ed5c:	b004      	add	sp, #16
 801ed5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed62:	f04f 0802 	mov.w	r8, #2
 801ed66:	68a2      	ldr	r2, [r4, #8]
 801ed68:	ae04      	add	r6, sp, #16
 801ed6a:	6820      	ldr	r0, [r4, #0]
 801ed6c:	fb93 f1f8 	sdiv	r1, r3, r8
 801ed70:	440a      	add	r2, r1
 801ed72:	69e1      	ldr	r1, [r4, #28]
 801ed74:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ed78:	463a      	mov	r2, r7
 801ed7a:	9600      	str	r6, [sp, #0]
 801ed7c:	f7ff ff97 	bl	801ecae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ed80:	69a3      	ldr	r3, [r4, #24]
 801ed82:	4607      	mov	r7, r0
 801ed84:	686a      	ldr	r2, [r5, #4]
 801ed86:	6a21      	ldr	r1, [r4, #32]
 801ed88:	9600      	str	r6, [sp, #0]
 801ed8a:	6860      	ldr	r0, [r4, #4]
 801ed8c:	f7ff ff8f 	bl	801ecae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ed90:	69a3      	ldr	r3, [r4, #24]
 801ed92:	6962      	ldr	r2, [r4, #20]
 801ed94:	4407      	add	r7, r0
 801ed96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ed98:	9600      	str	r6, [sp, #0]
 801ed9a:	68e0      	ldr	r0, [r4, #12]
 801ed9c:	fb93 f8f8 	sdiv	r8, r3, r8
 801eda0:	4442      	add	r2, r8
 801eda2:	9203      	str	r2, [sp, #12]
 801eda4:	682a      	ldr	r2, [r5, #0]
 801eda6:	f7ff ff82 	bl	801ecae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801edaa:	4680      	mov	r8, r0
 801edac:	9600      	str	r6, [sp, #0]
 801edae:	69a3      	ldr	r3, [r4, #24]
 801edb0:	686a      	ldr	r2, [r5, #4]
 801edb2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801edb4:	6920      	ldr	r0, [r4, #16]
 801edb6:	f7ff ff7a 	bl	801ecae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801edba:	4440      	add	r0, r8
 801edbc:	e7cc      	b.n	801ed58 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801edbe:	bf00      	nop
 801edc0:	24027f80 	.word	0x24027f80

0801edc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801edc4:	4b07      	ldr	r3, [pc, #28]	; (801ede4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801edc6:	781b      	ldrb	r3, [r3, #0]
 801edc8:	2b01      	cmp	r3, #1
 801edca:	d109      	bne.n	801ede0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801edcc:	f9b1 3000 	ldrsh.w	r3, [r1]
 801edd0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801edd4:	8003      	strh	r3, [r0, #0]
 801edd6:	4b04      	ldr	r3, [pc, #16]	; (801ede8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801edd8:	881b      	ldrh	r3, [r3, #0]
 801edda:	3b01      	subs	r3, #1
 801eddc:	1a9b      	subs	r3, r3, r2
 801edde:	800b      	strh	r3, [r1, #0]
 801ede0:	4770      	bx	lr
 801ede2:	bf00      	nop
 801ede4:	24027f64 	.word	0x24027f64
 801ede8:	24027f60 	.word	0x24027f60

0801edec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801edec:	4b07      	ldr	r3, [pc, #28]	; (801ee0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801edee:	b510      	push	{r4, lr}
 801edf0:	781b      	ldrb	r3, [r3, #0]
 801edf2:	2b01      	cmp	r3, #1
 801edf4:	d108      	bne.n	801ee08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801edf6:	4b06      	ldr	r3, [pc, #24]	; (801ee10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801edf8:	880c      	ldrh	r4, [r1, #0]
 801edfa:	881b      	ldrh	r3, [r3, #0]
 801edfc:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ee00:	3b01      	subs	r3, #1
 801ee02:	1b1b      	subs	r3, r3, r4
 801ee04:	8003      	strh	r3, [r0, #0]
 801ee06:	800a      	strh	r2, [r1, #0]
 801ee08:	bd10      	pop	{r4, pc}
 801ee0a:	bf00      	nop
 801ee0c:	24027f64 	.word	0x24027f64
 801ee10:	24027f60 	.word	0x24027f60

0801ee14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801ee14:	4b0a      	ldr	r3, [pc, #40]	; (801ee40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801ee16:	b510      	push	{r4, lr}
 801ee18:	781b      	ldrb	r3, [r3, #0]
 801ee1a:	2b01      	cmp	r3, #1
 801ee1c:	d10e      	bne.n	801ee3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801ee1e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ee22:	8843      	ldrh	r3, [r0, #2]
 801ee24:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ee28:	18ca      	adds	r2, r1, r3
 801ee2a:	4b06      	ldr	r3, [pc, #24]	; (801ee44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801ee2c:	8044      	strh	r4, [r0, #2]
 801ee2e:	881b      	ldrh	r3, [r3, #0]
 801ee30:	1a9b      	subs	r3, r3, r2
 801ee32:	8003      	strh	r3, [r0, #0]
 801ee34:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ee38:	8081      	strh	r1, [r0, #4]
 801ee3a:	80c3      	strh	r3, [r0, #6]
 801ee3c:	bd10      	pop	{r4, pc}
 801ee3e:	bf00      	nop
 801ee40:	24027f64 	.word	0x24027f64
 801ee44:	24027f60 	.word	0x24027f60

0801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ee48:	4b08      	ldr	r3, [pc, #32]	; (801ee6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801ee4a:	781b      	ldrb	r3, [r3, #0]
 801ee4c:	2b01      	cmp	r3, #1
 801ee4e:	d10c      	bne.n	801ee6a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801ee50:	8803      	ldrh	r3, [r0, #0]
 801ee52:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801ee56:	8842      	ldrh	r2, [r0, #2]
 801ee58:	8002      	strh	r2, [r0, #0]
 801ee5a:	185a      	adds	r2, r3, r1
 801ee5c:	4b04      	ldr	r3, [pc, #16]	; (801ee70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801ee5e:	881b      	ldrh	r3, [r3, #0]
 801ee60:	1a9b      	subs	r3, r3, r2
 801ee62:	8043      	strh	r3, [r0, #2]
 801ee64:	88c3      	ldrh	r3, [r0, #6]
 801ee66:	80c1      	strh	r1, [r0, #6]
 801ee68:	8083      	strh	r3, [r0, #4]
 801ee6a:	4770      	bx	lr
 801ee6c:	24027f64 	.word	0x24027f64
 801ee70:	24027f60 	.word	0x24027f60

0801ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ee74:	4b07      	ldr	r3, [pc, #28]	; (801ee94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ee76:	b510      	push	{r4, lr}
 801ee78:	781b      	ldrb	r3, [r3, #0]
 801ee7a:	2b01      	cmp	r3, #1
 801ee7c:	d108      	bne.n	801ee90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ee7e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ee82:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ee86:	8003      	strh	r3, [r0, #0]
 801ee88:	8893      	ldrh	r3, [r2, #4]
 801ee8a:	3b01      	subs	r3, #1
 801ee8c:	1b1b      	subs	r3, r3, r4
 801ee8e:	800b      	strh	r3, [r1, #0]
 801ee90:	bd10      	pop	{r4, pc}
 801ee92:	bf00      	nop
 801ee94:	24027f64 	.word	0x24027f64

0801ee98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801ee98:	4b0b      	ldr	r3, [pc, #44]	; (801eec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801ee9a:	781b      	ldrb	r3, [r3, #0]
 801ee9c:	2b01      	cmp	r3, #1
 801ee9e:	d111      	bne.n	801eec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801eea0:	680b      	ldr	r3, [r1, #0]
 801eea2:	ed90 7a00 	vldr	s14, [r0]
 801eea6:	6003      	str	r3, [r0, #0]
 801eea8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801eeac:	eddf 6a07 	vldr	s13, [pc, #28]	; 801eecc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801eeb0:	ee07 3a90 	vmov	s15, r3
 801eeb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eeb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801eebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801eec0:	edc1 7a00 	vstr	s15, [r1]
 801eec4:	4770      	bx	lr
 801eec6:	bf00      	nop
 801eec8:	24027f64 	.word	0x24027f64
 801eecc:	38d1b717 	.word	0x38d1b717

0801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801eed0:	4b0a      	ldr	r3, [pc, #40]	; (801eefc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801eed2:	460a      	mov	r2, r1
 801eed4:	b510      	push	{r4, lr}
 801eed6:	781b      	ldrb	r3, [r3, #0]
 801eed8:	2b01      	cmp	r3, #1
 801eeda:	d10d      	bne.n	801eef8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801eedc:	8881      	ldrh	r1, [r0, #4]
 801eede:	8803      	ldrh	r3, [r0, #0]
 801eee0:	440b      	add	r3, r1
 801eee2:	4601      	mov	r1, r0
 801eee4:	3b01      	subs	r3, #1
 801eee6:	f821 3b02 	strh.w	r3, [r1], #2
 801eeea:	f7ff ffc3 	bl	801ee74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801eeee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801eef2:	88c2      	ldrh	r2, [r0, #6]
 801eef4:	80c3      	strh	r3, [r0, #6]
 801eef6:	8082      	strh	r2, [r0, #4]
 801eef8:	bd10      	pop	{r4, pc}
 801eefa:	bf00      	nop
 801eefc:	24027f64 	.word	0x24027f64

0801ef00 <_ZN8touchgfx11Application13requestRedrawEv>:
 801ef00:	4b06      	ldr	r3, [pc, #24]	; (801ef1c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801ef02:	2100      	movs	r1, #0
 801ef04:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ef08:	4b05      	ldr	r3, [pc, #20]	; (801ef20 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801ef0a:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801ef0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ef12:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801ef16:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801ef1a:	4770      	bx	lr
 801ef1c:	24027f60 	.word	0x24027f60
 801ef20:	24027f62 	.word	0x24027f62

0801ef24 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801ef24:	4b03      	ldr	r3, [pc, #12]	; (801ef34 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801ef26:	6818      	ldr	r0, [r3, #0]
 801ef28:	b110      	cbz	r0, 801ef30 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801ef2a:	6803      	ldr	r3, [r0, #0]
 801ef2c:	699b      	ldr	r3, [r3, #24]
 801ef2e:	4718      	bx	r3
 801ef30:	4770      	bx	lr
 801ef32:	bf00      	nop
 801ef34:	24027fb0 	.word	0x24027fb0

0801ef38 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801ef38:	4770      	bx	lr
	...

0801ef3c <_ZN8touchgfx11Application4drawEv>:
 801ef3c:	4b09      	ldr	r3, [pc, #36]	; (801ef64 <_ZN8touchgfx11Application4drawEv+0x28>)
 801ef3e:	b507      	push	{r0, r1, r2, lr}
 801ef40:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ef44:	2100      	movs	r1, #0
 801ef46:	4b08      	ldr	r3, [pc, #32]	; (801ef68 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801ef48:	9100      	str	r1, [sp, #0]
 801ef4a:	4669      	mov	r1, sp
 801ef4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ef50:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ef54:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ef58:	6803      	ldr	r3, [r0, #0]
 801ef5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef5c:	4798      	blx	r3
 801ef5e:	b003      	add	sp, #12
 801ef60:	f85d fb04 	ldr.w	pc, [sp], #4
 801ef64:	24027f60 	.word	0x24027f60
 801ef68:	24027f62 	.word	0x24027f62

0801ef6c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801ef6c:	4b03      	ldr	r3, [pc, #12]	; (801ef7c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801ef6e:	6818      	ldr	r0, [r3, #0]
 801ef70:	b110      	cbz	r0, 801ef78 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801ef72:	6803      	ldr	r3, [r0, #0]
 801ef74:	69db      	ldr	r3, [r3, #28]
 801ef76:	4718      	bx	r3
 801ef78:	4770      	bx	lr
 801ef7a:	bf00      	nop
 801ef7c:	24027fb0 	.word	0x24027fb0

0801ef80 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ef80:	4b03      	ldr	r3, [pc, #12]	; (801ef90 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ef82:	6818      	ldr	r0, [r3, #0]
 801ef84:	b110      	cbz	r0, 801ef8c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ef86:	6803      	ldr	r3, [r0, #0]
 801ef88:	6a1b      	ldr	r3, [r3, #32]
 801ef8a:	4718      	bx	r3
 801ef8c:	4770      	bx	lr
 801ef8e:	bf00      	nop
 801ef90:	24027fb0 	.word	0x24027fb0

0801ef94 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801ef94:	2300      	movs	r3, #0
 801ef96:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801ef9a:	4770      	bx	lr

0801ef9c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ef9c:	4b03      	ldr	r3, [pc, #12]	; (801efac <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ef9e:	6818      	ldr	r0, [r3, #0]
 801efa0:	b110      	cbz	r0, 801efa8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801efa2:	6803      	ldr	r3, [r0, #0]
 801efa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801efa6:	4718      	bx	r3
 801efa8:	4770      	bx	lr
 801efaa:	bf00      	nop
 801efac:	24027fb0 	.word	0x24027fb0

0801efb0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801efb0:	b510      	push	{r4, lr}
 801efb2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801efb6:	888a      	ldrh	r2, [r1, #4]
 801efb8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801efbc:	4422      	add	r2, r4
 801efbe:	b212      	sxth	r2, r2
 801efc0:	4293      	cmp	r3, r2
 801efc2:	da15      	bge.n	801eff0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801efc4:	8882      	ldrh	r2, [r0, #4]
 801efc6:	4413      	add	r3, r2
 801efc8:	b21b      	sxth	r3, r3
 801efca:	429c      	cmp	r4, r3
 801efcc:	da10      	bge.n	801eff0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801efce:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801efd2:	88c9      	ldrh	r1, [r1, #6]
 801efd4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801efd8:	4419      	add	r1, r3
 801efda:	b209      	sxth	r1, r1
 801efdc:	428a      	cmp	r2, r1
 801efde:	da07      	bge.n	801eff0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801efe0:	88c0      	ldrh	r0, [r0, #6]
 801efe2:	4410      	add	r0, r2
 801efe4:	b200      	sxth	r0, r0
 801efe6:	4283      	cmp	r3, r0
 801efe8:	bfac      	ite	ge
 801efea:	2000      	movge	r0, #0
 801efec:	2001      	movlt	r0, #1
 801efee:	bd10      	pop	{r4, pc}
 801eff0:	2000      	movs	r0, #0
 801eff2:	e7fc      	b.n	801efee <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801eff4 <_ZN8touchgfx4Rect10restrictToEss>:
 801eff4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801eff8:	2b00      	cmp	r3, #0
 801effa:	b510      	push	{r4, lr}
 801effc:	da04      	bge.n	801f008 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801effe:	8884      	ldrh	r4, [r0, #4]
 801f000:	4423      	add	r3, r4
 801f002:	8083      	strh	r3, [r0, #4]
 801f004:	2300      	movs	r3, #0
 801f006:	8003      	strh	r3, [r0, #0]
 801f008:	f9b0 4000 	ldrsh.w	r4, [r0]
 801f00c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801f010:	1b09      	subs	r1, r1, r4
 801f012:	428b      	cmp	r3, r1
 801f014:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f018:	bfc8      	it	gt
 801f01a:	8081      	strhgt	r1, [r0, #4]
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	da04      	bge.n	801f02a <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801f020:	88c1      	ldrh	r1, [r0, #6]
 801f022:	440b      	add	r3, r1
 801f024:	80c3      	strh	r3, [r0, #6]
 801f026:	2300      	movs	r3, #0
 801f028:	8043      	strh	r3, [r0, #2]
 801f02a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801f02e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801f032:	1a52      	subs	r2, r2, r1
 801f034:	4293      	cmp	r3, r2
 801f036:	bfc8      	it	gt
 801f038:	80c2      	strhgt	r2, [r0, #6]
 801f03a:	bd10      	pop	{r4, pc}

0801f03c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801f03c:	4b10      	ldr	r3, [pc, #64]	; (801f080 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801f03e:	b510      	push	{r4, lr}
 801f040:	460c      	mov	r4, r1
 801f042:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f046:	4b0f      	ldr	r3, [pc, #60]	; (801f084 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801f048:	4620      	mov	r0, r4
 801f04a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f04e:	f7ff ffd1 	bl	801eff4 <_ZN8touchgfx4Rect10restrictToEss>
 801f052:	4b0d      	ldr	r3, [pc, #52]	; (801f088 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801f054:	6818      	ldr	r0, [r3, #0]
 801f056:	b190      	cbz	r0, 801f07e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801f058:	6803      	ldr	r3, [r0, #0]
 801f05a:	4621      	mov	r1, r4
 801f05c:	689b      	ldr	r3, [r3, #8]
 801f05e:	4798      	blx	r3
 801f060:	4b0a      	ldr	r3, [pc, #40]	; (801f08c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801f062:	6818      	ldr	r0, [r3, #0]
 801f064:	b118      	cbz	r0, 801f06e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801f066:	6803      	ldr	r3, [r0, #0]
 801f068:	4621      	mov	r1, r4
 801f06a:	689b      	ldr	r3, [r3, #8]
 801f06c:	4798      	blx	r3
 801f06e:	4b08      	ldr	r3, [pc, #32]	; (801f090 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801f070:	4621      	mov	r1, r4
 801f072:	6818      	ldr	r0, [r3, #0]
 801f074:	6803      	ldr	r3, [r0, #0]
 801f076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f07a:	69db      	ldr	r3, [r3, #28]
 801f07c:	4718      	bx	r3
 801f07e:	bd10      	pop	{r4, pc}
 801f080:	24027f62 	.word	0x24027f62
 801f084:	24027f60 	.word	0x24027f60
 801f088:	24027fb0 	.word	0x24027fb0
 801f08c:	24027fac 	.word	0x24027fac
 801f090:	24027f6c 	.word	0x24027f6c

0801f094 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801f094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f096:	4606      	mov	r6, r0
 801f098:	4608      	mov	r0, r1
 801f09a:	460f      	mov	r7, r1
 801f09c:	f7fb f91f 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801f0a0:	b9e8      	cbnz	r0, 801f0de <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801f0a2:	f9b7 5000 	ldrsh.w	r5, [r7]
 801f0a6:	f9b6 4000 	ldrsh.w	r4, [r6]
 801f0aa:	42a5      	cmp	r5, r4
 801f0ac:	db17      	blt.n	801f0de <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801f0ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801f0b2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801f0b6:	429a      	cmp	r2, r3
 801f0b8:	db11      	blt.n	801f0de <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801f0ba:	88b9      	ldrh	r1, [r7, #4]
 801f0bc:	440d      	add	r5, r1
 801f0be:	88b1      	ldrh	r1, [r6, #4]
 801f0c0:	440c      	add	r4, r1
 801f0c2:	b22d      	sxth	r5, r5
 801f0c4:	b224      	sxth	r4, r4
 801f0c6:	42a5      	cmp	r5, r4
 801f0c8:	dc09      	bgt.n	801f0de <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801f0ca:	88f8      	ldrh	r0, [r7, #6]
 801f0cc:	4410      	add	r0, r2
 801f0ce:	88f2      	ldrh	r2, [r6, #6]
 801f0d0:	4413      	add	r3, r2
 801f0d2:	b200      	sxth	r0, r0
 801f0d4:	b21b      	sxth	r3, r3
 801f0d6:	4298      	cmp	r0, r3
 801f0d8:	bfcc      	ite	gt
 801f0da:	2000      	movgt	r0, #0
 801f0dc:	2001      	movle	r0, #1
 801f0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f0e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801f0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0e2:	4604      	mov	r4, r0
 801f0e4:	4608      	mov	r0, r1
 801f0e6:	460d      	mov	r5, r1
 801f0e8:	f7fb f8f9 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801f0ec:	b978      	cbnz	r0, 801f10e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801f0ee:	4620      	mov	r0, r4
 801f0f0:	f7fb f8f5 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801f0f4:	f9b5 6000 	ldrsh.w	r6, [r5]
 801f0f8:	b150      	cbz	r0, 801f110 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801f0fa:	8026      	strh	r6, [r4, #0]
 801f0fc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801f100:	8063      	strh	r3, [r4, #2]
 801f102:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801f106:	80a3      	strh	r3, [r4, #4]
 801f108:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801f10c:	80e3      	strh	r3, [r4, #6]
 801f10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f110:	f9b4 1000 	ldrsh.w	r1, [r4]
 801f114:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801f118:	42b1      	cmp	r1, r6
 801f11a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801f11e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801f122:	460f      	mov	r7, r1
 801f124:	88ed      	ldrh	r5, [r5, #6]
 801f126:	bfa8      	it	ge
 801f128:	4637      	movge	r7, r6
 801f12a:	4293      	cmp	r3, r2
 801f12c:	4618      	mov	r0, r3
 801f12e:	4466      	add	r6, ip
 801f130:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801f134:	bfa8      	it	ge
 801f136:	4610      	movge	r0, r2
 801f138:	442a      	add	r2, r5
 801f13a:	88e5      	ldrh	r5, [r4, #6]
 801f13c:	4461      	add	r1, ip
 801f13e:	b236      	sxth	r6, r6
 801f140:	8027      	strh	r7, [r4, #0]
 801f142:	442b      	add	r3, r5
 801f144:	b209      	sxth	r1, r1
 801f146:	b212      	sxth	r2, r2
 801f148:	8060      	strh	r0, [r4, #2]
 801f14a:	b21b      	sxth	r3, r3
 801f14c:	428e      	cmp	r6, r1
 801f14e:	bfac      	ite	ge
 801f150:	ebc7 0106 	rsbge	r1, r7, r6
 801f154:	ebc7 0101 	rsblt	r1, r7, r1
 801f158:	429a      	cmp	r2, r3
 801f15a:	bfac      	ite	ge
 801f15c:	ebc0 0202 	rsbge	r2, r0, r2
 801f160:	ebc0 0203 	rsblt	r2, r0, r3
 801f164:	80a1      	strh	r1, [r4, #4]
 801f166:	80e2      	strh	r2, [r4, #6]
 801f168:	e7d1      	b.n	801f10e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801f16c <_ZN8touchgfx11Application11getInstanceEv>:
 801f16c:	4b01      	ldr	r3, [pc, #4]	; (801f174 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801f16e:	6818      	ldr	r0, [r3, #0]
 801f170:	4770      	bx	lr
 801f172:	bf00      	nop
 801f174:	24027fc0 	.word	0x24027fc0

0801f178 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801f178:	2300      	movs	r3, #0
 801f17a:	b510      	push	{r4, lr}
 801f17c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801f180:	4604      	mov	r4, r0
 801f182:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801f186:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801f18a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801f18e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801f192:	429a      	cmp	r2, r3
 801f194:	d90e      	bls.n	801f1b4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801f196:	18e2      	adds	r2, r4, r3
 801f198:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801f19c:	b122      	cbz	r2, 801f1a8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801f19e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801f1a2:	6803      	ldr	r3, [r0, #0]
 801f1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f1a6:	4798      	blx	r3
 801f1a8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801f1ac:	3301      	adds	r3, #1
 801f1ae:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801f1b2:	e7ea      	b.n	801f18a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801f1b4:	bd10      	pop	{r4, pc}

0801f1b6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801f1b6:	b530      	push	{r4, r5, lr}
 801f1b8:	2200      	movs	r2, #0
 801f1ba:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 801f1be:	b293      	uxth	r3, r2
 801f1c0:	429d      	cmp	r5, r3
 801f1c2:	d90e      	bls.n	801f1e2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801f1c4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801f1c8:	428b      	cmp	r3, r1
 801f1ca:	d10b      	bne.n	801f1e4 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801f1cc:	1884      	adds	r4, r0, r2
 801f1ce:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 801f1d2:	b13b      	cbz	r3, 801f1e4 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801f1d4:	3b01      	subs	r3, #1
 801f1d6:	b2db      	uxtb	r3, r3
 801f1d8:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 801f1dc:	b90b      	cbnz	r3, 801f1e2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801f1de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801f1e2:	bd30      	pop	{r4, r5, pc}
 801f1e4:	3201      	adds	r2, #1
 801f1e6:	e7ea      	b.n	801f1be <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801f1e8 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801f1e8:	2300      	movs	r3, #0
 801f1ea:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801f1ee:	30a4      	adds	r0, #164	; 0xa4
 801f1f0:	f820 3c24 	strh.w	r3, [r0, #-36]
 801f1f4:	f802 3b01 	strb.w	r3, [r2], #1
 801f1f8:	4282      	cmp	r2, r0
 801f1fa:	d1fb      	bne.n	801f1f4 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801f1fc:	4770      	bx	lr
	...

0801f200 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801f200:	b570      	push	{r4, r5, r6, lr}
 801f202:	4c0b      	ldr	r4, [pc, #44]	; (801f230 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801f204:	4605      	mov	r5, r0
 801f206:	460e      	mov	r6, r1
 801f208:	6820      	ldr	r0, [r4, #0]
 801f20a:	b110      	cbz	r0, 801f212 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801f20c:	6803      	ldr	r3, [r0, #0]
 801f20e:	695b      	ldr	r3, [r3, #20]
 801f210:	4798      	blx	r3
 801f212:	1d28      	adds	r0, r5, #4
 801f214:	f7ff ffe8 	bl	801f1e8 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801f218:	6026      	str	r6, [r4, #0]
 801f21a:	6833      	ldr	r3, [r6, #0]
 801f21c:	4630      	mov	r0, r6
 801f21e:	68db      	ldr	r3, [r3, #12]
 801f220:	4798      	blx	r3
 801f222:	682b      	ldr	r3, [r5, #0]
 801f224:	4628      	mov	r0, r5
 801f226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f22c:	4718      	bx	r3
 801f22e:	bf00      	nop
 801f230:	24027fb0 	.word	0x24027fb0

0801f234 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801f234:	2300      	movs	r3, #0
 801f236:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801f23a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801f23e:	461a      	mov	r2, r3
 801f240:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f242:	461c      	mov	r4, r3
 801f244:	461d      	mov	r5, r3
 801f246:	459c      	cmp	ip, r3
 801f248:	dd1a      	ble.n	801f280 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801f24a:	18c6      	adds	r6, r0, r3
 801f24c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801f250:	b16e      	cbz	r6, 801f26e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801f252:	429a      	cmp	r2, r3
 801f254:	d008      	beq.n	801f268 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801f256:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801f25a:	fa1f fe82 	uxth.w	lr, r2
 801f25e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801f262:	1887      	adds	r7, r0, r2
 801f264:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801f268:	3201      	adds	r2, #1
 801f26a:	3301      	adds	r3, #1
 801f26c:	e7eb      	b.n	801f246 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801f26e:	4299      	cmp	r1, r3
 801f270:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801f274:	bfa8      	it	ge
 801f276:	3501      	addge	r5, #1
 801f278:	429e      	cmp	r6, r3
 801f27a:	bfc8      	it	gt
 801f27c:	3401      	addgt	r4, #1
 801f27e:	e7f4      	b.n	801f26a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801f280:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801f284:	1b49      	subs	r1, r1, r5
 801f286:	1b1b      	subs	r3, r3, r4
 801f288:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801f28c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801f290:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801f294:	4293      	cmp	r3, r2
 801f296:	dd03      	ble.n	801f2a0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801f298:	3b01      	subs	r3, #1
 801f29a:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801f29e:	e7f7      	b.n	801f290 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801f2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801f2a4 <_ZN8touchgfx11Application15handleTickEventEv>:
 801f2a4:	b570      	push	{r4, r5, r6, lr}
 801f2a6:	4d16      	ldr	r5, [pc, #88]	; (801f300 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801f2a8:	4604      	mov	r4, r0
 801f2aa:	6828      	ldr	r0, [r5, #0]
 801f2ac:	b140      	cbz	r0, 801f2c0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801f2ae:	7a03      	ldrb	r3, [r0, #8]
 801f2b0:	b933      	cbnz	r3, 801f2c0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801f2b2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801f2b6:	6803      	ldr	r3, [r0, #0]
 801f2b8:	689b      	ldr	r3, [r3, #8]
 801f2ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f2be:	4718      	bx	r3
 801f2c0:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801f2c4:	4e0f      	ldr	r6, [pc, #60]	; (801f304 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801f2c6:	b973      	cbnz	r3, 801f2e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801f2c8:	b168      	cbz	r0, 801f2e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801f2ca:	7a03      	ldrb	r3, [r0, #8]
 801f2cc:	b15b      	cbz	r3, 801f2e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801f2ce:	6830      	ldr	r0, [r6, #0]
 801f2d0:	b110      	cbz	r0, 801f2d8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801f2d2:	6803      	ldr	r3, [r0, #0]
 801f2d4:	691b      	ldr	r3, [r3, #16]
 801f2d6:	4798      	blx	r3
 801f2d8:	6828      	ldr	r0, [r5, #0]
 801f2da:	6803      	ldr	r3, [r0, #0]
 801f2dc:	68db      	ldr	r3, [r3, #12]
 801f2de:	4798      	blx	r3
 801f2e0:	2301      	movs	r3, #1
 801f2e2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801f2e6:	3404      	adds	r4, #4
 801f2e8:	4620      	mov	r0, r4
 801f2ea:	f7ff ff45 	bl	801f178 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801f2ee:	4620      	mov	r0, r4
 801f2f0:	f7ff ffa0 	bl	801f234 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801f2f4:	6830      	ldr	r0, [r6, #0]
 801f2f6:	b110      	cbz	r0, 801f2fe <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801f2f8:	6803      	ldr	r3, [r0, #0]
 801f2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2fc:	e7dd      	b.n	801f2ba <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801f2fe:	bd70      	pop	{r4, r5, r6, pc}
 801f300:	24027fb4 	.word	0x24027fb4
 801f304:	24027fb0 	.word	0x24027fb0

0801f308 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801f308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f30a:	2300      	movs	r3, #0
 801f30c:	4604      	mov	r4, r0
 801f30e:	460d      	mov	r5, r1
 801f310:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 801f314:	4618      	mov	r0, r3
 801f316:	b29a      	uxth	r2, r3
 801f318:	4291      	cmp	r1, r2
 801f31a:	d912      	bls.n	801f342 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801f31c:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801f320:	18e6      	adds	r6, r4, r3
 801f322:	42af      	cmp	r7, r5
 801f324:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 801f328:	d105      	bne.n	801f336 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801f32a:	2aff      	cmp	r2, #255	; 0xff
 801f32c:	d002      	beq.n	801f334 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801f32e:	3201      	adds	r2, #1
 801f330:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 801f334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f336:	2a00      	cmp	r2, #0
 801f338:	f103 0301 	add.w	r3, r3, #1
 801f33c:	bf08      	it	eq
 801f33e:	2001      	moveq	r0, #1
 801f340:	e7e9      	b.n	801f316 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801f342:	b120      	cbz	r0, 801f34e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801f344:	2920      	cmp	r1, #32
 801f346:	d102      	bne.n	801f34e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801f348:	4620      	mov	r0, r4
 801f34a:	f7ff ff73 	bl	801f234 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801f34e:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 801f352:	2b1f      	cmp	r3, #31
 801f354:	d8ee      	bhi.n	801f334 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801f356:	18e2      	adds	r2, r4, r3
 801f358:	2101      	movs	r1, #1
 801f35a:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 801f35e:	185a      	adds	r2, r3, r1
 801f360:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 801f364:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801f368:	e7e4      	b.n	801f334 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801f36a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801f36a:	4603      	mov	r3, r0
 801f36c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801f370:	2200      	movs	r2, #0
 801f372:	801a      	strh	r2, [r3, #0]
 801f374:	3308      	adds	r3, #8
 801f376:	f823 2c06 	strh.w	r2, [r3, #-6]
 801f37a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801f37e:	f823 2c02 	strh.w	r2, [r3, #-2]
 801f382:	428b      	cmp	r3, r1
 801f384:	d1f5      	bne.n	801f372 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801f386:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801f38a:	4770      	bx	lr

0801f38c <_ZN8touchgfx11ApplicationC1Ev>:
 801f38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f38e:	4b1d      	ldr	r3, [pc, #116]	; (801f404 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801f390:	4606      	mov	r6, r0
 801f392:	4604      	mov	r4, r0
 801f394:	2500      	movs	r5, #0
 801f396:	f846 3b04 	str.w	r3, [r6], #4
 801f39a:	22a8      	movs	r2, #168	; 0xa8
 801f39c:	2100      	movs	r1, #0
 801f39e:	4630      	mov	r0, r6
 801f3a0:	f00b fce2 	bl	802ad68 <memset>
 801f3a4:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801f3a8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801f3ac:	4f16      	ldr	r7, [pc, #88]	; (801f408 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801f3ae:	f7ff ffdc 	bl	801f36a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f3b2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801f3b6:	f7ff ffd8 	bl	801f36a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f3ba:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801f3be:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801f3c2:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801f3c6:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801f3ca:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801f3ce:	490f      	ldr	r1, [pc, #60]	; (801f40c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801f3d0:	480f      	ldr	r0, [pc, #60]	; (801f410 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801f3d2:	f00a fe33 	bl	802a03c <CRC_Lock>
 801f3d6:	4b0f      	ldr	r3, [pc, #60]	; (801f414 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801f3d8:	b158      	cbz	r0, 801f3f2 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801f3da:	801d      	strh	r5, [r3, #0]
 801f3dc:	2300      	movs	r3, #0
 801f3de:	4a0e      	ldr	r2, [pc, #56]	; (801f418 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801f3e0:	4630      	mov	r0, r6
 801f3e2:	6013      	str	r3, [r2, #0]
 801f3e4:	4a0d      	ldr	r2, [pc, #52]	; (801f41c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801f3e6:	603b      	str	r3, [r7, #0]
 801f3e8:	6013      	str	r3, [r2, #0]
 801f3ea:	f7ff fefd 	bl	801f1e8 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801f3ee:	4620      	mov	r0, r4
 801f3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f3f6:	2002      	movs	r0, #2
 801f3f8:	801a      	strh	r2, [r3, #0]
 801f3fa:	6038      	str	r0, [r7, #0]
 801f3fc:	f001 fac6 	bl	802098c <_ZN8touchgfx6Screen4drawEv>
 801f400:	e7ec      	b.n	801f3dc <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801f402:	bf00      	nop
 801f404:	0802fcec 	.word	0x0802fcec
 801f408:	24027fb0 	.word	0x24027fb0
 801f40c:	b5e8b5cd 	.word	0xb5e8b5cd
 801f410:	f407a5c2 	.word	0xf407a5c2
 801f414:	24000068 	.word	0x24000068
 801f418:	24027fc0 	.word	0x24027fc0
 801f41c:	24027fb4 	.word	0x24027fb4

0801f420 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801f420:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801f424:	3b01      	subs	r3, #1
 801f426:	b29b      	uxth	r3, r3
 801f428:	428b      	cmp	r3, r1
 801f42a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801f42e:	b510      	push	{r4, lr}
 801f430:	d908      	bls.n	801f444 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801f432:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801f436:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801f43a:	681a      	ldr	r2, [r3, #0]
 801f43c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801f440:	685a      	ldr	r2, [r3, #4]
 801f442:	6062      	str	r2, [r4, #4]
 801f444:	bd10      	pop	{r4, pc}
	...

0801f448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f44c:	b08f      	sub	sp, #60	; 0x3c
 801f44e:	4b8f      	ldr	r3, [pc, #572]	; (801f68c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801f450:	4683      	mov	fp, r0
 801f452:	ac0a      	add	r4, sp, #40	; 0x28
 801f454:	e884 0006 	stmia.w	r4, {r1, r2}
 801f458:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f45c:	4620      	mov	r0, r4
 801f45e:	4b8c      	ldr	r3, [pc, #560]	; (801f690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801f460:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f464:	f7ff fdc6 	bl	801eff4 <_ZN8touchgfx4Rect10restrictToEss>
 801f468:	4620      	mov	r0, r4
 801f46a:	f7fa ff38 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801f46e:	2800      	cmp	r0, #0
 801f470:	d16a      	bne.n	801f548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801f472:	9403      	str	r4, [sp, #12]
 801f474:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801f478:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801f47c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801f480:	9301      	str	r3, [sp, #4]
 801f482:	35a4      	adds	r5, #164	; 0xa4
 801f484:	b15c      	cbz	r4, 801f49e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801f486:	4629      	mov	r1, r5
 801f488:	9803      	ldr	r0, [sp, #12]
 801f48a:	f7ff fe03 	bl	801f094 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f48e:	3c01      	subs	r4, #1
 801f490:	b118      	cbz	r0, 801f49a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801f492:	b2a1      	uxth	r1, r4
 801f494:	9801      	ldr	r0, [sp, #4]
 801f496:	f7ff ffc3 	bl	801f420 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f49a:	3d08      	subs	r5, #8
 801f49c:	e7f2      	b.n	801f484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801f49e:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801f4a2:	f108 33ff 	add.w	r3, r8, #4294967295
 801f4a6:	f8cd 8010 	str.w	r8, [sp, #16]
 801f4aa:	9302      	str	r3, [sp, #8]
 801f4ac:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801f4b0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801f4b4:	9306      	str	r3, [sp, #24]
 801f4b6:	445c      	add	r4, fp
 801f4b8:	2500      	movs	r5, #0
 801f4ba:	4626      	mov	r6, r4
 801f4bc:	f8cd 8014 	str.w	r8, [sp, #20]
 801f4c0:	462f      	mov	r7, r5
 801f4c2:	9b05      	ldr	r3, [sp, #20]
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d073      	beq.n	801f5b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801f4c8:	9903      	ldr	r1, [sp, #12]
 801f4ca:	4630      	mov	r0, r6
 801f4cc:	f7ff fd70 	bl	801efb0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f4d0:	b350      	cbz	r0, 801f528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801f4d2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801f4d6:	f9b6 c000 	ldrsh.w	ip, [r6]
 801f4da:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801f4de:	45e6      	cmp	lr, ip
 801f4e0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801f4e4:	db33      	blt.n	801f54e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801f4e6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801f4ea:	88b3      	ldrh	r3, [r6, #4]
 801f4ec:	4472      	add	r2, lr
 801f4ee:	4463      	add	r3, ip
 801f4f0:	b212      	sxth	r2, r2
 801f4f2:	b21b      	sxth	r3, r3
 801f4f4:	429a      	cmp	r2, r3
 801f4f6:	dc2a      	bgt.n	801f54e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801f4f8:	fa1f f289 	uxth.w	r2, r9
 801f4fc:	88f3      	ldrh	r3, [r6, #6]
 801f4fe:	45ca      	cmp	sl, r9
 801f500:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f504:	4413      	add	r3, r2
 801f506:	fa1f fc8a 	uxth.w	ip, sl
 801f50a:	b29b      	uxth	r3, r3
 801f50c:	fa0f fe83 	sxth.w	lr, r3
 801f510:	db0f      	blt.n	801f532 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801f512:	eba3 030c 	sub.w	r3, r3, ip
 801f516:	1ac9      	subs	r1, r1, r3
 801f518:	b209      	sxth	r1, r1
 801f51a:	2900      	cmp	r1, #0
 801f51c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801f520:	dd12      	ble.n	801f548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801f522:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801f526:	4605      	mov	r5, r0
 801f528:	9b05      	ldr	r3, [sp, #20]
 801f52a:	3e08      	subs	r6, #8
 801f52c:	3b01      	subs	r3, #1
 801f52e:	9305      	str	r3, [sp, #20]
 801f530:	e7c7      	b.n	801f4c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801f532:	4461      	add	r1, ip
 801f534:	b209      	sxth	r1, r1
 801f536:	4571      	cmp	r1, lr
 801f538:	dc38      	bgt.n	801f5ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801f53a:	eba2 020c 	sub.w	r2, r2, ip
 801f53e:	b212      	sxth	r2, r2
 801f540:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801f544:	2a00      	cmp	r2, #0
 801f546:	dcee      	bgt.n	801f526 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801f548:	b00f      	add	sp, #60	; 0x3c
 801f54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f54e:	45ca      	cmp	sl, r9
 801f550:	db2c      	blt.n	801f5ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801f552:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801f556:	449a      	add	sl, r3
 801f558:	88f3      	ldrh	r3, [r6, #6]
 801f55a:	4499      	add	r9, r3
 801f55c:	fa0f fa8a 	sxth.w	sl, sl
 801f560:	fa0f f989 	sxth.w	r9, r9
 801f564:	45ca      	cmp	sl, r9
 801f566:	dc21      	bgt.n	801f5ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801f568:	fa1f f28c 	uxth.w	r2, ip
 801f56c:	88b3      	ldrh	r3, [r6, #4]
 801f56e:	45e6      	cmp	lr, ip
 801f570:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f574:	4413      	add	r3, r2
 801f576:	fa1f f98e 	uxth.w	r9, lr
 801f57a:	b29b      	uxth	r3, r3
 801f57c:	fa0f fa83 	sxth.w	sl, r3
 801f580:	db0a      	blt.n	801f598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801f582:	eba3 0309 	sub.w	r3, r3, r9
 801f586:	1ac9      	subs	r1, r1, r3
 801f588:	b209      	sxth	r1, r1
 801f58a:	2900      	cmp	r1, #0
 801f58c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801f590:	ddda      	ble.n	801f548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801f592:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801f596:	e7c6      	b.n	801f526 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801f598:	4449      	add	r1, r9
 801f59a:	b209      	sxth	r1, r1
 801f59c:	4551      	cmp	r1, sl
 801f59e:	dc05      	bgt.n	801f5ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801f5a0:	eba2 0209 	sub.w	r2, r2, r9
 801f5a4:	b212      	sxth	r2, r2
 801f5a6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801f5aa:	e7cb      	b.n	801f544 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801f5ac:	4607      	mov	r7, r0
 801f5ae:	e7bb      	b.n	801f528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801f5b0:	2d00      	cmp	r5, #0
 801f5b2:	d181      	bne.n	801f4b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801f5b4:	2f00      	cmp	r7, #0
 801f5b6:	f000 81dd 	beq.w	801f974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801f5ba:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801f5be:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801f5c2:	b2b3      	uxth	r3, r6
 801f5c4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801f5c8:	b2b9      	uxth	r1, r7
 801f5ca:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801f5ce:	441a      	add	r2, r3
 801f5d0:	448a      	add	sl, r1
 801f5d2:	9105      	str	r1, [sp, #20]
 801f5d4:	b292      	uxth	r2, r2
 801f5d6:	fa1f fa8a 	uxth.w	sl, sl
 801f5da:	fa0f f882 	sxth.w	r8, r2
 801f5de:	fa0f f98a 	sxth.w	r9, sl
 801f5e2:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801f5e6:	9b04      	ldr	r3, [sp, #16]
 801f5e8:	2b00      	cmp	r3, #0
 801f5ea:	d053      	beq.n	801f694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801f5ec:	9903      	ldr	r1, [sp, #12]
 801f5ee:	4620      	mov	r0, r4
 801f5f0:	f7ff fcde 	bl	801efb0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f5f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f5f8:	b1c0      	cbz	r0, 801f62c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801f5fa:	f9b4 e000 	ldrsh.w	lr, [r4]
 801f5fe:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f602:	4576      	cmp	r6, lr
 801f604:	dc23      	bgt.n	801f64e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801f606:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801f60a:	44f4      	add	ip, lr
 801f60c:	fa0f fc8c 	sxth.w	ip, ip
 801f610:	45e0      	cmp	r8, ip
 801f612:	db1c      	blt.n	801f64e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801f614:	428f      	cmp	r7, r1
 801f616:	fa1f fc81 	uxth.w	ip, r1
 801f61a:	88e1      	ldrh	r1, [r4, #6]
 801f61c:	dc0d      	bgt.n	801f63a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801f61e:	ebaa 0c0c 	sub.w	ip, sl, ip
 801f622:	f8a4 9002 	strh.w	r9, [r4, #2]
 801f626:	eba1 010c 	sub.w	r1, r1, ip
 801f62a:	80e1      	strh	r1, [r4, #6]
 801f62c:	4628      	mov	r0, r5
 801f62e:	9904      	ldr	r1, [sp, #16]
 801f630:	3c08      	subs	r4, #8
 801f632:	4605      	mov	r5, r0
 801f634:	3901      	subs	r1, #1
 801f636:	9104      	str	r1, [sp, #16]
 801f638:	e7d3      	b.n	801f5e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801f63a:	4461      	add	r1, ip
 801f63c:	b209      	sxth	r1, r1
 801f63e:	4549      	cmp	r1, r9
 801f640:	dcf5      	bgt.n	801f62e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801f642:	9905      	ldr	r1, [sp, #20]
 801f644:	eba1 0c0c 	sub.w	ip, r1, ip
 801f648:	f8a4 c006 	strh.w	ip, [r4, #6]
 801f64c:	e7ee      	b.n	801f62c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801f64e:	428f      	cmp	r7, r1
 801f650:	dced      	bgt.n	801f62e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801f652:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801f656:	4461      	add	r1, ip
 801f658:	b209      	sxth	r1, r1
 801f65a:	4589      	cmp	r9, r1
 801f65c:	dbe7      	blt.n	801f62e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801f65e:	4576      	cmp	r6, lr
 801f660:	fa1f fc8e 	uxth.w	ip, lr
 801f664:	88a1      	ldrh	r1, [r4, #4]
 801f666:	dc07      	bgt.n	801f678 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801f668:	eba2 0c0c 	sub.w	ip, r2, ip
 801f66c:	f8a4 8000 	strh.w	r8, [r4]
 801f670:	eba1 010c 	sub.w	r1, r1, ip
 801f674:	80a1      	strh	r1, [r4, #4]
 801f676:	e7d9      	b.n	801f62c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801f678:	4461      	add	r1, ip
 801f67a:	b209      	sxth	r1, r1
 801f67c:	4588      	cmp	r8, r1
 801f67e:	dbd6      	blt.n	801f62e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801f680:	eba3 0c0c 	sub.w	ip, r3, ip
 801f684:	f8a4 c004 	strh.w	ip, [r4, #4]
 801f688:	e7d0      	b.n	801f62c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801f68a:	bf00      	nop
 801f68c:	24027f62 	.word	0x24027f62
 801f690:	24027f60 	.word	0x24027f60
 801f694:	2d00      	cmp	r5, #0
 801f696:	f000 816d 	beq.w	801f974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801f69a:	9b06      	ldr	r3, [sp, #24]
 801f69c:	445b      	add	r3, fp
 801f69e:	461c      	mov	r4, r3
 801f6a0:	9b02      	ldr	r3, [sp, #8]
 801f6a2:	3301      	adds	r3, #1
 801f6a4:	f000 8166 	beq.w	801f974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801f6a8:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801f6ac:	9803      	ldr	r0, [sp, #12]
 801f6ae:	4629      	mov	r1, r5
 801f6b0:	f7ff fcf0 	bl	801f094 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f6b4:	b120      	cbz	r0, 801f6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801f6b6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f6ba:	9801      	ldr	r0, [sp, #4]
 801f6bc:	f7ff feb0 	bl	801f420 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f6c0:	9903      	ldr	r1, [sp, #12]
 801f6c2:	4628      	mov	r0, r5
 801f6c4:	f7ff fc74 	bl	801efb0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f6c8:	2800      	cmp	r0, #0
 801f6ca:	f000 809c 	beq.w	801f806 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801f6ce:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801f6d2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801f6d6:	fa1f f189 	uxth.w	r1, r9
 801f6da:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801f6de:	9309      	str	r3, [sp, #36]	; 0x24
 801f6e0:	eb01 0c03 	add.w	ip, r1, r3
 801f6e4:	b283      	uxth	r3, r0
 801f6e6:	4548      	cmp	r0, r9
 801f6e8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801f6ec:	fa1f fa8c 	uxth.w	sl, ip
 801f6f0:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801f6f4:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801f6f8:	eb03 050c 	add.w	r5, r3, ip
 801f6fc:	b2ad      	uxth	r5, r5
 801f6fe:	9505      	str	r5, [sp, #20]
 801f700:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801f704:	9504      	str	r5, [sp, #16]
 801f706:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801f70a:	f340 8099 	ble.w	801f840 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801f70e:	1a5b      	subs	r3, r3, r1
 801f710:	4596      	cmp	lr, r2
 801f712:	fa0f f08a 	sxth.w	r0, sl
 801f716:	b29b      	uxth	r3, r3
 801f718:	b21e      	sxth	r6, r3
 801f71a:	dd2e      	ble.n	801f77a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801f71c:	9f02      	ldr	r7, [sp, #8]
 801f71e:	fa1f fe8e 	uxth.w	lr, lr
 801f722:	b292      	uxth	r2, r2
 801f724:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801f728:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801f72c:	9f04      	ldr	r7, [sp, #16]
 801f72e:	ebae 0102 	sub.w	r1, lr, r2
 801f732:	44a6      	add	lr, r4
 801f734:	1a3f      	subs	r7, r7, r0
 801f736:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801f73a:	b289      	uxth	r1, r1
 801f73c:	4402      	add	r2, r0
 801f73e:	fa0f fe8e 	sxth.w	lr, lr
 801f742:	b20d      	sxth	r5, r1
 801f744:	b212      	sxth	r2, r2
 801f746:	436f      	muls	r7, r5
 801f748:	ebae 0202 	sub.w	r2, lr, r2
 801f74c:	4372      	muls	r2, r6
 801f74e:	4297      	cmp	r7, r2
 801f750:	db09      	blt.n	801f766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801f752:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801f756:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801f75a:	449c      	add	ip, r3
 801f75c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f760:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801f764:	e686      	b.n	801f474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801f766:	4421      	add	r1, r4
 801f768:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801f76c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801f770:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801f774:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f778:	e67c      	b.n	801f474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801f77a:	9f04      	ldr	r7, [sp, #16]
 801f77c:	42b8      	cmp	r0, r7
 801f77e:	da27      	bge.n	801f7d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801f780:	9902      	ldr	r1, [sp, #8]
 801f782:	1a3f      	subs	r7, r7, r0
 801f784:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801f788:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801f78c:	eb05 010e 	add.w	r1, r5, lr
 801f790:	fa1f f881 	uxth.w	r8, r1
 801f794:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801f798:	4411      	add	r1, r2
 801f79a:	fa0f f988 	sxth.w	r9, r8
 801f79e:	eba2 020e 	sub.w	r2, r2, lr
 801f7a2:	eba1 0108 	sub.w	r1, r1, r8
 801f7a6:	4372      	muls	r2, r6
 801f7a8:	b289      	uxth	r1, r1
 801f7aa:	fa0f f881 	sxth.w	r8, r1
 801f7ae:	fb08 f707 	mul.w	r7, r8, r7
 801f7b2:	42ba      	cmp	r2, r7
 801f7b4:	dc06      	bgt.n	801f7c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801f7b6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801f7ba:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801f7be:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801f7c2:	e7ca      	b.n	801f75a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801f7c4:	4429      	add	r1, r5
 801f7c6:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801f7ca:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801f7ce:	e651      	b.n	801f474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801f7d0:	9805      	ldr	r0, [sp, #20]
 801f7d2:	2d06      	cmp	r5, #6
 801f7d4:	ebaa 0000 	sub.w	r0, sl, r0
 801f7d8:	b280      	uxth	r0, r0
 801f7da:	fa0f fe80 	sxth.w	lr, r0
 801f7de:	d817      	bhi.n	801f810 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801f7e0:	9b04      	ldr	r3, [sp, #16]
 801f7e2:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801f7e6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801f7ea:	1c6b      	adds	r3, r5, #1
 801f7ec:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801f7f0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801f7f4:	9b01      	ldr	r3, [sp, #4]
 801f7f6:	9801      	ldr	r0, [sp, #4]
 801f7f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f7fc:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801f800:	805a      	strh	r2, [r3, #2]
 801f802:	809e      	strh	r6, [r3, #4]
 801f804:	80d9      	strh	r1, [r3, #6]
 801f806:	9b02      	ldr	r3, [sp, #8]
 801f808:	3c08      	subs	r4, #8
 801f80a:	3b01      	subs	r3, #1
 801f80c:	9302      	str	r3, [sp, #8]
 801f80e:	e747      	b.n	801f6a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801f810:	9a02      	ldr	r2, [sp, #8]
 801f812:	45b6      	cmp	lr, r6
 801f814:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801f818:	db0d      	blt.n	801f836 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801f81a:	449c      	add	ip, r3
 801f81c:	445a      	add	r2, fp
 801f81e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801f822:	fa1f fc8c 	uxth.w	ip, ip
 801f826:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801f82a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801f82e:	448c      	add	ip, r1
 801f830:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801f834:	e61e      	b.n	801f474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801f836:	445a      	add	r2, fp
 801f838:	4484      	add	ip, r0
 801f83a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801f83e:	e78f      	b.n	801f760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801f840:	fa1f f18e 	uxth.w	r1, lr
 801f844:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801f848:	b293      	uxth	r3, r2
 801f84a:	4596      	cmp	lr, r2
 801f84c:	eb01 0806 	add.w	r8, r1, r6
 801f850:	9306      	str	r3, [sp, #24]
 801f852:	fa1f f888 	uxth.w	r8, r8
 801f856:	9f06      	ldr	r7, [sp, #24]
 801f858:	fa0f f388 	sxth.w	r3, r8
 801f85c:	9307      	str	r3, [sp, #28]
 801f85e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801f862:	443b      	add	r3, r7
 801f864:	b29b      	uxth	r3, r3
 801f866:	9308      	str	r3, [sp, #32]
 801f868:	da24      	bge.n	801f8b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801f86a:	9905      	ldr	r1, [sp, #20]
 801f86c:	eba3 0308 	sub.w	r3, r3, r8
 801f870:	eba2 020e 	sub.w	r2, r2, lr
 801f874:	eba9 0000 	sub.w	r0, r9, r0
 801f878:	ebaa 0401 	sub.w	r4, sl, r1
 801f87c:	b29b      	uxth	r3, r3
 801f87e:	b2a4      	uxth	r4, r4
 801f880:	b219      	sxth	r1, r3
 801f882:	b225      	sxth	r5, r4
 801f884:	4348      	muls	r0, r1
 801f886:	436a      	muls	r2, r5
 801f888:	4282      	cmp	r2, r0
 801f88a:	9a02      	ldr	r2, [sp, #8]
 801f88c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801f890:	445a      	add	r2, fp
 801f892:	dc06      	bgt.n	801f8a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801f894:	9b07      	ldr	r3, [sp, #28]
 801f896:	44a4      	add	ip, r4
 801f898:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801f89c:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801f8a0:	e75e      	b.n	801f760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801f8a2:	9904      	ldr	r1, [sp, #16]
 801f8a4:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801f8a8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801f8ac:	4433      	add	r3, r6
 801f8ae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f8b2:	e5df      	b.n	801f474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801f8b4:	9f06      	ldr	r7, [sp, #24]
 801f8b6:	9b04      	ldr	r3, [sp, #16]
 801f8b8:	1bc9      	subs	r1, r1, r7
 801f8ba:	fa0f f78a 	sxth.w	r7, sl
 801f8be:	b289      	uxth	r1, r1
 801f8c0:	429f      	cmp	r7, r3
 801f8c2:	fa0f fe81 	sxth.w	lr, r1
 801f8c6:	dd23      	ble.n	801f910 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801f8c8:	9a05      	ldr	r2, [sp, #20]
 801f8ca:	eba9 0000 	sub.w	r0, r9, r0
 801f8ce:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801f8d2:	ebaa 0202 	sub.w	r2, sl, r2
 801f8d6:	9d07      	ldr	r5, [sp, #28]
 801f8d8:	fb0e f000 	mul.w	r0, lr, r0
 801f8dc:	b292      	uxth	r2, r2
 801f8de:	eba5 0a03 	sub.w	sl, r5, r3
 801f8e2:	9b02      	ldr	r3, [sp, #8]
 801f8e4:	b214      	sxth	r4, r2
 801f8e6:	00db      	lsls	r3, r3, #3
 801f8e8:	fb04 fa0a 	mul.w	sl, r4, sl
 801f8ec:	445b      	add	r3, fp
 801f8ee:	4550      	cmp	r0, sl
 801f8f0:	db03      	blt.n	801f8fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801f8f2:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801f8f6:	4494      	add	ip, r2
 801f8f8:	e732      	b.n	801f760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801f8fa:	9a04      	ldr	r2, [sp, #16]
 801f8fc:	4431      	add	r1, r6
 801f8fe:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801f902:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801f906:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801f90a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f90e:	e75c      	b.n	801f7ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801f910:	9b08      	ldr	r3, [sp, #32]
 801f912:	2d06      	cmp	r5, #6
 801f914:	eba3 0308 	sub.w	r3, r3, r8
 801f918:	b29b      	uxth	r3, r3
 801f91a:	b218      	sxth	r0, r3
 801f91c:	d813      	bhi.n	801f946 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801f91e:	9b07      	ldr	r3, [sp, #28]
 801f920:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801f924:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801f928:	1c6b      	adds	r3, r5, #1
 801f92a:	9901      	ldr	r1, [sp, #4]
 801f92c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801f930:	9b01      	ldr	r3, [sp, #4]
 801f932:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801f936:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f93a:	805a      	strh	r2, [r3, #2]
 801f93c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f93e:	f8a3 e006 	strh.w	lr, [r3, #6]
 801f942:	809a      	strh	r2, [r3, #4]
 801f944:	e75f      	b.n	801f806 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801f946:	9c02      	ldr	r4, [sp, #8]
 801f948:	4570      	cmp	r0, lr
 801f94a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801f94e:	db0d      	blt.n	801f96c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801f950:	4431      	add	r1, r6
 801f952:	9b06      	ldr	r3, [sp, #24]
 801f954:	445c      	add	r4, fp
 801f956:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801f95a:	b289      	uxth	r1, r1
 801f95c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801f960:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801f964:	4419      	add	r1, r3
 801f966:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801f96a:	e583      	b.n	801f474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801f96c:	445c      	add	r4, fp
 801f96e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801f972:	e79b      	b.n	801f8ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801f974:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801f978:	2e07      	cmp	r6, #7
 801f97a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801f97e:	d812      	bhi.n	801f9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 801f980:	1c75      	adds	r5, r6, #1
 801f982:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801f986:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801f98a:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801f98e:	9d01      	ldr	r5, [sp, #4]
 801f990:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801f994:	442c      	add	r4, r5
 801f996:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801f99a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801f99e:	8061      	strh	r1, [r4, #2]
 801f9a0:	80a2      	strh	r2, [r4, #4]
 801f9a2:	80e3      	strh	r3, [r4, #6]
 801f9a4:	e5d0      	b.n	801f548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801f9a6:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801f9aa:	3e01      	subs	r6, #1
 801f9ac:	445c      	add	r4, fp
 801f9ae:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801f9b2:	f04f 37ff 	mov.w	r7, #4294967295
 801f9b6:	2500      	movs	r5, #0
 801f9b8:	9305      	str	r3, [sp, #20]
 801f9ba:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801f9be:	1e72      	subs	r2, r6, #1
 801f9c0:	9302      	str	r3, [sp, #8]
 801f9c2:	4691      	mov	r9, r2
 801f9c4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801f9c8:	9304      	str	r3, [sp, #16]
 801f9ca:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801f9ce:	f1b9 3fff 	cmp.w	r9, #4294967295
 801f9d2:	6818      	ldr	r0, [r3, #0]
 801f9d4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801f9d8:	9207      	str	r2, [sp, #28]
 801f9da:	bf16      	itet	ne
 801f9dc:	9905      	ldrne	r1, [sp, #20]
 801f9de:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801f9e2:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801f9e6:	9306      	str	r3, [sp, #24]
 801f9e8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801f9ec:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801f9f0:	fb18 f801 	smulbb	r8, r8, r1
 801f9f4:	6859      	ldr	r1, [r3, #4]
 801f9f6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801f9fa:	4671      	mov	r1, lr
 801f9fc:	a80c      	add	r0, sp, #48	; 0x30
 801f9fe:	f7ff fb6f 	bl	801f0e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801fa02:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801fa06:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801fa0a:	f04f 0c08 	mov.w	ip, #8
 801fa0e:	9b04      	ldr	r3, [sp, #16]
 801fa10:	9a02      	ldr	r2, [sp, #8]
 801fa12:	fb10 f001 	smulbb	r0, r0, r1
 801fa16:	fb02 8803 	mla	r8, r2, r3, r8
 801fa1a:	eba0 0108 	sub.w	r1, r0, r8
 801fa1e:	fb90 f0fc 	sdiv	r0, r0, ip
 801fa22:	4288      	cmp	r0, r1
 801fa24:	dc20      	bgt.n	801fa68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801fa26:	4551      	cmp	r1, sl
 801fa28:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801fa2c:	da03      	bge.n	801fa36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801fa2e:	b1d9      	cbz	r1, 801fa68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801fa30:	468a      	mov	sl, r1
 801fa32:	464f      	mov	r7, r9
 801fa34:	4635      	mov	r5, r6
 801fa36:	f109 39ff 	add.w	r9, r9, #4294967295
 801fa3a:	f119 0f02 	cmn.w	r9, #2
 801fa3e:	d1c6      	bne.n	801f9ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801fa40:	4616      	mov	r6, r2
 801fa42:	3201      	adds	r2, #1
 801fa44:	f1a4 0408 	sub.w	r4, r4, #8
 801fa48:	d1b7      	bne.n	801f9ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801fa4a:	9b01      	ldr	r3, [sp, #4]
 801fa4c:	b2ac      	uxth	r4, r5
 801fa4e:	00ed      	lsls	r5, r5, #3
 801fa50:	1958      	adds	r0, r3, r5
 801fa52:	1c7b      	adds	r3, r7, #1
 801fa54:	d10b      	bne.n	801fa6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801fa56:	4601      	mov	r1, r0
 801fa58:	9803      	ldr	r0, [sp, #12]
 801fa5a:	f7ff fb41 	bl	801f0e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801fa5e:	4621      	mov	r1, r4
 801fa60:	9801      	ldr	r0, [sp, #4]
 801fa62:	f7ff fcdd 	bl	801f420 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801fa66:	e505      	b.n	801f474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801fa68:	464f      	mov	r7, r9
 801fa6a:	4635      	mov	r5, r6
 801fa6c:	e7ed      	b.n	801fa4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801fa6e:	9b01      	ldr	r3, [sp, #4]
 801fa70:	00ff      	lsls	r7, r7, #3
 801fa72:	445d      	add	r5, fp
 801fa74:	19d9      	adds	r1, r3, r7
 801fa76:	445f      	add	r7, fp
 801fa78:	f7ff fb32 	bl	801f0e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801fa7c:	9b03      	ldr	r3, [sp, #12]
 801fa7e:	cb03      	ldmia	r3!, {r0, r1}
 801fa80:	9b03      	ldr	r3, [sp, #12]
 801fa82:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801fa86:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801fa8a:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801fa8e:	6869      	ldr	r1, [r5, #4]
 801fa90:	c303      	stmia	r3!, {r0, r1}
 801fa92:	e7e4      	b.n	801fa5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0801fa94 <_ZN8touchgfx11Application10invalidateEv>:
 801fa94:	4b09      	ldr	r3, [pc, #36]	; (801fabc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801fa96:	b082      	sub	sp, #8
 801fa98:	2100      	movs	r1, #0
 801fa9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fa9e:	4b08      	ldr	r3, [pc, #32]	; (801fac0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801faa0:	9100      	str	r1, [sp, #0]
 801faa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801faa6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801faaa:	f8ad 3006 	strh.w	r3, [sp, #6]
 801faae:	ab02      	add	r3, sp, #8
 801fab0:	e913 0006 	ldmdb	r3, {r1, r2}
 801fab4:	b002      	add	sp, #8
 801fab6:	f7ff bcc7 	b.w	801f448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801faba:	bf00      	nop
 801fabc:	24027f60 	.word	0x24027f60
 801fac0:	24027f62 	.word	0x24027f62

0801fac4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801fac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fac8:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801facc:	b09b      	sub	sp, #108	; 0x6c
 801face:	4604      	mov	r4, r0
 801fad0:	4630      	mov	r0, r6
 801fad2:	f7fa fc04 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801fad6:	4605      	mov	r5, r0
 801fad8:	b940      	cbnz	r0, 801faec <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801fada:	4620      	mov	r0, r4
 801fadc:	e896 0006 	ldmia.w	r6, {r1, r2}
 801fae0:	f7ff fcb2 	bl	801f448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801fae4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801fae8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801faec:	4bc8      	ldr	r3, [pc, #800]	; (801fe10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	2b00      	cmp	r3, #0
 801faf2:	d03e      	beq.n	801fb72 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801faf4:	4dc7      	ldr	r5, [pc, #796]	; (801fe14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801faf6:	4628      	mov	r0, r5
 801faf8:	f7fa fbf1 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801fafc:	4606      	mov	r6, r0
 801fafe:	2800      	cmp	r0, #0
 801fb00:	d137      	bne.n	801fb72 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801fb02:	4628      	mov	r0, r5
 801fb04:	f7ff f986 	bl	801ee14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801fb08:	6829      	ldr	r1, [r5, #0]
 801fb0a:	686a      	ldr	r2, [r5, #4]
 801fb0c:	4620      	mov	r0, r4
 801fb0e:	f7ff fc9b 	bl	801f448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801fb12:	802e      	strh	r6, [r5, #0]
 801fb14:	806e      	strh	r6, [r5, #2]
 801fb16:	80ae      	strh	r6, [r5, #4]
 801fb18:	80ee      	strh	r6, [r5, #6]
 801fb1a:	ae09      	add	r6, sp, #36	; 0x24
 801fb1c:	4630      	mov	r0, r6
 801fb1e:	f7ff fc24 	bl	801f36a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801fb22:	4abd      	ldr	r2, [pc, #756]	; (801fe18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801fb24:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801fb28:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801fb2c:	8815      	ldrh	r5, [r2, #0]
 801fb2e:	9202      	str	r2, [sp, #8]
 801fb30:	462b      	mov	r3, r5
 801fb32:	429f      	cmp	r7, r3
 801fb34:	d924      	bls.n	801fb80 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801fb36:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801fb3a:	2907      	cmp	r1, #7
 801fb3c:	d816      	bhi.n	801fb6c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801fb3e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801fb42:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801fb46:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801fb4a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801fb4e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801fb52:	1c4a      	adds	r2, r1, #1
 801fb54:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801fb58:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801fb5c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801fb60:	f8a2 9002 	strh.w	r9, [r2, #2]
 801fb64:	f8a2 e004 	strh.w	lr, [r2, #4]
 801fb68:	f8a2 c006 	strh.w	ip, [r2, #6]
 801fb6c:	3301      	adds	r3, #1
 801fb6e:	b29b      	uxth	r3, r3
 801fb70:	e7df      	b.n	801fb32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801fb72:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	d1cf      	bne.n	801fb1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801fb7a:	b01b      	add	sp, #108	; 0x6c
 801fb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb80:	462f      	mov	r7, r5
 801fb82:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801fb86:	42bb      	cmp	r3, r7
 801fb88:	d90b      	bls.n	801fba2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801fb8a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801fb8e:	3701      	adds	r7, #1
 801fb90:	4620      	mov	r0, r4
 801fb92:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801fb96:	b2bf      	uxth	r7, r7
 801fb98:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801fb9c:	f7ff fc54 	bl	801f448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801fba0:	e7ef      	b.n	801fb82 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801fba2:	4a9e      	ldr	r2, [pc, #632]	; (801fe1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801fba4:	6813      	ldr	r3, [r2, #0]
 801fba6:	4690      	mov	r8, r2
 801fba8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801fbac:	2b01      	cmp	r3, #1
 801fbae:	f040 80e4 	bne.w	801fd7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801fbb2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801fbb6:	4629      	mov	r1, r5
 801fbb8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801fbbc:	2500      	movs	r5, #0
 801fbbe:	33ae      	adds	r3, #174	; 0xae
 801fbc0:	428f      	cmp	r7, r1
 801fbc2:	f103 0308 	add.w	r3, r3, #8
 801fbc6:	dd0a      	ble.n	801fbde <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801fbc8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801fbcc:	3101      	adds	r1, #1
 801fbce:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801fbd2:	4402      	add	r2, r0
 801fbd4:	b212      	sxth	r2, r2
 801fbd6:	4295      	cmp	r5, r2
 801fbd8:	bfb8      	it	lt
 801fbda:	4615      	movlt	r5, r2
 801fbdc:	e7f0      	b.n	801fbc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801fbde:	4b90      	ldr	r3, [pc, #576]	; (801fe20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801fbe0:	f8df b238 	ldr.w	fp, [pc, #568]	; 801fe1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801fbe4:	881b      	ldrh	r3, [r3, #0]
 801fbe6:	46d8      	mov	r8, fp
 801fbe8:	2b0f      	cmp	r3, #15
 801fbea:	bf8c      	ite	hi
 801fbec:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801fbf0:	f04f 0a01 	movls.w	sl, #1
 801fbf4:	2300      	movs	r3, #0
 801fbf6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801fbfa:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801fbfe:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801fc02:	4438      	add	r0, r7
 801fc04:	b207      	sxth	r7, r0
 801fc06:	f8db 0000 	ldr.w	r0, [fp]
 801fc0a:	42bd      	cmp	r5, r7
 801fc0c:	6803      	ldr	r3, [r0, #0]
 801fc0e:	f340 8084 	ble.w	801fd1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801fc12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801fc16:	4798      	blx	r3
 801fc18:	eb07 030a 	add.w	r3, r7, sl
 801fc1c:	4298      	cmp	r0, r3
 801fc1e:	da07      	bge.n	801fc30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801fc20:	4285      	cmp	r5, r0
 801fc22:	dd05      	ble.n	801fc30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801fc24:	4287      	cmp	r7, r0
 801fc26:	dd6d      	ble.n	801fd04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801fc28:	2f00      	cmp	r7, #0
 801fc2a:	dd6b      	ble.n	801fd04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801fc2c:	4628      	mov	r0, r5
 801fc2e:	e004      	b.n	801fc3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801fc30:	4287      	cmp	r7, r0
 801fc32:	dcfb      	bgt.n	801fc2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801fc34:	42a8      	cmp	r0, r5
 801fc36:	bfa8      	it	ge
 801fc38:	4628      	movge	r0, r5
 801fc3a:	4b7a      	ldr	r3, [pc, #488]	; (801fe24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801fc3c:	1bc0      	subs	r0, r0, r7
 801fc3e:	2200      	movs	r2, #0
 801fc40:	f8ad 7016 	strh.w	r7, [sp, #22]
 801fc44:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fc48:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fc4c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801fc50:	9b02      	ldr	r3, [sp, #8]
 801fc52:	f8ad 001a 	strh.w	r0, [sp, #26]
 801fc56:	881f      	ldrh	r7, [r3, #0]
 801fc58:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801fc5c:	42bb      	cmp	r3, r7
 801fc5e:	d9cc      	bls.n	801fbfa <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801fc60:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801fc64:	ab07      	add	r3, sp, #28
 801fc66:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801fc6a:	6851      	ldr	r1, [r2, #4]
 801fc6c:	c303      	stmia	r3!, {r0, r1}
 801fc6e:	a905      	add	r1, sp, #20
 801fc70:	a807      	add	r0, sp, #28
 801fc72:	f7ff f99d 	bl	801efb0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801fc76:	2800      	cmp	r0, #0
 801fc78:	d04c      	beq.n	801fd14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801fc7a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801fc7e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801fc82:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801fc86:	4686      	mov	lr, r0
 801fc88:	4290      	cmp	r0, r2
 801fc8a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801fc8e:	4448      	add	r0, r9
 801fc90:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801fc94:	bfb8      	it	lt
 801fc96:	4696      	movlt	lr, r2
 801fc98:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801fc9c:	444a      	add	r2, r9
 801fc9e:	b280      	uxth	r0, r0
 801fca0:	4299      	cmp	r1, r3
 801fca2:	468c      	mov	ip, r1
 801fca4:	b292      	uxth	r2, r2
 801fca6:	9303      	str	r3, [sp, #12]
 801fca8:	bfb8      	it	lt
 801fcaa:	469c      	movlt	ip, r3
 801fcac:	b203      	sxth	r3, r0
 801fcae:	fa0f f982 	sxth.w	r9, r2
 801fcb2:	f8ad e01c 	strh.w	lr, [sp, #28]
 801fcb6:	f8ad c01e 	strh.w	ip, [sp, #30]
 801fcba:	454b      	cmp	r3, r9
 801fcbc:	bfb8      	it	lt
 801fcbe:	4602      	movlt	r2, r0
 801fcc0:	9b03      	ldr	r3, [sp, #12]
 801fcc2:	eba2 020e 	sub.w	r2, r2, lr
 801fcc6:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fcca:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801fcce:	4411      	add	r1, r2
 801fcd0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801fcd4:	4413      	add	r3, r2
 801fcd6:	b289      	uxth	r1, r1
 801fcd8:	b29b      	uxth	r3, r3
 801fcda:	b208      	sxth	r0, r1
 801fcdc:	b21a      	sxth	r2, r3
 801fcde:	4290      	cmp	r0, r2
 801fce0:	bfb8      	it	lt
 801fce2:	460b      	movlt	r3, r1
 801fce4:	eba3 030c 	sub.w	r3, r3, ip
 801fce8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801fcec:	a807      	add	r0, sp, #28
 801fcee:	f7fa faf6 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801fcf2:	b920      	cbnz	r0, 801fcfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801fcf4:	6823      	ldr	r3, [r4, #0]
 801fcf6:	a907      	add	r1, sp, #28
 801fcf8:	4620      	mov	r0, r4
 801fcfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fcfc:	4798      	blx	r3
 801fcfe:	3701      	adds	r7, #1
 801fd00:	b2bf      	uxth	r7, r7
 801fd02:	e7a9      	b.n	801fc58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801fd04:	f8d8 0000 	ldr.w	r0, [r8]
 801fd08:	2101      	movs	r1, #1
 801fd0a:	6803      	ldr	r3, [r0, #0]
 801fd0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801fd10:	4798      	blx	r3
 801fd12:	e772      	b.n	801fbfa <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801fd14:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801fd18:	e7e8      	b.n	801fcec <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801fd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd1c:	4798      	blx	r3
 801fd1e:	4b42      	ldr	r3, [pc, #264]	; (801fe28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801fd20:	781b      	ldrb	r3, [r3, #0]
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	f43f af29 	beq.w	801fb7a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801fd28:	2300      	movs	r3, #0
 801fd2a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801fd2e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801fd32:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801fd36:	9b02      	ldr	r3, [sp, #8]
 801fd38:	881b      	ldrh	r3, [r3, #0]
 801fd3a:	429d      	cmp	r5, r3
 801fd3c:	f67f af1d 	bls.w	801fb7a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801fd40:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801fd44:	2907      	cmp	r1, #7
 801fd46:	d815      	bhi.n	801fd74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801fd48:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801fd4c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801fd50:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801fd54:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801fd58:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801fd5c:	1c4a      	adds	r2, r1, #1
 801fd5e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801fd62:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801fd66:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801fd6a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801fd6e:	f8a2 c004 	strh.w	ip, [r2, #4]
 801fd72:	80d7      	strh	r7, [r2, #6]
 801fd74:	3301      	adds	r3, #1
 801fd76:	b29b      	uxth	r3, r3
 801fd78:	e7df      	b.n	801fd3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801fd7a:	2b02      	cmp	r3, #2
 801fd7c:	f040 8135 	bne.w	801ffea <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801fd80:	4b2a      	ldr	r3, [pc, #168]	; (801fe2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801fd82:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801fd86:	781b      	ldrb	r3, [r3, #0]
 801fd88:	2b01      	cmp	r3, #1
 801fd8a:	f000 809c 	beq.w	801fec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801fd8e:	9b02      	ldr	r3, [sp, #8]
 801fd90:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801fd94:	f8b3 b000 	ldrh.w	fp, [r3]
 801fd98:	f10b 0b01 	add.w	fp, fp, #1
 801fd9c:	fa1f fb8b 	uxth.w	fp, fp
 801fda0:	2a00      	cmp	r2, #0
 801fda2:	d0bc      	beq.n	801fd1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801fda4:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801fda8:	4659      	mov	r1, fp
 801fdaa:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801fdae:	f04f 0800 	mov.w	r8, #0
 801fdb2:	441d      	add	r5, r3
 801fdb4:	b22d      	sxth	r5, r5
 801fdb6:	b28b      	uxth	r3, r1
 801fdb8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801fdbc:	429a      	cmp	r2, r3
 801fdbe:	f240 80c0 	bls.w	801ff42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801fdc2:	4427      	add	r7, r4
 801fdc4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801fdc8:	4608      	mov	r0, r1
 801fdca:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801fdce:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 801fdd2:	4563      	cmp	r3, ip
 801fdd4:	f340 80a2 	ble.w	801ff1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801fdd8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 801fddc:	4465      	add	r5, ip
 801fdde:	b22d      	sxth	r5, r5
 801fde0:	429d      	cmp	r5, r3
 801fde2:	bfa8      	it	ge
 801fde4:	461d      	movge	r5, r3
 801fde6:	3101      	adds	r1, #1
 801fde8:	4680      	mov	r8, r0
 801fdea:	e7e4      	b.n	801fdb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801fdec:	d10b      	bne.n	801fe06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801fdee:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801fdf2:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801fdf6:	458c      	cmp	ip, r1
 801fdf8:	bfb4      	ite	lt
 801fdfa:	469c      	movlt	ip, r3
 801fdfc:	46bc      	movge	ip, r7
 801fdfe:	4572      	cmp	r2, lr
 801fe00:	bfb8      	it	lt
 801fe02:	4672      	movlt	r2, lr
 801fe04:	e087      	b.n	801ff16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801fe06:	428a      	cmp	r2, r1
 801fe08:	46bc      	mov	ip, r7
 801fe0a:	bfb8      	it	lt
 801fe0c:	460a      	movlt	r2, r1
 801fe0e:	e082      	b.n	801ff16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801fe10:	24027fac 	.word	0x24027fac
 801fe14:	24027fb8 	.word	0x24027fb8
 801fe18:	24000068 	.word	0x24000068
 801fe1c:	24027f6c 	.word	0x24027f6c
 801fe20:	24027f62 	.word	0x24027f62
 801fe24:	24027f60 	.word	0x24027f60
 801fe28:	24027f6a 	.word	0x24027f6a
 801fe2c:	24027f64 	.word	0x24027f64
 801fe30:	1961      	adds	r1, r4, r5
 801fe32:	ab07      	add	r3, sp, #28
 801fe34:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801fe38:	6849      	ldr	r1, [r1, #4]
 801fe3a:	c303      	stmia	r3!, {r0, r1}
 801fe3c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801fe40:	a807      	add	r0, sp, #28
 801fe42:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fe46:	2b13      	cmp	r3, #19
 801fe48:	440b      	add	r3, r1
 801fe4a:	bfd8      	it	le
 801fe4c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801fe50:	1a9b      	subs	r3, r3, r2
 801fe52:	f8ad 201c 	strh.w	r2, [sp, #28]
 801fe56:	f8ad 3020 	strh.w	r3, [sp, #32]
 801fe5a:	f7fe fff5 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe5e:	a807      	add	r0, sp, #28
 801fe60:	f7fa fa3d 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801fe64:	bb78      	cbnz	r0, 801fec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801fe66:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801fe6a:	4425      	add	r5, r4
 801fe6c:	f8d8 0000 	ldr.w	r0, [r8]
 801fe70:	f1bc 0f14 	cmp.w	ip, #20
 801fe74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801fe78:	f8d0 e000 	ldr.w	lr, [r0]
 801fe7c:	bfa8      	it	ge
 801fe7e:	f04f 0c14 	movge.w	ip, #20
 801fe82:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801fe86:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fe8a:	fa1f fc8c 	uxth.w	ip, ip
 801fe8e:	f8cd c000 	str.w	ip, [sp]
 801fe92:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801fe96:	47d0      	blx	sl
 801fe98:	4682      	mov	sl, r0
 801fe9a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801fe9e:	a807      	add	r0, sp, #28
 801fea0:	f7fe ffb8 	bl	801ee14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801fea4:	6823      	ldr	r3, [r4, #0]
 801fea6:	4620      	mov	r0, r4
 801fea8:	a907      	add	r1, sp, #28
 801feaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801feac:	4798      	blx	r3
 801feae:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801feb2:	eba0 000a 	sub.w	r0, r0, sl
 801feb6:	b200      	sxth	r0, r0
 801feb8:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801febc:	b918      	cbnz	r0, 801fec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801febe:	b2b9      	uxth	r1, r7
 801fec0:	4648      	mov	r0, r9
 801fec2:	f7ff faad 	bl	801f420 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801fec6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801feca:	f1bb 0f00 	cmp.w	fp, #0
 801fece:	f43f af26 	beq.w	801fd1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801fed2:	9b02      	ldr	r3, [sp, #8]
 801fed4:	2700      	movs	r7, #0
 801fed6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801feda:	881b      	ldrh	r3, [r3, #0]
 801fedc:	3301      	adds	r3, #1
 801fede:	b29b      	uxth	r3, r3
 801fee0:	b299      	uxth	r1, r3
 801fee2:	00fd      	lsls	r5, r7, #3
 801fee4:	458b      	cmp	fp, r1
 801fee6:	d9a3      	bls.n	801fe30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801fee8:	4425      	add	r5, r4
 801feea:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801feee:	469c      	mov	ip, r3
 801fef0:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801fef4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801fef8:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801fefc:	4408      	add	r0, r1
 801fefe:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801ff02:	4471      	add	r1, lr
 801ff04:	b200      	sxth	r0, r0
 801ff06:	b209      	sxth	r1, r1
 801ff08:	4288      	cmp	r0, r1
 801ff0a:	f6bf af6f 	bge.w	801fdec <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801ff0e:	4586      	cmp	lr, r0
 801ff10:	4672      	mov	r2, lr
 801ff12:	bfb8      	it	lt
 801ff14:	4602      	movlt	r2, r0
 801ff16:	3301      	adds	r3, #1
 801ff18:	4667      	mov	r7, ip
 801ff1a:	e7e1      	b.n	801fee0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801ff1c:	d10c      	bne.n	801ff38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801ff1e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801ff22:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801ff26:	4287      	cmp	r7, r0
 801ff28:	bfb4      	ite	lt
 801ff2a:	4608      	movlt	r0, r1
 801ff2c:	4640      	movge	r0, r8
 801ff2e:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801ff32:	443b      	add	r3, r7
 801ff34:	b21b      	sxth	r3, r3
 801ff36:	e753      	b.n	801fde0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801ff38:	4565      	cmp	r5, ip
 801ff3a:	4640      	mov	r0, r8
 801ff3c:	bfa8      	it	ge
 801ff3e:	4665      	movge	r5, ip
 801ff40:	e751      	b.n	801fde6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801ff42:	eb09 0007 	add.w	r0, r9, r7
 801ff46:	4427      	add	r7, r4
 801ff48:	9203      	str	r2, [sp, #12]
 801ff4a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801ff4e:	f1ba 0f13 	cmp.w	sl, #19
 801ff52:	bfde      	ittt	le
 801ff54:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801ff58:	4455      	addle	r5, sl
 801ff5a:	b22d      	sxthle	r5, r5
 801ff5c:	f7fa f9bf 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 801ff60:	9a03      	ldr	r2, [sp, #12]
 801ff62:	2800      	cmp	r0, #0
 801ff64:	f47f af1c 	bne.w	801fda0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801ff68:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801ff6c:	fa1f fa8a 	uxth.w	sl, sl
 801ff70:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ff74:	1aad      	subs	r5, r5, r2
 801ff76:	4829      	ldr	r0, [pc, #164]	; (802001c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801ff78:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801ff7c:	2d14      	cmp	r5, #20
 801ff7e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801ff82:	6800      	ldr	r0, [r0, #0]
 801ff84:	bfa8      	it	ge
 801ff86:	2514      	movge	r5, #20
 801ff88:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ff8c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801ff90:	b289      	uxth	r1, r1
 801ff92:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ff96:	b2ad      	uxth	r5, r5
 801ff98:	f8d0 c000 	ldr.w	ip, [r0]
 801ff9c:	b292      	uxth	r2, r2
 801ff9e:	4555      	cmp	r5, sl
 801ffa0:	bf94      	ite	ls
 801ffa2:	9500      	strls	r5, [sp, #0]
 801ffa4:	f8cd a000 	strhi.w	sl, [sp]
 801ffa8:	b29b      	uxth	r3, r3
 801ffaa:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801ffae:	47a8      	blx	r5
 801ffb0:	6823      	ldr	r3, [r4, #0]
 801ffb2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ffb6:	a907      	add	r1, sp, #28
 801ffb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ffba:	4620      	mov	r0, r4
 801ffbc:	4798      	blx	r3
 801ffbe:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ffc2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ffc6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801ffca:	1a5b      	subs	r3, r3, r1
 801ffcc:	440a      	add	r2, r1
 801ffce:	b21b      	sxth	r3, r3
 801ffd0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801ffd4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	f47f aed8 	bne.w	801fd8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801ffde:	fa1f f188 	uxth.w	r1, r8
 801ffe2:	4648      	mov	r0, r9
 801ffe4:	f7ff fa1c 	bl	801f420 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ffe8:	e6d1      	b.n	801fd8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801ffea:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801ffee:	42ab      	cmp	r3, r5
 801fff0:	f67f ae95 	bls.w	801fd1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801fff4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801fff8:	ab07      	add	r3, sp, #28
 801fffa:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801fffe:	6851      	ldr	r1, [r2, #4]
 8020000:	c303      	stmia	r3!, {r0, r1}
 8020002:	a807      	add	r0, sp, #28
 8020004:	f7fa f96b 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 8020008:	b920      	cbnz	r0, 8020014 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 802000a:	6823      	ldr	r3, [r4, #0]
 802000c:	a907      	add	r1, sp, #28
 802000e:	4620      	mov	r0, r4
 8020010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020012:	4798      	blx	r3
 8020014:	3501      	adds	r5, #1
 8020016:	b2ad      	uxth	r5, r5
 8020018:	e7e7      	b.n	801ffea <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 802001a:	bf00      	nop
 802001c:	24027f6c 	.word	0x24027f6c

08020020 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8020020:	4b03      	ldr	r3, [pc, #12]	; (8020030 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8020022:	2200      	movs	r2, #0
 8020024:	801a      	strh	r2, [r3, #0]
 8020026:	805a      	strh	r2, [r3, #2]
 8020028:	809a      	strh	r2, [r3, #4]
 802002a:	80da      	strh	r2, [r3, #6]
 802002c:	4770      	bx	lr
 802002e:	bf00      	nop
 8020030:	24027fb8 	.word	0x24027fb8

08020034 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8020034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020038:	b09d      	sub	sp, #116	; 0x74
 802003a:	4606      	mov	r6, r0
 802003c:	4614      	mov	r4, r2
 802003e:	468a      	mov	sl, r1
 8020040:	a803      	add	r0, sp, #12
 8020042:	461d      	mov	r5, r3
 8020044:	f000 fe4b 	bl	8020cde <_ZN8touchgfx12TextProviderC1Ev>
 8020048:	6833      	ldr	r3, [r6, #0]
 802004a:	4630      	mov	r0, r6
 802004c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8020050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020052:	4798      	blx	r3
 8020054:	6833      	ldr	r3, [r6, #0]
 8020056:	4607      	mov	r7, r0
 8020058:	4630      	mov	r0, r6
 802005a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802005c:	4798      	blx	r3
 802005e:	462a      	mov	r2, r5
 8020060:	2500      	movs	r5, #0
 8020062:	4621      	mov	r1, r4
 8020064:	9000      	str	r0, [sp, #0]
 8020066:	463b      	mov	r3, r7
 8020068:	462c      	mov	r4, r5
 802006a:	46a9      	mov	r9, r5
 802006c:	46a8      	mov	r8, r5
 802006e:	a803      	add	r0, sp, #12
 8020070:	f000 fe88 	bl	8020d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8020074:	2300      	movs	r3, #0
 8020076:	9302      	str	r3, [sp, #8]
 8020078:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 802007c:	429c      	cmp	r4, r3
 802007e:	d002      	beq.n	8020086 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8020080:	455c      	cmp	r4, fp
 8020082:	bf18      	it	ne
 8020084:	4625      	movne	r5, r4
 8020086:	ab02      	add	r3, sp, #8
 8020088:	4632      	mov	r2, r6
 802008a:	4651      	mov	r1, sl
 802008c:	a803      	add	r0, sp, #12
 802008e:	f001 f96d 	bl	802136c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8020092:	4604      	mov	r4, r0
 8020094:	b108      	cbz	r0, 802009a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8020096:	280a      	cmp	r0, #10
 8020098:	d10a      	bne.n	80200b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 802009a:	45c1      	cmp	r9, r8
 802009c:	bf38      	it	cc
 802009e:	46c1      	movcc	r9, r8
 80200a0:	f04f 0800 	mov.w	r8, #0
 80200a4:	2c00      	cmp	r4, #0
 80200a6:	d1e5      	bne.n	8020074 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80200a8:	4648      	mov	r0, r9
 80200aa:	b01d      	add	sp, #116	; 0x74
 80200ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200b0:	9a02      	ldr	r2, [sp, #8]
 80200b2:	2a00      	cmp	r2, #0
 80200b4:	d0de      	beq.n	8020074 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80200b6:	7b57      	ldrb	r7, [r2, #13]
 80200b8:	4629      	mov	r1, r5
 80200ba:	6833      	ldr	r3, [r6, #0]
 80200bc:	007f      	lsls	r7, r7, #1
 80200be:	8894      	ldrh	r4, [r2, #4]
 80200c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80200c2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80200c6:	7a97      	ldrb	r7, [r2, #10]
 80200c8:	4307      	orrs	r7, r0
 80200ca:	4630      	mov	r0, r6
 80200cc:	4798      	blx	r3
 80200ce:	4438      	add	r0, r7
 80200d0:	4480      	add	r8, r0
 80200d2:	fa1f f888 	uxth.w	r8, r8
 80200d6:	e7e5      	b.n	80200a4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080200d8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80200d8:	b508      	push	{r3, lr}
 80200da:	6803      	ldr	r3, [r0, #0]
 80200dc:	68db      	ldr	r3, [r3, #12]
 80200de:	4798      	blx	r3
 80200e0:	b128      	cbz	r0, 80200ee <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80200e2:	7b43      	ldrb	r3, [r0, #13]
 80200e4:	7a80      	ldrb	r0, [r0, #10]
 80200e6:	005b      	lsls	r3, r3, #1
 80200e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80200ec:	4318      	orrs	r0, r3
 80200ee:	bd08      	pop	{r3, pc}

080200f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80200f0:	b40e      	push	{r1, r2, r3}
 80200f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80200f4:	b09e      	sub	sp, #120	; 0x78
 80200f6:	4605      	mov	r5, r0
 80200f8:	ab23      	add	r3, sp, #140	; 0x8c
 80200fa:	a805      	add	r0, sp, #20
 80200fc:	f853 4b04 	ldr.w	r4, [r3], #4
 8020100:	9303      	str	r3, [sp, #12]
 8020102:	f000 fdec 	bl	8020cde <_ZN8touchgfx12TextProviderC1Ev>
 8020106:	682b      	ldr	r3, [r5, #0]
 8020108:	4628      	mov	r0, r5
 802010a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802010c:	4798      	blx	r3
 802010e:	682b      	ldr	r3, [r5, #0]
 8020110:	4606      	mov	r6, r0
 8020112:	4628      	mov	r0, r5
 8020114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020116:	4798      	blx	r3
 8020118:	4633      	mov	r3, r6
 802011a:	4621      	mov	r1, r4
 802011c:	ae1e      	add	r6, sp, #120	; 0x78
 802011e:	2400      	movs	r4, #0
 8020120:	9000      	str	r0, [sp, #0]
 8020122:	9a03      	ldr	r2, [sp, #12]
 8020124:	a805      	add	r0, sp, #20
 8020126:	f000 fe2d 	bl	8020d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 802012a:	f846 4d68 	str.w	r4, [r6, #-104]!
 802012e:	462a      	mov	r2, r5
 8020130:	4633      	mov	r3, r6
 8020132:	4621      	mov	r1, r4
 8020134:	a805      	add	r0, sp, #20
 8020136:	f001 f919 	bl	802136c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 802013a:	b300      	cbz	r0, 802017e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 802013c:	280a      	cmp	r0, #10
 802013e:	d01a      	beq.n	8020176 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8020140:	9f04      	ldr	r7, [sp, #16]
 8020142:	b1c7      	cbz	r7, 8020176 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8020144:	7b78      	ldrb	r0, [r7, #13]
 8020146:	7a3b      	ldrb	r3, [r7, #8]
 8020148:	00c1      	lsls	r1, r0, #3
 802014a:	88ea      	ldrh	r2, [r5, #6]
 802014c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020150:	4319      	orrs	r1, r3
 8020152:	0643      	lsls	r3, r0, #25
 8020154:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8020158:	bf48      	it	mi
 802015a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 802015e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8020162:	bf48      	it	mi
 8020164:	b219      	sxthmi	r1, r3
 8020166:	79fb      	ldrb	r3, [r7, #7]
 8020168:	4303      	orrs	r3, r0
 802016a:	4413      	add	r3, r2
 802016c:	1a5b      	subs	r3, r3, r1
 802016e:	b21b      	sxth	r3, r3
 8020170:	429c      	cmp	r4, r3
 8020172:	bfb8      	it	lt
 8020174:	461c      	movlt	r4, r3
 8020176:	4633      	mov	r3, r6
 8020178:	462a      	mov	r2, r5
 802017a:	2100      	movs	r1, #0
 802017c:	e7da      	b.n	8020134 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 802017e:	b2a0      	uxth	r0, r4
 8020180:	b01e      	add	sp, #120	; 0x78
 8020182:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020186:	b003      	add	sp, #12
 8020188:	4770      	bx	lr

0802018a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 802018a:	7a43      	ldrb	r3, [r0, #9]
 802018c:	8880      	ldrh	r0, [r0, #4]
 802018e:	4418      	add	r0, r3
 8020190:	b280      	uxth	r0, r0
 8020192:	4770      	bx	lr

08020194 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8020194:	6803      	ldr	r3, [r0, #0]
 8020196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020198:	4718      	bx	r3

0802019a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 802019a:	b40e      	push	{r1, r2, r3}
 802019c:	b570      	push	{r4, r5, r6, lr}
 802019e:	b09d      	sub	sp, #116	; 0x74
 80201a0:	4604      	mov	r4, r0
 80201a2:	ab21      	add	r3, sp, #132	; 0x84
 80201a4:	a803      	add	r0, sp, #12
 80201a6:	f853 5b04 	ldr.w	r5, [r3], #4
 80201aa:	9302      	str	r3, [sp, #8]
 80201ac:	f000 fd97 	bl	8020cde <_ZN8touchgfx12TextProviderC1Ev>
 80201b0:	6823      	ldr	r3, [r4, #0]
 80201b2:	4620      	mov	r0, r4
 80201b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80201b6:	4798      	blx	r3
 80201b8:	6823      	ldr	r3, [r4, #0]
 80201ba:	4606      	mov	r6, r0
 80201bc:	4620      	mov	r0, r4
 80201be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80201c0:	2401      	movs	r4, #1
 80201c2:	4798      	blx	r3
 80201c4:	4633      	mov	r3, r6
 80201c6:	9000      	str	r0, [sp, #0]
 80201c8:	4629      	mov	r1, r5
 80201ca:	9a02      	ldr	r2, [sp, #8]
 80201cc:	a803      	add	r0, sp, #12
 80201ce:	f000 fdd9 	bl	8020d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80201d2:	a803      	add	r0, sp, #12
 80201d4:	f001 f94a 	bl	802146c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80201d8:	b2a3      	uxth	r3, r4
 80201da:	b138      	cbz	r0, 80201ec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80201dc:	280a      	cmp	r0, #10
 80201de:	a803      	add	r0, sp, #12
 80201e0:	bf04      	itt	eq
 80201e2:	3301      	addeq	r3, #1
 80201e4:	b21c      	sxtheq	r4, r3
 80201e6:	f001 f941 	bl	802146c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80201ea:	e7f5      	b.n	80201d8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80201ec:	4618      	mov	r0, r3
 80201ee:	b01d      	add	sp, #116	; 0x74
 80201f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80201f4:	b003      	add	sp, #12
 80201f6:	4770      	bx	lr

080201f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80201f8:	b40e      	push	{r1, r2, r3}
 80201fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80201fc:	b09e      	sub	sp, #120	; 0x78
 80201fe:	4604      	mov	r4, r0
 8020200:	ab23      	add	r3, sp, #140	; 0x8c
 8020202:	a805      	add	r0, sp, #20
 8020204:	f853 5b04 	ldr.w	r5, [r3], #4
 8020208:	9303      	str	r3, [sp, #12]
 802020a:	f000 fd68 	bl	8020cde <_ZN8touchgfx12TextProviderC1Ev>
 802020e:	6823      	ldr	r3, [r4, #0]
 8020210:	4620      	mov	r0, r4
 8020212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020214:	4798      	blx	r3
 8020216:	6823      	ldr	r3, [r4, #0]
 8020218:	4606      	mov	r6, r0
 802021a:	4620      	mov	r0, r4
 802021c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802021e:	4798      	blx	r3
 8020220:	4633      	mov	r3, r6
 8020222:	4629      	mov	r1, r5
 8020224:	9000      	str	r0, [sp, #0]
 8020226:	9a03      	ldr	r2, [sp, #12]
 8020228:	a805      	add	r0, sp, #20
 802022a:	f000 fdab 	bl	8020d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 802022e:	ad1e      	add	r5, sp, #120	; 0x78
 8020230:	2100      	movs	r1, #0
 8020232:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8020236:	4622      	mov	r2, r4
 8020238:	a805      	add	r0, sp, #20
 802023a:	f845 1d68 	str.w	r1, [r5, #-104]!
 802023e:	462b      	mov	r3, r5
 8020240:	f001 f894 	bl	802136c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8020244:	b1d8      	cbz	r0, 802027e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8020246:	280a      	cmp	r0, #10
 8020248:	d012      	beq.n	8020270 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 802024a:	9804      	ldr	r0, [sp, #16]
 802024c:	b180      	cbz	r0, 8020270 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 802024e:	7b47      	ldrb	r7, [r0, #13]
 8020250:	88e2      	ldrh	r2, [r4, #6]
 8020252:	00fb      	lsls	r3, r7, #3
 8020254:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8020258:	7a03      	ldrb	r3, [r0, #8]
 802025a:	430b      	orrs	r3, r1
 802025c:	0679      	lsls	r1, r7, #25
 802025e:	bf44      	itt	mi
 8020260:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020264:	b21b      	sxthmi	r3, r3
 8020266:	1ad3      	subs	r3, r2, r3
 8020268:	b21b      	sxth	r3, r3
 802026a:	429e      	cmp	r6, r3
 802026c:	bfa8      	it	ge
 802026e:	461e      	movge	r6, r3
 8020270:	462b      	mov	r3, r5
 8020272:	4622      	mov	r2, r4
 8020274:	2100      	movs	r1, #0
 8020276:	a805      	add	r0, sp, #20
 8020278:	f001 f878 	bl	802136c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 802027c:	e7e2      	b.n	8020244 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 802027e:	4630      	mov	r0, r6
 8020280:	b01e      	add	sp, #120	; 0x78
 8020282:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020286:	b003      	add	sp, #12
 8020288:	4770      	bx	lr

0802028a <_ZNK8touchgfx8Drawable10invalidateEv>:
 802028a:	b513      	push	{r0, r1, r4, lr}
 802028c:	6803      	ldr	r3, [r0, #0]
 802028e:	2400      	movs	r4, #0
 8020290:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8020294:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020298:	f8ad 1004 	strh.w	r1, [sp, #4]
 802029c:	4669      	mov	r1, sp
 802029e:	691b      	ldr	r3, [r3, #16]
 80202a0:	9400      	str	r4, [sp, #0]
 80202a2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80202a6:	4798      	blx	r3
 80202a8:	b002      	add	sp, #8
 80202aa:	bd10      	pop	{r4, pc}

080202ac <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80202ac:	b538      	push	{r3, r4, r5, lr}
 80202ae:	680b      	ldr	r3, [r1, #0]
 80202b0:	460c      	mov	r4, r1
 80202b2:	4605      	mov	r5, r0
 80202b4:	68db      	ldr	r3, [r3, #12]
 80202b6:	4798      	blx	r3
 80202b8:	6823      	ldr	r3, [r4, #0]
 80202ba:	4620      	mov	r0, r4
 80202bc:	4629      	mov	r1, r5
 80202be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80202c0:	4798      	blx	r3
 80202c2:	4628      	mov	r0, r5
 80202c4:	bd38      	pop	{r3, r4, r5, pc}

080202c6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80202c6:	b410      	push	{r4}
 80202c8:	880a      	ldrh	r2, [r1, #0]
 80202ca:	8884      	ldrh	r4, [r0, #4]
 80202cc:	4422      	add	r2, r4
 80202ce:	800a      	strh	r2, [r1, #0]
 80202d0:	884a      	ldrh	r2, [r1, #2]
 80202d2:	88c4      	ldrh	r4, [r0, #6]
 80202d4:	4422      	add	r2, r4
 80202d6:	804a      	strh	r2, [r1, #2]
 80202d8:	6940      	ldr	r0, [r0, #20]
 80202da:	b120      	cbz	r0, 80202e6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80202dc:	6803      	ldr	r3, [r0, #0]
 80202de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80202e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80202e4:	4718      	bx	r3
 80202e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80202ea:	4770      	bx	lr

080202ec <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80202ec:	b570      	push	{r4, r5, r6, lr}
 80202ee:	8882      	ldrh	r2, [r0, #4]
 80202f0:	460c      	mov	r4, r1
 80202f2:	880b      	ldrh	r3, [r1, #0]
 80202f4:	4605      	mov	r5, r0
 80202f6:	4413      	add	r3, r2
 80202f8:	800b      	strh	r3, [r1, #0]
 80202fa:	884b      	ldrh	r3, [r1, #2]
 80202fc:	88c2      	ldrh	r2, [r0, #6]
 80202fe:	4413      	add	r3, r2
 8020300:	804b      	strh	r3, [r1, #2]
 8020302:	1d01      	adds	r1, r0, #4
 8020304:	4620      	mov	r0, r4
 8020306:	f7f9 ffa7 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 802030a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802030e:	2b00      	cmp	r3, #0
 8020310:	dd0b      	ble.n	802032a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8020312:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020316:	2b00      	cmp	r3, #0
 8020318:	dd07      	ble.n	802032a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 802031a:	6968      	ldr	r0, [r5, #20]
 802031c:	b128      	cbz	r0, 802032a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 802031e:	6803      	ldr	r3, [r0, #0]
 8020320:	4621      	mov	r1, r4
 8020322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020328:	4718      	bx	r3
 802032a:	bd70      	pop	{r4, r5, r6, pc}

0802032c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 802032c:	b570      	push	{r4, r5, r6, lr}
 802032e:	8882      	ldrh	r2, [r0, #4]
 8020330:	460c      	mov	r4, r1
 8020332:	880b      	ldrh	r3, [r1, #0]
 8020334:	4605      	mov	r5, r0
 8020336:	4413      	add	r3, r2
 8020338:	800b      	strh	r3, [r1, #0]
 802033a:	884b      	ldrh	r3, [r1, #2]
 802033c:	88c2      	ldrh	r2, [r0, #6]
 802033e:	4413      	add	r3, r2
 8020340:	804b      	strh	r3, [r1, #2]
 8020342:	1d01      	adds	r1, r0, #4
 8020344:	4620      	mov	r0, r4
 8020346:	f7f9 ff87 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 802034a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802034e:	2b00      	cmp	r3, #0
 8020350:	dd18      	ble.n	8020384 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8020352:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020356:	2b00      	cmp	r3, #0
 8020358:	dd14      	ble.n	8020384 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 802035a:	6968      	ldr	r0, [r5, #20]
 802035c:	b128      	cbz	r0, 802036a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 802035e:	6803      	ldr	r3, [r0, #0]
 8020360:	4621      	mov	r1, r4
 8020362:	691b      	ldr	r3, [r3, #16]
 8020364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020368:	4718      	bx	r3
 802036a:	4b07      	ldr	r3, [pc, #28]	; (8020388 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 802036c:	681b      	ldr	r3, [r3, #0]
 802036e:	3304      	adds	r3, #4
 8020370:	429d      	cmp	r5, r3
 8020372:	d107      	bne.n	8020384 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8020374:	f7fe fefa 	bl	801f16c <_ZN8touchgfx11Application11getInstanceEv>
 8020378:	6821      	ldr	r1, [r4, #0]
 802037a:	6862      	ldr	r2, [r4, #4]
 802037c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020380:	f7ff b862 	b.w	801f448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8020384:	bd70      	pop	{r4, r5, r6, pc}
 8020386:	bf00      	nop
 8020388:	24027fb0 	.word	0x24027fb0

0802038c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 802038c:	b570      	push	{r4, r5, r6, lr}
 802038e:	4604      	mov	r4, r0
 8020390:	4616      	mov	r6, r2
 8020392:	460d      	mov	r5, r1
 8020394:	b901      	cbnz	r1, 8020398 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8020396:	b192      	cbz	r2, 80203be <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8020398:	6823      	ldr	r3, [r4, #0]
 802039a:	4620      	mov	r0, r4
 802039c:	699b      	ldr	r3, [r3, #24]
 802039e:	4798      	blx	r3
 80203a0:	88e2      	ldrh	r2, [r4, #6]
 80203a2:	88a1      	ldrh	r1, [r4, #4]
 80203a4:	4620      	mov	r0, r4
 80203a6:	4432      	add	r2, r6
 80203a8:	4429      	add	r1, r5
 80203aa:	b212      	sxth	r2, r2
 80203ac:	b209      	sxth	r1, r1
 80203ae:	f7e7 fc7a 	bl	8007ca6 <_ZN8touchgfx8Drawable5setXYEss>
 80203b2:	6823      	ldr	r3, [r4, #0]
 80203b4:	4620      	mov	r0, r4
 80203b6:	699b      	ldr	r3, [r3, #24]
 80203b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80203bc:	4718      	bx	r3
 80203be:	bd70      	pop	{r4, r5, r6, pc}

080203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80203c0:	b510      	push	{r4, lr}
 80203c2:	2300      	movs	r3, #0
 80203c4:	4604      	mov	r4, r0
 80203c6:	4608      	mov	r0, r1
 80203c8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80203cc:	8023      	strh	r3, [r4, #0]
 80203ce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80203d2:	8063      	strh	r3, [r4, #2]
 80203d4:	6803      	ldr	r3, [r0, #0]
 80203d6:	80a1      	strh	r1, [r4, #4]
 80203d8:	4621      	mov	r1, r4
 80203da:	80e2      	strh	r2, [r4, #6]
 80203dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80203de:	4798      	blx	r3
 80203e0:	4620      	mov	r0, r4
 80203e2:	bd10      	pop	{r4, pc}

080203e4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80203e4:	b530      	push	{r4, r5, lr}
 80203e6:	8083      	strh	r3, [r0, #4]
 80203e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80203ec:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80203f0:	80c3      	strh	r3, [r0, #6]
 80203f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80203f6:	6141      	str	r1, [r0, #20]
 80203f8:	7203      	strb	r3, [r0, #8]
 80203fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80203fe:	8302      	strh	r2, [r0, #24]
 8020400:	7243      	strb	r3, [r0, #9]
 8020402:	7a83      	ldrb	r3, [r0, #10]
 8020404:	f365 0306 	bfi	r3, r5, #0, #7
 8020408:	f89d 501c 	ldrb.w	r5, [sp, #28]
 802040c:	f365 13c7 	bfi	r3, r5, #7, #1
 8020410:	7283      	strb	r3, [r0, #10]
 8020412:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8020416:	72c3      	strb	r3, [r0, #11]
 8020418:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 802041c:	7303      	strb	r3, [r0, #12]
 802041e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8020422:	81c3      	strh	r3, [r0, #14]
 8020424:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8020428:	8203      	strh	r3, [r0, #16]
 802042a:	4b01      	ldr	r3, [pc, #4]	; (8020430 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 802042c:	6003      	str	r3, [r0, #0]
 802042e:	bd30      	pop	{r4, r5, pc}
 8020430:	0802fda0 	.word	0x0802fda0

08020434 <_ZNK8touchgfx9ConstFont4findEt>:
 8020434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020436:	6944      	ldr	r4, [r0, #20]
 8020438:	b3bc      	cbz	r4, 80204aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 802043a:	88a3      	ldrh	r3, [r4, #4]
 802043c:	8b02      	ldrh	r2, [r0, #24]
 802043e:	1acb      	subs	r3, r1, r3
 8020440:	f102 32ff 	add.w	r2, r2, #4294967295
 8020444:	d431      	bmi.n	80204aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8020446:	4293      	cmp	r3, r2
 8020448:	dd0c      	ble.n	8020464 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 802044a:	230e      	movs	r3, #14
 802044c:	fb03 4302 	mla	r3, r3, r2, r4
 8020450:	889b      	ldrh	r3, [r3, #4]
 8020452:	1a5b      	subs	r3, r3, r1
 8020454:	1ad3      	subs	r3, r2, r3
 8020456:	429a      	cmp	r2, r3
 8020458:	db27      	blt.n	80204aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 802045a:	2b00      	cmp	r3, #0
 802045c:	bfbc      	itt	lt
 802045e:	2302      	movlt	r3, #2
 8020460:	fb92 f3f3 	sdivlt	r3, r2, r3
 8020464:	2500      	movs	r5, #0
 8020466:	260e      	movs	r6, #14
 8020468:	4295      	cmp	r5, r2
 802046a:	dc1e      	bgt.n	80204aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 802046c:	fb06 4003 	mla	r0, r6, r3, r4
 8020470:	8887      	ldrh	r7, [r0, #4]
 8020472:	42b9      	cmp	r1, r7
 8020474:	d01a      	beq.n	80204ac <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8020476:	d20d      	bcs.n	8020494 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8020478:	1e5a      	subs	r2, r3, #1
 802047a:	4295      	cmp	r5, r2
 802047c:	dc15      	bgt.n	80204aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 802047e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8020482:	1a5b      	subs	r3, r3, r1
 8020484:	1ad3      	subs	r3, r2, r3
 8020486:	429a      	cmp	r2, r3
 8020488:	db0f      	blt.n	80204aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 802048a:	429d      	cmp	r5, r3
 802048c:	ddec      	ble.n	8020468 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 802048e:	1953      	adds	r3, r2, r5
 8020490:	105b      	asrs	r3, r3, #1
 8020492:	e7e9      	b.n	8020468 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8020494:	1c5d      	adds	r5, r3, #1
 8020496:	42aa      	cmp	r2, r5
 8020498:	db07      	blt.n	80204aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 802049a:	8a43      	ldrh	r3, [r0, #18]
 802049c:	1acb      	subs	r3, r1, r3
 802049e:	442b      	add	r3, r5
 80204a0:	429d      	cmp	r5, r3
 80204a2:	dc02      	bgt.n	80204aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80204a4:	429a      	cmp	r2, r3
 80204a6:	dadf      	bge.n	8020468 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80204a8:	e7f1      	b.n	802048e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80204aa:	2000      	movs	r0, #0
 80204ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080204ae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80204ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204b0:	4604      	mov	r4, r0
 80204b2:	4617      	mov	r7, r2
 80204b4:	461e      	mov	r6, r3
 80204b6:	b911      	cbnz	r1, 80204be <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80204b8:	2500      	movs	r5, #0
 80204ba:	4628      	mov	r0, r5
 80204bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80204be:	290a      	cmp	r1, #10
 80204c0:	d0fa      	beq.n	80204b8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80204c2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80204c6:	4291      	cmp	r1, r2
 80204c8:	d0f6      	beq.n	80204b8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80204ca:	f242 020b 	movw	r2, #8203	; 0x200b
 80204ce:	4291      	cmp	r1, r2
 80204d0:	d0f2      	beq.n	80204b8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80204d2:	f7ff ffaf 	bl	8020434 <_ZNK8touchgfx9ConstFont4findEt>
 80204d6:	4605      	mov	r5, r0
 80204d8:	b950      	cbnz	r0, 80204f0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80204da:	6823      	ldr	r3, [r4, #0]
 80204dc:	4620      	mov	r0, r4
 80204de:	691b      	ldr	r3, [r3, #16]
 80204e0:	4798      	blx	r3
 80204e2:	4601      	mov	r1, r0
 80204e4:	4620      	mov	r0, r4
 80204e6:	f7ff ffa5 	bl	8020434 <_ZNK8touchgfx9ConstFont4findEt>
 80204ea:	4605      	mov	r5, r0
 80204ec:	2800      	cmp	r0, #0
 80204ee:	d0e3      	beq.n	80204b8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80204f0:	6823      	ldr	r3, [r4, #0]
 80204f2:	4629      	mov	r1, r5
 80204f4:	4620      	mov	r0, r4
 80204f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80204f8:	4798      	blx	r3
 80204fa:	6038      	str	r0, [r7, #0]
 80204fc:	6823      	ldr	r3, [r4, #0]
 80204fe:	4620      	mov	r0, r4
 8020500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020502:	4798      	blx	r3
 8020504:	7030      	strb	r0, [r6, #0]
 8020506:	e7d8      	b.n	80204ba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08020508 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8020508:	b538      	push	{r3, r4, r5, lr}
 802050a:	4605      	mov	r5, r0
 802050c:	f001 ff06 	bl	802231c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020510:	4604      	mov	r4, r0
 8020512:	4628      	mov	r0, r5
 8020514:	f001 fe46 	bl	80221a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020518:	2800      	cmp	r0, #0
 802051a:	bf14      	ite	ne
 802051c:	2002      	movne	r0, #2
 802051e:	2000      	moveq	r0, #0
 8020520:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8020524:	b280      	uxth	r0, r0
 8020526:	bd38      	pop	{r3, r4, r5, pc}

08020528 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8020528:	b538      	push	{r3, r4, r5, lr}
 802052a:	4605      	mov	r5, r0
 802052c:	f001 fef6 	bl	802231c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020530:	4604      	mov	r4, r0
 8020532:	4628      	mov	r0, r5
 8020534:	f001 fe36 	bl	80221a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020538:	2800      	cmp	r0, #0
 802053a:	bf14      	ite	ne
 802053c:	2002      	movne	r0, #2
 802053e:	2000      	moveq	r0, #0
 8020540:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8020544:	f040 0001 	orr.w	r0, r0, #1
 8020548:	b280      	uxth	r0, r0
 802054a:	bd38      	pop	{r3, r4, r5, pc}

0802054c <_ZN8touchgfx4clzuEm>:
 802054c:	4603      	mov	r3, r0
 802054e:	b1c8      	cbz	r0, 8020584 <_ZN8touchgfx4clzuEm+0x38>
 8020550:	0c02      	lsrs	r2, r0, #16
 8020552:	0412      	lsls	r2, r2, #16
 8020554:	b9a2      	cbnz	r2, 8020580 <_ZN8touchgfx4clzuEm+0x34>
 8020556:	0403      	lsls	r3, r0, #16
 8020558:	2010      	movs	r0, #16
 802055a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802055e:	bf04      	itt	eq
 8020560:	021b      	lsleq	r3, r3, #8
 8020562:	3008      	addeq	r0, #8
 8020564:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8020568:	bf04      	itt	eq
 802056a:	011b      	lsleq	r3, r3, #4
 802056c:	3004      	addeq	r0, #4
 802056e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8020572:	bf04      	itt	eq
 8020574:	009b      	lsleq	r3, r3, #2
 8020576:	3002      	addeq	r0, #2
 8020578:	2b00      	cmp	r3, #0
 802057a:	db04      	blt.n	8020586 <_ZN8touchgfx4clzuEm+0x3a>
 802057c:	3001      	adds	r0, #1
 802057e:	4770      	bx	lr
 8020580:	2000      	movs	r0, #0
 8020582:	e7ea      	b.n	802055a <_ZN8touchgfx4clzuEm+0xe>
 8020584:	2020      	movs	r0, #32
 8020586:	4770      	bx	lr

08020588 <_ZN8touchgfx7muldivuEmmmRm>:
 8020588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802058c:	4680      	mov	r8, r0
 802058e:	460f      	mov	r7, r1
 8020590:	4615      	mov	r5, r2
 8020592:	461e      	mov	r6, r3
 8020594:	f7ff ffda 	bl	802054c <_ZN8touchgfx4clzuEm>
 8020598:	b998      	cbnz	r0, 80205c2 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 802059a:	4608      	mov	r0, r1
 802059c:	f7ff ffd6 	bl	802054c <_ZN8touchgfx4clzuEm>
 80205a0:	2800      	cmp	r0, #0
 80205a2:	dd08      	ble.n	80205b6 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 80205a4:	4633      	mov	r3, r6
 80205a6:	462a      	mov	r2, r5
 80205a8:	4641      	mov	r1, r8
 80205aa:	4638      	mov	r0, r7
 80205ac:	f7ff ffec 	bl	8020588 <_ZN8touchgfx7muldivuEmmmRm>
 80205b0:	b003      	add	sp, #12
 80205b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205b6:	f04f 33ff 	mov.w	r3, #4294967295
 80205ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80205be:	6033      	str	r3, [r6, #0]
 80205c0:	e7f6      	b.n	80205b0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80205c2:	fa31 f900 	lsrs.w	r9, r1, r0
 80205c6:	fb01 f308 	mul.w	r3, r1, r8
 80205ca:	d105      	bne.n	80205d8 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 80205cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80205d0:	fb05 3510 	mls	r5, r5, r0, r3
 80205d4:	6035      	str	r5, [r6, #0]
 80205d6:	e7eb      	b.n	80205b0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80205d8:	2301      	movs	r3, #1
 80205da:	fa08 fb00 	lsl.w	fp, r8, r0
 80205de:	462a      	mov	r2, r5
 80205e0:	4641      	mov	r1, r8
 80205e2:	fa03 f000 	lsl.w	r0, r3, r0
 80205e6:	4633      	mov	r3, r6
 80205e8:	fbbb faf5 	udiv	sl, fp, r5
 80205ec:	3801      	subs	r0, #1
 80205ee:	fb09 f40a 	mul.w	r4, r9, sl
 80205f2:	4038      	ands	r0, r7
 80205f4:	f7ff ffc8 	bl	8020588 <_ZN8touchgfx7muldivuEmmmRm>
 80205f8:	462a      	mov	r2, r5
 80205fa:	4607      	mov	r7, r0
 80205fc:	ab01      	add	r3, sp, #4
 80205fe:	fb05 b11a 	mls	r1, r5, sl, fp
 8020602:	4648      	mov	r0, r9
 8020604:	f7ff ffc0 	bl	8020588 <_ZN8touchgfx7muldivuEmmmRm>
 8020608:	9b01      	ldr	r3, [sp, #4]
 802060a:	6832      	ldr	r2, [r6, #0]
 802060c:	441a      	add	r2, r3
 802060e:	fbb2 f3f5 	udiv	r3, r2, r5
 8020612:	441c      	add	r4, r3
 8020614:	fb05 2513 	mls	r5, r5, r3, r2
 8020618:	443c      	add	r4, r7
 802061a:	4420      	add	r0, r4
 802061c:	e7da      	b.n	80205d4 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0802061e <_ZN8touchgfx6muldivElllRl>:
 802061e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020620:	2800      	cmp	r0, #0
 8020622:	461e      	mov	r6, r3
 8020624:	bfba      	itte	lt
 8020626:	4240      	neglt	r0, r0
 8020628:	f04f 34ff 	movlt.w	r4, #4294967295
 802062c:	2401      	movge	r4, #1
 802062e:	2900      	cmp	r1, #0
 8020630:	bfbc      	itt	lt
 8020632:	4249      	neglt	r1, r1
 8020634:	4264      	neglt	r4, r4
 8020636:	2a00      	cmp	r2, #0
 8020638:	bfb6      	itet	lt
 802063a:	4265      	neglt	r5, r4
 802063c:	4625      	movge	r5, r4
 802063e:	4252      	neglt	r2, r2
 8020640:	4288      	cmp	r0, r1
 8020642:	bfc2      	ittt	gt
 8020644:	4603      	movgt	r3, r0
 8020646:	4608      	movgt	r0, r1
 8020648:	4619      	movgt	r1, r3
 802064a:	ab01      	add	r3, sp, #4
 802064c:	f7ff ff9c 	bl	8020588 <_ZN8touchgfx7muldivuEmmmRm>
 8020650:	9b01      	ldr	r3, [sp, #4]
 8020652:	4368      	muls	r0, r5
 8020654:	435c      	muls	r4, r3
 8020656:	6034      	str	r4, [r6, #0]
 8020658:	b002      	add	sp, #8
 802065a:	bd70      	pop	{r4, r5, r6, pc}

0802065c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 802065c:	2000      	movs	r0, #0
 802065e:	4770      	bx	lr

08020660 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8020660:	2001      	movs	r0, #1
 8020662:	4770      	bx	lr

08020664 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8020664:	2002      	movs	r0, #2
 8020666:	4770      	bx	lr

08020668 <_ZN8touchgfx12GestureEventD1Ev>:
 8020668:	4770      	bx	lr

0802066a <_ZN8touchgfx9DragEventD1Ev>:
 802066a:	4770      	bx	lr

0802066c <_ZN8touchgfx10ClickEventD1Ev>:
 802066c:	4770      	bx	lr

0802066e <_ZN8touchgfx10ClickEventD0Ev>:
 802066e:	b510      	push	{r4, lr}
 8020670:	4604      	mov	r4, r0
 8020672:	210c      	movs	r1, #12
 8020674:	f00a f90d 	bl	802a892 <_ZdlPvj>
 8020678:	4620      	mov	r0, r4
 802067a:	bd10      	pop	{r4, pc}

0802067c <_ZN8touchgfx9DragEventD0Ev>:
 802067c:	b510      	push	{r4, lr}
 802067e:	4604      	mov	r4, r0
 8020680:	2110      	movs	r1, #16
 8020682:	f00a f906 	bl	802a892 <_ZdlPvj>
 8020686:	4620      	mov	r0, r4
 8020688:	bd10      	pop	{r4, pc}

0802068a <_ZN8touchgfx12GestureEventD0Ev>:
 802068a:	b510      	push	{r4, lr}
 802068c:	4604      	mov	r4, r0
 802068e:	210c      	movs	r1, #12
 8020690:	f00a f8ff 	bl	802a892 <_ZdlPvj>
 8020694:	4620      	mov	r0, r4
 8020696:	bd10      	pop	{r4, pc}

08020698 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8020698:	b530      	push	{r4, r5, lr}
 802069a:	460d      	mov	r5, r1
 802069c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 802069e:	b087      	sub	sp, #28
 80206a0:	4604      	mov	r4, r0
 80206a2:	b301      	cbz	r1, 80206e6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80206a4:	a801      	add	r0, sp, #4
 80206a6:	f7ff fe8b 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80206aa:	892a      	ldrh	r2, [r5, #8]
 80206ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80206b0:	7928      	ldrb	r0, [r5, #4]
 80206b2:	1ad2      	subs	r2, r2, r3
 80206b4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80206b6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80206ba:	441a      	add	r2, r3
 80206bc:	896b      	ldrh	r3, [r5, #10]
 80206be:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80206c2:	f88d 0010 	strb.w	r0, [sp, #16]
 80206c6:	1b5b      	subs	r3, r3, r5
 80206c8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80206ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80206cc:	442b      	add	r3, r5
 80206ce:	4d07      	ldr	r5, [pc, #28]	; (80206ec <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80206d0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80206d4:	a903      	add	r1, sp, #12
 80206d6:	9503      	str	r5, [sp, #12]
 80206d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80206dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80206e0:	6803      	ldr	r3, [r0, #0]
 80206e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80206e4:	4798      	blx	r3
 80206e6:	b007      	add	sp, #28
 80206e8:	bd30      	pop	{r4, r5, pc}
 80206ea:	bf00      	nop
 80206ec:	0802fe28 	.word	0x0802fe28

080206f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80206f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80206f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80206f6:	b08a      	sub	sp, #40	; 0x28
 80206f8:	4604      	mov	r4, r0
 80206fa:	460d      	mov	r5, r1
 80206fc:	b113      	cbz	r3, 8020704 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80206fe:	790b      	ldrb	r3, [r1, #4]
 8020700:	2b00      	cmp	r3, #0
 8020702:	d044      	beq.n	802078e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8020704:	f104 0804 	add.w	r8, r4, #4
 8020708:	a803      	add	r0, sp, #12
 802070a:	4641      	mov	r1, r8
 802070c:	f7ff fe58 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8020710:	792b      	ldrb	r3, [r5, #4]
 8020712:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8020716:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 802071a:	b983      	cbnz	r3, 802073e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 802071c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8020720:	892a      	ldrh	r2, [r5, #8]
 8020722:	88e9      	ldrh	r1, [r5, #6]
 8020724:	4640      	mov	r0, r8
 8020726:	1b92      	subs	r2, r2, r6
 8020728:	9301      	str	r3, [sp, #4]
 802072a:	1bc9      	subs	r1, r1, r7
 802072c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8020730:	b212      	sxth	r2, r2
 8020732:	9300      	str	r3, [sp, #0]
 8020734:	b209      	sxth	r1, r1
 8020736:	f104 0330 	add.w	r3, r4, #48	; 0x30
 802073a:	f7f9 fcab 	bl	801a094 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 802073e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8020740:	b329      	cbz	r1, 802078e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8020742:	a805      	add	r0, sp, #20
 8020744:	f7ff fe3c 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8020748:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 802074c:	792b      	ldrb	r3, [r5, #4]
 802074e:	a907      	add	r1, sp, #28
 8020750:	1abf      	subs	r7, r7, r2
 8020752:	88ea      	ldrh	r2, [r5, #6]
 8020754:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8020756:	4417      	add	r7, r2
 8020758:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 802075a:	f88d 3020 	strb.w	r3, [sp, #32]
 802075e:	4417      	add	r7, r2
 8020760:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8020764:	1ab6      	subs	r6, r6, r2
 8020766:	892a      	ldrh	r2, [r5, #8]
 8020768:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 802076c:	4416      	add	r6, r2
 802076e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8020770:	4416      	add	r6, r2
 8020772:	4a08      	ldr	r2, [pc, #32]	; (8020794 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8020774:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8020778:	2600      	movs	r6, #0
 802077a:	9207      	str	r2, [sp, #28]
 802077c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8020780:	6803      	ldr	r3, [r0, #0]
 8020782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020784:	4798      	blx	r3
 8020786:	792b      	ldrb	r3, [r5, #4]
 8020788:	b10b      	cbz	r3, 802078e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 802078a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 802078e:	b00a      	add	sp, #40	; 0x28
 8020790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020794:	0802fe00 	.word	0x0802fe00

08020798 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8020798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802079c:	460c      	mov	r4, r1
 802079e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80207a0:	b088      	sub	sp, #32
 80207a2:	4605      	mov	r5, r0
 80207a4:	2900      	cmp	r1, #0
 80207a6:	d06d      	beq.n	8020884 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80207a8:	4668      	mov	r0, sp
 80207aa:	f7ff fe09 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80207ae:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80207b0:	88e3      	ldrh	r3, [r4, #6]
 80207b2:	f9bd 8000 	ldrsh.w	r8, [sp]
 80207b6:	440b      	add	r3, r1
 80207b8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80207bc:	b21b      	sxth	r3, r3
 80207be:	4543      	cmp	r3, r8
 80207c0:	db31      	blt.n	8020826 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80207c2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80207c6:	44c4      	add	ip, r8
 80207c8:	fa0f fc8c 	sxth.w	ip, ip
 80207cc:	4563      	cmp	r3, ip
 80207ce:	da2a      	bge.n	8020826 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80207d0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80207d2:	8926      	ldrh	r6, [r4, #8]
 80207d4:	4416      	add	r6, r2
 80207d6:	b236      	sxth	r6, r6
 80207d8:	42be      	cmp	r6, r7
 80207da:	db24      	blt.n	8020826 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80207dc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80207e0:	4438      	add	r0, r7
 80207e2:	b200      	sxth	r0, r0
 80207e4:	4286      	cmp	r6, r0
 80207e6:	da1e      	bge.n	8020826 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80207e8:	8963      	ldrh	r3, [r4, #10]
 80207ea:	4419      	add	r1, r3
 80207ec:	b209      	sxth	r1, r1
 80207ee:	4541      	cmp	r1, r8
 80207f0:	db08      	blt.n	8020804 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80207f2:	4561      	cmp	r1, ip
 80207f4:	da06      	bge.n	8020804 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80207f6:	89a3      	ldrh	r3, [r4, #12]
 80207f8:	441a      	add	r2, r3
 80207fa:	b212      	sxth	r2, r2
 80207fc:	42ba      	cmp	r2, r7
 80207fe:	db01      	blt.n	8020804 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8020800:	4282      	cmp	r2, r0
 8020802:	db10      	blt.n	8020826 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8020804:	4b21      	ldr	r3, [pc, #132]	; (802088c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8020806:	a904      	add	r1, sp, #16
 8020808:	6b28      	ldr	r0, [r5, #48]	; 0x30
 802080a:	9304      	str	r3, [sp, #16]
 802080c:	2302      	movs	r3, #2
 802080e:	f88d 3014 	strb.w	r3, [sp, #20]
 8020812:	2300      	movs	r3, #0
 8020814:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020818:	f8ad 3018 	strh.w	r3, [sp, #24]
 802081c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8020820:	6803      	ldr	r3, [r0, #0]
 8020822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020824:	4798      	blx	r3
 8020826:	1d29      	adds	r1, r5, #4
 8020828:	a802      	add	r0, sp, #8
 802082a:	f7ff fdc9 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 802082e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8020832:	88e0      	ldrh	r0, [r4, #6]
 8020834:	eba3 0808 	sub.w	r8, r3, r8
 8020838:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802083c:	7921      	ldrb	r1, [r4, #4]
 802083e:	fa1f f888 	uxth.w	r8, r8
 8020842:	1bdf      	subs	r7, r3, r7
 8020844:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8020848:	b2bb      	uxth	r3, r7
 802084a:	4440      	add	r0, r8
 802084c:	8922      	ldrh	r2, [r4, #8]
 802084e:	8967      	ldrh	r7, [r4, #10]
 8020850:	4460      	add	r0, ip
 8020852:	89a4      	ldrh	r4, [r4, #12]
 8020854:	441a      	add	r2, r3
 8020856:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8020858:	44b8      	add	r8, r7
 802085a:	4423      	add	r3, r4
 802085c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8020860:	4432      	add	r2, r6
 8020862:	44e0      	add	r8, ip
 8020864:	4433      	add	r3, r6
 8020866:	4c0a      	ldr	r4, [pc, #40]	; (8020890 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8020868:	6b28      	ldr	r0, [r5, #48]	; 0x30
 802086a:	f88d 1014 	strb.w	r1, [sp, #20]
 802086e:	a904      	add	r1, sp, #16
 8020870:	9404      	str	r4, [sp, #16]
 8020872:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020876:	f8ad 801a 	strh.w	r8, [sp, #26]
 802087a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802087e:	6803      	ldr	r3, [r0, #0]
 8020880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020882:	4798      	blx	r3
 8020884:	b008      	add	sp, #32
 8020886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802088a:	bf00      	nop
 802088c:	0802fe00 	.word	0x0802fe00
 8020890:	0802fe14 	.word	0x0802fe14

08020894 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8020894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020896:	4604      	mov	r4, r0
 8020898:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 802089c:	3201      	adds	r2, #1
 802089e:	d112      	bne.n	80208c6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80208a0:	2500      	movs	r5, #0
 80208a2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80208a6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80208aa:	6803      	ldr	r3, [r0, #0]
 80208ac:	9500      	str	r5, [sp, #0]
 80208ae:	466d      	mov	r5, sp
 80208b0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80208b4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80208b8:	4629      	mov	r1, r5
 80208ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80208bc:	4798      	blx	r3
 80208be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80208c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80208c6:	4620      	mov	r0, r4
 80208c8:	b003      	add	sp, #12
 80208ca:	bd30      	pop	{r4, r5, pc}

080208cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80208cc:	b513      	push	{r0, r1, r4, lr}
 80208ce:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80208d2:	4604      	mov	r4, r0
 80208d4:	3301      	adds	r3, #1
 80208d6:	d109      	bne.n	80208ec <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80208d8:	4601      	mov	r1, r0
 80208da:	4668      	mov	r0, sp
 80208dc:	f7ff fd70 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80208e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80208e4:	8423      	strh	r3, [r4, #32]
 80208e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80208ea:	8463      	strh	r3, [r4, #34]	; 0x22
 80208ec:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80208f0:	b002      	add	sp, #8
 80208f2:	bd10      	pop	{r4, pc}

080208f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80208f4:	b513      	push	{r0, r1, r4, lr}
 80208f6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80208fa:	4604      	mov	r4, r0
 80208fc:	3301      	adds	r3, #1
 80208fe:	d109      	bne.n	8020914 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8020900:	4601      	mov	r1, r0
 8020902:	4668      	mov	r0, sp
 8020904:	f7ff fd5c 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8020908:	f8bd 3000 	ldrh.w	r3, [sp]
 802090c:	8423      	strh	r3, [r4, #32]
 802090e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8020912:	8463      	strh	r3, [r4, #34]	; 0x22
 8020914:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8020918:	b002      	add	sp, #8
 802091a:	bd10      	pop	{r4, pc}

0802091c <_ZN8touchgfx6ScreenC1Ev>:
 802091c:	b570      	push	{r4, r5, r6, lr}
 802091e:	4b17      	ldr	r3, [pc, #92]	; (802097c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8020920:	4605      	mov	r5, r0
 8020922:	4a17      	ldr	r2, [pc, #92]	; (8020980 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8020924:	2101      	movs	r1, #1
 8020926:	f845 3b04 	str.w	r3, [r5], #4
 802092a:	2300      	movs	r3, #0
 802092c:	6042      	str	r2, [r0, #4]
 802092e:	4604      	mov	r4, r0
 8020930:	8103      	strh	r3, [r0, #8]
 8020932:	8143      	strh	r3, [r0, #10]
 8020934:	8183      	strh	r3, [r0, #12]
 8020936:	81c3      	strh	r3, [r0, #14]
 8020938:	8203      	strh	r3, [r0, #16]
 802093a:	8243      	strh	r3, [r0, #18]
 802093c:	8283      	strh	r3, [r0, #20]
 802093e:	82c3      	strh	r3, [r0, #22]
 8020940:	6203      	str	r3, [r0, #32]
 8020942:	8483      	strh	r3, [r0, #36]	; 0x24
 8020944:	84c3      	strh	r3, [r0, #38]	; 0x26
 8020946:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 802094a:	6343      	str	r3, [r0, #52]	; 0x34
 802094c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8020950:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8020954:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8020958:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 802095c:	4b09      	ldr	r3, [pc, #36]	; (8020984 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 802095e:	4628      	mov	r0, r5
 8020960:	f9b3 6000 	ldrsh.w	r6, [r3]
 8020964:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8020966:	4a08      	ldr	r2, [pc, #32]	; (8020988 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8020968:	f9b2 1000 	ldrsh.w	r1, [r2]
 802096c:	4798      	blx	r3
 802096e:	6863      	ldr	r3, [r4, #4]
 8020970:	4628      	mov	r0, r5
 8020972:	4631      	mov	r1, r6
 8020974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020976:	4798      	blx	r3
 8020978:	4620      	mov	r0, r4
 802097a:	bd70      	pop	{r4, r5, r6, pc}
 802097c:	0802fe3c 	.word	0x0802fe3c
 8020980:	0802f420 	.word	0x0802f420
 8020984:	24027f62 	.word	0x24027f62
 8020988:	24027f60 	.word	0x24027f60

0802098c <_ZN8touchgfx6Screen4drawEv>:
 802098c:	4b09      	ldr	r3, [pc, #36]	; (80209b4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 802098e:	b507      	push	{r0, r1, r2, lr}
 8020990:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020994:	2100      	movs	r1, #0
 8020996:	4b08      	ldr	r3, [pc, #32]	; (80209b8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8020998:	9100      	str	r1, [sp, #0]
 802099a:	4669      	mov	r1, sp
 802099c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80209a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80209a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80209a8:	6803      	ldr	r3, [r0, #0]
 80209aa:	689b      	ldr	r3, [r3, #8]
 80209ac:	4798      	blx	r3
 80209ae:	b003      	add	sp, #12
 80209b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80209b4:	24027f60 	.word	0x24027f60
 80209b8:	24027f62 	.word	0x24027f62

080209bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80209bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80209c4:	b089      	sub	sp, #36	; 0x24
 80209c6:	4680      	mov	r8, r0
 80209c8:	460c      	mov	r4, r1
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	4615      	mov	r5, r2
 80209ce:	dd0e      	ble.n	80209ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80209d0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	dd0a      	ble.n	80209ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80209d8:	4628      	mov	r0, r5
 80209da:	f7ff ff5b 	bl	8020894 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80209de:	4621      	mov	r1, r4
 80209e0:	f7fe fae6 	bl	801efb0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80209e4:	69eb      	ldr	r3, [r5, #28]
 80209e6:	b928      	cbnz	r0, 80209f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80209e8:	461d      	mov	r5, r3
 80209ea:	2b00      	cmp	r3, #0
 80209ec:	d1f4      	bne.n	80209d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80209ee:	b009      	add	sp, #36	; 0x24
 80209f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209f4:	ae04      	add	r6, sp, #16
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	f000 80b5 	beq.w	8020b66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80209fc:	682b      	ldr	r3, [r5, #0]
 80209fe:	4629      	mov	r1, r5
 8020a00:	a802      	add	r0, sp, #8
 8020a02:	68db      	ldr	r3, [r3, #12]
 8020a04:	4798      	blx	r3
 8020a06:	4628      	mov	r0, r5
 8020a08:	f7ff ff60 	bl	80208cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8020a0c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8020a10:	4407      	add	r7, r0
 8020a12:	4628      	mov	r0, r5
 8020a14:	f7ff ff6e 	bl	80208f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8020a18:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020a1c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8020a20:	b23f      	sxth	r7, r7
 8020a22:	4418      	add	r0, r3
 8020a24:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8020a28:	4621      	mov	r1, r4
 8020a2a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8020a2e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8020a32:	4630      	mov	r0, r6
 8020a34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020a38:	f8ad 7010 	strh.w	r7, [sp, #16]
 8020a3c:	f7f9 fc0c 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 8020a40:	4628      	mov	r0, r5
 8020a42:	f7ff ff27 	bl	8020894 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8020a46:	ab06      	add	r3, sp, #24
 8020a48:	4602      	mov	r2, r0
 8020a4a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8020a4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8020a52:	4611      	mov	r1, r2
 8020a54:	4618      	mov	r0, r3
 8020a56:	f7f9 fbff 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 8020a5a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8020a5e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8020a62:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8020a66:	4299      	cmp	r1, r3
 8020a68:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8020a6c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8020a70:	d10b      	bne.n	8020a8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8020a72:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020a76:	4552      	cmp	r2, sl
 8020a78:	d107      	bne.n	8020a8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8020a7a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8020a7e:	455a      	cmp	r2, fp
 8020a80:	d103      	bne.n	8020a8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8020a82:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8020a86:	454a      	cmp	r2, r9
 8020a88:	d06d      	beq.n	8020b66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8020a8a:	f1bb 0f00 	cmp.w	fp, #0
 8020a8e:	dd65      	ble.n	8020b5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8020a90:	f1b9 0f00 	cmp.w	r9, #0
 8020a94:	dd62      	ble.n	8020b5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8020a96:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020a9a:	fa1f f08a 	uxth.w	r0, sl
 8020a9e:	4552      	cmp	r2, sl
 8020aa0:	9000      	str	r0, [sp, #0]
 8020aa2:	da12      	bge.n	8020aca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8020aa4:	9301      	str	r3, [sp, #4]
 8020aa6:	9b00      	ldr	r3, [sp, #0]
 8020aa8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020aac:	f8ad 2012 	strh.w	r2, [sp, #18]
 8020ab0:	1a9a      	subs	r2, r3, r2
 8020ab2:	f8ad 1010 	strh.w	r1, [sp, #16]
 8020ab6:	4631      	mov	r1, r6
 8020ab8:	f8ad 0014 	strh.w	r0, [sp, #20]
 8020abc:	4640      	mov	r0, r8
 8020abe:	f8ad 2016 	strh.w	r2, [sp, #22]
 8020ac2:	69ea      	ldr	r2, [r5, #28]
 8020ac4:	f7ff ff7a 	bl	80209bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020ac8:	9b01      	ldr	r3, [sp, #4]
 8020aca:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020ace:	b29f      	uxth	r7, r3
 8020ad0:	429a      	cmp	r2, r3
 8020ad2:	da0d      	bge.n	8020af0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8020ad4:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020ad8:	1aba      	subs	r2, r7, r2
 8020ada:	f8ad a012 	strh.w	sl, [sp, #18]
 8020ade:	4631      	mov	r1, r6
 8020ae0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8020ae4:	4640      	mov	r0, r8
 8020ae6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8020aea:	69ea      	ldr	r2, [r5, #28]
 8020aec:	f7ff ff66 	bl	80209bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020af0:	8822      	ldrh	r2, [r4, #0]
 8020af2:	445f      	add	r7, fp
 8020af4:	88a3      	ldrh	r3, [r4, #4]
 8020af6:	b2bf      	uxth	r7, r7
 8020af8:	4413      	add	r3, r2
 8020afa:	b23a      	sxth	r2, r7
 8020afc:	b29b      	uxth	r3, r3
 8020afe:	b219      	sxth	r1, r3
 8020b00:	4291      	cmp	r1, r2
 8020b02:	dd0d      	ble.n	8020b20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8020b04:	1bdb      	subs	r3, r3, r7
 8020b06:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020b0a:	f8ad a012 	strh.w	sl, [sp, #18]
 8020b0e:	4631      	mov	r1, r6
 8020b10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020b14:	4640      	mov	r0, r8
 8020b16:	f8ad 9016 	strh.w	r9, [sp, #22]
 8020b1a:	69ea      	ldr	r2, [r5, #28]
 8020b1c:	f7ff ff4e 	bl	80209bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020b20:	88e2      	ldrh	r2, [r4, #6]
 8020b22:	8863      	ldrh	r3, [r4, #2]
 8020b24:	4413      	add	r3, r2
 8020b26:	9a00      	ldr	r2, [sp, #0]
 8020b28:	444a      	add	r2, r9
 8020b2a:	b29b      	uxth	r3, r3
 8020b2c:	fa1f f982 	uxth.w	r9, r2
 8020b30:	b219      	sxth	r1, r3
 8020b32:	fa0f f289 	sxth.w	r2, r9
 8020b36:	428a      	cmp	r2, r1
 8020b38:	da15      	bge.n	8020b66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8020b3a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020b3e:	eba3 0309 	sub.w	r3, r3, r9
 8020b42:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020b46:	f8ad 1014 	strh.w	r1, [sp, #20]
 8020b4a:	4631      	mov	r1, r6
 8020b4c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8020b50:	f8ad 2012 	strh.w	r2, [sp, #18]
 8020b54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020b58:	69ea      	ldr	r2, [r5, #28]
 8020b5a:	e001      	b.n	8020b60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8020b5c:	69ea      	ldr	r2, [r5, #28]
 8020b5e:	4621      	mov	r1, r4
 8020b60:	4640      	mov	r0, r8
 8020b62:	f7ff ff2b 	bl	80209bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020b66:	4628      	mov	r0, r5
 8020b68:	f7ff fe94 	bl	8020894 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8020b6c:	6861      	ldr	r1, [r4, #4]
 8020b6e:	4602      	mov	r2, r0
 8020b70:	4633      	mov	r3, r6
 8020b72:	6820      	ldr	r0, [r4, #0]
 8020b74:	c303      	stmia	r3!, {r0, r1}
 8020b76:	4611      	mov	r1, r2
 8020b78:	4630      	mov	r0, r6
 8020b7a:	f7f9 fb6d 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 8020b7e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	f77f af33 	ble.w	80209ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8020b88:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	f77f af2e 	ble.w	80209ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8020b92:	4628      	mov	r0, r5
 8020b94:	f7ff fe9a 	bl	80208cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8020b98:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020b9c:	1a18      	subs	r0, r3, r0
 8020b9e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8020ba2:	4628      	mov	r0, r5
 8020ba4:	f7ff fea6 	bl	80208f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8020ba8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020bac:	4631      	mov	r1, r6
 8020bae:	1a18      	subs	r0, r3, r0
 8020bb0:	f8ad 0012 	strh.w	r0, [sp, #18]
 8020bb4:	4628      	mov	r0, r5
 8020bb6:	682b      	ldr	r3, [r5, #0]
 8020bb8:	689b      	ldr	r3, [r3, #8]
 8020bba:	4798      	blx	r3
 8020bbc:	e717      	b.n	80209ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08020bbe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8020bbe:	b570      	push	{r4, r5, r6, lr}
 8020bc0:	1d06      	adds	r6, r0, #4
 8020bc2:	b086      	sub	sp, #24
 8020bc4:	460c      	mov	r4, r1
 8020bc6:	2300      	movs	r3, #0
 8020bc8:	4631      	mov	r1, r6
 8020bca:	4605      	mov	r5, r0
 8020bcc:	a802      	add	r0, sp, #8
 8020bce:	9301      	str	r3, [sp, #4]
 8020bd0:	f7ff fbf6 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8020bd4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8020bd8:	8822      	ldrh	r2, [r4, #0]
 8020bda:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8020bde:	1ad2      	subs	r2, r2, r3
 8020be0:	8863      	ldrh	r3, [r4, #2]
 8020be2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020be6:	1a5b      	subs	r3, r3, r1
 8020be8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8020bec:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020bf0:	aa01      	add	r2, sp, #4
 8020bf2:	f8ad 0014 	strh.w	r0, [sp, #20]
 8020bf6:	4630      	mov	r0, r6
 8020bf8:	f8ad 1016 	strh.w	r1, [sp, #22]
 8020bfc:	a904      	add	r1, sp, #16
 8020bfe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020c02:	f7f9 fc01 	bl	801a408 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8020c06:	9a01      	ldr	r2, [sp, #4]
 8020c08:	b11a      	cbz	r2, 8020c12 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8020c0a:	4621      	mov	r1, r4
 8020c0c:	4628      	mov	r0, r5
 8020c0e:	f7ff fed5 	bl	80209bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020c12:	b006      	add	sp, #24
 8020c14:	bd70      	pop	{r4, r5, r6, pc}

08020c16 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8020c16:	4602      	mov	r2, r0
 8020c18:	b530      	push	{r4, r5, lr}
 8020c1a:	4604      	mov	r4, r0
 8020c1c:	b085      	sub	sp, #20
 8020c1e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8020c22:	460d      	mov	r5, r1
 8020c24:	466b      	mov	r3, sp
 8020c26:	6851      	ldr	r1, [r2, #4]
 8020c28:	c303      	stmia	r3!, {r0, r1}
 8020c2a:	4629      	mov	r1, r5
 8020c2c:	4668      	mov	r0, sp
 8020c2e:	f7f9 fb13 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 8020c32:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8020c36:	b12b      	cbz	r3, 8020c44 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8020c38:	4669      	mov	r1, sp
 8020c3a:	4620      	mov	r0, r4
 8020c3c:	f7ff ffbf 	bl	8020bbe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8020c40:	b005      	add	sp, #20
 8020c42:	bd30      	pop	{r4, r5, pc}
 8020c44:	3404      	adds	r4, #4
 8020c46:	a802      	add	r0, sp, #8
 8020c48:	4621      	mov	r1, r4
 8020c4a:	f7ff fbb9 	bl	80203c0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8020c4e:	f8bd 3000 	ldrh.w	r3, [sp]
 8020c52:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8020c56:	4669      	mov	r1, sp
 8020c58:	4620      	mov	r0, r4
 8020c5a:	1a9b      	subs	r3, r3, r2
 8020c5c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020c60:	f8ad 3000 	strh.w	r3, [sp]
 8020c64:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8020c68:	1a9b      	subs	r3, r3, r2
 8020c6a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8020c6e:	f7f9 fb92 	bl	801a396 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8020c72:	e7e5      	b.n	8020c40 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08020c74 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8020c74:	460b      	mov	r3, r1
 8020c76:	680a      	ldr	r2, [r1, #0]
 8020c78:	1d01      	adds	r1, r0, #4
 8020c7a:	6992      	ldr	r2, [r2, #24]
 8020c7c:	4618      	mov	r0, r3
 8020c7e:	4710      	bx	r2

08020c80 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8020c80:	4298      	cmp	r0, r3
 8020c82:	d200      	bcs.n	8020c86 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8020c84:	b913      	cbnz	r3, 8020c8c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8020c86:	440a      	add	r2, r1
 8020c88:	b210      	sxth	r0, r2
 8020c8a:	4770      	bx	lr
 8020c8c:	ee07 2a90 	vmov	s15, r2
 8020c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020c94:	ee07 0a90 	vmov	s15, r0
 8020c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020ca0:	ee07 3a10 	vmov	s14, r3
 8020ca4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8020ca8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8020cac:	ee07 1a90 	vmov	s15, r1
 8020cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020cb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8020cbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cc4:	bfcc      	ite	gt
 8020cc6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8020cca:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8020cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020cd2:	ee17 3a90 	vmov	r3, s15
 8020cd6:	b218      	sxth	r0, r3
 8020cd8:	4770      	bx	lr

08020cda <_ZN8touchgfx15EasingEquations12linearEaseInEtsst>:
 8020cda:	f7ff bfd1 	b.w	8020c80 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

08020cde <_ZN8touchgfx12TextProviderC1Ev>:
 8020cde:	b538      	push	{r3, r4, r5, lr}
 8020ce0:	2500      	movs	r5, #0
 8020ce2:	2302      	movs	r3, #2
 8020ce4:	4604      	mov	r4, r0
 8020ce6:	220e      	movs	r2, #14
 8020ce8:	7403      	strb	r3, [r0, #16]
 8020cea:	4629      	mov	r1, r5
 8020cec:	6145      	str	r5, [r0, #20]
 8020cee:	7605      	strb	r5, [r0, #24]
 8020cf0:	83c5      	strh	r5, [r0, #30]
 8020cf2:	8405      	strh	r5, [r0, #32]
 8020cf4:	86c5      	strh	r5, [r0, #54]	; 0x36
 8020cf6:	8705      	strh	r5, [r0, #56]	; 0x38
 8020cf8:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8020cfa:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8020cfe:	e9c0 5500 	strd	r5, r5, [r0]
 8020d02:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8020d06:	304c      	adds	r0, #76	; 0x4c
 8020d08:	f00a f82e 	bl	802ad68 <memset>
 8020d0c:	2301      	movs	r3, #1
 8020d0e:	4620      	mov	r0, r4
 8020d10:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8020d14:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8020d18:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8020d1c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8020d20:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8020d24:	f7e8 ff4c 	bl	8009bc0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8020d28:	4620      	mov	r0, r4
 8020d2a:	bd38      	pop	{r3, r4, r5, pc}

08020d2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8020d2c:	b530      	push	{r4, r5, lr}
 8020d2e:	2500      	movs	r5, #0
 8020d30:	2401      	movs	r4, #1
 8020d32:	6843      	ldr	r3, [r0, #4]
 8020d34:	b913      	cbnz	r3, 8020d3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8020d36:	6803      	ldr	r3, [r0, #0]
 8020d38:	b313      	cbz	r3, 8020d80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8020d3a:	6043      	str	r3, [r0, #4]
 8020d3c:	7e03      	ldrb	r3, [r0, #24]
 8020d3e:	b143      	cbz	r3, 8020d52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8020d40:	6943      	ldr	r3, [r0, #20]
 8020d42:	b12b      	cbz	r3, 8020d50 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8020d44:	881a      	ldrh	r2, [r3, #0]
 8020d46:	b11a      	cbz	r2, 8020d50 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8020d48:	1c9a      	adds	r2, r3, #2
 8020d4a:	6142      	str	r2, [r0, #20]
 8020d4c:	8818      	ldrh	r0, [r3, #0]
 8020d4e:	bd30      	pop	{r4, r5, pc}
 8020d50:	7605      	strb	r5, [r0, #24]
 8020d52:	6843      	ldr	r3, [r0, #4]
 8020d54:	8819      	ldrh	r1, [r3, #0]
 8020d56:	b199      	cbz	r1, 8020d80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8020d58:	1c9a      	adds	r2, r3, #2
 8020d5a:	2902      	cmp	r1, #2
 8020d5c:	6042      	str	r2, [r0, #4]
 8020d5e:	d1f5      	bne.n	8020d4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8020d60:	7c03      	ldrb	r3, [r0, #16]
 8020d62:	2b01      	cmp	r3, #1
 8020d64:	d8e5      	bhi.n	8020d32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8020d66:	1c5a      	adds	r2, r3, #1
 8020d68:	3302      	adds	r3, #2
 8020d6a:	7402      	strb	r2, [r0, #16]
 8020d6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8020d70:	6143      	str	r3, [r0, #20]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d0dd      	beq.n	8020d32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8020d76:	881b      	ldrh	r3, [r3, #0]
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	d0da      	beq.n	8020d32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8020d7c:	7604      	strb	r4, [r0, #24]
 8020d7e:	e7d8      	b.n	8020d32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8020d80:	2000      	movs	r0, #0
 8020d82:	e7e4      	b.n	8020d4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08020d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8020d84:	6001      	str	r1, [r0, #0]
 8020d86:	2100      	movs	r1, #0
 8020d88:	b430      	push	{r4, r5}
 8020d8a:	6041      	str	r1, [r0, #4]
 8020d8c:	6815      	ldr	r5, [r2, #0]
 8020d8e:	6085      	str	r5, [r0, #8]
 8020d90:	6852      	ldr	r2, [r2, #4]
 8020d92:	6443      	str	r3, [r0, #68]	; 0x44
 8020d94:	9b02      	ldr	r3, [sp, #8]
 8020d96:	60c2      	str	r2, [r0, #12]
 8020d98:	7401      	strb	r1, [r0, #16]
 8020d9a:	6141      	str	r1, [r0, #20]
 8020d9c:	7601      	strb	r1, [r0, #24]
 8020d9e:	8701      	strh	r1, [r0, #56]	; 0x38
 8020da0:	8401      	strh	r1, [r0, #32]
 8020da2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8020da6:	6483      	str	r3, [r0, #72]	; 0x48
 8020da8:	bc30      	pop	{r4, r5}
 8020daa:	f7e8 bf09 	b.w	8009bc0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08020dae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8020dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020db0:	4605      	mov	r5, r0
 8020db2:	4608      	mov	r0, r1
 8020db4:	b1f1      	cbz	r1, 8020df4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8020db6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8020dba:	460b      	mov	r3, r1
 8020dbc:	f101 0708 	add.w	r7, r1, #8
 8020dc0:	4622      	mov	r2, r4
 8020dc2:	6818      	ldr	r0, [r3, #0]
 8020dc4:	3308      	adds	r3, #8
 8020dc6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8020dca:	4626      	mov	r6, r4
 8020dcc:	42bb      	cmp	r3, r7
 8020dce:	c603      	stmia	r6!, {r0, r1}
 8020dd0:	4634      	mov	r4, r6
 8020dd2:	d1f6      	bne.n	8020dc2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8020dd4:	6818      	ldr	r0, [r3, #0]
 8020dd6:	6030      	str	r0, [r6, #0]
 8020dd8:	4610      	mov	r0, r2
 8020dda:	889b      	ldrh	r3, [r3, #4]
 8020ddc:	80b3      	strh	r3, [r6, #4]
 8020dde:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8020de2:	015b      	lsls	r3, r3, #5
 8020de4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8020de8:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8020dec:	430b      	orrs	r3, r1
 8020dee:	425b      	negs	r3, r3
 8020df0:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8020df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020df6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8020df6:	b538      	push	{r3, r4, r5, lr}
 8020df8:	460c      	mov	r4, r1
 8020dfa:	6811      	ldr	r1, [r2, #0]
 8020dfc:	4610      	mov	r0, r2
 8020dfe:	68cd      	ldr	r5, [r1, #12]
 8020e00:	4619      	mov	r1, r3
 8020e02:	47a8      	blx	r5
 8020e04:	2800      	cmp	r0, #0
 8020e06:	bf08      	it	eq
 8020e08:	4620      	moveq	r0, r4
 8020e0a:	bd38      	pop	{r3, r4, r5, pc}

08020e0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8020e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e0e:	4604      	mov	r4, r0
 8020e10:	4615      	mov	r5, r2
 8020e12:	4608      	mov	r0, r1
 8020e14:	b93a      	cbnz	r2, 8020e26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8020e16:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8020e1a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8020e1e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8020e22:	4628      	mov	r0, r5
 8020e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020e26:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8020e2a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8020e2e:	8893      	ldrh	r3, [r2, #4]
 8020e30:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8020e34:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8020e38:	79ee      	ldrb	r6, [r5, #7]
 8020e3a:	4316      	orrs	r6, r2
 8020e3c:	19da      	adds	r2, r3, r7
 8020e3e:	b291      	uxth	r1, r2
 8020e40:	b2b7      	uxth	r7, r6
 8020e42:	291d      	cmp	r1, #29
 8020e44:	d87b      	bhi.n	8020f3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8020e46:	2201      	movs	r2, #1
 8020e48:	10f6      	asrs	r6, r6, #3
 8020e4a:	408a      	lsls	r2, r1
 8020e4c:	4974      	ldr	r1, [pc, #464]	; (8021020 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8020e4e:	420a      	tst	r2, r1
 8020e50:	d12e      	bne.n	8020eb0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8020e52:	f412 7f60 	tst.w	r2, #896	; 0x380
 8020e56:	d072      	beq.n	8020f3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8020e58:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8020e5c:	462b      	mov	r3, r5
 8020e5e:	f105 0e08 	add.w	lr, r5, #8
 8020e62:	4615      	mov	r5, r2
 8020e64:	6818      	ldr	r0, [r3, #0]
 8020e66:	3308      	adds	r3, #8
 8020e68:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8020e6c:	4694      	mov	ip, r2
 8020e6e:	4573      	cmp	r3, lr
 8020e70:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8020e74:	4662      	mov	r2, ip
 8020e76:	d1f5      	bne.n	8020e64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8020e78:	6818      	ldr	r0, [r3, #0]
 8020e7a:	f8cc 0000 	str.w	r0, [ip]
 8020e7e:	889b      	ldrh	r3, [r3, #4]
 8020e80:	f8ac 3004 	strh.w	r3, [ip, #4]
 8020e84:	b2b3      	uxth	r3, r6
 8020e86:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8020e8a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8020e8e:	1aca      	subs	r2, r1, r3
 8020e90:	1bcf      	subs	r7, r1, r7
 8020e92:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8020e96:	b292      	uxth	r2, r2
 8020e98:	1afb      	subs	r3, r7, r3
 8020e9a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8020e9e:	10d2      	asrs	r2, r2, #3
 8020ea0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8020ea4:	4302      	orrs	r2, r0
 8020ea6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8020eaa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8020eae:	e7b8      	b.n	8020e22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8020eb0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8020eb2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020eb6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8020eb8:	f640 6333 	movw	r3, #3635	; 0xe33
 8020ebc:	4299      	cmp	r1, r3
 8020ebe:	d110      	bne.n	8020ee2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8020ec0:	6803      	ldr	r3, [r0, #0]
 8020ec2:	68db      	ldr	r3, [r3, #12]
 8020ec4:	4798      	blx	r3
 8020ec6:	7b41      	ldrb	r1, [r0, #13]
 8020ec8:	00cb      	lsls	r3, r1, #3
 8020eca:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020ece:	7a03      	ldrb	r3, [r0, #8]
 8020ed0:	0648      	lsls	r0, r1, #25
 8020ed2:	ea43 0302 	orr.w	r3, r3, r2
 8020ed6:	bf44      	itt	mi
 8020ed8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020edc:	b21b      	sxthmi	r3, r3
 8020ede:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020ee2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8020ee6:	462a      	mov	r2, r5
 8020ee8:	f105 0c08 	add.w	ip, r5, #8
 8020eec:	443b      	add	r3, r7
 8020eee:	4433      	add	r3, r6
 8020ef0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8020ef4:	b29b      	uxth	r3, r3
 8020ef6:	4635      	mov	r5, r6
 8020ef8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020efc:	6810      	ldr	r0, [r2, #0]
 8020efe:	3208      	adds	r2, #8
 8020f00:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8020f04:	4637      	mov	r7, r6
 8020f06:	4562      	cmp	r2, ip
 8020f08:	c703      	stmia	r7!, {r0, r1}
 8020f0a:	463e      	mov	r6, r7
 8020f0c:	d1f6      	bne.n	8020efc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8020f0e:	6810      	ldr	r0, [r2, #0]
 8020f10:	6038      	str	r0, [r7, #0]
 8020f12:	8892      	ldrh	r2, [r2, #4]
 8020f14:	80ba      	strh	r2, [r7, #4]
 8020f16:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8020f1a:	10db      	asrs	r3, r3, #3
 8020f1c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8020f20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020f24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8020f28:	4313      	orrs	r3, r2
 8020f2a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8020f2e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8020f32:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8020f36:	1a9b      	subs	r3, r3, r2
 8020f38:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8020f3c:	e771      	b.n	8020e22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8020f3e:	f023 0204 	bic.w	r2, r3, #4
 8020f42:	f640 611b 	movw	r1, #3611	; 0xe1b
 8020f46:	428a      	cmp	r2, r1
 8020f48:	d003      	beq.n	8020f52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8020f4a:	f640 621d 	movw	r2, #3613	; 0xe1d
 8020f4e:	4293      	cmp	r3, r2
 8020f50:	d120      	bne.n	8020f94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8020f52:	3b01      	subs	r3, #1
 8020f54:	4602      	mov	r2, r0
 8020f56:	4629      	mov	r1, r5
 8020f58:	4620      	mov	r0, r4
 8020f5a:	b29b      	uxth	r3, r3
 8020f5c:	f7ff ff4b 	bl	8020df6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020f60:	7b41      	ldrb	r1, [r0, #13]
 8020f62:	00cb      	lsls	r3, r1, #3
 8020f64:	0649      	lsls	r1, r1, #25
 8020f66:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020f6a:	7a03      	ldrb	r3, [r0, #8]
 8020f6c:	ea43 0302 	orr.w	r3, r3, r2
 8020f70:	bf44      	itt	mi
 8020f72:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020f76:	b21b      	sxthmi	r3, r3
 8020f78:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020f7c:	7b6b      	ldrb	r3, [r5, #13]
 8020f7e:	7aaa      	ldrb	r2, [r5, #10]
 8020f80:	005b      	lsls	r3, r3, #1
 8020f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020f86:	4313      	orrs	r3, r2
 8020f88:	115a      	asrs	r2, r3, #5
 8020f8a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8020f8e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8020f92:	e035      	b.n	8021000 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8020f94:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8020f98:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8020f9c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8020fa0:	7a2a      	ldrb	r2, [r5, #8]
 8020fa2:	ea42 0201 	orr.w	r2, r2, r1
 8020fa6:	f640 6109 	movw	r1, #3593	; 0xe09
 8020faa:	bf1c      	itt	ne
 8020fac:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8020fb0:	b212      	sxthne	r2, r2
 8020fb2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8020fb6:	f023 0210 	bic.w	r2, r3, #16
 8020fba:	428a      	cmp	r2, r1
 8020fbc:	d003      	beq.n	8020fc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8020fbe:	f640 6213 	movw	r2, #3603	; 0xe13
 8020fc2:	4293      	cmp	r3, r2
 8020fc4:	d129      	bne.n	802101a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8020fc6:	7b6e      	ldrb	r6, [r5, #13]
 8020fc8:	4629      	mov	r1, r5
 8020fca:	0076      	lsls	r6, r6, #1
 8020fcc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8020fd0:	7aae      	ldrb	r6, [r5, #10]
 8020fd2:	4316      	orrs	r6, r2
 8020fd4:	f640 6213 	movw	r2, #3603	; 0xe13
 8020fd8:	4293      	cmp	r3, r2
 8020fda:	4602      	mov	r2, r0
 8020fdc:	4620      	mov	r0, r4
 8020fde:	bf16      	itet	ne
 8020fe0:	f103 33ff 	addne.w	r3, r3, #4294967295
 8020fe4:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8020fe8:	b29b      	uxthne	r3, r3
 8020fea:	f7ff ff04 	bl	8020df6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020fee:	7b43      	ldrb	r3, [r0, #13]
 8020ff0:	7a82      	ldrb	r2, [r0, #10]
 8020ff2:	005b      	lsls	r3, r3, #1
 8020ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020ff8:	4313      	orrs	r3, r2
 8020ffa:	1af6      	subs	r6, r6, r3
 8020ffc:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8021000:	7b69      	ldrb	r1, [r5, #13]
 8021002:	00cb      	lsls	r3, r1, #3
 8021004:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8021008:	7a2b      	ldrb	r3, [r5, #8]
 802100a:	4313      	orrs	r3, r2
 802100c:	064a      	lsls	r2, r1, #25
 802100e:	bf44      	itt	mi
 8021010:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8021014:	b21b      	sxthmi	r3, r3
 8021016:	1bdb      	subs	r3, r3, r7
 8021018:	e747      	b.n	8020eaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 802101a:	2300      	movs	r3, #0
 802101c:	e7b7      	b.n	8020f8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 802101e:	bf00      	nop
 8021020:	3fc00079 	.word	0x3fc00079

08021024 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8021024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021028:	4604      	mov	r4, r0
 802102a:	b942      	cbnz	r2, 802103e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 802102c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021030:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8021034:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8021038:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 802103c:	e047      	b.n	80210ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 802103e:	7b51      	ldrb	r1, [r2, #13]
 8021040:	8893      	ldrh	r3, [r2, #4]
 8021042:	010d      	lsls	r5, r1, #4
 8021044:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8021048:	79d5      	ldrb	r5, [r2, #7]
 802104a:	4305      	orrs	r5, r0
 802104c:	2d04      	cmp	r5, #4
 802104e:	bfcc      	ite	gt
 8021050:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8021054:	f04f 0e01 	movle.w	lr, #1
 8021058:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 802105c:	f200 80ab 	bhi.w	80211b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8021060:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8021064:	4283      	cmp	r3, r0
 8021066:	d216      	bcs.n	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8021068:	f240 605b 	movw	r0, #1627	; 0x65b
 802106c:	4283      	cmp	r3, r0
 802106e:	d859      	bhi.n	8021124 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8021070:	f240 6057 	movw	r0, #1623	; 0x657
 8021074:	4283      	cmp	r3, r0
 8021076:	d20e      	bcs.n	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8021078:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 802107c:	d24a      	bcs.n	8021114 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 802107e:	f240 604e 	movw	r0, #1614	; 0x64e
 8021082:	4283      	cmp	r3, r0
 8021084:	d207      	bcs.n	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8021086:	f240 601a 	movw	r0, #1562	; 0x61a
 802108a:	4283      	cmp	r3, r0
 802108c:	d02a      	beq.n	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802108e:	d821      	bhi.n	80210d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8021090:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8021094:	d35b      	bcc.n	802114e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8021096:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 802109a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802109e:	f040 80d0 	bne.w	8021242 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80210a2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80210a6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80210aa:	f040 80ca 	bne.w	8021242 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80210ae:	00cb      	lsls	r3, r1, #3
 80210b0:	0649      	lsls	r1, r1, #25
 80210b2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80210b6:	7a13      	ldrb	r3, [r2, #8]
 80210b8:	ea43 0300 	orr.w	r3, r3, r0
 80210bc:	bf44      	itt	mi
 80210be:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80210c2:	b21b      	sxthmi	r3, r3
 80210c4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80210c8:	1b5d      	subs	r5, r3, r5
 80210ca:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80210ce:	4610      	mov	r0, r2
 80210d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80210d4:	f240 604b 	movw	r0, #1611	; 0x64b
 80210d8:	4283      	cmp	r3, r0
 80210da:	d338      	bcc.n	802114e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80210dc:	f240 604c 	movw	r0, #1612	; 0x64c
 80210e0:	4283      	cmp	r3, r0
 80210e2:	d9d8      	bls.n	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80210e4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80210e8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80210ec:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80210f0:	f040 80f3 	bne.w	80212da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80210f4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80210f8:	f040 80ef 	bne.w	80212da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80210fc:	00cb      	lsls	r3, r1, #3
 80210fe:	064e      	lsls	r6, r1, #25
 8021100:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8021104:	7a13      	ldrb	r3, [r2, #8]
 8021106:	ea43 0300 	orr.w	r3, r3, r0
 802110a:	bf44      	itt	mi
 802110c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8021110:	b21b      	sxthmi	r3, r3
 8021112:	e7d9      	b.n	80210c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8021114:	f240 6054 	movw	r0, #1620	; 0x654
 8021118:	4283      	cmp	r3, r0
 802111a:	d8e3      	bhi.n	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802111c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8021120:	d9e0      	bls.n	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8021122:	e7b8      	b.n	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8021124:	f240 6074 	movw	r0, #1652	; 0x674
 8021128:	4283      	cmp	r3, r0
 802112a:	d0b4      	beq.n	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802112c:	d82d      	bhi.n	802118a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 802112e:	f240 605e 	movw	r0, #1630	; 0x65e
 8021132:	4283      	cmp	r3, r0
 8021134:	d804      	bhi.n	8021140 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8021136:	f240 605d 	movw	r0, #1629	; 0x65d
 802113a:	4283      	cmp	r3, r0
 802113c:	d3d2      	bcc.n	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802113e:	e7aa      	b.n	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8021140:	f240 605f 	movw	r0, #1631	; 0x65f
 8021144:	4283      	cmp	r3, r0
 8021146:	d0cd      	beq.n	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8021148:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 802114c:	d0a3      	beq.n	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802114e:	00cb      	lsls	r3, r1, #3
 8021150:	0649      	lsls	r1, r1, #25
 8021152:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8021156:	7a13      	ldrb	r3, [r2, #8]
 8021158:	ea43 0300 	orr.w	r3, r3, r0
 802115c:	bf44      	itt	mi
 802115e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8021162:	b21b      	sxthmi	r3, r3
 8021164:	1b5d      	subs	r5, r3, r5
 8021166:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 802116a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 802116e:	7b53      	ldrb	r3, [r2, #13]
 8021170:	015b      	lsls	r3, r3, #5
 8021172:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8021176:	7993      	ldrb	r3, [r2, #6]
 8021178:	430b      	orrs	r3, r1
 802117a:	2105      	movs	r1, #5
 802117c:	005b      	lsls	r3, r3, #1
 802117e:	fb93 f3f1 	sdiv	r3, r3, r1
 8021182:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8021186:	440b      	add	r3, r1
 8021188:	e756      	b.n	8021038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 802118a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 802118e:	4283      	cmp	r3, r0
 8021190:	d809      	bhi.n	80211a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8021192:	f240 60df 	movw	r0, #1759	; 0x6df
 8021196:	4283      	cmp	r3, r0
 8021198:	f4bf af7d 	bcs.w	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802119c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80211a0:	2b05      	cmp	r3, #5
 80211a2:	d8d4      	bhi.n	802114e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80211a4:	e777      	b.n	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80211a6:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80211aa:	4283      	cmp	r3, r0
 80211ac:	d09a      	beq.n	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80211ae:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80211b2:	4283      	cmp	r3, r0
 80211b4:	e7ca      	b.n	802114c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80211b6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80211ba:	d22b      	bcs.n	8021214 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80211bc:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80211c0:	4283      	cmp	r3, r0
 80211c2:	d28f      	bcs.n	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80211c4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80211c8:	4283      	cmp	r3, r0
 80211ca:	d816      	bhi.n	80211fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80211cc:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80211d0:	4283      	cmp	r3, r0
 80211d2:	f4bf af60 	bcs.w	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80211d6:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80211da:	4283      	cmp	r3, r0
 80211dc:	d80a      	bhi.n	80211f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80211de:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80211e2:	4283      	cmp	r3, r0
 80211e4:	f4bf af57 	bcs.w	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80211e8:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80211ec:	4283      	cmp	r3, r0
 80211ee:	f43f af79 	beq.w	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80211f2:	e7ac      	b.n	802114e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80211f4:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80211f8:	e7f8      	b.n	80211ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80211fa:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80211fe:	4283      	cmp	r3, r0
 8021200:	d802      	bhi.n	8021208 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8021202:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8021206:	e798      	b.n	802113a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8021208:	f640 00e9 	movw	r0, #2281	; 0x8e9
 802120c:	4283      	cmp	r3, r0
 802120e:	f47f af42 	bne.w	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8021212:	e767      	b.n	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8021214:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8021218:	4283      	cmp	r3, r0
 802121a:	f43f af63 	beq.w	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802121e:	d802      	bhi.n	8021226 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8021220:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8021224:	e7f2      	b.n	802120c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8021226:	f640 00fa 	movw	r0, #2298	; 0x8fa
 802122a:	4283      	cmp	r3, r0
 802122c:	d805      	bhi.n	802123a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 802122e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8021232:	4283      	cmp	r3, r0
 8021234:	f4ff af2f 	bcc.w	8021096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8021238:	e754      	b.n	80210e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802123a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 802123e:	4283      	cmp	r3, r0
 8021240:	e7af      	b.n	80211a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8021242:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8021246:	4617      	mov	r7, r2
 8021248:	f102 0808 	add.w	r8, r2, #8
 802124c:	4666      	mov	r6, ip
 802124e:	6838      	ldr	r0, [r7, #0]
 8021250:	3708      	adds	r7, #8
 8021252:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8021256:	46e6      	mov	lr, ip
 8021258:	4547      	cmp	r7, r8
 802125a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 802125e:	46f4      	mov	ip, lr
 8021260:	d1f5      	bne.n	802124e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8021262:	6838      	ldr	r0, [r7, #0]
 8021264:	f8ce 0000 	str.w	r0, [lr]
 8021268:	88b9      	ldrh	r1, [r7, #4]
 802126a:	f8ae 1004 	strh.w	r1, [lr, #4]
 802126e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8021272:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8021276:	d009      	beq.n	802128c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8021278:	7b51      	ldrb	r1, [r2, #13]
 802127a:	7992      	ldrb	r2, [r2, #6]
 802127c:	0149      	lsls	r1, r1, #5
 802127e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8021282:	4311      	orrs	r1, r2
 8021284:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8021288:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 802128c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8021290:	b2ad      	uxth	r5, r5
 8021292:	d00d      	beq.n	80212b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8021294:	442b      	add	r3, r5
 8021296:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 802129a:	b29b      	uxth	r3, r3
 802129c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80212a0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80212a4:	10db      	asrs	r3, r3, #3
 80212a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80212aa:	4313      	orrs	r3, r2
 80212ac:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80212b0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80212b4:	00cb      	lsls	r3, r1, #3
 80212b6:	064f      	lsls	r7, r1, #25
 80212b8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80212bc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80212c0:	ea43 0302 	orr.w	r3, r3, r2
 80212c4:	bf44      	itt	mi
 80212c6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80212ca:	b21b      	sxthmi	r3, r3
 80212cc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80212d0:	1b5b      	subs	r3, r3, r5
 80212d2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80212d6:	4632      	mov	r2, r6
 80212d8:	e6f9      	b.n	80210ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80212da:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80212de:	4617      	mov	r7, r2
 80212e0:	f102 0908 	add.w	r9, r2, #8
 80212e4:	4666      	mov	r6, ip
 80212e6:	6838      	ldr	r0, [r7, #0]
 80212e8:	3708      	adds	r7, #8
 80212ea:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80212ee:	46e0      	mov	r8, ip
 80212f0:	454f      	cmp	r7, r9
 80212f2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80212f6:	46c4      	mov	ip, r8
 80212f8:	d1f5      	bne.n	80212e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80212fa:	6838      	ldr	r0, [r7, #0]
 80212fc:	f8c8 0000 	str.w	r0, [r8]
 8021300:	88b9      	ldrh	r1, [r7, #4]
 8021302:	f8a8 1004 	strh.w	r1, [r8, #4]
 8021306:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 802130a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 802130e:	d009      	beq.n	8021324 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8021310:	7b51      	ldrb	r1, [r2, #13]
 8021312:	7992      	ldrb	r2, [r2, #6]
 8021314:	0149      	lsls	r1, r1, #5
 8021316:	f401 7180 	and.w	r1, r1, #256	; 0x100
 802131a:	4311      	orrs	r1, r2
 802131c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8021320:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8021324:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8021328:	d00e      	beq.n	8021348 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 802132a:	eba3 030e 	sub.w	r3, r3, lr
 802132e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8021332:	b29b      	uxth	r3, r3
 8021334:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8021338:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 802133c:	10db      	asrs	r3, r3, #3
 802133e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021342:	4313      	orrs	r3, r2
 8021344:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8021348:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 802134c:	00cb      	lsls	r3, r1, #3
 802134e:	0648      	lsls	r0, r1, #25
 8021350:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8021354:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8021358:	ea43 0302 	orr.w	r3, r3, r2
 802135c:	bf44      	itt	mi
 802135e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8021362:	b21b      	sxthmi	r3, r3
 8021364:	1b5d      	subs	r5, r3, r5
 8021366:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 802136a:	e7b4      	b.n	80212d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0802136c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 802136c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021370:	461e      	mov	r6, r3
 8021372:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8021374:	4604      	mov	r4, r0
 8021376:	4617      	mov	r7, r2
 8021378:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802137c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8021380:	f7e8 fb78 	bl	8009a74 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8021384:	4605      	mov	r5, r0
 8021386:	b918      	cbnz	r0, 8021390 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8021388:	6030      	str	r0, [r6, #0]
 802138a:	4628      	mov	r0, r5
 802138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021390:	683b      	ldr	r3, [r7, #0]
 8021392:	4601      	mov	r1, r0
 8021394:	4638      	mov	r0, r7
 8021396:	68db      	ldr	r3, [r3, #12]
 8021398:	4798      	blx	r3
 802139a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 802139e:	4602      	mov	r2, r0
 80213a0:	6030      	str	r0, [r6, #0]
 80213a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80213a6:	d213      	bcs.n	80213d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80213a8:	4643      	mov	r3, r8
 80213aa:	4639      	mov	r1, r7
 80213ac:	4620      	mov	r0, r4
 80213ae:	f7ff fe39 	bl	8021024 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80213b2:	6030      	str	r0, [r6, #0]
 80213b4:	6833      	ldr	r3, [r6, #0]
 80213b6:	b143      	cbz	r3, 80213ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80213b8:	7b5a      	ldrb	r2, [r3, #13]
 80213ba:	7a9b      	ldrb	r3, [r3, #10]
 80213bc:	0052      	lsls	r2, r2, #1
 80213be:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80213c2:	4313      	orrs	r3, r2
 80213c4:	bf0c      	ite	eq
 80213c6:	2301      	moveq	r3, #1
 80213c8:	2300      	movne	r3, #0
 80213ca:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80213ce:	e7dc      	b.n	802138a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80213d0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80213d4:	b29b      	uxth	r3, r3
 80213d6:	2b7f      	cmp	r3, #127	; 0x7f
 80213d8:	d804      	bhi.n	80213e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80213da:	4639      	mov	r1, r7
 80213dc:	4620      	mov	r0, r4
 80213de:	f7ff fd15 	bl	8020e0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80213e2:	e7e6      	b.n	80213b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80213e4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	d0e3      	beq.n	80213b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80213ec:	f640 1302 	movw	r3, #2306	; 0x902
 80213f0:	429d      	cmp	r5, r3
 80213f2:	d1df      	bne.n	80213b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80213f4:	4601      	mov	r1, r0
 80213f6:	4620      	mov	r0, r4
 80213f8:	f7ff fcd9 	bl	8020dae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80213fc:	e7d9      	b.n	80213b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080213fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80213fe:	b510      	push	{r4, lr}
 8021400:	4604      	mov	r4, r0
 8021402:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8021406:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8021408:	b1e1      	cbz	r1, 8021444 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 802140a:	2b0a      	cmp	r3, #10
 802140c:	d02d      	beq.n	802146a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 802140e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8021410:	3901      	subs	r1, #1
 8021412:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8021416:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8021418:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 802141c:	1c51      	adds	r1, r2, #1
 802141e:	b289      	uxth	r1, r1
 8021420:	2901      	cmp	r1, #1
 8021422:	bf8a      	itet	hi
 8021424:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8021428:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 802142a:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 802142c:	1c5a      	adds	r2, r3, #1
 802142e:	8722      	strh	r2, [r4, #56]	; 0x38
 8021430:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8021432:	4413      	add	r3, r2
 8021434:	b29b      	uxth	r3, r3
 8021436:	2b09      	cmp	r3, #9
 8021438:	bf88      	it	hi
 802143a:	3b0a      	subhi	r3, #10
 802143c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021440:	8458      	strh	r0, [r3, #34]	; 0x22
 8021442:	e7de      	b.n	8021402 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8021444:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8021446:	2b0a      	cmp	r3, #10
 8021448:	d00f      	beq.n	802146a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 802144a:	4620      	mov	r0, r4
 802144c:	f7ff fc6e 	bl	8020d2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8021450:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8021452:	1c5a      	adds	r2, r3, #1
 8021454:	8722      	strh	r2, [r4, #56]	; 0x38
 8021456:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8021458:	4413      	add	r3, r2
 802145a:	b29b      	uxth	r3, r3
 802145c:	2b09      	cmp	r3, #9
 802145e:	bf88      	it	hi
 8021460:	3b0a      	subhi	r3, #10
 8021462:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021466:	8458      	strh	r0, [r3, #34]	; 0x22
 8021468:	e7ec      	b.n	8021444 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 802146a:	bd10      	pop	{r4, pc}

0802146c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 802146c:	b538      	push	{r3, r4, r5, lr}
 802146e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8021470:	4604      	mov	r4, r0
 8021472:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8021476:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8021478:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 802147a:	3a01      	subs	r2, #1
 802147c:	8702      	strh	r2, [r0, #56]	; 0x38
 802147e:	1c5a      	adds	r2, r3, #1
 8021480:	b292      	uxth	r2, r2
 8021482:	2a09      	cmp	r2, #9
 8021484:	bf8a      	itet	hi
 8021486:	3b09      	subhi	r3, #9
 8021488:	86c2      	strhls	r2, [r0, #54]	; 0x36
 802148a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 802148c:	f7ff ffb7 	bl	80213fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8021490:	8c23      	ldrh	r3, [r4, #32]
 8021492:	2b01      	cmp	r3, #1
 8021494:	bf9c      	itt	ls
 8021496:	3301      	addls	r3, #1
 8021498:	8423      	strhls	r3, [r4, #32]
 802149a:	8be3      	ldrh	r3, [r4, #30]
 802149c:	b90b      	cbnz	r3, 80214a2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 802149e:	2302      	movs	r3, #2
 80214a0:	83e3      	strh	r3, [r4, #30]
 80214a2:	8be3      	ldrh	r3, [r4, #30]
 80214a4:	4628      	mov	r0, r5
 80214a6:	3b01      	subs	r3, #1
 80214a8:	b29b      	uxth	r3, r3
 80214aa:	83e3      	strh	r3, [r4, #30]
 80214ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80214b0:	8365      	strh	r5, [r4, #26]
 80214b2:	bd38      	pop	{r3, r4, r5, pc}

080214b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80214b4:	428a      	cmp	r2, r1
 80214b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80214ba:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80214bc:	d932      	bls.n	8021524 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80214be:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80214c0:	1a54      	subs	r4, r2, r1
 80214c2:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80214c6:	19ee      	adds	r6, r5, r7
 80214c8:	fa1f fe84 	uxth.w	lr, r4
 80214cc:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80214d0:	3e01      	subs	r6, #1
 80214d2:	b2b4      	uxth	r4, r6
 80214d4:	eba4 090e 	sub.w	r9, r4, lr
 80214d8:	fa1f f989 	uxth.w	r9, r9
 80214dc:	2c09      	cmp	r4, #9
 80214de:	4626      	mov	r6, r4
 80214e0:	bf88      	it	hi
 80214e2:	f1a4 060a 	subhi.w	r6, r4, #10
 80214e6:	f1bc 0f00 	cmp.w	ip, #0
 80214ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80214ee:	bf08      	it	eq
 80214f0:	f04f 0c02 	moveq.w	ip, #2
 80214f4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80214f8:	b2a4      	uxth	r4, r4
 80214fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80214fe:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8021502:	454c      	cmp	r4, r9
 8021504:	fa1f fc8c 	uxth.w	ip, ip
 8021508:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 802150c:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8021510:	d1e4      	bne.n	80214dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8021512:	eba5 050e 	sub.w	r5, r5, lr
 8021516:	eb0e 0408 	add.w	r4, lr, r8
 802151a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 802151e:	8705      	strh	r5, [r0, #56]	; 0x38
 8021520:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8021524:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8021526:	250a      	movs	r5, #10
 8021528:	1a64      	subs	r4, r4, r1
 802152a:	4439      	add	r1, r7
 802152c:	b289      	uxth	r1, r1
 802152e:	8704      	strh	r4, [r0, #56]	; 0x38
 8021530:	2909      	cmp	r1, #9
 8021532:	bf88      	it	hi
 8021534:	390a      	subhi	r1, #10
 8021536:	86c1      	strh	r1, [r0, #54]	; 0x36
 8021538:	b18a      	cbz	r2, 802155e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 802153a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 802153c:	3a01      	subs	r2, #1
 802153e:	3101      	adds	r1, #1
 8021540:	b292      	uxth	r2, r2
 8021542:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8021546:	8701      	strh	r1, [r0, #56]	; 0x38
 8021548:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 802154a:	b901      	cbnz	r1, 802154e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 802154c:	86c5      	strh	r5, [r0, #54]	; 0x36
 802154e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8021550:	3901      	subs	r1, #1
 8021552:	b289      	uxth	r1, r1
 8021554:	86c1      	strh	r1, [r0, #54]	; 0x36
 8021556:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 802155a:	844c      	strh	r4, [r1, #34]	; 0x22
 802155c:	e7ec      	b.n	8021538 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 802155e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021562:	f7ff bf4c 	b.w	80213fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08021566 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8021566:	b570      	push	{r4, r5, r6, lr}
 8021568:	2500      	movs	r5, #0
 802156a:	4295      	cmp	r5, r2
 802156c:	d011      	beq.n	8021592 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 802156e:	8bc4      	ldrh	r4, [r0, #30]
 8021570:	f831 6b02 	ldrh.w	r6, [r1], #2
 8021574:	4414      	add	r4, r2
 8021576:	3c01      	subs	r4, #1
 8021578:	1b64      	subs	r4, r4, r5
 802157a:	b2a4      	uxth	r4, r4
 802157c:	2c01      	cmp	r4, #1
 802157e:	bf88      	it	hi
 8021580:	3c02      	subhi	r4, #2
 8021582:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8021586:	8b64      	ldrh	r4, [r4, #26]
 8021588:	42b4      	cmp	r4, r6
 802158a:	d117      	bne.n	80215bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 802158c:	3501      	adds	r5, #1
 802158e:	b2ad      	uxth	r5, r5
 8021590:	e7eb      	b.n	802156a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8021592:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021596:	2400      	movs	r4, #0
 8021598:	4413      	add	r3, r2
 802159a:	b2a2      	uxth	r2, r4
 802159c:	429a      	cmp	r2, r3
 802159e:	da0f      	bge.n	80215c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80215a0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80215a2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80215a6:	3401      	adds	r4, #1
 80215a8:	4432      	add	r2, r6
 80215aa:	b292      	uxth	r2, r2
 80215ac:	2a09      	cmp	r2, #9
 80215ae:	bf88      	it	hi
 80215b0:	3a0a      	subhi	r2, #10
 80215b2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80215b6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80215b8:	42aa      	cmp	r2, r5
 80215ba:	d0ee      	beq.n	802159a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80215bc:	2000      	movs	r0, #0
 80215be:	bd70      	pop	{r4, r5, r6, pc}
 80215c0:	2001      	movs	r0, #1
 80215c2:	e7fc      	b.n	80215be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080215c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80215c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215c8:	4605      	mov	r5, r0
 80215ca:	4616      	mov	r6, r2
 80215cc:	1c8c      	adds	r4, r1, #2
 80215ce:	8809      	ldrh	r1, [r1, #0]
 80215d0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80215d4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80215d8:	42b3      	cmp	r3, r6
 80215da:	d124      	bne.n	8021626 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80215dc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80215e0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80215e4:	f001 070f 	and.w	r7, r1, #15
 80215e8:	4652      	mov	r2, sl
 80215ea:	f8cd 8000 	str.w	r8, [sp]
 80215ee:	464b      	mov	r3, r9
 80215f0:	4621      	mov	r1, r4
 80215f2:	4628      	mov	r0, r5
 80215f4:	f7ff ffb7 	bl	8021566 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80215f8:	4683      	mov	fp, r0
 80215fa:	b168      	cbz	r0, 8021618 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80215fc:	eb0a 0109 	add.w	r1, sl, r9
 8021600:	463a      	mov	r2, r7
 8021602:	4628      	mov	r0, r5
 8021604:	4441      	add	r1, r8
 8021606:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 802160a:	4649      	mov	r1, r9
 802160c:	f7ff ff52 	bl	80214b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8021610:	4658      	mov	r0, fp
 8021612:	b003      	add	sp, #12
 8021614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021618:	eb07 010a 	add.w	r1, r7, sl
 802161c:	4449      	add	r1, r9
 802161e:	4441      	add	r1, r8
 8021620:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8021624:	e7d2      	b.n	80215cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8021626:	f04f 0b00 	mov.w	fp, #0
 802162a:	e7f1      	b.n	8021610 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0802162c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 802162c:	b570      	push	{r4, r5, r6, lr}
 802162e:	8810      	ldrh	r0, [r2, #0]
 8021630:	4298      	cmp	r0, r3
 8021632:	d817      	bhi.n	8021664 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8021634:	1e48      	subs	r0, r1, #1
 8021636:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 802163a:	4298      	cmp	r0, r3
 802163c:	d312      	bcc.n	8021664 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 802163e:	2400      	movs	r4, #0
 8021640:	428c      	cmp	r4, r1
 8021642:	d20f      	bcs.n	8021664 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8021644:	1860      	adds	r0, r4, r1
 8021646:	1040      	asrs	r0, r0, #1
 8021648:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 802164c:	0085      	lsls	r5, r0, #2
 802164e:	42b3      	cmp	r3, r6
 8021650:	d902      	bls.n	8021658 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8021652:	3001      	adds	r0, #1
 8021654:	b284      	uxth	r4, r0
 8021656:	e7f3      	b.n	8021640 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8021658:	d201      	bcs.n	802165e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 802165a:	b281      	uxth	r1, r0
 802165c:	e7f0      	b.n	8021640 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 802165e:	442a      	add	r2, r5
 8021660:	8850      	ldrh	r0, [r2, #2]
 8021662:	bd70      	pop	{r4, r5, r6, pc}
 8021664:	2000      	movs	r0, #0
 8021666:	e7fc      	b.n	8021662 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08021668 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8021668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802166c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 802166e:	4604      	mov	r4, r0
 8021670:	260b      	movs	r6, #11
 8021672:	886f      	ldrh	r7, [r5, #2]
 8021674:	087f      	lsrs	r7, r7, #1
 8021676:	3e01      	subs	r6, #1
 8021678:	d013      	beq.n	80216a2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 802167a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 802167c:	462a      	mov	r2, r5
 802167e:	4639      	mov	r1, r7
 8021680:	4620      	mov	r0, r4
 8021682:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021686:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 802168a:	4643      	mov	r3, r8
 802168c:	f7ff ffce 	bl	802162c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8021690:	b138      	cbz	r0, 80216a2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8021692:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8021696:	4642      	mov	r2, r8
 8021698:	4620      	mov	r0, r4
 802169a:	f7ff ff93 	bl	80215c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 802169e:	2800      	cmp	r0, #0
 80216a0:	d1e9      	bne.n	8021676 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80216a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080216a8 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 80216a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216aa:	2300      	movs	r3, #0
 80216ac:	b08d      	sub	sp, #52	; 0x34
 80216ae:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80216b2:	f101 0710 	add.w	r7, r1, #16
 80216b6:	9304      	str	r3, [sp, #16]
 80216b8:	aa04      	add	r2, sp, #16
 80216ba:	9305      	str	r3, [sp, #20]
 80216bc:	9306      	str	r3, [sp, #24]
 80216be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80216c2:	9307      	str	r3, [sp, #28]
 80216c4:	4613      	mov	r3, r2
 80216c6:	460c      	mov	r4, r1
 80216c8:	4605      	mov	r5, r0
 80216ca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8021704 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 80216ce:	ecb4 7a01 	vldmia	r4!, {s14}
 80216d2:	ecf5 6a01 	vldmia	r5!, {s13}
 80216d6:	42bc      	cmp	r4, r7
 80216d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80216dc:	d1f7      	bne.n	80216ce <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 80216de:	3010      	adds	r0, #16
 80216e0:	ece2 7a01 	vstmia	r2!, {s15}
 80216e4:	42b0      	cmp	r0, r6
 80216e6:	d1ee      	bne.n	80216c6 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 80216e8:	ac0c      	add	r4, sp, #48	; 0x30
 80216ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80216ec:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80216f0:	ed9d 0a08 	vldr	s0, [sp, #32]
 80216f4:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 80216f8:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 80216fc:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 8021700:	b00d      	add	sp, #52	; 0x34
 8021702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021704:	00000000 	.word	0x00000000

08021708 <_ZN8touchgfx9Matrix4x4C1Ev>:
 8021708:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802170c:	2300      	movs	r3, #0
 802170e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8021734 <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 8021712:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 8021716:	2200      	movs	r2, #0
 8021718:	4293      	cmp	r3, r2
 802171a:	f102 0201 	add.w	r2, r2, #1
 802171e:	fe47 6a87 	vseleq.f32	s13, s15, s14
 8021722:	2a04      	cmp	r2, #4
 8021724:	ece1 6a01 	vstmia	r1!, {s13}
 8021728:	d1f6      	bne.n	8021718 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 802172a:	3301      	adds	r3, #1
 802172c:	2b04      	cmp	r3, #4
 802172e:	d1f0      	bne.n	8021712 <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8021730:	4770      	bx	lr
 8021732:	bf00      	nop
 8021734:	00000000 	.word	0x00000000

08021738 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8021738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802173c:	460c      	mov	r4, r1
 802173e:	4605      	mov	r5, r0
 8021740:	4690      	mov	r8, r2
 8021742:	f7ff ffe1 	bl	8021708 <_ZN8touchgfx9Matrix4x4C1Ev>
 8021746:	4628      	mov	r0, r5
 8021748:	4621      	mov	r1, r4
 802174a:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 802174e:	2300      	movs	r3, #0
 8021750:	eb08 0603 	add.w	r6, r8, r3
 8021754:	460f      	mov	r7, r1
 8021756:	2400      	movs	r4, #0
 8021758:	eddf 7a0c 	vldr	s15, [pc, #48]	; 802178c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 802175c:	4632      	mov	r2, r6
 802175e:	3401      	adds	r4, #1
 8021760:	ecf7 6a01 	vldmia	r7!, {s13}
 8021764:	3610      	adds	r6, #16
 8021766:	ed92 7a00 	vldr	s14, [r2]
 802176a:	2c04      	cmp	r4, #4
 802176c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021770:	d1f4      	bne.n	802175c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 8021772:	18c2      	adds	r2, r0, r3
 8021774:	3304      	adds	r3, #4
 8021776:	2b10      	cmp	r3, #16
 8021778:	edc2 7a00 	vstr	s15, [r2]
 802177c:	d1e8      	bne.n	8021750 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 802177e:	3110      	adds	r1, #16
 8021780:	3010      	adds	r0, #16
 8021782:	4561      	cmp	r1, ip
 8021784:	d1e3      	bne.n	802174e <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 8021786:	4628      	mov	r0, r5
 8021788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802178c:	00000000 	.word	0x00000000

08021790 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8021790:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021794:	f100 0320 	add.w	r3, r0, #32
 8021798:	3030      	adds	r0, #48	; 0x30
 802179a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 802179e:	ecf3 7a01 	vldmia	r3!, {s15}
 80217a2:	4283      	cmp	r3, r0
 80217a4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80217a8:	edc3 7a03 	vstr	s15, [r3, #12]
 80217ac:	d1f7      	bne.n	802179e <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 80217ae:	4770      	bx	lr

080217b0 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 80217b0:	b510      	push	{r4, lr}
 80217b2:	ed2d 8b02 	vpush	{d8}
 80217b6:	eef0 8a40 	vmov.f32	s17, s0
 80217ba:	4604      	mov	r4, r0
 80217bc:	f009 f9a4 	bl	802ab08 <sinf>
 80217c0:	eeb0 8a40 	vmov.f32	s16, s0
 80217c4:	eeb0 0a68 	vmov.f32	s0, s17
 80217c8:	f009 f8b6 	bl	802a938 <cosf>
 80217cc:	eeb1 6a48 	vneg.f32	s12, s16
 80217d0:	f104 0310 	add.w	r3, r4, #16
 80217d4:	f104 0220 	add.w	r2, r4, #32
 80217d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80217dc:	edd3 6a00 	vldr	s13, [r3]
 80217e0:	ee26 7a27 	vmul.f32	s14, s12, s15
 80217e4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80217e8:	eea6 7a80 	vfma.f32	s14, s13, s0
 80217ec:	eee6 7a88 	vfma.f32	s15, s13, s16
 80217f0:	eca3 7a01 	vstmia	r3!, {s14}
 80217f4:	429a      	cmp	r2, r3
 80217f6:	edc3 7a03 	vstr	s15, [r3, #12]
 80217fa:	d1ed      	bne.n	80217d8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 80217fc:	4620      	mov	r0, r4
 80217fe:	ecbd 8b02 	vpop	{d8}
 8021802:	bd10      	pop	{r4, pc}

08021804 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8021804:	b510      	push	{r4, lr}
 8021806:	ed2d 8b02 	vpush	{d8}
 802180a:	eef0 8a40 	vmov.f32	s17, s0
 802180e:	4604      	mov	r4, r0
 8021810:	f009 f97a 	bl	802ab08 <sinf>
 8021814:	eeb0 8a40 	vmov.f32	s16, s0
 8021818:	eeb0 0a68 	vmov.f32	s0, s17
 802181c:	f009 f88c 	bl	802a938 <cosf>
 8021820:	eeb1 6a48 	vneg.f32	s12, s16
 8021824:	4623      	mov	r3, r4
 8021826:	f104 0210 	add.w	r2, r4, #16
 802182a:	edd3 7a08 	vldr	s15, [r3, #32]
 802182e:	edd3 6a00 	vldr	s13, [r3]
 8021832:	ee27 7a88 	vmul.f32	s14, s15, s16
 8021836:	ee67 7a80 	vmul.f32	s15, s15, s0
 802183a:	eea6 7a80 	vfma.f32	s14, s13, s0
 802183e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8021842:	eca3 7a01 	vstmia	r3!, {s14}
 8021846:	429a      	cmp	r2, r3
 8021848:	edc3 7a07 	vstr	s15, [r3, #28]
 802184c:	d1ed      	bne.n	802182a <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 802184e:	4620      	mov	r0, r4
 8021850:	ecbd 8b02 	vpop	{d8}
 8021854:	bd10      	pop	{r4, pc}

08021856 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 8021856:	b510      	push	{r4, lr}
 8021858:	ed2d 8b02 	vpush	{d8}
 802185c:	eef0 8a40 	vmov.f32	s17, s0
 8021860:	4604      	mov	r4, r0
 8021862:	f009 f951 	bl	802ab08 <sinf>
 8021866:	eeb0 8a40 	vmov.f32	s16, s0
 802186a:	eeb0 0a68 	vmov.f32	s0, s17
 802186e:	f009 f863 	bl	802a938 <cosf>
 8021872:	eeb1 6a48 	vneg.f32	s12, s16
 8021876:	4623      	mov	r3, r4
 8021878:	f104 0210 	add.w	r2, r4, #16
 802187c:	edd3 7a04 	vldr	s15, [r3, #16]
 8021880:	edd3 6a00 	vldr	s13, [r3]
 8021884:	ee26 7a27 	vmul.f32	s14, s12, s15
 8021888:	ee67 7a80 	vmul.f32	s15, s15, s0
 802188c:	eea6 7a80 	vfma.f32	s14, s13, s0
 8021890:	eee6 7a88 	vfma.f32	s15, s13, s16
 8021894:	eca3 7a01 	vstmia	r3!, {s14}
 8021898:	429a      	cmp	r2, r3
 802189a:	edc3 7a03 	vstr	s15, [r3, #12]
 802189e:	d1ed      	bne.n	802187c <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 80218a0:	4620      	mov	r0, r4
 80218a2:	ecbd 8b02 	vpop	{d8}
 80218a6:	bd10      	pop	{r4, pc}

080218a8 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 80218a8:	4603      	mov	r3, r0
 80218aa:	f100 0210 	add.w	r2, r0, #16
 80218ae:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80218b2:	edd3 7a00 	vldr	s15, [r3]
 80218b6:	eee7 7a00 	vfma.f32	s15, s14, s0
 80218ba:	ece3 7a01 	vstmia	r3!, {s15}
 80218be:	4293      	cmp	r3, r2
 80218c0:	d1f5      	bne.n	80218ae <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 80218c2:	4770      	bx	lr

080218c4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 80218c4:	f100 0310 	add.w	r3, r0, #16
 80218c8:	f100 0220 	add.w	r2, r0, #32
 80218cc:	ed93 7a08 	vldr	s14, [r3, #32]
 80218d0:	edd3 7a00 	vldr	s15, [r3]
 80218d4:	eee7 7a00 	vfma.f32	s15, s14, s0
 80218d8:	ece3 7a01 	vstmia	r3!, {s15}
 80218dc:	4293      	cmp	r3, r2
 80218de:	d1f5      	bne.n	80218cc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 80218e0:	4770      	bx	lr

080218e2 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 80218e2:	f100 0320 	add.w	r3, r0, #32
 80218e6:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80218ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80218ee:	edd3 7a00 	vldr	s15, [r3]
 80218f2:	eee7 7a00 	vfma.f32	s15, s14, s0
 80218f6:	ece3 7a01 	vstmia	r3!, {s15}
 80218fa:	4293      	cmp	r3, r2
 80218fc:	d1f5      	bne.n	80218ea <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 80218fe:	4770      	bx	lr

08021900 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8021900:	4603      	mov	r3, r0
 8021902:	f100 0210 	add.w	r2, r0, #16
 8021906:	edd3 7a00 	vldr	s15, [r3]
 802190a:	ee67 7a80 	vmul.f32	s15, s15, s0
 802190e:	ece3 7a01 	vstmia	r3!, {s15}
 8021912:	4293      	cmp	r3, r2
 8021914:	d1f7      	bne.n	8021906 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 8021916:	4770      	bx	lr

08021918 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 8021918:	f100 0310 	add.w	r3, r0, #16
 802191c:	f100 0220 	add.w	r2, r0, #32
 8021920:	edd3 7a00 	vldr	s15, [r3]
 8021924:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021928:	ece3 7a01 	vstmia	r3!, {s15}
 802192c:	4293      	cmp	r3, r2
 802192e:	d1f7      	bne.n	8021920 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 8021930:	4770      	bx	lr

08021932 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 8021932:	f100 0320 	add.w	r3, r0, #32
 8021936:	f100 0230 	add.w	r2, r0, #48	; 0x30
 802193a:	edd3 7a00 	vldr	s15, [r3]
 802193e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021942:	ece3 7a01 	vstmia	r3!, {s15}
 8021946:	4293      	cmp	r3, r2
 8021948:	d1f7      	bne.n	802193a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 802194a:	4770      	bx	lr

0802194c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 802194c:	b570      	push	{r4, r5, r6, lr}
 802194e:	694a      	ldr	r2, [r1, #20]
 8021950:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8021952:	684b      	ldr	r3, [r1, #4]
 8021954:	1b54      	subs	r4, r2, r5
 8021956:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8021958:	f000 8106 	beq.w	8021b68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 802195c:	1b9b      	subs	r3, r3, r6
 802195e:	d003      	beq.n	8021968 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8021960:	4363      	muls	r3, r4
 8021962:	2210      	movs	r2, #16
 8021964:	fb93 f3f2 	sdiv	r3, r3, r2
 8021968:	680c      	ldr	r4, [r1, #0]
 802196a:	698a      	ldr	r2, [r1, #24]
 802196c:	1b65      	subs	r5, r4, r5
 802196e:	f000 80fd 	beq.w	8021b6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8021972:	1b92      	subs	r2, r2, r6
 8021974:	d003      	beq.n	802197e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8021976:	436a      	muls	r2, r5
 8021978:	2410      	movs	r4, #16
 802197a:	fb92 f2f4 	sdiv	r2, r2, r4
 802197e:	1a9b      	subs	r3, r3, r2
 8021980:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8021ba8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8021984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021988:	460a      	mov	r2, r1
 802198a:	ee07 3a90 	vmov	s15, r3
 802198e:	f100 040c 	add.w	r4, r0, #12
 8021992:	4603      	mov	r3, r0
 8021994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021998:	ee67 7a84 	vmul.f32	s15, s15, s8
 802199c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80219a0:	eeb1 6a43 	vneg.f32	s12, s6
 80219a4:	edd2 7a02 	vldr	s15, [r2, #8]
 80219a8:	3214      	adds	r2, #20
 80219aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80219ae:	ece3 6a01 	vstmia	r3!, {s13}
 80219b2:	429c      	cmp	r4, r3
 80219b4:	ed52 7a02 	vldr	s15, [r2, #-8]
 80219b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80219bc:	edc3 7a02 	vstr	s15, [r3, #8]
 80219c0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80219c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80219c8:	edc3 7a05 	vstr	s15, [r3, #20]
 80219cc:	d1ea      	bne.n	80219a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80219ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80219d0:	698b      	ldr	r3, [r1, #24]
 80219d2:	edd0 4a02 	vldr	s9, [r0, #8]
 80219d6:	1a9b      	subs	r3, r3, r2
 80219d8:	edd0 3a00 	vldr	s7, [r0]
 80219dc:	edd0 6a01 	vldr	s13, [r0, #4]
 80219e0:	ee07 3a90 	vmov	s15, r3
 80219e4:	684b      	ldr	r3, [r1, #4]
 80219e6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80219ea:	ed90 5a05 	vldr	s10, [r0, #20]
 80219ee:	1a9b      	subs	r3, r3, r2
 80219f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80219f4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80219f8:	ed90 2a03 	vldr	s4, [r0, #12]
 80219fc:	ee07 3a10 	vmov	s14, r3
 8021a00:	edd0 5a04 	vldr	s11, [r0, #16]
 8021a04:	ee67 7a84 	vmul.f32	s15, s15, s8
 8021a08:	ed90 1a07 	vldr	s2, [r0, #28]
 8021a0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021a10:	edd0 2a06 	vldr	s5, [r0, #24]
 8021a14:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8021a18:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8021a1c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021a20:	ee32 5a45 	vsub.f32	s10, s4, s10
 8021a24:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021a28:	ee67 7a83 	vmul.f32	s15, s15, s6
 8021a2c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8021a30:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8021a32:	694a      	ldr	r2, [r1, #20]
 8021a34:	1b13      	subs	r3, r2, r4
 8021a36:	ee07 3a10 	vmov	s14, r3
 8021a3a:	680b      	ldr	r3, [r1, #0]
 8021a3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021a40:	1b1b      	subs	r3, r3, r4
 8021a42:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021a46:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8021a4a:	ee07 3a10 	vmov	s14, r3
 8021a4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021a52:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021a56:	eee6 4a87 	vfma.f32	s9, s13, s14
 8021a5a:	ee64 4a86 	vmul.f32	s9, s9, s12
 8021a5e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8021a62:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8021a64:	698b      	ldr	r3, [r1, #24]
 8021a66:	1a9b      	subs	r3, r3, r2
 8021a68:	ee06 3a90 	vmov	s13, r3
 8021a6c:	684b      	ldr	r3, [r1, #4]
 8021a6e:	1a9b      	subs	r3, r3, r2
 8021a70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8021a74:	ee07 3a10 	vmov	s14, r3
 8021a78:	ee66 6a84 	vmul.f32	s13, s13, s8
 8021a7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021a80:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8021a84:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021a88:	eee5 6a87 	vfma.f32	s13, s11, s14
 8021a8c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8021a90:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8021a94:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8021a96:	694a      	ldr	r2, [r1, #20]
 8021a98:	1b13      	subs	r3, r2, r4
 8021a9a:	ee07 3a10 	vmov	s14, r3
 8021a9e:	680b      	ldr	r3, [r1, #0]
 8021aa0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021aa4:	1b1b      	subs	r3, r3, r4
 8021aa6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021aaa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8021aae:	ee07 3a10 	vmov	s14, r3
 8021ab2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021ab6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021aba:	eea5 5a87 	vfma.f32	s10, s11, s14
 8021abe:	edd0 5a08 	vldr	s11, [r0, #32]
 8021ac2:	ee31 1a65 	vsub.f32	s2, s2, s11
 8021ac6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8021aca:	ee25 5a06 	vmul.f32	s10, s10, s12
 8021ace:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8021ad2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8021ad4:	698b      	ldr	r3, [r1, #24]
 8021ad6:	1a9b      	subs	r3, r3, r2
 8021ad8:	ee07 3a10 	vmov	s14, r3
 8021adc:	684b      	ldr	r3, [r1, #4]
 8021ade:	1a9b      	subs	r3, r3, r2
 8021ae0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021ae4:	ee01 3a90 	vmov	s3, r3
 8021ae8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021aec:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021af0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8021af4:	ee61 1a84 	vmul.f32	s3, s3, s8
 8021af8:	eea1 7a21 	vfma.f32	s14, s2, s3
 8021afc:	ee27 7a03 	vmul.f32	s14, s14, s6
 8021b00:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8021b04:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8021b06:	694a      	ldr	r2, [r1, #20]
 8021b08:	1b13      	subs	r3, r2, r4
 8021b0a:	ee03 3a10 	vmov	s6, r3
 8021b0e:	680b      	ldr	r3, [r1, #0]
 8021b10:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8021b14:	1b1b      	subs	r3, r3, r4
 8021b16:	ee23 3a04 	vmul.f32	s6, s6, s8
 8021b1a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8021b1e:	ee03 3a10 	vmov	s6, r3
 8021b22:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8021b26:	ee23 4a04 	vmul.f32	s8, s6, s8
 8021b2a:	eee1 5a04 	vfma.f32	s11, s2, s8
 8021b2e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8021b32:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8021b36:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8021b3a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8021b3e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8021b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b46:	dd13      	ble.n	8021b70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8021b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021b4c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8021b50:	63c3      	str	r3, [r0, #60]	; 0x3c
 8021b52:	eee3 7a87 	vfma.f32	s15, s7, s14
 8021b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b5e:	dd15      	ble.n	8021b8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8021b60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021b64:	6403      	str	r3, [r0, #64]	; 0x40
 8021b66:	bd70      	pop	{r4, r5, r6, pc}
 8021b68:	4623      	mov	r3, r4
 8021b6a:	e6fd      	b.n	8021968 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8021b6c:	462a      	mov	r2, r5
 8021b6e:	e706      	b.n	802197e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8021b70:	d502      	bpl.n	8021b78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8021b72:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021b76:	e7e9      	b.n	8021b4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8021b78:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8021b7c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8021b80:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8021b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b88:	dade      	bge.n	8021b48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8021b8a:	e7f2      	b.n	8021b72 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8021b8c:	d502      	bpl.n	8021b94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8021b8e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021b92:	e7e7      	b.n	8021b64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8021b94:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8021b98:	eee3 4a86 	vfma.f32	s9, s7, s12
 8021b9c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8021ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ba4:	dadc      	bge.n	8021b60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8021ba6:	e7f2      	b.n	8021b8e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8021ba8:	3d800000 	.word	0x3d800000

08021bac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8021bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021bb0:	2714      	movs	r7, #20
 8021bb2:	435f      	muls	r7, r3
 8021bb4:	eb02 0c07 	add.w	ip, r2, r7
 8021bb8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8021bbc:	f115 0e0f 	adds.w	lr, r5, #15
 8021bc0:	f100 80a2 	bmi.w	8021d08 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8021bc4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8021bc8:	9c08      	ldr	r4, [sp, #32]
 8021bca:	2614      	movs	r6, #20
 8021bcc:	f8c0 e014 	str.w	lr, [r0, #20]
 8021bd0:	4366      	muls	r6, r4
 8021bd2:	eb02 0806 	add.w	r8, r2, r6
 8021bd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021bda:	f115 040f 	adds.w	r4, r5, #15
 8021bde:	f100 809f 	bmi.w	8021d20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8021be2:	1124      	asrs	r4, r4, #4
 8021be4:	eba4 040e 	sub.w	r4, r4, lr
 8021be8:	6184      	str	r4, [r0, #24]
 8021bea:	2c00      	cmp	r4, #0
 8021bec:	f000 808a 	beq.w	8021d04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8021bf0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8021bf4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8021bf8:	5995      	ldr	r5, [r2, r6]
 8021bfa:	eba4 0809 	sub.w	r8, r4, r9
 8021bfe:	59d4      	ldr	r4, [r2, r7]
 8021c00:	eba5 0a04 	sub.w	sl, r5, r4
 8021c04:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8021c08:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8021c0c:	fb0e fe05 	mul.w	lr, lr, r5
 8021c10:	fb0a ee19 	mls	lr, sl, r9, lr
 8021c14:	fb08 e404 	mla	r4, r8, r4, lr
 8021c18:	3c01      	subs	r4, #1
 8021c1a:	19a4      	adds	r4, r4, r6
 8021c1c:	f100 808c 	bmi.w	8021d38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8021c20:	fb94 fef6 	sdiv	lr, r4, r6
 8021c24:	fb06 441e 	mls	r4, r6, lr, r4
 8021c28:	f8c0 e000 	str.w	lr, [r0]
 8021c2c:	6104      	str	r4, [r0, #16]
 8021c2e:	2d00      	cmp	r5, #0
 8021c30:	f2c0 8095 	blt.w	8021d5e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8021c34:	fb95 f4f6 	sdiv	r4, r5, r6
 8021c38:	fb06 5514 	mls	r5, r6, r4, r5
 8021c3c:	6044      	str	r4, [r0, #4]
 8021c3e:	6085      	str	r5, [r0, #8]
 8021c40:	60c6      	str	r6, [r0, #12]
 8021c42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021c46:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8021c4a:	6945      	ldr	r5, [r0, #20]
 8021c4c:	59d2      	ldr	r2, [r2, r7]
 8021c4e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8021c52:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8021d80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8021c56:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8021c5a:	ee07 4a10 	vmov	s14, r4
 8021c5e:	6804      	ldr	r4, [r0, #0]
 8021c60:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8021c64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021c68:	ee07 2a90 	vmov	s15, r2
 8021c6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021c74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021c78:	edd3 6a00 	vldr	s13, [r3]
 8021c7c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8021c80:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8021c84:	eee6 6a27 	vfma.f32	s13, s12, s15
 8021c88:	edc0 6a07 	vstr	s13, [r0, #28]
 8021c8c:	edd0 6a01 	vldr	s13, [r0, #4]
 8021c90:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8021c94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8021c98:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8021c9c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8021ca0:	ed80 6a08 	vstr	s12, [r0, #32]
 8021ca4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8021ca6:	6242      	str	r2, [r0, #36]	; 0x24
 8021ca8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8021cac:	ed93 6a03 	vldr	s12, [r3, #12]
 8021cb0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8021cb4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8021cb8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8021cbc:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8021cc0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8021cc4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8021cc8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8021ccc:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8021cd0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8021cd2:	6302      	str	r2, [r0, #48]	; 0x30
 8021cd4:	ed93 6a06 	vldr	s12, [r3, #24]
 8021cd8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8021cdc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8021ce0:	eeb0 7a46 	vmov.f32	s14, s12
 8021ce4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8021ce8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8021cec:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8021cf0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8021cf4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8021cf8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021cfc:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8021d00:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8021d02:	63c3      	str	r3, [r0, #60]	; 0x3c
 8021d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d08:	2410      	movs	r4, #16
 8021d0a:	f1c5 0501 	rsb	r5, r5, #1
 8021d0e:	fb9e fef4 	sdiv	lr, lr, r4
 8021d12:	f015 050f 	ands.w	r5, r5, #15
 8021d16:	bf18      	it	ne
 8021d18:	2501      	movne	r5, #1
 8021d1a:	ebae 0e05 	sub.w	lr, lr, r5
 8021d1e:	e753      	b.n	8021bc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8021d20:	f04f 0910 	mov.w	r9, #16
 8021d24:	f1c5 0501 	rsb	r5, r5, #1
 8021d28:	fb94 f4f9 	sdiv	r4, r4, r9
 8021d2c:	f015 050f 	ands.w	r5, r5, #15
 8021d30:	bf18      	it	ne
 8021d32:	2501      	movne	r5, #1
 8021d34:	1b64      	subs	r4, r4, r5
 8021d36:	e755      	b.n	8021be4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8021d38:	4264      	negs	r4, r4
 8021d3a:	fb94 fef6 	sdiv	lr, r4, r6
 8021d3e:	f1ce 0800 	rsb	r8, lr, #0
 8021d42:	fb06 441e 	mls	r4, r6, lr, r4
 8021d46:	f8c0 8000 	str.w	r8, [r0]
 8021d4a:	6104      	str	r4, [r0, #16]
 8021d4c:	2c00      	cmp	r4, #0
 8021d4e:	f43f af6e 	beq.w	8021c2e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8021d52:	ea6f 0e0e 	mvn.w	lr, lr
 8021d56:	1b34      	subs	r4, r6, r4
 8021d58:	f8c0 e000 	str.w	lr, [r0]
 8021d5c:	e766      	b.n	8021c2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8021d5e:	426d      	negs	r5, r5
 8021d60:	fb95 f4f6 	sdiv	r4, r5, r6
 8021d64:	f1c4 0e00 	rsb	lr, r4, #0
 8021d68:	fb06 5514 	mls	r5, r6, r4, r5
 8021d6c:	f8c0 e004 	str.w	lr, [r0, #4]
 8021d70:	6085      	str	r5, [r0, #8]
 8021d72:	2d00      	cmp	r5, #0
 8021d74:	f43f af64 	beq.w	8021c40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8021d78:	43e4      	mvns	r4, r4
 8021d7a:	1b75      	subs	r5, r6, r5
 8021d7c:	6044      	str	r4, [r0, #4]
 8021d7e:	e75e      	b.n	8021c3e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8021d80:	3d800000 	.word	0x3d800000

08021d84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8021d84:	4b01      	ldr	r3, [pc, #4]	; (8021d8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8021d86:	6018      	str	r0, [r3, #0]
 8021d88:	4770      	bx	lr
 8021d8a:	bf00      	nop
 8021d8c:	24027fd4 	.word	0x24027fd4

08021d90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8021d90:	4b06      	ldr	r3, [pc, #24]	; (8021dac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8021d92:	881a      	ldrh	r2, [r3, #0]
 8021d94:	4282      	cmp	r2, r0
 8021d96:	d807      	bhi.n	8021da8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8021d98:	4b05      	ldr	r3, [pc, #20]	; (8021db0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8021d9a:	881b      	ldrh	r3, [r3, #0]
 8021d9c:	4413      	add	r3, r2
 8021d9e:	4298      	cmp	r0, r3
 8021da0:	bfac      	ite	ge
 8021da2:	2000      	movge	r0, #0
 8021da4:	2001      	movlt	r0, #1
 8021da6:	4770      	bx	lr
 8021da8:	2000      	movs	r0, #0
 8021daa:	4770      	bx	lr
 8021dac:	24027ff4 	.word	0x24027ff4
 8021db0:	24027ff8 	.word	0x24027ff8

08021db4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8021db4:	b508      	push	{r3, lr}
 8021db6:	4601      	mov	r1, r0
 8021db8:	f7ff ffea 	bl	8021d90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8021dbc:	b118      	cbz	r0, 8021dc6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8021dbe:	4b02      	ldr	r3, [pc, #8]	; (8021dc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8021dc0:	681b      	ldr	r3, [r3, #0]
 8021dc2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8021dc6:	bd08      	pop	{r3, pc}
 8021dc8:	24027fd8 	.word	0x24027fd8

08021dcc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8021dcc:	b538      	push	{r3, r4, r5, lr}
 8021dce:	4604      	mov	r4, r0
 8021dd0:	f7ff ffde 	bl	8021d90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8021dd4:	b188      	cbz	r0, 8021dfa <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8021dd6:	4b09      	ldr	r3, [pc, #36]	; (8021dfc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8021dd8:	881a      	ldrh	r2, [r3, #0]
 8021dda:	4b09      	ldr	r3, [pc, #36]	; (8021e00 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8021ddc:	1aa4      	subs	r4, r4, r2
 8021dde:	220e      	movs	r2, #14
 8021de0:	681d      	ldr	r5, [r3, #0]
 8021de2:	4362      	muls	r2, r4
 8021de4:	18ac      	adds	r4, r5, r2
 8021de6:	7b23      	ldrb	r3, [r4, #12]
 8021de8:	f013 0320 	ands.w	r3, r3, #32
 8021dec:	bf17      	itett	ne
 8021dee:	680b      	ldrne	r3, [r1, #0]
 8021df0:	4618      	moveq	r0, r3
 8021df2:	50ab      	strne	r3, [r5, r2]
 8021df4:	684b      	ldrne	r3, [r1, #4]
 8021df6:	bf18      	it	ne
 8021df8:	6063      	strne	r3, [r4, #4]
 8021dfa:	bd38      	pop	{r3, r4, r5, pc}
 8021dfc:	24027ff4 	.word	0x24027ff4
 8021e00:	24027fdc 	.word	0x24027fdc

08021e04 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8021e04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8021e08:	4606      	mov	r6, r0
 8021e0a:	460c      	mov	r4, r1
 8021e0c:	f7ff ffc0 	bl	8021d90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8021e10:	b918      	cbnz	r0, 8021e1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8021e12:	2000      	movs	r0, #0
 8021e14:	b002      	add	sp, #8
 8021e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e1a:	4608      	mov	r0, r1
 8021e1c:	f7f8 fa5f 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 8021e20:	2800      	cmp	r0, #0
 8021e22:	d1f6      	bne.n	8021e12 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8021e24:	4b3f      	ldr	r3, [pc, #252]	; (8021f24 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8021e26:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8021f28 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8021e2a:	881d      	ldrh	r5, [r3, #0]
 8021e2c:	f8d9 a000 	ldr.w	sl, [r9]
 8021e30:	46c8      	mov	r8, r9
 8021e32:	1b73      	subs	r3, r6, r5
 8021e34:	250e      	movs	r5, #14
 8021e36:	435d      	muls	r5, r3
 8021e38:	eb0a 0705 	add.w	r7, sl, r5
 8021e3c:	7b3b      	ldrb	r3, [r7, #12]
 8021e3e:	f013 0f20 	tst.w	r3, #32
 8021e42:	d0e6      	beq.n	8021e12 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8021e44:	4621      	mov	r1, r4
 8021e46:	4638      	mov	r0, r7
 8021e48:	f7fd f924 	bl	801f094 <_ZNK8touchgfx4Rect8includesERKS0_>
 8021e4c:	2800      	cmp	r0, #0
 8021e4e:	d1e1      	bne.n	8021e14 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8021e50:	4639      	mov	r1, r7
 8021e52:	4620      	mov	r0, r4
 8021e54:	f7fd f91e 	bl	801f094 <_ZNK8touchgfx4Rect8includesERKS0_>
 8021e58:	b108      	cbz	r0, 8021e5e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8021e5a:	4621      	mov	r1, r4
 8021e5c:	e020      	b.n	8021ea0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8021e5e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021e62:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8021e66:	429a      	cmp	r2, r3
 8021e68:	d11e      	bne.n	8021ea8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8021e6a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8021e6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8021e72:	429a      	cmp	r2, r3
 8021e74:	d118      	bne.n	8021ea8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8021e76:	6820      	ldr	r0, [r4, #0]
 8021e78:	466b      	mov	r3, sp
 8021e7a:	6861      	ldr	r1, [r4, #4]
 8021e7c:	c303      	stmia	r3!, {r0, r1}
 8021e7e:	4639      	mov	r1, r7
 8021e80:	4668      	mov	r0, sp
 8021e82:	f7fd f92d 	bl	801f0e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8021e86:	f8d9 3000 	ldr.w	r3, [r9]
 8021e8a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8021e8e:	442b      	add	r3, r5
 8021e90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8021e94:	4413      	add	r3, r2
 8021e96:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8021e9a:	4293      	cmp	r3, r2
 8021e9c:	dc04      	bgt.n	8021ea8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8021e9e:	4669      	mov	r1, sp
 8021ea0:	4630      	mov	r0, r6
 8021ea2:	f7ff ff93 	bl	8021dcc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8021ea6:	e7b5      	b.n	8021e14 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8021ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8021eac:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8021eb0:	442b      	add	r3, r5
 8021eb2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8021eb6:	4291      	cmp	r1, r2
 8021eb8:	d119      	bne.n	8021eee <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8021eba:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8021ebe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8021ec2:	4291      	cmp	r1, r2
 8021ec4:	d113      	bne.n	8021eee <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8021ec6:	6820      	ldr	r0, [r4, #0]
 8021ec8:	466a      	mov	r2, sp
 8021eca:	6861      	ldr	r1, [r4, #4]
 8021ecc:	c203      	stmia	r2!, {r0, r1}
 8021ece:	4619      	mov	r1, r3
 8021ed0:	4668      	mov	r0, sp
 8021ed2:	f7fd f905 	bl	801f0e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8021ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8021eda:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8021ede:	442b      	add	r3, r5
 8021ee0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021ee4:	4413      	add	r3, r2
 8021ee6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021eea:	4293      	cmp	r3, r2
 8021eec:	ddd7      	ble.n	8021e9e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8021eee:	4620      	mov	r0, r4
 8021ef0:	f7f8 f9f5 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 8021ef4:	b990      	cbnz	r0, 8021f1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8021ef6:	88a7      	ldrh	r7, [r4, #4]
 8021ef8:	88e3      	ldrh	r3, [r4, #6]
 8021efa:	fb17 f703 	smulbb	r7, r7, r3
 8021efe:	f8d8 3000 	ldr.w	r3, [r8]
 8021f02:	441d      	add	r5, r3
 8021f04:	4628      	mov	r0, r5
 8021f06:	f7f8 f9ea 	bl	801a2de <_ZNK8touchgfx4Rect7isEmptyEv>
 8021f0a:	b948      	cbnz	r0, 8021f20 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8021f0c:	88ab      	ldrh	r3, [r5, #4]
 8021f0e:	88ea      	ldrh	r2, [r5, #6]
 8021f10:	fb13 f302 	smulbb	r3, r3, r2
 8021f14:	42bb      	cmp	r3, r7
 8021f16:	f6bf af7c 	bge.w	8021e12 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8021f1a:	e79e      	b.n	8021e5a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8021f1c:	2700      	movs	r7, #0
 8021f1e:	e7ee      	b.n	8021efe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8021f20:	2300      	movs	r3, #0
 8021f22:	e7f7      	b.n	8021f14 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8021f24:	24027ff4 	.word	0x24027ff4
 8021f28:	24027fdc 	.word	0x24027fdc

08021f2c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8021f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f2e:	4c24      	ldr	r4, [pc, #144]	; (8021fc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8021f30:	6823      	ldr	r3, [r4, #0]
 8021f32:	2b00      	cmp	r3, #0
 8021f34:	d042      	beq.n	8021fbc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8021f36:	4a23      	ldr	r2, [pc, #140]	; (8021fc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8021f38:	4d23      	ldr	r5, [pc, #140]	; (8021fc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8021f3a:	8811      	ldrh	r1, [r2, #0]
 8021f3c:	f8b5 c000 	ldrh.w	ip, [r5]
 8021f40:	4822      	ldr	r0, [pc, #136]	; (8021fcc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8021f42:	4461      	add	r1, ip
 8021f44:	1c4a      	adds	r2, r1, #1
 8021f46:	008f      	lsls	r7, r1, #2
 8021f48:	f022 0201 	bic.w	r2, r2, #1
 8021f4c:	19de      	adds	r6, r3, r7
 8021f4e:	0412      	lsls	r2, r2, #16
 8021f50:	6006      	str	r6, [r0, #0]
 8021f52:	4e1f      	ldr	r6, [pc, #124]	; (8021fd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8021f54:	0c12      	lsrs	r2, r2, #16
 8021f56:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8021f5a:	19da      	adds	r2, r3, r7
 8021f5c:	6032      	str	r2, [r6, #0]
 8021f5e:	220e      	movs	r2, #14
 8021f60:	fb02 f20c 	mul.w	r2, r2, ip
 8021f64:	3203      	adds	r2, #3
 8021f66:	f022 0203 	bic.w	r2, r2, #3
 8021f6a:	443a      	add	r2, r7
 8021f6c:	4f19      	ldr	r7, [pc, #100]	; (8021fd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8021f6e:	4413      	add	r3, r2
 8021f70:	603b      	str	r3, [r7, #0]
 8021f72:	2300      	movs	r3, #0
 8021f74:	4f18      	ldr	r7, [pc, #96]	; (8021fd8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8021f76:	469c      	mov	ip, r3
 8021f78:	803b      	strh	r3, [r7, #0]
 8021f7a:	4f18      	ldr	r7, [pc, #96]	; (8021fdc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8021f7c:	683f      	ldr	r7, [r7, #0]
 8021f7e:	1aba      	subs	r2, r7, r2
 8021f80:	4f17      	ldr	r7, [pc, #92]	; (8021fe0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8021f82:	603a      	str	r2, [r7, #0]
 8021f84:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8021f88:	4a16      	ldr	r2, [pc, #88]	; (8021fe4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8021f8a:	8013      	strh	r3, [r2, #0]
 8021f8c:	428b      	cmp	r3, r1
 8021f8e:	d10d      	bne.n	8021fac <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8021f90:	882d      	ldrh	r5, [r5, #0]
 8021f92:	2300      	movs	r3, #0
 8021f94:	6830      	ldr	r0, [r6, #0]
 8021f96:	240e      	movs	r4, #14
 8021f98:	429d      	cmp	r5, r3
 8021f9a:	d90f      	bls.n	8021fbc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8021f9c:	fb04 0203 	mla	r2, r4, r3, r0
 8021fa0:	3301      	adds	r3, #1
 8021fa2:	7b11      	ldrb	r1, [r2, #12]
 8021fa4:	f36f 1145 	bfc	r1, #5, #1
 8021fa8:	7311      	strb	r1, [r2, #12]
 8021faa:	e7f5      	b.n	8021f98 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8021fac:	6822      	ldr	r2, [r4, #0]
 8021fae:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8021fb2:	6802      	ldr	r2, [r0, #0]
 8021fb4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8021fb8:	3301      	adds	r3, #1
 8021fba:	e7e7      	b.n	8021f8c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8021fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021fbe:	bf00      	nop
 8021fc0:	24027fd8 	.word	0x24027fd8
 8021fc4:	24027ff4 	.word	0x24027ff4
 8021fc8:	24027ff8 	.word	0x24027ff8
 8021fcc:	24027fec 	.word	0x24027fec
 8021fd0:	24027fdc 	.word	0x24027fdc
 8021fd4:	24027fe4 	.word	0x24027fe4
 8021fd8:	24027ff6 	.word	0x24027ff6
 8021fdc:	24027fe0 	.word	0x24027fe0
 8021fe0:	24027ff0 	.word	0x24027ff0
 8021fe4:	24027fe8 	.word	0x24027fe8

08021fe8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8021fe8:	4b06      	ldr	r3, [pc, #24]	; (8022004 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8021fea:	681b      	ldr	r3, [r3, #0]
 8021fec:	b943      	cbnz	r3, 8022000 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8021fee:	b139      	cbz	r1, 8022000 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8021ff0:	4b05      	ldr	r3, [pc, #20]	; (8022008 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8021ff2:	801a      	strh	r2, [r3, #0]
 8021ff4:	4b05      	ldr	r3, [pc, #20]	; (802200c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8021ff6:	6019      	str	r1, [r3, #0]
 8021ff8:	4b05      	ldr	r3, [pc, #20]	; (8022010 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8021ffa:	6018      	str	r0, [r3, #0]
 8021ffc:	f7ff bf96 	b.w	8021f2c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8022000:	4770      	bx	lr
 8022002:	bf00      	nop
 8022004:	24027fe4 	.word	0x24027fe4
 8022008:	24027ff8 	.word	0x24027ff8
 802200c:	24027fe0 	.word	0x24027fe0
 8022010:	24027fd8 	.word	0x24027fd8

08022014 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8022014:	b470      	push	{r4, r5, r6}
 8022016:	4c07      	ldr	r4, [pc, #28]	; (8022034 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8022018:	4605      	mov	r5, r0
 802201a:	4610      	mov	r0, r2
 802201c:	9a03      	ldr	r2, [sp, #12]
 802201e:	6826      	ldr	r6, [r4, #0]
 8022020:	b936      	cbnz	r6, 8022030 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8022022:	6025      	str	r5, [r4, #0]
 8022024:	4c04      	ldr	r4, [pc, #16]	; (8022038 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8022026:	8021      	strh	r1, [r4, #0]
 8022028:	4619      	mov	r1, r3
 802202a:	bc70      	pop	{r4, r5, r6}
 802202c:	f7ff bfdc 	b.w	8021fe8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8022030:	bc70      	pop	{r4, r5, r6}
 8022032:	4770      	bx	lr
 8022034:	24027ffc 	.word	0x24027ffc
 8022038:	24027ff4 	.word	0x24027ff4

0802203c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 802203c:	4a12      	ldr	r2, [pc, #72]	; (8022088 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 802203e:	8803      	ldrh	r3, [r0, #0]
 8022040:	8812      	ldrh	r2, [r2, #0]
 8022042:	4293      	cmp	r3, r2
 8022044:	d207      	bcs.n	8022056 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8022046:	4a11      	ldr	r2, [pc, #68]	; (802208c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8022048:	2114      	movs	r1, #20
 802204a:	6812      	ldr	r2, [r2, #0]
 802204c:	fb01 2303 	mla	r3, r1, r3, r2
 8022050:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8022054:	4770      	bx	lr
 8022056:	490e      	ldr	r1, [pc, #56]	; (8022090 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8022058:	8809      	ldrh	r1, [r1, #0]
 802205a:	4411      	add	r1, r2
 802205c:	428b      	cmp	r3, r1
 802205e:	da04      	bge.n	802206a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8022060:	1a9b      	subs	r3, r3, r2
 8022062:	4a0c      	ldr	r2, [pc, #48]	; (8022094 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8022064:	210e      	movs	r1, #14
 8022066:	6812      	ldr	r2, [r2, #0]
 8022068:	e7f0      	b.n	802204c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 802206a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802206e:	4293      	cmp	r3, r2
 8022070:	d108      	bne.n	8022084 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8022072:	4b09      	ldr	r3, [pc, #36]	; (8022098 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8022074:	781b      	ldrb	r3, [r3, #0]
 8022076:	b91b      	cbnz	r3, 8022080 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8022078:	4b08      	ldr	r3, [pc, #32]	; (802209c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 802207a:	f9b3 0000 	ldrsh.w	r0, [r3]
 802207e:	4770      	bx	lr
 8022080:	4b07      	ldr	r3, [pc, #28]	; (80220a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8022082:	e7fa      	b.n	802207a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8022084:	2000      	movs	r0, #0
 8022086:	4770      	bx	lr
 8022088:	24027ff4 	.word	0x24027ff4
 802208c:	24027ffc 	.word	0x24027ffc
 8022090:	24027ff8 	.word	0x24027ff8
 8022094:	24027fdc 	.word	0x24027fdc
 8022098:	24027f64 	.word	0x24027f64
 802209c:	24027f66 	.word	0x24027f66
 80220a0:	24027f68 	.word	0x24027f68

080220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80220a4:	4a12      	ldr	r2, [pc, #72]	; (80220f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80220a6:	8803      	ldrh	r3, [r0, #0]
 80220a8:	8812      	ldrh	r2, [r2, #0]
 80220aa:	4293      	cmp	r3, r2
 80220ac:	d207      	bcs.n	80220be <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80220ae:	4a11      	ldr	r2, [pc, #68]	; (80220f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80220b0:	2114      	movs	r1, #20
 80220b2:	6812      	ldr	r2, [r2, #0]
 80220b4:	fb01 2303 	mla	r3, r1, r3, r2
 80220b8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80220bc:	4770      	bx	lr
 80220be:	490e      	ldr	r1, [pc, #56]	; (80220f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80220c0:	8809      	ldrh	r1, [r1, #0]
 80220c2:	4411      	add	r1, r2
 80220c4:	428b      	cmp	r3, r1
 80220c6:	da04      	bge.n	80220d2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80220c8:	1a9b      	subs	r3, r3, r2
 80220ca:	4a0c      	ldr	r2, [pc, #48]	; (80220fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80220cc:	210e      	movs	r1, #14
 80220ce:	6812      	ldr	r2, [r2, #0]
 80220d0:	e7f0      	b.n	80220b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80220d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80220d6:	4293      	cmp	r3, r2
 80220d8:	d108      	bne.n	80220ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80220da:	4b09      	ldr	r3, [pc, #36]	; (8022100 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80220dc:	781b      	ldrb	r3, [r3, #0]
 80220de:	b91b      	cbnz	r3, 80220e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80220e0:	4b08      	ldr	r3, [pc, #32]	; (8022104 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80220e2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80220e6:	4770      	bx	lr
 80220e8:	4b07      	ldr	r3, [pc, #28]	; (8022108 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80220ea:	e7fa      	b.n	80220e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80220ec:	2000      	movs	r0, #0
 80220ee:	4770      	bx	lr
 80220f0:	24027ff4 	.word	0x24027ff4
 80220f4:	24027ffc 	.word	0x24027ffc
 80220f8:	24027ff8 	.word	0x24027ff8
 80220fc:	24027fdc 	.word	0x24027fdc
 8022100:	24027f64 	.word	0x24027f64
 8022104:	24027f68 	.word	0x24027f68
 8022108:	24027f66 	.word	0x24027f66

0802210c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 802210c:	4a1f      	ldr	r2, [pc, #124]	; (802218c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 802210e:	b510      	push	{r4, lr}
 8022110:	880b      	ldrh	r3, [r1, #0]
 8022112:	8812      	ldrh	r2, [r2, #0]
 8022114:	4293      	cmp	r3, r2
 8022116:	d213      	bcs.n	8022140 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8022118:	4a1d      	ldr	r2, [pc, #116]	; (8022190 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 802211a:	2114      	movs	r1, #20
 802211c:	6812      	ldr	r2, [r2, #0]
 802211e:	fb01 2303 	mla	r3, r1, r3, r2
 8022122:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8022126:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 802212a:	8a1a      	ldrh	r2, [r3, #16]
 802212c:	8a5b      	ldrh	r3, [r3, #18]
 802212e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8022132:	8004      	strh	r4, [r0, #0]
 8022134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022138:	8041      	strh	r1, [r0, #2]
 802213a:	8082      	strh	r2, [r0, #4]
 802213c:	80c3      	strh	r3, [r0, #6]
 802213e:	e00e      	b.n	802215e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8022140:	4914      	ldr	r1, [pc, #80]	; (8022194 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8022142:	8809      	ldrh	r1, [r1, #0]
 8022144:	4411      	add	r1, r2
 8022146:	428b      	cmp	r3, r1
 8022148:	da0a      	bge.n	8022160 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 802214a:	1a9b      	subs	r3, r3, r2
 802214c:	4a12      	ldr	r2, [pc, #72]	; (8022198 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 802214e:	210e      	movs	r1, #14
 8022150:	6812      	ldr	r2, [r2, #0]
 8022152:	fb01 2303 	mla	r3, r1, r3, r2
 8022156:	681a      	ldr	r2, [r3, #0]
 8022158:	6002      	str	r2, [r0, #0]
 802215a:	685a      	ldr	r2, [r3, #4]
 802215c:	6042      	str	r2, [r0, #4]
 802215e:	bd10      	pop	{r4, pc}
 8022160:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8022164:	4293      	cmp	r3, r2
 8022166:	d10b      	bne.n	8022180 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8022168:	4b0c      	ldr	r3, [pc, #48]	; (802219c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 802216a:	f9b3 1000 	ldrsh.w	r1, [r3]
 802216e:	4b0c      	ldr	r3, [pc, #48]	; (80221a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8022170:	8081      	strh	r1, [r0, #4]
 8022172:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022176:	2300      	movs	r3, #0
 8022178:	80c2      	strh	r2, [r0, #6]
 802217a:	8003      	strh	r3, [r0, #0]
 802217c:	8043      	strh	r3, [r0, #2]
 802217e:	e7ee      	b.n	802215e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8022180:	2300      	movs	r3, #0
 8022182:	8003      	strh	r3, [r0, #0]
 8022184:	8043      	strh	r3, [r0, #2]
 8022186:	8083      	strh	r3, [r0, #4]
 8022188:	e7d8      	b.n	802213c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 802218a:	bf00      	nop
 802218c:	24027ff4 	.word	0x24027ff4
 8022190:	24027ffc 	.word	0x24027ffc
 8022194:	24027ff8 	.word	0x24027ff8
 8022198:	24027fdc 	.word	0x24027fdc
 802219c:	24027f60 	.word	0x24027f60
 80221a0:	24027f62 	.word	0x24027f62

080221a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80221a4:	4a17      	ldr	r2, [pc, #92]	; (8022204 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80221a6:	8803      	ldrh	r3, [r0, #0]
 80221a8:	8812      	ldrh	r2, [r2, #0]
 80221aa:	4293      	cmp	r3, r2
 80221ac:	d213      	bcs.n	80221d6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80221ae:	4a16      	ldr	r2, [pc, #88]	; (8022208 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80221b0:	2114      	movs	r1, #20
 80221b2:	6812      	ldr	r2, [r2, #0]
 80221b4:	fb01 2303 	mla	r3, r1, r3, r2
 80221b8:	8a1a      	ldrh	r2, [r3, #16]
 80221ba:	8919      	ldrh	r1, [r3, #8]
 80221bc:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80221c0:	428a      	cmp	r2, r1
 80221c2:	db1d      	blt.n	8022200 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80221c4:	8a58      	ldrh	r0, [r3, #18]
 80221c6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80221ca:	895b      	ldrh	r3, [r3, #10]
 80221cc:	4298      	cmp	r0, r3
 80221ce:	bfac      	ite	ge
 80221d0:	2000      	movge	r0, #0
 80221d2:	2001      	movlt	r0, #1
 80221d4:	4770      	bx	lr
 80221d6:	490d      	ldr	r1, [pc, #52]	; (802220c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80221d8:	8809      	ldrh	r1, [r1, #0]
 80221da:	4411      	add	r1, r2
 80221dc:	428b      	cmp	r3, r1
 80221de:	da0d      	bge.n	80221fc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80221e0:	1a9b      	subs	r3, r3, r2
 80221e2:	4a0b      	ldr	r2, [pc, #44]	; (8022210 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80221e4:	210e      	movs	r1, #14
 80221e6:	6812      	ldr	r2, [r2, #0]
 80221e8:	fb01 2303 	mla	r3, r1, r3, r2
 80221ec:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80221f0:	891a      	ldrh	r2, [r3, #8]
 80221f2:	4291      	cmp	r1, r2
 80221f4:	db04      	blt.n	8022200 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80221f6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80221fa:	e7e6      	b.n	80221ca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80221fc:	2000      	movs	r0, #0
 80221fe:	4770      	bx	lr
 8022200:	2001      	movs	r0, #1
 8022202:	4770      	bx	lr
 8022204:	24027ff4 	.word	0x24027ff4
 8022208:	24027ffc 	.word	0x24027ffc
 802220c:	24027ff8 	.word	0x24027ff8
 8022210:	24027fdc 	.word	0x24027fdc

08022214 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8022214:	4a12      	ldr	r2, [pc, #72]	; (8022260 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8022216:	8803      	ldrh	r3, [r0, #0]
 8022218:	8811      	ldrh	r1, [r2, #0]
 802221a:	428b      	cmp	r3, r1
 802221c:	d20b      	bcs.n	8022236 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 802221e:	4a11      	ldr	r2, [pc, #68]	; (8022264 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8022220:	6812      	ldr	r2, [r2, #0]
 8022222:	b112      	cbz	r2, 802222a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8022224:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8022228:	b9c0      	cbnz	r0, 802225c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 802222a:	4a0f      	ldr	r2, [pc, #60]	; (8022268 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 802222c:	6811      	ldr	r1, [r2, #0]
 802222e:	2214      	movs	r2, #20
 8022230:	4353      	muls	r3, r2
 8022232:	58c8      	ldr	r0, [r1, r3]
 8022234:	4770      	bx	lr
 8022236:	4a0d      	ldr	r2, [pc, #52]	; (802226c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8022238:	8812      	ldrh	r2, [r2, #0]
 802223a:	440a      	add	r2, r1
 802223c:	4293      	cmp	r3, r2
 802223e:	da04      	bge.n	802224a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8022240:	4a08      	ldr	r2, [pc, #32]	; (8022264 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8022242:	6812      	ldr	r2, [r2, #0]
 8022244:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8022248:	4770      	bx	lr
 802224a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802224e:	4293      	cmp	r3, r2
 8022250:	d103      	bne.n	802225a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8022252:	4b07      	ldr	r3, [pc, #28]	; (8022270 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8022258:	4770      	bx	lr
 802225a:	2000      	movs	r0, #0
 802225c:	4770      	bx	lr
 802225e:	bf00      	nop
 8022260:	24027ff4 	.word	0x24027ff4
 8022264:	24027fd8 	.word	0x24027fd8
 8022268:	24027ffc 	.word	0x24027ffc
 802226c:	24027ff8 	.word	0x24027ff8
 8022270:	24027f6c 	.word	0x24027f6c

08022274 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8022274:	4b24      	ldr	r3, [pc, #144]	; (8022308 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8022276:	8802      	ldrh	r2, [r0, #0]
 8022278:	8818      	ldrh	r0, [r3, #0]
 802227a:	4282      	cmp	r2, r0
 802227c:	d221      	bcs.n	80222c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 802227e:	4b23      	ldr	r3, [pc, #140]	; (802230c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8022280:	6819      	ldr	r1, [r3, #0]
 8022282:	2314      	movs	r3, #20
 8022284:	fb03 1302 	mla	r3, r3, r2, r1
 8022288:	6858      	ldr	r0, [r3, #4]
 802228a:	2800      	cmp	r0, #0
 802228c:	d03a      	beq.n	8022304 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 802228e:	4920      	ldr	r1, [pc, #128]	; (8022310 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8022290:	6809      	ldr	r1, [r1, #0]
 8022292:	2900      	cmp	r1, #0
 8022294:	d036      	beq.n	8022304 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8022296:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 802229a:	2900      	cmp	r1, #0
 802229c:	d032      	beq.n	8022304 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 802229e:	891a      	ldrh	r2, [r3, #8]
 80222a0:	8958      	ldrh	r0, [r3, #10]
 80222a2:	4350      	muls	r0, r2
 80222a4:	7c5a      	ldrb	r2, [r3, #17]
 80222a6:	7cdb      	ldrb	r3, [r3, #19]
 80222a8:	0952      	lsrs	r2, r2, #5
 80222aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80222ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80222b2:	2b0b      	cmp	r3, #11
 80222b4:	bf18      	it	ne
 80222b6:	0040      	lslne	r0, r0, #1
 80222b8:	3003      	adds	r0, #3
 80222ba:	f020 0003 	bic.w	r0, r0, #3
 80222be:	4408      	add	r0, r1
 80222c0:	4770      	bx	lr
 80222c2:	4b14      	ldr	r3, [pc, #80]	; (8022314 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80222c4:	881b      	ldrh	r3, [r3, #0]
 80222c6:	4403      	add	r3, r0
 80222c8:	429a      	cmp	r2, r3
 80222ca:	da1a      	bge.n	8022302 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80222cc:	4b12      	ldr	r3, [pc, #72]	; (8022318 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80222ce:	1a10      	subs	r0, r2, r0
 80222d0:	210e      	movs	r1, #14
 80222d2:	681b      	ldr	r3, [r3, #0]
 80222d4:	fb01 3000 	mla	r0, r1, r0, r3
 80222d8:	7b03      	ldrb	r3, [r0, #12]
 80222da:	f003 031f 	and.w	r3, r3, #31
 80222de:	2b0b      	cmp	r3, #11
 80222e0:	d10b      	bne.n	80222fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80222e2:	8903      	ldrh	r3, [r0, #8]
 80222e4:	8940      	ldrh	r0, [r0, #10]
 80222e6:	4358      	muls	r0, r3
 80222e8:	4b09      	ldr	r3, [pc, #36]	; (8022310 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80222ea:	3003      	adds	r0, #3
 80222ec:	6819      	ldr	r1, [r3, #0]
 80222ee:	f020 0303 	bic.w	r3, r0, #3
 80222f2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80222f6:	4418      	add	r0, r3
 80222f8:	4770      	bx	lr
 80222fa:	2b0d      	cmp	r3, #13
 80222fc:	d101      	bne.n	8022302 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80222fe:	300d      	adds	r0, #13
 8022300:	4770      	bx	lr
 8022302:	2000      	movs	r0, #0
 8022304:	4770      	bx	lr
 8022306:	bf00      	nop
 8022308:	24027ff4 	.word	0x24027ff4
 802230c:	24027ffc 	.word	0x24027ffc
 8022310:	24027fd8 	.word	0x24027fd8
 8022314:	24027ff8 	.word	0x24027ff8
 8022318:	24027fdc 	.word	0x24027fdc

0802231c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 802231c:	4a17      	ldr	r2, [pc, #92]	; (802237c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 802231e:	b510      	push	{r4, lr}
 8022320:	8803      	ldrh	r3, [r0, #0]
 8022322:	8812      	ldrh	r2, [r2, #0]
 8022324:	4293      	cmp	r3, r2
 8022326:	d20c      	bcs.n	8022342 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8022328:	4a15      	ldr	r2, [pc, #84]	; (8022380 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 802232a:	2114      	movs	r1, #20
 802232c:	6812      	ldr	r2, [r2, #0]
 802232e:	fb01 2303 	mla	r3, r1, r3, r2
 8022332:	7c58      	ldrb	r0, [r3, #17]
 8022334:	0942      	lsrs	r2, r0, #5
 8022336:	7cd8      	ldrb	r0, [r3, #19]
 8022338:	f3c0 1042 	ubfx	r0, r0, #5, #3
 802233c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8022340:	bd10      	pop	{r4, pc}
 8022342:	4910      	ldr	r1, [pc, #64]	; (8022384 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8022344:	8809      	ldrh	r1, [r1, #0]
 8022346:	4411      	add	r1, r2
 8022348:	428b      	cmp	r3, r1
 802234a:	da09      	bge.n	8022360 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 802234c:	1a9b      	subs	r3, r3, r2
 802234e:	4a0e      	ldr	r2, [pc, #56]	; (8022388 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8022350:	210e      	movs	r1, #14
 8022352:	6812      	ldr	r2, [r2, #0]
 8022354:	fb01 2303 	mla	r3, r1, r3, r2
 8022358:	7b18      	ldrb	r0, [r3, #12]
 802235a:	f000 001f 	and.w	r0, r0, #31
 802235e:	e7ef      	b.n	8022340 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8022360:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8022364:	4293      	cmp	r3, r2
 8022366:	d106      	bne.n	8022376 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8022368:	f7e2 f82c 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 802236c:	6803      	ldr	r3, [r0, #0]
 802236e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022374:	4718      	bx	r3
 8022376:	2000      	movs	r0, #0
 8022378:	e7e2      	b.n	8022340 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 802237a:	bf00      	nop
 802237c:	24027ff4 	.word	0x24027ff4
 8022380:	24027ffc 	.word	0x24027ffc
 8022384:	24027ff8 	.word	0x24027ff8
 8022388:	24027fdc 	.word	0x24027fdc

0802238c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 802238c:	2018      	movs	r0, #24
 802238e:	4770      	bx	lr

08022390 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8022390:	2001      	movs	r0, #1
 8022392:	4770      	bx	lr

08022394 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8022394:	4b02      	ldr	r3, [pc, #8]	; (80223a0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8022396:	8818      	ldrh	r0, [r3, #0]
 8022398:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802239c:	b280      	uxth	r0, r0
 802239e:	4770      	bx	lr
 80223a0:	24027f66 	.word	0x24027f66

080223a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80223a4:	2bff      	cmp	r3, #255	; 0xff
 80223a6:	d040      	beq.n	802242a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80223a8:	2a2c      	cmp	r2, #44	; 0x2c
 80223aa:	d02a      	beq.n	8022402 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 80223ac:	d80f      	bhi.n	80223ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80223ae:	2a08      	cmp	r2, #8
 80223b0:	d037      	beq.n	8022422 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80223b2:	d805      	bhi.n	80223c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80223b4:	2a04      	cmp	r2, #4
 80223b6:	d032      	beq.n	802241e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 80223b8:	2a05      	cmp	r2, #5
 80223ba:	d02e      	beq.n	802241a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80223bc:	2000      	movs	r0, #0
 80223be:	4770      	bx	lr
 80223c0:	2a0a      	cmp	r2, #10
 80223c2:	d02e      	beq.n	8022422 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80223c4:	d301      	bcc.n	80223ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80223c6:	2a0b      	cmp	r2, #11
 80223c8:	d1f8      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80223ca:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80223cc:	4770      	bx	lr
 80223ce:	2a30      	cmp	r2, #48	; 0x30
 80223d0:	d029      	beq.n	8022426 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80223d2:	d808      	bhi.n	80223e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 80223d4:	2a2e      	cmp	r2, #46	; 0x2e
 80223d6:	684b      	ldr	r3, [r1, #4]
 80223d8:	d01a      	beq.n	8022410 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 80223da:	d90b      	bls.n	80223f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 80223dc:	781b      	ldrb	r3, [r3, #0]
 80223de:	2b00      	cmp	r3, #0
 80223e0:	d1ec      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80223e2:	6a00      	ldr	r0, [r0, #32]
 80223e4:	4770      	bx	lr
 80223e6:	2a32      	cmp	r2, #50	; 0x32
 80223e8:	d01d      	beq.n	8022426 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80223ea:	d301      	bcc.n	80223f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 80223ec:	2a33      	cmp	r2, #51	; 0x33
 80223ee:	d1e5      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80223f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80223f2:	4770      	bx	lr
 80223f4:	781b      	ldrb	r3, [r3, #0]
 80223f6:	2b00      	cmp	r3, #0
 80223f8:	d0f3      	beq.n	80223e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 80223fa:	2b01      	cmp	r3, #1
 80223fc:	d1de      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80223fe:	6900      	ldr	r0, [r0, #16]
 8022400:	4770      	bx	lr
 8022402:	684b      	ldr	r3, [r1, #4]
 8022404:	781b      	ldrb	r3, [r3, #0]
 8022406:	b133      	cbz	r3, 8022416 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8022408:	2b01      	cmp	r3, #1
 802240a:	d1d7      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 802240c:	6880      	ldr	r0, [r0, #8]
 802240e:	4770      	bx	lr
 8022410:	781b      	ldrb	r3, [r3, #0]
 8022412:	2b00      	cmp	r3, #0
 8022414:	d1d2      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8022416:	6980      	ldr	r0, [r0, #24]
 8022418:	4770      	bx	lr
 802241a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 802241c:	4770      	bx	lr
 802241e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8022420:	4770      	bx	lr
 8022422:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8022424:	4770      	bx	lr
 8022426:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8022428:	4770      	bx	lr
 802242a:	2a2c      	cmp	r2, #44	; 0x2c
 802242c:	d02a      	beq.n	8022484 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 802242e:	d80f      	bhi.n	8022450 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8022430:	2a08      	cmp	r2, #8
 8022432:	d035      	beq.n	80224a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8022434:	d805      	bhi.n	8022442 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8022436:	2a04      	cmp	r2, #4
 8022438:	d030      	beq.n	802249c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 802243a:	2a05      	cmp	r2, #5
 802243c:	d1be      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 802243e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8022440:	4770      	bx	lr
 8022442:	2a0a      	cmp	r2, #10
 8022444:	d02c      	beq.n	80224a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8022446:	d301      	bcc.n	802244c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8022448:	2a0b      	cmp	r2, #11
 802244a:	d1b7      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 802244c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 802244e:	4770      	bx	lr
 8022450:	2a30      	cmp	r2, #48	; 0x30
 8022452:	d027      	beq.n	80224a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8022454:	d808      	bhi.n	8022468 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8022456:	2a2e      	cmp	r2, #46	; 0x2e
 8022458:	684b      	ldr	r3, [r1, #4]
 802245a:	d01a      	beq.n	8022492 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 802245c:	d90b      	bls.n	8022476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 802245e:	781b      	ldrb	r3, [r3, #0]
 8022460:	2b00      	cmp	r3, #0
 8022462:	d1ab      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8022464:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8022466:	4770      	bx	lr
 8022468:	2a32      	cmp	r2, #50	; 0x32
 802246a:	d01b      	beq.n	80224a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 802246c:	d301      	bcc.n	8022472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 802246e:	2a33      	cmp	r2, #51	; 0x33
 8022470:	d1a4      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8022472:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8022474:	4770      	bx	lr
 8022476:	781b      	ldrb	r3, [r3, #0]
 8022478:	2b00      	cmp	r3, #0
 802247a:	d0f3      	beq.n	8022464 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 802247c:	2b01      	cmp	r3, #1
 802247e:	d19d      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8022480:	6940      	ldr	r0, [r0, #20]
 8022482:	4770      	bx	lr
 8022484:	684b      	ldr	r3, [r1, #4]
 8022486:	781b      	ldrb	r3, [r3, #0]
 8022488:	b133      	cbz	r3, 8022498 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 802248a:	2b01      	cmp	r3, #1
 802248c:	d196      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 802248e:	68c0      	ldr	r0, [r0, #12]
 8022490:	4770      	bx	lr
 8022492:	781b      	ldrb	r3, [r3, #0]
 8022494:	2b00      	cmp	r3, #0
 8022496:	d191      	bne.n	80223bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8022498:	69c0      	ldr	r0, [r0, #28]
 802249a:	4770      	bx	lr
 802249c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 802249e:	4770      	bx	lr
 80224a0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80224a2:	4770      	bx	lr
 80224a4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80224a6:	4770      	bx	lr

080224a8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224ac:	b085      	sub	sp, #20
 80224ae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80224b0:	9203      	str	r2, [sp, #12]
 80224b2:	6870      	ldr	r0, [r6, #4]
 80224b4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80224b8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80224bc:	9101      	str	r1, [sp, #4]
 80224be:	fa1f f885 	uxth.w	r8, r5
 80224c2:	43ed      	mvns	r5, r5
 80224c4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80224c8:	b2ed      	uxtb	r5, r5
 80224ca:	fb00 2404 	mla	r4, r0, r4, r2
 80224ce:	6832      	ldr	r2, [r6, #0]
 80224d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80224d4:	4414      	add	r4, r2
 80224d6:	f8dc 2000 	ldr.w	r2, [ip]
 80224da:	9202      	str	r2, [sp, #8]
 80224dc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80224e0:	f102 0e04 	add.w	lr, r2, #4
 80224e4:	9a01      	ldr	r2, [sp, #4]
 80224e6:	2a00      	cmp	r2, #0
 80224e8:	dc03      	bgt.n	80224f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80224ea:	9a03      	ldr	r2, [sp, #12]
 80224ec:	2a00      	cmp	r2, #0
 80224ee:	f340 8116 	ble.w	802271e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80224f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80224f4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80224f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80224fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80224fe:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8022502:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022506:	2b00      	cmp	r3, #0
 8022508:	dd0e      	ble.n	8022528 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802250a:	1406      	asrs	r6, r0, #16
 802250c:	d405      	bmi.n	802251a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802250e:	4556      	cmp	r6, sl
 8022510:	da03      	bge.n	802251a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022512:	1416      	asrs	r6, r2, #16
 8022514:	d401      	bmi.n	802251a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022516:	454e      	cmp	r6, r9
 8022518:	db07      	blt.n	802252a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802251a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802251c:	3b01      	subs	r3, #1
 802251e:	3403      	adds	r4, #3
 8022520:	4430      	add	r0, r6
 8022522:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022524:	4432      	add	r2, r6
 8022526:	e7ee      	b.n	8022506 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022528:	d063      	beq.n	80225f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802252a:	1e5e      	subs	r6, r3, #1
 802252c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 802252e:	fb07 0706 	mla	r7, r7, r6, r0
 8022532:	143f      	asrs	r7, r7, #16
 8022534:	d454      	bmi.n	80225e0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022536:	4557      	cmp	r7, sl
 8022538:	da52      	bge.n	80225e0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802253a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 802253c:	fb07 2606 	mla	r6, r7, r6, r2
 8022540:	1436      	asrs	r6, r6, #16
 8022542:	d44d      	bmi.n	80225e0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022544:	454e      	cmp	r6, r9
 8022546:	da4b      	bge.n	80225e0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022548:	1ce6      	adds	r6, r4, #3
 802254a:	4699      	mov	r9, r3
 802254c:	f1b9 0f00 	cmp.w	r9, #0
 8022550:	f106 0603 	add.w	r6, r6, #3
 8022554:	dd48      	ble.n	80225e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022556:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 802255a:	1417      	asrs	r7, r2, #16
 802255c:	9902      	ldr	r1, [sp, #8]
 802255e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8022562:	f109 39ff 	add.w	r9, r9, #4294967295
 8022566:	fb0b 1707 	mla	r7, fp, r7, r1
 802256a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 802256e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022570:	f817 700a 	ldrb.w	r7, [r7, sl]
 8022574:	fb1b fb05 	smulbb	fp, fp, r5
 8022578:	4408      	add	r0, r1
 802257a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802257c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022580:	440a      	add	r2, r1
 8022582:	eb0e 0a07 	add.w	sl, lr, r7
 8022586:	f81e 7007 	ldrb.w	r7, [lr, r7]
 802258a:	fb07 b708 	mla	r7, r7, r8, fp
 802258e:	b2bf      	uxth	r7, r7
 8022590:	f107 0b01 	add.w	fp, r7, #1
 8022594:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8022598:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 802259c:	fb1b fb05 	smulbb	fp, fp, r5
 80225a0:	123f      	asrs	r7, r7, #8
 80225a2:	f806 7c06 	strb.w	r7, [r6, #-6]
 80225a6:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80225aa:	fb07 b708 	mla	r7, r7, r8, fp
 80225ae:	b2bf      	uxth	r7, r7
 80225b0:	f107 0b01 	add.w	fp, r7, #1
 80225b4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80225b8:	123f      	asrs	r7, r7, #8
 80225ba:	f806 7c05 	strb.w	r7, [r6, #-5]
 80225be:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80225c2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80225c6:	fb1a fa05 	smulbb	sl, sl, r5
 80225ca:	fb07 a708 	mla	r7, r7, r8, sl
 80225ce:	b2bf      	uxth	r7, r7
 80225d0:	f107 0a01 	add.w	sl, r7, #1
 80225d4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80225d8:	123f      	asrs	r7, r7, #8
 80225da:	f806 7c04 	strb.w	r7, [r6, #-4]
 80225de:	e7b5      	b.n	802254c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80225e0:	2700      	movs	r7, #0
 80225e2:	1bde      	subs	r6, r3, r7
 80225e4:	2e00      	cmp	r6, #0
 80225e6:	dc42      	bgt.n	802266e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80225e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80225ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225f0:	441c      	add	r4, r3
 80225f2:	9b01      	ldr	r3, [sp, #4]
 80225f4:	2b00      	cmp	r3, #0
 80225f6:	f340 8092 	ble.w	802271e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80225fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80225fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022600:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022604:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022608:	eef0 6a62 	vmov.f32	s13, s5
 802260c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022610:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022614:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022618:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 802261c:	eef0 6a43 	vmov.f32	s13, s6
 8022620:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022624:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8022628:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802262c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022630:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022634:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022638:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802263c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022640:	ee12 2a90 	vmov	r2, s5
 8022644:	eef0 2a47 	vmov.f32	s5, s14
 8022648:	fb92 f3f3 	sdiv	r3, r2, r3
 802264c:	ee13 2a10 	vmov	r2, s6
 8022650:	9311      	str	r3, [sp, #68]	; 0x44
 8022652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022654:	eeb0 3a67 	vmov.f32	s6, s15
 8022658:	fb92 f3f3 	sdiv	r3, r2, r3
 802265c:	9312      	str	r3, [sp, #72]	; 0x48
 802265e:	9b01      	ldr	r3, [sp, #4]
 8022660:	9a03      	ldr	r2, [sp, #12]
 8022662:	3b01      	subs	r3, #1
 8022664:	9301      	str	r3, [sp, #4]
 8022666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022668:	bf08      	it	eq
 802266a:	4613      	moveq	r3, r2
 802266c:	e73a      	b.n	80224e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802266e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8022672:	d44e      	bmi.n	8022712 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8022674:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8022678:	4556      	cmp	r6, sl
 802267a:	dd4a      	ble.n	8022712 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802267c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8022680:	d447      	bmi.n	8022712 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8022682:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8022686:	4559      	cmp	r1, fp
 8022688:	dd43      	ble.n	8022712 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802268a:	fa0f f986 	sxth.w	r9, r6
 802268e:	9902      	ldr	r1, [sp, #8]
 8022690:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8022694:	fb0b 1909 	mla	r9, fp, r9, r1
 8022698:	f814 b006 	ldrb.w	fp, [r4, r6]
 802269c:	f819 900a 	ldrb.w	r9, [r9, sl]
 80226a0:	fb1b fb05 	smulbb	fp, fp, r5
 80226a4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80226a8:	eb0e 0a09 	add.w	sl, lr, r9
 80226ac:	f81e 9009 	ldrb.w	r9, [lr, r9]
 80226b0:	fb09 b908 	mla	r9, r9, r8, fp
 80226b4:	fa1f f989 	uxth.w	r9, r9
 80226b8:	f109 0b01 	add.w	fp, r9, #1
 80226bc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80226c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80226c4:	f804 9006 	strb.w	r9, [r4, r6]
 80226c8:	4426      	add	r6, r4
 80226ca:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80226ce:	f896 b001 	ldrb.w	fp, [r6, #1]
 80226d2:	fb1b fb05 	smulbb	fp, fp, r5
 80226d6:	fb09 b908 	mla	r9, r9, r8, fp
 80226da:	fa1f f989 	uxth.w	r9, r9
 80226de:	f109 0b01 	add.w	fp, r9, #1
 80226e2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80226e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80226ea:	f886 9001 	strb.w	r9, [r6, #1]
 80226ee:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80226f2:	f896 a002 	ldrb.w	sl, [r6, #2]
 80226f6:	fb1a fa05 	smulbb	sl, sl, r5
 80226fa:	fb09 a908 	mla	r9, r9, r8, sl
 80226fe:	fa1f f989 	uxth.w	r9, r9
 8022702:	f109 0a01 	add.w	sl, r9, #1
 8022706:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 802270a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802270e:	f886 9002 	strb.w	r9, [r6, #2]
 8022712:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022714:	3701      	adds	r7, #1
 8022716:	4408      	add	r0, r1
 8022718:	9912      	ldr	r1, [sp, #72]	; 0x48
 802271a:	440a      	add	r2, r1
 802271c:	e761      	b.n	80225e2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802271e:	b005      	add	sp, #20
 8022720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022724 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022728:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802272a:	4693      	mov	fp, r2
 802272c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802272e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022732:	6868      	ldr	r0, [r5, #4]
 8022734:	6877      	ldr	r7, [r6, #4]
 8022736:	9100      	str	r1, [sp, #0]
 8022738:	3704      	adds	r7, #4
 802273a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 802273e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8022742:	fb00 2404 	mla	r4, r0, r4, r2
 8022746:	682a      	ldr	r2, [r5, #0]
 8022748:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802274c:	4414      	add	r4, r2
 802274e:	6832      	ldr	r2, [r6, #0]
 8022750:	9201      	str	r2, [sp, #4]
 8022752:	9a00      	ldr	r2, [sp, #0]
 8022754:	2a00      	cmp	r2, #0
 8022756:	dc03      	bgt.n	8022760 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022758:	f1bb 0f00 	cmp.w	fp, #0
 802275c:	f340 80bc 	ble.w	80228d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022760:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022762:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8022766:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802276a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802276c:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8022770:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022774:	2b00      	cmp	r3, #0
 8022776:	dd0c      	ble.n	8022792 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022778:	1405      	asrs	r5, r0, #16
 802277a:	d405      	bmi.n	8022788 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802277c:	4555      	cmp	r5, sl
 802277e:	da03      	bge.n	8022788 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022780:	1415      	asrs	r5, r2, #16
 8022782:	d401      	bmi.n	8022788 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022784:	454d      	cmp	r5, r9
 8022786:	db05      	blt.n	8022794 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022788:	4440      	add	r0, r8
 802278a:	4472      	add	r2, lr
 802278c:	3b01      	subs	r3, #1
 802278e:	3403      	adds	r4, #3
 8022790:	e7f0      	b.n	8022774 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8022792:	d03f      	beq.n	8022814 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8022794:	1e5d      	subs	r5, r3, #1
 8022796:	fb08 0c05 	mla	ip, r8, r5, r0
 802279a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 802279e:	d42e      	bmi.n	80227fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80227a0:	45d4      	cmp	ip, sl
 80227a2:	da2c      	bge.n	80227fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80227a4:	fb0e 2505 	mla	r5, lr, r5, r2
 80227a8:	142d      	asrs	r5, r5, #16
 80227aa:	d428      	bmi.n	80227fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80227ac:	454d      	cmp	r5, r9
 80227ae:	da26      	bge.n	80227fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80227b0:	1ce5      	adds	r5, r4, #3
 80227b2:	469c      	mov	ip, r3
 80227b4:	f1bc 0f00 	cmp.w	ip, #0
 80227b8:	f105 0503 	add.w	r5, r5, #3
 80227bc:	dd25      	ble.n	802280a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80227be:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80227c2:	ea4f 4922 	mov.w	r9, r2, asr #16
 80227c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80227ca:	4472      	add	r2, lr
 80227cc:	468a      	mov	sl, r1
 80227ce:	9901      	ldr	r1, [sp, #4]
 80227d0:	fb0a 1909 	mla	r9, sl, r9, r1
 80227d4:	1401      	asrs	r1, r0, #16
 80227d6:	4440      	add	r0, r8
 80227d8:	f819 9001 	ldrb.w	r9, [r9, r1]
 80227dc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80227e0:	eb07 0a09 	add.w	sl, r7, r9
 80227e4:	f817 9009 	ldrb.w	r9, [r7, r9]
 80227e8:	f805 9c06 	strb.w	r9, [r5, #-6]
 80227ec:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80227f0:	f805 9c05 	strb.w	r9, [r5, #-5]
 80227f4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80227f8:	f805 9c04 	strb.w	r9, [r5, #-4]
 80227fc:	e7da      	b.n	80227b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80227fe:	2500      	movs	r5, #0
 8022800:	eba3 0c05 	sub.w	ip, r3, r5
 8022804:	f1bc 0f00 	cmp.w	ip, #0
 8022808:	dc3b      	bgt.n	8022882 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 802280a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802280e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022812:	441c      	add	r4, r3
 8022814:	9b00      	ldr	r3, [sp, #0]
 8022816:	2b00      	cmp	r3, #0
 8022818:	dd5e      	ble.n	80228d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802281a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802281e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022820:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022824:	eeb0 6a62 	vmov.f32	s12, s5
 8022828:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802282c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022830:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022834:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8022838:	eeb0 6a43 	vmov.f32	s12, s6
 802283c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022840:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8022844:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022848:	ee61 7a27 	vmul.f32	s15, s2, s15
 802284c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022850:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022854:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022858:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802285c:	ee12 2a90 	vmov	r2, s5
 8022860:	eef0 2a47 	vmov.f32	s5, s14
 8022864:	fb92 f8f3 	sdiv	r8, r2, r3
 8022868:	ee13 2a10 	vmov	r2, s6
 802286c:	eeb0 3a67 	vmov.f32	s6, s15
 8022870:	fb92 fef3 	sdiv	lr, r2, r3
 8022874:	9b00      	ldr	r3, [sp, #0]
 8022876:	3b01      	subs	r3, #1
 8022878:	9300      	str	r3, [sp, #0]
 802287a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802287c:	bf08      	it	eq
 802287e:	465b      	moveq	r3, fp
 8022880:	e767      	b.n	8022752 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022882:	ea5f 4920 	movs.w	r9, r0, asr #16
 8022886:	d423      	bmi.n	80228d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022888:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802288c:	45cc      	cmp	ip, r9
 802288e:	dd1f      	ble.n	80228d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022890:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8022894:	d41c      	bmi.n	80228d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022896:	68f1      	ldr	r1, [r6, #12]
 8022898:	4551      	cmp	r1, sl
 802289a:	dd19      	ble.n	80228d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802289c:	fa0f fc8c 	sxth.w	ip, ip
 80228a0:	9901      	ldr	r1, [sp, #4]
 80228a2:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80228a6:	f81c c009 	ldrb.w	ip, [ip, r9]
 80228aa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80228ae:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80228b2:	eb07 090c 	add.w	r9, r7, ip
 80228b6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80228ba:	f804 a00c 	strb.w	sl, [r4, ip]
 80228be:	44a4      	add	ip, r4
 80228c0:	f899 a001 	ldrb.w	sl, [r9, #1]
 80228c4:	f88c a001 	strb.w	sl, [ip, #1]
 80228c8:	f899 9002 	ldrb.w	r9, [r9, #2]
 80228cc:	f88c 9002 	strb.w	r9, [ip, #2]
 80228d0:	4440      	add	r0, r8
 80228d2:	4472      	add	r2, lr
 80228d4:	3501      	adds	r5, #1
 80228d6:	e793      	b.n	8022800 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80228d8:	b003      	add	sp, #12
 80228da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080228de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80228de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228e2:	b085      	sub	sp, #20
 80228e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80228e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80228ea:	9202      	str	r2, [sp, #8]
 80228ec:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80228f0:	6860      	ldr	r0, [r4, #4]
 80228f2:	9203      	str	r2, [sp, #12]
 80228f4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80228f8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80228fc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8022900:	fb00 2505 	mla	r5, r0, r5, r2
 8022904:	6822      	ldr	r2, [r4, #0]
 8022906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802290a:	4415      	add	r5, r2
 802290c:	f8dc 2000 	ldr.w	r2, [ip]
 8022910:	9200      	str	r2, [sp, #0]
 8022912:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8022916:	3204      	adds	r2, #4
 8022918:	9201      	str	r2, [sp, #4]
 802291a:	2900      	cmp	r1, #0
 802291c:	dc03      	bgt.n	8022926 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802291e:	9a02      	ldr	r2, [sp, #8]
 8022920:	2a00      	cmp	r2, #0
 8022922:	f340 8127 	ble.w	8022b74 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022928:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802292c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022930:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022932:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8022936:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802293a:	2b00      	cmp	r3, #0
 802293c:	dd0d      	ble.n	802295a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802293e:	1422      	asrs	r2, r4, #16
 8022940:	d405      	bmi.n	802294e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022942:	4542      	cmp	r2, r8
 8022944:	da03      	bge.n	802294e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022946:	1402      	asrs	r2, r0, #16
 8022948:	d401      	bmi.n	802294e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802294a:	42ba      	cmp	r2, r7
 802294c:	db06      	blt.n	802295c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802294e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022950:	4474      	add	r4, lr
 8022952:	3b01      	subs	r3, #1
 8022954:	3503      	adds	r5, #3
 8022956:	4410      	add	r0, r2
 8022958:	e7ef      	b.n	802293a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802295a:	d075      	beq.n	8022a48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 802295c:	1e5a      	subs	r2, r3, #1
 802295e:	fb0e 4602 	mla	r6, lr, r2, r4
 8022962:	1436      	asrs	r6, r6, #16
 8022964:	d465      	bmi.n	8022a32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022966:	4546      	cmp	r6, r8
 8022968:	da63      	bge.n	8022a32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802296a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802296c:	fb06 0202 	mla	r2, r6, r2, r0
 8022970:	1412      	asrs	r2, r2, #16
 8022972:	d45e      	bmi.n	8022a32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022974:	42ba      	cmp	r2, r7
 8022976:	da5c      	bge.n	8022a32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022978:	1cef      	adds	r7, r5, #3
 802297a:	4699      	mov	r9, r3
 802297c:	f1b9 0f00 	cmp.w	r9, #0
 8022980:	dd5d      	ble.n	8022a3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8022982:	1402      	asrs	r2, r0, #16
 8022984:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8022988:	1426      	asrs	r6, r4, #16
 802298a:	4692      	mov	sl, r2
 802298c:	9a00      	ldr	r2, [sp, #0]
 802298e:	fb08 220a 	mla	r2, r8, sl, r2
 8022992:	5d92      	ldrb	r2, [r2, r6]
 8022994:	9e01      	ldr	r6, [sp, #4]
 8022996:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 802299a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 802299e:	d041      	beq.n	8022a24 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80229a0:	9a03      	ldr	r2, [sp, #12]
 80229a2:	fa5f fb86 	uxtb.w	fp, r6
 80229a6:	fb02 f808 	mul.w	r8, r2, r8
 80229aa:	f108 0201 	add.w	r2, r8, #1
 80229ae:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80229b2:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80229b6:	1212      	asrs	r2, r2, #8
 80229b8:	fa1f fa82 	uxth.w	sl, r2
 80229bc:	43d2      	mvns	r2, r2
 80229be:	fb1b fb0a 	smulbb	fp, fp, sl
 80229c2:	b2d2      	uxtb	r2, r2
 80229c4:	fb08 b802 	mla	r8, r8, r2, fp
 80229c8:	fa1f f888 	uxth.w	r8, r8
 80229cc:	f108 0b01 	add.w	fp, r8, #1
 80229d0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80229d4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80229d8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80229dc:	fb1b fb0a 	smulbb	fp, fp, sl
 80229e0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80229e4:	fb16 fa0a 	smulbb	sl, r6, sl
 80229e8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80229ec:	f807 8c03 	strb.w	r8, [r7, #-3]
 80229f0:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80229f4:	fb06 aa02 	mla	sl, r6, r2, sl
 80229f8:	fb08 b802 	mla	r8, r8, r2, fp
 80229fc:	fa1f fa8a 	uxth.w	sl, sl
 8022a00:	fa1f f888 	uxth.w	r8, r8
 8022a04:	f10a 0601 	add.w	r6, sl, #1
 8022a08:	f108 0b01 	add.w	fp, r8, #1
 8022a0c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8022a10:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022a14:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022a18:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022a1c:	f807 ac01 	strb.w	sl, [r7, #-1]
 8022a20:	f807 8c02 	strb.w	r8, [r7, #-2]
 8022a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022a26:	4474      	add	r4, lr
 8022a28:	3703      	adds	r7, #3
 8022a2a:	f109 39ff 	add.w	r9, r9, #4294967295
 8022a2e:	4410      	add	r0, r2
 8022a30:	e7a4      	b.n	802297c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022a32:	f04f 0800 	mov.w	r8, #0
 8022a36:	eba3 0208 	sub.w	r2, r3, r8
 8022a3a:	2a00      	cmp	r2, #0
 8022a3c:	dc3b      	bgt.n	8022ab6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8022a3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022a42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a46:	441d      	add	r5, r3
 8022a48:	2900      	cmp	r1, #0
 8022a4a:	f340 8093 	ble.w	8022b74 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022a4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a58:	3901      	subs	r1, #1
 8022a5a:	eeb0 6a62 	vmov.f32	s12, s5
 8022a5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022a62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022a6a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022a6e:	eeb0 6a43 	vmov.f32	s12, s6
 8022a72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022a76:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8022a7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a92:	ee12 2a90 	vmov	r2, s5
 8022a96:	eef0 2a47 	vmov.f32	s5, s14
 8022a9a:	fb92 fef3 	sdiv	lr, r2, r3
 8022a9e:	ee13 2a10 	vmov	r2, s6
 8022aa2:	eeb0 3a67 	vmov.f32	s6, s15
 8022aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022aaa:	9a02      	ldr	r2, [sp, #8]
 8022aac:	9312      	str	r3, [sp, #72]	; 0x48
 8022aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022ab0:	bf08      	it	eq
 8022ab2:	4613      	moveq	r3, r2
 8022ab4:	e731      	b.n	802291a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022ab6:	1427      	asrs	r7, r4, #16
 8022ab8:	d456      	bmi.n	8022b68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022aba:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8022abe:	42be      	cmp	r6, r7
 8022ac0:	dd52      	ble.n	8022b68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022ac2:	ea5f 4920 	movs.w	r9, r0, asr #16
 8022ac6:	d44f      	bmi.n	8022b68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022ac8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8022acc:	454a      	cmp	r2, r9
 8022ace:	dd4b      	ble.n	8022b68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022ad0:	9a00      	ldr	r2, [sp, #0]
 8022ad2:	b236      	sxth	r6, r6
 8022ad4:	fb09 2606 	mla	r6, r9, r6, r2
 8022ad8:	5df2      	ldrb	r2, [r6, r7]
 8022ada:	9e01      	ldr	r6, [sp, #4]
 8022adc:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8022ae0:	0e3a      	lsrs	r2, r7, #24
 8022ae2:	d041      	beq.n	8022b68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022ae4:	9e03      	ldr	r6, [sp, #12]
 8022ae6:	fa5f fb87 	uxtb.w	fp, r7
 8022aea:	4372      	muls	r2, r6
 8022aec:	1c56      	adds	r6, r2, #1
 8022aee:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8022af2:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8022af6:	1212      	asrs	r2, r2, #8
 8022af8:	f815 9006 	ldrb.w	r9, [r5, r6]
 8022afc:	fa1f fa82 	uxth.w	sl, r2
 8022b00:	43d2      	mvns	r2, r2
 8022b02:	fb1b fb0a 	smulbb	fp, fp, sl
 8022b06:	b2d2      	uxtb	r2, r2
 8022b08:	fb09 b902 	mla	r9, r9, r2, fp
 8022b0c:	fa1f f989 	uxth.w	r9, r9
 8022b10:	f109 0b01 	add.w	fp, r9, #1
 8022b14:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022b18:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8022b1c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8022b20:	fb1b fb0a 	smulbb	fp, fp, sl
 8022b24:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b28:	fb17 fa0a 	smulbb	sl, r7, sl
 8022b2c:	f805 9006 	strb.w	r9, [r5, r6]
 8022b30:	442e      	add	r6, r5
 8022b32:	78b7      	ldrb	r7, [r6, #2]
 8022b34:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022b38:	fb07 aa02 	mla	sl, r7, r2, sl
 8022b3c:	fb09 b902 	mla	r9, r9, r2, fp
 8022b40:	fa1f fa8a 	uxth.w	sl, sl
 8022b44:	fa1f f989 	uxth.w	r9, r9
 8022b48:	f10a 0701 	add.w	r7, sl, #1
 8022b4c:	f109 0b01 	add.w	fp, r9, #1
 8022b50:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022b54:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022b58:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022b5c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b60:	f886 a002 	strb.w	sl, [r6, #2]
 8022b64:	f886 9001 	strb.w	r9, [r6, #1]
 8022b68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022b6a:	4474      	add	r4, lr
 8022b6c:	f108 0801 	add.w	r8, r8, #1
 8022b70:	4410      	add	r0, r2
 8022b72:	e760      	b.n	8022a36 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8022b74:	b005      	add	sp, #20
 8022b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022b7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b7e:	b085      	sub	sp, #20
 8022b80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022b84:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022b86:	9203      	str	r2, [sp, #12]
 8022b88:	6868      	ldr	r0, [r5, #4]
 8022b8a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8022b8e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8022b92:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8022b96:	fb00 2404 	mla	r4, r0, r4, r2
 8022b9a:	682a      	ldr	r2, [r5, #0]
 8022b9c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022ba0:	4414      	add	r4, r2
 8022ba2:	f8dc 2000 	ldr.w	r2, [ip]
 8022ba6:	9201      	str	r2, [sp, #4]
 8022ba8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8022bac:	3204      	adds	r2, #4
 8022bae:	9202      	str	r2, [sp, #8]
 8022bb0:	2900      	cmp	r1, #0
 8022bb2:	dc03      	bgt.n	8022bbc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022bb4:	9a03      	ldr	r2, [sp, #12]
 8022bb6:	2a00      	cmp	r2, #0
 8022bb8:	f340 8137 	ble.w	8022e2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022bbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022bbe:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8022bc2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022bc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022bc8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8022bcc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	dd0d      	ble.n	8022bf0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022bd4:	1405      	asrs	r5, r0, #16
 8022bd6:	d405      	bmi.n	8022be4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022bd8:	4545      	cmp	r5, r8
 8022bda:	da03      	bge.n	8022be4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022bdc:	1415      	asrs	r5, r2, #16
 8022bde:	d401      	bmi.n	8022be4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022be0:	42bd      	cmp	r5, r7
 8022be2:	db06      	blt.n	8022bf2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022be4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022be6:	4470      	add	r0, lr
 8022be8:	3b01      	subs	r3, #1
 8022bea:	3403      	adds	r4, #3
 8022bec:	442a      	add	r2, r5
 8022bee:	e7ef      	b.n	8022bd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022bf0:	d070      	beq.n	8022cd4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8022bf2:	1e5d      	subs	r5, r3, #1
 8022bf4:	fb0e 0605 	mla	r6, lr, r5, r0
 8022bf8:	1436      	asrs	r6, r6, #16
 8022bfa:	d462      	bmi.n	8022cc2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022bfc:	4546      	cmp	r6, r8
 8022bfe:	da60      	bge.n	8022cc2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022c00:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022c02:	fb06 2505 	mla	r5, r6, r5, r2
 8022c06:	142d      	asrs	r5, r5, #16
 8022c08:	d45b      	bmi.n	8022cc2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022c0a:	42bd      	cmp	r5, r7
 8022c0c:	da59      	bge.n	8022cc2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022c0e:	1ce5      	adds	r5, r4, #3
 8022c10:	469a      	mov	sl, r3
 8022c12:	f1ba 0f00 	cmp.w	sl, #0
 8022c16:	dd58      	ble.n	8022cca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8022c18:	1416      	asrs	r6, r2, #16
 8022c1a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8022c1e:	1407      	asrs	r7, r0, #16
 8022c20:	46b1      	mov	r9, r6
 8022c22:	9e01      	ldr	r6, [sp, #4]
 8022c24:	fb08 6609 	mla	r6, r8, r9, r6
 8022c28:	5df6      	ldrb	r6, [r6, r7]
 8022c2a:	9f02      	ldr	r7, [sp, #8]
 8022c2c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8022c30:	0e37      	lsrs	r7, r6, #24
 8022c32:	2fff      	cmp	r7, #255	; 0xff
 8022c34:	f000 80f0 	beq.w	8022e18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8022c38:	fa5f f887 	uxtb.w	r8, r7
 8022c3c:	b3d7      	cbz	r7, 8022cb4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022c3e:	fa1f f788 	uxth.w	r7, r8
 8022c42:	ea6f 0808 	mvn.w	r8, r8
 8022c46:	fa5f fb86 	uxtb.w	fp, r6
 8022c4a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8022c4e:	fa5f f888 	uxtb.w	r8, r8
 8022c52:	fb1b fb07 	smulbb	fp, fp, r7
 8022c56:	fb09 b908 	mla	r9, r9, r8, fp
 8022c5a:	fa1f f989 	uxth.w	r9, r9
 8022c5e:	f109 0b01 	add.w	fp, r9, #1
 8022c62:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022c66:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8022c6a:	fb1b fb08 	smulbb	fp, fp, r8
 8022c6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022c72:	f805 9c03 	strb.w	r9, [r5, #-3]
 8022c76:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8022c7a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8022c7e:	fb09 b907 	mla	r9, r9, r7, fp
 8022c82:	fa1f f989 	uxth.w	r9, r9
 8022c86:	f109 0b01 	add.w	fp, r9, #1
 8022c8a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022c8e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022c92:	f805 9c02 	strb.w	r9, [r5, #-2]
 8022c96:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8022c9a:	fb19 f808 	smulbb	r8, r9, r8
 8022c9e:	fb06 8607 	mla	r6, r6, r7, r8
 8022ca2:	b2b6      	uxth	r6, r6
 8022ca4:	f106 0801 	add.w	r8, r6, #1
 8022ca8:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8022cac:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022cb0:	f805 8c01 	strb.w	r8, [r5, #-1]
 8022cb4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022cb6:	4470      	add	r0, lr
 8022cb8:	3503      	adds	r5, #3
 8022cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022cbe:	4432      	add	r2, r6
 8022cc0:	e7a7      	b.n	8022c12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022cc2:	2600      	movs	r6, #0
 8022cc4:	1b9d      	subs	r5, r3, r6
 8022cc6:	2d00      	cmp	r5, #0
 8022cc8:	dc3b      	bgt.n	8022d42 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8022cca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022cce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022cd2:	441c      	add	r4, r3
 8022cd4:	2900      	cmp	r1, #0
 8022cd6:	f340 80a8 	ble.w	8022e2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022cda:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022ce0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022ce4:	3901      	subs	r1, #1
 8022ce6:	eeb0 6a62 	vmov.f32	s12, s5
 8022cea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022cee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022cf2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022cf6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022cfa:	eeb0 6a43 	vmov.f32	s12, s6
 8022cfe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d02:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8022d06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022d12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022d16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d1e:	ee12 2a90 	vmov	r2, s5
 8022d22:	eef0 2a47 	vmov.f32	s5, s14
 8022d26:	fb92 fef3 	sdiv	lr, r2, r3
 8022d2a:	ee13 2a10 	vmov	r2, s6
 8022d2e:	eeb0 3a67 	vmov.f32	s6, s15
 8022d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d36:	9a03      	ldr	r2, [sp, #12]
 8022d38:	9312      	str	r3, [sp, #72]	; 0x48
 8022d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d3c:	bf08      	it	eq
 8022d3e:	4613      	moveq	r3, r2
 8022d40:	e736      	b.n	8022bb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8022d42:	ea5f 4820 	movs.w	r8, r0, asr #16
 8022d46:	d457      	bmi.n	8022df8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022d48:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8022d4c:	4547      	cmp	r7, r8
 8022d4e:	dd53      	ble.n	8022df8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022d50:	ea5f 4922 	movs.w	r9, r2, asr #16
 8022d54:	d450      	bmi.n	8022df8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022d56:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8022d5a:	454d      	cmp	r5, r9
 8022d5c:	dd4c      	ble.n	8022df8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022d5e:	9d01      	ldr	r5, [sp, #4]
 8022d60:	b23f      	sxth	r7, r7
 8022d62:	fb09 5707 	mla	r7, r9, r7, r5
 8022d66:	f817 5008 	ldrb.w	r5, [r7, r8]
 8022d6a:	9f02      	ldr	r7, [sp, #8]
 8022d6c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8022d70:	0e2f      	lsrs	r7, r5, #24
 8022d72:	2fff      	cmp	r7, #255	; 0xff
 8022d74:	d045      	beq.n	8022e02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8022d76:	fa5f f987 	uxtb.w	r9, r7
 8022d7a:	b3ef      	cbz	r7, 8022df8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022d7c:	fa1f f889 	uxth.w	r8, r9
 8022d80:	ea6f 0909 	mvn.w	r9, r9
 8022d84:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8022d88:	fa5f fb85 	uxtb.w	fp, r5
 8022d8c:	f814 a007 	ldrb.w	sl, [r4, r7]
 8022d90:	fa5f f989 	uxtb.w	r9, r9
 8022d94:	fb1b fb08 	smulbb	fp, fp, r8
 8022d98:	fb0a ba09 	mla	sl, sl, r9, fp
 8022d9c:	fa1f fa8a 	uxth.w	sl, sl
 8022da0:	f10a 0b01 	add.w	fp, sl, #1
 8022da4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8022da8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022dac:	f804 a007 	strb.w	sl, [r4, r7]
 8022db0:	4427      	add	r7, r4
 8022db2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8022db6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8022dba:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022dbe:	fb1b fb09 	smulbb	fp, fp, r9
 8022dc2:	fb0a ba08 	mla	sl, sl, r8, fp
 8022dc6:	fa1f fa8a 	uxth.w	sl, sl
 8022dca:	f10a 0b01 	add.w	fp, sl, #1
 8022dce:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8022dd2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022dd6:	f887 a001 	strb.w	sl, [r7, #1]
 8022dda:	f897 a002 	ldrb.w	sl, [r7, #2]
 8022dde:	fb1a f909 	smulbb	r9, sl, r9
 8022de2:	fb05 9508 	mla	r5, r5, r8, r9
 8022de6:	b2ad      	uxth	r5, r5
 8022de8:	f105 0901 	add.w	r9, r5, #1
 8022dec:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8022df0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022df4:	f887 9002 	strb.w	r9, [r7, #2]
 8022df8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022dfa:	4470      	add	r0, lr
 8022dfc:	3601      	adds	r6, #1
 8022dfe:	442a      	add	r2, r5
 8022e00:	e760      	b.n	8022cc4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8022e02:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8022e06:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8022e0a:	55e5      	strb	r5, [r4, r7]
 8022e0c:	4427      	add	r7, r4
 8022e0e:	0c2d      	lsrs	r5, r5, #16
 8022e10:	f887 8001 	strb.w	r8, [r7, #1]
 8022e14:	70bd      	strb	r5, [r7, #2]
 8022e16:	e7ef      	b.n	8022df8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022e18:	0a37      	lsrs	r7, r6, #8
 8022e1a:	f805 6c03 	strb.w	r6, [r5, #-3]
 8022e1e:	0c36      	lsrs	r6, r6, #16
 8022e20:	f805 7c02 	strb.w	r7, [r5, #-2]
 8022e24:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022e28:	e744      	b.n	8022cb4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022e2a:	b005      	add	sp, #20
 8022e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e34:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022e36:	9201      	str	r2, [sp, #4]
 8022e38:	6870      	ldr	r0, [r6, #4]
 8022e3a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8022e3e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8022e42:	fa1f fe85 	uxth.w	lr, r5
 8022e46:	43ed      	mvns	r5, r5
 8022e48:	f8dc 8000 	ldr.w	r8, [ip]
 8022e4c:	b2ed      	uxtb	r5, r5
 8022e4e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8022e52:	fb00 2404 	mla	r4, r0, r4, r2
 8022e56:	6832      	ldr	r2, [r6, #0]
 8022e58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e5c:	4414      	add	r4, r2
 8022e5e:	2900      	cmp	r1, #0
 8022e60:	dc03      	bgt.n	8022e6a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022e62:	9a01      	ldr	r2, [sp, #4]
 8022e64:	2a00      	cmp	r2, #0
 8022e66:	f340 810d 	ble.w	8023084 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022e6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022e6c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8022e70:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022e76:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8022e7a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	dd0e      	ble.n	8022ea0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022e82:	1406      	asrs	r6, r0, #16
 8022e84:	d405      	bmi.n	8022e92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022e86:	4556      	cmp	r6, sl
 8022e88:	da03      	bge.n	8022e92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022e8a:	1416      	asrs	r6, r2, #16
 8022e8c:	d401      	bmi.n	8022e92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022e8e:	454e      	cmp	r6, r9
 8022e90:	db07      	blt.n	8022ea2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022e92:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022e94:	3b01      	subs	r3, #1
 8022e96:	3403      	adds	r4, #3
 8022e98:	4430      	add	r0, r6
 8022e9a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022e9c:	4432      	add	r2, r6
 8022e9e:	e7ee      	b.n	8022e7e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8022ea0:	d060      	beq.n	8022f64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8022ea2:	1e5e      	subs	r6, r3, #1
 8022ea4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022ea6:	fb07 0706 	mla	r7, r7, r6, r0
 8022eaa:	143f      	asrs	r7, r7, #16
 8022eac:	d451      	bmi.n	8022f52 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8022eae:	4557      	cmp	r7, sl
 8022eb0:	da4f      	bge.n	8022f52 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8022eb2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022eb4:	fb07 2606 	mla	r6, r7, r6, r2
 8022eb8:	1436      	asrs	r6, r6, #16
 8022eba:	d44a      	bmi.n	8022f52 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8022ebc:	454e      	cmp	r6, r9
 8022ebe:	da48      	bge.n	8022f52 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8022ec0:	1ce6      	adds	r6, r4, #3
 8022ec2:	4699      	mov	r9, r3
 8022ec4:	f1b9 0f00 	cmp.w	r9, #0
 8022ec8:	f106 0603 	add.w	r6, r6, #3
 8022ecc:	dd45      	ble.n	8022f5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8022ece:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8022ed2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8022ed6:	1417      	asrs	r7, r2, #16
 8022ed8:	f109 39ff 	add.w	r9, r9, #4294967295
 8022edc:	fb0b a707 	mla	r7, fp, r7, sl
 8022ee0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8022ee4:	fb1b fb05 	smulbb	fp, fp, r5
 8022ee8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022eec:	eb08 0a07 	add.w	sl, r8, r7
 8022ef0:	f818 7007 	ldrb.w	r7, [r8, r7]
 8022ef4:	fb07 b70e 	mla	r7, r7, lr, fp
 8022ef8:	b2bf      	uxth	r7, r7
 8022efa:	f107 0b01 	add.w	fp, r7, #1
 8022efe:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8022f02:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8022f06:	fb1b fb05 	smulbb	fp, fp, r5
 8022f0a:	123f      	asrs	r7, r7, #8
 8022f0c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8022f10:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8022f14:	fb07 b70e 	mla	r7, r7, lr, fp
 8022f18:	b2bf      	uxth	r7, r7
 8022f1a:	f107 0b01 	add.w	fp, r7, #1
 8022f1e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8022f22:	123f      	asrs	r7, r7, #8
 8022f24:	f806 7c05 	strb.w	r7, [r6, #-5]
 8022f28:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8022f2c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8022f30:	fb1a fa05 	smulbb	sl, sl, r5
 8022f34:	fb07 a70e 	mla	r7, r7, lr, sl
 8022f38:	b2bf      	uxth	r7, r7
 8022f3a:	f107 0a01 	add.w	sl, r7, #1
 8022f3e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8022f42:	123f      	asrs	r7, r7, #8
 8022f44:	f806 7c04 	strb.w	r7, [r6, #-4]
 8022f48:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022f4a:	4438      	add	r0, r7
 8022f4c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022f4e:	443a      	add	r2, r7
 8022f50:	e7b8      	b.n	8022ec4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022f52:	2700      	movs	r7, #0
 8022f54:	1bde      	subs	r6, r3, r7
 8022f56:	2e00      	cmp	r6, #0
 8022f58:	dc3f      	bgt.n	8022fda <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022f5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022f5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f62:	441c      	add	r4, r3
 8022f64:	2900      	cmp	r1, #0
 8022f66:	f340 808d 	ble.w	8023084 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f70:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022f74:	3901      	subs	r1, #1
 8022f76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022f7a:	eef0 6a62 	vmov.f32	s13, s5
 8022f7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022f82:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022f86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f8a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8022f8e:	eef0 6a43 	vmov.f32	s13, s6
 8022f92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f96:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8022f9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022f9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022fa2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022fa6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022faa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022fae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022fb2:	ee12 2a90 	vmov	r2, s5
 8022fb6:	eef0 2a47 	vmov.f32	s5, s14
 8022fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fbe:	ee13 2a10 	vmov	r2, s6
 8022fc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8022fc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022fc6:	eeb0 3a67 	vmov.f32	s6, s15
 8022fca:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fce:	9a01      	ldr	r2, [sp, #4]
 8022fd0:	9310      	str	r3, [sp, #64]	; 0x40
 8022fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022fd4:	bf08      	it	eq
 8022fd6:	4613      	moveq	r3, r2
 8022fd8:	e741      	b.n	8022e5e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022fda:	ea5f 4920 	movs.w	r9, r0, asr #16
 8022fde:	d44b      	bmi.n	8023078 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022fe0:	f8dc b008 	ldr.w	fp, [ip, #8]
 8022fe4:	45cb      	cmp	fp, r9
 8022fe6:	dd47      	ble.n	8023078 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022fe8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8022fec:	d444      	bmi.n	8023078 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022fee:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8022ff2:	4556      	cmp	r6, sl
 8022ff4:	dd40      	ble.n	8023078 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022ff6:	fa0f f68b 	sxth.w	r6, fp
 8022ffa:	fb0a 9906 	mla	r9, sl, r6, r9
 8022ffe:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8023002:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023006:	f814 b006 	ldrb.w	fp, [r4, r6]
 802300a:	fb1b fb05 	smulbb	fp, fp, r5
 802300e:	eb08 0a09 	add.w	sl, r8, r9
 8023012:	f818 9009 	ldrb.w	r9, [r8, r9]
 8023016:	fb09 b90e 	mla	r9, r9, lr, fp
 802301a:	fa1f f989 	uxth.w	r9, r9
 802301e:	f109 0b01 	add.w	fp, r9, #1
 8023022:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8023026:	ea4f 2929 	mov.w	r9, r9, asr #8
 802302a:	f804 9006 	strb.w	r9, [r4, r6]
 802302e:	4426      	add	r6, r4
 8023030:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8023034:	f896 b001 	ldrb.w	fp, [r6, #1]
 8023038:	fb1b fb05 	smulbb	fp, fp, r5
 802303c:	fb09 b90e 	mla	r9, r9, lr, fp
 8023040:	fa1f f989 	uxth.w	r9, r9
 8023044:	f109 0b01 	add.w	fp, r9, #1
 8023048:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802304c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023050:	f886 9001 	strb.w	r9, [r6, #1]
 8023054:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8023058:	f896 a002 	ldrb.w	sl, [r6, #2]
 802305c:	fb1a fa05 	smulbb	sl, sl, r5
 8023060:	fb09 a90e 	mla	r9, r9, lr, sl
 8023064:	fa1f f989 	uxth.w	r9, r9
 8023068:	f109 0a01 	add.w	sl, r9, #1
 802306c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8023070:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023074:	f886 9002 	strb.w	r9, [r6, #2]
 8023078:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802307a:	3701      	adds	r7, #1
 802307c:	4430      	add	r0, r6
 802307e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8023080:	4432      	add	r2, r6
 8023082:	e767      	b.n	8022f54 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023084:	b003      	add	sp, #12
 8023086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802308a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802308a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802308e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023094:	9201      	str	r2, [sp, #4]
 8023096:	6868      	ldr	r0, [r5, #4]
 8023098:	9f14      	ldr	r7, [sp, #80]	; 0x50
 802309a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 802309e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80230a2:	fb00 2404 	mla	r4, r0, r4, r2
 80230a6:	682a      	ldr	r2, [r5, #0]
 80230a8:	f8d7 8000 	ldr.w	r8, [r7]
 80230ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80230b0:	4414      	add	r4, r2
 80230b2:	2900      	cmp	r1, #0
 80230b4:	dc03      	bgt.n	80230be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80230b6:	9a01      	ldr	r2, [sp, #4]
 80230b8:	2a00      	cmp	r2, #0
 80230ba:	f340 80af 	ble.w	802321c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80230be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80230c0:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80230c4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80230c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80230ca:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80230ce:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80230d2:	2b00      	cmp	r3, #0
 80230d4:	dd0c      	ble.n	80230f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80230d6:	1405      	asrs	r5, r0, #16
 80230d8:	d405      	bmi.n	80230e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80230da:	4555      	cmp	r5, sl
 80230dc:	da03      	bge.n	80230e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80230de:	1415      	asrs	r5, r2, #16
 80230e0:	d401      	bmi.n	80230e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80230e2:	454d      	cmp	r5, r9
 80230e4:	db05      	blt.n	80230f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80230e6:	4470      	add	r0, lr
 80230e8:	4462      	add	r2, ip
 80230ea:	3b01      	subs	r3, #1
 80230ec:	3403      	adds	r4, #3
 80230ee:	e7f0      	b.n	80230d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80230f0:	d038      	beq.n	8023164 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80230f2:	1e5d      	subs	r5, r3, #1
 80230f4:	fb0e 0605 	mla	r6, lr, r5, r0
 80230f8:	1436      	asrs	r6, r6, #16
 80230fa:	d42a      	bmi.n	8023152 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80230fc:	4556      	cmp	r6, sl
 80230fe:	da28      	bge.n	8023152 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023100:	fb0c 2505 	mla	r5, ip, r5, r2
 8023104:	142d      	asrs	r5, r5, #16
 8023106:	d424      	bmi.n	8023152 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023108:	454d      	cmp	r5, r9
 802310a:	da22      	bge.n	8023152 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 802310c:	1ce6      	adds	r6, r4, #3
 802310e:	4699      	mov	r9, r3
 8023110:	f1b9 0f00 	cmp.w	r9, #0
 8023114:	f106 0603 	add.w	r6, r6, #3
 8023118:	dd1f      	ble.n	802315a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 802311a:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 802311e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8023122:	1415      	asrs	r5, r2, #16
 8023124:	4470      	add	r0, lr
 8023126:	4462      	add	r2, ip
 8023128:	f109 39ff 	add.w	r9, r9, #4294967295
 802312c:	fb0b a505 	mla	r5, fp, r5, sl
 8023130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023134:	eb08 0a05 	add.w	sl, r8, r5
 8023138:	f818 5005 	ldrb.w	r5, [r8, r5]
 802313c:	f806 5c06 	strb.w	r5, [r6, #-6]
 8023140:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8023144:	f806 5c05 	strb.w	r5, [r6, #-5]
 8023148:	f89a 5002 	ldrb.w	r5, [sl, #2]
 802314c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8023150:	e7de      	b.n	8023110 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023152:	2600      	movs	r6, #0
 8023154:	1b9d      	subs	r5, r3, r6
 8023156:	2d00      	cmp	r5, #0
 8023158:	dc38      	bgt.n	80231cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802315a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802315e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023162:	441c      	add	r4, r3
 8023164:	2900      	cmp	r1, #0
 8023166:	dd59      	ble.n	802321c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8023168:	ee30 0a04 	vadd.f32	s0, s0, s8
 802316c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802316e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023172:	3901      	subs	r1, #1
 8023174:	eeb0 6a62 	vmov.f32	s12, s5
 8023178:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802317c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023180:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023184:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8023188:	eeb0 6a43 	vmov.f32	s12, s6
 802318c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023190:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8023194:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023198:	ee61 7a27 	vmul.f32	s15, s2, s15
 802319c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80231a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80231a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80231a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80231ac:	ee12 2a90 	vmov	r2, s5
 80231b0:	eef0 2a47 	vmov.f32	s5, s14
 80231b4:	fb92 fef3 	sdiv	lr, r2, r3
 80231b8:	ee13 2a10 	vmov	r2, s6
 80231bc:	eeb0 3a67 	vmov.f32	s6, s15
 80231c0:	fb92 fcf3 	sdiv	ip, r2, r3
 80231c4:	9a01      	ldr	r2, [sp, #4]
 80231c6:	bf08      	it	eq
 80231c8:	4613      	moveq	r3, r2
 80231ca:	e772      	b.n	80230b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80231cc:	ea5f 4920 	movs.w	r9, r0, asr #16
 80231d0:	d420      	bmi.n	8023214 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80231d2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80231d6:	45cb      	cmp	fp, r9
 80231d8:	dd1c      	ble.n	8023214 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80231da:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80231de:	d419      	bmi.n	8023214 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80231e0:	68fd      	ldr	r5, [r7, #12]
 80231e2:	4555      	cmp	r5, sl
 80231e4:	dd16      	ble.n	8023214 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80231e6:	fa0f f58b 	sxth.w	r5, fp
 80231ea:	fb0a 9505 	mla	r5, sl, r5, r9
 80231ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80231f2:	f818 9005 	ldrb.w	r9, [r8, r5]
 80231f6:	eb08 0b05 	add.w	fp, r8, r5
 80231fa:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80231fe:	f804 9005 	strb.w	r9, [r4, r5]
 8023202:	4425      	add	r5, r4
 8023204:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8023208:	f885 9001 	strb.w	r9, [r5, #1]
 802320c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8023210:	f885 9002 	strb.w	r9, [r5, #2]
 8023214:	4470      	add	r0, lr
 8023216:	4462      	add	r2, ip
 8023218:	3601      	adds	r6, #1
 802321a:	e79b      	b.n	8023154 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802321c:	b003      	add	sp, #12
 802321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023222 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023226:	b085      	sub	sp, #20
 8023228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802322c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802322e:	9202      	str	r2, [sp, #8]
 8023230:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8023234:	6860      	ldr	r0, [r4, #4]
 8023236:	9203      	str	r2, [sp, #12]
 8023238:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 802323c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8023240:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8023244:	fb00 2505 	mla	r5, r0, r5, r2
 8023248:	6822      	ldr	r2, [r4, #0]
 802324a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802324e:	4415      	add	r5, r2
 8023250:	f8dc 2000 	ldr.w	r2, [ip]
 8023254:	9201      	str	r2, [sp, #4]
 8023256:	2900      	cmp	r1, #0
 8023258:	dc03      	bgt.n	8023262 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802325a:	9a02      	ldr	r2, [sp, #8]
 802325c:	2a00      	cmp	r2, #0
 802325e:	f340 8122 	ble.w	80234a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8023262:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023264:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8023268:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 802326c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802326e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8023272:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023276:	2b00      	cmp	r3, #0
 8023278:	dd0d      	ble.n	8023296 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802327a:	1422      	asrs	r2, r4, #16
 802327c:	d405      	bmi.n	802328a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802327e:	4542      	cmp	r2, r8
 8023280:	da03      	bge.n	802328a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023282:	1402      	asrs	r2, r0, #16
 8023284:	d401      	bmi.n	802328a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023286:	42ba      	cmp	r2, r7
 8023288:	db06      	blt.n	8023298 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802328a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802328c:	4474      	add	r4, lr
 802328e:	3b01      	subs	r3, #1
 8023290:	3503      	adds	r5, #3
 8023292:	4410      	add	r0, r2
 8023294:	e7ef      	b.n	8023276 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8023296:	d072      	beq.n	802337e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8023298:	1e5a      	subs	r2, r3, #1
 802329a:	fb0e 4602 	mla	r6, lr, r2, r4
 802329e:	1436      	asrs	r6, r6, #16
 80232a0:	d462      	bmi.n	8023368 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80232a2:	4546      	cmp	r6, r8
 80232a4:	da60      	bge.n	8023368 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80232a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80232a8:	fb06 0202 	mla	r2, r6, r2, r0
 80232ac:	1412      	asrs	r2, r2, #16
 80232ae:	d45b      	bmi.n	8023368 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80232b0:	42ba      	cmp	r2, r7
 80232b2:	da59      	bge.n	8023368 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80232b4:	1cef      	adds	r7, r5, #3
 80232b6:	4699      	mov	r9, r3
 80232b8:	f1b9 0f00 	cmp.w	r9, #0
 80232bc:	dd5a      	ble.n	8023374 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80232be:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80232c2:	1426      	asrs	r6, r4, #16
 80232c4:	1402      	asrs	r2, r0, #16
 80232c6:	fb08 6202 	mla	r2, r8, r2, r6
 80232ca:	9e01      	ldr	r6, [sp, #4]
 80232cc:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80232d0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80232d4:	d041      	beq.n	802335a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80232d6:	9a03      	ldr	r2, [sp, #12]
 80232d8:	fa5f fb86 	uxtb.w	fp, r6
 80232dc:	fb02 f808 	mul.w	r8, r2, r8
 80232e0:	f108 0201 	add.w	r2, r8, #1
 80232e4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80232e8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80232ec:	1212      	asrs	r2, r2, #8
 80232ee:	fa1f fa82 	uxth.w	sl, r2
 80232f2:	43d2      	mvns	r2, r2
 80232f4:	fb1b fb0a 	smulbb	fp, fp, sl
 80232f8:	b2d2      	uxtb	r2, r2
 80232fa:	fb08 b802 	mla	r8, r8, r2, fp
 80232fe:	fa1f f888 	uxth.w	r8, r8
 8023302:	f108 0b01 	add.w	fp, r8, #1
 8023306:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802330a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 802330e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8023312:	fb1b fb0a 	smulbb	fp, fp, sl
 8023316:	ea4f 2828 	mov.w	r8, r8, asr #8
 802331a:	fb16 fa0a 	smulbb	sl, r6, sl
 802331e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8023322:	f807 8c03 	strb.w	r8, [r7, #-3]
 8023326:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 802332a:	fb06 aa02 	mla	sl, r6, r2, sl
 802332e:	fb08 b802 	mla	r8, r8, r2, fp
 8023332:	fa1f fa8a 	uxth.w	sl, sl
 8023336:	fa1f f888 	uxth.w	r8, r8
 802333a:	f10a 0601 	add.w	r6, sl, #1
 802333e:	f108 0b01 	add.w	fp, r8, #1
 8023342:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8023346:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802334a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802334e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023352:	f807 ac01 	strb.w	sl, [r7, #-1]
 8023356:	f807 8c02 	strb.w	r8, [r7, #-2]
 802335a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802335c:	4474      	add	r4, lr
 802335e:	3703      	adds	r7, #3
 8023360:	f109 39ff 	add.w	r9, r9, #4294967295
 8023364:	4410      	add	r0, r2
 8023366:	e7a7      	b.n	80232b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023368:	f04f 0800 	mov.w	r8, #0
 802336c:	eba3 0208 	sub.w	r2, r3, r8
 8023370:	2a00      	cmp	r2, #0
 8023372:	dc3b      	bgt.n	80233ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8023374:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802337c:	441d      	add	r5, r3
 802337e:	2900      	cmp	r1, #0
 8023380:	f340 8091 	ble.w	80234a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8023384:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802338a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802338e:	3901      	subs	r1, #1
 8023390:	eeb0 6a62 	vmov.f32	s12, s5
 8023394:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023398:	ee31 1a05 	vadd.f32	s2, s2, s10
 802339c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80233a0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80233a4:	eeb0 6a43 	vmov.f32	s12, s6
 80233a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80233ac:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80233b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80233b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80233b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80233bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80233c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80233c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80233c8:	ee12 2a90 	vmov	r2, s5
 80233cc:	eef0 2a47 	vmov.f32	s5, s14
 80233d0:	fb92 fef3 	sdiv	lr, r2, r3
 80233d4:	ee13 2a10 	vmov	r2, s6
 80233d8:	eeb0 3a67 	vmov.f32	s6, s15
 80233dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80233e0:	9a02      	ldr	r2, [sp, #8]
 80233e2:	9312      	str	r3, [sp, #72]	; 0x48
 80233e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80233e6:	bf08      	it	eq
 80233e8:	4613      	moveq	r3, r2
 80233ea:	e734      	b.n	8023256 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80233ec:	1427      	asrs	r7, r4, #16
 80233ee:	d454      	bmi.n	802349a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80233f0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80233f4:	42be      	cmp	r6, r7
 80233f6:	dd50      	ble.n	802349a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80233f8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80233fc:	d44d      	bmi.n	802349a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80233fe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8023402:	454a      	cmp	r2, r9
 8023404:	dd49      	ble.n	802349a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023406:	b236      	sxth	r6, r6
 8023408:	9a01      	ldr	r2, [sp, #4]
 802340a:	fb09 7606 	mla	r6, r9, r6, r7
 802340e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8023412:	0e3a      	lsrs	r2, r7, #24
 8023414:	d041      	beq.n	802349a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023416:	9e03      	ldr	r6, [sp, #12]
 8023418:	fa5f fb87 	uxtb.w	fp, r7
 802341c:	4372      	muls	r2, r6
 802341e:	1c56      	adds	r6, r2, #1
 8023420:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8023424:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8023428:	1212      	asrs	r2, r2, #8
 802342a:	f815 9006 	ldrb.w	r9, [r5, r6]
 802342e:	fa1f fa82 	uxth.w	sl, r2
 8023432:	43d2      	mvns	r2, r2
 8023434:	fb1b fb0a 	smulbb	fp, fp, sl
 8023438:	b2d2      	uxtb	r2, r2
 802343a:	fb09 b902 	mla	r9, r9, r2, fp
 802343e:	fa1f f989 	uxth.w	r9, r9
 8023442:	f109 0b01 	add.w	fp, r9, #1
 8023446:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802344a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 802344e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8023452:	fb1b fb0a 	smulbb	fp, fp, sl
 8023456:	ea4f 2929 	mov.w	r9, r9, asr #8
 802345a:	fb17 fa0a 	smulbb	sl, r7, sl
 802345e:	f805 9006 	strb.w	r9, [r5, r6]
 8023462:	442e      	add	r6, r5
 8023464:	78b7      	ldrb	r7, [r6, #2]
 8023466:	f896 9001 	ldrb.w	r9, [r6, #1]
 802346a:	fb07 aa02 	mla	sl, r7, r2, sl
 802346e:	fb09 b902 	mla	r9, r9, r2, fp
 8023472:	fa1f fa8a 	uxth.w	sl, sl
 8023476:	fa1f f989 	uxth.w	r9, r9
 802347a:	f10a 0701 	add.w	r7, sl, #1
 802347e:	f109 0b01 	add.w	fp, r9, #1
 8023482:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023486:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802348a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802348e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023492:	f886 a002 	strb.w	sl, [r6, #2]
 8023496:	f886 9001 	strb.w	r9, [r6, #1]
 802349a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802349c:	4474      	add	r4, lr
 802349e:	f108 0801 	add.w	r8, r8, #1
 80234a2:	4410      	add	r0, r2
 80234a4:	e762      	b.n	802336c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80234a6:	b005      	add	sp, #20
 80234a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080234ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80234ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234b0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80234b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80234b6:	9201      	str	r2, [sp, #4]
 80234b8:	6860      	ldr	r0, [r4, #4]
 80234ba:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80234be:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 80234c2:	fb00 2505 	mla	r5, r0, r5, r2
 80234c6:	6822      	ldr	r2, [r4, #0]
 80234c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80234cc:	4415      	add	r5, r2
 80234ce:	f8dc 2000 	ldr.w	r2, [ip]
 80234d2:	9200      	str	r2, [sp, #0]
 80234d4:	2900      	cmp	r1, #0
 80234d6:	dc03      	bgt.n	80234e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80234d8:	9a01      	ldr	r2, [sp, #4]
 80234da:	2a00      	cmp	r2, #0
 80234dc:	f340 812b 	ble.w	8023736 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80234e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80234e2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80234e6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80234ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80234ec:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80234f0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80234f4:	2b00      	cmp	r3, #0
 80234f6:	dd0e      	ble.n	8023516 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80234f8:	1422      	asrs	r2, r4, #16
 80234fa:	d405      	bmi.n	8023508 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80234fc:	4572      	cmp	r2, lr
 80234fe:	da03      	bge.n	8023508 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023500:	1402      	asrs	r2, r0, #16
 8023502:	d401      	bmi.n	8023508 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023504:	42ba      	cmp	r2, r7
 8023506:	db07      	blt.n	8023518 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023508:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802350a:	3b01      	subs	r3, #1
 802350c:	3503      	adds	r5, #3
 802350e:	4414      	add	r4, r2
 8023510:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023512:	4410      	add	r0, r2
 8023514:	e7ee      	b.n	80234f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023516:	d06f      	beq.n	80235f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8023518:	1e5a      	subs	r2, r3, #1
 802351a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802351c:	fb06 4602 	mla	r6, r6, r2, r4
 8023520:	1436      	asrs	r6, r6, #16
 8023522:	d45e      	bmi.n	80235e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023524:	4576      	cmp	r6, lr
 8023526:	da5c      	bge.n	80235e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023528:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802352a:	fb06 0202 	mla	r2, r6, r2, r0
 802352e:	1412      	asrs	r2, r2, #16
 8023530:	d457      	bmi.n	80235e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023532:	42ba      	cmp	r2, r7
 8023534:	da55      	bge.n	80235e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023536:	1cee      	adds	r6, r5, #3
 8023538:	469a      	mov	sl, r3
 802353a:	f1ba 0f00 	cmp.w	sl, #0
 802353e:	dd56      	ble.n	80235ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8023540:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8023544:	1427      	asrs	r7, r4, #16
 8023546:	1402      	asrs	r2, r0, #16
 8023548:	fb0e 7202 	mla	r2, lr, r2, r7
 802354c:	9f00      	ldr	r7, [sp, #0]
 802354e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8023552:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8023556:	d03c      	beq.n	80235d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023558:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802355c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8023560:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8023564:	fa5f f28e 	uxtb.w	r2, lr
 8023568:	b2ff      	uxtb	r7, r7
 802356a:	f000 80dd 	beq.w	8023728 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802356e:	fa1f f882 	uxth.w	r8, r2
 8023572:	43d2      	mvns	r2, r2
 8023574:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8023578:	fb17 f708 	smulbb	r7, r7, r8
 802357c:	b2d2      	uxtb	r2, r2
 802357e:	fb19 f908 	smulbb	r9, r9, r8
 8023582:	fb0e 7702 	mla	r7, lr, r2, r7
 8023586:	fb1b f808 	smulbb	r8, fp, r8
 802358a:	b2bf      	uxth	r7, r7
 802358c:	f107 0e01 	add.w	lr, r7, #1
 8023590:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8023594:	123f      	asrs	r7, r7, #8
 8023596:	f806 7c03 	strb.w	r7, [r6, #-3]
 802359a:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 802359e:	fb07 9902 	mla	r9, r7, r2, r9
 80235a2:	fa1f f989 	uxth.w	r9, r9
 80235a6:	f109 0701 	add.w	r7, r9, #1
 80235aa:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80235ae:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80235b2:	fb07 8802 	mla	r8, r7, r2, r8
 80235b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80235ba:	fa1f f888 	uxth.w	r8, r8
 80235be:	f806 9c02 	strb.w	r9, [r6, #-2]
 80235c2:	f108 0201 	add.w	r2, r8, #1
 80235c6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80235ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 80235ce:	f806 8c01 	strb.w	r8, [r6, #-1]
 80235d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80235d4:	3603      	adds	r6, #3
 80235d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80235da:	4414      	add	r4, r2
 80235dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80235de:	4410      	add	r0, r2
 80235e0:	e7ab      	b.n	802353a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80235e2:	f04f 0e00 	mov.w	lr, #0
 80235e6:	eba3 020e 	sub.w	r2, r3, lr
 80235ea:	2a00      	cmp	r2, #0
 80235ec:	dc3d      	bgt.n	802366a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80235ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80235f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235f6:	441d      	add	r5, r3
 80235f8:	2900      	cmp	r1, #0
 80235fa:	f340 809c 	ble.w	8023736 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80235fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023604:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023608:	3901      	subs	r1, #1
 802360a:	eeb0 6a62 	vmov.f32	s12, s5
 802360e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023612:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023616:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802361a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 802361e:	eeb0 6a43 	vmov.f32	s12, s6
 8023622:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023626:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 802362a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802362e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023632:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023636:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802363a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802363e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023642:	ee12 2a90 	vmov	r2, s5
 8023646:	eef0 2a47 	vmov.f32	s5, s14
 802364a:	fb92 f3f3 	sdiv	r3, r2, r3
 802364e:	ee13 2a10 	vmov	r2, s6
 8023652:	930f      	str	r3, [sp, #60]	; 0x3c
 8023654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023656:	eeb0 3a67 	vmov.f32	s6, s15
 802365a:	fb92 f3f3 	sdiv	r3, r2, r3
 802365e:	9a01      	ldr	r2, [sp, #4]
 8023660:	9310      	str	r3, [sp, #64]	; 0x40
 8023662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023664:	bf08      	it	eq
 8023666:	4613      	moveq	r3, r2
 8023668:	e734      	b.n	80234d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 802366a:	1427      	asrs	r7, r4, #16
 802366c:	d44d      	bmi.n	802370a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802366e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8023672:	42be      	cmp	r6, r7
 8023674:	dd49      	ble.n	802370a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8023676:	ea5f 4820 	movs.w	r8, r0, asr #16
 802367a:	d446      	bmi.n	802370a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802367c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8023680:	4542      	cmp	r2, r8
 8023682:	dd42      	ble.n	802370a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8023684:	b236      	sxth	r6, r6
 8023686:	9a00      	ldr	r2, [sp, #0]
 8023688:	fb08 7606 	mla	r6, r8, r6, r7
 802368c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8023690:	0e3a      	lsrs	r2, r7, #24
 8023692:	d03a      	beq.n	802370a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8023694:	2aff      	cmp	r2, #255	; 0xff
 8023696:	b2d6      	uxtb	r6, r2
 8023698:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 802369c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80236a0:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80236a4:	b2ff      	uxtb	r7, r7
 80236a6:	d037      	beq.n	8023718 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80236a8:	fa1f f986 	uxth.w	r9, r6
 80236ac:	4472      	add	r2, lr
 80236ae:	43f6      	mvns	r6, r6
 80236b0:	f815 8002 	ldrb.w	r8, [r5, r2]
 80236b4:	fb17 f709 	smulbb	r7, r7, r9
 80236b8:	fb1a fa09 	smulbb	sl, sl, r9
 80236bc:	b2f6      	uxtb	r6, r6
 80236be:	fb1b f909 	smulbb	r9, fp, r9
 80236c2:	fb08 7706 	mla	r7, r8, r6, r7
 80236c6:	b2bf      	uxth	r7, r7
 80236c8:	f107 0801 	add.w	r8, r7, #1
 80236cc:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80236d0:	123f      	asrs	r7, r7, #8
 80236d2:	54af      	strb	r7, [r5, r2]
 80236d4:	442a      	add	r2, r5
 80236d6:	7857      	ldrb	r7, [r2, #1]
 80236d8:	fb07 aa06 	mla	sl, r7, r6, sl
 80236dc:	fa1f fa8a 	uxth.w	sl, sl
 80236e0:	f10a 0701 	add.w	r7, sl, #1
 80236e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80236e8:	7897      	ldrb	r7, [r2, #2]
 80236ea:	fb07 9906 	mla	r9, r7, r6, r9
 80236ee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80236f2:	fa1f f989 	uxth.w	r9, r9
 80236f6:	f882 a001 	strb.w	sl, [r2, #1]
 80236fa:	f109 0601 	add.w	r6, r9, #1
 80236fe:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8023702:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023706:	f882 9002 	strb.w	r9, [r2, #2]
 802370a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802370c:	f10e 0e01 	add.w	lr, lr, #1
 8023710:	4414      	add	r4, r2
 8023712:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023714:	4410      	add	r0, r2
 8023716:	e766      	b.n	80235e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023718:	4472      	add	r2, lr
 802371a:	54af      	strb	r7, [r5, r2]
 802371c:	442a      	add	r2, r5
 802371e:	f882 a001 	strb.w	sl, [r2, #1]
 8023722:	f882 b002 	strb.w	fp, [r2, #2]
 8023726:	e7f0      	b.n	802370a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8023728:	f806 7c03 	strb.w	r7, [r6, #-3]
 802372c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8023730:	f806 bc01 	strb.w	fp, [r6, #-1]
 8023734:	e74d      	b.n	80235d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023736:	b003      	add	sp, #12
 8023738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802373c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023740:	b087      	sub	sp, #28
 8023742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023746:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023748:	9204      	str	r2, [sp, #16]
 802374a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802374e:	6860      	ldr	r0, [r4, #4]
 8023750:	9205      	str	r2, [sp, #20]
 8023752:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8023756:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 802375a:	9101      	str	r1, [sp, #4]
 802375c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8023760:	fb00 2505 	mla	r5, r0, r5, r2
 8023764:	6822      	ldr	r2, [r4, #0]
 8023766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802376a:	4415      	add	r5, r2
 802376c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8023770:	3201      	adds	r2, #1
 8023772:	f022 0201 	bic.w	r2, r2, #1
 8023776:	9202      	str	r2, [sp, #8]
 8023778:	f8dc 2000 	ldr.w	r2, [ip]
 802377c:	9203      	str	r2, [sp, #12]
 802377e:	9a01      	ldr	r2, [sp, #4]
 8023780:	2a00      	cmp	r2, #0
 8023782:	dc03      	bgt.n	802378c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8023784:	9a04      	ldr	r2, [sp, #16]
 8023786:	2a00      	cmp	r2, #0
 8023788:	f340 8135 	ble.w	80239f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802378c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802378e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8023792:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8023796:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023798:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802379c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	dd0d      	ble.n	80237c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80237a4:	1422      	asrs	r2, r4, #16
 80237a6:	d405      	bmi.n	80237b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80237a8:	4542      	cmp	r2, r8
 80237aa:	da03      	bge.n	80237b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80237ac:	1402      	asrs	r2, r0, #16
 80237ae:	d401      	bmi.n	80237b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80237b0:	42ba      	cmp	r2, r7
 80237b2:	db06      	blt.n	80237c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80237b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80237b6:	4474      	add	r4, lr
 80237b8:	3b01      	subs	r3, #1
 80237ba:	3503      	adds	r5, #3
 80237bc:	4410      	add	r0, r2
 80237be:	e7ef      	b.n	80237a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80237c0:	d077      	beq.n	80238b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80237c2:	1e5a      	subs	r2, r3, #1
 80237c4:	fb0e 4602 	mla	r6, lr, r2, r4
 80237c8:	1436      	asrs	r6, r6, #16
 80237ca:	d469      	bmi.n	80238a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80237cc:	4546      	cmp	r6, r8
 80237ce:	da67      	bge.n	80238a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80237d0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80237d2:	fb06 0202 	mla	r2, r6, r2, r0
 80237d6:	1412      	asrs	r2, r2, #16
 80237d8:	d462      	bmi.n	80238a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80237da:	42ba      	cmp	r2, r7
 80237dc:	da60      	bge.n	80238a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80237de:	1cee      	adds	r6, r5, #3
 80237e0:	4699      	mov	r9, r3
 80237e2:	f1b9 0f00 	cmp.w	r9, #0
 80237e6:	dd5f      	ble.n	80238a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80237e8:	1422      	asrs	r2, r4, #16
 80237ea:	9902      	ldr	r1, [sp, #8]
 80237ec:	1407      	asrs	r7, r0, #16
 80237ee:	fb01 2707 	mla	r7, r1, r7, r2
 80237f2:	9903      	ldr	r1, [sp, #12]
 80237f4:	087a      	lsrs	r2, r7, #1
 80237f6:	5c8a      	ldrb	r2, [r1, r2]
 80237f8:	07f9      	lsls	r1, r7, #31
 80237fa:	bf54      	ite	pl
 80237fc:	f002 020f 	andpl.w	r2, r2, #15
 8023800:	1112      	asrmi	r2, r2, #4
 8023802:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023806:	b2d2      	uxtb	r2, r2
 8023808:	2a00      	cmp	r2, #0
 802380a:	d042      	beq.n	8023892 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802380c:	497b      	ldr	r1, [pc, #492]	; (80239fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 802380e:	680f      	ldr	r7, [r1, #0]
 8023810:	9905      	ldr	r1, [sp, #20]
 8023812:	fa5f fb87 	uxtb.w	fp, r7
 8023816:	434a      	muls	r2, r1
 8023818:	f102 0801 	add.w	r8, r2, #1
 802381c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8023820:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8023824:	1212      	asrs	r2, r2, #8
 8023826:	fa1f fa82 	uxth.w	sl, r2
 802382a:	43d2      	mvns	r2, r2
 802382c:	fb1b fb0a 	smulbb	fp, fp, sl
 8023830:	b2d2      	uxtb	r2, r2
 8023832:	fb08 b802 	mla	r8, r8, r2, fp
 8023836:	fa1f f888 	uxth.w	r8, r8
 802383a:	f108 0b01 	add.w	fp, r8, #1
 802383e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8023842:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8023846:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802384a:	fb1b fb0a 	smulbb	fp, fp, sl
 802384e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023852:	fb17 fa0a 	smulbb	sl, r7, sl
 8023856:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 802385a:	f806 8c03 	strb.w	r8, [r6, #-3]
 802385e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8023862:	fb07 aa02 	mla	sl, r7, r2, sl
 8023866:	fb08 b802 	mla	r8, r8, r2, fp
 802386a:	fa1f fa8a 	uxth.w	sl, sl
 802386e:	fa1f f888 	uxth.w	r8, r8
 8023872:	f10a 0701 	add.w	r7, sl, #1
 8023876:	f108 0b01 	add.w	fp, r8, #1
 802387a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802387e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8023882:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023886:	ea4f 2828 	mov.w	r8, r8, asr #8
 802388a:	f806 ac01 	strb.w	sl, [r6, #-1]
 802388e:	f806 8c02 	strb.w	r8, [r6, #-2]
 8023892:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023894:	4474      	add	r4, lr
 8023896:	3603      	adds	r6, #3
 8023898:	f109 39ff 	add.w	r9, r9, #4294967295
 802389c:	4410      	add	r0, r2
 802389e:	e7a0      	b.n	80237e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80238a0:	2700      	movs	r7, #0
 80238a2:	1bda      	subs	r2, r3, r7
 80238a4:	2a00      	cmp	r2, #0
 80238a6:	dc3e      	bgt.n	8023926 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80238a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80238ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80238b0:	441d      	add	r5, r3
 80238b2:	9b01      	ldr	r3, [sp, #4]
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	f340 809e 	ble.w	80239f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80238ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80238be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80238c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80238c4:	eeb0 6a62 	vmov.f32	s12, s5
 80238c8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80238cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80238d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80238d4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80238d8:	eeb0 6a43 	vmov.f32	s12, s6
 80238dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80238e0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80238e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80238e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80238ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 80238f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80238f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80238f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80238fc:	ee12 2a90 	vmov	r2, s5
 8023900:	eef0 2a47 	vmov.f32	s5, s14
 8023904:	fb92 fef3 	sdiv	lr, r2, r3
 8023908:	ee13 2a10 	vmov	r2, s6
 802390c:	eeb0 3a67 	vmov.f32	s6, s15
 8023910:	fb92 f3f3 	sdiv	r3, r2, r3
 8023914:	9314      	str	r3, [sp, #80]	; 0x50
 8023916:	9b01      	ldr	r3, [sp, #4]
 8023918:	9a04      	ldr	r2, [sp, #16]
 802391a:	3b01      	subs	r3, #1
 802391c:	9301      	str	r3, [sp, #4]
 802391e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023920:	bf08      	it	eq
 8023922:	4613      	moveq	r3, r2
 8023924:	e72b      	b.n	802377e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8023926:	1426      	asrs	r6, r4, #16
 8023928:	d460      	bmi.n	80239ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802392a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 802392e:	42b2      	cmp	r2, r6
 8023930:	dd5c      	ble.n	80239ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023932:	ea5f 4820 	movs.w	r8, r0, asr #16
 8023936:	d459      	bmi.n	80239ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023938:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802393c:	4542      	cmp	r2, r8
 802393e:	dd55      	ble.n	80239ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023940:	9a02      	ldr	r2, [sp, #8]
 8023942:	9903      	ldr	r1, [sp, #12]
 8023944:	fb08 6602 	mla	r6, r8, r2, r6
 8023948:	0872      	lsrs	r2, r6, #1
 802394a:	07f6      	lsls	r6, r6, #31
 802394c:	5c8a      	ldrb	r2, [r1, r2]
 802394e:	bf54      	ite	pl
 8023950:	f002 020f 	andpl.w	r2, r2, #15
 8023954:	1112      	asrmi	r2, r2, #4
 8023956:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802395a:	b2d2      	uxtb	r2, r2
 802395c:	2a00      	cmp	r2, #0
 802395e:	d045      	beq.n	80239ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023960:	4926      	ldr	r1, [pc, #152]	; (80239fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8023962:	f8d1 8000 	ldr.w	r8, [r1]
 8023966:	9905      	ldr	r1, [sp, #20]
 8023968:	fa5f fb88 	uxtb.w	fp, r8
 802396c:	434a      	muls	r2, r1
 802396e:	1c56      	adds	r6, r2, #1
 8023970:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8023974:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8023978:	1212      	asrs	r2, r2, #8
 802397a:	f815 9006 	ldrb.w	r9, [r5, r6]
 802397e:	fa1f fa82 	uxth.w	sl, r2
 8023982:	43d2      	mvns	r2, r2
 8023984:	fb1b fb0a 	smulbb	fp, fp, sl
 8023988:	b2d2      	uxtb	r2, r2
 802398a:	fb09 b902 	mla	r9, r9, r2, fp
 802398e:	fa1f f989 	uxth.w	r9, r9
 8023992:	f109 0b01 	add.w	fp, r9, #1
 8023996:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802399a:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 802399e:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80239a2:	fb1b fb0a 	smulbb	fp, fp, sl
 80239a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80239aa:	fb18 fa0a 	smulbb	sl, r8, sl
 80239ae:	f805 9006 	strb.w	r9, [r5, r6]
 80239b2:	442e      	add	r6, r5
 80239b4:	f896 8002 	ldrb.w	r8, [r6, #2]
 80239b8:	f896 9001 	ldrb.w	r9, [r6, #1]
 80239bc:	fb08 aa02 	mla	sl, r8, r2, sl
 80239c0:	fb09 b902 	mla	r9, r9, r2, fp
 80239c4:	fa1f fa8a 	uxth.w	sl, sl
 80239c8:	fa1f f989 	uxth.w	r9, r9
 80239cc:	f10a 0801 	add.w	r8, sl, #1
 80239d0:	f109 0b01 	add.w	fp, r9, #1
 80239d4:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80239d8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80239dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80239e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80239e4:	f886 a002 	strb.w	sl, [r6, #2]
 80239e8:	f886 9001 	strb.w	r9, [r6, #1]
 80239ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80239ee:	4474      	add	r4, lr
 80239f0:	3701      	adds	r7, #1
 80239f2:	4410      	add	r0, r2
 80239f4:	e755      	b.n	80238a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80239f6:	b007      	add	sp, #28
 80239f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239fc:	24027f7c 	.word	0x24027f7c

08023a00 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a04:	b085      	sub	sp, #20
 8023a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023a0a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023a0c:	9203      	str	r2, [sp, #12]
 8023a0e:	6860      	ldr	r0, [r4, #4]
 8023a10:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8023a14:	9100      	str	r1, [sp, #0]
 8023a16:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8023a1a:	fb00 2606 	mla	r6, r0, r6, r2
 8023a1e:	6822      	ldr	r2, [r4, #0]
 8023a20:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023a24:	4416      	add	r6, r2
 8023a26:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8023a2a:	3201      	adds	r2, #1
 8023a2c:	f022 0201 	bic.w	r2, r2, #1
 8023a30:	9201      	str	r2, [sp, #4]
 8023a32:	f8dc 2000 	ldr.w	r2, [ip]
 8023a36:	9202      	str	r2, [sp, #8]
 8023a38:	9a00      	ldr	r2, [sp, #0]
 8023a3a:	2a00      	cmp	r2, #0
 8023a3c:	dc03      	bgt.n	8023a46 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8023a3e:	9a03      	ldr	r2, [sp, #12]
 8023a40:	2a00      	cmp	r2, #0
 8023a42:	f340 8140 	ble.w	8023cc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8023a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023a48:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8023a4c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8023a50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023a52:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8023a56:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8023a5a:	2b00      	cmp	r3, #0
 8023a5c:	dd0e      	ble.n	8023a7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023a5e:	142a      	asrs	r2, r5, #16
 8023a60:	d405      	bmi.n	8023a6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023a62:	4572      	cmp	r2, lr
 8023a64:	da03      	bge.n	8023a6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023a66:	1422      	asrs	r2, r4, #16
 8023a68:	d401      	bmi.n	8023a6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023a6a:	42ba      	cmp	r2, r7
 8023a6c:	db07      	blt.n	8023a7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8023a6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023a70:	3b01      	subs	r3, #1
 8023a72:	3603      	adds	r6, #3
 8023a74:	4415      	add	r5, r2
 8023a76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023a78:	4414      	add	r4, r2
 8023a7a:	e7ee      	b.n	8023a5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023a7c:	d072      	beq.n	8023b64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023a7e:	1e5a      	subs	r2, r3, #1
 8023a80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023a82:	fb00 5002 	mla	r0, r0, r2, r5
 8023a86:	1400      	asrs	r0, r0, #16
 8023a88:	d463      	bmi.n	8023b52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8023a8a:	4570      	cmp	r0, lr
 8023a8c:	da61      	bge.n	8023b52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8023a8e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023a90:	fb00 4202 	mla	r2, r0, r2, r4
 8023a94:	1412      	asrs	r2, r2, #16
 8023a96:	d45c      	bmi.n	8023b52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8023a98:	42ba      	cmp	r2, r7
 8023a9a:	da5a      	bge.n	8023b52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8023a9c:	1cf0      	adds	r0, r6, #3
 8023a9e:	469a      	mov	sl, r3
 8023aa0:	f1ba 0f00 	cmp.w	sl, #0
 8023aa4:	dd59      	ble.n	8023b5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8023aa6:	142a      	asrs	r2, r5, #16
 8023aa8:	9901      	ldr	r1, [sp, #4]
 8023aaa:	1427      	asrs	r7, r4, #16
 8023aac:	fb01 2707 	mla	r7, r1, r7, r2
 8023ab0:	9902      	ldr	r1, [sp, #8]
 8023ab2:	087a      	lsrs	r2, r7, #1
 8023ab4:	5c8a      	ldrb	r2, [r1, r2]
 8023ab6:	07f9      	lsls	r1, r7, #31
 8023ab8:	bf54      	ite	pl
 8023aba:	f002 020f 	andpl.w	r2, r2, #15
 8023abe:	1112      	asrmi	r2, r2, #4
 8023ac0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023ac4:	b2d2      	uxtb	r2, r2
 8023ac6:	2a00      	cmp	r2, #0
 8023ac8:	d03b      	beq.n	8023b42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8023aca:	4980      	ldr	r1, [pc, #512]	; (8023ccc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8023acc:	2aff      	cmp	r2, #255	; 0xff
 8023ace:	680f      	ldr	r7, [r1, #0]
 8023ad0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8023ad4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8023ad8:	b2ff      	uxtb	r7, r7
 8023ada:	f000 80ed 	beq.w	8023cb8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8023ade:	fa1f f882 	uxth.w	r8, r2
 8023ae2:	43d2      	mvns	r2, r2
 8023ae4:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8023ae8:	fb17 f708 	smulbb	r7, r7, r8
 8023aec:	b2d2      	uxtb	r2, r2
 8023aee:	fb19 f908 	smulbb	r9, r9, r8
 8023af2:	fb0e 7702 	mla	r7, lr, r2, r7
 8023af6:	fb1b f808 	smulbb	r8, fp, r8
 8023afa:	b2bf      	uxth	r7, r7
 8023afc:	f107 0e01 	add.w	lr, r7, #1
 8023b00:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8023b04:	123f      	asrs	r7, r7, #8
 8023b06:	f800 7c03 	strb.w	r7, [r0, #-3]
 8023b0a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8023b0e:	fb07 9902 	mla	r9, r7, r2, r9
 8023b12:	fa1f f989 	uxth.w	r9, r9
 8023b16:	f109 0701 	add.w	r7, r9, #1
 8023b1a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023b1e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8023b22:	fb07 8802 	mla	r8, r7, r2, r8
 8023b26:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023b2a:	fa1f f888 	uxth.w	r8, r8
 8023b2e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8023b32:	f108 0201 	add.w	r2, r8, #1
 8023b36:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023b3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023b3e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8023b42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023b44:	3003      	adds	r0, #3
 8023b46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023b4a:	4415      	add	r5, r2
 8023b4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023b4e:	4414      	add	r4, r2
 8023b50:	e7a6      	b.n	8023aa0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023b52:	2700      	movs	r7, #0
 8023b54:	1bda      	subs	r2, r3, r7
 8023b56:	2a00      	cmp	r2, #0
 8023b58:	dc40      	bgt.n	8023bdc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8023b5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023b5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023b62:	441e      	add	r6, r3
 8023b64:	9b00      	ldr	r3, [sp, #0]
 8023b66:	2b00      	cmp	r3, #0
 8023b68:	f340 80ad 	ble.w	8023cc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8023b6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023b72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023b76:	eeb0 6a62 	vmov.f32	s12, s5
 8023b7a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023b7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023b82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023b86:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8023b8a:	eeb0 6a43 	vmov.f32	s12, s6
 8023b8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023b92:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8023b96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023b9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023b9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023ba2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023ba6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023baa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023bae:	ee12 2a90 	vmov	r2, s5
 8023bb2:	eef0 2a47 	vmov.f32	s5, s14
 8023bb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023bba:	ee13 2a10 	vmov	r2, s6
 8023bbe:	9311      	str	r3, [sp, #68]	; 0x44
 8023bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023bc2:	eeb0 3a67 	vmov.f32	s6, s15
 8023bc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023bca:	9312      	str	r3, [sp, #72]	; 0x48
 8023bcc:	9b00      	ldr	r3, [sp, #0]
 8023bce:	9a03      	ldr	r2, [sp, #12]
 8023bd0:	3b01      	subs	r3, #1
 8023bd2:	9300      	str	r3, [sp, #0]
 8023bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023bd6:	bf08      	it	eq
 8023bd8:	4613      	moveq	r3, r2
 8023bda:	e72d      	b.n	8023a38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023bdc:	1428      	asrs	r0, r5, #16
 8023bde:	d45c      	bmi.n	8023c9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023be0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8023be4:	4282      	cmp	r2, r0
 8023be6:	dd58      	ble.n	8023c9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023be8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023bec:	d455      	bmi.n	8023c9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023bee:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8023bf2:	4572      	cmp	r2, lr
 8023bf4:	dd51      	ble.n	8023c9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023bf6:	9a01      	ldr	r2, [sp, #4]
 8023bf8:	9902      	ldr	r1, [sp, #8]
 8023bfa:	fb0e 0002 	mla	r0, lr, r2, r0
 8023bfe:	0842      	lsrs	r2, r0, #1
 8023c00:	07c0      	lsls	r0, r0, #31
 8023c02:	5c8a      	ldrb	r2, [r1, r2]
 8023c04:	bf54      	ite	pl
 8023c06:	f002 020f 	andpl.w	r2, r2, #15
 8023c0a:	1112      	asrmi	r2, r2, #4
 8023c0c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023c10:	b2d2      	uxtb	r2, r2
 8023c12:	2a00      	cmp	r2, #0
 8023c14:	d041      	beq.n	8023c9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023c16:	492d      	ldr	r1, [pc, #180]	; (8023ccc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8023c18:	2aff      	cmp	r2, #255	; 0xff
 8023c1a:	6808      	ldr	r0, [r1, #0]
 8023c1c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8023c20:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8023c24:	fa5f fe80 	uxtb.w	lr, r0
 8023c28:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8023c2c:	d03b      	beq.n	8023ca6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023c2e:	fa1f f982 	uxth.w	r9, r2
 8023c32:	4438      	add	r0, r7
 8023c34:	43d2      	mvns	r2, r2
 8023c36:	f816 8000 	ldrb.w	r8, [r6, r0]
 8023c3a:	fb1e fe09 	smulbb	lr, lr, r9
 8023c3e:	fb1a fa09 	smulbb	sl, sl, r9
 8023c42:	b2d2      	uxtb	r2, r2
 8023c44:	fb1b f909 	smulbb	r9, fp, r9
 8023c48:	fb08 ee02 	mla	lr, r8, r2, lr
 8023c4c:	fa1f fe8e 	uxth.w	lr, lr
 8023c50:	f10e 0801 	add.w	r8, lr, #1
 8023c54:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8023c58:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023c5c:	f806 e000 	strb.w	lr, [r6, r0]
 8023c60:	4430      	add	r0, r6
 8023c62:	f890 e001 	ldrb.w	lr, [r0, #1]
 8023c66:	fb0e aa02 	mla	sl, lr, r2, sl
 8023c6a:	fa1f fa8a 	uxth.w	sl, sl
 8023c6e:	f10a 0e01 	add.w	lr, sl, #1
 8023c72:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8023c76:	f890 e002 	ldrb.w	lr, [r0, #2]
 8023c7a:	fb0e 9902 	mla	r9, lr, r2, r9
 8023c7e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023c82:	fa1f f989 	uxth.w	r9, r9
 8023c86:	f880 a001 	strb.w	sl, [r0, #1]
 8023c8a:	f109 0201 	add.w	r2, r9, #1
 8023c8e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8023c92:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023c96:	f880 9002 	strb.w	r9, [r0, #2]
 8023c9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023c9c:	3701      	adds	r7, #1
 8023c9e:	4415      	add	r5, r2
 8023ca0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023ca2:	4414      	add	r4, r2
 8023ca4:	e756      	b.n	8023b54 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8023ca6:	4438      	add	r0, r7
 8023ca8:	f806 e000 	strb.w	lr, [r6, r0]
 8023cac:	4430      	add	r0, r6
 8023cae:	f880 a001 	strb.w	sl, [r0, #1]
 8023cb2:	f880 b002 	strb.w	fp, [r0, #2]
 8023cb6:	e7f0      	b.n	8023c9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023cb8:	f800 7c03 	strb.w	r7, [r0, #-3]
 8023cbc:	f800 9c02 	strb.w	r9, [r0, #-2]
 8023cc0:	f800 bc01 	strb.w	fp, [r0, #-1]
 8023cc4:	e73d      	b.n	8023b42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8023cc6:	b005      	add	sp, #20
 8023cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ccc:	24027f7c 	.word	0x24027f7c

08023cd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8023cd0:	4770      	bx	lr

08023cd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8023cd2:	4770      	bx	lr

08023cd4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8023cd4:	4770      	bx	lr

08023cd6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8023cd6:	4770      	bx	lr

08023cd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023cd8:	4770      	bx	lr

08023cda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023cda:	4770      	bx	lr

08023cdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8023cdc:	4770      	bx	lr

08023cde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8023cde:	4770      	bx	lr

08023ce0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023ce0:	4770      	bx	lr

08023ce2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8023ce2:	4770      	bx	lr

08023ce4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023ce4:	4770      	bx	lr

08023ce6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8023ce6:	4770      	bx	lr

08023ce8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023ce8:	4770      	bx	lr

08023cea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023cea:	4770      	bx	lr

08023cec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8023cec:	4770      	bx	lr

08023cee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8023cee:	4770      	bx	lr

08023cf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023cf0:	4770      	bx	lr

08023cf2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8023cf2:	4770      	bx	lr

08023cf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023cf4:	4770      	bx	lr

08023cf6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8023cf6:	4770      	bx	lr

08023cf8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8023cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023cfa:	4606      	mov	r6, r0
 8023cfc:	b087      	sub	sp, #28
 8023cfe:	4615      	mov	r5, r2
 8023d00:	461f      	mov	r7, r3
 8023d02:	b353      	cbz	r3, 8023d5a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023d04:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8023d08:	2b00      	cmp	r3, #0
 8023d0a:	dd26      	ble.n	8023d5a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023d0c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8023d10:	2b00      	cmp	r3, #0
 8023d12:	dd22      	ble.n	8023d5a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023d14:	6808      	ldr	r0, [r1, #0]
 8023d16:	aa04      	add	r2, sp, #16
 8023d18:	6849      	ldr	r1, [r1, #4]
 8023d1a:	4c1b      	ldr	r4, [pc, #108]	; (8023d88 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8023d1c:	c203      	stmia	r2!, {r0, r1}
 8023d1e:	a804      	add	r0, sp, #16
 8023d20:	f7fb f892 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023d24:	6820      	ldr	r0, [r4, #0]
 8023d26:	6803      	ldr	r3, [r0, #0]
 8023d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023d2a:	4798      	blx	r3
 8023d2c:	2fff      	cmp	r7, #255	; 0xff
 8023d2e:	d016      	beq.n	8023d5e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8023d30:	f010 0f08 	tst.w	r0, #8
 8023d34:	6820      	ldr	r0, [r4, #0]
 8023d36:	d015      	beq.n	8023d64 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8023d38:	2400      	movs	r4, #0
 8023d3a:	6801      	ldr	r1, [r0, #0]
 8023d3c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8023d40:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023d44:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8023d48:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8023d4c:	9401      	str	r4, [sp, #4]
 8023d4e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8023d52:	9400      	str	r4, [sp, #0]
 8023d54:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8023d56:	4629      	mov	r1, r5
 8023d58:	47a0      	blx	r4
 8023d5a:	b007      	add	sp, #28
 8023d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d5e:	f010 0f02 	tst.w	r0, #2
 8023d62:	e7e7      	b.n	8023d34 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8023d64:	6803      	ldr	r3, [r0, #0]
 8023d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023d68:	4798      	blx	r3
 8023d6a:	4b08      	ldr	r3, [pc, #32]	; (8023d8c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8023d6c:	4601      	mov	r1, r0
 8023d6e:	4630      	mov	r0, r6
 8023d70:	881a      	ldrh	r2, [r3, #0]
 8023d72:	6833      	ldr	r3, [r6, #0]
 8023d74:	e9cd 5700 	strd	r5, r7, [sp]
 8023d78:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8023d7a:	ab04      	add	r3, sp, #16
 8023d7c:	47a8      	blx	r5
 8023d7e:	6820      	ldr	r0, [r4, #0]
 8023d80:	6803      	ldr	r3, [r0, #0]
 8023d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d84:	4798      	blx	r3
 8023d86:	e7e8      	b.n	8023d5a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023d88:	24027f6c 	.word	0x24027f6c
 8023d8c:	24027f66 	.word	0x24027f66

08023d90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8023d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023d94:	b08b      	sub	sp, #44	; 0x2c
 8023d96:	460d      	mov	r5, r1
 8023d98:	4616      	mov	r6, r2
 8023d9a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8023d9e:	f1b8 0f00 	cmp.w	r8, #0
 8023da2:	d047      	beq.n	8023e34 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8023da4:	6810      	ldr	r0, [r2, #0]
 8023da6:	ac06      	add	r4, sp, #24
 8023da8:	6851      	ldr	r1, [r2, #4]
 8023daa:	4f51      	ldr	r7, [pc, #324]	; (8023ef0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8023dac:	c403      	stmia	r4!, {r0, r1}
 8023dae:	6818      	ldr	r0, [r3, #0]
 8023db0:	ac08      	add	r4, sp, #32
 8023db2:	6859      	ldr	r1, [r3, #4]
 8023db4:	c403      	stmia	r4!, {r0, r1}
 8023db6:	a806      	add	r0, sp, #24
 8023db8:	f7fb f846 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023dbc:	4631      	mov	r1, r6
 8023dbe:	a808      	add	r0, sp, #32
 8023dc0:	f7fb f886 	bl	801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023dc4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023dc8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8023dcc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8023dd0:	6838      	ldr	r0, [r7, #0]
 8023dd2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023dd6:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8023dda:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8023dde:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023de2:	440d      	add	r5, r1
 8023de4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8023de8:	440a      	add	r2, r1
 8023dea:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023dee:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8023df2:	4413      	add	r3, r2
 8023df4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8023df8:	6803      	ldr	r3, [r0, #0]
 8023dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023dfc:	4798      	blx	r3
 8023dfe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023e02:	d01a      	beq.n	8023e3a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8023e04:	f010 0f04 	tst.w	r0, #4
 8023e08:	6838      	ldr	r0, [r7, #0]
 8023e0a:	d019      	beq.n	8023e40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8023e0c:	2100      	movs	r1, #0
 8023e0e:	6807      	ldr	r7, [r0, #0]
 8023e10:	b2a4      	uxth	r4, r4
 8023e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8023e16:	b2b6      	uxth	r6, r6
 8023e18:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8023e1c:	9401      	str	r4, [sp, #4]
 8023e1e:	9600      	str	r6, [sp, #0]
 8023e20:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023e24:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8023e28:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8023e2c:	9102      	str	r1, [sp, #8]
 8023e2e:	4629      	mov	r1, r5
 8023e30:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8023e32:	47a0      	blx	r4
 8023e34:	b00b      	add	sp, #44	; 0x2c
 8023e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023e3a:	f010 0f01 	tst.w	r0, #1
 8023e3e:	e7e3      	b.n	8023e08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8023e40:	6803      	ldr	r3, [r0, #0]
 8023e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023e44:	4798      	blx	r3
 8023e46:	4a2b      	ldr	r2, [pc, #172]	; (8023ef4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8023e48:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8023e4c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023e50:	8813      	ldrh	r3, [r2, #0]
 8023e52:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8023e56:	fb03 f404 	mul.w	r4, r3, r4
 8023e5a:	fb03 c101 	mla	r1, r3, r1, ip
 8023e5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023e62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023e66:	4408      	add	r0, r1
 8023e68:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8023e6c:	4404      	add	r4, r0
 8023e6e:	d02e      	beq.n	8023ece <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8023e70:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8023e74:	1b9b      	subs	r3, r3, r6
 8023e76:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8023e7a:	1b96      	subs	r6, r2, r6
 8023e7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023e80:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023e84:	42a0      	cmp	r0, r4
 8023e86:	d22d      	bcs.n	8023ee4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8023e88:	eb00 0e01 	add.w	lr, r0, r1
 8023e8c:	4570      	cmp	r0, lr
 8023e8e:	d210      	bcs.n	8023eb2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8023e90:	f890 9000 	ldrb.w	r9, [r0]
 8023e94:	f815 2b01 	ldrb.w	r2, [r5], #1
 8023e98:	fb19 f90c 	smulbb	r9, r9, ip
 8023e9c:	fb02 9208 	mla	r2, r2, r8, r9
 8023ea0:	b292      	uxth	r2, r2
 8023ea2:	f102 0901 	add.w	r9, r2, #1
 8023ea6:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8023eaa:	1212      	asrs	r2, r2, #8
 8023eac:	f800 2b01 	strb.w	r2, [r0], #1
 8023eb0:	e7ec      	b.n	8023e8c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8023eb2:	4418      	add	r0, r3
 8023eb4:	4435      	add	r5, r6
 8023eb6:	e7e5      	b.n	8023e84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8023eb8:	8813      	ldrh	r3, [r2, #0]
 8023eba:	1b9b      	subs	r3, r3, r6
 8023ebc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023ec0:	4418      	add	r0, r3
 8023ec2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023ec6:	1b9b      	subs	r3, r3, r6
 8023ec8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023ecc:	441d      	add	r5, r3
 8023ece:	42a0      	cmp	r0, r4
 8023ed0:	d208      	bcs.n	8023ee4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8023ed2:	eb00 0c01 	add.w	ip, r0, r1
 8023ed6:	4560      	cmp	r0, ip
 8023ed8:	d2ee      	bcs.n	8023eb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8023eda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023ede:	f800 3b01 	strb.w	r3, [r0], #1
 8023ee2:	e7f8      	b.n	8023ed6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8023ee4:	6838      	ldr	r0, [r7, #0]
 8023ee6:	6803      	ldr	r3, [r0, #0]
 8023ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023eea:	4798      	blx	r3
 8023eec:	e7a2      	b.n	8023e34 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8023eee:	bf00      	nop
 8023ef0:	24027f6c 	.word	0x24027f6c
 8023ef4:	24027f66 	.word	0x24027f66

08023ef8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8023ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023efa:	2300      	movs	r3, #0
 8023efc:	b085      	sub	sp, #20
 8023efe:	9300      	str	r3, [sp, #0]
 8023f00:	4b41      	ldr	r3, [pc, #260]	; (8024008 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8023f02:	781b      	ldrb	r3, [r3, #0]
 8023f04:	2b00      	cmp	r3, #0
 8023f06:	d136      	bne.n	8023f76 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8023f08:	4a40      	ldr	r2, [pc, #256]	; (802400c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8023f0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8023f0e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8023f12:	2b00      	cmp	r3, #0
 8023f14:	d131      	bne.n	8023f7a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8023f16:	4b3e      	ldr	r3, [pc, #248]	; (8024010 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8023f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8023f1c:	ac02      	add	r4, sp, #8
 8023f1e:	6808      	ldr	r0, [r1, #0]
 8023f20:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023f24:	ab02      	add	r3, sp, #8
 8023f26:	6849      	ldr	r1, [r1, #4]
 8023f28:	4d3a      	ldr	r5, [pc, #232]	; (8024014 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8023f2a:	c303      	stmia	r3!, {r0, r1}
 8023f2c:	4669      	mov	r1, sp
 8023f2e:	4620      	mov	r0, r4
 8023f30:	f7fa ffce 	bl	801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023f34:	4668      	mov	r0, sp
 8023f36:	f7fa ff87 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023f3a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8023f3e:	f8bd 2000 	ldrh.w	r2, [sp]
 8023f42:	462e      	mov	r6, r5
 8023f44:	6828      	ldr	r0, [r5, #0]
 8023f46:	4413      	add	r3, r2
 8023f48:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8023f4c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8023f50:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8023f54:	4413      	add	r3, r2
 8023f56:	f8ad 300a 	strh.w	r3, [sp, #10]
 8023f5a:	6803      	ldr	r3, [r0, #0]
 8023f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023f5e:	4798      	blx	r3
 8023f60:	f010 0f01 	tst.w	r0, #1
 8023f64:	d00b      	beq.n	8023f7e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8023f66:	6828      	ldr	r0, [r5, #0]
 8023f68:	6803      	ldr	r3, [r0, #0]
 8023f6a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8023f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023f70:	4798      	blx	r3
 8023f72:	b005      	add	sp, #20
 8023f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f76:	4a26      	ldr	r2, [pc, #152]	; (8024010 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8023f78:	e7c7      	b.n	8023f0a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8023f7a:	4b24      	ldr	r3, [pc, #144]	; (802400c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8023f7c:	e7cc      	b.n	8023f18 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8023f7e:	6830      	ldr	r0, [r6, #0]
 8023f80:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8023f84:	6803      	ldr	r3, [r0, #0]
 8023f86:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8023f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023f8c:	4798      	blx	r3
 8023f8e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8023f92:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8023f96:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8023f9a:	fb14 3402 	smlabb	r4, r4, r2, r3
 8023f9e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023fa2:	4404      	add	r4, r0
 8023fa4:	6830      	ldr	r0, [r6, #0]
 8023fa6:	6803      	ldr	r3, [r0, #0]
 8023fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023faa:	4798      	blx	r3
 8023fac:	4917      	ldr	r1, [pc, #92]	; (802400c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8023fae:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8023fb2:	880b      	ldrh	r3, [r1, #0]
 8023fb4:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8023fb8:	fb03 c202 	mla	r2, r3, r2, ip
 8023fbc:	437b      	muls	r3, r7
 8023fbe:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8023fc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023fc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023fca:	4410      	add	r0, r2
 8023fcc:	18c2      	adds	r2, r0, r3
 8023fce:	4290      	cmp	r0, r2
 8023fd0:	d214      	bcs.n	8023ffc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8023fd2:	eb00 0c07 	add.w	ip, r0, r7
 8023fd6:	4560      	cmp	r0, ip
 8023fd8:	d204      	bcs.n	8023fe4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8023fda:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023fde:	f800 3b01 	strb.w	r3, [r0], #1
 8023fe2:	e7f8      	b.n	8023fd6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8023fe4:	880b      	ldrh	r3, [r1, #0]
 8023fe6:	1b5b      	subs	r3, r3, r5
 8023fe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023fec:	4418      	add	r0, r3
 8023fee:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8023ff2:	1b5b      	subs	r3, r3, r5
 8023ff4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023ff8:	441c      	add	r4, r3
 8023ffa:	e7e8      	b.n	8023fce <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8023ffc:	6830      	ldr	r0, [r6, #0]
 8023ffe:	6803      	ldr	r3, [r0, #0]
 8024000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024002:	4798      	blx	r3
 8024004:	e7b5      	b.n	8023f72 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8024006:	bf00      	nop
 8024008:	24027f64 	.word	0x24027f64
 802400c:	24027f66 	.word	0x24027f66
 8024010:	24027f68 	.word	0x24027f68
 8024014:	24027f6c 	.word	0x24027f6c

08024018 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8024018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802401c:	b089      	sub	sp, #36	; 0x24
 802401e:	4607      	mov	r7, r0
 8024020:	4689      	mov	r9, r1
 8024022:	4692      	mov	sl, r2
 8024024:	ac08      	add	r4, sp, #32
 8024026:	461e      	mov	r6, r3
 8024028:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 802402c:	4620      	mov	r0, r4
 802402e:	f7fe f8f1 	bl	8022214 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024032:	683b      	ldr	r3, [r7, #0]
 8024034:	4605      	mov	r5, r0
 8024036:	4620      	mov	r0, r4
 8024038:	f8d3 8018 	ldr.w	r8, [r3, #24]
 802403c:	f7fd fffe 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024040:	4683      	mov	fp, r0
 8024042:	4620      	mov	r0, r4
 8024044:	f7fe f82e 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8024048:	4653      	mov	r3, sl
 802404a:	464a      	mov	r2, r9
 802404c:	4639      	mov	r1, r7
 802404e:	9500      	str	r5, [sp, #0]
 8024050:	e9cd b001 	strd	fp, r0, [sp, #4]
 8024054:	a806      	add	r0, sp, #24
 8024056:	47c0      	blx	r8
 8024058:	a906      	add	r1, sp, #24
 802405a:	4630      	mov	r0, r6
 802405c:	f7fd fed2 	bl	8021e04 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8024060:	4628      	mov	r0, r5
 8024062:	b009      	add	sp, #36	; 0x24
 8024064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024068 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8024068:	b510      	push	{r4, lr}
 802406a:	4604      	mov	r4, r0
 802406c:	2104      	movs	r1, #4
 802406e:	f006 fc10 	bl	802a892 <_ZdlPvj>
 8024072:	4620      	mov	r0, r4
 8024074:	bd10      	pop	{r4, pc}

08024076 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8024076:	b510      	push	{r4, lr}
 8024078:	4604      	mov	r4, r0
 802407a:	2104      	movs	r1, #4
 802407c:	f006 fc09 	bl	802a892 <_ZdlPvj>
 8024080:	4620      	mov	r0, r4
 8024082:	bd10      	pop	{r4, pc}

08024084 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8024084:	b510      	push	{r4, lr}
 8024086:	4604      	mov	r4, r0
 8024088:	2104      	movs	r1, #4
 802408a:	f006 fc02 	bl	802a892 <_ZdlPvj>
 802408e:	4620      	mov	r0, r4
 8024090:	bd10      	pop	{r4, pc}

08024092 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8024092:	b510      	push	{r4, lr}
 8024094:	4604      	mov	r4, r0
 8024096:	2104      	movs	r1, #4
 8024098:	f006 fbfb 	bl	802a892 <_ZdlPvj>
 802409c:	4620      	mov	r0, r4
 802409e:	bd10      	pop	{r4, pc}

080240a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80240a0:	b510      	push	{r4, lr}
 80240a2:	4604      	mov	r4, r0
 80240a4:	2104      	movs	r1, #4
 80240a6:	f006 fbf4 	bl	802a892 <_ZdlPvj>
 80240aa:	4620      	mov	r0, r4
 80240ac:	bd10      	pop	{r4, pc}

080240ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80240ae:	b510      	push	{r4, lr}
 80240b0:	4604      	mov	r4, r0
 80240b2:	2104      	movs	r1, #4
 80240b4:	f006 fbed 	bl	802a892 <_ZdlPvj>
 80240b8:	4620      	mov	r0, r4
 80240ba:	bd10      	pop	{r4, pc}

080240bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80240bc:	b510      	push	{r4, lr}
 80240be:	4604      	mov	r4, r0
 80240c0:	2104      	movs	r1, #4
 80240c2:	f006 fbe6 	bl	802a892 <_ZdlPvj>
 80240c6:	4620      	mov	r0, r4
 80240c8:	bd10      	pop	{r4, pc}

080240ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80240ca:	b510      	push	{r4, lr}
 80240cc:	4604      	mov	r4, r0
 80240ce:	2104      	movs	r1, #4
 80240d0:	f006 fbdf 	bl	802a892 <_ZdlPvj>
 80240d4:	4620      	mov	r0, r4
 80240d6:	bd10      	pop	{r4, pc}

080240d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80240d8:	b510      	push	{r4, lr}
 80240da:	4604      	mov	r4, r0
 80240dc:	2104      	movs	r1, #4
 80240de:	f006 fbd8 	bl	802a892 <_ZdlPvj>
 80240e2:	4620      	mov	r0, r4
 80240e4:	bd10      	pop	{r4, pc}

080240e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80240e6:	b510      	push	{r4, lr}
 80240e8:	4604      	mov	r4, r0
 80240ea:	2104      	movs	r1, #4
 80240ec:	f006 fbd1 	bl	802a892 <_ZdlPvj>
 80240f0:	4620      	mov	r0, r4
 80240f2:	bd10      	pop	{r4, pc}

080240f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80240f4:	b510      	push	{r4, lr}
 80240f6:	4604      	mov	r4, r0
 80240f8:	2104      	movs	r1, #4
 80240fa:	f006 fbca 	bl	802a892 <_ZdlPvj>
 80240fe:	4620      	mov	r0, r4
 8024100:	bd10      	pop	{r4, pc}

08024102 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8024102:	b510      	push	{r4, lr}
 8024104:	4604      	mov	r4, r0
 8024106:	2104      	movs	r1, #4
 8024108:	f006 fbc3 	bl	802a892 <_ZdlPvj>
 802410c:	4620      	mov	r0, r4
 802410e:	bd10      	pop	{r4, pc}

08024110 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8024110:	b510      	push	{r4, lr}
 8024112:	4604      	mov	r4, r0
 8024114:	2104      	movs	r1, #4
 8024116:	f006 fbbc 	bl	802a892 <_ZdlPvj>
 802411a:	4620      	mov	r0, r4
 802411c:	bd10      	pop	{r4, pc}

0802411e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802411e:	b510      	push	{r4, lr}
 8024120:	4604      	mov	r4, r0
 8024122:	2104      	movs	r1, #4
 8024124:	f006 fbb5 	bl	802a892 <_ZdlPvj>
 8024128:	4620      	mov	r0, r4
 802412a:	bd10      	pop	{r4, pc}

0802412c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802412c:	b510      	push	{r4, lr}
 802412e:	4604      	mov	r4, r0
 8024130:	2104      	movs	r1, #4
 8024132:	f006 fbae 	bl	802a892 <_ZdlPvj>
 8024136:	4620      	mov	r0, r4
 8024138:	bd10      	pop	{r4, pc}

0802413a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802413a:	b510      	push	{r4, lr}
 802413c:	4604      	mov	r4, r0
 802413e:	2104      	movs	r1, #4
 8024140:	f006 fba7 	bl	802a892 <_ZdlPvj>
 8024144:	4620      	mov	r0, r4
 8024146:	bd10      	pop	{r4, pc}

08024148 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8024148:	b510      	push	{r4, lr}
 802414a:	4604      	mov	r4, r0
 802414c:	2104      	movs	r1, #4
 802414e:	f006 fba0 	bl	802a892 <_ZdlPvj>
 8024152:	4620      	mov	r0, r4
 8024154:	bd10      	pop	{r4, pc}

08024156 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8024156:	b510      	push	{r4, lr}
 8024158:	4604      	mov	r4, r0
 802415a:	2104      	movs	r1, #4
 802415c:	f006 fb99 	bl	802a892 <_ZdlPvj>
 8024160:	4620      	mov	r0, r4
 8024162:	bd10      	pop	{r4, pc}

08024164 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8024164:	b510      	push	{r4, lr}
 8024166:	4604      	mov	r4, r0
 8024168:	2104      	movs	r1, #4
 802416a:	f006 fb92 	bl	802a892 <_ZdlPvj>
 802416e:	4620      	mov	r0, r4
 8024170:	bd10      	pop	{r4, pc}

08024172 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8024172:	b510      	push	{r4, lr}
 8024174:	4604      	mov	r4, r0
 8024176:	2104      	movs	r1, #4
 8024178:	f006 fb8b 	bl	802a892 <_ZdlPvj>
 802417c:	4620      	mov	r0, r4
 802417e:	bd10      	pop	{r4, pc}

08024180 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8024180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024184:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8024188:	9c06      	ldr	r4, [sp, #24]
 802418a:	2800      	cmp	r0, #0
 802418c:	d06e      	beq.n	802426c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802418e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8024192:	2d00      	cmp	r5, #0
 8024194:	dd6a      	ble.n	802426c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8024196:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 802419a:	f1bc 0f00 	cmp.w	ip, #0
 802419e:	dd65      	ble.n	802426c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80241a0:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80241a4:	28ff      	cmp	r0, #255	; 0xff
 80241a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80241aa:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80241ae:	fb02 3306 	mla	r3, r2, r6, r3
 80241b2:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80241b6:	b2e4      	uxtb	r4, r4
 80241b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80241bc:	4419      	add	r1, r3
 80241be:	fb02 f30c 	mul.w	r3, r2, ip
 80241c2:	eba2 0205 	sub.w	r2, r2, r5
 80241c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80241ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80241ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80241d2:	440b      	add	r3, r1
 80241d4:	d03e      	beq.n	8024254 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80241d6:	fa1f fc80 	uxth.w	ip, r0
 80241da:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80241de:	fb06 f60c 	mul.w	r6, r6, ip
 80241e2:	b280      	uxth	r0, r0
 80241e4:	fb07 f70c 	mul.w	r7, r7, ip
 80241e8:	fb04 f40c 	mul.w	r4, r4, ip
 80241ec:	4299      	cmp	r1, r3
 80241ee:	d23d      	bcs.n	802426c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80241f0:	eb01 0c05 	add.w	ip, r1, r5
 80241f4:	458c      	cmp	ip, r1
 80241f6:	f101 0e03 	add.w	lr, r1, #3
 80241fa:	d928      	bls.n	802424e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80241fc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8024200:	fb11 f100 	smulbb	r1, r1, r0
 8024204:	4421      	add	r1, r4
 8024206:	b289      	uxth	r1, r1
 8024208:	f101 0801 	add.w	r8, r1, #1
 802420c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8024210:	1209      	asrs	r1, r1, #8
 8024212:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024216:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 802421a:	fb11 f100 	smulbb	r1, r1, r0
 802421e:	4439      	add	r1, r7
 8024220:	b289      	uxth	r1, r1
 8024222:	f101 0801 	add.w	r8, r1, #1
 8024226:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802422a:	1209      	asrs	r1, r1, #8
 802422c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8024230:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8024234:	fb11 f100 	smulbb	r1, r1, r0
 8024238:	4431      	add	r1, r6
 802423a:	b289      	uxth	r1, r1
 802423c:	f101 0801 	add.w	r8, r1, #1
 8024240:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8024244:	1209      	asrs	r1, r1, #8
 8024246:	f80e 1c01 	strb.w	r1, [lr, #-1]
 802424a:	4671      	mov	r1, lr
 802424c:	e7d2      	b.n	80241f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 802424e:	4411      	add	r1, r2
 8024250:	e7cc      	b.n	80241ec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8024252:	4411      	add	r1, r2
 8024254:	4299      	cmp	r1, r3
 8024256:	d209      	bcs.n	802426c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8024258:	1948      	adds	r0, r1, r5
 802425a:	4281      	cmp	r1, r0
 802425c:	d2f9      	bcs.n	8024252 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 802425e:	700c      	strb	r4, [r1, #0]
 8024260:	3103      	adds	r1, #3
 8024262:	f801 7c02 	strb.w	r7, [r1, #-2]
 8024266:	f801 6c01 	strb.w	r6, [r1, #-1]
 802426a:	e7f6      	b.n	802425a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 802426c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024270 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8024270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024274:	b093      	sub	sp, #76	; 0x4c
 8024276:	4699      	mov	r9, r3
 8024278:	4617      	mov	r7, r2
 802427a:	f9b3 2000 	ldrsh.w	r2, [r3]
 802427e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8024282:	4604      	mov	r4, r0
 8024284:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024288:	a80c      	add	r0, sp, #48	; 0x30
 802428a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 802428e:	460d      	mov	r5, r1
 8024290:	4649      	mov	r1, r9
 8024292:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8024296:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802429a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 802429e:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 80242a2:	f7f5 ffd9 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 80242a6:	4639      	mov	r1, r7
 80242a8:	a80c      	add	r0, sp, #48	; 0x30
 80242aa:	f7f5 ffd5 	bl	801a258 <_ZN8touchgfx4RectaNERKS0_>
 80242ae:	4b78      	ldr	r3, [pc, #480]	; (8024490 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80242b0:	8818      	ldrh	r0, [r3, #0]
 80242b2:	4b78      	ldr	r3, [pc, #480]	; (8024494 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 80242b4:	b202      	sxth	r2, r0
 80242b6:	8819      	ldrh	r1, [r3, #0]
 80242b8:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80242bc:	b20f      	sxth	r7, r1
 80242be:	2b00      	cmp	r3, #0
 80242c0:	da07      	bge.n	80242d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 80242c2:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 80242c6:	4463      	add	r3, ip
 80242c8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80242cc:	2300      	movs	r3, #0
 80242ce:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80242d2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80242d6:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 80242da:	1ad2      	subs	r2, r2, r3
 80242dc:	4594      	cmp	ip, r2
 80242de:	bfc4      	itt	gt
 80242e0:	1ac2      	subgt	r2, r0, r3
 80242e2:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 80242e6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80242ea:	2a00      	cmp	r2, #0
 80242ec:	da07      	bge.n	80242fe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 80242ee:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 80242f2:	4462      	add	r2, ip
 80242f4:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80242f8:	2200      	movs	r2, #0
 80242fa:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80242fe:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8024302:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8024306:	1abf      	subs	r7, r7, r2
 8024308:	45bc      	cmp	ip, r7
 802430a:	f8df c190 	ldr.w	ip, [pc, #400]	; 802449c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 802430e:	bfc8      	it	gt
 8024310:	1a8f      	subgt	r7, r1, r2
 8024312:	f89c c000 	ldrb.w	ip, [ip]
 8024316:	bfc8      	it	gt
 8024318:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 802431c:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8024320:	f1bc 0f00 	cmp.w	ip, #0
 8024324:	d176      	bne.n	8024414 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8024326:	4287      	cmp	r7, r0
 8024328:	bf14      	ite	ne
 802432a:	2100      	movne	r1, #0
 802432c:	2101      	moveq	r1, #1
 802432e:	2f00      	cmp	r7, #0
 8024330:	9107      	str	r1, [sp, #28]
 8024332:	dd73      	ble.n	802441c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8024334:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8024338:	2900      	cmp	r1, #0
 802433a:	9104      	str	r1, [sp, #16]
 802433c:	dd6e      	ble.n	802441c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 802433e:	f8b9 1000 	ldrh.w	r1, [r9]
 8024342:	a80e      	add	r0, sp, #56	; 0x38
 8024344:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8024348:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 802434c:	1a5b      	subs	r3, r3, r1
 802434e:	a910      	add	r1, sp, #64	; 0x40
 8024350:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8024354:	b21b      	sxth	r3, r3
 8024356:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 802435a:	f8df a144 	ldr.w	sl, [pc, #324]	; 80244a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 802435e:	9305      	str	r3, [sp, #20]
 8024360:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8024364:	1ad2      	subs	r2, r2, r3
 8024366:	b213      	sxth	r3, r2
 8024368:	9306      	str	r3, [sp, #24]
 802436a:	9b05      	ldr	r3, [sp, #20]
 802436c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8024370:	9b06      	ldr	r3, [sp, #24]
 8024372:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8024376:	9b04      	ldr	r3, [sp, #16]
 8024378:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 802437c:	2300      	movs	r3, #0
 802437e:	9310      	str	r3, [sp, #64]	; 0x40
 8024380:	f7fa fda6 	bl	801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024384:	4640      	mov	r0, r8
 8024386:	f7fa fd5f 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802438a:	a810      	add	r0, sp, #64	; 0x40
 802438c:	f7fa fd5c 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024390:	4b41      	ldr	r3, [pc, #260]	; (8024498 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8024392:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8024396:	4628      	mov	r0, r5
 8024398:	881b      	ldrh	r3, [r3, #0]
 802439a:	9308      	str	r3, [sp, #32]
 802439c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80243a0:	b21b      	sxth	r3, r3
 80243a2:	9303      	str	r3, [sp, #12]
 80243a4:	682b      	ldr	r3, [r5, #0]
 80243a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243a8:	4798      	blx	r3
 80243aa:	9a03      	ldr	r2, [sp, #12]
 80243ac:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80243b0:	4681      	mov	r9, r0
 80243b2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80243b6:	fb13 f302 	smulbb	r3, r3, r2
 80243ba:	2203      	movs	r2, #3
 80243bc:	f8da 0000 	ldr.w	r0, [sl]
 80243c0:	fb15 3302 	smlabb	r3, r5, r2, r3
 80243c4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80243c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80243c8:	441d      	add	r5, r3
 80243ca:	6803      	ldr	r3, [r0, #0]
 80243cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243ce:	4798      	blx	r3
 80243d0:	9009      	str	r0, [sp, #36]	; 0x24
 80243d2:	f8da 0000 	ldr.w	r0, [sl]
 80243d6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80243da:	6803      	ldr	r3, [r0, #0]
 80243dc:	910a      	str	r1, [sp, #40]	; 0x28
 80243de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80243e0:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 80243e4:	4798      	blx	r3
 80243e6:	f010 0f01 	tst.w	r0, #1
 80243ea:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80243ee:	d01e      	beq.n	802442e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 80243f0:	f8da 0000 	ldr.w	r0, [sl]
 80243f4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80243f8:	6803      	ldr	r3, [r0, #0]
 80243fa:	9200      	str	r2, [sp, #0]
 80243fc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80243fe:	462b      	mov	r3, r5
 8024400:	e898 0006 	ldmia.w	r8, {r1, r2}
 8024404:	47b0      	blx	r6
 8024406:	9b05      	ldr	r3, [sp, #20]
 8024408:	80a7      	strh	r7, [r4, #4]
 802440a:	8023      	strh	r3, [r4, #0]
 802440c:	9b06      	ldr	r3, [sp, #24]
 802440e:	8063      	strh	r3, [r4, #2]
 8024410:	9b04      	ldr	r3, [sp, #16]
 8024412:	e007      	b.n	8024424 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8024414:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8024418:	4288      	cmp	r0, r1
 802441a:	e785      	b.n	8024328 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 802441c:	2300      	movs	r3, #0
 802441e:	8023      	strh	r3, [r4, #0]
 8024420:	8063      	strh	r3, [r4, #2]
 8024422:	80a3      	strh	r3, [r4, #4]
 8024424:	4620      	mov	r0, r4
 8024426:	80e3      	strh	r3, [r4, #6]
 8024428:	b013      	add	sp, #76	; 0x4c
 802442a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802442e:	fb09 f606 	mul.w	r6, r9, r6
 8024432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024434:	fb11 6602 	smlabb	r6, r1, r2, r6
 8024438:	9a07      	ldr	r2, [sp, #28]
 802443a:	4433      	add	r3, r6
 802443c:	461e      	mov	r6, r3
 802443e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8024442:	b16a      	cbz	r2, 8024460 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8024444:	9a08      	ldr	r2, [sp, #32]
 8024446:	4593      	cmp	fp, r2
 8024448:	d10a      	bne.n	8024460 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 802444a:	f8da 0000 	ldr.w	r0, [sl]
 802444e:	fb09 f303 	mul.w	r3, r9, r3
 8024452:	4629      	mov	r1, r5
 8024454:	6802      	ldr	r2, [r0, #0]
 8024456:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 802445a:	4632      	mov	r2, r6
 802445c:	47d0      	blx	sl
 802445e:	e7d2      	b.n	8024406 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8024460:	9a03      	ldr	r2, [sp, #12]
 8024462:	f8df b03c 	ldr.w	fp, [pc, #60]	; 80244a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8024466:	fb02 5803 	mla	r8, r2, r3, r5
 802446a:	4545      	cmp	r5, r8
 802446c:	d2cb      	bcs.n	8024406 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 802446e:	f8db 0000 	ldr.w	r0, [fp]
 8024472:	4629      	mov	r1, r5
 8024474:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8024478:	6802      	ldr	r2, [r0, #0]
 802447a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802447e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8024482:	4632      	mov	r2, r6
 8024484:	47d0      	blx	sl
 8024486:	9b03      	ldr	r3, [sp, #12]
 8024488:	444e      	add	r6, r9
 802448a:	441d      	add	r5, r3
 802448c:	e7ed      	b.n	802446a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 802448e:	bf00      	nop
 8024490:	24027f60 	.word	0x24027f60
 8024494:	24027f62 	.word	0x24027f62
 8024498:	24027f66 	.word	0x24027f66
 802449c:	24027f64 	.word	0x24027f64
 80244a0:	24027f6c 	.word	0x24027f6c

080244a4 <_ZN8touchgfx8LCD24bppC1Ev>:
 80244a4:	2200      	movs	r2, #0
 80244a6:	490c      	ldr	r1, [pc, #48]	; (80244d8 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 80244a8:	6042      	str	r2, [r0, #4]
 80244aa:	6001      	str	r1, [r0, #0]
 80244ac:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80244b0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80244b4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80244b8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80244bc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80244c0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80244c4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80244c8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80244cc:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80244d0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80244d4:	4770      	bx	lr
 80244d6:	bf00      	nop
 80244d8:	08030000 	.word	0x08030000

080244dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80244dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244e0:	b091      	sub	sp, #68	; 0x44
 80244e2:	4607      	mov	r7, r0
 80244e4:	4688      	mov	r8, r1
 80244e6:	6810      	ldr	r0, [r2, #0]
 80244e8:	6851      	ldr	r1, [r2, #4]
 80244ea:	ac0c      	add	r4, sp, #48	; 0x30
 80244ec:	4616      	mov	r6, r2
 80244ee:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80244f2:	4d64      	ldr	r5, [pc, #400]	; (8024684 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80244f4:	f8df a190 	ldr.w	sl, [pc, #400]	; 8024688 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80244f8:	c403      	stmia	r4!, {r0, r1}
 80244fa:	6818      	ldr	r0, [r3, #0]
 80244fc:	ac0e      	add	r4, sp, #56	; 0x38
 80244fe:	6859      	ldr	r1, [r3, #4]
 8024500:	c403      	stmia	r4!, {r0, r1}
 8024502:	a80c      	add	r0, sp, #48	; 0x30
 8024504:	f7fa fca0 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024508:	4631      	mov	r1, r6
 802450a:	a80e      	add	r0, sp, #56	; 0x38
 802450c:	f7fa fce0 	bl	801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024510:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8024514:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8024518:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802451c:	6828      	ldr	r0, [r5, #0]
 802451e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024522:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8024526:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 802452a:	440f      	add	r7, r1
 802452c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8024530:	440a      	add	r2, r1
 8024532:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8024536:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802453a:	4413      	add	r3, r2
 802453c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8024540:	6803      	ldr	r3, [r0, #0]
 8024542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024544:	4798      	blx	r3
 8024546:	f010 0f80 	tst.w	r0, #128	; 0x80
 802454a:	6828      	ldr	r0, [r5, #0]
 802454c:	d01f      	beq.n	802458e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 802454e:	2201      	movs	r2, #1
 8024550:	2500      	movs	r5, #0
 8024552:	6801      	ldr	r1, [r0, #0]
 8024554:	b2a4      	uxth	r4, r4
 8024556:	b2b6      	uxth	r6, r6
 8024558:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802455c:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8024560:	250b      	movs	r5, #11
 8024562:	9507      	str	r5, [sp, #28]
 8024564:	f8ba 5000 	ldrh.w	r5, [sl]
 8024568:	f8cd 9010 	str.w	r9, [sp, #16]
 802456c:	9602      	str	r6, [sp, #8]
 802456e:	9401      	str	r4, [sp, #4]
 8024570:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8024574:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8024578:	9203      	str	r2, [sp, #12]
 802457a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802457e:	9200      	str	r2, [sp, #0]
 8024580:	4642      	mov	r2, r8
 8024582:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8024584:	4639      	mov	r1, r7
 8024586:	47a0      	blx	r4
 8024588:	b011      	add	sp, #68	; 0x44
 802458a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802458e:	6803      	ldr	r3, [r0, #0]
 8024590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024592:	4798      	blx	r3
 8024594:	f8ba 5000 	ldrh.w	r5, [sl]
 8024598:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802459c:	f04f 0e04 	mov.w	lr, #4
 80245a0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80245a4:	436e      	muls	r6, r5
 80245a6:	fb05 2303 	mla	r3, r5, r3, r2
 80245aa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80245ae:	1b2d      	subs	r5, r5, r4
 80245b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80245b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80245b8:	4418      	add	r0, r3
 80245ba:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80245be:	1982      	adds	r2, r0, r6
 80245c0:	1b1b      	subs	r3, r3, r4
 80245c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80245c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80245c8:	4290      	cmp	r0, r2
 80245ca:	d254      	bcs.n	8024676 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 80245cc:	eb00 0a04 	add.w	sl, r0, r4
 80245d0:	4550      	cmp	r0, sl
 80245d2:	d24c      	bcs.n	802466e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 80245d4:	f817 1b01 	ldrb.w	r1, [r7], #1
 80245d8:	fb1e e101 	smlabb	r1, lr, r1, lr
 80245dc:	eb08 0c01 	add.w	ip, r8, r1
 80245e0:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80245e4:	b173      	cbz	r3, 8024604 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80245e6:	2bff      	cmp	r3, #255	; 0xff
 80245e8:	f818 b001 	ldrb.w	fp, [r8, r1]
 80245ec:	d10c      	bne.n	8024608 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80245ee:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80245f2:	d109      	bne.n	8024608 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80245f4:	f880 b000 	strb.w	fp, [r0]
 80245f8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80245fc:	7043      	strb	r3, [r0, #1]
 80245fe:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8024602:	7083      	strb	r3, [r0, #2]
 8024604:	3003      	adds	r0, #3
 8024606:	e7e3      	b.n	80245d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8024608:	fb09 f103 	mul.w	r1, r9, r3
 802460c:	1c4b      	adds	r3, r1, #1
 802460e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024612:	7801      	ldrb	r1, [r0, #0]
 8024614:	121b      	asrs	r3, r3, #8
 8024616:	b29e      	uxth	r6, r3
 8024618:	43db      	mvns	r3, r3
 802461a:	fb1b fb06 	smulbb	fp, fp, r6
 802461e:	b2db      	uxtb	r3, r3
 8024620:	fb01 b103 	mla	r1, r1, r3, fp
 8024624:	b289      	uxth	r1, r1
 8024626:	f101 0b01 	add.w	fp, r1, #1
 802462a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 802462e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024632:	fb1b fb03 	smulbb	fp, fp, r3
 8024636:	1209      	asrs	r1, r1, #8
 8024638:	7001      	strb	r1, [r0, #0]
 802463a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802463e:	fb01 b106 	mla	r1, r1, r6, fp
 8024642:	b289      	uxth	r1, r1
 8024644:	f101 0b01 	add.w	fp, r1, #1
 8024648:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 802464c:	1209      	asrs	r1, r1, #8
 802464e:	7041      	strb	r1, [r0, #1]
 8024650:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8024654:	f890 c002 	ldrb.w	ip, [r0, #2]
 8024658:	fb1c f303 	smulbb	r3, ip, r3
 802465c:	fb01 3606 	mla	r6, r1, r6, r3
 8024660:	b2b6      	uxth	r6, r6
 8024662:	1c73      	adds	r3, r6, #1
 8024664:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024668:	1236      	asrs	r6, r6, #8
 802466a:	7086      	strb	r6, [r0, #2]
 802466c:	e7ca      	b.n	8024604 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802466e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024670:	4428      	add	r0, r5
 8024672:	441f      	add	r7, r3
 8024674:	e7a8      	b.n	80245c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8024676:	4b03      	ldr	r3, [pc, #12]	; (8024684 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8024678:	6818      	ldr	r0, [r3, #0]
 802467a:	6803      	ldr	r3, [r0, #0]
 802467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802467e:	4798      	blx	r3
 8024680:	e782      	b.n	8024588 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8024682:	bf00      	nop
 8024684:	24027f6c 	.word	0x24027f6c
 8024688:	24027f66 	.word	0x24027f66

0802468c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024690:	b091      	sub	sp, #68	; 0x44
 8024692:	4680      	mov	r8, r0
 8024694:	460e      	mov	r6, r1
 8024696:	6810      	ldr	r0, [r2, #0]
 8024698:	6851      	ldr	r1, [r2, #4]
 802469a:	ad0c      	add	r5, sp, #48	; 0x30
 802469c:	4614      	mov	r4, r2
 802469e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80246a2:	f8df 9198 	ldr.w	r9, [pc, #408]	; 802483c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80246a6:	f8df a198 	ldr.w	sl, [pc, #408]	; 8024840 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80246aa:	c503      	stmia	r5!, {r0, r1}
 80246ac:	6818      	ldr	r0, [r3, #0]
 80246ae:	ad0e      	add	r5, sp, #56	; 0x38
 80246b0:	6859      	ldr	r1, [r3, #4]
 80246b2:	c503      	stmia	r5!, {r0, r1}
 80246b4:	a80c      	add	r0, sp, #48	; 0x30
 80246b6:	f7fa fbc7 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80246ba:	4621      	mov	r1, r4
 80246bc:	a80e      	add	r0, sp, #56	; 0x38
 80246be:	f7fa fc07 	bl	801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80246c2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80246c6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80246ca:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80246ce:	f8d9 0000 	ldr.w	r0, [r9]
 80246d2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80246d6:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 80246da:	eb08 0401 	add.w	r4, r8, r1
 80246de:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80246e2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80246e6:	440a      	add	r2, r1
 80246e8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80246ec:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80246f0:	4413      	add	r3, r2
 80246f2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80246f6:	6803      	ldr	r3, [r0, #0]
 80246f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80246fa:	4798      	blx	r3
 80246fc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8024700:	f8d9 0000 	ldr.w	r0, [r9]
 8024704:	d022      	beq.n	802474c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8024706:	2200      	movs	r2, #0
 8024708:	f04f 0c01 	mov.w	ip, #1
 802470c:	6801      	ldr	r1, [r0, #0]
 802470e:	b2ad      	uxth	r5, r5
 8024710:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8024714:	e9cd c208 	strd	ip, r2, [sp, #32]
 8024718:	f04f 0c0b 	mov.w	ip, #11
 802471c:	f8cd c01c 	str.w	ip, [sp, #28]
 8024720:	f8ba c000 	ldrh.w	ip, [sl]
 8024724:	9704      	str	r7, [sp, #16]
 8024726:	9502      	str	r5, [sp, #8]
 8024728:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 802472c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8024730:	9203      	str	r2, [sp, #12]
 8024732:	fa1f f288 	uxth.w	r2, r8
 8024736:	9201      	str	r2, [sp, #4]
 8024738:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802473c:	9200      	str	r2, [sp, #0]
 802473e:	4632      	mov	r2, r6
 8024740:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8024742:	4621      	mov	r1, r4
 8024744:	47a8      	blx	r5
 8024746:	b011      	add	sp, #68	; 0x44
 8024748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802474c:	6803      	ldr	r3, [r0, #0]
 802474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024750:	4798      	blx	r3
 8024752:	f8ba 2000 	ldrh.w	r2, [sl]
 8024756:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802475a:	f04f 0e03 	mov.w	lr, #3
 802475e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8024762:	4355      	muls	r5, r2
 8024764:	fa1f fc87 	uxth.w	ip, r7
 8024768:	fb02 1303 	mla	r3, r2, r3, r1
 802476c:	eba2 0208 	sub.w	r2, r2, r8
 8024770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024778:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802477c:	4418      	add	r0, r3
 802477e:	920b      	str	r2, [sp, #44]	; 0x2c
 8024780:	1943      	adds	r3, r0, r5
 8024782:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8024786:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 802478a:	eba2 0208 	sub.w	r2, r2, r8
 802478e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024792:	b2ad      	uxth	r5, r5
 8024794:	4298      	cmp	r0, r3
 8024796:	d24a      	bcs.n	802482e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8024798:	eb00 0908 	add.w	r9, r0, r8
 802479c:	4621      	mov	r1, r4
 802479e:	4548      	cmp	r0, r9
 80247a0:	460c      	mov	r4, r1
 80247a2:	d240      	bcs.n	8024826 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80247a4:	f04f 0a04 	mov.w	sl, #4
 80247a8:	7824      	ldrb	r4, [r4, #0]
 80247aa:	2fff      	cmp	r7, #255	; 0xff
 80247ac:	f101 0101 	add.w	r1, r1, #1
 80247b0:	fb1e a404 	smlabb	r4, lr, r4, sl
 80247b4:	eb06 0a04 	add.w	sl, r6, r4
 80247b8:	f816 b004 	ldrb.w	fp, [r6, r4]
 80247bc:	d02b      	beq.n	8024816 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80247be:	7804      	ldrb	r4, [r0, #0]
 80247c0:	fb14 f405 	smulbb	r4, r4, r5
 80247c4:	fb0b 440c 	mla	r4, fp, ip, r4
 80247c8:	b2a4      	uxth	r4, r4
 80247ca:	f104 0b01 	add.w	fp, r4, #1
 80247ce:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80247d2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80247d6:	fb1b fb05 	smulbb	fp, fp, r5
 80247da:	1224      	asrs	r4, r4, #8
 80247dc:	7004      	strb	r4, [r0, #0]
 80247de:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80247e2:	fb04 b40c 	mla	r4, r4, ip, fp
 80247e6:	b2a4      	uxth	r4, r4
 80247e8:	f104 0b01 	add.w	fp, r4, #1
 80247ec:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80247f0:	1224      	asrs	r4, r4, #8
 80247f2:	7044      	strb	r4, [r0, #1]
 80247f4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80247f8:	f890 a002 	ldrb.w	sl, [r0, #2]
 80247fc:	fb1a fa05 	smulbb	sl, sl, r5
 8024800:	fb04 a40c 	mla	r4, r4, ip, sl
 8024804:	b2a4      	uxth	r4, r4
 8024806:	f104 0a01 	add.w	sl, r4, #1
 802480a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 802480e:	1224      	asrs	r4, r4, #8
 8024810:	7084      	strb	r4, [r0, #2]
 8024812:	3003      	adds	r0, #3
 8024814:	e7c3      	b.n	802479e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8024816:	f880 b000 	strb.w	fp, [r0]
 802481a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 802481e:	7044      	strb	r4, [r0, #1]
 8024820:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8024824:	e7f4      	b.n	8024810 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8024826:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024828:	4420      	add	r0, r4
 802482a:	188c      	adds	r4, r1, r2
 802482c:	e7b2      	b.n	8024794 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 802482e:	4b03      	ldr	r3, [pc, #12]	; (802483c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8024830:	6818      	ldr	r0, [r3, #0]
 8024832:	6803      	ldr	r3, [r0, #0]
 8024834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024836:	4798      	blx	r3
 8024838:	e785      	b.n	8024746 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 802483a:	bf00      	nop
 802483c:	24027f6c 	.word	0x24027f6c
 8024840:	24027f66 	.word	0x24027f66

08024844 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8024844:	b430      	push	{r4, r5}
 8024846:	780d      	ldrb	r5, [r1, #0]
 8024848:	f89d 4008 	ldrb.w	r4, [sp, #8]
 802484c:	b11d      	cbz	r5, 8024856 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 802484e:	2d01      	cmp	r5, #1
 8024850:	d005      	beq.n	802485e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8024852:	bc30      	pop	{r4, r5}
 8024854:	4770      	bx	lr
 8024856:	9402      	str	r4, [sp, #8]
 8024858:	bc30      	pop	{r4, r5}
 802485a:	f7ff be3f 	b.w	80244dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802485e:	9402      	str	r4, [sp, #8]
 8024860:	bc30      	pop	{r4, r5}
 8024862:	f7ff bf13 	b.w	802468c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08024868 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8024868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802486c:	4605      	mov	r5, r0
 802486e:	b08f      	sub	sp, #60	; 0x3c
 8024870:	460c      	mov	r4, r1
 8024872:	461f      	mov	r7, r3
 8024874:	2b00      	cmp	r3, #0
 8024876:	d052      	beq.n	802491e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8024878:	6808      	ldr	r0, [r1, #0]
 802487a:	ab0a      	add	r3, sp, #40	; 0x28
 802487c:	6849      	ldr	r1, [r1, #4]
 802487e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8024a48 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8024882:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8024a4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8024886:	c303      	stmia	r3!, {r0, r1}
 8024888:	6810      	ldr	r0, [r2, #0]
 802488a:	ab0c      	add	r3, sp, #48	; 0x30
 802488c:	6851      	ldr	r1, [r2, #4]
 802488e:	c303      	stmia	r3!, {r0, r1}
 8024890:	a80a      	add	r0, sp, #40	; 0x28
 8024892:	f7fa fad9 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024896:	4621      	mov	r1, r4
 8024898:	a80c      	add	r0, sp, #48	; 0x30
 802489a:	f7fa fb19 	bl	801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802489e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80248a2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80248a6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80248aa:	f8d8 0000 	ldr.w	r0, [r8]
 80248ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 80248b2:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 80248b6:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 80248ba:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80248be:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80248c2:	440a      	add	r2, r1
 80248c4:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80248c8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80248cc:	4413      	add	r3, r2
 80248ce:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80248d2:	6803      	ldr	r3, [r0, #0]
 80248d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80248d6:	4798      	blx	r3
 80248d8:	2fff      	cmp	r7, #255	; 0xff
 80248da:	d023      	beq.n	8024924 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 80248dc:	f010 0f04 	tst.w	r0, #4
 80248e0:	f8d8 0000 	ldr.w	r0, [r8]
 80248e4:	d021      	beq.n	802492a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 80248e6:	2100      	movs	r1, #0
 80248e8:	f04f 0e01 	mov.w	lr, #1
 80248ec:	f8d0 c000 	ldr.w	ip, [r0]
 80248f0:	b2a4      	uxth	r4, r4
 80248f2:	9106      	str	r1, [sp, #24]
 80248f4:	b2b6      	uxth	r6, r6
 80248f6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80248fa:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80248fe:	e9cd e107 	strd	lr, r1, [sp, #28]
 8024902:	f8b9 e000 	ldrh.w	lr, [r9]
 8024906:	9703      	str	r7, [sp, #12]
 8024908:	9401      	str	r4, [sp, #4]
 802490a:	9600      	str	r6, [sp, #0]
 802490c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8024910:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8024914:	9102      	str	r1, [sp, #8]
 8024916:	4629      	mov	r1, r5
 8024918:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 802491c:	47a0      	blx	r4
 802491e:	b00f      	add	sp, #60	; 0x3c
 8024920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024924:	f010 0f01 	tst.w	r0, #1
 8024928:	e7da      	b.n	80248e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 802492a:	6803      	ldr	r3, [r0, #0]
 802492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802492e:	4798      	blx	r3
 8024930:	f8b9 1000 	ldrh.w	r1, [r9]
 8024934:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8024938:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 802493c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8024940:	434c      	muls	r4, r1
 8024942:	2fff      	cmp	r7, #255	; 0xff
 8024944:	fb01 2303 	mla	r3, r1, r3, r2
 8024948:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802494c:	eba1 0106 	sub.w	r1, r1, r6
 8024950:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024954:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024958:	4418      	add	r0, r3
 802495a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802495e:	eba3 0606 	sub.w	r6, r3, r6
 8024962:	4404      	add	r4, r0
 8024964:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8024968:	d04a      	beq.n	8024a00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 802496a:	43fa      	mvns	r2, r7
 802496c:	b2bb      	uxth	r3, r7
 802496e:	b2d7      	uxtb	r7, r2
 8024970:	42a0      	cmp	r0, r4
 8024972:	d263      	bcs.n	8024a3c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8024974:	eb00 0e0c 	add.w	lr, r0, ip
 8024978:	4586      	cmp	lr, r0
 802497a:	f100 0803 	add.w	r8, r0, #3
 802497e:	d93a      	bls.n	80249f6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8024980:	f835 2b02 	ldrh.w	r2, [r5], #2
 8024984:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8024988:	00d0      	lsls	r0, r2, #3
 802498a:	fb19 f907 	smulbb	r9, r9, r7
 802498e:	b2c0      	uxtb	r0, r0
 8024990:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8024994:	fb00 9003 	mla	r0, r0, r3, r9
 8024998:	b280      	uxth	r0, r0
 802499a:	f100 0901 	add.w	r9, r0, #1
 802499e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80249a2:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80249a6:	fb19 f907 	smulbb	r9, r9, r7
 80249aa:	1200      	asrs	r0, r0, #8
 80249ac:	f808 0c03 	strb.w	r0, [r8, #-3]
 80249b0:	10d0      	asrs	r0, r2, #3
 80249b2:	1212      	asrs	r2, r2, #8
 80249b4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80249b8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80249bc:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80249c0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80249c4:	fb00 9003 	mla	r0, r0, r3, r9
 80249c8:	b280      	uxth	r0, r0
 80249ca:	f100 0901 	add.w	r9, r0, #1
 80249ce:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80249d2:	1200      	asrs	r0, r0, #8
 80249d4:	f808 0c02 	strb.w	r0, [r8, #-2]
 80249d8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80249dc:	fb10 f007 	smulbb	r0, r0, r7
 80249e0:	fb02 0203 	mla	r2, r2, r3, r0
 80249e4:	b292      	uxth	r2, r2
 80249e6:	1c50      	adds	r0, r2, #1
 80249e8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80249ec:	4640      	mov	r0, r8
 80249ee:	1212      	asrs	r2, r2, #8
 80249f0:	f808 2c01 	strb.w	r2, [r8, #-1]
 80249f4:	e7c0      	b.n	8024978 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80249f6:	4408      	add	r0, r1
 80249f8:	4435      	add	r5, r6
 80249fa:	e7b9      	b.n	8024970 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80249fc:	4408      	add	r0, r1
 80249fe:	4435      	add	r5, r6
 8024a00:	42a0      	cmp	r0, r4
 8024a02:	d21b      	bcs.n	8024a3c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8024a04:	eb00 070c 	add.w	r7, r0, ip
 8024a08:	42b8      	cmp	r0, r7
 8024a0a:	d2f7      	bcs.n	80249fc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8024a0c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8024a10:	3003      	adds	r0, #3
 8024a12:	00da      	lsls	r2, r3, #3
 8024a14:	b2d2      	uxtb	r2, r2
 8024a16:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8024a1a:	f800 2c03 	strb.w	r2, [r0, #-3]
 8024a1e:	10da      	asrs	r2, r3, #3
 8024a20:	121b      	asrs	r3, r3, #8
 8024a22:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024a26:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024a2a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8024a2e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8024a32:	f800 2c02 	strb.w	r2, [r0, #-2]
 8024a36:	f800 3c01 	strb.w	r3, [r0, #-1]
 8024a3a:	e7e5      	b.n	8024a08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8024a3c:	4b02      	ldr	r3, [pc, #8]	; (8024a48 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8024a3e:	6818      	ldr	r0, [r3, #0]
 8024a40:	6803      	ldr	r3, [r0, #0]
 8024a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a44:	4798      	blx	r3
 8024a46:	e76a      	b.n	802491e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8024a48:	24027f6c 	.word	0x24027f6c
 8024a4c:	24027f66 	.word	0x24027f66

08024a50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8024a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024a54:	b08a      	sub	sp, #40	; 0x28
 8024a56:	460d      	mov	r5, r1
 8024a58:	4604      	mov	r4, r0
 8024a5a:	461e      	mov	r6, r3
 8024a5c:	6808      	ldr	r0, [r1, #0]
 8024a5e:	ab06      	add	r3, sp, #24
 8024a60:	6849      	ldr	r1, [r1, #4]
 8024a62:	4f5d      	ldr	r7, [pc, #372]	; (8024bd8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8024a64:	c303      	stmia	r3!, {r0, r1}
 8024a66:	6810      	ldr	r0, [r2, #0]
 8024a68:	ab08      	add	r3, sp, #32
 8024a6a:	6851      	ldr	r1, [r2, #4]
 8024a6c:	c303      	stmia	r3!, {r0, r1}
 8024a6e:	a806      	add	r0, sp, #24
 8024a70:	f7fa f9ea 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024a74:	4629      	mov	r1, r5
 8024a76:	a808      	add	r0, sp, #32
 8024a78:	f7fa fa2a 	bl	801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024a7c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8024a80:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8024a84:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8024a88:	6838      	ldr	r0, [r7, #0]
 8024a8a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024a8e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8024a92:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8024a96:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8024a9a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8024a9e:	440a      	add	r2, r1
 8024aa0:	f8ad 2020 	strh.w	r2, [sp, #32]
 8024aa4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8024aa8:	4413      	add	r3, r2
 8024aaa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8024aae:	6803      	ldr	r3, [r0, #0]
 8024ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024ab2:	4798      	blx	r3
 8024ab4:	2eff      	cmp	r6, #255	; 0xff
 8024ab6:	d119      	bne.n	8024aec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8024ab8:	f010 0f20 	tst.w	r0, #32
 8024abc:	6838      	ldr	r0, [r7, #0]
 8024abe:	d018      	beq.n	8024af2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8024ac0:	b2ad      	uxth	r5, r5
 8024ac2:	2700      	movs	r7, #0
 8024ac4:	6801      	ldr	r1, [r0, #0]
 8024ac6:	9501      	str	r5, [sp, #4]
 8024ac8:	fa1f f588 	uxth.w	r5, r8
 8024acc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8024ad0:	9500      	str	r5, [sp, #0]
 8024ad2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024ad6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8024ada:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8024ade:	9602      	str	r6, [sp, #8]
 8024ae0:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8024ae2:	4621      	mov	r1, r4
 8024ae4:	47a8      	blx	r5
 8024ae6:	b00a      	add	sp, #40	; 0x28
 8024ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024aec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024af0:	e7e4      	b.n	8024abc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8024af2:	6803      	ldr	r3, [r0, #0]
 8024af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024af6:	4798      	blx	r3
 8024af8:	4b38      	ldr	r3, [pc, #224]	; (8024bdc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8024afa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8024afe:	f8b3 c000 	ldrh.w	ip, [r3]
 8024b02:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8024b06:	fb0c f505 	mul.w	r5, ip, r5
 8024b0a:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8024b0e:	fb0c 2303 	mla	r3, ip, r3, r2
 8024b12:	ebac 0c08 	sub.w	ip, ip, r8
 8024b16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024b1a:	ebae 0e08 	sub.w	lr, lr, r8
 8024b1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024b22:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024b26:	4418      	add	r0, r3
 8024b28:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8024b2c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8024b30:	4405      	add	r5, r0
 8024b32:	42a8      	cmp	r0, r5
 8024b34:	d24a      	bcs.n	8024bcc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8024b36:	eb00 0803 	add.w	r8, r0, r3
 8024b3a:	4540      	cmp	r0, r8
 8024b3c:	d243      	bcs.n	8024bc6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8024b3e:	78e2      	ldrb	r2, [r4, #3]
 8024b40:	b15a      	cbz	r2, 8024b5a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8024b42:	2aff      	cmp	r2, #255	; 0xff
 8024b44:	f894 9000 	ldrb.w	r9, [r4]
 8024b48:	d10a      	bne.n	8024b60 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8024b4a:	2eff      	cmp	r6, #255	; 0xff
 8024b4c:	d108      	bne.n	8024b60 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8024b4e:	f880 9000 	strb.w	r9, [r0]
 8024b52:	7862      	ldrb	r2, [r4, #1]
 8024b54:	7042      	strb	r2, [r0, #1]
 8024b56:	78a2      	ldrb	r2, [r4, #2]
 8024b58:	7082      	strb	r2, [r0, #2]
 8024b5a:	3003      	adds	r0, #3
 8024b5c:	3404      	adds	r4, #4
 8024b5e:	e7ec      	b.n	8024b3a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8024b60:	4372      	muls	r2, r6
 8024b62:	1c51      	adds	r1, r2, #1
 8024b64:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024b68:	1209      	asrs	r1, r1, #8
 8024b6a:	fa1f fa81 	uxth.w	sl, r1
 8024b6e:	43c9      	mvns	r1, r1
 8024b70:	fb19 f90a 	smulbb	r9, r9, sl
 8024b74:	b2ca      	uxtb	r2, r1
 8024b76:	7801      	ldrb	r1, [r0, #0]
 8024b78:	fb01 9902 	mla	r9, r1, r2, r9
 8024b7c:	fa1f f989 	uxth.w	r9, r9
 8024b80:	f109 0101 	add.w	r1, r9, #1
 8024b84:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8024b88:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024b8c:	f880 9000 	strb.w	r9, [r0]
 8024b90:	f890 9001 	ldrb.w	r9, [r0, #1]
 8024b94:	7861      	ldrb	r1, [r4, #1]
 8024b96:	fb19 f902 	smulbb	r9, r9, r2
 8024b9a:	fb01 910a 	mla	r1, r1, sl, r9
 8024b9e:	b289      	uxth	r1, r1
 8024ba0:	f101 0901 	add.w	r9, r1, #1
 8024ba4:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8024ba8:	1209      	asrs	r1, r1, #8
 8024baa:	7041      	strb	r1, [r0, #1]
 8024bac:	7881      	ldrb	r1, [r0, #2]
 8024bae:	f894 9002 	ldrb.w	r9, [r4, #2]
 8024bb2:	fb11 f202 	smulbb	r2, r1, r2
 8024bb6:	fb09 220a 	mla	r2, r9, sl, r2
 8024bba:	b292      	uxth	r2, r2
 8024bbc:	1c51      	adds	r1, r2, #1
 8024bbe:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024bc2:	1212      	asrs	r2, r2, #8
 8024bc4:	e7c8      	b.n	8024b58 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8024bc6:	4460      	add	r0, ip
 8024bc8:	4474      	add	r4, lr
 8024bca:	e7b2      	b.n	8024b32 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8024bcc:	6838      	ldr	r0, [r7, #0]
 8024bce:	6803      	ldr	r3, [r0, #0]
 8024bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024bd2:	4798      	blx	r3
 8024bd4:	e787      	b.n	8024ae6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8024bd6:	bf00      	nop
 8024bd8:	24027f6c 	.word	0x24027f6c
 8024bdc:	24027f66 	.word	0x24027f66

08024be0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8024be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024be4:	b085      	sub	sp, #20
 8024be6:	4606      	mov	r6, r0
 8024be8:	460c      	mov	r4, r1
 8024bea:	4691      	mov	r9, r2
 8024bec:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8024bf0:	4698      	mov	r8, r3
 8024bf2:	b31d      	cbz	r5, 8024c3c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8024bf4:	4608      	mov	r0, r1
 8024bf6:	f7fd fa21 	bl	802203c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024bfa:	4607      	mov	r7, r0
 8024bfc:	4620      	mov	r0, r4
 8024bfe:	f7fd fa51 	bl	80220a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8024c02:	f8ad 000e 	strh.w	r0, [sp, #14]
 8024c06:	4620      	mov	r0, r4
 8024c08:	f8ad 9008 	strh.w	r9, [sp, #8]
 8024c0c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024c10:	f8ad 700c 	strh.w	r7, [sp, #12]
 8024c14:	f7fd fb82 	bl	802231c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024c18:	280b      	cmp	r0, #11
 8024c1a:	d80f      	bhi.n	8024c3c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8024c1c:	e8df f000 	tbb	[pc, r0]
 8024c20:	0e062920 	.word	0x0e062920
 8024c24:	0e0e0e0e 	.word	0x0e0e0e0e
 8024c28:	110e0e0e 	.word	0x110e0e0e
 8024c2c:	4620      	mov	r0, r4
 8024c2e:	f7fd faf1 	bl	8022214 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024c32:	462b      	mov	r3, r5
 8024c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024c36:	a902      	add	r1, sp, #8
 8024c38:	f7ff ff0a 	bl	8024a50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8024c3c:	b005      	add	sp, #20
 8024c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024c42:	4620      	mov	r0, r4
 8024c44:	f7fd fae6 	bl	8022214 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024c48:	4606      	mov	r6, r0
 8024c4a:	4620      	mov	r0, r4
 8024c4c:	f7fd fb12 	bl	8022274 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8024c50:	9500      	str	r5, [sp, #0]
 8024c52:	4601      	mov	r1, r0
 8024c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c56:	aa02      	add	r2, sp, #8
 8024c58:	4630      	mov	r0, r6
 8024c5a:	f7ff fdf3 	bl	8024844 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8024c5e:	e7ed      	b.n	8024c3c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8024c60:	4620      	mov	r0, r4
 8024c62:	f7fd fad7 	bl	8022214 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024c66:	462b      	mov	r3, r5
 8024c68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024c6a:	a902      	add	r1, sp, #8
 8024c6c:	f7ff fdfc 	bl	8024868 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8024c70:	e7e4      	b.n	8024c3c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8024c72:	6833      	ldr	r3, [r6, #0]
 8024c74:	4620      	mov	r0, r4
 8024c76:	68df      	ldr	r7, [r3, #12]
 8024c78:	f7fd facc 	bl	8022214 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024c7c:	2300      	movs	r3, #0
 8024c7e:	4601      	mov	r1, r0
 8024c80:	aa02      	add	r2, sp, #8
 8024c82:	4630      	mov	r0, r6
 8024c84:	e9cd 5300 	strd	r5, r3, [sp]
 8024c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c8a:	47b8      	blx	r7
 8024c8c:	e7d6      	b.n	8024c3c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08024c8e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8024c8e:	b4f0      	push	{r4, r5, r6, r7}
 8024c90:	4616      	mov	r6, r2
 8024c92:	461c      	mov	r4, r3
 8024c94:	460d      	mov	r5, r1
 8024c96:	9a04      	ldr	r2, [sp, #16]
 8024c98:	2e01      	cmp	r6, #1
 8024c9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8024c9e:	d00e      	beq.n	8024cbe <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8024ca0:	d303      	bcc.n	8024caa <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8024ca2:	2e02      	cmp	r6, #2
 8024ca4:	d006      	beq.n	8024cb4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8024ca6:	bcf0      	pop	{r4, r5, r6, r7}
 8024ca8:	4770      	bx	lr
 8024caa:	4621      	mov	r1, r4
 8024cac:	4628      	mov	r0, r5
 8024cae:	bcf0      	pop	{r4, r5, r6, r7}
 8024cb0:	f7ff bdda 	b.w	8024868 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8024cb4:	4621      	mov	r1, r4
 8024cb6:	4628      	mov	r0, r5
 8024cb8:	bcf0      	pop	{r4, r5, r6, r7}
 8024cba:	f7ff bec9 	b.w	8024a50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8024cbe:	6805      	ldr	r5, [r0, #0]
 8024cc0:	2600      	movs	r6, #0
 8024cc2:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8024cc6:	68ed      	ldr	r5, [r5, #12]
 8024cc8:	4613      	mov	r3, r2
 8024cca:	4622      	mov	r2, r4
 8024ccc:	46ac      	mov	ip, r5
 8024cce:	bcf0      	pop	{r4, r5, r6, r7}
 8024cd0:	4760      	bx	ip
	...

08024cd4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8024cd4:	b160      	cbz	r0, 8024cf0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8024cd6:	2903      	cmp	r1, #3
 8024cd8:	d818      	bhi.n	8024d0c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8024cda:	e8df f001 	tbb	[pc, r1]
 8024cde:	1902      	.short	0x1902
 8024ce0:	1b06      	.short	0x1b06
 8024ce2:	4b0e      	ldr	r3, [pc, #56]	; (8024d1c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8024ce4:	8818      	ldrh	r0, [r3, #0]
 8024ce6:	4240      	negs	r0, r0
 8024ce8:	4770      	bx	lr
 8024cea:	4b0c      	ldr	r3, [pc, #48]	; (8024d1c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8024cec:	8818      	ldrh	r0, [r3, #0]
 8024cee:	4770      	bx	lr
 8024cf0:	2903      	cmp	r1, #3
 8024cf2:	d80b      	bhi.n	8024d0c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8024cf4:	a301      	add	r3, pc, #4	; (adr r3, 8024cfc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8024cf6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8024cfa:	bf00      	nop
 8024cfc:	08024d11 	.word	0x08024d11
 8024d00:	08024ceb 	.word	0x08024ceb
 8024d04:	08024d15 	.word	0x08024d15
 8024d08:	08024ce3 	.word	0x08024ce3
 8024d0c:	2000      	movs	r0, #0
 8024d0e:	4770      	bx	lr
 8024d10:	2001      	movs	r0, #1
 8024d12:	4770      	bx	lr
 8024d14:	f04f 30ff 	mov.w	r0, #4294967295
 8024d18:	4770      	bx	lr
 8024d1a:	bf00      	nop
 8024d1c:	24027f66 	.word	0x24027f66

08024d20 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8024d20:	b160      	cbz	r0, 8024d3c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8024d22:	2903      	cmp	r1, #3
 8024d24:	d818      	bhi.n	8024d58 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8024d26:	e8df f001 	tbb	[pc, r1]
 8024d2a:	0219      	.short	0x0219
 8024d2c:	051b      	.short	0x051b
 8024d2e:	4b0e      	ldr	r3, [pc, #56]	; (8024d68 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8024d30:	8818      	ldrh	r0, [r3, #0]
 8024d32:	4770      	bx	lr
 8024d34:	4b0c      	ldr	r3, [pc, #48]	; (8024d68 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8024d36:	8818      	ldrh	r0, [r3, #0]
 8024d38:	4240      	negs	r0, r0
 8024d3a:	4770      	bx	lr
 8024d3c:	2903      	cmp	r1, #3
 8024d3e:	d80b      	bhi.n	8024d58 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8024d40:	a301      	add	r3, pc, #4	; (adr r3, 8024d48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8024d42:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8024d46:	bf00      	nop
 8024d48:	08024d2f 	.word	0x08024d2f
 8024d4c:	08024d61 	.word	0x08024d61
 8024d50:	08024d35 	.word	0x08024d35
 8024d54:	08024d5d 	.word	0x08024d5d
 8024d58:	2000      	movs	r0, #0
 8024d5a:	4770      	bx	lr
 8024d5c:	2001      	movs	r0, #1
 8024d5e:	4770      	bx	lr
 8024d60:	f04f 30ff 	mov.w	r0, #4294967295
 8024d64:	4770      	bx	lr
 8024d66:	bf00      	nop
 8024d68:	24027f66 	.word	0x24027f66

08024d6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8024d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d70:	b097      	sub	sp, #92	; 0x5c
 8024d72:	910b      	str	r1, [sp, #44]	; 0x2c
 8024d74:	a912      	add	r1, sp, #72	; 0x48
 8024d76:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8024d7a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8024d7e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8024d82:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8024d86:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8024d8a:	e881 000c 	stmia.w	r1, {r2, r3}
 8024d8e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8024d92:	930a      	str	r3, [sp, #40]	; 0x28
 8024d94:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8024d98:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8024d9c:	9311      	str	r3, [sp, #68]	; 0x44
 8024d9e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8024da2:	798d      	ldrb	r5, [r1, #6]
 8024da4:	930c      	str	r3, [sp, #48]	; 0x30
 8024da6:	7b4b      	ldrb	r3, [r1, #13]
 8024da8:	0158      	lsls	r0, r3, #5
 8024daa:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8024dae:	4328      	orrs	r0, r5
 8024db0:	9009      	str	r0, [sp, #36]	; 0x24
 8024db2:	f000 817c 	beq.w	80250ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8024db6:	011b      	lsls	r3, r3, #4
 8024db8:	79c8      	ldrb	r0, [r1, #7]
 8024dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024dbe:	4303      	orrs	r3, r0
 8024dc0:	930e      	str	r3, [sp, #56]	; 0x38
 8024dc2:	f000 8174 	beq.w	80250ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8024dc6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8024dca:	b29b      	uxth	r3, r3
 8024dcc:	2f00      	cmp	r7, #0
 8024dce:	f000 8116 	beq.w	8024ffe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8024dd2:	1aff      	subs	r7, r7, r3
 8024dd4:	b2bf      	uxth	r7, r7
 8024dd6:	043b      	lsls	r3, r7, #16
 8024dd8:	d502      	bpl.n	8024de0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8024dda:	1bf6      	subs	r6, r6, r7
 8024ddc:	2700      	movs	r7, #0
 8024dde:	b236      	sxth	r6, r6
 8024de0:	f9b2 1000 	ldrsh.w	r1, [r2]
 8024de4:	a812      	add	r0, sp, #72	; 0x48
 8024de6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8024dea:	428e      	cmp	r6, r1
 8024dec:	b28b      	uxth	r3, r1
 8024dee:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8024df2:	bfbf      	itttt	lt
 8024df4:	18ff      	addlt	r7, r7, r3
 8024df6:	1bbe      	sublt	r6, r7, r6
 8024df8:	b2b7      	uxthlt	r7, r6
 8024dfa:	460e      	movlt	r6, r1
 8024dfc:	8891      	ldrh	r1, [r2, #4]
 8024dfe:	440b      	add	r3, r1
 8024e00:	4631      	mov	r1, r6
 8024e02:	b21b      	sxth	r3, r3
 8024e04:	9310      	str	r3, [sp, #64]	; 0x40
 8024e06:	88d3      	ldrh	r3, [r2, #6]
 8024e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024e0a:	449a      	add	sl, r3
 8024e0c:	fa0f f38a 	sxth.w	r3, sl
 8024e10:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8024e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8024e16:	4bb5      	ldr	r3, [pc, #724]	; (80250ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8024e18:	f893 b000 	ldrb.w	fp, [r3]
 8024e1c:	f10b 3cff 	add.w	ip, fp, #4294967295
 8024e20:	f1dc 0300 	rsbs	r3, ip, #0
 8024e24:	eb43 030c 	adc.w	r3, r3, ip
 8024e28:	930d      	str	r3, [sp, #52]	; 0x34
 8024e2a:	464b      	mov	r3, r9
 8024e2c:	f7f9 fe86 	bl	801eb3c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8024e30:	4631      	mov	r1, r6
 8024e32:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8024e36:	464b      	mov	r3, r9
 8024e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024e3a:	a812      	add	r0, sp, #72	; 0x48
 8024e3c:	f7f9 fe9b 	bl	801eb76 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8024e40:	a916      	add	r1, sp, #88	; 0x58
 8024e42:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8024e46:	a815      	add	r0, sp, #84	; 0x54
 8024e48:	f7f9 ffbc 	bl	801edc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8024e4c:	f1b9 0f00 	cmp.w	r9, #0
 8024e50:	f040 80d8 	bne.w	8025004 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8024e54:	f1bb 0f01 	cmp.w	fp, #1
 8024e58:	f040 80dc 	bne.w	8025014 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8024e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024e5e:	b153      	cbz	r3, 8024e76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8024e60:	2508      	movs	r5, #8
 8024e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024e64:	fb95 f3f8 	sdiv	r3, r5, r8
 8024e68:	1e5d      	subs	r5, r3, #1
 8024e6a:	4415      	add	r5, r2
 8024e6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8024e70:	fb15 f503 	smulbb	r5, r5, r3
 8024e74:	b2ad      	uxth	r5, r5
 8024e76:	b907      	cbnz	r7, 8024e7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8024e78:	b16c      	cbz	r4, 8024e96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8024e7a:	fb04 7305 	mla	r3, r4, r5, r7
 8024e7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024e80:	ebaa 0a04 	sub.w	sl, sl, r4
 8024e84:	fb08 f303 	mul.w	r3, r8, r3
 8024e88:	fa1f fa8a 	uxth.w	sl, sl
 8024e8c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8024e90:	f003 0407 	and.w	r4, r3, #7
 8024e94:	9226      	str	r2, [sp, #152]	; 0x98
 8024e96:	4649      	mov	r1, r9
 8024e98:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024e9a:	f7ff ff1b 	bl	8024cd4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8024e9e:	4683      	mov	fp, r0
 8024ea0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024ea2:	f7ff ff3d 	bl	8024d20 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8024ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024eaa:	4681      	mov	r9, r0
 8024eac:	1a9b      	subs	r3, r3, r2
 8024eae:	459a      	cmp	sl, r3
 8024eb0:	bfa8      	it	ge
 8024eb2:	469a      	movge	sl, r3
 8024eb4:	f1ba 0f00 	cmp.w	sl, #0
 8024eb8:	f340 80f9 	ble.w	80250ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8024ebc:	1bf6      	subs	r6, r6, r7
 8024ebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024ec0:	1b9e      	subs	r6, r3, r6
 8024ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ec4:	429e      	cmp	r6, r3
 8024ec6:	bfd4      	ite	le
 8024ec8:	ebc7 0706 	rsble	r7, r7, r6
 8024ecc:	ebc7 0703 	rsbgt	r7, r7, r3
 8024ed0:	2f00      	cmp	r7, #0
 8024ed2:	f340 80ec 	ble.w	80250ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8024ed6:	1bed      	subs	r5, r5, r7
 8024ed8:	fb08 f305 	mul.w	r3, r8, r5
 8024edc:	930d      	str	r3, [sp, #52]	; 0x34
 8024ede:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ee0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8024ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8024ee6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ee8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8024eee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ef0:	b2db      	uxtb	r3, r3
 8024ef2:	9310      	str	r3, [sp, #64]	; 0x40
 8024ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ef6:	2b00      	cmp	r3, #0
 8024ef8:	f040 80de 	bne.w	80250b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8024efc:	4b7c      	ldr	r3, [pc, #496]	; (80250f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8024efe:	6818      	ldr	r0, [r3, #0]
 8024f00:	6803      	ldr	r3, [r0, #0]
 8024f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024f04:	4798      	blx	r3
 8024f06:	2301      	movs	r3, #1
 8024f08:	4a7a      	ldr	r2, [pc, #488]	; (80250f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8024f0a:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8024f0e:	fb07 9b1b 	mls	fp, r7, fp, r9
 8024f12:	fa03 f308 	lsl.w	r3, r3, r8
 8024f16:	8811      	ldrh	r1, [r2, #0]
 8024f18:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8024f1c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8024f20:	3b01      	subs	r3, #1
 8024f22:	fb06 bb07 	mla	fp, r6, r7, fp
 8024f26:	b2db      	uxtb	r3, r3
 8024f28:	930a      	str	r3, [sp, #40]	; 0x28
 8024f2a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8024f2e:	fb01 2303 	mla	r3, r1, r3, r2
 8024f32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024f36:	18c3      	adds	r3, r0, r3
 8024f38:	9309      	str	r3, [sp, #36]	; 0x24
 8024f3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024f3c:	781a      	ldrb	r2, [r3, #0]
 8024f3e:	4122      	asrs	r2, r4
 8024f40:	b2d2      	uxtb	r2, r2
 8024f42:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8024f46:	f0c0 80d7 	bcc.w	80250f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8024f4a:	46be      	mov	lr, r7
 8024f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024f4e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8024f52:	f0c0 80ba 	bcc.w	80250ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8024f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f58:	4013      	ands	r3, r2
 8024f5a:	d041      	beq.n	8024fe0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8024f5c:	20ff      	movs	r0, #255	; 0xff
 8024f5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024f60:	fb90 f5f5 	sdiv	r5, r0, r5
 8024f64:	436b      	muls	r3, r5
 8024f66:	2bfe      	cmp	r3, #254	; 0xfe
 8024f68:	dd03      	ble.n	8024f72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8024f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024f6c:	4285      	cmp	r5, r0
 8024f6e:	f000 80a5 	beq.w	80250bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8024f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024f74:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024f76:	fb15 f303 	smulbb	r3, r5, r3
 8024f7a:	b29b      	uxth	r3, r3
 8024f7c:	1c5d      	adds	r5, r3, #1
 8024f7e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8024f82:	780d      	ldrb	r5, [r1, #0]
 8024f84:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024f88:	fa1f fc83 	uxth.w	ip, r3
 8024f8c:	43db      	mvns	r3, r3
 8024f8e:	fb10 f90c 	smulbb	r9, r0, ip
 8024f92:	b2db      	uxtb	r3, r3
 8024f94:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024f96:	fb05 9503 	mla	r5, r5, r3, r9
 8024f9a:	b2ad      	uxth	r5, r5
 8024f9c:	f105 0901 	add.w	r9, r5, #1
 8024fa0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8024fa4:	fb10 f90c 	smulbb	r9, r0, ip
 8024fa8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024faa:	122d      	asrs	r5, r5, #8
 8024fac:	fb10 fc0c 	smulbb	ip, r0, ip
 8024fb0:	700d      	strb	r5, [r1, #0]
 8024fb2:	784d      	ldrb	r5, [r1, #1]
 8024fb4:	fb05 9503 	mla	r5, r5, r3, r9
 8024fb8:	b2ad      	uxth	r5, r5
 8024fba:	f105 0901 	add.w	r9, r5, #1
 8024fbe:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8024fc2:	122d      	asrs	r5, r5, #8
 8024fc4:	704d      	strb	r5, [r1, #1]
 8024fc6:	788d      	ldrb	r5, [r1, #2]
 8024fc8:	fb05 cc03 	mla	ip, r5, r3, ip
 8024fcc:	fa1f fc8c 	uxth.w	ip, ip
 8024fd0:	f10c 0301 	add.w	r3, ip, #1
 8024fd4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024fd8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024fdc:	f881 c002 	strb.w	ip, [r1, #2]
 8024fe0:	4444      	add	r4, r8
 8024fe2:	4431      	add	r1, r6
 8024fe4:	b2a4      	uxth	r4, r4
 8024fe6:	2c07      	cmp	r4, #7
 8024fe8:	bf89      	itett	hi
 8024fea:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8024fec:	fa42 f208 	asrls.w	r2, r2, r8
 8024ff0:	2400      	movhi	r4, #0
 8024ff2:	785a      	ldrbhi	r2, [r3, #1]
 8024ff4:	bf8a      	itet	hi
 8024ff6:	3301      	addhi	r3, #1
 8024ff8:	b2d2      	uxtbls	r2, r2
 8024ffa:	9326      	strhi	r3, [sp, #152]	; 0x98
 8024ffc:	e7a7      	b.n	8024f4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8024ffe:	441e      	add	r6, r3
 8025000:	b236      	sxth	r6, r6
 8025002:	e6ed      	b.n	8024de0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8025004:	f1b9 0f01 	cmp.w	r9, #1
 8025008:	f47f af28 	bne.w	8024e5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802500c:	f1bb 0f01 	cmp.w	fp, #1
 8025010:	f47f af24 	bne.w	8024e5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025014:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80250f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8025018:	f8db 0000 	ldr.w	r0, [fp]
 802501c:	6803      	ldr	r3, [r0, #0]
 802501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025020:	4798      	blx	r3
 8025022:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8025026:	465a      	mov	r2, fp
 8025028:	d006      	beq.n	8025038 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 802502a:	f1b8 0f04 	cmp.w	r8, #4
 802502e:	d141      	bne.n	80250b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8025030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025032:	3300      	adds	r3, #0
 8025034:	bf18      	it	ne
 8025036:	2301      	movne	r3, #1
 8025038:	0580      	lsls	r0, r0, #22
 802503a:	d566      	bpl.n	802510a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 802503c:	f1b8 0f08 	cmp.w	r8, #8
 8025040:	d163      	bne.n	802510a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8025042:	2b00      	cmp	r3, #0
 8025044:	bf0c      	ite	eq
 8025046:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802504a:	f44f 7180 	movne.w	r1, #256	; 0x100
 802504e:	2f00      	cmp	r7, #0
 8025050:	f47f af04 	bne.w	8024e5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025054:	2c00      	cmp	r4, #0
 8025056:	f47f af01 	bne.w	8024e5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802505a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802505c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802505e:	18f3      	adds	r3, r6, r3
 8025060:	4283      	cmp	r3, r0
 8025062:	f73f aefb 	bgt.w	8024e5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025066:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802506a:	4403      	add	r3, r0
 802506c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802506e:	4283      	cmp	r3, r0
 8025070:	f73f aef4 	bgt.w	8024e5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025074:	f1b8 0f08 	cmp.w	r8, #8
 8025078:	6810      	ldr	r0, [r2, #0]
 802507a:	f04f 0600 	mov.w	r6, #0
 802507e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8025082:	bf18      	it	ne
 8025084:	3501      	addne	r5, #1
 8025086:	6804      	ldr	r4, [r0, #0]
 8025088:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 802508c:	bf18      	it	ne
 802508e:	f025 0501 	bicne.w	r5, r5, #1
 8025092:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8025096:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025098:	bf18      	it	ne
 802509a:	b2ad      	uxthne	r5, r5
 802509c:	9104      	str	r1, [sp, #16]
 802509e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80250a0:	e9cd 5a00 	strd	r5, sl, [sp]
 80250a4:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80250a8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80250aa:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80250ac:	47a0      	blx	r4
 80250ae:	b017      	add	sp, #92	; 0x5c
 80250b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250b4:	2300      	movs	r3, #0
 80250b6:	e7bf      	b.n	8025038 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80250b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80250ba:	e724      	b.n	8024f06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 80250bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80250be:	700b      	strb	r3, [r1, #0]
 80250c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80250c2:	704b      	strb	r3, [r1, #1]
 80250c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80250c6:	708b      	strb	r3, [r1, #2]
 80250c8:	e78a      	b.n	8024fe0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80250ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80250cc:	b153      	cbz	r3, 80250e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80250ce:	441c      	add	r4, r3
 80250d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80250d2:	b2a4      	uxth	r4, r4
 80250d4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80250d8:	f004 0407 	and.w	r4, r4, #7
 80250dc:	781a      	ldrb	r2, [r3, #0]
 80250de:	9326      	str	r3, [sp, #152]	; 0x98
 80250e0:	4122      	asrs	r2, r4
 80250e2:	b2d2      	uxtb	r2, r2
 80250e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250e6:	445b      	add	r3, fp
 80250e8:	9309      	str	r3, [sp, #36]	; 0x24
 80250ea:	e72a      	b.n	8024f42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80250ec:	24027f64 	.word	0x24027f64
 80250f0:	24027f6c 	.word	0x24027f6c
 80250f4:	24027f66 	.word	0x24027f66
 80250f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250fa:	2b00      	cmp	r3, #0
 80250fc:	d1d7      	bne.n	80250ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80250fe:	4b06      	ldr	r3, [pc, #24]	; (8025118 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8025100:	6818      	ldr	r0, [r3, #0]
 8025102:	6803      	ldr	r3, [r0, #0]
 8025104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025106:	4798      	blx	r3
 8025108:	e7d1      	b.n	80250ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802510a:	2b00      	cmp	r3, #0
 802510c:	f43f aea6 	beq.w	8024e5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8025114:	e79b      	b.n	802504e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8025116:	bf00      	nop
 8025118:	24027f6c 	.word	0x24027f6c

0802511c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802511c:	b538      	push	{r3, r4, r5, lr}
 802511e:	4c15      	ldr	r4, [pc, #84]	; (8025174 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8025120:	4605      	mov	r5, r0
 8025122:	7823      	ldrb	r3, [r4, #0]
 8025124:	f3bf 8f5b 	dmb	ish
 8025128:	07da      	lsls	r2, r3, #31
 802512a:	d40b      	bmi.n	8025144 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802512c:	4620      	mov	r0, r4
 802512e:	f005 fbb2 	bl	802a896 <__cxa_guard_acquire>
 8025132:	b138      	cbz	r0, 8025144 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8025134:	4620      	mov	r0, r4
 8025136:	f005 fbba 	bl	802a8ae <__cxa_guard_release>
 802513a:	4a0f      	ldr	r2, [pc, #60]	; (8025178 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802513c:	490f      	ldr	r1, [pc, #60]	; (802517c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802513e:	4810      	ldr	r0, [pc, #64]	; (8025180 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8025140:	f005 fba2 	bl	802a888 <__aeabi_atexit>
 8025144:	4c0f      	ldr	r4, [pc, #60]	; (8025184 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8025146:	7823      	ldrb	r3, [r4, #0]
 8025148:	f3bf 8f5b 	dmb	ish
 802514c:	07db      	lsls	r3, r3, #31
 802514e:	d40b      	bmi.n	8025168 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8025150:	4620      	mov	r0, r4
 8025152:	f005 fba0 	bl	802a896 <__cxa_guard_acquire>
 8025156:	b138      	cbz	r0, 8025168 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8025158:	4620      	mov	r0, r4
 802515a:	f005 fba8 	bl	802a8ae <__cxa_guard_release>
 802515e:	4a06      	ldr	r2, [pc, #24]	; (8025178 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8025160:	4909      	ldr	r1, [pc, #36]	; (8025188 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8025162:	480a      	ldr	r0, [pc, #40]	; (802518c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8025164:	f005 fb90 	bl	802a888 <__aeabi_atexit>
 8025168:	4b05      	ldr	r3, [pc, #20]	; (8025180 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802516a:	612b      	str	r3, [r5, #16]
 802516c:	4b07      	ldr	r3, [pc, #28]	; (802518c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802516e:	616b      	str	r3, [r5, #20]
 8025170:	bd38      	pop	{r3, r4, r5, pc}
 8025172:	bf00      	nop
 8025174:	24028040 	.word	0x24028040
 8025178:	24000000 	.word	0x24000000
 802517c:	08023cf3 	.word	0x08023cf3
 8025180:	240000ac 	.word	0x240000ac
 8025184:	24028044 	.word	0x24028044
 8025188:	08023cf1 	.word	0x08023cf1
 802518c:	240000b0 	.word	0x240000b0

08025190 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8025190:	b538      	push	{r3, r4, r5, lr}
 8025192:	4c15      	ldr	r4, [pc, #84]	; (80251e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8025194:	4605      	mov	r5, r0
 8025196:	7823      	ldrb	r3, [r4, #0]
 8025198:	f3bf 8f5b 	dmb	ish
 802519c:	07da      	lsls	r2, r3, #31
 802519e:	d40b      	bmi.n	80251b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80251a0:	4620      	mov	r0, r4
 80251a2:	f005 fb78 	bl	802a896 <__cxa_guard_acquire>
 80251a6:	b138      	cbz	r0, 80251b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80251a8:	4620      	mov	r0, r4
 80251aa:	f005 fb80 	bl	802a8ae <__cxa_guard_release>
 80251ae:	4a0f      	ldr	r2, [pc, #60]	; (80251ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80251b0:	490f      	ldr	r1, [pc, #60]	; (80251f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80251b2:	4810      	ldr	r0, [pc, #64]	; (80251f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80251b4:	f005 fb68 	bl	802a888 <__aeabi_atexit>
 80251b8:	4c0f      	ldr	r4, [pc, #60]	; (80251f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80251ba:	7823      	ldrb	r3, [r4, #0]
 80251bc:	f3bf 8f5b 	dmb	ish
 80251c0:	07db      	lsls	r3, r3, #31
 80251c2:	d40b      	bmi.n	80251dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80251c4:	4620      	mov	r0, r4
 80251c6:	f005 fb66 	bl	802a896 <__cxa_guard_acquire>
 80251ca:	b138      	cbz	r0, 80251dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80251cc:	4620      	mov	r0, r4
 80251ce:	f005 fb6e 	bl	802a8ae <__cxa_guard_release>
 80251d2:	4a06      	ldr	r2, [pc, #24]	; (80251ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80251d4:	4909      	ldr	r1, [pc, #36]	; (80251fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80251d6:	480a      	ldr	r0, [pc, #40]	; (8025200 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80251d8:	f005 fb56 	bl	802a888 <__aeabi_atexit>
 80251dc:	4b05      	ldr	r3, [pc, #20]	; (80251f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80251de:	60ab      	str	r3, [r5, #8]
 80251e0:	4b07      	ldr	r3, [pc, #28]	; (8025200 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80251e2:	60eb      	str	r3, [r5, #12]
 80251e4:	bd38      	pop	{r3, r4, r5, pc}
 80251e6:	bf00      	nop
 80251e8:	24028020 	.word	0x24028020
 80251ec:	24000000 	.word	0x24000000
 80251f0:	08023cf7 	.word	0x08023cf7
 80251f4:	2400008c 	.word	0x2400008c
 80251f8:	24028024 	.word	0x24028024
 80251fc:	08023cf5 	.word	0x08023cf5
 8025200:	24000090 	.word	0x24000090

08025204 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8025204:	b510      	push	{r4, lr}
 8025206:	4604      	mov	r4, r0
 8025208:	f7ff ff88 	bl	802511c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802520c:	4620      	mov	r0, r4
 802520e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025212:	f7ff bfbd 	b.w	8025190 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08025218 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8025218:	b538      	push	{r3, r4, r5, lr}
 802521a:	4c15      	ldr	r4, [pc, #84]	; (8025270 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802521c:	4605      	mov	r5, r0
 802521e:	7823      	ldrb	r3, [r4, #0]
 8025220:	f3bf 8f5b 	dmb	ish
 8025224:	07da      	lsls	r2, r3, #31
 8025226:	d40b      	bmi.n	8025240 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8025228:	4620      	mov	r0, r4
 802522a:	f005 fb34 	bl	802a896 <__cxa_guard_acquire>
 802522e:	b138      	cbz	r0, 8025240 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8025230:	4620      	mov	r0, r4
 8025232:	f005 fb3c 	bl	802a8ae <__cxa_guard_release>
 8025236:	4a0f      	ldr	r2, [pc, #60]	; (8025274 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8025238:	490f      	ldr	r1, [pc, #60]	; (8025278 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802523a:	4810      	ldr	r0, [pc, #64]	; (802527c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802523c:	f005 fb24 	bl	802a888 <__aeabi_atexit>
 8025240:	4c0f      	ldr	r4, [pc, #60]	; (8025280 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8025242:	7823      	ldrb	r3, [r4, #0]
 8025244:	f3bf 8f5b 	dmb	ish
 8025248:	07db      	lsls	r3, r3, #31
 802524a:	d40b      	bmi.n	8025264 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802524c:	4620      	mov	r0, r4
 802524e:	f005 fb22 	bl	802a896 <__cxa_guard_acquire>
 8025252:	b138      	cbz	r0, 8025264 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8025254:	4620      	mov	r0, r4
 8025256:	f005 fb2a 	bl	802a8ae <__cxa_guard_release>
 802525a:	4a06      	ldr	r2, [pc, #24]	; (8025274 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802525c:	4909      	ldr	r1, [pc, #36]	; (8025284 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802525e:	480a      	ldr	r0, [pc, #40]	; (8025288 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8025260:	f005 fb12 	bl	802a888 <__aeabi_atexit>
 8025264:	4b05      	ldr	r3, [pc, #20]	; (802527c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8025266:	622b      	str	r3, [r5, #32]
 8025268:	4b07      	ldr	r3, [pc, #28]	; (8025288 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802526a:	626b      	str	r3, [r5, #36]	; 0x24
 802526c:	bd38      	pop	{r3, r4, r5, pc}
 802526e:	bf00      	nop
 8025270:	24028048 	.word	0x24028048
 8025274:	24000000 	.word	0x24000000
 8025278:	08023ceb 	.word	0x08023ceb
 802527c:	240000b4 	.word	0x240000b4
 8025280:	2402804c 	.word	0x2402804c
 8025284:	08023ce9 	.word	0x08023ce9
 8025288:	240000b8 	.word	0x240000b8

0802528c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802528c:	b538      	push	{r3, r4, r5, lr}
 802528e:	4c15      	ldr	r4, [pc, #84]	; (80252e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8025290:	4605      	mov	r5, r0
 8025292:	7823      	ldrb	r3, [r4, #0]
 8025294:	f3bf 8f5b 	dmb	ish
 8025298:	07da      	lsls	r2, r3, #31
 802529a:	d40b      	bmi.n	80252b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802529c:	4620      	mov	r0, r4
 802529e:	f005 fafa 	bl	802a896 <__cxa_guard_acquire>
 80252a2:	b138      	cbz	r0, 80252b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80252a4:	4620      	mov	r0, r4
 80252a6:	f005 fb02 	bl	802a8ae <__cxa_guard_release>
 80252aa:	4a0f      	ldr	r2, [pc, #60]	; (80252e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80252ac:	490f      	ldr	r1, [pc, #60]	; (80252ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80252ae:	4810      	ldr	r0, [pc, #64]	; (80252f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80252b0:	f005 faea 	bl	802a888 <__aeabi_atexit>
 80252b4:	4c0f      	ldr	r4, [pc, #60]	; (80252f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80252b6:	7823      	ldrb	r3, [r4, #0]
 80252b8:	f3bf 8f5b 	dmb	ish
 80252bc:	07db      	lsls	r3, r3, #31
 80252be:	d40b      	bmi.n	80252d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80252c0:	4620      	mov	r0, r4
 80252c2:	f005 fae8 	bl	802a896 <__cxa_guard_acquire>
 80252c6:	b138      	cbz	r0, 80252d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80252c8:	4620      	mov	r0, r4
 80252ca:	f005 faf0 	bl	802a8ae <__cxa_guard_release>
 80252ce:	4a06      	ldr	r2, [pc, #24]	; (80252e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80252d0:	4909      	ldr	r1, [pc, #36]	; (80252f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80252d2:	480a      	ldr	r0, [pc, #40]	; (80252fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80252d4:	f005 fad8 	bl	802a888 <__aeabi_atexit>
 80252d8:	4b05      	ldr	r3, [pc, #20]	; (80252f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80252da:	61ab      	str	r3, [r5, #24]
 80252dc:	4b07      	ldr	r3, [pc, #28]	; (80252fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80252de:	61eb      	str	r3, [r5, #28]
 80252e0:	bd38      	pop	{r3, r4, r5, pc}
 80252e2:	bf00      	nop
 80252e4:	24028028 	.word	0x24028028
 80252e8:	24000000 	.word	0x24000000
 80252ec:	08023cef 	.word	0x08023cef
 80252f0:	24000094 	.word	0x24000094
 80252f4:	2402802c 	.word	0x2402802c
 80252f8:	08023ced 	.word	0x08023ced
 80252fc:	24000098 	.word	0x24000098

08025300 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8025300:	b510      	push	{r4, lr}
 8025302:	4604      	mov	r4, r0
 8025304:	f7ff ff88 	bl	8025218 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8025308:	4620      	mov	r0, r4
 802530a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802530e:	f7ff bfbd 	b.w	802528c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08025314 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8025314:	b538      	push	{r3, r4, r5, lr}
 8025316:	4c15      	ldr	r4, [pc, #84]	; (802536c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8025318:	4605      	mov	r5, r0
 802531a:	7823      	ldrb	r3, [r4, #0]
 802531c:	f3bf 8f5b 	dmb	ish
 8025320:	07da      	lsls	r2, r3, #31
 8025322:	d40b      	bmi.n	802533c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8025324:	4620      	mov	r0, r4
 8025326:	f005 fab6 	bl	802a896 <__cxa_guard_acquire>
 802532a:	b138      	cbz	r0, 802533c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 802532c:	4620      	mov	r0, r4
 802532e:	f005 fabe 	bl	802a8ae <__cxa_guard_release>
 8025332:	4a0f      	ldr	r2, [pc, #60]	; (8025370 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8025334:	490f      	ldr	r1, [pc, #60]	; (8025374 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8025336:	4810      	ldr	r0, [pc, #64]	; (8025378 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8025338:	f005 faa6 	bl	802a888 <__aeabi_atexit>
 802533c:	4c0f      	ldr	r4, [pc, #60]	; (802537c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 802533e:	7823      	ldrb	r3, [r4, #0]
 8025340:	f3bf 8f5b 	dmb	ish
 8025344:	07db      	lsls	r3, r3, #31
 8025346:	d40b      	bmi.n	8025360 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8025348:	4620      	mov	r0, r4
 802534a:	f005 faa4 	bl	802a896 <__cxa_guard_acquire>
 802534e:	b138      	cbz	r0, 8025360 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8025350:	4620      	mov	r0, r4
 8025352:	f005 faac 	bl	802a8ae <__cxa_guard_release>
 8025356:	4a06      	ldr	r2, [pc, #24]	; (8025370 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8025358:	4909      	ldr	r1, [pc, #36]	; (8025380 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802535a:	480a      	ldr	r0, [pc, #40]	; (8025384 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802535c:	f005 fa94 	bl	802a888 <__aeabi_atexit>
 8025360:	4b05      	ldr	r3, [pc, #20]	; (8025378 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8025362:	632b      	str	r3, [r5, #48]	; 0x30
 8025364:	4b07      	ldr	r3, [pc, #28]	; (8025384 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8025366:	636b      	str	r3, [r5, #52]	; 0x34
 8025368:	bd38      	pop	{r3, r4, r5, pc}
 802536a:	bf00      	nop
 802536c:	24028030 	.word	0x24028030
 8025370:	24000000 	.word	0x24000000
 8025374:	08023ce3 	.word	0x08023ce3
 8025378:	2400009c 	.word	0x2400009c
 802537c:	24028034 	.word	0x24028034
 8025380:	08023ce1 	.word	0x08023ce1
 8025384:	240000a0 	.word	0x240000a0

08025388 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8025388:	b538      	push	{r3, r4, r5, lr}
 802538a:	4c15      	ldr	r4, [pc, #84]	; (80253e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 802538c:	4605      	mov	r5, r0
 802538e:	7823      	ldrb	r3, [r4, #0]
 8025390:	f3bf 8f5b 	dmb	ish
 8025394:	07da      	lsls	r2, r3, #31
 8025396:	d40b      	bmi.n	80253b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8025398:	4620      	mov	r0, r4
 802539a:	f005 fa7c 	bl	802a896 <__cxa_guard_acquire>
 802539e:	b138      	cbz	r0, 80253b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80253a0:	4620      	mov	r0, r4
 80253a2:	f005 fa84 	bl	802a8ae <__cxa_guard_release>
 80253a6:	4a0f      	ldr	r2, [pc, #60]	; (80253e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80253a8:	490f      	ldr	r1, [pc, #60]	; (80253e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 80253aa:	4810      	ldr	r0, [pc, #64]	; (80253ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80253ac:	f005 fa6c 	bl	802a888 <__aeabi_atexit>
 80253b0:	4c0f      	ldr	r4, [pc, #60]	; (80253f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80253b2:	7823      	ldrb	r3, [r4, #0]
 80253b4:	f3bf 8f5b 	dmb	ish
 80253b8:	07db      	lsls	r3, r3, #31
 80253ba:	d40b      	bmi.n	80253d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80253bc:	4620      	mov	r0, r4
 80253be:	f005 fa6a 	bl	802a896 <__cxa_guard_acquire>
 80253c2:	b138      	cbz	r0, 80253d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80253c4:	4620      	mov	r0, r4
 80253c6:	f005 fa72 	bl	802a8ae <__cxa_guard_release>
 80253ca:	4a06      	ldr	r2, [pc, #24]	; (80253e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80253cc:	4909      	ldr	r1, [pc, #36]	; (80253f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80253ce:	480a      	ldr	r0, [pc, #40]	; (80253f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80253d0:	f005 fa5a 	bl	802a888 <__aeabi_atexit>
 80253d4:	4b05      	ldr	r3, [pc, #20]	; (80253ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80253d6:	62ab      	str	r3, [r5, #40]	; 0x28
 80253d8:	4b07      	ldr	r3, [pc, #28]	; (80253f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80253da:	62eb      	str	r3, [r5, #44]	; 0x2c
 80253dc:	bd38      	pop	{r3, r4, r5, pc}
 80253de:	bf00      	nop
 80253e0:	24028008 	.word	0x24028008
 80253e4:	24000000 	.word	0x24000000
 80253e8:	08023ce7 	.word	0x08023ce7
 80253ec:	24000074 	.word	0x24000074
 80253f0:	2402800c 	.word	0x2402800c
 80253f4:	08023ce5 	.word	0x08023ce5
 80253f8:	24000078 	.word	0x24000078

080253fc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80253fc:	b510      	push	{r4, lr}
 80253fe:	4604      	mov	r4, r0
 8025400:	f7ff ff88 	bl	8025314 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8025404:	4620      	mov	r0, r4
 8025406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802540a:	f7ff bfbd 	b.w	8025388 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08025410 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8025410:	b538      	push	{r3, r4, r5, lr}
 8025412:	4c15      	ldr	r4, [pc, #84]	; (8025468 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8025414:	4605      	mov	r5, r0
 8025416:	7823      	ldrb	r3, [r4, #0]
 8025418:	f3bf 8f5b 	dmb	ish
 802541c:	07da      	lsls	r2, r3, #31
 802541e:	d40b      	bmi.n	8025438 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025420:	4620      	mov	r0, r4
 8025422:	f005 fa38 	bl	802a896 <__cxa_guard_acquire>
 8025426:	b138      	cbz	r0, 8025438 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025428:	4620      	mov	r0, r4
 802542a:	f005 fa40 	bl	802a8ae <__cxa_guard_release>
 802542e:	4a0f      	ldr	r2, [pc, #60]	; (802546c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8025430:	490f      	ldr	r1, [pc, #60]	; (8025470 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8025432:	4810      	ldr	r0, [pc, #64]	; (8025474 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8025434:	f005 fa28 	bl	802a888 <__aeabi_atexit>
 8025438:	4c0f      	ldr	r4, [pc, #60]	; (8025478 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802543a:	7823      	ldrb	r3, [r4, #0]
 802543c:	f3bf 8f5b 	dmb	ish
 8025440:	07db      	lsls	r3, r3, #31
 8025442:	d40b      	bmi.n	802545c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8025444:	4620      	mov	r0, r4
 8025446:	f005 fa26 	bl	802a896 <__cxa_guard_acquire>
 802544a:	b138      	cbz	r0, 802545c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802544c:	4620      	mov	r0, r4
 802544e:	f005 fa2e 	bl	802a8ae <__cxa_guard_release>
 8025452:	4a06      	ldr	r2, [pc, #24]	; (802546c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8025454:	4909      	ldr	r1, [pc, #36]	; (802547c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8025456:	480a      	ldr	r0, [pc, #40]	; (8025480 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8025458:	f005 fa16 	bl	802a888 <__aeabi_atexit>
 802545c:	4b05      	ldr	r3, [pc, #20]	; (8025474 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802545e:	642b      	str	r3, [r5, #64]	; 0x40
 8025460:	4b07      	ldr	r3, [pc, #28]	; (8025480 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8025462:	646b      	str	r3, [r5, #68]	; 0x44
 8025464:	bd38      	pop	{r3, r4, r5, pc}
 8025466:	bf00      	nop
 8025468:	24028038 	.word	0x24028038
 802546c:	24000000 	.word	0x24000000
 8025470:	08023cdb 	.word	0x08023cdb
 8025474:	240000a4 	.word	0x240000a4
 8025478:	2402803c 	.word	0x2402803c
 802547c:	08023cd9 	.word	0x08023cd9
 8025480:	240000a8 	.word	0x240000a8

08025484 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8025484:	b538      	push	{r3, r4, r5, lr}
 8025486:	4c15      	ldr	r4, [pc, #84]	; (80254dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8025488:	4605      	mov	r5, r0
 802548a:	7823      	ldrb	r3, [r4, #0]
 802548c:	f3bf 8f5b 	dmb	ish
 8025490:	07da      	lsls	r2, r3, #31
 8025492:	d40b      	bmi.n	80254ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025494:	4620      	mov	r0, r4
 8025496:	f005 f9fe 	bl	802a896 <__cxa_guard_acquire>
 802549a:	b138      	cbz	r0, 80254ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802549c:	4620      	mov	r0, r4
 802549e:	f005 fa06 	bl	802a8ae <__cxa_guard_release>
 80254a2:	4a0f      	ldr	r2, [pc, #60]	; (80254e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80254a4:	490f      	ldr	r1, [pc, #60]	; (80254e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80254a6:	4810      	ldr	r0, [pc, #64]	; (80254e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80254a8:	f005 f9ee 	bl	802a888 <__aeabi_atexit>
 80254ac:	4c0f      	ldr	r4, [pc, #60]	; (80254ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80254ae:	7823      	ldrb	r3, [r4, #0]
 80254b0:	f3bf 8f5b 	dmb	ish
 80254b4:	07db      	lsls	r3, r3, #31
 80254b6:	d40b      	bmi.n	80254d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80254b8:	4620      	mov	r0, r4
 80254ba:	f005 f9ec 	bl	802a896 <__cxa_guard_acquire>
 80254be:	b138      	cbz	r0, 80254d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80254c0:	4620      	mov	r0, r4
 80254c2:	f005 f9f4 	bl	802a8ae <__cxa_guard_release>
 80254c6:	4a06      	ldr	r2, [pc, #24]	; (80254e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80254c8:	4909      	ldr	r1, [pc, #36]	; (80254f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80254ca:	480a      	ldr	r0, [pc, #40]	; (80254f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80254cc:	f005 f9dc 	bl	802a888 <__aeabi_atexit>
 80254d0:	4b05      	ldr	r3, [pc, #20]	; (80254e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80254d2:	63ab      	str	r3, [r5, #56]	; 0x38
 80254d4:	4b07      	ldr	r3, [pc, #28]	; (80254f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80254d6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80254d8:	bd38      	pop	{r3, r4, r5, pc}
 80254da:	bf00      	nop
 80254dc:	24028018 	.word	0x24028018
 80254e0:	24000000 	.word	0x24000000
 80254e4:	08023cdf 	.word	0x08023cdf
 80254e8:	24000084 	.word	0x24000084
 80254ec:	2402801c 	.word	0x2402801c
 80254f0:	08023cdd 	.word	0x08023cdd
 80254f4:	24000088 	.word	0x24000088

080254f8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80254f8:	b510      	push	{r4, lr}
 80254fa:	4604      	mov	r4, r0
 80254fc:	f7ff ff88 	bl	8025410 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8025500:	4620      	mov	r0, r4
 8025502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025506:	f7ff bfbd 	b.w	8025484 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802550c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802550c:	b538      	push	{r3, r4, r5, lr}
 802550e:	4c15      	ldr	r4, [pc, #84]	; (8025564 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8025510:	4605      	mov	r5, r0
 8025512:	7823      	ldrb	r3, [r4, #0]
 8025514:	f3bf 8f5b 	dmb	ish
 8025518:	07da      	lsls	r2, r3, #31
 802551a:	d40b      	bmi.n	8025534 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802551c:	4620      	mov	r0, r4
 802551e:	f005 f9ba 	bl	802a896 <__cxa_guard_acquire>
 8025522:	b138      	cbz	r0, 8025534 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8025524:	4620      	mov	r0, r4
 8025526:	f005 f9c2 	bl	802a8ae <__cxa_guard_release>
 802552a:	4a0f      	ldr	r2, [pc, #60]	; (8025568 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802552c:	490f      	ldr	r1, [pc, #60]	; (802556c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802552e:	4810      	ldr	r0, [pc, #64]	; (8025570 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8025530:	f005 f9aa 	bl	802a888 <__aeabi_atexit>
 8025534:	4c0f      	ldr	r4, [pc, #60]	; (8025574 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8025536:	7823      	ldrb	r3, [r4, #0]
 8025538:	f3bf 8f5b 	dmb	ish
 802553c:	07db      	lsls	r3, r3, #31
 802553e:	d40b      	bmi.n	8025558 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8025540:	4620      	mov	r0, r4
 8025542:	f005 f9a8 	bl	802a896 <__cxa_guard_acquire>
 8025546:	b138      	cbz	r0, 8025558 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8025548:	4620      	mov	r0, r4
 802554a:	f005 f9b0 	bl	802a8ae <__cxa_guard_release>
 802554e:	4a06      	ldr	r2, [pc, #24]	; (8025568 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8025550:	4909      	ldr	r1, [pc, #36]	; (8025578 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8025552:	480a      	ldr	r0, [pc, #40]	; (802557c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8025554:	f005 f998 	bl	802a888 <__aeabi_atexit>
 8025558:	4b05      	ldr	r3, [pc, #20]	; (8025570 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802555a:	652b      	str	r3, [r5, #80]	; 0x50
 802555c:	4b07      	ldr	r3, [pc, #28]	; (802557c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802555e:	656b      	str	r3, [r5, #84]	; 0x54
 8025560:	bd38      	pop	{r3, r4, r5, pc}
 8025562:	bf00      	nop
 8025564:	24028010 	.word	0x24028010
 8025568:	24000000 	.word	0x24000000
 802556c:	08023cd3 	.word	0x08023cd3
 8025570:	2400007c 	.word	0x2400007c
 8025574:	24028014 	.word	0x24028014
 8025578:	08023cd1 	.word	0x08023cd1
 802557c:	24000080 	.word	0x24000080

08025580 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8025580:	b538      	push	{r3, r4, r5, lr}
 8025582:	4c15      	ldr	r4, [pc, #84]	; (80255d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8025584:	4605      	mov	r5, r0
 8025586:	7823      	ldrb	r3, [r4, #0]
 8025588:	f3bf 8f5b 	dmb	ish
 802558c:	07da      	lsls	r2, r3, #31
 802558e:	d40b      	bmi.n	80255a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025590:	4620      	mov	r0, r4
 8025592:	f005 f980 	bl	802a896 <__cxa_guard_acquire>
 8025596:	b138      	cbz	r0, 80255a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025598:	4620      	mov	r0, r4
 802559a:	f005 f988 	bl	802a8ae <__cxa_guard_release>
 802559e:	4a0f      	ldr	r2, [pc, #60]	; (80255dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80255a0:	490f      	ldr	r1, [pc, #60]	; (80255e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80255a2:	4810      	ldr	r0, [pc, #64]	; (80255e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80255a4:	f005 f970 	bl	802a888 <__aeabi_atexit>
 80255a8:	4c0f      	ldr	r4, [pc, #60]	; (80255e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80255aa:	7823      	ldrb	r3, [r4, #0]
 80255ac:	f3bf 8f5b 	dmb	ish
 80255b0:	07db      	lsls	r3, r3, #31
 80255b2:	d40b      	bmi.n	80255cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80255b4:	4620      	mov	r0, r4
 80255b6:	f005 f96e 	bl	802a896 <__cxa_guard_acquire>
 80255ba:	b138      	cbz	r0, 80255cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80255bc:	4620      	mov	r0, r4
 80255be:	f005 f976 	bl	802a8ae <__cxa_guard_release>
 80255c2:	4a06      	ldr	r2, [pc, #24]	; (80255dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80255c4:	4909      	ldr	r1, [pc, #36]	; (80255ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80255c6:	480a      	ldr	r0, [pc, #40]	; (80255f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80255c8:	f005 f95e 	bl	802a888 <__aeabi_atexit>
 80255cc:	4b05      	ldr	r3, [pc, #20]	; (80255e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80255ce:	64ab      	str	r3, [r5, #72]	; 0x48
 80255d0:	4b07      	ldr	r3, [pc, #28]	; (80255f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80255d2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80255d4:	bd38      	pop	{r3, r4, r5, pc}
 80255d6:	bf00      	nop
 80255d8:	24028000 	.word	0x24028000
 80255dc:	24000000 	.word	0x24000000
 80255e0:	08023cd7 	.word	0x08023cd7
 80255e4:	2400006c 	.word	0x2400006c
 80255e8:	24028004 	.word	0x24028004
 80255ec:	08023cd5 	.word	0x08023cd5
 80255f0:	24000070 	.word	0x24000070

080255f4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80255f4:	b510      	push	{r4, lr}
 80255f6:	4604      	mov	r4, r0
 80255f8:	f7ff ff88 	bl	802550c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80255fc:	4620      	mov	r0, r4
 80255fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025602:	f7ff bfbd 	b.w	8025580 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08025606 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8025606:	b510      	push	{r4, lr}
 8025608:	4604      	mov	r4, r0
 802560a:	f7ff fff3 	bl	80255f4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 802560e:	4620      	mov	r0, r4
 8025610:	f7ff ff72 	bl	80254f8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8025614:	4620      	mov	r0, r4
 8025616:	f7ff fe73 	bl	8025300 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 802561a:	4620      	mov	r0, r4
 802561c:	f7ff fdf2 	bl	8025204 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8025620:	4620      	mov	r0, r4
 8025622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025626:	f7ff bee9 	b.w	80253fc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0802562a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 802562a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802562e:	b087      	sub	sp, #28
 8025630:	788d      	ldrb	r5, [r1, #2]
 8025632:	f891 9000 	ldrb.w	r9, [r1]
 8025636:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 802563a:	9501      	str	r5, [sp, #4]
 802563c:	784d      	ldrb	r5, [r1, #1]
 802563e:	9203      	str	r2, [sp, #12]
 8025640:	9502      	str	r5, [sp, #8]
 8025642:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8025646:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 802564a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 802564e:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8025652:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8025656:	fb06 0708 	mla	r7, r6, r8, r0
 802565a:	2e00      	cmp	r6, #0
 802565c:	eb02 0a07 	add.w	sl, r2, r7
 8025660:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8025664:	9d01      	ldr	r5, [sp, #4]
 8025666:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 802566a:	ea45 0509 	orr.w	r5, r5, r9
 802566e:	9505      	str	r5, [sp, #20]
 8025670:	f2c0 80b2 	blt.w	80257d8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8025674:	45b3      	cmp	fp, r6
 8025676:	f340 80af 	ble.w	80257d8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 802567a:	2800      	cmp	r0, #0
 802567c:	f2c0 80aa 	blt.w	80257d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8025680:	4580      	cmp	r8, r0
 8025682:	f340 80a7 	ble.w	80257d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8025686:	9a03      	ldr	r2, [sp, #12]
 8025688:	5dd7      	ldrb	r7, [r2, r7]
 802568a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802568e:	441f      	add	r7, r3
 8025690:	1c42      	adds	r2, r0, #1
 8025692:	f100 80a4 	bmi.w	80257de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8025696:	4590      	cmp	r8, r2
 8025698:	f340 80a1 	ble.w	80257de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 802569c:	2c00      	cmp	r4, #0
 802569e:	f000 809e 	beq.w	80257de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80256a2:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80256a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80256aa:	441d      	add	r5, r3
 80256ac:	3601      	adds	r6, #1
 80256ae:	f100 809a 	bmi.w	80257e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80256b2:	45b3      	cmp	fp, r6
 80256b4:	f340 8097 	ble.w	80257e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80256b8:	f1bc 0f00 	cmp.w	ip, #0
 80256bc:	f000 8093 	beq.w	80257e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80256c0:	2800      	cmp	r0, #0
 80256c2:	f2c0 808e 	blt.w	80257e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80256c6:	4580      	cmp	r8, r0
 80256c8:	f340 808b 	ble.w	80257e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80256cc:	f81a 6008 	ldrb.w	r6, [sl, r8]
 80256d0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80256d4:	441e      	add	r6, r3
 80256d6:	3001      	adds	r0, #1
 80256d8:	f100 8088 	bmi.w	80257ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80256dc:	4580      	cmp	r8, r0
 80256de:	f340 8085 	ble.w	80257ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80256e2:	2c00      	cmp	r4, #0
 80256e4:	f000 8082 	beq.w	80257ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80256e8:	44d0      	add	r8, sl
 80256ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 80256ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80256f2:	4413      	add	r3, r2
 80256f4:	b2a4      	uxth	r4, r4
 80256f6:	f895 a000 	ldrb.w	sl, [r5]
 80256fa:	fa1f fc8c 	uxth.w	ip, ip
 80256fe:	fb04 fb0c 	mul.w	fp, r4, ip
 8025702:	0124      	lsls	r4, r4, #4
 8025704:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8025708:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 802570c:	eba4 040b 	sub.w	r4, r4, fp
 8025710:	fa1f f08c 	uxth.w	r0, ip
 8025714:	b2a2      	uxth	r2, r4
 8025716:	783c      	ldrb	r4, [r7, #0]
 8025718:	eba8 0800 	sub.w	r8, r8, r0
 802571c:	fa1f fc8e 	uxth.w	ip, lr
 8025720:	fb02 fa0a 	mul.w	sl, r2, sl
 8025724:	ea6f 0e0e 	mvn.w	lr, lr
 8025728:	fa1f f888 	uxth.w	r8, r8
 802572c:	fa5f fe8e 	uxtb.w	lr, lr
 8025730:	fb08 aa04 	mla	sl, r8, r4, sl
 8025734:	7834      	ldrb	r4, [r6, #0]
 8025736:	fb19 f90e 	smulbb	r9, r9, lr
 802573a:	fb00 aa04 	mla	sl, r0, r4, sl
 802573e:	781c      	ldrb	r4, [r3, #0]
 8025740:	fb0b a404 	mla	r4, fp, r4, sl
 8025744:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025748:	fb04 990c 	mla	r9, r4, ip, r9
 802574c:	fa1f f989 	uxth.w	r9, r9
 8025750:	f109 0401 	add.w	r4, r9, #1
 8025754:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025758:	ea4f 2929 	mov.w	r9, r9, asr #8
 802575c:	f881 9000 	strb.w	r9, [r1]
 8025760:	f895 9001 	ldrb.w	r9, [r5, #1]
 8025764:	787c      	ldrb	r4, [r7, #1]
 8025766:	fb02 f909 	mul.w	r9, r2, r9
 802576a:	fb08 9904 	mla	r9, r8, r4, r9
 802576e:	7874      	ldrb	r4, [r6, #1]
 8025770:	fb00 9904 	mla	r9, r0, r4, r9
 8025774:	785c      	ldrb	r4, [r3, #1]
 8025776:	fb0b 9404 	mla	r4, fp, r4, r9
 802577a:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 802577e:	9c02      	ldr	r4, [sp, #8]
 8025780:	fb14 f90e 	smulbb	r9, r4, lr
 8025784:	fb0a 940c 	mla	r4, sl, ip, r9
 8025788:	b2a4      	uxth	r4, r4
 802578a:	f104 0901 	add.w	r9, r4, #1
 802578e:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8025792:	1224      	asrs	r4, r4, #8
 8025794:	704c      	strb	r4, [r1, #1]
 8025796:	78ad      	ldrb	r5, [r5, #2]
 8025798:	78bc      	ldrb	r4, [r7, #2]
 802579a:	436a      	muls	r2, r5
 802579c:	789b      	ldrb	r3, [r3, #2]
 802579e:	fb08 2204 	mla	r2, r8, r4, r2
 80257a2:	78b4      	ldrb	r4, [r6, #2]
 80257a4:	fb00 2004 	mla	r0, r0, r4, r2
 80257a8:	fb0b 0b03 	mla	fp, fp, r3, r0
 80257ac:	9b01      	ldr	r3, [sp, #4]
 80257ae:	fb13 fe0e 	smulbb	lr, r3, lr
 80257b2:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80257b6:	fb0b ec0c 	mla	ip, fp, ip, lr
 80257ba:	fa1f fc8c 	uxth.w	ip, ip
 80257be:	f10c 0e01 	add.w	lr, ip, #1
 80257c2:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80257c6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80257ca:	f881 c002 	strb.w	ip, [r1, #2]
 80257ce:	b007      	add	sp, #28
 80257d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257d4:	af05      	add	r7, sp, #20
 80257d6:	e75b      	b.n	8025690 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 80257d8:	ad05      	add	r5, sp, #20
 80257da:	462f      	mov	r7, r5
 80257dc:	e766      	b.n	80256ac <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80257de:	ad05      	add	r5, sp, #20
 80257e0:	e764      	b.n	80256ac <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80257e2:	ae05      	add	r6, sp, #20
 80257e4:	e777      	b.n	80256d6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 80257e6:	ab05      	add	r3, sp, #20
 80257e8:	461e      	mov	r6, r3
 80257ea:	e783      	b.n	80256f4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 80257ec:	ab05      	add	r3, sp, #20
 80257ee:	e781      	b.n	80256f4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

080257f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80257f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257f4:	b093      	sub	sp, #76	; 0x4c
 80257f6:	9210      	str	r2, [sp, #64]	; 0x40
 80257f8:	9309      	str	r3, [sp, #36]	; 0x24
 80257fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80257fc:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8025800:	9011      	str	r0, [sp, #68]	; 0x44
 8025802:	930e      	str	r3, [sp, #56]	; 0x38
 8025804:	6850      	ldr	r0, [r2, #4]
 8025806:	910d      	str	r1, [sp, #52]	; 0x34
 8025808:	6812      	ldr	r2, [r2, #0]
 802580a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802580e:	fb00 1303 	mla	r3, r0, r3, r1
 8025812:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025816:	18d3      	adds	r3, r2, r3
 8025818:	930a      	str	r3, [sp, #40]	; 0x28
 802581a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802581c:	681b      	ldr	r3, [r3, #0]
 802581e:	930c      	str	r3, [sp, #48]	; 0x30
 8025820:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025822:	685c      	ldr	r4, [r3, #4]
 8025824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025826:	3404      	adds	r4, #4
 8025828:	43db      	mvns	r3, r3
 802582a:	b2db      	uxtb	r3, r3
 802582c:	930b      	str	r3, [sp, #44]	; 0x2c
 802582e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025830:	2b00      	cmp	r3, #0
 8025832:	dc03      	bgt.n	802583c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8025834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025836:	2b00      	cmp	r3, #0
 8025838:	f340 8250 	ble.w	8025cdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802583c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802583e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025842:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025846:	1e48      	subs	r0, r1, #1
 8025848:	1e55      	subs	r5, r2, #1
 802584a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802584c:	2b00      	cmp	r3, #0
 802584e:	f340 80ee 	ble.w	8025a2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8025852:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8025854:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025856:	1436      	asrs	r6, r6, #16
 8025858:	ea4f 4323 	mov.w	r3, r3, asr #16
 802585c:	d406      	bmi.n	802586c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802585e:	4286      	cmp	r6, r0
 8025860:	da04      	bge.n	802586c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025862:	2b00      	cmp	r3, #0
 8025864:	db02      	blt.n	802586c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025866:	42ab      	cmp	r3, r5
 8025868:	f2c0 80e2 	blt.w	8025a30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802586c:	3601      	adds	r6, #1
 802586e:	f100 80cf 	bmi.w	8025a10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8025872:	42b1      	cmp	r1, r6
 8025874:	f2c0 80cc 	blt.w	8025a10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8025878:	3301      	adds	r3, #1
 802587a:	f100 80c9 	bmi.w	8025a10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802587e:	429a      	cmp	r2, r3
 8025880:	f2c0 80c6 	blt.w	8025a10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8025884:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8025888:	f1bb 0f00 	cmp.w	fp, #0
 802588c:	f340 80f1 	ble.w	8025a72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8025890:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025892:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025894:	9824      	ldr	r0, [sp, #144]	; 0x90
 8025896:	141d      	asrs	r5, r3, #16
 8025898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802589a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802589e:	68c7      	ldr	r7, [r0, #12]
 80258a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80258a2:	1418      	asrs	r0, r3, #16
 80258a4:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80258a8:	6892      	ldr	r2, [r2, #8]
 80258aa:	f100 8137 	bmi.w	8025b1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80258ae:	f102 3cff 	add.w	ip, r2, #4294967295
 80258b2:	4560      	cmp	r0, ip
 80258b4:	f280 8132 	bge.w	8025b1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80258b8:	2d00      	cmp	r5, #0
 80258ba:	f2c0 812f 	blt.w	8025b1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80258be:	f107 3cff 	add.w	ip, r7, #4294967295
 80258c2:	4565      	cmp	r5, ip
 80258c4:	f280 812a 	bge.w	8025b1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80258c8:	b212      	sxth	r2, r2
 80258ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80258cc:	fb05 0002 	mla	r0, r5, r2, r0
 80258d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80258d2:	f817 c000 	ldrb.w	ip, [r7, r0]
 80258d6:	4405      	add	r5, r0
 80258d8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80258dc:	eb04 0e0c 	add.w	lr, r4, ip
 80258e0:	f1b8 0f00 	cmp.w	r8, #0
 80258e4:	f000 810c 	beq.w	8025b00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80258e8:	786f      	ldrb	r7, [r5, #1]
 80258ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80258ee:	4427      	add	r7, r4
 80258f0:	2900      	cmp	r1, #0
 80258f2:	f000 810d 	beq.w	8025b10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80258f6:	18a8      	adds	r0, r5, r2
 80258f8:	5caa      	ldrb	r2, [r5, r2]
 80258fa:	7840      	ldrb	r0, [r0, #1]
 80258fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025900:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025904:	4422      	add	r2, r4
 8025906:	4420      	add	r0, r4
 8025908:	fa1f f388 	uxth.w	r3, r8
 802590c:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8025910:	b289      	uxth	r1, r1
 8025912:	f897 c000 	ldrb.w	ip, [r7]
 8025916:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 802591a:	fb03 f901 	mul.w	r9, r3, r1
 802591e:	011b      	lsls	r3, r3, #4
 8025920:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025924:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8025928:	eba3 0309 	sub.w	r3, r3, r9
 802592c:	b289      	uxth	r1, r1
 802592e:	b29b      	uxth	r3, r3
 8025930:	eba8 0801 	sub.w	r8, r8, r1
 8025934:	fb03 fc0c 	mul.w	ip, r3, ip
 8025938:	fa1f f888 	uxth.w	r8, r8
 802593c:	930f      	str	r3, [sp, #60]	; 0x3c
 802593e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025940:	fb08 cc0a 	mla	ip, r8, sl, ip
 8025944:	f892 a000 	ldrb.w	sl, [r2]
 8025948:	fb01 cc0a 	mla	ip, r1, sl, ip
 802594c:	f890 a000 	ldrb.w	sl, [r0]
 8025950:	fb09 cc0a 	mla	ip, r9, sl, ip
 8025954:	f896 a000 	ldrb.w	sl, [r6]
 8025958:	fb1a fa03 	smulbb	sl, sl, r3
 802595c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025962:	fb0c ac05 	mla	ip, ip, r5, sl
 8025966:	fa1f fc8c 	uxth.w	ip, ip
 802596a:	f10c 0a01 	add.w	sl, ip, #1
 802596e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8025972:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8025976:	f886 a000 	strb.w	sl, [r6]
 802597a:	f897 c001 	ldrb.w	ip, [r7, #1]
 802597e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8025982:	fb03 fc0c 	mul.w	ip, r3, ip
 8025986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025988:	fb08 cc0a 	mla	ip, r8, sl, ip
 802598c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8025990:	fb01 cc0a 	mla	ip, r1, sl, ip
 8025994:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025998:	fb09 cc0a 	mla	ip, r9, sl, ip
 802599c:	f896 a001 	ldrb.w	sl, [r6, #1]
 80259a0:	fb1a fa03 	smulbb	sl, sl, r3
 80259a4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80259a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80259aa:	fb0c ac05 	mla	ip, ip, r5, sl
 80259ae:	fa1f fc8c 	uxth.w	ip, ip
 80259b2:	f10c 0a01 	add.w	sl, ip, #1
 80259b6:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80259ba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80259be:	f886 c001 	strb.w	ip, [r6, #1]
 80259c2:	78bf      	ldrb	r7, [r7, #2]
 80259c4:	f89e c002 	ldrb.w	ip, [lr, #2]
 80259c8:	437b      	muls	r3, r7
 80259ca:	fb08 330c 	mla	r3, r8, ip, r3
 80259ce:	f892 c002 	ldrb.w	ip, [r2, #2]
 80259d2:	7882      	ldrb	r2, [r0, #2]
 80259d4:	fb01 310c 	mla	r1, r1, ip, r3
 80259d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80259da:	fb09 1902 	mla	r9, r9, r2, r1
 80259de:	78b1      	ldrb	r1, [r6, #2]
 80259e0:	fb11 f103 	smulbb	r1, r1, r3
 80259e4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80259e8:	fb09 1505 	mla	r5, r9, r5, r1
 80259ec:	b2ad      	uxth	r5, r5
 80259ee:	1c6b      	adds	r3, r5, #1
 80259f0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80259f4:	122d      	asrs	r5, r5, #8
 80259f6:	70b5      	strb	r5, [r6, #2]
 80259f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80259fa:	3603      	adds	r6, #3
 80259fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80259fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025a02:	4413      	add	r3, r2
 8025a04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025a06:	931d      	str	r3, [sp, #116]	; 0x74
 8025a08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025a0a:	4413      	add	r3, r2
 8025a0c:	931e      	str	r3, [sp, #120]	; 0x78
 8025a0e:	e73b      	b.n	8025888 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025a10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025a12:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8025a14:	4433      	add	r3, r6
 8025a16:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8025a18:	931d      	str	r3, [sp, #116]	; 0x74
 8025a1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025a1c:	4433      	add	r3, r6
 8025a1e:	931e      	str	r3, [sp, #120]	; 0x78
 8025a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a22:	3b01      	subs	r3, #1
 8025a24:	9309      	str	r3, [sp, #36]	; 0x24
 8025a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a28:	3303      	adds	r3, #3
 8025a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8025a2c:	e70d      	b.n	802584a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8025a2e:	d028      	beq.n	8025a82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8025a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a32:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025a34:	3b01      	subs	r3, #1
 8025a36:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8025a38:	fb00 5003 	mla	r0, r0, r3, r5
 8025a3c:	1400      	asrs	r0, r0, #16
 8025a3e:	f53f af21 	bmi.w	8025884 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025a42:	3901      	subs	r1, #1
 8025a44:	4288      	cmp	r0, r1
 8025a46:	f6bf af1d 	bge.w	8025884 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025a4a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8025a4c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025a4e:	fb01 0303 	mla	r3, r1, r3, r0
 8025a52:	141b      	asrs	r3, r3, #16
 8025a54:	f53f af16 	bmi.w	8025884 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025a58:	3a01      	subs	r2, #1
 8025a5a:	4293      	cmp	r3, r2
 8025a5c:	f6bf af12 	bge.w	8025884 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a62:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8025a66:	1cdf      	adds	r7, r3, #3
 8025a68:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8025a6c:	f1b9 0f00 	cmp.w	r9, #0
 8025a70:	dc73      	bgt.n	8025b5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8025a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025a76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025a7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025a7e:	441a      	add	r2, r3
 8025a80:	920a      	str	r2, [sp, #40]	; 0x28
 8025a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025a84:	2b00      	cmp	r3, #0
 8025a86:	f340 8129 	ble.w	8025cdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8025a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025a8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025a90:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025a94:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025a98:	eef0 6a62 	vmov.f32	s13, s5
 8025a9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025aa0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025aa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025aa8:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8025aac:	eef0 6a43 	vmov.f32	s13, s6
 8025ab0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ab4:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8025ab8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025abc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025ac0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025ac4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025ac8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025acc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025ad0:	ee12 2a90 	vmov	r2, s5
 8025ad4:	eef0 2a47 	vmov.f32	s5, s14
 8025ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8025adc:	ee13 2a10 	vmov	r2, s6
 8025ae0:	931f      	str	r3, [sp, #124]	; 0x7c
 8025ae2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025ae4:	eeb0 3a67 	vmov.f32	s6, s15
 8025ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8025aec:	9320      	str	r3, [sp, #128]	; 0x80
 8025aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025af0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025af2:	3b01      	subs	r3, #1
 8025af4:	930d      	str	r3, [sp, #52]	; 0x34
 8025af6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025af8:	bf08      	it	eq
 8025afa:	4613      	moveq	r3, r2
 8025afc:	9309      	str	r3, [sp, #36]	; 0x24
 8025afe:	e696      	b.n	802582e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8025b00:	b149      	cbz	r1, 8025b16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8025b02:	5caa      	ldrb	r2, [r5, r2]
 8025b04:	4670      	mov	r0, lr
 8025b06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025b0a:	4422      	add	r2, r4
 8025b0c:	4677      	mov	r7, lr
 8025b0e:	e6fb      	b.n	8025908 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8025b10:	4670      	mov	r0, lr
 8025b12:	4672      	mov	r2, lr
 8025b14:	e6f8      	b.n	8025908 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8025b16:	4670      	mov	r0, lr
 8025b18:	4672      	mov	r2, lr
 8025b1a:	e7f7      	b.n	8025b0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8025b1c:	f110 0c01 	adds.w	ip, r0, #1
 8025b20:	f53f af6a 	bmi.w	80259f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8025b24:	4562      	cmp	r2, ip
 8025b26:	f6ff af67 	blt.w	80259f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8025b2a:	f115 0c01 	adds.w	ip, r5, #1
 8025b2e:	f53f af63 	bmi.w	80259f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8025b32:	4567      	cmp	r7, ip
 8025b34:	f6ff af60 	blt.w	80259f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8025b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025b3a:	b23f      	sxth	r7, r7
 8025b3c:	b212      	sxth	r2, r2
 8025b3e:	9002      	str	r0, [sp, #8]
 8025b40:	9701      	str	r7, [sp, #4]
 8025b42:	9200      	str	r2, [sp, #0]
 8025b44:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025b48:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8025b4c:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8025b50:	4623      	mov	r3, r4
 8025b52:	4631      	mov	r1, r6
 8025b54:	f7ff fd69 	bl	802562a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8025b58:	e74e      	b.n	80259f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8025b5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025b5c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025b5e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025b62:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8025b64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8025b66:	1400      	asrs	r0, r0, #16
 8025b68:	142d      	asrs	r5, r5, #16
 8025b6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025b6c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025b70:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025b74:	fb02 5000 	mla	r0, r2, r0, r5
 8025b78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025b7a:	f815 e000 	ldrb.w	lr, [r5, r0]
 8025b7e:	eb05 0c00 	add.w	ip, r5, r0
 8025b82:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025b86:	eb04 060e 	add.w	r6, r4, lr
 8025b8a:	2b00      	cmp	r3, #0
 8025b8c:	f000 8097 	beq.w	8025cbe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8025b90:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025b98:	4425      	add	r5, r4
 8025b9a:	2900      	cmp	r1, #0
 8025b9c:	f000 8098 	beq.w	8025cd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8025ba0:	eb0c 0002 	add.w	r0, ip, r2
 8025ba4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8025ba8:	7840      	ldrb	r0, [r0, #1]
 8025baa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025bae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025bb2:	4422      	add	r2, r4
 8025bb4:	4420      	add	r0, r4
 8025bb6:	b29b      	uxth	r3, r3
 8025bb8:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8025bbc:	b289      	uxth	r1, r1
 8025bbe:	f895 e000 	ldrb.w	lr, [r5]
 8025bc2:	3703      	adds	r7, #3
 8025bc4:	f109 39ff 	add.w	r9, r9, #4294967295
 8025bc8:	fb03 f801 	mul.w	r8, r3, r1
 8025bcc:	011b      	lsls	r3, r3, #4
 8025bce:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025bd2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8025bd6:	eba3 0308 	sub.w	r3, r3, r8
 8025bda:	b289      	uxth	r1, r1
 8025bdc:	b29b      	uxth	r3, r3
 8025bde:	ebac 0c01 	sub.w	ip, ip, r1
 8025be2:	fb03 fe0e 	mul.w	lr, r3, lr
 8025be6:	fa1f fc8c 	uxth.w	ip, ip
 8025bea:	930f      	str	r3, [sp, #60]	; 0x3c
 8025bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025bee:	fb0c ee0b 	mla	lr, ip, fp, lr
 8025bf2:	f892 b000 	ldrb.w	fp, [r2]
 8025bf6:	fb01 ee0b 	mla	lr, r1, fp, lr
 8025bfa:	f890 b000 	ldrb.w	fp, [r0]
 8025bfe:	fb08 ee0b 	mla	lr, r8, fp, lr
 8025c02:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8025c06:	fb1b fb03 	smulbb	fp, fp, r3
 8025c0a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8025c0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025c10:	fb0e be0a 	mla	lr, lr, sl, fp
 8025c14:	fa1f fe8e 	uxth.w	lr, lr
 8025c18:	f10e 0b01 	add.w	fp, lr, #1
 8025c1c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8025c20:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025c24:	f807 ec06 	strb.w	lr, [r7, #-6]
 8025c28:	f895 e001 	ldrb.w	lr, [r5, #1]
 8025c2c:	f896 b001 	ldrb.w	fp, [r6, #1]
 8025c30:	fb03 fe0e 	mul.w	lr, r3, lr
 8025c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025c36:	fb0c ee0b 	mla	lr, ip, fp, lr
 8025c3a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025c3e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8025c42:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025c46:	fb08 ee0b 	mla	lr, r8, fp, lr
 8025c4a:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8025c4e:	fb1b fb03 	smulbb	fp, fp, r3
 8025c52:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8025c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025c58:	fb0e be0a 	mla	lr, lr, sl, fp
 8025c5c:	fa1f fe8e 	uxth.w	lr, lr
 8025c60:	f10e 0b01 	add.w	fp, lr, #1
 8025c64:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8025c68:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025c6c:	f807 ec05 	strb.w	lr, [r7, #-5]
 8025c70:	78ad      	ldrb	r5, [r5, #2]
 8025c72:	78b6      	ldrb	r6, [r6, #2]
 8025c74:	436b      	muls	r3, r5
 8025c76:	7895      	ldrb	r5, [r2, #2]
 8025c78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025c7a:	fb0c 3306 	mla	r3, ip, r6, r3
 8025c7e:	fb01 3305 	mla	r3, r1, r5, r3
 8025c82:	7885      	ldrb	r5, [r0, #2]
 8025c84:	fb08 3805 	mla	r8, r8, r5, r3
 8025c88:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8025c8c:	fb13 f302 	smulbb	r3, r3, r2
 8025c90:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8025c94:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025c96:	fb08 380a 	mla	r8, r8, sl, r3
 8025c9a:	fa1f f888 	uxth.w	r8, r8
 8025c9e:	f108 0301 	add.w	r3, r8, #1
 8025ca2:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8025ca6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025ca8:	4413      	add	r3, r2
 8025caa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025cac:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025cb0:	931d      	str	r3, [sp, #116]	; 0x74
 8025cb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025cb4:	f807 8c04 	strb.w	r8, [r7, #-4]
 8025cb8:	4413      	add	r3, r2
 8025cba:	931e      	str	r3, [sp, #120]	; 0x78
 8025cbc:	e6d6      	b.n	8025a6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8025cbe:	b151      	cbz	r1, 8025cd6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8025cc0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8025cc4:	4630      	mov	r0, r6
 8025cc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025cca:	4422      	add	r2, r4
 8025ccc:	4635      	mov	r5, r6
 8025cce:	e772      	b.n	8025bb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8025cd0:	4630      	mov	r0, r6
 8025cd2:	4632      	mov	r2, r6
 8025cd4:	e76f      	b.n	8025bb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8025cd6:	4630      	mov	r0, r6
 8025cd8:	4632      	mov	r2, r6
 8025cda:	e7f7      	b.n	8025ccc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8025cdc:	b013      	add	sp, #76	; 0x4c
 8025cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025ce2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8025ce2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8025ce6:	784c      	ldrb	r4, [r1, #1]
 8025ce8:	f891 a002 	ldrb.w	sl, [r1, #2]
 8025cec:	0224      	lsls	r4, r4, #8
 8025cee:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8025cf2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8025cf6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8025cfa:	f891 a000 	ldrb.w	sl, [r1]
 8025cfe:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8025d02:	ea44 040a 	orr.w	r4, r4, sl
 8025d06:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8025d0a:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8025d0e:	9401      	str	r4, [sp, #4]
 8025d10:	fb05 c70e 	mla	r7, r5, lr, ip
 8025d14:	2d00      	cmp	r5, #0
 8025d16:	eb02 0807 	add.w	r8, r2, r7
 8025d1a:	db72      	blt.n	8025e02 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8025d1c:	45a9      	cmp	r9, r5
 8025d1e:	dd70      	ble.n	8025e02 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8025d20:	f1bc 0f00 	cmp.w	ip, #0
 8025d24:	db6b      	blt.n	8025dfe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8025d26:	45e6      	cmp	lr, ip
 8025d28:	dd69      	ble.n	8025dfe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8025d2a:	5dd7      	ldrb	r7, [r2, r7]
 8025d2c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025d30:	441f      	add	r7, r3
 8025d32:	f11c 0201 	adds.w	r2, ip, #1
 8025d36:	d467      	bmi.n	8025e08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8025d38:	4596      	cmp	lr, r2
 8025d3a:	dd65      	ble.n	8025e08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8025d3c:	2800      	cmp	r0, #0
 8025d3e:	d063      	beq.n	8025e08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8025d40:	f898 4001 	ldrb.w	r4, [r8, #1]
 8025d44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025d48:	441c      	add	r4, r3
 8025d4a:	3501      	adds	r5, #1
 8025d4c:	d460      	bmi.n	8025e10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8025d4e:	45a9      	cmp	r9, r5
 8025d50:	dd5e      	ble.n	8025e10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8025d52:	2e00      	cmp	r6, #0
 8025d54:	d05c      	beq.n	8025e10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8025d56:	f1bc 0f00 	cmp.w	ip, #0
 8025d5a:	db57      	blt.n	8025e0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8025d5c:	45e6      	cmp	lr, ip
 8025d5e:	dd55      	ble.n	8025e0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8025d60:	f818 500e 	ldrb.w	r5, [r8, lr]
 8025d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025d68:	441d      	add	r5, r3
 8025d6a:	f11c 0201 	adds.w	r2, ip, #1
 8025d6e:	d452      	bmi.n	8025e16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8025d70:	4596      	cmp	lr, r2
 8025d72:	dd50      	ble.n	8025e16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8025d74:	2800      	cmp	r0, #0
 8025d76:	d04e      	beq.n	8025e16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8025d78:	44c6      	add	lr, r8
 8025d7a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025d7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025d82:	4413      	add	r3, r2
 8025d84:	b280      	uxth	r0, r0
 8025d86:	f897 8000 	ldrb.w	r8, [r7]
 8025d8a:	b2b2      	uxth	r2, r6
 8025d8c:	fb00 f602 	mul.w	r6, r0, r2
 8025d90:	0100      	lsls	r0, r0, #4
 8025d92:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025d96:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8025d9a:	1b80      	subs	r0, r0, r6
 8025d9c:	fa1f fc82 	uxth.w	ip, r2
 8025da0:	b282      	uxth	r2, r0
 8025da2:	7820      	ldrb	r0, [r4, #0]
 8025da4:	ebae 0e0c 	sub.w	lr, lr, ip
 8025da8:	4350      	muls	r0, r2
 8025daa:	fa1f fe8e 	uxth.w	lr, lr
 8025dae:	fb0e 0808 	mla	r8, lr, r8, r0
 8025db2:	7828      	ldrb	r0, [r5, #0]
 8025db4:	fb0c 8800 	mla	r8, ip, r0, r8
 8025db8:	7818      	ldrb	r0, [r3, #0]
 8025dba:	fb06 8000 	mla	r0, r6, r0, r8
 8025dbe:	1200      	asrs	r0, r0, #8
 8025dc0:	7008      	strb	r0, [r1, #0]
 8025dc2:	7860      	ldrb	r0, [r4, #1]
 8025dc4:	f897 8001 	ldrb.w	r8, [r7, #1]
 8025dc8:	4350      	muls	r0, r2
 8025dca:	fb0e 0808 	mla	r8, lr, r8, r0
 8025dce:	7868      	ldrb	r0, [r5, #1]
 8025dd0:	fb0c 8800 	mla	r8, ip, r0, r8
 8025dd4:	7858      	ldrb	r0, [r3, #1]
 8025dd6:	fb06 8000 	mla	r0, r6, r0, r8
 8025dda:	1200      	asrs	r0, r0, #8
 8025ddc:	7048      	strb	r0, [r1, #1]
 8025dde:	78a0      	ldrb	r0, [r4, #2]
 8025de0:	78bf      	ldrb	r7, [r7, #2]
 8025de2:	4350      	muls	r0, r2
 8025de4:	78aa      	ldrb	r2, [r5, #2]
 8025de6:	fb0e 0007 	mla	r0, lr, r7, r0
 8025dea:	fb0c 0c02 	mla	ip, ip, r2, r0
 8025dee:	789a      	ldrb	r2, [r3, #2]
 8025df0:	fb06 c202 	mla	r2, r6, r2, ip
 8025df4:	1212      	asrs	r2, r2, #8
 8025df6:	708a      	strb	r2, [r1, #2]
 8025df8:	b002      	add	sp, #8
 8025dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025dfe:	af01      	add	r7, sp, #4
 8025e00:	e797      	b.n	8025d32 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8025e02:	ac01      	add	r4, sp, #4
 8025e04:	4627      	mov	r7, r4
 8025e06:	e7a0      	b.n	8025d4a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8025e08:	ac01      	add	r4, sp, #4
 8025e0a:	e79e      	b.n	8025d4a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8025e0c:	ad01      	add	r5, sp, #4
 8025e0e:	e7ac      	b.n	8025d6a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8025e10:	ab01      	add	r3, sp, #4
 8025e12:	461d      	mov	r5, r3
 8025e14:	e7b6      	b.n	8025d84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8025e16:	ab01      	add	r3, sp, #4
 8025e18:	e7b4      	b.n	8025d84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08025e1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025e1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e1e:	b08d      	sub	sp, #52	; 0x34
 8025e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025e24:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8025e28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8025e2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8025e2c:	9306      	str	r3, [sp, #24]
 8025e2e:	6850      	ldr	r0, [r2, #4]
 8025e30:	6812      	ldr	r2, [r2, #0]
 8025e32:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025e34:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8025e38:	fb00 1303 	mla	r3, r0, r3, r1
 8025e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025e40:	18d3      	adds	r3, r2, r3
 8025e42:	9307      	str	r3, [sp, #28]
 8025e44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025e46:	681b      	ldr	r3, [r3, #0]
 8025e48:	9308      	str	r3, [sp, #32]
 8025e4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025e4c:	685d      	ldr	r5, [r3, #4]
 8025e4e:	3504      	adds	r5, #4
 8025e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e52:	2b00      	cmp	r3, #0
 8025e54:	dc03      	bgt.n	8025e5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8025e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025e58:	2b00      	cmp	r3, #0
 8025e5a:	f340 81e6 	ble.w	802622a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025e5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025e60:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e64:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025e68:	1e48      	subs	r0, r1, #1
 8025e6a:	1e56      	subs	r6, r2, #1
 8025e6c:	9b06      	ldr	r3, [sp, #24]
 8025e6e:	2b00      	cmp	r3, #0
 8025e70:	f340 80bd 	ble.w	8025fee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025e74:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025e76:	1427      	asrs	r7, r4, #16
 8025e78:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025e7c:	d406      	bmi.n	8025e8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025e7e:	4287      	cmp	r7, r0
 8025e80:	da04      	bge.n	8025e8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025e82:	2b00      	cmp	r3, #0
 8025e84:	db02      	blt.n	8025e8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025e86:	42b3      	cmp	r3, r6
 8025e88:	f2c0 80b2 	blt.w	8025ff0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8025e8c:	3701      	adds	r7, #1
 8025e8e:	f100 80a1 	bmi.w	8025fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025e92:	42b9      	cmp	r1, r7
 8025e94:	f2c0 809e 	blt.w	8025fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025e98:	3301      	adds	r3, #1
 8025e9a:	f100 809b 	bmi.w	8025fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025e9e:	429a      	cmp	r2, r3
 8025ea0:	f2c0 8098 	blt.w	8025fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025ea4:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8025ea8:	f1bb 0f00 	cmp.w	fp, #0
 8025eac:	f340 80bf 	ble.w	802602e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8025eb0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025eb2:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025eb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025eb6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025eba:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8025ebe:	1420      	asrs	r0, r4, #16
 8025ec0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025ec2:	ea4f 4723 	mov.w	r7, r3, asr #16
 8025ec6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8025eca:	6892      	ldr	r2, [r2, #8]
 8025ecc:	f100 8103 	bmi.w	80260d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8025ed0:	f102 3eff 	add.w	lr, r2, #4294967295
 8025ed4:	4570      	cmp	r0, lr
 8025ed6:	f280 80fe 	bge.w	80260d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8025eda:	2f00      	cmp	r7, #0
 8025edc:	f2c0 80fb 	blt.w	80260d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8025ee0:	f10c 3eff 	add.w	lr, ip, #4294967295
 8025ee4:	4577      	cmp	r7, lr
 8025ee6:	f280 80f6 	bge.w	80260d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8025eea:	b212      	sxth	r2, r2
 8025eec:	fb07 0002 	mla	r0, r7, r2, r0
 8025ef0:	9f08      	ldr	r7, [sp, #32]
 8025ef2:	f817 8000 	ldrb.w	r8, [r7, r0]
 8025ef6:	eb07 0e00 	add.w	lr, r7, r0
 8025efa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025efe:	eb05 0c08 	add.w	ip, r5, r8
 8025f02:	2b00      	cmp	r3, #0
 8025f04:	f000 80d8 	beq.w	80260b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8025f08:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8025f0c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025f10:	442f      	add	r7, r5
 8025f12:	2900      	cmp	r1, #0
 8025f14:	f000 80d9 	beq.w	80260ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025f18:	eb0e 0002 	add.w	r0, lr, r2
 8025f1c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8025f20:	7840      	ldrb	r0, [r0, #1]
 8025f22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025f26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025f2a:	442a      	add	r2, r5
 8025f2c:	4428      	add	r0, r5
 8025f2e:	b29b      	uxth	r3, r3
 8025f30:	f815 a008 	ldrb.w	sl, [r5, r8]
 8025f34:	b289      	uxth	r1, r1
 8025f36:	f897 8000 	ldrb.w	r8, [r7]
 8025f3a:	fb03 f901 	mul.w	r9, r3, r1
 8025f3e:	011b      	lsls	r3, r3, #4
 8025f40:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025f44:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025f48:	eba3 0309 	sub.w	r3, r3, r9
 8025f4c:	b289      	uxth	r1, r1
 8025f4e:	b29b      	uxth	r3, r3
 8025f50:	ebae 0e01 	sub.w	lr, lr, r1
 8025f54:	fb03 f808 	mul.w	r8, r3, r8
 8025f58:	fa1f fe8e 	uxth.w	lr, lr
 8025f5c:	fb0e 880a 	mla	r8, lr, sl, r8
 8025f60:	f892 a000 	ldrb.w	sl, [r2]
 8025f64:	fb01 880a 	mla	r8, r1, sl, r8
 8025f68:	f890 a000 	ldrb.w	sl, [r0]
 8025f6c:	fb09 880a 	mla	r8, r9, sl, r8
 8025f70:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025f74:	f886 8000 	strb.w	r8, [r6]
 8025f78:	f897 8001 	ldrb.w	r8, [r7, #1]
 8025f7c:	f89c a001 	ldrb.w	sl, [ip, #1]
 8025f80:	fb03 f808 	mul.w	r8, r3, r8
 8025f84:	fb0e 880a 	mla	r8, lr, sl, r8
 8025f88:	f892 a001 	ldrb.w	sl, [r2, #1]
 8025f8c:	fb01 880a 	mla	r8, r1, sl, r8
 8025f90:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025f94:	fb09 880a 	mla	r8, r9, sl, r8
 8025f98:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025f9c:	f886 8001 	strb.w	r8, [r6, #1]
 8025fa0:	78bf      	ldrb	r7, [r7, #2]
 8025fa2:	f89c c002 	ldrb.w	ip, [ip, #2]
 8025fa6:	437b      	muls	r3, r7
 8025fa8:	7892      	ldrb	r2, [r2, #2]
 8025faa:	fb0e 330c 	mla	r3, lr, ip, r3
 8025fae:	fb01 3102 	mla	r1, r1, r2, r3
 8025fb2:	7882      	ldrb	r2, [r0, #2]
 8025fb4:	fb09 1902 	mla	r9, r9, r2, r1
 8025fb8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025fbc:	f886 9002 	strb.w	r9, [r6, #2]
 8025fc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025fc2:	3603      	adds	r6, #3
 8025fc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025fc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025fca:	441c      	add	r4, r3
 8025fcc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025fce:	4413      	add	r3, r2
 8025fd0:	9318      	str	r3, [sp, #96]	; 0x60
 8025fd2:	e769      	b.n	8025ea8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025fd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025fd6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8025fd8:	441c      	add	r4, r3
 8025fda:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025fdc:	443b      	add	r3, r7
 8025fde:	9318      	str	r3, [sp, #96]	; 0x60
 8025fe0:	9b06      	ldr	r3, [sp, #24]
 8025fe2:	3b01      	subs	r3, #1
 8025fe4:	9306      	str	r3, [sp, #24]
 8025fe6:	9b07      	ldr	r3, [sp, #28]
 8025fe8:	3303      	adds	r3, #3
 8025fea:	9307      	str	r3, [sp, #28]
 8025fec:	e73e      	b.n	8025e6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025fee:	d026      	beq.n	802603e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025ff0:	9b06      	ldr	r3, [sp, #24]
 8025ff2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025ff4:	3b01      	subs	r3, #1
 8025ff6:	fb00 4003 	mla	r0, r0, r3, r4
 8025ffa:	1400      	asrs	r0, r0, #16
 8025ffc:	f53f af52 	bmi.w	8025ea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026000:	3901      	subs	r1, #1
 8026002:	4288      	cmp	r0, r1
 8026004:	f6bf af4e 	bge.w	8025ea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026008:	991a      	ldr	r1, [sp, #104]	; 0x68
 802600a:	9818      	ldr	r0, [sp, #96]	; 0x60
 802600c:	fb01 0303 	mla	r3, r1, r3, r0
 8026010:	141b      	asrs	r3, r3, #16
 8026012:	f53f af47 	bmi.w	8025ea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026016:	3a01      	subs	r2, #1
 8026018:	4293      	cmp	r3, r2
 802601a:	f6bf af43 	bge.w	8025ea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802601e:	9b07      	ldr	r3, [sp, #28]
 8026020:	f8dd a018 	ldr.w	sl, [sp, #24]
 8026024:	f103 0803 	add.w	r8, r3, #3
 8026028:	f1ba 0f00 	cmp.w	sl, #0
 802602c:	dc71      	bgt.n	8026112 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802602e:	9b06      	ldr	r3, [sp, #24]
 8026030:	9a07      	ldr	r2, [sp, #28]
 8026032:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802603a:	441a      	add	r2, r3
 802603c:	9207      	str	r2, [sp, #28]
 802603e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026040:	2b00      	cmp	r3, #0
 8026042:	f340 80f2 	ble.w	802622a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8026046:	ee30 0a04 	vadd.f32	s0, s0, s8
 802604a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802604c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026050:	eeb0 6a62 	vmov.f32	s12, s5
 8026054:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8026058:	ee31 1a05 	vadd.f32	s2, s2, s10
 802605c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026060:	ee16 4a10 	vmov	r4, s12
 8026064:	eeb0 6a43 	vmov.f32	s12, s6
 8026068:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802606c:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8026070:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026074:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026078:	ee77 2a62 	vsub.f32	s5, s14, s5
 802607c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026080:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026084:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026088:	ee12 2a90 	vmov	r2, s5
 802608c:	eef0 2a47 	vmov.f32	s5, s14
 8026090:	fb92 f3f3 	sdiv	r3, r2, r3
 8026094:	ee13 2a10 	vmov	r2, s6
 8026098:	9319      	str	r3, [sp, #100]	; 0x64
 802609a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802609c:	eeb0 3a67 	vmov.f32	s6, s15
 80260a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80260a4:	931a      	str	r3, [sp, #104]	; 0x68
 80260a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80260aa:	3b01      	subs	r3, #1
 80260ac:	9309      	str	r3, [sp, #36]	; 0x24
 80260ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80260b0:	bf08      	it	eq
 80260b2:	4613      	moveq	r3, r2
 80260b4:	9306      	str	r3, [sp, #24]
 80260b6:	e6cb      	b.n	8025e50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80260b8:	b151      	cbz	r1, 80260d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80260ba:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80260be:	4660      	mov	r0, ip
 80260c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80260c4:	442a      	add	r2, r5
 80260c6:	4667      	mov	r7, ip
 80260c8:	e731      	b.n	8025f2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80260ca:	4660      	mov	r0, ip
 80260cc:	4662      	mov	r2, ip
 80260ce:	e72e      	b.n	8025f2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80260d0:	4660      	mov	r0, ip
 80260d2:	4662      	mov	r2, ip
 80260d4:	e7f7      	b.n	80260c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80260d6:	f110 0e01 	adds.w	lr, r0, #1
 80260da:	f53f af71 	bmi.w	8025fc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80260de:	4572      	cmp	r2, lr
 80260e0:	f6ff af6e 	blt.w	8025fc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80260e4:	f117 0e01 	adds.w	lr, r7, #1
 80260e8:	f53f af6a 	bmi.w	8025fc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80260ec:	45f4      	cmp	ip, lr
 80260ee:	f6ff af67 	blt.w	8025fc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80260f2:	b212      	sxth	r2, r2
 80260f4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80260f8:	fa0f f38c 	sxth.w	r3, ip
 80260fc:	9200      	str	r2, [sp, #0]
 80260fe:	4631      	mov	r1, r6
 8026100:	9a08      	ldr	r2, [sp, #32]
 8026102:	9301      	str	r3, [sp, #4]
 8026104:	462b      	mov	r3, r5
 8026106:	e9cd 0702 	strd	r0, r7, [sp, #8]
 802610a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802610c:	f7ff fde9 	bl	8025ce2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8026110:	e756      	b.n	8025fc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8026112:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8026114:	1426      	asrs	r6, r4, #16
 8026116:	9818      	ldr	r0, [sp, #96]	; 0x60
 8026118:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802611c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8026120:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8026122:	1400      	asrs	r0, r0, #16
 8026124:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8026128:	fb02 6000 	mla	r0, r2, r0, r6
 802612c:	9e08      	ldr	r6, [sp, #32]
 802612e:	f816 e000 	ldrb.w	lr, [r6, r0]
 8026132:	eb06 0c00 	add.w	ip, r6, r0
 8026136:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802613a:	eb05 070e 	add.w	r7, r5, lr
 802613e:	2b00      	cmp	r3, #0
 8026140:	d064      	beq.n	802620c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8026142:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8026146:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802614a:	442e      	add	r6, r5
 802614c:	2900      	cmp	r1, #0
 802614e:	d066      	beq.n	802621e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8026150:	eb0c 0002 	add.w	r0, ip, r2
 8026154:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8026158:	7840      	ldrb	r0, [r0, #1]
 802615a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802615e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026162:	442a      	add	r2, r5
 8026164:	4428      	add	r0, r5
 8026166:	b29b      	uxth	r3, r3
 8026168:	f815 b00e 	ldrb.w	fp, [r5, lr]
 802616c:	b289      	uxth	r1, r1
 802616e:	f896 e000 	ldrb.w	lr, [r6]
 8026172:	f108 0803 	add.w	r8, r8, #3
 8026176:	f10a 3aff 	add.w	sl, sl, #4294967295
 802617a:	fb03 f901 	mul.w	r9, r3, r1
 802617e:	011b      	lsls	r3, r3, #4
 8026180:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026184:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8026188:	eba3 0309 	sub.w	r3, r3, r9
 802618c:	b289      	uxth	r1, r1
 802618e:	b29b      	uxth	r3, r3
 8026190:	ebac 0c01 	sub.w	ip, ip, r1
 8026194:	fb03 fe0e 	mul.w	lr, r3, lr
 8026198:	fa1f fc8c 	uxth.w	ip, ip
 802619c:	fb0c ee0b 	mla	lr, ip, fp, lr
 80261a0:	f892 b000 	ldrb.w	fp, [r2]
 80261a4:	fb01 ee0b 	mla	lr, r1, fp, lr
 80261a8:	f890 b000 	ldrb.w	fp, [r0]
 80261ac:	fb09 ee0b 	mla	lr, r9, fp, lr
 80261b0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80261b4:	f808 ec06 	strb.w	lr, [r8, #-6]
 80261b8:	f896 e001 	ldrb.w	lr, [r6, #1]
 80261bc:	f897 b001 	ldrb.w	fp, [r7, #1]
 80261c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80261c4:	fb0c ee0b 	mla	lr, ip, fp, lr
 80261c8:	f892 b001 	ldrb.w	fp, [r2, #1]
 80261cc:	fb01 ee0b 	mla	lr, r1, fp, lr
 80261d0:	f890 b001 	ldrb.w	fp, [r0, #1]
 80261d4:	fb09 ee0b 	mla	lr, r9, fp, lr
 80261d8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80261dc:	f808 ec05 	strb.w	lr, [r8, #-5]
 80261e0:	78b6      	ldrb	r6, [r6, #2]
 80261e2:	78bf      	ldrb	r7, [r7, #2]
 80261e4:	4373      	muls	r3, r6
 80261e6:	7896      	ldrb	r6, [r2, #2]
 80261e8:	7882      	ldrb	r2, [r0, #2]
 80261ea:	fb0c 3307 	mla	r3, ip, r7, r3
 80261ee:	fb01 3306 	mla	r3, r1, r6, r3
 80261f2:	fb09 3902 	mla	r9, r9, r2, r3
 80261f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80261f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80261fa:	441c      	add	r4, r3
 80261fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80261fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026202:	4413      	add	r3, r2
 8026204:	f808 9c04 	strb.w	r9, [r8, #-4]
 8026208:	9318      	str	r3, [sp, #96]	; 0x60
 802620a:	e70d      	b.n	8026028 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802620c:	b151      	cbz	r1, 8026224 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802620e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8026212:	4638      	mov	r0, r7
 8026214:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026218:	442a      	add	r2, r5
 802621a:	463e      	mov	r6, r7
 802621c:	e7a3      	b.n	8026166 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802621e:	4638      	mov	r0, r7
 8026220:	463a      	mov	r2, r7
 8026222:	e7a0      	b.n	8026166 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8026224:	4638      	mov	r0, r7
 8026226:	463a      	mov	r2, r7
 8026228:	e7f7      	b.n	802621a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 802622a:	b00d      	add	sp, #52	; 0x34
 802622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026230 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8026230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026234:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8026238:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802623c:	2d00      	cmp	r5, #0
 802623e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8026242:	fb05 700c 	mla	r0, r5, ip, r7
 8026246:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 802624a:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 802624e:	eb02 0800 	add.w	r8, r2, r0
 8026252:	f2c0 8118 	blt.w	8026486 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8026256:	45a9      	cmp	r9, r5
 8026258:	f340 8115 	ble.w	8026486 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 802625c:	2f00      	cmp	r7, #0
 802625e:	f2c0 8110 	blt.w	8026482 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8026262:	45bc      	cmp	ip, r7
 8026264:	f340 810d 	ble.w	8026482 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8026268:	5c12      	ldrb	r2, [r2, r0]
 802626a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802626e:	1c7a      	adds	r2, r7, #1
 8026270:	f100 810c 	bmi.w	802648c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8026274:	4594      	cmp	ip, r2
 8026276:	f340 8109 	ble.w	802648c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 802627a:	2c00      	cmp	r4, #0
 802627c:	f000 8108 	beq.w	8026490 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8026280:	f898 2001 	ldrb.w	r2, [r8, #1]
 8026284:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8026288:	3501      	adds	r5, #1
 802628a:	f100 8105 	bmi.w	8026498 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802628e:	45a9      	cmp	r9, r5
 8026290:	f340 8102 	ble.w	8026498 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8026294:	f1be 0f00 	cmp.w	lr, #0
 8026298:	f000 8101 	beq.w	802649e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 802629c:	2f00      	cmp	r7, #0
 802629e:	f2c0 80f9 	blt.w	8026494 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80262a2:	45bc      	cmp	ip, r7
 80262a4:	f340 80f6 	ble.w	8026494 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80262a8:	f818 200c 	ldrb.w	r2, [r8, ip]
 80262ac:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80262b0:	3701      	adds	r7, #1
 80262b2:	f100 80f7 	bmi.w	80264a4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 80262b6:	45bc      	cmp	ip, r7
 80262b8:	f340 80f4 	ble.w	80264a4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 80262bc:	2c00      	cmp	r4, #0
 80262be:	f000 80f3 	beq.w	80264a8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 80262c2:	44c4      	add	ip, r8
 80262c4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80262c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80262cc:	fa1f fc84 	uxth.w	ip, r4
 80262d0:	fa1f f48e 	uxth.w	r4, lr
 80262d4:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80262d8:	fb04 fe0c 	mul.w	lr, r4, ip
 80262dc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80262e0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80262e4:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80262e8:	ebac 070e 	sub.w	r7, ip, lr
 80262ec:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80262f0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80262f4:	b2a4      	uxth	r4, r4
 80262f6:	b2bf      	uxth	r7, r7
 80262f8:	1b1b      	subs	r3, r3, r4
 80262fa:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80262fe:	fb07 fc0a 	mul.w	ip, r7, sl
 8026302:	b29b      	uxth	r3, r3
 8026304:	fb03 cc0b 	mla	ip, r3, fp, ip
 8026308:	9300      	str	r3, [sp, #0]
 802630a:	fb04 cc09 	mla	ip, r4, r9, ip
 802630e:	fb0e cc08 	mla	ip, lr, r8, ip
 8026312:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8026316:	9301      	str	r3, [sp, #4]
 8026318:	2b00      	cmp	r3, #0
 802631a:	f000 80af 	beq.w	802647c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 802631e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8026322:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026326:	fb0b fc0c 	mul.w	ip, fp, ip
 802632a:	fb0b f606 	mul.w	r6, fp, r6
 802632e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026332:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026336:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802633a:	44dc      	add	ip, fp
 802633c:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8026340:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026344:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026348:	fb0a fb0b 	mul.w	fp, sl, fp
 802634c:	fb0a fa00 	mul.w	sl, sl, r0
 8026350:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8026354:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8026358:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802635c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8026360:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8026364:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026368:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802636c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026370:	0a36      	lsrs	r6, r6, #8
 8026372:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026376:	44dc      	add	ip, fp
 8026378:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802637c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026380:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026384:	fb09 fb0b 	mul.w	fp, r9, fp
 8026388:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802638c:	fb09 f905 	mul.w	r9, r9, r5
 8026390:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8026394:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026398:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802639c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80263a0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80263a4:	fb0c fc07 	mul.w	ip, ip, r7
 80263a8:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80263ac:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80263b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80263b4:	4458      	add	r0, fp
 80263b6:	fb08 f505 	mul.w	r5, r8, r5
 80263ba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80263be:	fb08 f802 	mul.w	r8, r8, r2
 80263c2:	0a00      	lsrs	r0, r0, #8
 80263c4:	0a2a      	lsrs	r2, r5, #8
 80263c6:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80263ca:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80263ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80263d2:	4415      	add	r5, r2
 80263d4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80263d8:	0a2d      	lsrs	r5, r5, #8
 80263da:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80263de:	9a00      	ldr	r2, [sp, #0]
 80263e0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80263e4:	fb03 cc02 	mla	ip, r3, r2, ip
 80263e8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80263ec:	9b01      	ldr	r3, [sp, #4]
 80263ee:	fb05 c50e 	mla	r5, r5, lr, ip
 80263f2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80263f6:	fb00 5004 	mla	r0, r0, r4, r5
 80263fa:	0a00      	lsrs	r0, r0, #8
 80263fc:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8026400:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8026404:	4378      	muls	r0, r7
 8026406:	fb02 0006 	mla	r0, r2, r6, r0
 802640a:	fb0e 0e08 	mla	lr, lr, r8, r0
 802640e:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8026412:	fb04 e000 	mla	r0, r4, r0, lr
 8026416:	0a00      	lsrs	r0, r0, #8
 8026418:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802641c:	4328      	orrs	r0, r5
 802641e:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8026422:	b2ad      	uxth	r5, r5
 8026424:	b2c4      	uxtb	r4, r0
 8026426:	436b      	muls	r3, r5
 8026428:	fb14 f405 	smulbb	r4, r4, r5
 802642c:	1c5a      	adds	r2, r3, #1
 802642e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026432:	780b      	ldrb	r3, [r1, #0]
 8026434:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8026438:	b2d2      	uxtb	r2, r2
 802643a:	fb03 4302 	mla	r3, r3, r2, r4
 802643e:	b29b      	uxth	r3, r3
 8026440:	1c5c      	adds	r4, r3, #1
 8026442:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8026446:	784c      	ldrb	r4, [r1, #1]
 8026448:	fb14 f402 	smulbb	r4, r4, r2
 802644c:	121b      	asrs	r3, r3, #8
 802644e:	700b      	strb	r3, [r1, #0]
 8026450:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8026454:	fb03 4305 	mla	r3, r3, r5, r4
 8026458:	b29b      	uxth	r3, r3
 802645a:	1c5c      	adds	r4, r3, #1
 802645c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8026460:	0c04      	lsrs	r4, r0, #16
 8026462:	7888      	ldrb	r0, [r1, #2]
 8026464:	121b      	asrs	r3, r3, #8
 8026466:	fb10 f002 	smulbb	r0, r0, r2
 802646a:	704b      	strb	r3, [r1, #1]
 802646c:	fb04 0005 	mla	r0, r4, r5, r0
 8026470:	b280      	uxth	r0, r0
 8026472:	1c43      	adds	r3, r0, #1
 8026474:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026478:	1200      	asrs	r0, r0, #8
 802647a:	7088      	strb	r0, [r1, #2]
 802647c:	b003      	add	sp, #12
 802647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026482:	2600      	movs	r6, #0
 8026484:	e6f3      	b.n	802626e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8026486:	2000      	movs	r0, #0
 8026488:	4606      	mov	r6, r0
 802648a:	e6fd      	b.n	8026288 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802648c:	2000      	movs	r0, #0
 802648e:	e6fb      	b.n	8026288 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8026490:	4620      	mov	r0, r4
 8026492:	e6f9      	b.n	8026288 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8026494:	2500      	movs	r5, #0
 8026496:	e70b      	b.n	80262b0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8026498:	2200      	movs	r2, #0
 802649a:	4615      	mov	r5, r2
 802649c:	e716      	b.n	80262cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802649e:	4672      	mov	r2, lr
 80264a0:	4675      	mov	r5, lr
 80264a2:	e713      	b.n	80262cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80264a4:	2200      	movs	r2, #0
 80264a6:	e711      	b.n	80262cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80264a8:	4622      	mov	r2, r4
 80264aa:	e70f      	b.n	80262cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

080264ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80264ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264b0:	b09f      	sub	sp, #124	; 0x7c
 80264b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80264b4:	9309      	str	r3, [sp, #36]	; 0x24
 80264b6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80264b8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80264bc:	901d      	str	r0, [sp, #116]	; 0x74
 80264be:	931c      	str	r3, [sp, #112]	; 0x70
 80264c0:	6850      	ldr	r0, [r2, #4]
 80264c2:	9119      	str	r1, [sp, #100]	; 0x64
 80264c4:	6812      	ldr	r2, [r2, #0]
 80264c6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80264c8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80264cc:	fb00 1303 	mla	r3, r0, r3, r1
 80264d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80264d4:	18d3      	adds	r3, r2, r3
 80264d6:	930c      	str	r3, [sp, #48]	; 0x30
 80264d8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80264da:	681b      	ldr	r3, [r3, #0]
 80264dc:	9312      	str	r3, [sp, #72]	; 0x48
 80264de:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80264e0:	685e      	ldr	r6, [r3, #4]
 80264e2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80264e6:	3604      	adds	r6, #4
 80264e8:	930d      	str	r3, [sp, #52]	; 0x34
 80264ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80264ec:	2b00      	cmp	r3, #0
 80264ee:	dc03      	bgt.n	80264f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80264f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80264f2:	2b00      	cmp	r3, #0
 80264f4:	f340 8378 	ble.w	8026be8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80264f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80264fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026502:	1e48      	subs	r0, r1, #1
 8026504:	1e57      	subs	r7, r2, #1
 8026506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026508:	2b00      	cmp	r3, #0
 802650a:	f340 818c 	ble.w	8026826 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802650e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026510:	142b      	asrs	r3, r5, #16
 8026512:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026516:	d406      	bmi.n	8026526 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026518:	4584      	cmp	ip, r0
 802651a:	da04      	bge.n	8026526 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802651c:	2b00      	cmp	r3, #0
 802651e:	db02      	blt.n	8026526 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026520:	42bb      	cmp	r3, r7
 8026522:	f2c0 8181 	blt.w	8026828 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026526:	f11c 0c01 	adds.w	ip, ip, #1
 802652a:	f100 816f 	bmi.w	802680c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802652e:	4561      	cmp	r1, ip
 8026530:	f2c0 816c 	blt.w	802680c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026534:	3301      	adds	r3, #1
 8026536:	f100 8169 	bmi.w	802680c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802653a:	429a      	cmp	r2, r3
 802653c:	f2c0 8166 	blt.w	802680c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026542:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8026544:	931a      	str	r3, [sp, #104]	; 0x68
 8026546:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026548:	2b00      	cmp	r3, #0
 802654a:	f340 818c 	ble.w	8026866 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802654e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026550:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026554:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026558:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802655c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802655e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8026562:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026564:	141b      	asrs	r3, r3, #16
 8026566:	f100 81d0 	bmi.w	802690a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802656a:	f100 38ff 	add.w	r8, r0, #4294967295
 802656e:	4543      	cmp	r3, r8
 8026570:	f280 81cb 	bge.w	802690a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026574:	f1bc 0f00 	cmp.w	ip, #0
 8026578:	f2c0 81c7 	blt.w	802690a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802657c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026580:	45c4      	cmp	ip, r8
 8026582:	f280 81c2 	bge.w	802690a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026586:	b200      	sxth	r0, r0
 8026588:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802658a:	fb0c 3300 	mla	r3, ip, r0, r3
 802658e:	eb04 0803 	add.w	r8, r4, r3
 8026592:	5ce3      	ldrb	r3, [r4, r3]
 8026594:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026598:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802659c:	2a00      	cmp	r2, #0
 802659e:	f000 81a9 	beq.w	80268f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80265a2:	f898 c001 	ldrb.w	ip, [r8, #1]
 80265a6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80265aa:	940e      	str	r4, [sp, #56]	; 0x38
 80265ac:	0e24      	lsrs	r4, r4, #24
 80265ae:	9415      	str	r4, [sp, #84]	; 0x54
 80265b0:	b179      	cbz	r1, 80265d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80265b2:	eb08 0c00 	add.w	ip, r8, r0
 80265b6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80265ba:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80265be:	900a      	str	r0, [sp, #40]	; 0x28
 80265c0:	0e00      	lsrs	r0, r0, #24
 80265c2:	9013      	str	r0, [sp, #76]	; 0x4c
 80265c4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80265c8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80265cc:	900f      	str	r0, [sp, #60]	; 0x3c
 80265ce:	0e00      	lsrs	r0, r0, #24
 80265d0:	9016      	str	r0, [sp, #88]	; 0x58
 80265d2:	b292      	uxth	r2, r2
 80265d4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80265d6:	b289      	uxth	r1, r1
 80265d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80265da:	fb02 f901 	mul.w	r9, r2, r1
 80265de:	0112      	lsls	r2, r2, #4
 80265e0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80265e4:	eba2 0809 	sub.w	r8, r2, r9
 80265e8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80265ec:	b289      	uxth	r1, r1
 80265ee:	fa1f f888 	uxth.w	r8, r8
 80265f2:	1a52      	subs	r2, r2, r1
 80265f4:	fb08 f000 	mul.w	r0, r8, r0
 80265f8:	b292      	uxth	r2, r2
 80265fa:	fb02 000e 	mla	r0, r2, lr, r0
 80265fe:	fb01 0004 	mla	r0, r1, r4, r0
 8026602:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026604:	fb09 0004 	mla	r0, r9, r4, r0
 8026608:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802660c:	2800      	cmp	r0, #0
 802660e:	f000 80f2 	beq.w	80267f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026612:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026616:	d01b      	beq.n	8026650 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8026618:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802661c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026620:	fb0e fa0a 	mul.w	sl, lr, sl
 8026624:	fb0e fe03 	mul.w	lr, lr, r3
 8026628:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802662c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026630:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026634:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026638:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802663c:	4453      	add	r3, sl
 802663e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026642:	0a1b      	lsrs	r3, r3, #8
 8026644:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026648:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802664c:	ea43 030c 	orr.w	r3, r3, ip
 8026650:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026652:	2cff      	cmp	r4, #255	; 0xff
 8026654:	d021      	beq.n	802669a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026656:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026658:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802665c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802665e:	fb04 fb0b 	mul.w	fp, r4, fp
 8026662:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026664:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026668:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802666a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802666e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026672:	fb04 fa0a 	mul.w	sl, r4, sl
 8026676:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802667a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802667e:	44de      	add	lr, fp
 8026680:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026684:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026688:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802668c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026690:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026694:	ea4e 040a 	orr.w	r4, lr, sl
 8026698:	940e      	str	r4, [sp, #56]	; 0x38
 802669a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802669c:	2cff      	cmp	r4, #255	; 0xff
 802669e:	d021      	beq.n	80266e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80266a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80266a2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80266a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80266a8:	fb04 fb0b 	mul.w	fp, r4, fp
 80266ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80266ae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80266b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80266b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80266b8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80266bc:	fb04 fa0a 	mul.w	sl, r4, sl
 80266c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266c4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80266c8:	44de      	add	lr, fp
 80266ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80266ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80266de:	ea4e 040a 	orr.w	r4, lr, sl
 80266e2:	940a      	str	r4, [sp, #40]	; 0x28
 80266e4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80266e6:	2cff      	cmp	r4, #255	; 0xff
 80266e8:	d021      	beq.n	802672e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80266ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80266ec:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80266f0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80266f2:	fb04 fb0b 	mul.w	fp, r4, fp
 80266f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80266f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80266fc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80266fe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026702:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026706:	fb04 fa0a 	mul.w	sl, r4, sl
 802670a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802670e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026712:	44de      	add	lr, fp
 8026714:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026718:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802671c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026720:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026724:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026728:	ea4e 040a 	orr.w	r4, lr, sl
 802672c:	940f      	str	r4, [sp, #60]	; 0x3c
 802672e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026730:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026738:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802673c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802673e:	fb08 fc0c 	mul.w	ip, r8, ip
 8026742:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026746:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802674a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802674c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026750:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026754:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026756:	fb09 cc0e 	mla	ip, r9, lr, ip
 802675a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802675e:	fb08 f80e 	mul.w	r8, r8, lr
 8026762:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026766:	fb02 8303 	mla	r3, r2, r3, r8
 802676a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802676c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026770:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026774:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026776:	fb01 330a 	mla	r3, r1, sl, r3
 802677a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802677e:	fb09 3901 	mla	r9, r9, r1, r3
 8026782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026784:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026786:	4343      	muls	r3, r0
 8026788:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802678c:	1c58      	adds	r0, r3, #1
 802678e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026792:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026796:	ea4c 0c09 	orr.w	ip, ip, r9
 802679a:	783b      	ldrb	r3, [r7, #0]
 802679c:	fa5f f28c 	uxtb.w	r2, ip
 80267a0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80267a4:	fb12 f201 	smulbb	r2, r2, r1
 80267a8:	b2c0      	uxtb	r0, r0
 80267aa:	fb03 2300 	mla	r3, r3, r0, r2
 80267ae:	b29b      	uxth	r3, r3
 80267b0:	1c5a      	adds	r2, r3, #1
 80267b2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80267b6:	787a      	ldrb	r2, [r7, #1]
 80267b8:	fb12 f200 	smulbb	r2, r2, r0
 80267bc:	121b      	asrs	r3, r3, #8
 80267be:	703b      	strb	r3, [r7, #0]
 80267c0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80267c4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80267c8:	fb03 2301 	mla	r3, r3, r1, r2
 80267cc:	b29b      	uxth	r3, r3
 80267ce:	1c5a      	adds	r2, r3, #1
 80267d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80267d4:	121b      	asrs	r3, r3, #8
 80267d6:	707b      	strb	r3, [r7, #1]
 80267d8:	78bb      	ldrb	r3, [r7, #2]
 80267da:	fb13 f000 	smulbb	r0, r3, r0
 80267de:	fb0c 0c01 	mla	ip, ip, r1, r0
 80267e2:	fa1f fc8c 	uxth.w	ip, ip
 80267e6:	f10c 0301 	add.w	r3, ip, #1
 80267ea:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80267ee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80267f2:	f887 c002 	strb.w	ip, [r7, #2]
 80267f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80267f8:	3703      	adds	r7, #3
 80267fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80267fc:	441a      	add	r2, r3
 80267fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026800:	441d      	add	r5, r3
 8026802:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026804:	9229      	str	r2, [sp, #164]	; 0xa4
 8026806:	3b01      	subs	r3, #1
 8026808:	931a      	str	r3, [sp, #104]	; 0x68
 802680a:	e69c      	b.n	8026546 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802680c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802680e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026810:	441c      	add	r4, r3
 8026812:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026814:	441d      	add	r5, r3
 8026816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026818:	9429      	str	r4, [sp, #164]	; 0xa4
 802681a:	3b01      	subs	r3, #1
 802681c:	9309      	str	r3, [sp, #36]	; 0x24
 802681e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026820:	3303      	adds	r3, #3
 8026822:	930c      	str	r3, [sp, #48]	; 0x30
 8026824:	e66f      	b.n	8026506 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8026826:	d026      	beq.n	8026876 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8026828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802682a:	982b      	ldr	r0, [sp, #172]	; 0xac
 802682c:	3b01      	subs	r3, #1
 802682e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026830:	fb00 4003 	mla	r0, r0, r3, r4
 8026834:	1400      	asrs	r0, r0, #16
 8026836:	f53f ae83 	bmi.w	8026540 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802683a:	3901      	subs	r1, #1
 802683c:	4288      	cmp	r0, r1
 802683e:	f6bf ae7f 	bge.w	8026540 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026842:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026844:	fb01 5303 	mla	r3, r1, r3, r5
 8026848:	141b      	asrs	r3, r3, #16
 802684a:	f53f ae79 	bmi.w	8026540 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802684e:	3a01      	subs	r2, #1
 8026850:	4293      	cmp	r3, r2
 8026852:	f6bf ae75 	bge.w	8026540 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026858:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802685c:	f103 0e03 	add.w	lr, r3, #3
 8026860:	f1bb 0f00 	cmp.w	fp, #0
 8026864:	dc71      	bgt.n	802694a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026868:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802686c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802686e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026872:	4423      	add	r3, r4
 8026874:	930c      	str	r3, [sp, #48]	; 0x30
 8026876:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026878:	2b00      	cmp	r3, #0
 802687a:	f340 81b5 	ble.w	8026be8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802687e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026882:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026884:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026888:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802688c:	eef0 6a62 	vmov.f32	s13, s5
 8026890:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026894:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026898:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802689c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80268a0:	eef0 6a43 	vmov.f32	s13, s6
 80268a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80268a8:	ee16 5a90 	vmov	r5, s13
 80268ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80268b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80268b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80268b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80268bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80268c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80268c4:	ee12 2a90 	vmov	r2, s5
 80268c8:	eef0 2a47 	vmov.f32	s5, s14
 80268cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80268d0:	ee13 2a10 	vmov	r2, s6
 80268d4:	932b      	str	r3, [sp, #172]	; 0xac
 80268d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80268d8:	eeb0 3a67 	vmov.f32	s6, s15
 80268dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80268e0:	932c      	str	r3, [sp, #176]	; 0xb0
 80268e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80268e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80268e6:	3b01      	subs	r3, #1
 80268e8:	9319      	str	r3, [sp, #100]	; 0x64
 80268ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80268ec:	bf08      	it	eq
 80268ee:	4613      	moveq	r3, r2
 80268f0:	9309      	str	r3, [sp, #36]	; 0x24
 80268f2:	e5fa      	b.n	80264ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80268f4:	2900      	cmp	r1, #0
 80268f6:	f43f ae6c 	beq.w	80265d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80268fa:	f818 0000 	ldrb.w	r0, [r8, r0]
 80268fe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026902:	900a      	str	r0, [sp, #40]	; 0x28
 8026904:	0e00      	lsrs	r0, r0, #24
 8026906:	9013      	str	r0, [sp, #76]	; 0x4c
 8026908:	e663      	b.n	80265d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802690a:	f113 0801 	adds.w	r8, r3, #1
 802690e:	f53f af72 	bmi.w	80267f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026912:	4540      	cmp	r0, r8
 8026914:	f6ff af6f 	blt.w	80267f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026918:	f11c 0801 	adds.w	r8, ip, #1
 802691c:	f53f af6b 	bmi.w	80267f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026920:	45c6      	cmp	lr, r8
 8026922:	f6ff af68 	blt.w	80267f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026926:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026928:	b200      	sxth	r0, r0
 802692a:	9302      	str	r3, [sp, #8]
 802692c:	fa0f f38e 	sxth.w	r3, lr
 8026930:	9000      	str	r0, [sp, #0]
 8026932:	9301      	str	r3, [sp, #4]
 8026934:	4633      	mov	r3, r6
 8026936:	981d      	ldr	r0, [sp, #116]	; 0x74
 8026938:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802693c:	e9cd c203 	strd	ip, r2, [sp, #12]
 8026940:	4639      	mov	r1, r7
 8026942:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026944:	f7ff fc74 	bl	8026230 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8026948:	e755      	b.n	80267f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802694a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802694c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026950:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026952:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026956:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026958:	1427      	asrs	r7, r4, #16
 802695a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802695c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026960:	142b      	asrs	r3, r5, #16
 8026962:	fb01 7303 	mla	r3, r1, r3, r7
 8026966:	18e7      	adds	r7, r4, r3
 8026968:	5ce3      	ldrb	r3, [r4, r3]
 802696a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802696e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026972:	2a00      	cmp	r2, #0
 8026974:	f000 812e 	beq.w	8026bd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8026978:	f897 8001 	ldrb.w	r8, [r7, #1]
 802697c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8026980:	9410      	str	r4, [sp, #64]	; 0x40
 8026982:	0e24      	lsrs	r4, r4, #24
 8026984:	9417      	str	r4, [sp, #92]	; 0x5c
 8026986:	b170      	cbz	r0, 80269a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8026988:	eb07 0801 	add.w	r8, r7, r1
 802698c:	5c79      	ldrb	r1, [r7, r1]
 802698e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026992:	910b      	str	r1, [sp, #44]	; 0x2c
 8026994:	0e09      	lsrs	r1, r1, #24
 8026996:	9114      	str	r1, [sp, #80]	; 0x50
 8026998:	f898 1001 	ldrb.w	r1, [r8, #1]
 802699c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80269a0:	9111      	str	r1, [sp, #68]	; 0x44
 80269a2:	0e09      	lsrs	r1, r1, #24
 80269a4:	9118      	str	r1, [sp, #96]	; 0x60
 80269a6:	b292      	uxth	r2, r2
 80269a8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80269aa:	b280      	uxth	r0, r0
 80269ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80269ae:	fb02 f900 	mul.w	r9, r2, r0
 80269b2:	0112      	lsls	r2, r2, #4
 80269b4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80269b8:	eba2 0809 	sub.w	r8, r2, r9
 80269bc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80269c0:	b280      	uxth	r0, r0
 80269c2:	fa1f f888 	uxth.w	r8, r8
 80269c6:	1a12      	subs	r2, r2, r0
 80269c8:	fb08 f101 	mul.w	r1, r8, r1
 80269cc:	b292      	uxth	r2, r2
 80269ce:	fb02 110c 	mla	r1, r2, ip, r1
 80269d2:	fb00 1104 	mla	r1, r0, r4, r1
 80269d6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80269d8:	fb09 1104 	mla	r1, r9, r4, r1
 80269dc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80269e0:	2900      	cmp	r1, #0
 80269e2:	f000 80ec 	beq.w	8026bbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80269e6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80269ea:	d019      	beq.n	8026a20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80269ec:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80269f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80269f4:	fb0c fa0a 	mul.w	sl, ip, sl
 80269f8:	fb0c fc03 	mul.w	ip, ip, r3
 80269fc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026a00:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026a04:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026a08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026a0c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026a10:	4453      	add	r3, sl
 8026a12:	0a3f      	lsrs	r7, r7, #8
 8026a14:	0a1b      	lsrs	r3, r3, #8
 8026a16:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026a1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026a1e:	433b      	orrs	r3, r7
 8026a20:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026a22:	2cff      	cmp	r4, #255	; 0xff
 8026a24:	d020      	beq.n	8026a68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8026a26:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026a28:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026a2c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026a2e:	4367      	muls	r7, r4
 8026a30:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026a32:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a36:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026a3a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026a3c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a44:	fb04 fa0a 	mul.w	sl, r4, sl
 8026a48:	44bc      	add	ip, r7
 8026a4a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026a4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a52:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a5a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a62:	ea4c 040a 	orr.w	r4, ip, sl
 8026a66:	9410      	str	r4, [sp, #64]	; 0x40
 8026a68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a6a:	2cff      	cmp	r4, #255	; 0xff
 8026a6c:	d020      	beq.n	8026ab0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8026a6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026a70:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026a74:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a76:	4367      	muls	r7, r4
 8026a78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026a7a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a7e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026a82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a84:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a8c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026a90:	44bc      	add	ip, r7
 8026a92:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026a96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a9a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026aa2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026aa6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026aaa:	ea4c 040a 	orr.w	r4, ip, sl
 8026aae:	940b      	str	r4, [sp, #44]	; 0x2c
 8026ab0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026ab2:	2cff      	cmp	r4, #255	; 0xff
 8026ab4:	d020      	beq.n	8026af8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8026ab6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026ab8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026abc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026abe:	4367      	muls	r7, r4
 8026ac0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026ac2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026ac6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026aca:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026acc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026ad0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ad4:	fb04 fa0a 	mul.w	sl, r4, sl
 8026ad8:	44bc      	add	ip, r7
 8026ada:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026ade:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ae2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026ae6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026aea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026aee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026af2:	ea4c 040a 	orr.w	r4, ip, sl
 8026af6:	9411      	str	r4, [sp, #68]	; 0x44
 8026af8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026afa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026afe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026b02:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026b06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026b08:	fb08 f707 	mul.w	r7, r8, r7
 8026b0c:	fb02 770c 	mla	r7, r2, ip, r7
 8026b10:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026b14:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026b16:	fb00 770c 	mla	r7, r0, ip, r7
 8026b1a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026b1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026b20:	fb09 770c 	mla	r7, r9, ip, r7
 8026b24:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026b28:	fb08 f80c 	mul.w	r8, r8, ip
 8026b2c:	0a3f      	lsrs	r7, r7, #8
 8026b2e:	fb02 8303 	mla	r3, r2, r3, r8
 8026b32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026b34:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026b38:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026b3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026b3e:	fb00 330a 	mla	r3, r0, sl, r3
 8026b42:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026b46:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026b48:	fb09 3c0c 	mla	ip, r9, ip, r3
 8026b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026b4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b52:	434b      	muls	r3, r1
 8026b54:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026b58:	1c59      	adds	r1, r3, #1
 8026b5a:	ea47 070c 	orr.w	r7, r7, ip
 8026b5e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026b62:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026b66:	b2fa      	uxtb	r2, r7
 8026b68:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026b6c:	fb12 f200 	smulbb	r2, r2, r0
 8026b70:	b2c9      	uxtb	r1, r1
 8026b72:	fb03 2301 	mla	r3, r3, r1, r2
 8026b76:	b29b      	uxth	r3, r3
 8026b78:	1c5a      	adds	r2, r3, #1
 8026b7a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026b7e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026b82:	fb12 f201 	smulbb	r2, r2, r1
 8026b86:	121b      	asrs	r3, r3, #8
 8026b88:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8026b8c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8026b90:	0c3f      	lsrs	r7, r7, #16
 8026b92:	fb03 2300 	mla	r3, r3, r0, r2
 8026b96:	b29b      	uxth	r3, r3
 8026b98:	1c5a      	adds	r2, r3, #1
 8026b9a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026b9e:	121b      	asrs	r3, r3, #8
 8026ba0:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8026ba4:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8026ba8:	fb13 f101 	smulbb	r1, r3, r1
 8026bac:	fb07 1700 	mla	r7, r7, r0, r1
 8026bb0:	b2bf      	uxth	r7, r7
 8026bb2:	1c7b      	adds	r3, r7, #1
 8026bb4:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8026bb8:	123f      	asrs	r7, r7, #8
 8026bba:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8026bbe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026bc0:	f10e 0e03 	add.w	lr, lr, #3
 8026bc4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026bc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026bca:	441a      	add	r2, r3
 8026bcc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026bce:	9229      	str	r2, [sp, #164]	; 0xa4
 8026bd0:	441d      	add	r5, r3
 8026bd2:	e645      	b.n	8026860 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8026bd4:	2800      	cmp	r0, #0
 8026bd6:	f43f aee6 	beq.w	80269a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8026bda:	5c79      	ldrb	r1, [r7, r1]
 8026bdc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026be0:	910b      	str	r1, [sp, #44]	; 0x2c
 8026be2:	0e09      	lsrs	r1, r1, #24
 8026be4:	9114      	str	r1, [sp, #80]	; 0x50
 8026be6:	e6de      	b.n	80269a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8026be8:	b01f      	add	sp, #124	; 0x7c
 8026bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026bee <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8026bee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bf2:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8026bf6:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8026bfa:	2d00      	cmp	r5, #0
 8026bfc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8026c00:	fb05 700e 	mla	r0, r5, lr, r7
 8026c04:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8026c08:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8026c0c:	eb02 0800 	add.w	r8, r2, r0
 8026c10:	f2c0 8105 	blt.w	8026e1e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8026c14:	45a9      	cmp	r9, r5
 8026c16:	f340 8102 	ble.w	8026e1e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8026c1a:	2f00      	cmp	r7, #0
 8026c1c:	f2c0 80fd 	blt.w	8026e1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8026c20:	45be      	cmp	lr, r7
 8026c22:	f340 80fa 	ble.w	8026e1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8026c26:	5c12      	ldrb	r2, [r2, r0]
 8026c28:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8026c2c:	1c7a      	adds	r2, r7, #1
 8026c2e:	f100 80f9 	bmi.w	8026e24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8026c32:	4596      	cmp	lr, r2
 8026c34:	f340 80f6 	ble.w	8026e24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8026c38:	2c00      	cmp	r4, #0
 8026c3a:	f000 80f5 	beq.w	8026e28 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8026c3e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8026c42:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8026c46:	3501      	adds	r5, #1
 8026c48:	f100 80f2 	bmi.w	8026e30 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8026c4c:	45a9      	cmp	r9, r5
 8026c4e:	f340 80ef 	ble.w	8026e30 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8026c52:	f1bc 0f00 	cmp.w	ip, #0
 8026c56:	f000 80ee 	beq.w	8026e36 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8026c5a:	2f00      	cmp	r7, #0
 8026c5c:	f2c0 80e6 	blt.w	8026e2c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8026c60:	45be      	cmp	lr, r7
 8026c62:	f340 80e3 	ble.w	8026e2c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8026c66:	f818 200e 	ldrb.w	r2, [r8, lr]
 8026c6a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8026c6e:	3701      	adds	r7, #1
 8026c70:	f100 80e4 	bmi.w	8026e3c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8026c74:	45be      	cmp	lr, r7
 8026c76:	f340 80e1 	ble.w	8026e3c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8026c7a:	2c00      	cmp	r4, #0
 8026c7c:	f000 80e0 	beq.w	8026e40 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8026c80:	44c6      	add	lr, r8
 8026c82:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026c86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026c8a:	b2a3      	uxth	r3, r4
 8026c8c:	fa1f fc8c 	uxth.w	ip, ip
 8026c90:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8026c94:	fb0c fe03 	mul.w	lr, ip, r3
 8026c98:	011b      	lsls	r3, r3, #4
 8026c9a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8026c9e:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8026ca2:	eba3 070e 	sub.w	r7, r3, lr
 8026ca6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026caa:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8026cae:	fa1f f48c 	uxth.w	r4, ip
 8026cb2:	b2bf      	uxth	r7, r7
 8026cb4:	1b1b      	subs	r3, r3, r4
 8026cb6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026cba:	fb07 fc0a 	mul.w	ip, r7, sl
 8026cbe:	b29b      	uxth	r3, r3
 8026cc0:	fb03 cc0b 	mla	ip, r3, fp, ip
 8026cc4:	9300      	str	r3, [sp, #0]
 8026cc6:	fb04 cc09 	mla	ip, r4, r9, ip
 8026cca:	fb0e cc08 	mla	ip, lr, r8, ip
 8026cce:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8026cd2:	9301      	str	r3, [sp, #4]
 8026cd4:	2b00      	cmp	r3, #0
 8026cd6:	f000 809d 	beq.w	8026e14 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8026cda:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8026cde:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026ce2:	fb0b fc0c 	mul.w	ip, fp, ip
 8026ce6:	fb0b f606 	mul.w	r6, fp, r6
 8026cea:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026cee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026cf2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8026cf6:	44dc      	add	ip, fp
 8026cf8:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8026cfc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d04:	fb0a fb0b 	mul.w	fp, sl, fp
 8026d08:	fb0a fa00 	mul.w	sl, sl, r0
 8026d0c:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8026d10:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8026d14:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026d18:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8026d1c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8026d20:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026d24:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026d28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026d2c:	0a36      	lsrs	r6, r6, #8
 8026d2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026d32:	44dc      	add	ip, fp
 8026d34:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026d38:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026d3c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026d40:	fb09 fb0b 	mul.w	fp, r9, fp
 8026d44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d48:	fb09 f905 	mul.w	r9, r9, r5
 8026d4c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8026d50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026d54:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8026d58:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026d5c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026d60:	fb0c fc07 	mul.w	ip, ip, r7
 8026d64:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8026d68:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8026d6c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026d70:	4458      	add	r0, fp
 8026d72:	fb08 f505 	mul.w	r5, r8, r5
 8026d76:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026d7a:	fb08 f802 	mul.w	r8, r8, r2
 8026d7e:	0a00      	lsrs	r0, r0, #8
 8026d80:	0a2a      	lsrs	r2, r5, #8
 8026d82:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8026d86:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026d8a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026d8e:	4415      	add	r5, r2
 8026d90:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8026d94:	0a2d      	lsrs	r5, r5, #8
 8026d96:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026d9a:	9a00      	ldr	r2, [sp, #0]
 8026d9c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026da0:	fb03 cc02 	mla	ip, r3, r2, ip
 8026da4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026da8:	9b01      	ldr	r3, [sp, #4]
 8026daa:	fb05 c50e 	mla	r5, r5, lr, ip
 8026dae:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026db2:	43db      	mvns	r3, r3
 8026db4:	fb00 5004 	mla	r0, r0, r4, r5
 8026db8:	b2db      	uxtb	r3, r3
 8026dba:	0a00      	lsrs	r0, r0, #8
 8026dbc:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8026dc0:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8026dc4:	4378      	muls	r0, r7
 8026dc6:	fb02 0006 	mla	r0, r2, r6, r0
 8026dca:	780a      	ldrb	r2, [r1, #0]
 8026dcc:	fb0e 0e08 	mla	lr, lr, r8, r0
 8026dd0:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8026dd4:	fb04 e000 	mla	r0, r4, r0, lr
 8026dd8:	fb02 f403 	mul.w	r4, r2, r3
 8026ddc:	0a00      	lsrs	r0, r0, #8
 8026dde:	1c62      	adds	r2, r4, #1
 8026de0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026de4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026de8:	4328      	orrs	r0, r5
 8026dea:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026dee:	700a      	strb	r2, [r1, #0]
 8026df0:	784a      	ldrb	r2, [r1, #1]
 8026df2:	435a      	muls	r2, r3
 8026df4:	1c54      	adds	r4, r2, #1
 8026df6:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8026dfa:	0a02      	lsrs	r2, r0, #8
 8026dfc:	0c00      	lsrs	r0, r0, #16
 8026dfe:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026e02:	704a      	strb	r2, [r1, #1]
 8026e04:	788a      	ldrb	r2, [r1, #2]
 8026e06:	4353      	muls	r3, r2
 8026e08:	1c5a      	adds	r2, r3, #1
 8026e0a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026e0e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026e12:	7088      	strb	r0, [r1, #2]
 8026e14:	b003      	add	sp, #12
 8026e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e1a:	2600      	movs	r6, #0
 8026e1c:	e706      	b.n	8026c2c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8026e1e:	2000      	movs	r0, #0
 8026e20:	4606      	mov	r6, r0
 8026e22:	e710      	b.n	8026c46 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8026e24:	2000      	movs	r0, #0
 8026e26:	e70e      	b.n	8026c46 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8026e28:	4620      	mov	r0, r4
 8026e2a:	e70c      	b.n	8026c46 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8026e2c:	2500      	movs	r5, #0
 8026e2e:	e71e      	b.n	8026c6e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8026e30:	2200      	movs	r2, #0
 8026e32:	4615      	mov	r5, r2
 8026e34:	e729      	b.n	8026c8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8026e36:	4662      	mov	r2, ip
 8026e38:	4665      	mov	r5, ip
 8026e3a:	e726      	b.n	8026c8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8026e3c:	2200      	movs	r2, #0
 8026e3e:	e724      	b.n	8026c8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8026e40:	4622      	mov	r2, r4
 8026e42:	e722      	b.n	8026c8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08026e44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e48:	b09b      	sub	sp, #108	; 0x6c
 8026e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026e4e:	9218      	str	r2, [sp, #96]	; 0x60
 8026e50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026e52:	9019      	str	r0, [sp, #100]	; 0x64
 8026e54:	9116      	str	r1, [sp, #88]	; 0x58
 8026e56:	6850      	ldr	r0, [r2, #4]
 8026e58:	9307      	str	r3, [sp, #28]
 8026e5a:	6812      	ldr	r2, [r2, #0]
 8026e5c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8026e5e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026e62:	fb00 1303 	mla	r3, r0, r3, r1
 8026e66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026e6a:	18d3      	adds	r3, r2, r3
 8026e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8026e6e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026e70:	681b      	ldr	r3, [r3, #0]
 8026e72:	930f      	str	r3, [sp, #60]	; 0x3c
 8026e74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026e76:	685e      	ldr	r6, [r3, #4]
 8026e78:	3604      	adds	r6, #4
 8026e7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026e7c:	2b00      	cmp	r3, #0
 8026e7e:	dc03      	bgt.n	8026e88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8026e80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026e82:	2b00      	cmp	r3, #0
 8026e84:	f340 834f 	ble.w	8027526 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8026e88:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026e8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026e8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026e92:	1e48      	subs	r0, r1, #1
 8026e94:	1e57      	subs	r7, r2, #1
 8026e96:	9b07      	ldr	r3, [sp, #28]
 8026e98:	2b00      	cmp	r3, #0
 8026e9a:	f340 8178 	ble.w	802718e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026e9e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026ea0:	142b      	asrs	r3, r5, #16
 8026ea2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026ea6:	d406      	bmi.n	8026eb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026ea8:	4584      	cmp	ip, r0
 8026eaa:	da04      	bge.n	8026eb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026eac:	2b00      	cmp	r3, #0
 8026eae:	db02      	blt.n	8026eb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026eb0:	42bb      	cmp	r3, r7
 8026eb2:	f2c0 816d 	blt.w	8027190 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8026eb6:	f11c 0c01 	adds.w	ip, ip, #1
 8026eba:	f100 815b 	bmi.w	8027174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8026ebe:	4561      	cmp	r1, ip
 8026ec0:	f2c0 8158 	blt.w	8027174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8026ec4:	3301      	adds	r3, #1
 8026ec6:	f100 8155 	bmi.w	8027174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8026eca:	429a      	cmp	r2, r3
 8026ecc:	f2c0 8152 	blt.w	8027174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8026ed0:	9b07      	ldr	r3, [sp, #28]
 8026ed2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026ed4:	9317      	str	r3, [sp, #92]	; 0x5c
 8026ed6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026ed8:	2b00      	cmp	r3, #0
 8026eda:	f340 8178 	ble.w	80271ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026ede:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026ee0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026ee4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026ee8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026eec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026eee:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8026ef2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026ef4:	141b      	asrs	r3, r3, #16
 8026ef6:	f100 81ba 	bmi.w	802726e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026efa:	f101 38ff 	add.w	r8, r1, #4294967295
 8026efe:	4543      	cmp	r3, r8
 8026f00:	f280 81b5 	bge.w	802726e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026f04:	f1bc 0f00 	cmp.w	ip, #0
 8026f08:	f2c0 81b1 	blt.w	802726e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026f0c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026f10:	45c4      	cmp	ip, r8
 8026f12:	f280 81ac 	bge.w	802726e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026f16:	b209      	sxth	r1, r1
 8026f18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026f1a:	fb0c 3301 	mla	r3, ip, r1, r3
 8026f1e:	eb04 0803 	add.w	r8, r4, r3
 8026f22:	5ce3      	ldrb	r3, [r4, r3]
 8026f24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026f28:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026f2c:	2a00      	cmp	r2, #0
 8026f2e:	f000 8193 	beq.w	8027258 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8026f32:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026f36:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026f3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8026f3c:	0e24      	lsrs	r4, r4, #24
 8026f3e:	9412      	str	r4, [sp, #72]	; 0x48
 8026f40:	b178      	cbz	r0, 8026f62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8026f42:	eb08 0c01 	add.w	ip, r8, r1
 8026f46:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026f4a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026f4e:	9108      	str	r1, [sp, #32]
 8026f50:	0e09      	lsrs	r1, r1, #24
 8026f52:	9110      	str	r1, [sp, #64]	; 0x40
 8026f54:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026f58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026f5c:	910c      	str	r1, [sp, #48]	; 0x30
 8026f5e:	0e09      	lsrs	r1, r1, #24
 8026f60:	9113      	str	r1, [sp, #76]	; 0x4c
 8026f62:	b292      	uxth	r2, r2
 8026f64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026f66:	b280      	uxth	r0, r0
 8026f68:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026f6a:	fb02 f900 	mul.w	r9, r2, r0
 8026f6e:	0112      	lsls	r2, r2, #4
 8026f70:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026f74:	eba2 0809 	sub.w	r8, r2, r9
 8026f78:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026f7c:	b280      	uxth	r0, r0
 8026f7e:	fa1f f888 	uxth.w	r8, r8
 8026f82:	1a12      	subs	r2, r2, r0
 8026f84:	fb08 f101 	mul.w	r1, r8, r1
 8026f88:	b292      	uxth	r2, r2
 8026f8a:	fb02 110e 	mla	r1, r2, lr, r1
 8026f8e:	fb00 1104 	mla	r1, r0, r4, r1
 8026f92:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026f94:	fb09 1104 	mla	r1, r9, r4, r1
 8026f98:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026f9c:	2900      	cmp	r1, #0
 8026f9e:	f000 80de 	beq.w	802715e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026fa2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026fa6:	d01b      	beq.n	8026fe0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8026fa8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026fac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026fb0:	fb0e fa0a 	mul.w	sl, lr, sl
 8026fb4:	fb0e fe03 	mul.w	lr, lr, r3
 8026fb8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026fbc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026fc0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026fc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026fc8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026fcc:	4453      	add	r3, sl
 8026fce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026fd2:	0a1b      	lsrs	r3, r3, #8
 8026fd4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026fd8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026fdc:	ea43 030c 	orr.w	r3, r3, ip
 8026fe0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026fe2:	2cff      	cmp	r4, #255	; 0xff
 8026fe4:	d021      	beq.n	802702a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026fe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026fe8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026fec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026fee:	fb04 fb0b 	mul.w	fp, r4, fp
 8026ff2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ff4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026ff8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026ffa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026ffe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027002:	fb04 fa0a 	mul.w	sl, r4, sl
 8027006:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802700a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802700e:	44de      	add	lr, fp
 8027010:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027014:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027018:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802701c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027020:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027024:	ea4e 040a 	orr.w	r4, lr, sl
 8027028:	940b      	str	r4, [sp, #44]	; 0x2c
 802702a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802702c:	2cff      	cmp	r4, #255	; 0xff
 802702e:	d021      	beq.n	8027074 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027030:	9c08      	ldr	r4, [sp, #32]
 8027032:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027036:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027038:	fb04 fb0b 	mul.w	fp, r4, fp
 802703c:	9c08      	ldr	r4, [sp, #32]
 802703e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027042:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027044:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027048:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802704c:	fb04 fa0a 	mul.w	sl, r4, sl
 8027050:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027054:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027058:	44de      	add	lr, fp
 802705a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802705e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027062:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027066:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802706a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802706e:	ea4e 040a 	orr.w	r4, lr, sl
 8027072:	9408      	str	r4, [sp, #32]
 8027074:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027076:	2cff      	cmp	r4, #255	; 0xff
 8027078:	d021      	beq.n	80270be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802707a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802707c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027080:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027082:	fb04 fb0b 	mul.w	fp, r4, fp
 8027086:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027088:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802708c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802708e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027092:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027096:	fb04 fa0a 	mul.w	sl, r4, sl
 802709a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802709e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80270a2:	44de      	add	lr, fp
 80270a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80270a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80270b8:	ea4e 040a 	orr.w	r4, lr, sl
 80270bc:	940c      	str	r4, [sp, #48]	; 0x30
 80270be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80270c0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80270c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80270c8:	43c9      	mvns	r1, r1
 80270ca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80270ce:	9c08      	ldr	r4, [sp, #32]
 80270d0:	b2c9      	uxtb	r1, r1
 80270d2:	fb08 fc0c 	mul.w	ip, r8, ip
 80270d6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80270da:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80270de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80270e0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80270e4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80270e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80270ea:	fb09 cc0e 	mla	ip, r9, lr, ip
 80270ee:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80270f2:	fb08 f80e 	mul.w	r8, r8, lr
 80270f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80270fa:	fb02 8303 	mla	r3, r2, r3, r8
 80270fe:	9a08      	ldr	r2, [sp, #32]
 8027100:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027104:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802710a:	fb00 330a 	mla	r3, r0, sl, r3
 802710e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8027112:	fb09 3900 	mla	r9, r9, r0, r3
 8027116:	783b      	ldrb	r3, [r7, #0]
 8027118:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802711c:	fb03 f201 	mul.w	r2, r3, r1
 8027120:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027124:	1c53      	adds	r3, r2, #1
 8027126:	ea4c 0c09 	orr.w	ip, ip, r9
 802712a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802712e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8027132:	703b      	strb	r3, [r7, #0]
 8027134:	787b      	ldrb	r3, [r7, #1]
 8027136:	434b      	muls	r3, r1
 8027138:	1c5a      	adds	r2, r3, #1
 802713a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802713e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027142:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8027146:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802714a:	707b      	strb	r3, [r7, #1]
 802714c:	78bb      	ldrb	r3, [r7, #2]
 802714e:	4359      	muls	r1, r3
 8027150:	1c4b      	adds	r3, r1, #1
 8027152:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027156:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802715a:	f887 c002 	strb.w	ip, [r7, #2]
 802715e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027160:	3703      	adds	r7, #3
 8027162:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027164:	441a      	add	r2, r3
 8027166:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027168:	441d      	add	r5, r3
 802716a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802716c:	9225      	str	r2, [sp, #148]	; 0x94
 802716e:	3b01      	subs	r3, #1
 8027170:	9317      	str	r3, [sp, #92]	; 0x5c
 8027172:	e6b0      	b.n	8026ed6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027174:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027176:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8027178:	441c      	add	r4, r3
 802717a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802717c:	441d      	add	r5, r3
 802717e:	9b07      	ldr	r3, [sp, #28]
 8027180:	9425      	str	r4, [sp, #148]	; 0x94
 8027182:	3b01      	subs	r3, #1
 8027184:	9307      	str	r3, [sp, #28]
 8027186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027188:	3303      	adds	r3, #3
 802718a:	930a      	str	r3, [sp, #40]	; 0x28
 802718c:	e683      	b.n	8026e96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802718e:	d026      	beq.n	80271de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8027190:	9b07      	ldr	r3, [sp, #28]
 8027192:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027194:	3b01      	subs	r3, #1
 8027196:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8027198:	fb00 4003 	mla	r0, r0, r3, r4
 802719c:	1400      	asrs	r0, r0, #16
 802719e:	f53f ae97 	bmi.w	8026ed0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80271a2:	3901      	subs	r1, #1
 80271a4:	4288      	cmp	r0, r1
 80271a6:	f6bf ae93 	bge.w	8026ed0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80271aa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80271ac:	fb01 5303 	mla	r3, r1, r3, r5
 80271b0:	141b      	asrs	r3, r3, #16
 80271b2:	f53f ae8d 	bmi.w	8026ed0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80271b6:	3a01      	subs	r2, #1
 80271b8:	4293      	cmp	r3, r2
 80271ba:	f6bf ae89 	bge.w	8026ed0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80271be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80271c0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80271c4:	f103 0e03 	add.w	lr, r3, #3
 80271c8:	f1bb 0f00 	cmp.w	fp, #0
 80271cc:	dc6d      	bgt.n	80272aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80271ce:	9b07      	ldr	r3, [sp, #28]
 80271d0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80271d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80271d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80271da:	4423      	add	r3, r4
 80271dc:	930a      	str	r3, [sp, #40]	; 0x28
 80271de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80271e0:	2b00      	cmp	r3, #0
 80271e2:	f340 81a0 	ble.w	8027526 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80271e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80271ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80271ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80271f0:	eeb0 6a62 	vmov.f32	s12, s5
 80271f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80271f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80271fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8027200:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8027204:	eeb0 6a43 	vmov.f32	s12, s6
 8027208:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802720c:	ee16 5a10 	vmov	r5, s12
 8027210:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027214:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027218:	ee77 2a62 	vsub.f32	s5, s14, s5
 802721c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027220:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027224:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027228:	ee12 2a90 	vmov	r2, s5
 802722c:	eef0 2a47 	vmov.f32	s5, s14
 8027230:	fb92 f3f3 	sdiv	r3, r2, r3
 8027234:	ee13 2a10 	vmov	r2, s6
 8027238:	9327      	str	r3, [sp, #156]	; 0x9c
 802723a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802723c:	eeb0 3a67 	vmov.f32	s6, s15
 8027240:	fb92 f3f3 	sdiv	r3, r2, r3
 8027244:	9328      	str	r3, [sp, #160]	; 0xa0
 8027246:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027248:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802724a:	3b01      	subs	r3, #1
 802724c:	9316      	str	r3, [sp, #88]	; 0x58
 802724e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027250:	bf08      	it	eq
 8027252:	4613      	moveq	r3, r2
 8027254:	9307      	str	r3, [sp, #28]
 8027256:	e610      	b.n	8026e7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8027258:	2800      	cmp	r0, #0
 802725a:	f43f ae82 	beq.w	8026f62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802725e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027262:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027266:	9108      	str	r1, [sp, #32]
 8027268:	0e09      	lsrs	r1, r1, #24
 802726a:	9110      	str	r1, [sp, #64]	; 0x40
 802726c:	e679      	b.n	8026f62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802726e:	f113 0801 	adds.w	r8, r3, #1
 8027272:	f53f af74 	bmi.w	802715e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027276:	4541      	cmp	r1, r8
 8027278:	f6ff af71 	blt.w	802715e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802727c:	f11c 0801 	adds.w	r8, ip, #1
 8027280:	f53f af6d 	bmi.w	802715e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027284:	45c6      	cmp	lr, r8
 8027286:	f6ff af6a 	blt.w	802715e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802728a:	b209      	sxth	r1, r1
 802728c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8027290:	fa0f f38e 	sxth.w	r3, lr
 8027294:	9100      	str	r1, [sp, #0]
 8027296:	4639      	mov	r1, r7
 8027298:	9301      	str	r3, [sp, #4]
 802729a:	4633      	mov	r3, r6
 802729c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80272a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80272a2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80272a4:	f7ff fca3 	bl	8026bee <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80272a8:	e759      	b.n	802715e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80272aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80272ac:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80272b0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80272b2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80272b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80272b8:	1427      	asrs	r7, r4, #16
 80272ba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80272bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80272c0:	142b      	asrs	r3, r5, #16
 80272c2:	fb01 7303 	mla	r3, r1, r3, r7
 80272c6:	18e7      	adds	r7, r4, r3
 80272c8:	5ce3      	ldrb	r3, [r4, r3]
 80272ca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80272ce:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80272d2:	2a00      	cmp	r2, #0
 80272d4:	f000 811d 	beq.w	8027512 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 80272d8:	f897 8001 	ldrb.w	r8, [r7, #1]
 80272dc:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80272e0:	940d      	str	r4, [sp, #52]	; 0x34
 80272e2:	0e24      	lsrs	r4, r4, #24
 80272e4:	9414      	str	r4, [sp, #80]	; 0x50
 80272e6:	b170      	cbz	r0, 8027306 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80272e8:	eb07 0801 	add.w	r8, r7, r1
 80272ec:	5c79      	ldrb	r1, [r7, r1]
 80272ee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80272f2:	9109      	str	r1, [sp, #36]	; 0x24
 80272f4:	0e09      	lsrs	r1, r1, #24
 80272f6:	9111      	str	r1, [sp, #68]	; 0x44
 80272f8:	f898 1001 	ldrb.w	r1, [r8, #1]
 80272fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027300:	910e      	str	r1, [sp, #56]	; 0x38
 8027302:	0e09      	lsrs	r1, r1, #24
 8027304:	9115      	str	r1, [sp, #84]	; 0x54
 8027306:	b292      	uxth	r2, r2
 8027308:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802730a:	b280      	uxth	r0, r0
 802730c:	fb02 f900 	mul.w	r9, r2, r0
 8027310:	0112      	lsls	r2, r2, #4
 8027312:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027316:	eba2 0809 	sub.w	r8, r2, r9
 802731a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802731e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027320:	b280      	uxth	r0, r0
 8027322:	fa1f f888 	uxth.w	r8, r8
 8027326:	1a09      	subs	r1, r1, r0
 8027328:	fb08 f202 	mul.w	r2, r8, r2
 802732c:	b289      	uxth	r1, r1
 802732e:	fb01 220c 	mla	r2, r1, ip, r2
 8027332:	fb00 2204 	mla	r2, r0, r4, r2
 8027336:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027338:	fb09 2204 	mla	r2, r9, r4, r2
 802733c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027340:	2a00      	cmp	r2, #0
 8027342:	f000 80db 	beq.w	80274fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027346:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802734a:	d019      	beq.n	8027380 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 802734c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027350:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027354:	fb0c fa0a 	mul.w	sl, ip, sl
 8027358:	fb0c fc03 	mul.w	ip, ip, r3
 802735c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027360:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027364:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027368:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802736c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027370:	4453      	add	r3, sl
 8027372:	0a3f      	lsrs	r7, r7, #8
 8027374:	0a1b      	lsrs	r3, r3, #8
 8027376:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802737a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802737e:	433b      	orrs	r3, r7
 8027380:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027382:	2cff      	cmp	r4, #255	; 0xff
 8027384:	d020      	beq.n	80273c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8027386:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027388:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802738c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802738e:	4367      	muls	r7, r4
 8027390:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027392:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027396:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802739a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802739c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80273a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80273a4:	fb04 fa0a 	mul.w	sl, r4, sl
 80273a8:	44bc      	add	ip, r7
 80273aa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80273ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273b2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80273b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80273ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80273be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80273c2:	ea4c 040a 	orr.w	r4, ip, sl
 80273c6:	940d      	str	r4, [sp, #52]	; 0x34
 80273c8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80273ca:	2cff      	cmp	r4, #255	; 0xff
 80273cc:	d020      	beq.n	8027410 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 80273ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80273d0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80273d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80273d6:	4367      	muls	r7, r4
 80273d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80273da:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80273de:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80273e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80273e4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80273e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80273ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80273f0:	44bc      	add	ip, r7
 80273f2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80273f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273fa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80273fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027402:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027406:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802740a:	ea4c 040a 	orr.w	r4, ip, sl
 802740e:	9409      	str	r4, [sp, #36]	; 0x24
 8027410:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027412:	2cff      	cmp	r4, #255	; 0xff
 8027414:	d020      	beq.n	8027458 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8027416:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027418:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802741c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802741e:	4367      	muls	r7, r4
 8027420:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027422:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027426:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802742a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802742c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027430:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027434:	fb04 fa0a 	mul.w	sl, r4, sl
 8027438:	44bc      	add	ip, r7
 802743a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802743e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027442:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027446:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802744a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802744e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027452:	ea4c 040a 	orr.w	r4, ip, sl
 8027456:	940e      	str	r4, [sp, #56]	; 0x38
 8027458:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802745a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802745e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027462:	43d2      	mvns	r2, r2
 8027464:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027468:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802746a:	b2d2      	uxtb	r2, r2
 802746c:	fb08 f707 	mul.w	r7, r8, r7
 8027470:	fb01 770c 	mla	r7, r1, ip, r7
 8027474:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027478:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802747a:	fb00 770c 	mla	r7, r0, ip, r7
 802747e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027482:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027484:	fb09 770c 	mla	r7, r9, ip, r7
 8027488:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802748c:	fb08 f80c 	mul.w	r8, r8, ip
 8027490:	0a3f      	lsrs	r7, r7, #8
 8027492:	fb01 8303 	mla	r3, r1, r3, r8
 8027496:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027498:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802749c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80274a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80274a2:	fb00 330a 	mla	r3, r0, sl, r3
 80274a6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80274aa:	fb09 3c0c 	mla	ip, r9, ip, r3
 80274ae:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80274b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80274b6:	fb03 f102 	mul.w	r1, r3, r2
 80274ba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80274be:	1c4b      	adds	r3, r1, #1
 80274c0:	ea47 070c 	orr.w	r7, r7, ip
 80274c4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80274c8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80274cc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80274d0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80274d4:	4353      	muls	r3, r2
 80274d6:	1c59      	adds	r1, r3, #1
 80274d8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80274dc:	0a3b      	lsrs	r3, r7, #8
 80274de:	0c3f      	lsrs	r7, r7, #16
 80274e0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80274e4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80274e8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80274ec:	435a      	muls	r2, r3
 80274ee:	1c53      	adds	r3, r2, #1
 80274f0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80274f4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80274f8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80274fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80274fe:	f10e 0e03 	add.w	lr, lr, #3
 8027502:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027504:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027508:	441a      	add	r2, r3
 802750a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802750c:	9225      	str	r2, [sp, #148]	; 0x94
 802750e:	441d      	add	r5, r3
 8027510:	e65a      	b.n	80271c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8027512:	2800      	cmp	r0, #0
 8027514:	f43f aef7 	beq.w	8027306 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8027518:	5c79      	ldrb	r1, [r7, r1]
 802751a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802751e:	9109      	str	r1, [sp, #36]	; 0x24
 8027520:	0e09      	lsrs	r1, r1, #24
 8027522:	9111      	str	r1, [sp, #68]	; 0x44
 8027524:	e6ef      	b.n	8027306 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8027526:	b01b      	add	sp, #108	; 0x6c
 8027528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802752c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 802752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027530:	b08d      	sub	sp, #52	; 0x34
 8027532:	468b      	mov	fp, r1
 8027534:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8027538:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 802753c:	fb0c 5703 	mla	r7, ip, r3, r5
 8027540:	f1bc 0f00 	cmp.w	ip, #0
 8027544:	910b      	str	r1, [sp, #44]	; 0x2c
 8027546:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802754a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802754e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8027552:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8027556:	eb02 0607 	add.w	r6, r2, r7
 802755a:	f89b 4000 	ldrb.w	r4, [fp]
 802755e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8027562:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8027566:	f2c0 80c1 	blt.w	80276ec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 802756a:	45e6      	cmp	lr, ip
 802756c:	f340 80be 	ble.w	80276ec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8027570:	2d00      	cmp	r5, #0
 8027572:	f2c0 80b7 	blt.w	80276e4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8027576:	42ab      	cmp	r3, r5
 8027578:	f340 80b4 	ble.w	80276e4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802757c:	5dd2      	ldrb	r2, [r2, r7]
 802757e:	9205      	str	r2, [sp, #20]
 8027580:	7872      	ldrb	r2, [r6, #1]
 8027582:	9206      	str	r2, [sp, #24]
 8027584:	78b2      	ldrb	r2, [r6, #2]
 8027586:	9207      	str	r2, [sp, #28]
 8027588:	1c6a      	adds	r2, r5, #1
 802758a:	f100 80b6 	bmi.w	80276fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802758e:	4293      	cmp	r3, r2
 8027590:	f340 80b3 	ble.w	80276fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8027594:	f1b8 0f00 	cmp.w	r8, #0
 8027598:	f000 80af 	beq.w	80276fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802759c:	78f2      	ldrb	r2, [r6, #3]
 802759e:	9201      	str	r2, [sp, #4]
 80275a0:	7932      	ldrb	r2, [r6, #4]
 80275a2:	9202      	str	r2, [sp, #8]
 80275a4:	7972      	ldrb	r2, [r6, #5]
 80275a6:	9203      	str	r2, [sp, #12]
 80275a8:	f11c 0c01 	adds.w	ip, ip, #1
 80275ac:	f100 80ad 	bmi.w	802770a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80275b0:	45e6      	cmp	lr, ip
 80275b2:	f340 80aa 	ble.w	802770a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80275b6:	f1ba 0f00 	cmp.w	sl, #0
 80275ba:	f000 80a6 	beq.w	802770a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80275be:	2d00      	cmp	r5, #0
 80275c0:	f2c0 809f 	blt.w	8027702 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80275c4:	42ab      	cmp	r3, r5
 80275c6:	f340 809c 	ble.w	8027702 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80275ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80275ce:	f816 9002 	ldrb.w	r9, [r6, r2]
 80275d2:	2203      	movs	r2, #3
 80275d4:	fb03 6c02 	mla	ip, r3, r2, r6
 80275d8:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80275dc:	f89c e002 	ldrb.w	lr, [ip, #2]
 80275e0:	9704      	str	r7, [sp, #16]
 80275e2:	3501      	adds	r5, #1
 80275e4:	f100 8098 	bmi.w	8027718 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80275e8:	42ab      	cmp	r3, r5
 80275ea:	f340 8095 	ble.w	8027718 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80275ee:	f1b8 0f00 	cmp.w	r8, #0
 80275f2:	f000 8091 	beq.w	8027718 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80275f6:	f04f 0c03 	mov.w	ip, #3
 80275fa:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80275fe:	5cb5      	ldrb	r5, [r6, r2]
 8027600:	fb03 620c 	mla	r2, r3, ip, r6
 8027604:	fb03 630c 	mla	r3, r3, ip, r6
 8027608:	7912      	ldrb	r2, [r2, #4]
 802760a:	795e      	ldrb	r6, [r3, #5]
 802760c:	fa1f f388 	uxth.w	r3, r8
 8027610:	fa1f fc8a 	uxth.w	ip, sl
 8027614:	fb03 f70c 	mul.w	r7, r3, ip
 8027618:	011b      	lsls	r3, r3, #4
 802761a:	9708      	str	r7, [sp, #32]
 802761c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8027620:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8027624:	1bdb      	subs	r3, r3, r7
 8027626:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802762a:	fa1f fc8c 	uxth.w	ip, ip
 802762e:	b29b      	uxth	r3, r3
 8027630:	9709      	str	r7, [sp, #36]	; 0x24
 8027632:	ebaa 0a0c 	sub.w	sl, sl, ip
 8027636:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027638:	930a      	str	r3, [sp, #40]	; 0x28
 802763a:	fa1f fa8a 	uxth.w	sl, sl
 802763e:	ea6f 0807 	mvn.w	r8, r7
 8027642:	9f01      	ldr	r7, [sp, #4]
 8027644:	435f      	muls	r7, r3
 8027646:	9b05      	ldr	r3, [sp, #20]
 8027648:	fa5f f888 	uxtb.w	r8, r8
 802764c:	fb0a 7703 	mla	r7, sl, r3, r7
 8027650:	9b08      	ldr	r3, [sp, #32]
 8027652:	fb14 f408 	smulbb	r4, r4, r8
 8027656:	fb0c 7709 	mla	r7, ip, r9, r7
 802765a:	fb10 f008 	smulbb	r0, r0, r8
 802765e:	fb11 f108 	smulbb	r1, r1, r8
 8027662:	fb03 7705 	mla	r7, r3, r5, r7
 8027666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027668:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802766c:	fb07 4703 	mla	r7, r7, r3, r4
 8027670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027672:	b2bf      	uxth	r7, r7
 8027674:	1c7c      	adds	r4, r7, #1
 8027676:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 802767a:	1224      	asrs	r4, r4, #8
 802767c:	f88b 4000 	strb.w	r4, [fp]
 8027680:	9c02      	ldr	r4, [sp, #8]
 8027682:	435c      	muls	r4, r3
 8027684:	9b06      	ldr	r3, [sp, #24]
 8027686:	fb0a 4403 	mla	r4, sl, r3, r4
 802768a:	9b04      	ldr	r3, [sp, #16]
 802768c:	fb0c 4403 	mla	r4, ip, r3, r4
 8027690:	9b08      	ldr	r3, [sp, #32]
 8027692:	fb03 4402 	mla	r4, r3, r2, r4
 8027696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802769a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802769e:	fb04 0403 	mla	r4, r4, r3, r0
 80276a2:	9b03      	ldr	r3, [sp, #12]
 80276a4:	435a      	muls	r2, r3
 80276a6:	b2a4      	uxth	r4, r4
 80276a8:	4613      	mov	r3, r2
 80276aa:	9a07      	ldr	r2, [sp, #28]
 80276ac:	1c60      	adds	r0, r4, #1
 80276ae:	fb0a 3a02 	mla	sl, sl, r2, r3
 80276b2:	9b08      	ldr	r3, [sp, #32]
 80276b4:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80276b8:	fb0c ac0e 	mla	ip, ip, lr, sl
 80276bc:	1224      	asrs	r4, r4, #8
 80276be:	fb03 c606 	mla	r6, r3, r6, ip
 80276c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80276c4:	f88b 4001 	strb.w	r4, [fp, #1]
 80276c8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80276cc:	fb06 1103 	mla	r1, r6, r3, r1
 80276d0:	b289      	uxth	r1, r1
 80276d2:	1c4e      	adds	r6, r1, #1
 80276d4:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 80276d8:	1209      	asrs	r1, r1, #8
 80276da:	f88b 1002 	strb.w	r1, [fp, #2]
 80276de:	b00d      	add	sp, #52	; 0x34
 80276e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80276e8:	9405      	str	r4, [sp, #20]
 80276ea:	e74d      	b.n	8027588 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 80276ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80276f0:	9401      	str	r4, [sp, #4]
 80276f2:	9405      	str	r4, [sp, #20]
 80276f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80276f8:	e756      	b.n	80275a8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80276fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80276fe:	9401      	str	r4, [sp, #4]
 8027700:	e752      	b.n	80275a8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8027702:	468e      	mov	lr, r1
 8027704:	9004      	str	r0, [sp, #16]
 8027706:	46a1      	mov	r9, r4
 8027708:	e76b      	b.n	80275e2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 802770a:	460e      	mov	r6, r1
 802770c:	4602      	mov	r2, r0
 802770e:	4625      	mov	r5, r4
 8027710:	468e      	mov	lr, r1
 8027712:	9004      	str	r0, [sp, #16]
 8027714:	46a1      	mov	r9, r4
 8027716:	e779      	b.n	802760c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8027718:	460e      	mov	r6, r1
 802771a:	4602      	mov	r2, r0
 802771c:	4625      	mov	r5, r4
 802771e:	e775      	b.n	802760c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08027720 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027724:	b09f      	sub	sp, #124	; 0x7c
 8027726:	920e      	str	r2, [sp, #56]	; 0x38
 8027728:	9307      	str	r3, [sp, #28]
 802772a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802772c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8027730:	901d      	str	r0, [sp, #116]	; 0x74
 8027732:	930c      	str	r3, [sp, #48]	; 0x30
 8027734:	6850      	ldr	r0, [r2, #4]
 8027736:	910b      	str	r1, [sp, #44]	; 0x2c
 8027738:	6812      	ldr	r2, [r2, #0]
 802773a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802773e:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8027742:	fb00 1303 	mla	r3, r0, r3, r1
 8027746:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802774a:	18d3      	adds	r3, r2, r3
 802774c:	9308      	str	r3, [sp, #32]
 802774e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027750:	681b      	ldr	r3, [r3, #0]
 8027752:	930a      	str	r3, [sp, #40]	; 0x28
 8027754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027756:	43db      	mvns	r3, r3
 8027758:	b2db      	uxtb	r3, r3
 802775a:	9309      	str	r3, [sp, #36]	; 0x24
 802775c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802775e:	2b00      	cmp	r3, #0
 8027760:	dc03      	bgt.n	802776a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027764:	2b00      	cmp	r3, #0
 8027766:	f340 81f5 	ble.w	8027b54 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802776a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802776c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027770:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027774:	1e48      	subs	r0, r1, #1
 8027776:	1e54      	subs	r4, r2, #1
 8027778:	9b07      	ldr	r3, [sp, #28]
 802777a:	2b00      	cmp	r3, #0
 802777c:	f340 80d5 	ble.w	802792a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8027780:	ea5f 452a 	movs.w	r5, sl, asr #16
 8027784:	ea4f 4328 	mov.w	r3, r8, asr #16
 8027788:	d406      	bmi.n	8027798 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802778a:	4285      	cmp	r5, r0
 802778c:	da04      	bge.n	8027798 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802778e:	2b00      	cmp	r3, #0
 8027790:	db02      	blt.n	8027798 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027792:	42a3      	cmp	r3, r4
 8027794:	f2c0 80ca 	blt.w	802792c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8027798:	3501      	adds	r5, #1
 802779a:	f100 80bb 	bmi.w	8027914 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802779e:	42a9      	cmp	r1, r5
 80277a0:	f2c0 80b8 	blt.w	8027914 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80277a4:	3301      	adds	r3, #1
 80277a6:	f100 80b5 	bmi.w	8027914 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80277aa:	429a      	cmp	r2, r3
 80277ac:	f2c0 80b2 	blt.w	8027914 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80277b0:	9b07      	ldr	r3, [sp, #28]
 80277b2:	9d08      	ldr	r5, [sp, #32]
 80277b4:	930d      	str	r3, [sp, #52]	; 0x34
 80277b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80277b8:	2b00      	cmp	r3, #0
 80277ba:	f340 80d6 	ble.w	802796a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80277be:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80277c0:	ea4f 4428 	mov.w	r4, r8, asr #16
 80277c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80277c6:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80277ca:	68c6      	ldr	r6, [r0, #12]
 80277cc:	ea5f 402a 	movs.w	r0, sl, asr #16
 80277d0:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80277d4:	689b      	ldr	r3, [r3, #8]
 80277d6:	f100 810f 	bmi.w	80279f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80277da:	1e5f      	subs	r7, r3, #1
 80277dc:	42b8      	cmp	r0, r7
 80277de:	f280 810b 	bge.w	80279f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80277e2:	2c00      	cmp	r4, #0
 80277e4:	f2c0 8108 	blt.w	80279f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80277e8:	1e77      	subs	r7, r6, #1
 80277ea:	42bc      	cmp	r4, r7
 80277ec:	f280 8104 	bge.w	80279f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80277f0:	b21b      	sxth	r3, r3
 80277f2:	fb04 0003 	mla	r0, r4, r3, r0
 80277f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80277f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80277fc:	1826      	adds	r6, r4, r0
 80277fe:	5c24      	ldrb	r4, [r4, r0]
 8027800:	78b7      	ldrb	r7, [r6, #2]
 8027802:	7870      	ldrb	r0, [r6, #1]
 8027804:	970f      	str	r7, [sp, #60]	; 0x3c
 8027806:	7977      	ldrb	r7, [r6, #5]
 8027808:	f896 e003 	ldrb.w	lr, [r6, #3]
 802780c:	f896 c004 	ldrb.w	ip, [r6, #4]
 8027810:	9710      	str	r7, [sp, #64]	; 0x40
 8027812:	b1c9      	cbz	r1, 8027848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8027814:	f04f 0b03 	mov.w	fp, #3
 8027818:	f06f 0904 	mvn.w	r9, #4
 802781c:	3605      	adds	r6, #5
 802781e:	fb13 930b 	smlabb	r3, r3, fp, r9
 8027822:	eb06 0b03 	add.w	fp, r6, r3
 8027826:	5cf3      	ldrb	r3, [r6, r3]
 8027828:	9311      	str	r3, [sp, #68]	; 0x44
 802782a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 802782e:	9313      	str	r3, [sp, #76]	; 0x4c
 8027830:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8027834:	9315      	str	r3, [sp, #84]	; 0x54
 8027836:	f89b 3003 	ldrb.w	r3, [fp, #3]
 802783a:	9312      	str	r3, [sp, #72]	; 0x48
 802783c:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8027840:	9314      	str	r3, [sp, #80]	; 0x50
 8027842:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8027846:	9316      	str	r3, [sp, #88]	; 0x58
 8027848:	b292      	uxth	r2, r2
 802784a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 802784c:	b289      	uxth	r1, r1
 802784e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8027852:	fb02 f601 	mul.w	r6, r2, r1
 8027856:	0112      	lsls	r2, r2, #4
 8027858:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 802785c:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8027860:	1b92      	subs	r2, r2, r6
 8027862:	b289      	uxth	r1, r1
 8027864:	b292      	uxth	r2, r2
 8027866:	eba9 0901 	sub.w	r9, r9, r1
 802786a:	fb02 fe0e 	mul.w	lr, r2, lr
 802786e:	fa1f f989 	uxth.w	r9, r9
 8027872:	fb02 fc0c 	mul.w	ip, r2, ip
 8027876:	fb09 e404 	mla	r4, r9, r4, lr
 802787a:	f895 e000 	ldrb.w	lr, [r5]
 802787e:	fb09 c000 	mla	r0, r9, r0, ip
 8027882:	fb01 4407 	mla	r4, r1, r7, r4
 8027886:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8027888:	fb06 4407 	mla	r4, r6, r7, r4
 802788c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802788e:	fb1e fe07 	smulbb	lr, lr, r7
 8027892:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8027896:	fb04 e403 	mla	r4, r4, r3, lr
 802789a:	b2a4      	uxth	r4, r4
 802789c:	f104 0e01 	add.w	lr, r4, #1
 80278a0:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80278a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80278a6:	fb01 0004 	mla	r0, r1, r4, r0
 80278aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80278ac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80278b0:	fb06 0004 	mla	r0, r6, r4, r0
 80278b4:	786c      	ldrb	r4, [r5, #1]
 80278b6:	f885 e000 	strb.w	lr, [r5]
 80278ba:	fb14 f407 	smulbb	r4, r4, r7
 80278be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80278c2:	fb00 4003 	mla	r0, r0, r3, r4
 80278c6:	b280      	uxth	r0, r0
 80278c8:	1c44      	adds	r4, r0, #1
 80278ca:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80278ce:	1200      	asrs	r0, r0, #8
 80278d0:	7068      	strb	r0, [r5, #1]
 80278d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80278d4:	4342      	muls	r2, r0
 80278d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80278d8:	fb09 2200 	mla	r2, r9, r0, r2
 80278dc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80278de:	fb01 2100 	mla	r1, r1, r0, r2
 80278e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80278e4:	fb06 1602 	mla	r6, r6, r2, r1
 80278e8:	78a9      	ldrb	r1, [r5, #2]
 80278ea:	fb11 f107 	smulbb	r1, r1, r7
 80278ee:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80278f2:	fb06 1303 	mla	r3, r6, r3, r1
 80278f6:	b29b      	uxth	r3, r3
 80278f8:	1c5e      	adds	r6, r3, #1
 80278fa:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80278fe:	121b      	asrs	r3, r3, #8
 8027900:	70ab      	strb	r3, [r5, #2]
 8027902:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027904:	3503      	adds	r5, #3
 8027906:	449a      	add	sl, r3
 8027908:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802790a:	4498      	add	r8, r3
 802790c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802790e:	3b01      	subs	r3, #1
 8027910:	930d      	str	r3, [sp, #52]	; 0x34
 8027912:	e750      	b.n	80277b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027914:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027916:	449a      	add	sl, r3
 8027918:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802791a:	4498      	add	r8, r3
 802791c:	9b07      	ldr	r3, [sp, #28]
 802791e:	3b01      	subs	r3, #1
 8027920:	9307      	str	r3, [sp, #28]
 8027922:	9b08      	ldr	r3, [sp, #32]
 8027924:	3303      	adds	r3, #3
 8027926:	9308      	str	r3, [sp, #32]
 8027928:	e726      	b.n	8027778 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802792a:	d026      	beq.n	802797a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802792c:	9b07      	ldr	r3, [sp, #28]
 802792e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8027930:	3b01      	subs	r3, #1
 8027932:	fb00 a003 	mla	r0, r0, r3, sl
 8027936:	1400      	asrs	r0, r0, #16
 8027938:	f53f af3a 	bmi.w	80277b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802793c:	3901      	subs	r1, #1
 802793e:	4288      	cmp	r0, r1
 8027940:	f6bf af36 	bge.w	80277b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027944:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027946:	fb01 8303 	mla	r3, r1, r3, r8
 802794a:	141b      	asrs	r3, r3, #16
 802794c:	f53f af30 	bmi.w	80277b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027950:	3a01      	subs	r2, #1
 8027952:	4293      	cmp	r3, r2
 8027954:	f6bf af2c 	bge.w	80277b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027958:	9b08      	ldr	r3, [sp, #32]
 802795a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802795e:	1cdd      	adds	r5, r3, #3
 8027960:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8027964:	f1bc 0f00 	cmp.w	ip, #0
 8027968:	dc5f      	bgt.n	8027a2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 802796a:	9b07      	ldr	r3, [sp, #28]
 802796c:	9a08      	ldr	r2, [sp, #32]
 802796e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027972:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027976:	441a      	add	r2, r3
 8027978:	9208      	str	r2, [sp, #32]
 802797a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802797c:	2b00      	cmp	r3, #0
 802797e:	f340 80e9 	ble.w	8027b54 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8027982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027986:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027988:	ee30 0a04 	vadd.f32	s0, s0, s8
 802798c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027990:	eef0 6a62 	vmov.f32	s13, s5
 8027994:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027998:	ee31 1a05 	vadd.f32	s2, s2, s10
 802799c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80279a0:	ee16 aa90 	vmov	sl, s13
 80279a4:	eef0 6a43 	vmov.f32	s13, s6
 80279a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80279ac:	ee16 8a90 	vmov	r8, s13
 80279b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80279b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80279b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80279bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80279c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80279c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80279c8:	ee12 2a90 	vmov	r2, s5
 80279cc:	eef0 2a47 	vmov.f32	s5, s14
 80279d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80279d4:	ee13 2a10 	vmov	r2, s6
 80279d8:	932b      	str	r3, [sp, #172]	; 0xac
 80279da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80279dc:	eeb0 3a67 	vmov.f32	s6, s15
 80279e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80279e4:	932c      	str	r3, [sp, #176]	; 0xb0
 80279e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80279e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80279ea:	3b01      	subs	r3, #1
 80279ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80279ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80279f0:	bf08      	it	eq
 80279f2:	4613      	moveq	r3, r2
 80279f4:	9307      	str	r3, [sp, #28]
 80279f6:	e6b1      	b.n	802775c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80279f8:	1c47      	adds	r7, r0, #1
 80279fa:	d482      	bmi.n	8027902 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80279fc:	42bb      	cmp	r3, r7
 80279fe:	db80      	blt.n	8027902 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8027a00:	1c67      	adds	r7, r4, #1
 8027a02:	f53f af7e 	bmi.w	8027902 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8027a06:	42be      	cmp	r6, r7
 8027a08:	f6ff af7b 	blt.w	8027902 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8027a0c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8027a0e:	b236      	sxth	r6, r6
 8027a10:	9001      	str	r0, [sp, #4]
 8027a12:	b21b      	sxth	r3, r3
 8027a14:	9600      	str	r6, [sp, #0]
 8027a16:	981d      	ldr	r0, [sp, #116]	; 0x74
 8027a18:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8027a1c:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8027a20:	4629      	mov	r1, r5
 8027a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027a24:	f7ff fd82 	bl	802752c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8027a28:	e76b      	b.n	8027902 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8027a2a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8027a2c:	ea4f 402a 	mov.w	r0, sl, asr #16
 8027a30:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8027a34:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8027a38:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8027a3c:	ea4f 4128 	mov.w	r1, r8, asr #16
 8027a40:	fb07 0101 	mla	r1, r7, r1, r0
 8027a44:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027a46:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027a4a:	1844      	adds	r4, r0, r1
 8027a4c:	5c40      	ldrb	r0, [r0, r1]
 8027a4e:	78a6      	ldrb	r6, [r4, #2]
 8027a50:	7861      	ldrb	r1, [r4, #1]
 8027a52:	960f      	str	r6, [sp, #60]	; 0x3c
 8027a54:	78e6      	ldrb	r6, [r4, #3]
 8027a56:	910d      	str	r1, [sp, #52]	; 0x34
 8027a58:	9610      	str	r6, [sp, #64]	; 0x40
 8027a5a:	f894 9004 	ldrb.w	r9, [r4, #4]
 8027a5e:	f894 b005 	ldrb.w	fp, [r4, #5]
 8027a62:	b192      	cbz	r2, 8027a8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8027a64:	f06f 0604 	mvn.w	r6, #4
 8027a68:	2103      	movs	r1, #3
 8027a6a:	3405      	adds	r4, #5
 8027a6c:	fb17 6701 	smlabb	r7, r7, r1, r6
 8027a70:	19e6      	adds	r6, r4, r7
 8027a72:	5de4      	ldrb	r4, [r4, r7]
 8027a74:	9417      	str	r4, [sp, #92]	; 0x5c
 8027a76:	7874      	ldrb	r4, [r6, #1]
 8027a78:	9419      	str	r4, [sp, #100]	; 0x64
 8027a7a:	78b4      	ldrb	r4, [r6, #2]
 8027a7c:	941b      	str	r4, [sp, #108]	; 0x6c
 8027a7e:	78f4      	ldrb	r4, [r6, #3]
 8027a80:	9418      	str	r4, [sp, #96]	; 0x60
 8027a82:	7934      	ldrb	r4, [r6, #4]
 8027a84:	941a      	str	r4, [sp, #104]	; 0x68
 8027a86:	7974      	ldrb	r4, [r6, #5]
 8027a88:	941c      	str	r4, [sp, #112]	; 0x70
 8027a8a:	b29b      	uxth	r3, r3
 8027a8c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8027a8e:	b292      	uxth	r2, r2
 8027a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027a92:	3503      	adds	r5, #3
 8027a94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027a98:	fb03 f402 	mul.w	r4, r3, r2
 8027a9c:	011b      	lsls	r3, r3, #4
 8027a9e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8027aa2:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8027aa6:	1b1b      	subs	r3, r3, r4
 8027aa8:	b292      	uxth	r2, r2
 8027aaa:	b29b      	uxth	r3, r3
 8027aac:	1ab6      	subs	r6, r6, r2
 8027aae:	435f      	muls	r7, r3
 8027ab0:	b2b6      	uxth	r6, r6
 8027ab2:	fb03 f909 	mul.w	r9, r3, r9
 8027ab6:	fb03 fb0b 	mul.w	fp, r3, fp
 8027aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027abc:	fb06 7000 	mla	r0, r6, r0, r7
 8027ac0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8027ac2:	fb06 bb03 	mla	fp, r6, r3, fp
 8027ac6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027ac8:	fb02 0007 	mla	r0, r2, r7, r0
 8027acc:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8027ace:	fb02 bb03 	mla	fp, r2, r3, fp
 8027ad2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027ad4:	fb04 0007 	mla	r0, r4, r7, r0
 8027ad8:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8027adc:	fb17 f701 	smulbb	r7, r7, r1
 8027ae0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027ae4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8027ae6:	fb00 700e 	mla	r0, r0, lr, r7
 8027aea:	fb06 9101 	mla	r1, r6, r1, r9
 8027aee:	b280      	uxth	r0, r0
 8027af0:	1c47      	adds	r7, r0, #1
 8027af2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8027af6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027af8:	1200      	asrs	r0, r0, #8
 8027afa:	f805 0c06 	strb.w	r0, [r5, #-6]
 8027afe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027b00:	fb02 1100 	mla	r1, r2, r0, r1
 8027b04:	981a      	ldr	r0, [sp, #104]	; 0x68
 8027b06:	fb04 1100 	mla	r1, r4, r0, r1
 8027b0a:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8027b0e:	fb04 b403 	mla	r4, r4, r3, fp
 8027b12:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8027b16:	fb10 f007 	smulbb	r0, r0, r7
 8027b1a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027b1e:	fb13 f307 	smulbb	r3, r3, r7
 8027b22:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8027b26:	fb01 010e 	mla	r1, r1, lr, r0
 8027b2a:	fb04 340e 	mla	r4, r4, lr, r3
 8027b2e:	b289      	uxth	r1, r1
 8027b30:	b2a4      	uxth	r4, r4
 8027b32:	1c48      	adds	r0, r1, #1
 8027b34:	1c63      	adds	r3, r4, #1
 8027b36:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8027b3a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027b3e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027b40:	1209      	asrs	r1, r1, #8
 8027b42:	1224      	asrs	r4, r4, #8
 8027b44:	449a      	add	sl, r3
 8027b46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027b48:	f805 1c05 	strb.w	r1, [r5, #-5]
 8027b4c:	f805 4c04 	strb.w	r4, [r5, #-4]
 8027b50:	4498      	add	r8, r3
 8027b52:	e707      	b.n	8027964 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8027b54:	b01f      	add	sp, #124	; 0x7c
 8027b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027b5a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8027b5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b5e:	b087      	sub	sp, #28
 8027b60:	780d      	ldrb	r5, [r1, #0]
 8027b62:	784c      	ldrb	r4, [r1, #1]
 8027b64:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8027b68:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8027b6c:	9004      	str	r0, [sp, #16]
 8027b6e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8027b72:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8027b76:	9005      	str	r0, [sp, #20]
 8027b78:	fb06 bc03 	mla	ip, r6, r3, fp
 8027b7c:	2e00      	cmp	r6, #0
 8027b7e:	7888      	ldrb	r0, [r1, #2]
 8027b80:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027b84:	eb02 090c 	add.w	r9, r2, ip
 8027b88:	f2c0 8084 	blt.w	8027c94 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8027b8c:	42b7      	cmp	r7, r6
 8027b8e:	f340 8081 	ble.w	8027c94 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8027b92:	f1bb 0f00 	cmp.w	fp, #0
 8027b96:	db79      	blt.n	8027c8c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8027b98:	455b      	cmp	r3, fp
 8027b9a:	dd77      	ble.n	8027c8c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8027b9c:	f812 200c 	ldrb.w	r2, [r2, ip]
 8027ba0:	9201      	str	r2, [sp, #4]
 8027ba2:	f899 2001 	ldrb.w	r2, [r9, #1]
 8027ba6:	9202      	str	r2, [sp, #8]
 8027ba8:	f899 2002 	ldrb.w	r2, [r9, #2]
 8027bac:	9203      	str	r2, [sp, #12]
 8027bae:	f11b 0201 	adds.w	r2, fp, #1
 8027bb2:	d476      	bmi.n	8027ca2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8027bb4:	4293      	cmp	r3, r2
 8027bb6:	dd74      	ble.n	8027ca2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8027bb8:	9a04      	ldr	r2, [sp, #16]
 8027bba:	2a00      	cmp	r2, #0
 8027bbc:	d071      	beq.n	8027ca2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8027bbe:	f899 8003 	ldrb.w	r8, [r9, #3]
 8027bc2:	f899 c004 	ldrb.w	ip, [r9, #4]
 8027bc6:	f899 a005 	ldrb.w	sl, [r9, #5]
 8027bca:	3601      	adds	r6, #1
 8027bcc:	d471      	bmi.n	8027cb2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8027bce:	42b7      	cmp	r7, r6
 8027bd0:	dd6f      	ble.n	8027cb2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8027bd2:	9a05      	ldr	r2, [sp, #20]
 8027bd4:	2a00      	cmp	r2, #0
 8027bd6:	d06c      	beq.n	8027cb2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8027bd8:	f1bb 0f00 	cmp.w	fp, #0
 8027bdc:	db65      	blt.n	8027caa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8027bde:	455b      	cmp	r3, fp
 8027be0:	dd63      	ble.n	8027caa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8027be2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8027be6:	f819 e002 	ldrb.w	lr, [r9, r2]
 8027bea:	2203      	movs	r2, #3
 8027bec:	fb03 9602 	mla	r6, r3, r2, r9
 8027bf0:	7877      	ldrb	r7, [r6, #1]
 8027bf2:	78b6      	ldrb	r6, [r6, #2]
 8027bf4:	f11b 0b01 	adds.w	fp, fp, #1
 8027bf8:	d40c      	bmi.n	8027c14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8027bfa:	455b      	cmp	r3, fp
 8027bfc:	dd0a      	ble.n	8027c14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8027bfe:	9a04      	ldr	r2, [sp, #16]
 8027c00:	b142      	cbz	r2, 8027c14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8027c02:	2203      	movs	r2, #3
 8027c04:	fb13 2002 	smlabb	r0, r3, r2, r2
 8027c08:	f819 5000 	ldrb.w	r5, [r9, r0]
 8027c0c:	fb03 9002 	mla	r0, r3, r2, r9
 8027c10:	7904      	ldrb	r4, [r0, #4]
 8027c12:	7940      	ldrb	r0, [r0, #5]
 8027c14:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8027c18:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8027c1c:	fb03 fb02 	mul.w	fp, r3, r2
 8027c20:	011b      	lsls	r3, r3, #4
 8027c22:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8027c26:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8027c2a:	eba3 030b 	sub.w	r3, r3, fp
 8027c2e:	b292      	uxth	r2, r2
 8027c30:	b29b      	uxth	r3, r3
 8027c32:	eba9 0902 	sub.w	r9, r9, r2
 8027c36:	9304      	str	r3, [sp, #16]
 8027c38:	fa1f f989 	uxth.w	r9, r9
 8027c3c:	fb03 f808 	mul.w	r8, r3, r8
 8027c40:	9b01      	ldr	r3, [sp, #4]
 8027c42:	fb09 8803 	mla	r8, r9, r3, r8
 8027c46:	9b04      	ldr	r3, [sp, #16]
 8027c48:	fb03 fc0c 	mul.w	ip, r3, ip
 8027c4c:	9b02      	ldr	r3, [sp, #8]
 8027c4e:	fb02 880e 	mla	r8, r2, lr, r8
 8027c52:	fb09 cc03 	mla	ip, r9, r3, ip
 8027c56:	9b04      	ldr	r3, [sp, #16]
 8027c58:	fb0b 8805 	mla	r8, fp, r5, r8
 8027c5c:	fb02 c707 	mla	r7, r2, r7, ip
 8027c60:	fb03 f30a 	mul.w	r3, r3, sl
 8027c64:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027c68:	fb0b 7404 	mla	r4, fp, r4, r7
 8027c6c:	f881 8000 	strb.w	r8, [r1]
 8027c70:	1224      	asrs	r4, r4, #8
 8027c72:	704c      	strb	r4, [r1, #1]
 8027c74:	9c03      	ldr	r4, [sp, #12]
 8027c76:	fb09 3904 	mla	r9, r9, r4, r3
 8027c7a:	fb02 9206 	mla	r2, r2, r6, r9
 8027c7e:	fb0b 2000 	mla	r0, fp, r0, r2
 8027c82:	1200      	asrs	r0, r0, #8
 8027c84:	7088      	strb	r0, [r1, #2]
 8027c86:	b007      	add	sp, #28
 8027c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027c8c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8027c90:	9501      	str	r5, [sp, #4]
 8027c92:	e78c      	b.n	8027bae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8027c94:	4682      	mov	sl, r0
 8027c96:	46a4      	mov	ip, r4
 8027c98:	46a8      	mov	r8, r5
 8027c9a:	9501      	str	r5, [sp, #4]
 8027c9c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8027ca0:	e793      	b.n	8027bca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8027ca2:	4682      	mov	sl, r0
 8027ca4:	46a4      	mov	ip, r4
 8027ca6:	46a8      	mov	r8, r5
 8027ca8:	e78f      	b.n	8027bca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8027caa:	4606      	mov	r6, r0
 8027cac:	4627      	mov	r7, r4
 8027cae:	46ae      	mov	lr, r5
 8027cb0:	e7a0      	b.n	8027bf4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8027cb2:	4606      	mov	r6, r0
 8027cb4:	4627      	mov	r7, r4
 8027cb6:	46ae      	mov	lr, r5
 8027cb8:	e7ac      	b.n	8027c14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08027cba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cbe:	b09b      	sub	sp, #108	; 0x6c
 8027cc0:	920b      	str	r2, [sp, #44]	; 0x2c
 8027cc2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027cc4:	9019      	str	r0, [sp, #100]	; 0x64
 8027cc6:	9109      	str	r1, [sp, #36]	; 0x24
 8027cc8:	6850      	ldr	r0, [r2, #4]
 8027cca:	9306      	str	r3, [sp, #24]
 8027ccc:	6812      	ldr	r2, [r2, #0]
 8027cce:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8027cd2:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 8027cd6:	fb00 1303 	mla	r3, r0, r3, r1
 8027cda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027cde:	18d3      	adds	r3, r2, r3
 8027ce0:	9307      	str	r3, [sp, #28]
 8027ce2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027ce4:	681b      	ldr	r3, [r3, #0]
 8027ce6:	9308      	str	r3, [sp, #32]
 8027ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027cea:	2b00      	cmp	r3, #0
 8027cec:	dc03      	bgt.n	8027cf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8027cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027cf0:	2b00      	cmp	r3, #0
 8027cf2:	f340 81ab 	ble.w	802804c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8027cf6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027cf8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027cfc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027d00:	1e48      	subs	r0, r1, #1
 8027d02:	1e55      	subs	r5, r2, #1
 8027d04:	9b06      	ldr	r3, [sp, #24]
 8027d06:	2b00      	cmp	r3, #0
 8027d08:	f340 80b1 	ble.w	8027e6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8027d0c:	ea5f 462b 	movs.w	r6, fp, asr #16
 8027d10:	ea4f 4324 	mov.w	r3, r4, asr #16
 8027d14:	d406      	bmi.n	8027d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027d16:	4286      	cmp	r6, r0
 8027d18:	da04      	bge.n	8027d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027d1a:	2b00      	cmp	r3, #0
 8027d1c:	db02      	blt.n	8027d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027d1e:	42ab      	cmp	r3, r5
 8027d20:	f2c0 80a6 	blt.w	8027e70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027d24:	3601      	adds	r6, #1
 8027d26:	f100 8097 	bmi.w	8027e58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8027d2a:	42b1      	cmp	r1, r6
 8027d2c:	f2c0 8094 	blt.w	8027e58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8027d30:	3301      	adds	r3, #1
 8027d32:	f100 8091 	bmi.w	8027e58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8027d36:	429a      	cmp	r2, r3
 8027d38:	f2c0 808e 	blt.w	8027e58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8027d3c:	9b06      	ldr	r3, [sp, #24]
 8027d3e:	9e07      	ldr	r6, [sp, #28]
 8027d40:	930a      	str	r3, [sp, #40]	; 0x28
 8027d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027d44:	2b00      	cmp	r3, #0
 8027d46:	f340 80b0 	ble.w	8027eaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8027d4a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8027d4c:	1425      	asrs	r5, r4, #16
 8027d4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027d50:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8027d54:	68c7      	ldr	r7, [r0, #12]
 8027d56:	ea5f 402b 	movs.w	r0, fp, asr #16
 8027d5a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027d5e:	689b      	ldr	r3, [r3, #8]
 8027d60:	f100 80ea 	bmi.w	8027f38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027d64:	f103 3cff 	add.w	ip, r3, #4294967295
 8027d68:	4560      	cmp	r0, ip
 8027d6a:	f280 80e5 	bge.w	8027f38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027d6e:	2d00      	cmp	r5, #0
 8027d70:	f2c0 80e2 	blt.w	8027f38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8027d78:	4565      	cmp	r5, ip
 8027d7a:	f280 80dd 	bge.w	8027f38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027d7e:	b21b      	sxth	r3, r3
 8027d80:	fb05 0003 	mla	r0, r5, r3, r0
 8027d84:	9d08      	ldr	r5, [sp, #32]
 8027d86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027d8a:	182f      	adds	r7, r5, r0
 8027d8c:	5c2d      	ldrb	r5, [r5, r0]
 8027d8e:	7878      	ldrb	r0, [r7, #1]
 8027d90:	f897 e002 	ldrb.w	lr, [r7, #2]
 8027d94:	900c      	str	r0, [sp, #48]	; 0x30
 8027d96:	f897 9003 	ldrb.w	r9, [r7, #3]
 8027d9a:	f897 8004 	ldrb.w	r8, [r7, #4]
 8027d9e:	f897 a005 	ldrb.w	sl, [r7, #5]
 8027da2:	b1c9      	cbz	r1, 8027dd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8027da4:	f04f 0c03 	mov.w	ip, #3
 8027da8:	f06f 0004 	mvn.w	r0, #4
 8027dac:	3705      	adds	r7, #5
 8027dae:	fb13 030c 	smlabb	r3, r3, ip, r0
 8027db2:	eb07 0c03 	add.w	ip, r7, r3
 8027db6:	5cfb      	ldrb	r3, [r7, r3]
 8027db8:	930d      	str	r3, [sp, #52]	; 0x34
 8027dba:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8027dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8027dc0:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8027dc4:	9311      	str	r3, [sp, #68]	; 0x44
 8027dc6:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8027dca:	930e      	str	r3, [sp, #56]	; 0x38
 8027dcc:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8027dd0:	9310      	str	r3, [sp, #64]	; 0x40
 8027dd2:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8027dd6:	9312      	str	r3, [sp, #72]	; 0x48
 8027dd8:	b292      	uxth	r2, r2
 8027dda:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027ddc:	b289      	uxth	r1, r1
 8027dde:	fb02 f301 	mul.w	r3, r2, r1
 8027de2:	0112      	lsls	r2, r2, #4
 8027de4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027de8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8027dec:	1ad2      	subs	r2, r2, r3
 8027dee:	b289      	uxth	r1, r1
 8027df0:	b292      	uxth	r2, r2
 8027df2:	1a7f      	subs	r7, r7, r1
 8027df4:	fb02 f909 	mul.w	r9, r2, r9
 8027df8:	b2bf      	uxth	r7, r7
 8027dfa:	fb02 f808 	mul.w	r8, r2, r8
 8027dfe:	fb02 fa0a 	mul.w	sl, r2, sl
 8027e02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027e04:	fb07 9905 	mla	r9, r7, r5, r9
 8027e08:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027e0a:	fb07 8800 	mla	r8, r7, r0, r8
 8027e0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027e10:	fb07 aa0e 	mla	sl, r7, lr, sl
 8027e14:	fb01 9905 	mla	r9, r1, r5, r9
 8027e18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027e1a:	fb01 8800 	mla	r8, r1, r0, r8
 8027e1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027e20:	fb01 a102 	mla	r1, r1, r2, sl
 8027e24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027e26:	fb03 9905 	mla	r9, r3, r5, r9
 8027e2a:	fb03 8800 	mla	r8, r3, r0, r8
 8027e2e:	fb03 1302 	mla	r3, r3, r2, r1
 8027e32:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027e36:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027e3a:	121b      	asrs	r3, r3, #8
 8027e3c:	f886 9000 	strb.w	r9, [r6]
 8027e40:	f886 8001 	strb.w	r8, [r6, #1]
 8027e44:	70b3      	strb	r3, [r6, #2]
 8027e46:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027e48:	3603      	adds	r6, #3
 8027e4a:	449b      	add	fp, r3
 8027e4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027e4e:	441c      	add	r4, r3
 8027e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e52:	3b01      	subs	r3, #1
 8027e54:	930a      	str	r3, [sp, #40]	; 0x28
 8027e56:	e774      	b.n	8027d42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8027e58:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027e5a:	449b      	add	fp, r3
 8027e5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027e5e:	441c      	add	r4, r3
 8027e60:	9b06      	ldr	r3, [sp, #24]
 8027e62:	3b01      	subs	r3, #1
 8027e64:	9306      	str	r3, [sp, #24]
 8027e66:	9b07      	ldr	r3, [sp, #28]
 8027e68:	3303      	adds	r3, #3
 8027e6a:	9307      	str	r3, [sp, #28]
 8027e6c:	e74a      	b.n	8027d04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027e6e:	d024      	beq.n	8027eba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027e70:	9b06      	ldr	r3, [sp, #24]
 8027e72:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027e74:	3b01      	subs	r3, #1
 8027e76:	fb00 b003 	mla	r0, r0, r3, fp
 8027e7a:	1400      	asrs	r0, r0, #16
 8027e7c:	f53f af5e 	bmi.w	8027d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027e80:	3901      	subs	r1, #1
 8027e82:	4288      	cmp	r0, r1
 8027e84:	f6bf af5a 	bge.w	8027d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027e88:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027e8a:	fb01 4303 	mla	r3, r1, r3, r4
 8027e8e:	141b      	asrs	r3, r3, #16
 8027e90:	f53f af54 	bmi.w	8027d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027e94:	3a01      	subs	r2, #1
 8027e96:	4293      	cmp	r3, r2
 8027e98:	f6bf af50 	bge.w	8027d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027e9c:	9b07      	ldr	r3, [sp, #28]
 8027e9e:	f8dd e018 	ldr.w	lr, [sp, #24]
 8027ea2:	1cde      	adds	r6, r3, #3
 8027ea4:	f1be 0f00 	cmp.w	lr, #0
 8027ea8:	dc5f      	bgt.n	8027f6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8027eaa:	9b06      	ldr	r3, [sp, #24]
 8027eac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027eb0:	9b07      	ldr	r3, [sp, #28]
 8027eb2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027eb6:	4423      	add	r3, r4
 8027eb8:	9307      	str	r3, [sp, #28]
 8027eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027ebc:	2b00      	cmp	r3, #0
 8027ebe:	f340 80c5 	ble.w	802804c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8027ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027ec6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027ec8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027ecc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027ed0:	eef0 6a62 	vmov.f32	s13, s5
 8027ed4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027ed8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027edc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ee0:	ee16 ba90 	vmov	fp, s13
 8027ee4:	eef0 6a43 	vmov.f32	s13, s6
 8027ee8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027eec:	ee16 4a90 	vmov	r4, s13
 8027ef0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027ef4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027ef8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027efc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027f00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027f04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027f08:	ee12 2a90 	vmov	r2, s5
 8027f0c:	eef0 2a47 	vmov.f32	s5, s14
 8027f10:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f14:	ee13 2a10 	vmov	r2, s6
 8027f18:	9327      	str	r3, [sp, #156]	; 0x9c
 8027f1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027f1c:	eeb0 3a67 	vmov.f32	s6, s15
 8027f20:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f24:	9328      	str	r3, [sp, #160]	; 0xa0
 8027f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027f2a:	3b01      	subs	r3, #1
 8027f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8027f2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027f30:	bf08      	it	eq
 8027f32:	4613      	moveq	r3, r2
 8027f34:	9306      	str	r3, [sp, #24]
 8027f36:	e6d7      	b.n	8027ce8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027f38:	f110 0c01 	adds.w	ip, r0, #1
 8027f3c:	d483      	bmi.n	8027e46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8027f3e:	4563      	cmp	r3, ip
 8027f40:	db81      	blt.n	8027e46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8027f42:	f115 0c01 	adds.w	ip, r5, #1
 8027f46:	f53f af7e 	bmi.w	8027e46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8027f4a:	4567      	cmp	r7, ip
 8027f4c:	f6ff af7b 	blt.w	8027e46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8027f50:	b23f      	sxth	r7, r7
 8027f52:	b21b      	sxth	r3, r3
 8027f54:	9700      	str	r7, [sp, #0]
 8027f56:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8027f5a:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8027f5e:	9a08      	ldr	r2, [sp, #32]
 8027f60:	4631      	mov	r1, r6
 8027f62:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027f64:	f7ff fdf9 	bl	8027b5a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8027f68:	e76d      	b.n	8027e46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8027f6a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027f6c:	ea4f 402b 	mov.w	r0, fp, asr #16
 8027f70:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8027f74:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027f78:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8027f7c:	1421      	asrs	r1, r4, #16
 8027f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8027f80:	fb0c 0101 	mla	r1, ip, r1, r0
 8027f84:	9808      	ldr	r0, [sp, #32]
 8027f86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027f8a:	1845      	adds	r5, r0, r1
 8027f8c:	5c40      	ldrb	r0, [r0, r1]
 8027f8e:	796f      	ldrb	r7, [r5, #5]
 8027f90:	7869      	ldrb	r1, [r5, #1]
 8027f92:	f895 8002 	ldrb.w	r8, [r5, #2]
 8027f96:	f895 a003 	ldrb.w	sl, [r5, #3]
 8027f9a:	f895 9004 	ldrb.w	r9, [r5, #4]
 8027f9e:	970c      	str	r7, [sp, #48]	; 0x30
 8027fa0:	b1a2      	cbz	r2, 8027fcc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8027fa2:	2703      	movs	r7, #3
 8027fa4:	f06f 0304 	mvn.w	r3, #4
 8027fa8:	3505      	adds	r5, #5
 8027faa:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8027fae:	eb05 070c 	add.w	r7, r5, ip
 8027fb2:	f815 500c 	ldrb.w	r5, [r5, ip]
 8027fb6:	9513      	str	r5, [sp, #76]	; 0x4c
 8027fb8:	787d      	ldrb	r5, [r7, #1]
 8027fba:	9515      	str	r5, [sp, #84]	; 0x54
 8027fbc:	78bd      	ldrb	r5, [r7, #2]
 8027fbe:	9517      	str	r5, [sp, #92]	; 0x5c
 8027fc0:	78fd      	ldrb	r5, [r7, #3]
 8027fc2:	9514      	str	r5, [sp, #80]	; 0x50
 8027fc4:	793d      	ldrb	r5, [r7, #4]
 8027fc6:	9516      	str	r5, [sp, #88]	; 0x58
 8027fc8:	797d      	ldrb	r5, [r7, #5]
 8027fca:	9518      	str	r5, [sp, #96]	; 0x60
 8027fcc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8027fd0:	b292      	uxth	r2, r2
 8027fd2:	3603      	adds	r6, #3
 8027fd4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8027fd8:	fb03 f502 	mul.w	r5, r3, r2
 8027fdc:	011b      	lsls	r3, r3, #4
 8027fde:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8027fe2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8027fe6:	1b5b      	subs	r3, r3, r5
 8027fe8:	b292      	uxth	r2, r2
 8027fea:	b29b      	uxth	r3, r3
 8027fec:	1abf      	subs	r7, r7, r2
 8027fee:	fb03 f909 	mul.w	r9, r3, r9
 8027ff2:	b2bf      	uxth	r7, r7
 8027ff4:	fb03 fa0a 	mul.w	sl, r3, sl
 8027ff8:	fb07 9901 	mla	r9, r7, r1, r9
 8027ffc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027ffe:	fb07 aa00 	mla	sl, r7, r0, sl
 8028002:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8028004:	fb02 9901 	mla	r9, r2, r1, r9
 8028008:	9916      	ldr	r1, [sp, #88]	; 0x58
 802800a:	fb02 aa00 	mla	sl, r2, r0, sl
 802800e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8028010:	fb05 9901 	mla	r9, r5, r1, r9
 8028014:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028016:	fb05 aa00 	mla	sl, r5, r0, sl
 802801a:	434b      	muls	r3, r1
 802801c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802801e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8028022:	fb07 3308 	mla	r3, r7, r8, r3
 8028026:	ea4f 2929 	mov.w	r9, r9, asr #8
 802802a:	f806 ac06 	strb.w	sl, [r6, #-6]
 802802e:	fb02 3201 	mla	r2, r2, r1, r3
 8028032:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028034:	f806 9c05 	strb.w	r9, [r6, #-5]
 8028038:	fb05 2503 	mla	r5, r5, r3, r2
 802803c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802803e:	122d      	asrs	r5, r5, #8
 8028040:	449b      	add	fp, r3
 8028042:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028044:	f806 5c04 	strb.w	r5, [r6, #-4]
 8028048:	441c      	add	r4, r3
 802804a:	e72b      	b.n	8027ea4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802804c:	b01b      	add	sp, #108	; 0x6c
 802804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028052 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8028052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028056:	b087      	sub	sp, #28
 8028058:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 802805c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8028060:	fb05 7003 	mla	r0, r5, r3, r7
 8028064:	2d00      	cmp	r5, #0
 8028066:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802806a:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 802806e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8028072:	f2c0 811f 	blt.w	80282b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8028076:	45a8      	cmp	r8, r5
 8028078:	f340 811c 	ble.w	80282b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802807c:	2f00      	cmp	r7, #0
 802807e:	f2c0 8117 	blt.w	80282b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8028082:	42bb      	cmp	r3, r7
 8028084:	f340 8114 	ble.w	80282b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8028088:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 802808c:	1c7a      	adds	r2, r7, #1
 802808e:	f100 8114 	bmi.w	80282ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8028092:	4293      	cmp	r3, r2
 8028094:	f340 8111 	ble.w	80282ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8028098:	2c00      	cmp	r4, #0
 802809a:	f000 8110 	beq.w	80282be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 802809e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80280a2:	3501      	adds	r5, #1
 80280a4:	f100 810f 	bmi.w	80282c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80280a8:	45a8      	cmp	r8, r5
 80280aa:	f340 810c 	ble.w	80282c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80280ae:	f1be 0f00 	cmp.w	lr, #0
 80280b2:	f000 810b 	beq.w	80282cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 80280b6:	2f00      	cmp	r7, #0
 80280b8:	f2c0 8103 	blt.w	80282c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80280bc:	42bb      	cmp	r3, r7
 80280be:	f340 8100 	ble.w	80282c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80280c2:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80280c6:	3701      	adds	r7, #1
 80280c8:	f100 8103 	bmi.w	80282d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80280cc:	42bb      	cmp	r3, r7
 80280ce:	f340 8100 	ble.w	80282d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80280d2:	2c00      	cmp	r4, #0
 80280d4:	f000 80ff 	beq.w	80282d6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80280d8:	3301      	adds	r3, #1
 80280da:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80280de:	fa1f fc84 	uxth.w	ip, r4
 80280e2:	fa1f fe8e 	uxth.w	lr, lr
 80280e6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80280ea:	fb0c f90e 	mul.w	r9, ip, lr
 80280ee:	0e13      	lsrs	r3, r2, #24
 80280f0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80280f4:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80280f8:	9302      	str	r3, [sp, #8]
 80280fa:	ebac 0709 	sub.w	r7, ip, r9
 80280fe:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8028102:	fa1f f48e 	uxth.w	r4, lr
 8028106:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 802810a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802810e:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8028112:	fb0a fe0e 	mul.w	lr, sl, lr
 8028116:	1b1b      	subs	r3, r3, r4
 8028118:	fb0a f606 	mul.w	r6, sl, r6
 802811c:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8028120:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8028124:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028128:	b29b      	uxth	r3, r3
 802812a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802812e:	b2bf      	uxth	r7, r7
 8028130:	9301      	str	r3, [sp, #4]
 8028132:	44e6      	add	lr, ip
 8028134:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8028138:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802813c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8028140:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8028144:	9303      	str	r3, [sp, #12]
 8028146:	0a33      	lsrs	r3, r6, #8
 8028148:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 802814c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028150:	9304      	str	r3, [sp, #16]
 8028152:	fb0b f606 	mul.w	r6, fp, r6
 8028156:	fb0b f000 	mul.w	r0, fp, r0
 802815a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802815e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8028162:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028166:	44b6      	add	lr, r6
 8028168:	f500 7680 	add.w	r6, r0, #256	; 0x100
 802816c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8028170:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8028174:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028178:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802817c:	fb08 f606 	mul.w	r6, r8, r6
 8028180:	0a03      	lsrs	r3, r0, #8
 8028182:	fb08 f505 	mul.w	r5, r8, r5
 8028186:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802818a:	0a30      	lsrs	r0, r6, #8
 802818c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8028190:	9305      	str	r3, [sp, #20]
 8028192:	0e13      	lsrs	r3, r2, #24
 8028194:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028198:	fb0e fe07 	mul.w	lr, lr, r7
 802819c:	4430      	add	r0, r6
 802819e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80281a2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80281a6:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80281aa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80281ae:	0a00      	lsrs	r0, r0, #8
 80281b0:	435e      	muls	r6, r3
 80281b2:	0a2d      	lsrs	r5, r5, #8
 80281b4:	435a      	muls	r2, r3
 80281b6:	9b03      	ldr	r3, [sp, #12]
 80281b8:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80281bc:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80281c0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80281c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80281c8:	44b4      	add	ip, r6
 80281ca:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80281ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80281d2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80281d6:	9e01      	ldr	r6, [sp, #4]
 80281d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80281dc:	fb03 ee06 	mla	lr, r3, r6, lr
 80281e0:	9b04      	ldr	r3, [sp, #16]
 80281e2:	0a12      	lsrs	r2, r2, #8
 80281e4:	fb0c ee09 	mla	lr, ip, r9, lr
 80281e8:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80281ec:	9b05      	ldr	r3, [sp, #20]
 80281ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80281f2:	fb00 ee04 	mla	lr, r0, r4, lr
 80281f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80281fa:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80281fe:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8028202:	9b01      	ldr	r3, [sp, #4]
 8028204:	fb07 fe0e 	mul.w	lr, r7, lr
 8028208:	fb07 f70b 	mul.w	r7, r7, fp
 802820c:	fb03 ee06 	mla	lr, r3, r6, lr
 8028210:	fb03 730a 	mla	r3, r3, sl, r7
 8028214:	fb09 e202 	mla	r2, r9, r2, lr
 8028218:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802821c:	fb04 2e0e 	mla	lr, r4, lr, r2
 8028220:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8028224:	fb04 3408 	mla	r4, r4, r8, r3
 8028228:	9b02      	ldr	r3, [sp, #8]
 802822a:	b292      	uxth	r2, r2
 802822c:	fb09 4903 	mla	r9, r9, r3, r4
 8028230:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028234:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8028238:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802823c:	fb09 f902 	mul.w	r9, r9, r2
 8028240:	ea40 0e0e 	orr.w	lr, r0, lr
 8028244:	f109 0301 	add.w	r3, r9, #1
 8028248:	fa5f f08e 	uxtb.w	r0, lr
 802824c:	fb10 f002 	smulbb	r0, r0, r2
 8028250:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8028254:	780b      	ldrb	r3, [r1, #0]
 8028256:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 802825a:	fa5f f989 	uxtb.w	r9, r9
 802825e:	fb03 0309 	mla	r3, r3, r9, r0
 8028262:	b29b      	uxth	r3, r3
 8028264:	1c58      	adds	r0, r3, #1
 8028266:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802826a:	7848      	ldrb	r0, [r1, #1]
 802826c:	fb10 f009 	smulbb	r0, r0, r9
 8028270:	121b      	asrs	r3, r3, #8
 8028272:	700b      	strb	r3, [r1, #0]
 8028274:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8028278:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802827c:	fb03 0302 	mla	r3, r3, r2, r0
 8028280:	b29b      	uxth	r3, r3
 8028282:	1c58      	adds	r0, r3, #1
 8028284:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028288:	121b      	asrs	r3, r3, #8
 802828a:	704b      	strb	r3, [r1, #1]
 802828c:	788b      	ldrb	r3, [r1, #2]
 802828e:	fb13 f909 	smulbb	r9, r3, r9
 8028292:	fb0e 9e02 	mla	lr, lr, r2, r9
 8028296:	fa1f fe8e 	uxth.w	lr, lr
 802829a:	f10e 0301 	add.w	r3, lr, #1
 802829e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80282a2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80282a6:	f881 e002 	strb.w	lr, [r1, #2]
 80282aa:	b007      	add	sp, #28
 80282ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80282b0:	2600      	movs	r6, #0
 80282b2:	e6eb      	b.n	802808c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 80282b4:	2000      	movs	r0, #0
 80282b6:	4606      	mov	r6, r0
 80282b8:	e6f3      	b.n	80280a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80282ba:	2000      	movs	r0, #0
 80282bc:	e6f1      	b.n	80280a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80282be:	4620      	mov	r0, r4
 80282c0:	e6ef      	b.n	80280a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80282c2:	2500      	movs	r5, #0
 80282c4:	e6ff      	b.n	80280c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 80282c6:	2200      	movs	r2, #0
 80282c8:	4615      	mov	r5, r2
 80282ca:	e708      	b.n	80280de <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80282cc:	4672      	mov	r2, lr
 80282ce:	4675      	mov	r5, lr
 80282d0:	e705      	b.n	80280de <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80282d2:	2200      	movs	r2, #0
 80282d4:	e703      	b.n	80280de <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80282d6:	4622      	mov	r2, r4
 80282d8:	e701      	b.n	80280de <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080282da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80282da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282de:	b09d      	sub	sp, #116	; 0x74
 80282e0:	9219      	str	r2, [sp, #100]	; 0x64
 80282e2:	9307      	str	r3, [sp, #28]
 80282e4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80282e6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80282ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80282ec:	931a      	str	r3, [sp, #104]	; 0x68
 80282ee:	6850      	ldr	r0, [r2, #4]
 80282f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80282f2:	6812      	ldr	r2, [r2, #0]
 80282f4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80282f8:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80282fc:	fb00 1303 	mla	r3, r0, r3, r1
 8028300:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028304:	18d3      	adds	r3, r2, r3
 8028306:	930a      	str	r3, [sp, #40]	; 0x28
 8028308:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802830a:	681b      	ldr	r3, [r3, #0]
 802830c:	9310      	str	r3, [sp, #64]	; 0x40
 802830e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8028312:	930b      	str	r3, [sp, #44]	; 0x2c
 8028314:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028316:	2b00      	cmp	r3, #0
 8028318:	dc03      	bgt.n	8028322 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802831a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802831c:	2b00      	cmp	r3, #0
 802831e:	f340 8368 	ble.w	80289f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8028322:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028324:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028328:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802832c:	1e48      	subs	r0, r1, #1
 802832e:	1e57      	subs	r7, r2, #1
 8028330:	9b07      	ldr	r3, [sp, #28]
 8028332:	2b00      	cmp	r3, #0
 8028334:	f340 8187 	ble.w	8028646 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8028338:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802833c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028340:	d406      	bmi.n	8028350 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028342:	4584      	cmp	ip, r0
 8028344:	da04      	bge.n	8028350 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028346:	2b00      	cmp	r3, #0
 8028348:	db02      	blt.n	8028350 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802834a:	42bb      	cmp	r3, r7
 802834c:	f2c0 817c 	blt.w	8028648 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8028350:	f11c 0c01 	adds.w	ip, ip, #1
 8028354:	f100 816c 	bmi.w	8028630 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028358:	4561      	cmp	r1, ip
 802835a:	f2c0 8169 	blt.w	8028630 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802835e:	3301      	adds	r3, #1
 8028360:	f100 8166 	bmi.w	8028630 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028364:	429a      	cmp	r2, r3
 8028366:	f2c0 8163 	blt.w	8028630 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802836a:	9b07      	ldr	r3, [sp, #28]
 802836c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802836e:	9318      	str	r3, [sp, #96]	; 0x60
 8028370:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028372:	2b00      	cmp	r3, #0
 8028374:	f340 8186 	ble.w	8028684 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8028378:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802837a:	142a      	asrs	r2, r5, #16
 802837c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028380:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8028384:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028388:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802838c:	f100 81cb 	bmi.w	8028726 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8028390:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028394:	4542      	cmp	r2, r8
 8028396:	f280 81c6 	bge.w	8028726 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802839a:	2800      	cmp	r0, #0
 802839c:	f2c0 81c3 	blt.w	8028726 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80283a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80283a4:	4540      	cmp	r0, r8
 80283a6:	f280 81be 	bge.w	8028726 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80283aa:	fa0f f38e 	sxth.w	r3, lr
 80283ae:	fb00 2203 	mla	r2, r0, r3, r2
 80283b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80283b4:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80283b8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80283bc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80283c0:	2900      	cmp	r1, #0
 80283c2:	f000 81a6 	beq.w	8028712 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80283c6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80283ca:	900c      	str	r0, [sp, #48]	; 0x30
 80283cc:	0e00      	lsrs	r0, r0, #24
 80283ce:	9013      	str	r0, [sp, #76]	; 0x4c
 80283d0:	f1bc 0f00 	cmp.w	ip, #0
 80283d4:	d00f      	beq.n	80283f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80283d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80283da:	3b01      	subs	r3, #1
 80283dc:	009b      	lsls	r3, r3, #2
 80283de:	3304      	adds	r3, #4
 80283e0:	eb08 0003 	add.w	r0, r8, r3
 80283e4:	f858 3003 	ldr.w	r3, [r8, r3]
 80283e8:	9308      	str	r3, [sp, #32]
 80283ea:	0e1b      	lsrs	r3, r3, #24
 80283ec:	9311      	str	r3, [sp, #68]	; 0x44
 80283ee:	6843      	ldr	r3, [r0, #4]
 80283f0:	930d      	str	r3, [sp, #52]	; 0x34
 80283f2:	0e1b      	lsrs	r3, r3, #24
 80283f4:	9314      	str	r3, [sp, #80]	; 0x50
 80283f6:	b289      	uxth	r1, r1
 80283f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80283fa:	fa1f fc8c 	uxth.w	ip, ip
 80283fe:	0108      	lsls	r0, r1, #4
 8028400:	fb01 f90c 	mul.w	r9, r1, ip
 8028404:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8028408:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 802840c:	eba0 0809 	sub.w	r8, r0, r9
 8028410:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8028412:	fa1f f18c 	uxth.w	r1, ip
 8028416:	fa1f f888 	uxth.w	r8, r8
 802841a:	1a5b      	subs	r3, r3, r1
 802841c:	fb08 f000 	mul.w	r0, r8, r0
 8028420:	b29b      	uxth	r3, r3
 8028422:	fb03 000e 	mla	r0, r3, lr, r0
 8028426:	fb01 0004 	mla	r0, r1, r4, r0
 802842a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802842c:	fb09 0004 	mla	r0, r9, r4, r0
 8028430:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028434:	2800      	cmp	r0, #0
 8028436:	f000 80f2 	beq.w	802861e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802843a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802843e:	d01b      	beq.n	8028478 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8028440:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028444:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028448:	fb0e fa0a 	mul.w	sl, lr, sl
 802844c:	fb0e fe02 	mul.w	lr, lr, r2
 8028450:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028454:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028458:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802845c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028460:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028464:	4452      	add	r2, sl
 8028466:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802846a:	0a12      	lsrs	r2, r2, #8
 802846c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028470:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028474:	ea42 020c 	orr.w	r2, r2, ip
 8028478:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802847a:	2cff      	cmp	r4, #255	; 0xff
 802847c:	d021      	beq.n	80284c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802847e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028480:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8028484:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028486:	fb04 fb0b 	mul.w	fp, r4, fp
 802848a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802848c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028490:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028492:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028496:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802849a:	fb04 fa0a 	mul.w	sl, r4, sl
 802849e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80284a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80284a6:	44de      	add	lr, fp
 80284a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80284ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80284b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80284b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80284bc:	ea4e 040a 	orr.w	r4, lr, sl
 80284c0:	940c      	str	r4, [sp, #48]	; 0x30
 80284c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80284c4:	2cff      	cmp	r4, #255	; 0xff
 80284c6:	d021      	beq.n	802850c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80284c8:	9c08      	ldr	r4, [sp, #32]
 80284ca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80284ce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80284d0:	fb04 fb0b 	mul.w	fp, r4, fp
 80284d4:	9c08      	ldr	r4, [sp, #32]
 80284d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80284da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80284dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80284e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80284e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80284e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80284ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80284f0:	44de      	add	lr, fp
 80284f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80284f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80284fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028502:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028506:	ea4e 040a 	orr.w	r4, lr, sl
 802850a:	9408      	str	r4, [sp, #32]
 802850c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802850e:	2cff      	cmp	r4, #255	; 0xff
 8028510:	d021      	beq.n	8028556 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8028512:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028514:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8028518:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802851a:	fb04 fb0b 	mul.w	fp, r4, fp
 802851e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028520:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028524:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028526:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802852a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802852e:	fb04 fa0a 	mul.w	sl, r4, sl
 8028532:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028536:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802853a:	44de      	add	lr, fp
 802853c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028540:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028544:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028548:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802854c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028550:	ea4e 040a 	orr.w	r4, lr, sl
 8028554:	940d      	str	r4, [sp, #52]	; 0x34
 8028556:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028558:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802855c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028560:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028564:	9c08      	ldr	r4, [sp, #32]
 8028566:	fb08 fc0c 	mul.w	ip, r8, ip
 802856a:	fb03 cc0e 	mla	ip, r3, lr, ip
 802856e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028572:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028574:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028578:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802857c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802857e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028582:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8028586:	fb08 f80e 	mul.w	r8, r8, lr
 802858a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802858e:	fb03 8202 	mla	r2, r3, r2, r8
 8028592:	9b08      	ldr	r3, [sp, #32]
 8028594:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028598:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802859c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802859e:	fb01 220a 	mla	r2, r1, sl, r2
 80285a2:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80285a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80285a8:	fb09 2901 	mla	r9, r9, r1, r2
 80285ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80285ae:	4343      	muls	r3, r0
 80285b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80285b4:	1c58      	adds	r0, r3, #1
 80285b6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80285ba:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80285be:	783b      	ldrb	r3, [r7, #0]
 80285c0:	ea4c 0c09 	orr.w	ip, ip, r9
 80285c4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80285c8:	fa5f f28c 	uxtb.w	r2, ip
 80285cc:	b2c0      	uxtb	r0, r0
 80285ce:	fb12 f201 	smulbb	r2, r2, r1
 80285d2:	fb03 2300 	mla	r3, r3, r0, r2
 80285d6:	b29b      	uxth	r3, r3
 80285d8:	1c5a      	adds	r2, r3, #1
 80285da:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80285de:	787a      	ldrb	r2, [r7, #1]
 80285e0:	fb12 f200 	smulbb	r2, r2, r0
 80285e4:	121b      	asrs	r3, r3, #8
 80285e6:	703b      	strb	r3, [r7, #0]
 80285e8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80285ec:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80285f0:	fb03 2301 	mla	r3, r3, r1, r2
 80285f4:	b29b      	uxth	r3, r3
 80285f6:	1c5a      	adds	r2, r3, #1
 80285f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80285fc:	121b      	asrs	r3, r3, #8
 80285fe:	707b      	strb	r3, [r7, #1]
 8028600:	78bb      	ldrb	r3, [r7, #2]
 8028602:	fb13 f000 	smulbb	r0, r3, r0
 8028606:	fb0c 0c01 	mla	ip, ip, r1, r0
 802860a:	fa1f fc8c 	uxth.w	ip, ip
 802860e:	f10c 0301 	add.w	r3, ip, #1
 8028612:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028616:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802861a:	f887 c002 	strb.w	ip, [r7, #2]
 802861e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028620:	3703      	adds	r7, #3
 8028622:	441d      	add	r5, r3
 8028624:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028626:	441e      	add	r6, r3
 8028628:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802862a:	3b01      	subs	r3, #1
 802862c:	9318      	str	r3, [sp, #96]	; 0x60
 802862e:	e69f      	b.n	8028370 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028630:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028632:	441d      	add	r5, r3
 8028634:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028636:	441e      	add	r6, r3
 8028638:	9b07      	ldr	r3, [sp, #28]
 802863a:	3b01      	subs	r3, #1
 802863c:	9307      	str	r3, [sp, #28]
 802863e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028640:	3303      	adds	r3, #3
 8028642:	930a      	str	r3, [sp, #40]	; 0x28
 8028644:	e674      	b.n	8028330 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8028646:	d025      	beq.n	8028694 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8028648:	9b07      	ldr	r3, [sp, #28]
 802864a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802864c:	3b01      	subs	r3, #1
 802864e:	fb00 5003 	mla	r0, r0, r3, r5
 8028652:	1400      	asrs	r0, r0, #16
 8028654:	f53f ae89 	bmi.w	802836a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028658:	3901      	subs	r1, #1
 802865a:	4288      	cmp	r0, r1
 802865c:	f6bf ae85 	bge.w	802836a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028660:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8028662:	fb01 6303 	mla	r3, r1, r3, r6
 8028666:	141b      	asrs	r3, r3, #16
 8028668:	f53f ae7f 	bmi.w	802836a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802866c:	3a01      	subs	r2, #1
 802866e:	4293      	cmp	r3, r2
 8028670:	f6bf ae7b 	bge.w	802836a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028676:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802867a:	f103 0e03 	add.w	lr, r3, #3
 802867e:	f1bb 0f00 	cmp.w	fp, #0
 8028682:	dc6e      	bgt.n	8028762 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8028684:	9b07      	ldr	r3, [sp, #28]
 8028686:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802868a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802868c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028690:	4423      	add	r3, r4
 8028692:	930a      	str	r3, [sp, #40]	; 0x28
 8028694:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028696:	2b00      	cmp	r3, #0
 8028698:	f340 81ab 	ble.w	80289f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802869c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80286a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80286a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80286a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80286aa:	eef0 6a62 	vmov.f32	s13, s5
 80286ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80286b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80286b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80286ba:	ee16 5a90 	vmov	r5, s13
 80286be:	eef0 6a43 	vmov.f32	s13, s6
 80286c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80286c6:	ee16 6a90 	vmov	r6, s13
 80286ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80286ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80286d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80286d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80286da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80286de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80286e2:	ee12 2a90 	vmov	r2, s5
 80286e6:	eef0 2a47 	vmov.f32	s5, s14
 80286ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80286ee:	ee13 2a10 	vmov	r2, s6
 80286f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80286f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80286f6:	eeb0 3a67 	vmov.f32	s6, s15
 80286fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80286fe:	932a      	str	r3, [sp, #168]	; 0xa8
 8028700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028702:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8028704:	3b01      	subs	r3, #1
 8028706:	9317      	str	r3, [sp, #92]	; 0x5c
 8028708:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802870a:	bf08      	it	eq
 802870c:	4613      	moveq	r3, r2
 802870e:	9307      	str	r3, [sp, #28]
 8028710:	e600      	b.n	8028314 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028712:	f1bc 0f00 	cmp.w	ip, #0
 8028716:	f43f ae6e 	beq.w	80283f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802871a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802871e:	9308      	str	r3, [sp, #32]
 8028720:	0e1b      	lsrs	r3, r3, #24
 8028722:	9311      	str	r3, [sp, #68]	; 0x44
 8028724:	e667      	b.n	80283f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028726:	f112 0801 	adds.w	r8, r2, #1
 802872a:	f53f af78 	bmi.w	802861e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802872e:	45c6      	cmp	lr, r8
 8028730:	f6ff af75 	blt.w	802861e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028734:	f110 0801 	adds.w	r8, r0, #1
 8028738:	f53f af71 	bmi.w	802861e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802873c:	4543      	cmp	r3, r8
 802873e:	f6ff af6e 	blt.w	802861e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028742:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8028744:	b21b      	sxth	r3, r3
 8028746:	9201      	str	r2, [sp, #4]
 8028748:	9300      	str	r3, [sp, #0]
 802874a:	fa0f f38e 	sxth.w	r3, lr
 802874e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028754:	e9cd c404 	strd	ip, r4, [sp, #16]
 8028758:	4639      	mov	r1, r7
 802875a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802875c:	f7ff fc79 	bl	8028052 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8028760:	e75d      	b.n	802861e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028762:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028764:	142f      	asrs	r7, r5, #16
 8028766:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028768:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802876c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8028770:	1433      	asrs	r3, r6, #16
 8028772:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028776:	fb02 7303 	mla	r3, r2, r3, r7
 802877a:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 802877e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8028782:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028786:	2900      	cmp	r1, #0
 8028788:	f000 812a 	beq.w	80289e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802878c:	687c      	ldr	r4, [r7, #4]
 802878e:	940e      	str	r4, [sp, #56]	; 0x38
 8028790:	0e24      	lsrs	r4, r4, #24
 8028792:	9415      	str	r4, [sp, #84]	; 0x54
 8028794:	b178      	cbz	r0, 80287b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8028796:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 802879a:	3a01      	subs	r2, #1
 802879c:	0092      	lsls	r2, r2, #2
 802879e:	3204      	adds	r2, #4
 80287a0:	eb07 0802 	add.w	r8, r7, r2
 80287a4:	58ba      	ldr	r2, [r7, r2]
 80287a6:	9209      	str	r2, [sp, #36]	; 0x24
 80287a8:	0e12      	lsrs	r2, r2, #24
 80287aa:	9212      	str	r2, [sp, #72]	; 0x48
 80287ac:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80287b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80287b2:	0e12      	lsrs	r2, r2, #24
 80287b4:	9216      	str	r2, [sp, #88]	; 0x58
 80287b6:	b289      	uxth	r1, r1
 80287b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80287ba:	b280      	uxth	r0, r0
 80287bc:	fb01 f900 	mul.w	r9, r1, r0
 80287c0:	0109      	lsls	r1, r1, #4
 80287c2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80287c6:	eba1 0809 	sub.w	r8, r1, r9
 80287ca:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80287ce:	9915      	ldr	r1, [sp, #84]	; 0x54
 80287d0:	b280      	uxth	r0, r0
 80287d2:	fa1f f888 	uxth.w	r8, r8
 80287d6:	1a12      	subs	r2, r2, r0
 80287d8:	fb08 f101 	mul.w	r1, r8, r1
 80287dc:	b292      	uxth	r2, r2
 80287de:	fb02 110c 	mla	r1, r2, ip, r1
 80287e2:	fb00 1104 	mla	r1, r0, r4, r1
 80287e6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80287e8:	fb09 1104 	mla	r1, r9, r4, r1
 80287ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80287f0:	2900      	cmp	r1, #0
 80287f2:	f000 80ec 	beq.w	80289ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80287f6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80287fa:	d019      	beq.n	8028830 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80287fc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028800:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028804:	fb0c fa0a 	mul.w	sl, ip, sl
 8028808:	fb0c fc03 	mul.w	ip, ip, r3
 802880c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028810:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028814:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028818:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802881c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028820:	4453      	add	r3, sl
 8028822:	0a3f      	lsrs	r7, r7, #8
 8028824:	0a1b      	lsrs	r3, r3, #8
 8028826:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802882a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802882e:	433b      	orrs	r3, r7
 8028830:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8028832:	2cff      	cmp	r4, #255	; 0xff
 8028834:	d020      	beq.n	8028878 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8028836:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028838:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802883c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802883e:	4367      	muls	r7, r4
 8028840:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028842:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028846:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802884a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802884c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028850:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028854:	fb04 fa0a 	mul.w	sl, r4, sl
 8028858:	44bc      	add	ip, r7
 802885a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802885e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028862:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028866:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802886a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802886e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028872:	ea4c 040a 	orr.w	r4, ip, sl
 8028876:	940e      	str	r4, [sp, #56]	; 0x38
 8028878:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802887a:	2cff      	cmp	r4, #255	; 0xff
 802887c:	d020      	beq.n	80288c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 802887e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028880:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028884:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028886:	4367      	muls	r7, r4
 8028888:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802888a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802888e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028892:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028894:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028898:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802889c:	fb04 fa0a 	mul.w	sl, r4, sl
 80288a0:	44bc      	add	ip, r7
 80288a2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80288a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80288aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80288ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80288b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80288b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80288ba:	ea4c 040a 	orr.w	r4, ip, sl
 80288be:	9409      	str	r4, [sp, #36]	; 0x24
 80288c0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80288c2:	2cff      	cmp	r4, #255	; 0xff
 80288c4:	d020      	beq.n	8028908 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80288c6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80288c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80288cc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80288ce:	4367      	muls	r7, r4
 80288d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80288d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80288d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80288da:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80288dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80288e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80288e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80288e8:	44bc      	add	ip, r7
 80288ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80288ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80288f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80288f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80288fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80288fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028902:	ea4c 040a 	orr.w	r4, ip, sl
 8028906:	940f      	str	r4, [sp, #60]	; 0x3c
 8028908:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802890a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802890e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028912:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028916:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028918:	fb08 f707 	mul.w	r7, r8, r7
 802891c:	fb02 770c 	mla	r7, r2, ip, r7
 8028920:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028924:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028926:	fb00 770c 	mla	r7, r0, ip, r7
 802892a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802892e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028930:	fb09 770c 	mla	r7, r9, ip, r7
 8028934:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8028938:	fb08 f80c 	mul.w	r8, r8, ip
 802893c:	0a3f      	lsrs	r7, r7, #8
 802893e:	fb02 8303 	mla	r3, r2, r3, r8
 8028942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028944:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028948:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802894c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802894e:	fb00 330a 	mla	r3, r0, sl, r3
 8028952:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028956:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8028958:	fb09 3c0c 	mla	ip, r9, ip, r3
 802895c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802895e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028962:	434b      	muls	r3, r1
 8028964:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028968:	1c59      	adds	r1, r3, #1
 802896a:	ea47 070c 	orr.w	r7, r7, ip
 802896e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028972:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8028976:	b2fa      	uxtb	r2, r7
 8028978:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802897c:	fb12 f200 	smulbb	r2, r2, r0
 8028980:	b2c9      	uxtb	r1, r1
 8028982:	fb03 2301 	mla	r3, r3, r1, r2
 8028986:	b29b      	uxth	r3, r3
 8028988:	1c5a      	adds	r2, r3, #1
 802898a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802898e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8028992:	fb12 f201 	smulbb	r2, r2, r1
 8028996:	121b      	asrs	r3, r3, #8
 8028998:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802899c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80289a0:	0c3f      	lsrs	r7, r7, #16
 80289a2:	fb03 2300 	mla	r3, r3, r0, r2
 80289a6:	b29b      	uxth	r3, r3
 80289a8:	1c5a      	adds	r2, r3, #1
 80289aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80289ae:	121b      	asrs	r3, r3, #8
 80289b0:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80289b4:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80289b8:	fb13 f101 	smulbb	r1, r3, r1
 80289bc:	fb07 1700 	mla	r7, r7, r0, r1
 80289c0:	b2bf      	uxth	r7, r7
 80289c2:	1c79      	adds	r1, r7, #1
 80289c4:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80289c8:	123f      	asrs	r7, r7, #8
 80289ca:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80289ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80289d0:	f10e 0e03 	add.w	lr, lr, #3
 80289d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80289d8:	441d      	add	r5, r3
 80289da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80289dc:	441e      	add	r6, r3
 80289de:	e64e      	b.n	802867e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80289e0:	2800      	cmp	r0, #0
 80289e2:	f43f aee8 	beq.w	80287b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80289e6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80289ea:	9209      	str	r2, [sp, #36]	; 0x24
 80289ec:	0e12      	lsrs	r2, r2, #24
 80289ee:	9212      	str	r2, [sp, #72]	; 0x48
 80289f0:	e6e1      	b.n	80287b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80289f2:	b01d      	add	sp, #116	; 0x74
 80289f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080289f8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80289f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80289fc:	b087      	sub	sp, #28
 80289fe:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8028a02:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8028a06:	fb05 7003 	mla	r0, r5, r3, r7
 8028a0a:	2d00      	cmp	r5, #0
 8028a0c:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8028a10:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8028a14:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8028a18:	f2c0 810a 	blt.w	8028c30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8028a1c:	45a8      	cmp	r8, r5
 8028a1e:	f340 8107 	ble.w	8028c30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8028a22:	2f00      	cmp	r7, #0
 8028a24:	f2c0 8102 	blt.w	8028c2c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8028a28:	42bb      	cmp	r3, r7
 8028a2a:	f340 80ff 	ble.w	8028c2c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8028a2e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8028a32:	1c7a      	adds	r2, r7, #1
 8028a34:	f100 80ff 	bmi.w	8028c36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8028a38:	4293      	cmp	r3, r2
 8028a3a:	f340 80fc 	ble.w	8028c36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8028a3e:	2c00      	cmp	r4, #0
 8028a40:	f000 80fb 	beq.w	8028c3a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8028a44:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8028a48:	3501      	adds	r5, #1
 8028a4a:	f100 80fa 	bmi.w	8028c42 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8028a4e:	45a8      	cmp	r8, r5
 8028a50:	f340 80f7 	ble.w	8028c42 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8028a54:	f1be 0f00 	cmp.w	lr, #0
 8028a58:	f000 80f6 	beq.w	8028c48 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8028a5c:	2f00      	cmp	r7, #0
 8028a5e:	f2c0 80ee 	blt.w	8028c3e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8028a62:	42bb      	cmp	r3, r7
 8028a64:	f340 80eb 	ble.w	8028c3e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8028a68:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8028a6c:	3701      	adds	r7, #1
 8028a6e:	f100 80ee 	bmi.w	8028c4e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8028a72:	42bb      	cmp	r3, r7
 8028a74:	f340 80eb 	ble.w	8028c4e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8028a78:	2c00      	cmp	r4, #0
 8028a7a:	f000 80ea 	beq.w	8028c52 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8028a7e:	3301      	adds	r3, #1
 8028a80:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8028a84:	fa1f fc84 	uxth.w	ip, r4
 8028a88:	fa1f fe8e 	uxth.w	lr, lr
 8028a8c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8028a90:	fb0c f90e 	mul.w	r9, ip, lr
 8028a94:	0e13      	lsrs	r3, r2, #24
 8028a96:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8028a9a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8028a9e:	9302      	str	r3, [sp, #8]
 8028aa0:	ebac 0709 	sub.w	r7, ip, r9
 8028aa4:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8028aa8:	fa1f f48e 	uxth.w	r4, lr
 8028aac:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8028ab0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028ab4:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8028ab8:	fb0a fe0e 	mul.w	lr, sl, lr
 8028abc:	1b1b      	subs	r3, r3, r4
 8028abe:	fb0a f606 	mul.w	r6, sl, r6
 8028ac2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8028ac6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8028aca:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028ace:	b29b      	uxth	r3, r3
 8028ad0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028ad4:	b2bf      	uxth	r7, r7
 8028ad6:	9301      	str	r3, [sp, #4]
 8028ad8:	44e6      	add	lr, ip
 8028ada:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8028ade:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ae2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8028ae6:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8028aea:	9303      	str	r3, [sp, #12]
 8028aec:	0a33      	lsrs	r3, r6, #8
 8028aee:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8028af2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028af6:	9304      	str	r3, [sp, #16]
 8028af8:	fb0b f606 	mul.w	r6, fp, r6
 8028afc:	fb0b f000 	mul.w	r0, fp, r0
 8028b00:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8028b04:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8028b08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b0c:	44b6      	add	lr, r6
 8028b0e:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8028b12:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8028b16:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8028b1a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028b1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b22:	fb08 f606 	mul.w	r6, r8, r6
 8028b26:	0a03      	lsrs	r3, r0, #8
 8028b28:	fb08 f505 	mul.w	r5, r8, r5
 8028b2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b30:	0a30      	lsrs	r0, r6, #8
 8028b32:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8028b36:	9305      	str	r3, [sp, #20]
 8028b38:	0e13      	lsrs	r3, r2, #24
 8028b3a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028b3e:	fb0e fe07 	mul.w	lr, lr, r7
 8028b42:	4430      	add	r0, r6
 8028b44:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8028b48:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8028b4c:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8028b50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028b54:	0a00      	lsrs	r0, r0, #8
 8028b56:	435e      	muls	r6, r3
 8028b58:	0a2d      	lsrs	r5, r5, #8
 8028b5a:	435a      	muls	r2, r3
 8028b5c:	9b03      	ldr	r3, [sp, #12]
 8028b5e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8028b62:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8028b66:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028b6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028b6e:	44b4      	add	ip, r6
 8028b70:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8028b74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b78:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8028b7c:	9e01      	ldr	r6, [sp, #4]
 8028b7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028b82:	fb03 ee06 	mla	lr, r3, r6, lr
 8028b86:	9b04      	ldr	r3, [sp, #16]
 8028b88:	0a12      	lsrs	r2, r2, #8
 8028b8a:	fb0c ee09 	mla	lr, ip, r9, lr
 8028b8e:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8028b92:	9b05      	ldr	r3, [sp, #20]
 8028b94:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028b98:	fb00 ee04 	mla	lr, r0, r4, lr
 8028b9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ba0:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8028ba4:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8028ba8:	9b01      	ldr	r3, [sp, #4]
 8028baa:	fb07 fe0e 	mul.w	lr, r7, lr
 8028bae:	fb07 f70b 	mul.w	r7, r7, fp
 8028bb2:	fb03 ee06 	mla	lr, r3, r6, lr
 8028bb6:	fb03 730a 	mla	r3, r3, sl, r7
 8028bba:	fb09 e202 	mla	r2, r9, r2, lr
 8028bbe:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028bc2:	fb04 2e0e 	mla	lr, r4, lr, r2
 8028bc6:	fb04 3408 	mla	r4, r4, r8, r3
 8028bca:	9b02      	ldr	r3, [sp, #8]
 8028bcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028bd0:	fb09 4903 	mla	r9, r9, r3, r4
 8028bd4:	780b      	ldrb	r3, [r1, #0]
 8028bd6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028bda:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8028bde:	ea40 0e0e 	orr.w	lr, r0, lr
 8028be2:	fa5f f989 	uxtb.w	r9, r9
 8028be6:	fb03 f209 	mul.w	r2, r3, r9
 8028bea:	1c53      	adds	r3, r2, #1
 8028bec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028bf0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8028bf4:	700b      	strb	r3, [r1, #0]
 8028bf6:	784b      	ldrb	r3, [r1, #1]
 8028bf8:	fb03 f309 	mul.w	r3, r3, r9
 8028bfc:	1c5a      	adds	r2, r3, #1
 8028bfe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028c02:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8028c06:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8028c0a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028c0e:	704b      	strb	r3, [r1, #1]
 8028c10:	788b      	ldrb	r3, [r1, #2]
 8028c12:	fb03 f909 	mul.w	r9, r3, r9
 8028c16:	f109 0301 	add.w	r3, r9, #1
 8028c1a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8028c1e:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8028c22:	f881 e002 	strb.w	lr, [r1, #2]
 8028c26:	b007      	add	sp, #28
 8028c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c2c:	2600      	movs	r6, #0
 8028c2e:	e700      	b.n	8028a32 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8028c30:	2000      	movs	r0, #0
 8028c32:	4606      	mov	r6, r0
 8028c34:	e708      	b.n	8028a48 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8028c36:	2000      	movs	r0, #0
 8028c38:	e706      	b.n	8028a48 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8028c3a:	4620      	mov	r0, r4
 8028c3c:	e704      	b.n	8028a48 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8028c3e:	2500      	movs	r5, #0
 8028c40:	e714      	b.n	8028a6c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8028c42:	2200      	movs	r2, #0
 8028c44:	4615      	mov	r5, r2
 8028c46:	e71d      	b.n	8028a84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8028c48:	4672      	mov	r2, lr
 8028c4a:	4675      	mov	r5, lr
 8028c4c:	e71a      	b.n	8028a84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8028c4e:	2200      	movs	r2, #0
 8028c50:	e718      	b.n	8028a84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8028c52:	4622      	mov	r2, r4
 8028c54:	e716      	b.n	8028a84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08028c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028c56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c5a:	b099      	sub	sp, #100	; 0x64
 8028c5c:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8028c60:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8028c62:	9017      	str	r0, [sp, #92]	; 0x5c
 8028c64:	9306      	str	r3, [sp, #24]
 8028c66:	6850      	ldr	r0, [r2, #4]
 8028c68:	6812      	ldr	r2, [r2, #0]
 8028c6a:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8028c6e:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8028c72:	fb00 1303 	mla	r3, r0, r3, r1
 8028c76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028c7a:	18d3      	adds	r3, r2, r3
 8028c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8028c7e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028c80:	681b      	ldr	r3, [r3, #0]
 8028c82:	930e      	str	r3, [sp, #56]	; 0x38
 8028c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028c86:	2b00      	cmp	r3, #0
 8028c88:	dc03      	bgt.n	8028c92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8028c8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028c8c:	2b00      	cmp	r3, #0
 8028c8e:	f340 8360 	ble.w	8029352 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8028c92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028c94:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028c98:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028c9c:	1e48      	subs	r0, r1, #1
 8028c9e:	1e57      	subs	r7, r2, #1
 8028ca0:	9b06      	ldr	r3, [sp, #24]
 8028ca2:	2b00      	cmp	r3, #0
 8028ca4:	f340 817b 	ble.w	8028f9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8028ca8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8028cac:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028cb0:	d406      	bmi.n	8028cc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8028cb2:	4584      	cmp	ip, r0
 8028cb4:	da04      	bge.n	8028cc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8028cb6:	2b00      	cmp	r3, #0
 8028cb8:	db02      	blt.n	8028cc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8028cba:	42bb      	cmp	r3, r7
 8028cbc:	f2c0 8170 	blt.w	8028fa0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8028cc0:	f11c 0c01 	adds.w	ip, ip, #1
 8028cc4:	f100 8160 	bmi.w	8028f88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8028cc8:	4561      	cmp	r1, ip
 8028cca:	f2c0 815d 	blt.w	8028f88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8028cce:	3301      	adds	r3, #1
 8028cd0:	f100 815a 	bmi.w	8028f88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8028cd4:	429a      	cmp	r2, r3
 8028cd6:	f2c0 8157 	blt.w	8028f88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8028cda:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028cde:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028ce0:	f1b8 0f00 	cmp.w	r8, #0
 8028ce4:	f340 8179 	ble.w	8028fda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8028ce8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8028cea:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028cee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028cf0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8028cf4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028cf8:	142a      	asrs	r2, r5, #16
 8028cfa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028cfe:	689b      	ldr	r3, [r3, #8]
 8028d00:	f100 81be 	bmi.w	8029080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028d04:	f103 39ff 	add.w	r9, r3, #4294967295
 8028d08:	454a      	cmp	r2, r9
 8028d0a:	f280 81b9 	bge.w	8029080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028d0e:	f1bc 0f00 	cmp.w	ip, #0
 8028d12:	f2c0 81b5 	blt.w	8029080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028d16:	f10e 39ff 	add.w	r9, lr, #4294967295
 8028d1a:	45cc      	cmp	ip, r9
 8028d1c:	f280 81b0 	bge.w	8029080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028d20:	b21b      	sxth	r3, r3
 8028d22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028d24:	fb0c 2203 	mla	r2, ip, r3, r2
 8028d28:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8028d2c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8028d30:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028d34:	2900      	cmp	r1, #0
 8028d36:	f000 8197 	beq.w	8029068 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8028d3a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8028d3e:	940a      	str	r4, [sp, #40]	; 0x28
 8028d40:	0e24      	lsrs	r4, r4, #24
 8028d42:	9411      	str	r4, [sp, #68]	; 0x44
 8028d44:	b180      	cbz	r0, 8028d68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8028d46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028d4a:	3b01      	subs	r3, #1
 8028d4c:	009b      	lsls	r3, r3, #2
 8028d4e:	3304      	adds	r3, #4
 8028d50:	eb09 0c03 	add.w	ip, r9, r3
 8028d54:	f859 3003 	ldr.w	r3, [r9, r3]
 8028d58:	9307      	str	r3, [sp, #28]
 8028d5a:	0e1b      	lsrs	r3, r3, #24
 8028d5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8028d5e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8028d64:	0e1b      	lsrs	r3, r3, #24
 8028d66:	9312      	str	r3, [sp, #72]	; 0x48
 8028d68:	b289      	uxth	r1, r1
 8028d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8028d6c:	b280      	uxth	r0, r0
 8028d6e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028d70:	fb01 fa00 	mul.w	sl, r1, r0
 8028d74:	0109      	lsls	r1, r1, #4
 8028d76:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8028d7a:	eba1 090a 	sub.w	r9, r1, sl
 8028d7e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8028d82:	b280      	uxth	r0, r0
 8028d84:	fa1f f989 	uxth.w	r9, r9
 8028d88:	1a09      	subs	r1, r1, r0
 8028d8a:	fb09 f303 	mul.w	r3, r9, r3
 8028d8e:	b289      	uxth	r1, r1
 8028d90:	fb01 330e 	mla	r3, r1, lr, r3
 8028d94:	fb00 3304 	mla	r3, r0, r4, r3
 8028d98:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028d9a:	fb0a 3304 	mla	r3, sl, r4, r3
 8028d9e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028da2:	2b00      	cmp	r3, #0
 8028da4:	f000 80e8 	beq.w	8028f78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8028da8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028dac:	d01b      	beq.n	8028de6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8028dae:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8028db2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028db6:	fb0e fb0b 	mul.w	fp, lr, fp
 8028dba:	fb0e fe02 	mul.w	lr, lr, r2
 8028dbe:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8028dc2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028dc6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028dca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028dce:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028dd2:	445a      	add	r2, fp
 8028dd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028dd8:	0a12      	lsrs	r2, r2, #8
 8028dda:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028dde:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028de2:	ea42 020c 	orr.w	r2, r2, ip
 8028de6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028de8:	2cff      	cmp	r4, #255	; 0xff
 8028dea:	d021      	beq.n	8028e30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8028dec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028dee:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028df2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028df4:	fb04 fc0c 	mul.w	ip, r4, ip
 8028df8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028dfa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028dfe:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8028e02:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028e04:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028e08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e0c:	fb04 fb0b 	mul.w	fp, r4, fp
 8028e10:	44e6      	add	lr, ip
 8028e12:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8028e16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028e1a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8028e1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e22:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028e26:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8028e2a:	ea4e 040b 	orr.w	r4, lr, fp
 8028e2e:	940a      	str	r4, [sp, #40]	; 0x28
 8028e30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028e32:	2cff      	cmp	r4, #255	; 0xff
 8028e34:	d021      	beq.n	8028e7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028e36:	9c07      	ldr	r4, [sp, #28]
 8028e38:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028e3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028e3e:	fb04 fc0c 	mul.w	ip, r4, ip
 8028e42:	9c07      	ldr	r4, [sp, #28]
 8028e44:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028e48:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8028e4c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028e4e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028e52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e56:	fb04 fb0b 	mul.w	fp, r4, fp
 8028e5a:	44e6      	add	lr, ip
 8028e5c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8028e60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028e64:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8028e68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e6c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028e70:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8028e74:	ea4e 040b 	orr.w	r4, lr, fp
 8028e78:	9407      	str	r4, [sp, #28]
 8028e7a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028e7c:	2cff      	cmp	r4, #255	; 0xff
 8028e7e:	d021      	beq.n	8028ec4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8028e80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028e82:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028e86:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028e88:	fb04 fc0c 	mul.w	ip, r4, ip
 8028e8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028e8e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028e92:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8028e96:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028e98:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028e9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ea0:	fb04 fb0b 	mul.w	fp, r4, fp
 8028ea4:	44e6      	add	lr, ip
 8028ea6:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8028eaa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028eae:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8028eb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028eb6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028eba:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8028ebe:	ea4e 040b 	orr.w	r4, lr, fp
 8028ec2:	940b      	str	r4, [sp, #44]	; 0x2c
 8028ec4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028ec6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028eca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028ece:	2bff      	cmp	r3, #255	; 0xff
 8028ed0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028ed4:	9c07      	ldr	r4, [sp, #28]
 8028ed6:	fb09 fc0c 	mul.w	ip, r9, ip
 8028eda:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028ede:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028ee2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028ee4:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028ee8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028eec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028eee:	fb0a cc0e 	mla	ip, sl, lr, ip
 8028ef2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8028ef6:	fb09 f90e 	mul.w	r9, r9, lr
 8028efa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028efe:	fb01 9202 	mla	r2, r1, r2, r9
 8028f02:	9907      	ldr	r1, [sp, #28]
 8028f04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028f08:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8028f0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028f0e:	fb00 220b 	mla	r2, r0, fp, r2
 8028f12:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8028f16:	fb0a 2a00 	mla	sl, sl, r0, r2
 8028f1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028f22:	ea4c 0c0a 	orr.w	ip, ip, sl
 8028f26:	fa5f f08c 	uxtb.w	r0, ip
 8028f2a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8028f2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8028f32:	f000 80a2 	beq.w	802907a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8028f36:	43db      	mvns	r3, r3
 8028f38:	783a      	ldrb	r2, [r7, #0]
 8028f3a:	f897 a002 	ldrb.w	sl, [r7, #2]
 8028f3e:	b2db      	uxtb	r3, r3
 8028f40:	fb02 fe03 	mul.w	lr, r2, r3
 8028f44:	fb0a fa03 	mul.w	sl, sl, r3
 8028f48:	f10e 0201 	add.w	r2, lr, #1
 8028f4c:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8028f50:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8028f54:	703a      	strb	r2, [r7, #0]
 8028f56:	787a      	ldrb	r2, [r7, #1]
 8028f58:	fb02 f003 	mul.w	r0, r2, r3
 8028f5c:	f10a 0301 	add.w	r3, sl, #1
 8028f60:	1c42      	adds	r2, r0, #1
 8028f62:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8028f66:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028f6a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028f6e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028f72:	707a      	strb	r2, [r7, #1]
 8028f74:	f887 c002 	strb.w	ip, [r7, #2]
 8028f78:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028f7a:	3703      	adds	r7, #3
 8028f7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8028f80:	441d      	add	r5, r3
 8028f82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028f84:	441e      	add	r6, r3
 8028f86:	e6ab      	b.n	8028ce0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028f88:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028f8a:	441d      	add	r5, r3
 8028f8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028f8e:	441e      	add	r6, r3
 8028f90:	9b06      	ldr	r3, [sp, #24]
 8028f92:	3b01      	subs	r3, #1
 8028f94:	9306      	str	r3, [sp, #24]
 8028f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028f98:	3303      	adds	r3, #3
 8028f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8028f9c:	e680      	b.n	8028ca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028f9e:	d024      	beq.n	8028fea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028fa0:	9b06      	ldr	r3, [sp, #24]
 8028fa2:	9825      	ldr	r0, [sp, #148]	; 0x94
 8028fa4:	3b01      	subs	r3, #1
 8028fa6:	fb00 5003 	mla	r0, r0, r3, r5
 8028faa:	1400      	asrs	r0, r0, #16
 8028fac:	f53f ae95 	bmi.w	8028cda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028fb0:	3901      	subs	r1, #1
 8028fb2:	4288      	cmp	r0, r1
 8028fb4:	f6bf ae91 	bge.w	8028cda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028fb8:	9926      	ldr	r1, [sp, #152]	; 0x98
 8028fba:	fb01 6303 	mla	r3, r1, r3, r6
 8028fbe:	141b      	asrs	r3, r3, #16
 8028fc0:	f53f ae8b 	bmi.w	8028cda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028fc4:	3a01      	subs	r2, #1
 8028fc6:	4293      	cmp	r3, r2
 8028fc8:	f6bf ae87 	bge.w	8028cda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028fce:	f8dd b018 	ldr.w	fp, [sp, #24]
 8028fd2:	1cdf      	adds	r7, r3, #3
 8028fd4:	f1bb 0f00 	cmp.w	fp, #0
 8028fd8:	dc6e      	bgt.n	80290b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8028fda:	9b06      	ldr	r3, [sp, #24]
 8028fdc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028fe2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028fe6:	4423      	add	r3, r4
 8028fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8028fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028fec:	2b00      	cmp	r3, #0
 8028fee:	f340 81b0 	ble.w	8029352 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8028ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028ff6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8028ff8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028ffc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029000:	eef0 6a62 	vmov.f32	s13, s5
 8029004:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029008:	ee31 1a05 	vadd.f32	s2, s2, s10
 802900c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029010:	ee16 5a90 	vmov	r5, s13
 8029014:	eef0 6a43 	vmov.f32	s13, s6
 8029018:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802901c:	ee16 6a90 	vmov	r6, s13
 8029020:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029024:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029028:	ee77 2a62 	vsub.f32	s5, s14, s5
 802902c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029030:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029034:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029038:	ee12 2a90 	vmov	r2, s5
 802903c:	eef0 2a47 	vmov.f32	s5, s14
 8029040:	fb92 f3f3 	sdiv	r3, r2, r3
 8029044:	ee13 2a10 	vmov	r2, s6
 8029048:	9325      	str	r3, [sp, #148]	; 0x94
 802904a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802904c:	eeb0 3a67 	vmov.f32	s6, s15
 8029050:	fb92 f3f3 	sdiv	r3, r2, r3
 8029054:	9326      	str	r3, [sp, #152]	; 0x98
 8029056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029058:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802905a:	3b01      	subs	r3, #1
 802905c:	9315      	str	r3, [sp, #84]	; 0x54
 802905e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8029060:	bf08      	it	eq
 8029062:	4613      	moveq	r3, r2
 8029064:	9306      	str	r3, [sp, #24]
 8029066:	e60d      	b.n	8028c84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8029068:	2800      	cmp	r0, #0
 802906a:	f43f ae7d 	beq.w	8028d68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802906e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8029072:	9307      	str	r3, [sp, #28]
 8029074:	0e1b      	lsrs	r3, r3, #24
 8029076:	930f      	str	r3, [sp, #60]	; 0x3c
 8029078:	e676      	b.n	8028d68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802907a:	7038      	strb	r0, [r7, #0]
 802907c:	7079      	strb	r1, [r7, #1]
 802907e:	e779      	b.n	8028f74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8029080:	f112 0901 	adds.w	r9, r2, #1
 8029084:	f53f af78 	bmi.w	8028f78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8029088:	454b      	cmp	r3, r9
 802908a:	f6ff af75 	blt.w	8028f78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802908e:	f11c 0901 	adds.w	r9, ip, #1
 8029092:	f53f af71 	bmi.w	8028f78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8029096:	45ce      	cmp	lr, r9
 8029098:	f6ff af6e 	blt.w	8028f78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802909c:	b21b      	sxth	r3, r3
 802909e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80290a2:	fa0f f28e 	sxth.w	r2, lr
 80290a6:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80290aa:	9200      	str	r2, [sp, #0]
 80290ac:	4639      	mov	r1, r7
 80290ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80290b0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80290b2:	f7ff fca1 	bl	80289f8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80290b6:	e75f      	b.n	8028f78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80290b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80290ba:	1429      	asrs	r1, r5, #16
 80290bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80290be:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80290c2:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80290c6:	1433      	asrs	r3, r6, #16
 80290c8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80290cc:	fb0c 1303 	mla	r3, ip, r3, r1
 80290d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80290d2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80290d6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80290da:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80290de:	2a00      	cmp	r2, #0
 80290e0:	f000 8129 	beq.w	8029336 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80290e4:	684c      	ldr	r4, [r1, #4]
 80290e6:	940c      	str	r4, [sp, #48]	; 0x30
 80290e8:	0e24      	lsrs	r4, r4, #24
 80290ea:	9413      	str	r4, [sp, #76]	; 0x4c
 80290ec:	b198      	cbz	r0, 8029116 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80290ee:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80290f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80290f6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80290fa:	f10c 0c04 	add.w	ip, ip, #4
 80290fe:	eb01 080c 	add.w	r8, r1, ip
 8029102:	f851 100c 	ldr.w	r1, [r1, ip]
 8029106:	9108      	str	r1, [sp, #32]
 8029108:	0e09      	lsrs	r1, r1, #24
 802910a:	9110      	str	r1, [sp, #64]	; 0x40
 802910c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8029110:	910d      	str	r1, [sp, #52]	; 0x34
 8029112:	0e09      	lsrs	r1, r1, #24
 8029114:	9114      	str	r1, [sp, #80]	; 0x50
 8029116:	b292      	uxth	r2, r2
 8029118:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802911a:	b280      	uxth	r0, r0
 802911c:	fb02 f900 	mul.w	r9, r2, r0
 8029120:	0112      	lsls	r2, r2, #4
 8029122:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029126:	eba2 0809 	sub.w	r8, r2, r9
 802912a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802912e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8029130:	b280      	uxth	r0, r0
 8029132:	fa1f f888 	uxth.w	r8, r8
 8029136:	1a09      	subs	r1, r1, r0
 8029138:	fb08 f202 	mul.w	r2, r8, r2
 802913c:	b289      	uxth	r1, r1
 802913e:	fb01 220e 	mla	r2, r1, lr, r2
 8029142:	fb00 2204 	mla	r2, r0, r4, r2
 8029146:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8029148:	fb09 2204 	mla	r2, r9, r4, r2
 802914c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029150:	2a00      	cmp	r2, #0
 8029152:	f000 80e8 	beq.w	8029326 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8029156:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802915a:	d01b      	beq.n	8029194 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 802915c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029160:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029164:	fb0e fa0a 	mul.w	sl, lr, sl
 8029168:	fb0e fe03 	mul.w	lr, lr, r3
 802916c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029170:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029174:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8029178:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802917c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029180:	4453      	add	r3, sl
 8029182:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029186:	0a1b      	lsrs	r3, r3, #8
 8029188:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802918c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029190:	ea43 030c 	orr.w	r3, r3, ip
 8029194:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8029196:	2cff      	cmp	r4, #255	; 0xff
 8029198:	d021      	beq.n	80291de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 802919a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802919c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80291a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80291a2:	fb04 fc0c 	mul.w	ip, r4, ip
 80291a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80291a8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80291ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80291b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80291b2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80291b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80291ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80291be:	44e6      	add	lr, ip
 80291c0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80291c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80291c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80291cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80291d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80291d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80291d8:	ea4e 040a 	orr.w	r4, lr, sl
 80291dc:	940c      	str	r4, [sp, #48]	; 0x30
 80291de:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80291e0:	2cff      	cmp	r4, #255	; 0xff
 80291e2:	d021      	beq.n	8029228 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80291e4:	9c08      	ldr	r4, [sp, #32]
 80291e6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80291ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80291ec:	fb04 fc0c 	mul.w	ip, r4, ip
 80291f0:	9c08      	ldr	r4, [sp, #32]
 80291f2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80291f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80291f8:	fb04 fa0e 	mul.w	sl, r4, lr
 80291fc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8029200:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029204:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029208:	44e6      	add	lr, ip
 802920a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802920e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029212:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029216:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802921a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802921e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029222:	ea4e 040a 	orr.w	r4, lr, sl
 8029226:	9408      	str	r4, [sp, #32]
 8029228:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802922a:	2cff      	cmp	r4, #255	; 0xff
 802922c:	d021      	beq.n	8029272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 802922e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8029230:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8029234:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8029236:	fb04 fc0c 	mul.w	ip, r4, ip
 802923a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802923c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8029240:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8029244:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8029246:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802924a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802924e:	fb04 fa0a 	mul.w	sl, r4, sl
 8029252:	44e6      	add	lr, ip
 8029254:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029258:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802925c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029260:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029264:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029268:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802926c:	ea4e 040a 	orr.w	r4, lr, sl
 8029270:	940d      	str	r4, [sp, #52]	; 0x34
 8029272:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8029274:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8029278:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802927c:	2aff      	cmp	r2, #255	; 0xff
 802927e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8029282:	9c08      	ldr	r4, [sp, #32]
 8029284:	fb08 fc0c 	mul.w	ip, r8, ip
 8029288:	fb01 cc0e 	mla	ip, r1, lr, ip
 802928c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8029290:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8029292:	fb00 cc0e 	mla	ip, r0, lr, ip
 8029296:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802929a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802929c:	fb09 cc0e 	mla	ip, r9, lr, ip
 80292a0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80292a4:	fb08 f80e 	mul.w	r8, r8, lr
 80292a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80292ac:	fb01 8303 	mla	r3, r1, r3, r8
 80292b0:	9908      	ldr	r1, [sp, #32]
 80292b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80292b6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80292ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80292bc:	fb00 330a 	mla	r3, r0, sl, r3
 80292c0:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80292c4:	fb09 3e0e 	mla	lr, r9, lr, r3
 80292c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80292cc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80292d0:	ea4c 0c0e 	orr.w	ip, ip, lr
 80292d4:	fa5f f08c 	uxtb.w	r0, ip
 80292d8:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80292dc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80292e0:	d032      	beq.n	8029348 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80292e2:	43d2      	mvns	r2, r2
 80292e4:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80292e8:	b2d2      	uxtb	r2, r2
 80292ea:	fb0e fe02 	mul.w	lr, lr, r2
 80292ee:	f10e 0301 	add.w	r3, lr, #1
 80292f2:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80292f6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80292fa:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80292fe:	4350      	muls	r0, r2
 8029300:	f807 3c03 	strb.w	r3, [r7, #-3]
 8029304:	1c43      	adds	r3, r0, #1
 8029306:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802930a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802930e:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8029312:	4353      	muls	r3, r2
 8029314:	f807 1c02 	strb.w	r1, [r7, #-2]
 8029318:	1c5a      	adds	r2, r3, #1
 802931a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802931e:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8029322:	f807 cc01 	strb.w	ip, [r7, #-1]
 8029326:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8029328:	3703      	adds	r7, #3
 802932a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802932e:	441d      	add	r5, r3
 8029330:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029332:	441e      	add	r6, r3
 8029334:	e64e      	b.n	8028fd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8029336:	2800      	cmp	r0, #0
 8029338:	f43f aeed 	beq.w	8029116 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802933c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8029340:	9108      	str	r1, [sp, #32]
 8029342:	0e09      	lsrs	r1, r1, #24
 8029344:	9110      	str	r1, [sp, #64]	; 0x40
 8029346:	e6e6      	b.n	8029116 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8029348:	f807 0c03 	strb.w	r0, [r7, #-3]
 802934c:	f807 1c02 	strb.w	r1, [r7, #-2]
 8029350:	e7e7      	b.n	8029322 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8029352:	b019      	add	sp, #100	; 0x64
 8029354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029358 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8029358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802935c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8029360:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029364:	2c00      	cmp	r4, #0
 8029366:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802936a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802936e:	fb00 4e03 	mla	lr, r0, r3, r4
 8029372:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8029376:	f2c0 80b8 	blt.w	80294ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802937a:	45a1      	cmp	r9, r4
 802937c:	f340 80b5 	ble.w	80294ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8029380:	2800      	cmp	r0, #0
 8029382:	f2c0 80b2 	blt.w	80294ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8029386:	4580      	cmp	r8, r0
 8029388:	f340 80af 	ble.w	80294ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802938c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8029390:	f01e 0f01 	tst.w	lr, #1
 8029394:	5d56      	ldrb	r6, [r2, r5]
 8029396:	bf0c      	ite	eq
 8029398:	f006 060f 	andeq.w	r6, r6, #15
 802939c:	1136      	asrne	r6, r6, #4
 802939e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80293a2:	b2f6      	uxtb	r6, r6
 80293a4:	f114 0a01 	adds.w	sl, r4, #1
 80293a8:	f100 80a1 	bmi.w	80294ee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80293ac:	45d1      	cmp	r9, sl
 80293ae:	f340 809e 	ble.w	80294ee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80293b2:	2800      	cmp	r0, #0
 80293b4:	f2c0 809b 	blt.w	80294ee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80293b8:	4580      	cmp	r8, r0
 80293ba:	f340 8098 	ble.w	80294ee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80293be:	2f00      	cmp	r7, #0
 80293c0:	f000 8097 	beq.w	80294f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80293c4:	f10e 0b01 	add.w	fp, lr, #1
 80293c8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80293cc:	f01b 0f01 	tst.w	fp, #1
 80293d0:	5d55      	ldrb	r5, [r2, r5]
 80293d2:	bf0c      	ite	eq
 80293d4:	f005 050f 	andeq.w	r5, r5, #15
 80293d8:	112d      	asrne	r5, r5, #4
 80293da:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80293de:	b2ed      	uxtb	r5, r5
 80293e0:	f1bc 0f00 	cmp.w	ip, #0
 80293e4:	f000 8089 	beq.w	80294fa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80293e8:	2c00      	cmp	r4, #0
 80293ea:	f100 0001 	add.w	r0, r0, #1
 80293ee:	f2c0 8082 	blt.w	80294f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80293f2:	45a1      	cmp	r9, r4
 80293f4:	dd7f      	ble.n	80294f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80293f6:	2800      	cmp	r0, #0
 80293f8:	db7d      	blt.n	80294f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80293fa:	4580      	cmp	r8, r0
 80293fc:	dd7b      	ble.n	80294f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80293fe:	eb03 0b0e 	add.w	fp, r3, lr
 8029402:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8029406:	f01b 0f01 	tst.w	fp, #1
 802940a:	5d14      	ldrb	r4, [r2, r4]
 802940c:	bf0c      	ite	eq
 802940e:	f004 040f 	andeq.w	r4, r4, #15
 8029412:	1124      	asrne	r4, r4, #4
 8029414:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029418:	b2e4      	uxtb	r4, r4
 802941a:	f1ba 0f00 	cmp.w	sl, #0
 802941e:	db6f      	blt.n	8029500 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8029420:	45d1      	cmp	r9, sl
 8029422:	dd6d      	ble.n	8029500 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8029424:	2800      	cmp	r0, #0
 8029426:	db6b      	blt.n	8029500 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8029428:	4580      	cmp	r8, r0
 802942a:	dd69      	ble.n	8029500 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802942c:	2f00      	cmp	r7, #0
 802942e:	d069      	beq.n	8029504 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8029430:	3301      	adds	r3, #1
 8029432:	449e      	add	lr, r3
 8029434:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029438:	f01e 0f01 	tst.w	lr, #1
 802943c:	5cd0      	ldrb	r0, [r2, r3]
 802943e:	bf0c      	ite	eq
 8029440:	f000 000f 	andeq.w	r0, r0, #15
 8029444:	1100      	asrne	r0, r0, #4
 8029446:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802944a:	b2c3      	uxtb	r3, r0
 802944c:	b2ba      	uxth	r2, r7
 802944e:	fa1f fc8c 	uxth.w	ip, ip
 8029452:	fb02 f00c 	mul.w	r0, r2, ip
 8029456:	0112      	lsls	r2, r2, #4
 8029458:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802945c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8029460:	1a12      	subs	r2, r2, r0
 8029462:	fa1f fc8c 	uxth.w	ip, ip
 8029466:	b292      	uxth	r2, r2
 8029468:	eba7 070c 	sub.w	r7, r7, ip
 802946c:	436a      	muls	r2, r5
 802946e:	b2bf      	uxth	r7, r7
 8029470:	fb06 2207 	mla	r2, r6, r7, r2
 8029474:	fb0c 2404 	mla	r4, ip, r4, r2
 8029478:	fb00 4303 	mla	r3, r0, r3, r4
 802947c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029480:	b38b      	cbz	r3, 80294e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8029482:	4a21      	ldr	r2, [pc, #132]	; (8029508 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8029484:	6814      	ldr	r4, [r2, #0]
 8029486:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 802948a:	b2e5      	uxtb	r5, r4
 802948c:	4353      	muls	r3, r2
 802948e:	1c5a      	adds	r2, r3, #1
 8029490:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029494:	1212      	asrs	r2, r2, #8
 8029496:	b290      	uxth	r0, r2
 8029498:	43d2      	mvns	r2, r2
 802949a:	fb15 f500 	smulbb	r5, r5, r0
 802949e:	b2d3      	uxtb	r3, r2
 80294a0:	780a      	ldrb	r2, [r1, #0]
 80294a2:	fb02 5203 	mla	r2, r2, r3, r5
 80294a6:	b292      	uxth	r2, r2
 80294a8:	1c55      	adds	r5, r2, #1
 80294aa:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80294ae:	784d      	ldrb	r5, [r1, #1]
 80294b0:	fb15 f503 	smulbb	r5, r5, r3
 80294b4:	1212      	asrs	r2, r2, #8
 80294b6:	700a      	strb	r2, [r1, #0]
 80294b8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80294bc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80294c0:	fb02 5200 	mla	r2, r2, r0, r5
 80294c4:	b292      	uxth	r2, r2
 80294c6:	1c55      	adds	r5, r2, #1
 80294c8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80294cc:	1212      	asrs	r2, r2, #8
 80294ce:	704a      	strb	r2, [r1, #1]
 80294d0:	788a      	ldrb	r2, [r1, #2]
 80294d2:	fb12 f303 	smulbb	r3, r2, r3
 80294d6:	fb04 3300 	mla	r3, r4, r0, r3
 80294da:	b29b      	uxth	r3, r3
 80294dc:	1c5a      	adds	r2, r3, #1
 80294de:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80294e2:	121b      	asrs	r3, r3, #8
 80294e4:	708b      	strb	r3, [r1, #2]
 80294e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80294ea:	2600      	movs	r6, #0
 80294ec:	e75a      	b.n	80293a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80294ee:	2500      	movs	r5, #0
 80294f0:	e776      	b.n	80293e0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80294f2:	463d      	mov	r5, r7
 80294f4:	e774      	b.n	80293e0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80294f6:	2400      	movs	r4, #0
 80294f8:	e78f      	b.n	802941a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80294fa:	4663      	mov	r3, ip
 80294fc:	4664      	mov	r4, ip
 80294fe:	e7a5      	b.n	802944c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8029500:	2300      	movs	r3, #0
 8029502:	e7a3      	b.n	802944c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8029504:	463b      	mov	r3, r7
 8029506:	e7a1      	b.n	802944c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8029508:	24027f7c 	.word	0x24027f7c

0802950c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802950c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029510:	b097      	sub	sp, #92	; 0x5c
 8029512:	9214      	str	r2, [sp, #80]	; 0x50
 8029514:	9309      	str	r3, [sp, #36]	; 0x24
 8029516:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8029518:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802951c:	9015      	str	r0, [sp, #84]	; 0x54
 802951e:	910c      	str	r1, [sp, #48]	; 0x30
 8029520:	6850      	ldr	r0, [r2, #4]
 8029522:	930e      	str	r3, [sp, #56]	; 0x38
 8029524:	6812      	ldr	r2, [r2, #0]
 8029526:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802952a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 802952e:	fb00 1303 	mla	r3, r0, r3, r1
 8029532:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029536:	eb02 0a03 	add.w	sl, r2, r3
 802953a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802953c:	689b      	ldr	r3, [r3, #8]
 802953e:	3301      	adds	r3, #1
 8029540:	f023 0301 	bic.w	r3, r3, #1
 8029544:	930f      	str	r3, [sp, #60]	; 0x3c
 8029546:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029548:	681f      	ldr	r7, [r3, #0]
 802954a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802954c:	2b00      	cmp	r3, #0
 802954e:	dc03      	bgt.n	8029558 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8029550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029552:	2b00      	cmp	r3, #0
 8029554:	f340 8247 	ble.w	80299e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8029558:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802955a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802955e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029562:	1e48      	subs	r0, r1, #1
 8029564:	f102 3cff 	add.w	ip, r2, #4294967295
 8029568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802956a:	2b00      	cmp	r3, #0
 802956c:	f340 80e5 	ble.w	802973a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029570:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8029574:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029578:	d406      	bmi.n	8029588 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802957a:	4586      	cmp	lr, r0
 802957c:	da04      	bge.n	8029588 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802957e:	2b00      	cmp	r3, #0
 8029580:	db02      	blt.n	8029588 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029582:	4563      	cmp	r3, ip
 8029584:	f2c0 80da 	blt.w	802973c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8029588:	f11e 0e01 	adds.w	lr, lr, #1
 802958c:	f100 80cb 	bmi.w	8029726 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8029590:	4571      	cmp	r1, lr
 8029592:	f2c0 80c8 	blt.w	8029726 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8029596:	3301      	adds	r3, #1
 8029598:	f100 80c5 	bmi.w	8029726 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802959c:	429a      	cmp	r2, r3
 802959e:	f2c0 80c2 	blt.w	8029726 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80295a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80295a4:	46d0      	mov	r8, sl
 80295a6:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80295aa:	930d      	str	r3, [sp, #52]	; 0x34
 80295ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80295ae:	2b00      	cmp	r3, #0
 80295b0:	f340 80e3 	ble.w	802977a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80295b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80295b6:	1430      	asrs	r0, r6, #16
 80295b8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80295bc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80295c0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80295c4:	142b      	asrs	r3, r5, #16
 80295c6:	f100 812e 	bmi.w	8029826 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80295ca:	f10c 3bff 	add.w	fp, ip, #4294967295
 80295ce:	455b      	cmp	r3, fp
 80295d0:	f280 8129 	bge.w	8029826 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80295d4:	2800      	cmp	r0, #0
 80295d6:	f2c0 8126 	blt.w	8029826 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80295da:	f10e 3bff 	add.w	fp, lr, #4294967295
 80295de:	4558      	cmp	r0, fp
 80295e0:	f280 8121 	bge.w	8029826 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80295e4:	fb00 3309 	mla	r3, r0, r9, r3
 80295e8:	0858      	lsrs	r0, r3, #1
 80295ea:	07dc      	lsls	r4, r3, #31
 80295ec:	f817 c000 	ldrb.w	ip, [r7, r0]
 80295f0:	bf54      	ite	pl
 80295f2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80295f6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80295fa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80295fe:	fa5f fc8c 	uxtb.w	ip, ip
 8029602:	2a00      	cmp	r2, #0
 8029604:	f000 80fe 	beq.w	8029804 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8029608:	1c58      	adds	r0, r3, #1
 802960a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802960e:	07c0      	lsls	r0, r0, #31
 8029610:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029614:	bf54      	ite	pl
 8029616:	f00e 0e0f 	andpl.w	lr, lr, #15
 802961a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802961e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029622:	fa5f f08e 	uxtb.w	r0, lr
 8029626:	9010      	str	r0, [sp, #64]	; 0x40
 8029628:	b1d9      	cbz	r1, 8029662 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802962a:	444b      	add	r3, r9
 802962c:	0858      	lsrs	r0, r3, #1
 802962e:	07dc      	lsls	r4, r3, #31
 8029630:	f103 0301 	add.w	r3, r3, #1
 8029634:	5c38      	ldrb	r0, [r7, r0]
 8029636:	bf54      	ite	pl
 8029638:	f000 000f 	andpl.w	r0, r0, #15
 802963c:	1100      	asrmi	r0, r0, #4
 802963e:	07dc      	lsls	r4, r3, #31
 8029640:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029644:	b2c0      	uxtb	r0, r0
 8029646:	900a      	str	r0, [sp, #40]	; 0x28
 8029648:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802964c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029650:	bf54      	ite	pl
 8029652:	f00e 030f 	andpl.w	r3, lr, #15
 8029656:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802965a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802965e:	b2db      	uxtb	r3, r3
 8029660:	9311      	str	r3, [sp, #68]	; 0x44
 8029662:	b292      	uxth	r2, r2
 8029664:	b289      	uxth	r1, r1
 8029666:	0113      	lsls	r3, r2, #4
 8029668:	fb02 f001 	mul.w	r0, r2, r1
 802966c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802966e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8029672:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8029676:	1a1b      	subs	r3, r3, r0
 8029678:	b289      	uxth	r1, r1
 802967a:	b29b      	uxth	r3, r3
 802967c:	ebae 0e01 	sub.w	lr, lr, r1
 8029680:	4353      	muls	r3, r2
 8029682:	fa1f fe8e 	uxth.w	lr, lr
 8029686:	fb0c 320e 	mla	r2, ip, lr, r3
 802968a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802968c:	fb01 2203 	mla	r2, r1, r3, r2
 8029690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029692:	fb00 2203 	mla	r2, r0, r3, r2
 8029696:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802969a:	2a00      	cmp	r2, #0
 802969c:	d039      	beq.n	8029712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802969e:	4bc7      	ldr	r3, [pc, #796]	; (80299bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80296a0:	6819      	ldr	r1, [r3, #0]
 80296a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80296a4:	fa5f fc81 	uxtb.w	ip, r1
 80296a8:	435a      	muls	r2, r3
 80296aa:	1c53      	adds	r3, r2, #1
 80296ac:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80296b0:	1212      	asrs	r2, r2, #8
 80296b2:	b290      	uxth	r0, r2
 80296b4:	43d2      	mvns	r2, r2
 80296b6:	fb1c fc00 	smulbb	ip, ip, r0
 80296ba:	b2d3      	uxtb	r3, r2
 80296bc:	f898 2000 	ldrb.w	r2, [r8]
 80296c0:	fb02 c203 	mla	r2, r2, r3, ip
 80296c4:	b292      	uxth	r2, r2
 80296c6:	f102 0c01 	add.w	ip, r2, #1
 80296ca:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80296ce:	f898 c001 	ldrb.w	ip, [r8, #1]
 80296d2:	fb1c fc03 	smulbb	ip, ip, r3
 80296d6:	1212      	asrs	r2, r2, #8
 80296d8:	f888 2000 	strb.w	r2, [r8]
 80296dc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80296e0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80296e4:	fb02 c200 	mla	r2, r2, r0, ip
 80296e8:	b292      	uxth	r2, r2
 80296ea:	f102 0c01 	add.w	ip, r2, #1
 80296ee:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80296f2:	1212      	asrs	r2, r2, #8
 80296f4:	f888 2001 	strb.w	r2, [r8, #1]
 80296f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80296fc:	fb12 f303 	smulbb	r3, r2, r3
 8029700:	fb01 3300 	mla	r3, r1, r0, r3
 8029704:	b29b      	uxth	r3, r3
 8029706:	1c5a      	adds	r2, r3, #1
 8029708:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802970c:	121b      	asrs	r3, r3, #8
 802970e:	f888 3002 	strb.w	r3, [r8, #2]
 8029712:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029714:	f108 0803 	add.w	r8, r8, #3
 8029718:	441d      	add	r5, r3
 802971a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802971c:	441e      	add	r6, r3
 802971e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029720:	3b01      	subs	r3, #1
 8029722:	930d      	str	r3, [sp, #52]	; 0x34
 8029724:	e742      	b.n	80295ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8029726:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029728:	f10a 0a03 	add.w	sl, sl, #3
 802972c:	441d      	add	r5, r3
 802972e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029730:	441e      	add	r6, r3
 8029732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029734:	3b01      	subs	r3, #1
 8029736:	9309      	str	r3, [sp, #36]	; 0x24
 8029738:	e716      	b.n	8029568 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802973a:	d024      	beq.n	8029786 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802973c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802973e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8029740:	3b01      	subs	r3, #1
 8029742:	fb00 5003 	mla	r0, r0, r3, r5
 8029746:	1400      	asrs	r0, r0, #16
 8029748:	f53f af2b 	bmi.w	80295a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802974c:	3901      	subs	r1, #1
 802974e:	4288      	cmp	r0, r1
 8029750:	f6bf af27 	bge.w	80295a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8029754:	9924      	ldr	r1, [sp, #144]	; 0x90
 8029756:	fb01 6303 	mla	r3, r1, r3, r6
 802975a:	141b      	asrs	r3, r3, #16
 802975c:	f53f af21 	bmi.w	80295a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8029760:	3a01      	subs	r2, #1
 8029762:	4293      	cmp	r3, r2
 8029764:	f6bf af1d 	bge.w	80295a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8029768:	f10a 0e03 	add.w	lr, sl, #3
 802976c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8029770:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8029774:	f1b8 0f00 	cmp.w	r8, #0
 8029778:	dc76      	bgt.n	8029868 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 802977a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802977c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8029780:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8029784:	44a2      	add	sl, r4
 8029786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029788:	2b00      	cmp	r3, #0
 802978a:	f340 812c 	ble.w	80299e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802978e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029792:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029794:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029798:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802979c:	eef0 6a62 	vmov.f32	s13, s5
 80297a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80297a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80297a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80297ac:	ee16 5a90 	vmov	r5, s13
 80297b0:	eef0 6a43 	vmov.f32	s13, s6
 80297b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80297b8:	ee16 6a90 	vmov	r6, s13
 80297bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80297c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80297c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80297c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80297cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80297d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80297d4:	ee12 2a90 	vmov	r2, s5
 80297d8:	eef0 2a47 	vmov.f32	s5, s14
 80297dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80297e0:	ee13 2a10 	vmov	r2, s6
 80297e4:	9323      	str	r3, [sp, #140]	; 0x8c
 80297e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80297e8:	eeb0 3a67 	vmov.f32	s6, s15
 80297ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80297f0:	9324      	str	r3, [sp, #144]	; 0x90
 80297f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80297f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80297f6:	3b01      	subs	r3, #1
 80297f8:	930c      	str	r3, [sp, #48]	; 0x30
 80297fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80297fc:	bf08      	it	eq
 80297fe:	4613      	moveq	r3, r2
 8029800:	9309      	str	r3, [sp, #36]	; 0x24
 8029802:	e6a2      	b.n	802954a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8029804:	2900      	cmp	r1, #0
 8029806:	f43f af2c 	beq.w	8029662 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802980a:	eb09 0003 	add.w	r0, r9, r3
 802980e:	0843      	lsrs	r3, r0, #1
 8029810:	07c0      	lsls	r0, r0, #31
 8029812:	5cfb      	ldrb	r3, [r7, r3]
 8029814:	bf54      	ite	pl
 8029816:	f003 030f 	andpl.w	r3, r3, #15
 802981a:	111b      	asrmi	r3, r3, #4
 802981c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029820:	b2db      	uxtb	r3, r3
 8029822:	930a      	str	r3, [sp, #40]	; 0x28
 8029824:	e71d      	b.n	8029662 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8029826:	f113 0b01 	adds.w	fp, r3, #1
 802982a:	f53f af72 	bmi.w	8029712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802982e:	45dc      	cmp	ip, fp
 8029830:	f6ff af6f 	blt.w	8029712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8029834:	f110 0b01 	adds.w	fp, r0, #1
 8029838:	f53f af6b 	bmi.w	8029712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802983c:	45de      	cmp	lr, fp
 802983e:	f6ff af68 	blt.w	8029712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8029842:	9302      	str	r3, [sp, #8]
 8029844:	fa0f f38e 	sxth.w	r3, lr
 8029848:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802984a:	9301      	str	r3, [sp, #4]
 802984c:	fa0f f38c 	sxth.w	r3, ip
 8029850:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029854:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8029858:	9300      	str	r3, [sp, #0]
 802985a:	463a      	mov	r2, r7
 802985c:	464b      	mov	r3, r9
 802985e:	4641      	mov	r1, r8
 8029860:	9815      	ldr	r0, [sp, #84]	; 0x54
 8029862:	f7ff fd79 	bl	8029358 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8029866:	e754      	b.n	8029712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8029868:	142a      	asrs	r2, r5, #16
 802986a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802986e:	1433      	asrs	r3, r6, #16
 8029870:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029874:	fb09 2303 	mla	r3, r9, r3, r2
 8029878:	085a      	lsrs	r2, r3, #1
 802987a:	07dc      	lsls	r4, r3, #31
 802987c:	5cba      	ldrb	r2, [r7, r2]
 802987e:	bf54      	ite	pl
 8029880:	f002 020f 	andpl.w	r2, r2, #15
 8029884:	1112      	asrmi	r2, r2, #4
 8029886:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802988a:	b2d2      	uxtb	r2, r2
 802988c:	2900      	cmp	r1, #0
 802988e:	f000 8097 	beq.w	80299c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8029892:	f103 0b01 	add.w	fp, r3, #1
 8029896:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802989a:	f01b 0f01 	tst.w	fp, #1
 802989e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80298a2:	bf0c      	ite	eq
 80298a4:	f00c 0c0f 	andeq.w	ip, ip, #15
 80298a8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80298ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80298b0:	fa5f f48c 	uxtb.w	r4, ip
 80298b4:	9412      	str	r4, [sp, #72]	; 0x48
 80298b6:	b300      	cbz	r0, 80298fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80298b8:	444b      	add	r3, r9
 80298ba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80298be:	07dc      	lsls	r4, r3, #31
 80298c0:	f103 0301 	add.w	r3, r3, #1
 80298c4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80298c8:	bf54      	ite	pl
 80298ca:	f00c 0c0f 	andpl.w	ip, ip, #15
 80298ce:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80298d2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80298d6:	fa5f f48c 	uxtb.w	r4, ip
 80298da:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80298de:	940b      	str	r4, [sp, #44]	; 0x2c
 80298e0:	07dc      	lsls	r4, r3, #31
 80298e2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80298e6:	bf54      	ite	pl
 80298e8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80298ec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80298f0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80298f4:	fa5f f38c 	uxtb.w	r3, ip
 80298f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80298fa:	b289      	uxth	r1, r1
 80298fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80298fe:	b280      	uxth	r0, r0
 8029900:	fb01 f300 	mul.w	r3, r1, r0
 8029904:	0109      	lsls	r1, r1, #4
 8029906:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802990a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802990e:	1ac9      	subs	r1, r1, r3
 8029910:	b280      	uxth	r0, r0
 8029912:	b289      	uxth	r1, r1
 8029914:	ebac 0c00 	sub.w	ip, ip, r0
 8029918:	4361      	muls	r1, r4
 802991a:	fa1f fc8c 	uxth.w	ip, ip
 802991e:	fb02 120c 	mla	r2, r2, ip, r1
 8029922:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029924:	fb00 2001 	mla	r0, r0, r1, r2
 8029928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802992a:	fb03 0302 	mla	r3, r3, r2, r0
 802992e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029932:	2b00      	cmp	r3, #0
 8029934:	d039      	beq.n	80299aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8029936:	4a21      	ldr	r2, [pc, #132]	; (80299bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8029938:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802993c:	6810      	ldr	r0, [r2, #0]
 802993e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029940:	fa5f fc80 	uxtb.w	ip, r0
 8029944:	4353      	muls	r3, r2
 8029946:	1c5a      	adds	r2, r3, #1
 8029948:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802994c:	121b      	asrs	r3, r3, #8
 802994e:	b29a      	uxth	r2, r3
 8029950:	43db      	mvns	r3, r3
 8029952:	fb1c fc02 	smulbb	ip, ip, r2
 8029956:	b2db      	uxtb	r3, r3
 8029958:	fb01 c103 	mla	r1, r1, r3, ip
 802995c:	b289      	uxth	r1, r1
 802995e:	f101 0c01 	add.w	ip, r1, #1
 8029962:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8029966:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802996a:	fb1c fc03 	smulbb	ip, ip, r3
 802996e:	1209      	asrs	r1, r1, #8
 8029970:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8029974:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8029978:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802997c:	fb01 c102 	mla	r1, r1, r2, ip
 8029980:	b289      	uxth	r1, r1
 8029982:	f101 0c01 	add.w	ip, r1, #1
 8029986:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802998a:	1209      	asrs	r1, r1, #8
 802998c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8029990:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8029994:	fb11 f303 	smulbb	r3, r1, r3
 8029998:	fb00 3002 	mla	r0, r0, r2, r3
 802999c:	b280      	uxth	r0, r0
 802999e:	1c42      	adds	r2, r0, #1
 80299a0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80299a4:	1200      	asrs	r0, r0, #8
 80299a6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80299aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80299ac:	f10e 0e03 	add.w	lr, lr, #3
 80299b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80299b4:	441d      	add	r5, r3
 80299b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80299b8:	441e      	add	r6, r3
 80299ba:	e6db      	b.n	8029774 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80299bc:	24027f7c 	.word	0x24027f7c
 80299c0:	2800      	cmp	r0, #0
 80299c2:	d09a      	beq.n	80298fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80299c4:	444b      	add	r3, r9
 80299c6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80299ca:	07db      	lsls	r3, r3, #31
 80299cc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80299d0:	bf54      	ite	pl
 80299d2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80299d6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80299da:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80299de:	fa5f f38c 	uxtb.w	r3, ip
 80299e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80299e4:	e789      	b.n	80298fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80299e6:	b017      	add	sp, #92	; 0x5c
 80299e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080299ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80299ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299f0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 80299f4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80299f8:	2d00      	cmp	r5, #0
 80299fa:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80299fe:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8029a02:	fb04 5e03 	mla	lr, r4, r3, r5
 8029a06:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8029a0a:	f2c0 80b1 	blt.w	8029b70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8029a0e:	45a9      	cmp	r9, r5
 8029a10:	f340 80ae 	ble.w	8029b70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8029a14:	2c00      	cmp	r4, #0
 8029a16:	f2c0 80ab 	blt.w	8029b70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8029a1a:	45a0      	cmp	r8, r4
 8029a1c:	f340 80a8 	ble.w	8029b70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8029a20:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8029a24:	f01e 0f01 	tst.w	lr, #1
 8029a28:	5d97      	ldrb	r7, [r2, r6]
 8029a2a:	bf0c      	ite	eq
 8029a2c:	f007 070f 	andeq.w	r7, r7, #15
 8029a30:	113f      	asrne	r7, r7, #4
 8029a32:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8029a36:	b2ff      	uxtb	r7, r7
 8029a38:	f115 0a01 	adds.w	sl, r5, #1
 8029a3c:	f100 809a 	bmi.w	8029b74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8029a40:	45d1      	cmp	r9, sl
 8029a42:	f340 8097 	ble.w	8029b74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8029a46:	2c00      	cmp	r4, #0
 8029a48:	f2c0 8094 	blt.w	8029b74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8029a4c:	45a0      	cmp	r8, r4
 8029a4e:	f340 8091 	ble.w	8029b74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8029a52:	2800      	cmp	r0, #0
 8029a54:	f000 8090 	beq.w	8029b78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8029a58:	f10e 0b01 	add.w	fp, lr, #1
 8029a5c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8029a60:	f01b 0f01 	tst.w	fp, #1
 8029a64:	5d96      	ldrb	r6, [r2, r6]
 8029a66:	bf0c      	ite	eq
 8029a68:	f006 060f 	andeq.w	r6, r6, #15
 8029a6c:	1136      	asrne	r6, r6, #4
 8029a6e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029a72:	b2f6      	uxtb	r6, r6
 8029a74:	f1bc 0f00 	cmp.w	ip, #0
 8029a78:	f000 8082 	beq.w	8029b80 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8029a7c:	2d00      	cmp	r5, #0
 8029a7e:	f104 0401 	add.w	r4, r4, #1
 8029a82:	db7b      	blt.n	8029b7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8029a84:	45a9      	cmp	r9, r5
 8029a86:	dd79      	ble.n	8029b7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8029a88:	2c00      	cmp	r4, #0
 8029a8a:	db77      	blt.n	8029b7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8029a8c:	45a0      	cmp	r8, r4
 8029a8e:	dd75      	ble.n	8029b7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8029a90:	eb03 0b0e 	add.w	fp, r3, lr
 8029a94:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8029a98:	f01b 0f01 	tst.w	fp, #1
 8029a9c:	5d55      	ldrb	r5, [r2, r5]
 8029a9e:	bf0c      	ite	eq
 8029aa0:	f005 050f 	andeq.w	r5, r5, #15
 8029aa4:	112d      	asrne	r5, r5, #4
 8029aa6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029aaa:	b2ed      	uxtb	r5, r5
 8029aac:	f1ba 0f00 	cmp.w	sl, #0
 8029ab0:	db69      	blt.n	8029b86 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8029ab2:	45d1      	cmp	r9, sl
 8029ab4:	dd67      	ble.n	8029b86 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8029ab6:	2c00      	cmp	r4, #0
 8029ab8:	db65      	blt.n	8029b86 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8029aba:	45a0      	cmp	r8, r4
 8029abc:	dd63      	ble.n	8029b86 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8029abe:	2800      	cmp	r0, #0
 8029ac0:	d063      	beq.n	8029b8a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8029ac2:	3301      	adds	r3, #1
 8029ac4:	449e      	add	lr, r3
 8029ac6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029aca:	f01e 0f01 	tst.w	lr, #1
 8029ace:	5cd4      	ldrb	r4, [r2, r3]
 8029ad0:	bf0c      	ite	eq
 8029ad2:	f004 040f 	andeq.w	r4, r4, #15
 8029ad6:	1124      	asrne	r4, r4, #4
 8029ad8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029adc:	b2e3      	uxtb	r3, r4
 8029ade:	b282      	uxth	r2, r0
 8029ae0:	fa1f fc8c 	uxth.w	ip, ip
 8029ae4:	fb02 f40c 	mul.w	r4, r2, ip
 8029ae8:	0112      	lsls	r2, r2, #4
 8029aea:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8029aee:	fa1f f08c 	uxth.w	r0, ip
 8029af2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8029af6:	1b12      	subs	r2, r2, r4
 8029af8:	ebac 0c00 	sub.w	ip, ip, r0
 8029afc:	b292      	uxth	r2, r2
 8029afe:	fa1f fc8c 	uxth.w	ip, ip
 8029b02:	4372      	muls	r2, r6
 8029b04:	fb07 220c 	mla	r2, r7, ip, r2
 8029b08:	fb00 2005 	mla	r0, r0, r5, r2
 8029b0c:	fb04 0303 	mla	r3, r4, r3, r0
 8029b10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029b14:	b353      	cbz	r3, 8029b6c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8029b16:	4a1e      	ldr	r2, [pc, #120]	; (8029b90 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8029b18:	7808      	ldrb	r0, [r1, #0]
 8029b1a:	6814      	ldr	r4, [r2, #0]
 8029b1c:	b29a      	uxth	r2, r3
 8029b1e:	43db      	mvns	r3, r3
 8029b20:	b2e5      	uxtb	r5, r4
 8029b22:	b2db      	uxtb	r3, r3
 8029b24:	fb15 f502 	smulbb	r5, r5, r2
 8029b28:	fb00 5003 	mla	r0, r0, r3, r5
 8029b2c:	b280      	uxth	r0, r0
 8029b2e:	1c45      	adds	r5, r0, #1
 8029b30:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8029b34:	784d      	ldrb	r5, [r1, #1]
 8029b36:	fb15 f503 	smulbb	r5, r5, r3
 8029b3a:	1200      	asrs	r0, r0, #8
 8029b3c:	7008      	strb	r0, [r1, #0]
 8029b3e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8029b42:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8029b46:	fb00 5002 	mla	r0, r0, r2, r5
 8029b4a:	b280      	uxth	r0, r0
 8029b4c:	1c45      	adds	r5, r0, #1
 8029b4e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8029b52:	1200      	asrs	r0, r0, #8
 8029b54:	7048      	strb	r0, [r1, #1]
 8029b56:	7888      	ldrb	r0, [r1, #2]
 8029b58:	fb10 f303 	smulbb	r3, r0, r3
 8029b5c:	fb04 3202 	mla	r2, r4, r2, r3
 8029b60:	b292      	uxth	r2, r2
 8029b62:	1c53      	adds	r3, r2, #1
 8029b64:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8029b68:	1212      	asrs	r2, r2, #8
 8029b6a:	708a      	strb	r2, [r1, #2]
 8029b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b70:	2700      	movs	r7, #0
 8029b72:	e761      	b.n	8029a38 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8029b74:	2600      	movs	r6, #0
 8029b76:	e77d      	b.n	8029a74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8029b78:	4606      	mov	r6, r0
 8029b7a:	e77b      	b.n	8029a74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8029b7c:	2500      	movs	r5, #0
 8029b7e:	e795      	b.n	8029aac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8029b80:	4663      	mov	r3, ip
 8029b82:	4665      	mov	r5, ip
 8029b84:	e7ab      	b.n	8029ade <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8029b86:	2300      	movs	r3, #0
 8029b88:	e7a9      	b.n	8029ade <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8029b8a:	4603      	mov	r3, r0
 8029b8c:	e7a7      	b.n	8029ade <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8029b8e:	bf00      	nop
 8029b90:	24027f7c 	.word	0x24027f7c

08029b94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b98:	b093      	sub	sp, #76	; 0x4c
 8029b9a:	461c      	mov	r4, r3
 8029b9c:	920c      	str	r2, [sp, #48]	; 0x30
 8029b9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8029ba0:	9011      	str	r0, [sp, #68]	; 0x44
 8029ba2:	9107      	str	r1, [sp, #28]
 8029ba4:	6850      	ldr	r0, [r2, #4]
 8029ba6:	6812      	ldr	r2, [r2, #0]
 8029ba8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8029bac:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8029bb0:	fb00 1303 	mla	r3, r0, r3, r1
 8029bb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029bb8:	eb02 0b03 	add.w	fp, r2, r3
 8029bbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029bbe:	689b      	ldr	r3, [r3, #8]
 8029bc0:	3301      	adds	r3, #1
 8029bc2:	f023 0301 	bic.w	r3, r3, #1
 8029bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8029bc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029bca:	f8d3 8000 	ldr.w	r8, [r3]
 8029bce:	9b07      	ldr	r3, [sp, #28]
 8029bd0:	2b00      	cmp	r3, #0
 8029bd2:	dc03      	bgt.n	8029bdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029bd6:	2b00      	cmp	r3, #0
 8029bd8:	f340 822b 	ble.w	802a032 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8029bdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029bde:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029be2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029be6:	1e48      	subs	r0, r1, #1
 8029be8:	1e57      	subs	r7, r2, #1
 8029bea:	2c00      	cmp	r4, #0
 8029bec:	f340 80d7 	ble.w	8029d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8029bf0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8029bf4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029bf8:	d406      	bmi.n	8029c08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029bfa:	4584      	cmp	ip, r0
 8029bfc:	da04      	bge.n	8029c08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029bfe:	2b00      	cmp	r3, #0
 8029c00:	db02      	blt.n	8029c08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029c02:	42bb      	cmp	r3, r7
 8029c04:	f2c0 80cc 	blt.w	8029da0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8029c08:	f11c 0c01 	adds.w	ip, ip, #1
 8029c0c:	f100 80bf 	bmi.w	8029d8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029c10:	4561      	cmp	r1, ip
 8029c12:	f2c0 80bc 	blt.w	8029d8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029c16:	3301      	adds	r3, #1
 8029c18:	f100 80b9 	bmi.w	8029d8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029c1c:	429a      	cmp	r2, r3
 8029c1e:	f2c0 80b6 	blt.w	8029d8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029c22:	46a2      	mov	sl, r4
 8029c24:	465f      	mov	r7, fp
 8029c26:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029c2a:	f1ba 0f00 	cmp.w	sl, #0
 8029c2e:	f340 80d4 	ble.w	8029dda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8029c32:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8029c36:	1430      	asrs	r0, r6, #16
 8029c38:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029c3c:	9308      	str	r3, [sp, #32]
 8029c3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029c40:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029c44:	142b      	asrs	r3, r5, #16
 8029c46:	f100 8124 	bmi.w	8029e92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8029c4a:	f10c 32ff 	add.w	r2, ip, #4294967295
 8029c4e:	4293      	cmp	r3, r2
 8029c50:	f280 811f 	bge.w	8029e92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8029c54:	2800      	cmp	r0, #0
 8029c56:	f2c0 811c 	blt.w	8029e92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8029c5a:	f10e 32ff 	add.w	r2, lr, #4294967295
 8029c5e:	4290      	cmp	r0, r2
 8029c60:	f280 8117 	bge.w	8029e92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8029c64:	fb00 3309 	mla	r3, r0, r9, r3
 8029c68:	0858      	lsrs	r0, r3, #1
 8029c6a:	07da      	lsls	r2, r3, #31
 8029c6c:	9a08      	ldr	r2, [sp, #32]
 8029c6e:	f818 c000 	ldrb.w	ip, [r8, r0]
 8029c72:	bf54      	ite	pl
 8029c74:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029c78:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029c7c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029c80:	fa5f fc8c 	uxtb.w	ip, ip
 8029c84:	2a00      	cmp	r2, #0
 8029c86:	f000 80ed 	beq.w	8029e64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8029c8a:	1c58      	adds	r0, r3, #1
 8029c8c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029c90:	07c0      	lsls	r0, r0, #31
 8029c92:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8029c96:	bf54      	ite	pl
 8029c98:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029c9c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029ca0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029ca4:	fa5f fe8e 	uxtb.w	lr, lr
 8029ca8:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8029cac:	b1c9      	cbz	r1, 8029ce2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8029cae:	444b      	add	r3, r9
 8029cb0:	0858      	lsrs	r0, r3, #1
 8029cb2:	07da      	lsls	r2, r3, #31
 8029cb4:	f818 0000 	ldrb.w	r0, [r8, r0]
 8029cb8:	bf54      	ite	pl
 8029cba:	f000 000f 	andpl.w	r0, r0, #15
 8029cbe:	1100      	asrmi	r0, r0, #4
 8029cc0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029cc4:	b2c0      	uxtb	r0, r0
 8029cc6:	900a      	str	r0, [sp, #40]	; 0x28
 8029cc8:	1c58      	adds	r0, r3, #1
 8029cca:	0843      	lsrs	r3, r0, #1
 8029ccc:	07c2      	lsls	r2, r0, #31
 8029cce:	f818 3003 	ldrb.w	r3, [r8, r3]
 8029cd2:	bf54      	ite	pl
 8029cd4:	f003 030f 	andpl.w	r3, r3, #15
 8029cd8:	111b      	asrmi	r3, r3, #4
 8029cda:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029cde:	b2db      	uxtb	r3, r3
 8029ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8029ce2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8029ce6:	b289      	uxth	r1, r1
 8029ce8:	fb02 f301 	mul.w	r3, r2, r1
 8029cec:	0112      	lsls	r2, r2, #4
 8029cee:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029cf2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029cf6:	1ad2      	subs	r2, r2, r3
 8029cf8:	b289      	uxth	r1, r1
 8029cfa:	b292      	uxth	r2, r2
 8029cfc:	1a40      	subs	r0, r0, r1
 8029cfe:	fa1f fe80 	uxth.w	lr, r0
 8029d02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029d04:	4342      	muls	r2, r0
 8029d06:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8029d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029d0c:	fb01 c102 	mla	r1, r1, r2, ip
 8029d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029d12:	fb03 1302 	mla	r3, r3, r2, r1
 8029d16:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029d1a:	b383      	cbz	r3, 8029d7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029d1c:	4ac6      	ldr	r2, [pc, #792]	; (802a038 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8029d1e:	2bff      	cmp	r3, #255	; 0xff
 8029d20:	6812      	ldr	r2, [r2, #0]
 8029d22:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8029d26:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8029d2a:	b2d2      	uxtb	r2, r2
 8029d2c:	f000 80ac 	beq.w	8029e88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029d30:	b299      	uxth	r1, r3
 8029d32:	43db      	mvns	r3, r3
 8029d34:	f897 c000 	ldrb.w	ip, [r7]
 8029d38:	fb12 f201 	smulbb	r2, r2, r1
 8029d3c:	b2db      	uxtb	r3, r3
 8029d3e:	fb10 f001 	smulbb	r0, r0, r1
 8029d42:	fb0c 2203 	mla	r2, ip, r3, r2
 8029d46:	fb1e f101 	smulbb	r1, lr, r1
 8029d4a:	b292      	uxth	r2, r2
 8029d4c:	f102 0c01 	add.w	ip, r2, #1
 8029d50:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8029d54:	1212      	asrs	r2, r2, #8
 8029d56:	703a      	strb	r2, [r7, #0]
 8029d58:	787a      	ldrb	r2, [r7, #1]
 8029d5a:	fb02 0003 	mla	r0, r2, r3, r0
 8029d5e:	b280      	uxth	r0, r0
 8029d60:	1c42      	adds	r2, r0, #1
 8029d62:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029d66:	78ba      	ldrb	r2, [r7, #2]
 8029d68:	fb02 1303 	mla	r3, r2, r3, r1
 8029d6c:	1200      	asrs	r0, r0, #8
 8029d6e:	b29b      	uxth	r3, r3
 8029d70:	7078      	strb	r0, [r7, #1]
 8029d72:	f103 0e01 	add.w	lr, r3, #1
 8029d76:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8029d7a:	121b      	asrs	r3, r3, #8
 8029d7c:	70bb      	strb	r3, [r7, #2]
 8029d7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8029d80:	3703      	adds	r7, #3
 8029d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029d86:	441d      	add	r5, r3
 8029d88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029d8a:	441e      	add	r6, r3
 8029d8c:	e74d      	b.n	8029c2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8029d8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8029d90:	3c01      	subs	r4, #1
 8029d92:	f10b 0b03 	add.w	fp, fp, #3
 8029d96:	441d      	add	r5, r3
 8029d98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029d9a:	441e      	add	r6, r3
 8029d9c:	e725      	b.n	8029bea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8029d9e:	d021      	beq.n	8029de4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8029da0:	1e63      	subs	r3, r4, #1
 8029da2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8029da4:	fb00 5003 	mla	r0, r0, r3, r5
 8029da8:	1400      	asrs	r0, r0, #16
 8029daa:	f53f af3a 	bmi.w	8029c22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029dae:	3901      	subs	r1, #1
 8029db0:	4288      	cmp	r0, r1
 8029db2:	f6bf af36 	bge.w	8029c22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029db6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8029db8:	fb01 6303 	mla	r3, r1, r3, r6
 8029dbc:	141b      	asrs	r3, r3, #16
 8029dbe:	f53f af30 	bmi.w	8029c22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029dc2:	3a01      	subs	r2, #1
 8029dc4:	4293      	cmp	r3, r2
 8029dc6:	f6bf af2c 	bge.w	8029c22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029dca:	f10b 0c03 	add.w	ip, fp, #3
 8029dce:	46a6      	mov	lr, r4
 8029dd0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029dd4:	f1be 0f00 	cmp.w	lr, #0
 8029dd8:	dc79      	bgt.n	8029ece <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8029dda:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8029dde:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8029de2:	44a3      	add	fp, r4
 8029de4:	9b07      	ldr	r3, [sp, #28]
 8029de6:	2b00      	cmp	r3, #0
 8029de8:	f340 8123 	ble.w	802a032 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8029dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029df0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029df2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029df6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029dfa:	eef0 6a62 	vmov.f32	s13, s5
 8029dfe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029e02:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029e06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029e0a:	ee16 5a90 	vmov	r5, s13
 8029e0e:	eef0 6a43 	vmov.f32	s13, s6
 8029e12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029e16:	ee16 6a90 	vmov	r6, s13
 8029e1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029e1e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029e22:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029e26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029e2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029e2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029e32:	ee12 2a90 	vmov	r2, s5
 8029e36:	eef0 2a47 	vmov.f32	s5, s14
 8029e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e3e:	ee13 2a10 	vmov	r2, s6
 8029e42:	931f      	str	r3, [sp, #124]	; 0x7c
 8029e44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029e46:	eeb0 3a67 	vmov.f32	s6, s15
 8029e4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e4e:	9320      	str	r3, [sp, #128]	; 0x80
 8029e50:	9b07      	ldr	r3, [sp, #28]
 8029e52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029e54:	3b01      	subs	r3, #1
 8029e56:	9307      	str	r3, [sp, #28]
 8029e58:	bf08      	it	eq
 8029e5a:	4614      	moveq	r4, r2
 8029e5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029e5e:	bf18      	it	ne
 8029e60:	461c      	movne	r4, r3
 8029e62:	e6b4      	b.n	8029bce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029e64:	2900      	cmp	r1, #0
 8029e66:	f43f af3c 	beq.w	8029ce2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8029e6a:	eb09 0003 	add.w	r0, r9, r3
 8029e6e:	0843      	lsrs	r3, r0, #1
 8029e70:	07c0      	lsls	r0, r0, #31
 8029e72:	f818 3003 	ldrb.w	r3, [r8, r3]
 8029e76:	bf54      	ite	pl
 8029e78:	f003 030f 	andpl.w	r3, r3, #15
 8029e7c:	111b      	asrmi	r3, r3, #4
 8029e7e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029e82:	b2db      	uxtb	r3, r3
 8029e84:	930a      	str	r3, [sp, #40]	; 0x28
 8029e86:	e72c      	b.n	8029ce2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8029e88:	703a      	strb	r2, [r7, #0]
 8029e8a:	7078      	strb	r0, [r7, #1]
 8029e8c:	f887 e002 	strb.w	lr, [r7, #2]
 8029e90:	e775      	b.n	8029d7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029e92:	1c5a      	adds	r2, r3, #1
 8029e94:	f53f af73 	bmi.w	8029d7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029e98:	4594      	cmp	ip, r2
 8029e9a:	f6ff af70 	blt.w	8029d7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029e9e:	1c42      	adds	r2, r0, #1
 8029ea0:	f53f af6d 	bmi.w	8029d7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029ea4:	4596      	cmp	lr, r2
 8029ea6:	f6ff af6a 	blt.w	8029d7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029eaa:	9302      	str	r3, [sp, #8]
 8029eac:	fa0f f38e 	sxth.w	r3, lr
 8029eb0:	9a08      	ldr	r2, [sp, #32]
 8029eb2:	9301      	str	r3, [sp, #4]
 8029eb4:	fa0f f38c 	sxth.w	r3, ip
 8029eb8:	9105      	str	r1, [sp, #20]
 8029eba:	4639      	mov	r1, r7
 8029ebc:	9300      	str	r3, [sp, #0]
 8029ebe:	464b      	mov	r3, r9
 8029ec0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029ec4:	4642      	mov	r2, r8
 8029ec6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8029ec8:	f7ff fd90 	bl	80299ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8029ecc:	e757      	b.n	8029d7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029ece:	142a      	asrs	r2, r5, #16
 8029ed0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8029ed4:	1433      	asrs	r3, r6, #16
 8029ed6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8029eda:	fb09 2303 	mla	r3, r9, r3, r2
 8029ede:	085a      	lsrs	r2, r3, #1
 8029ee0:	07d9      	lsls	r1, r3, #31
 8029ee2:	f818 2002 	ldrb.w	r2, [r8, r2]
 8029ee6:	bf54      	ite	pl
 8029ee8:	f002 020f 	andpl.w	r2, r2, #15
 8029eec:	1112      	asrmi	r2, r2, #4
 8029eee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029ef2:	b2d2      	uxtb	r2, r2
 8029ef4:	2800      	cmp	r0, #0
 8029ef6:	f000 8085 	beq.w	802a004 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8029efa:	f103 0a01 	add.w	sl, r3, #1
 8029efe:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8029f02:	f01a 0f01 	tst.w	sl, #1
 8029f06:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029f0a:	bf0c      	ite	eq
 8029f0c:	f001 010f 	andeq.w	r1, r1, #15
 8029f10:	1109      	asrne	r1, r1, #4
 8029f12:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029f16:	b2c9      	uxtb	r1, r1
 8029f18:	910f      	str	r1, [sp, #60]	; 0x3c
 8029f1a:	b1df      	cbz	r7, 8029f54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8029f1c:	444b      	add	r3, r9
 8029f1e:	0859      	lsrs	r1, r3, #1
 8029f20:	f013 0f01 	tst.w	r3, #1
 8029f24:	f103 0301 	add.w	r3, r3, #1
 8029f28:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029f2c:	bf0c      	ite	eq
 8029f2e:	f001 010f 	andeq.w	r1, r1, #15
 8029f32:	1109      	asrne	r1, r1, #4
 8029f34:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029f38:	b2c9      	uxtb	r1, r1
 8029f3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8029f3c:	0859      	lsrs	r1, r3, #1
 8029f3e:	07db      	lsls	r3, r3, #31
 8029f40:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029f44:	bf54      	ite	pl
 8029f46:	f001 010f 	andpl.w	r1, r1, #15
 8029f4a:	1109      	asrmi	r1, r1, #4
 8029f4c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029f50:	b2c9      	uxtb	r1, r1
 8029f52:	9110      	str	r1, [sp, #64]	; 0x40
 8029f54:	b280      	uxth	r0, r0
 8029f56:	b2bf      	uxth	r7, r7
 8029f58:	fb00 f307 	mul.w	r3, r0, r7
 8029f5c:	0100      	lsls	r0, r0, #4
 8029f5e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8029f62:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8029f66:	1ac0      	subs	r0, r0, r3
 8029f68:	b2bf      	uxth	r7, r7
 8029f6a:	b280      	uxth	r0, r0
 8029f6c:	1bc9      	subs	r1, r1, r7
 8029f6e:	fa1f fa81 	uxth.w	sl, r1
 8029f72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029f74:	4348      	muls	r0, r1
 8029f76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029f78:	fb02 020a 	mla	r2, r2, sl, r0
 8029f7c:	fb07 2701 	mla	r7, r7, r1, r2
 8029f80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029f82:	fb03 7302 	mla	r3, r3, r2, r7
 8029f86:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029f8a:	b393      	cbz	r3, 8029ff2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8029f8c:	4a2a      	ldr	r2, [pc, #168]	; (802a038 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8029f8e:	2bff      	cmp	r3, #255	; 0xff
 8029f90:	6811      	ldr	r1, [r2, #0]
 8029f92:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8029f96:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8029f9a:	b2c9      	uxtb	r1, r1
 8029f9c:	d042      	beq.n	802a024 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8029f9e:	b298      	uxth	r0, r3
 8029fa0:	43db      	mvns	r3, r3
 8029fa2:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8029fa6:	fb11 f100 	smulbb	r1, r1, r0
 8029faa:	b2db      	uxtb	r3, r3
 8029fac:	fb17 f700 	smulbb	r7, r7, r0
 8029fb0:	fb02 1103 	mla	r1, r2, r3, r1
 8029fb4:	fb1a f000 	smulbb	r0, sl, r0
 8029fb8:	b289      	uxth	r1, r1
 8029fba:	1c4a      	adds	r2, r1, #1
 8029fbc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8029fc0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8029fc4:	fb02 7703 	mla	r7, r2, r3, r7
 8029fc8:	1209      	asrs	r1, r1, #8
 8029fca:	b2bf      	uxth	r7, r7
 8029fcc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8029fd0:	1c7a      	adds	r2, r7, #1
 8029fd2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8029fd6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8029fda:	fb02 0303 	mla	r3, r2, r3, r0
 8029fde:	123f      	asrs	r7, r7, #8
 8029fe0:	b29b      	uxth	r3, r3
 8029fe2:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8029fe6:	1c5a      	adds	r2, r3, #1
 8029fe8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029fec:	121b      	asrs	r3, r3, #8
 8029fee:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8029ff2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8029ff4:	f10c 0c03 	add.w	ip, ip, #3
 8029ff8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8029ffc:	441d      	add	r5, r3
 8029ffe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a000:	441e      	add	r6, r3
 802a002:	e6e7      	b.n	8029dd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802a004:	2f00      	cmp	r7, #0
 802a006:	d0a5      	beq.n	8029f54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802a008:	444b      	add	r3, r9
 802a00a:	0859      	lsrs	r1, r3, #1
 802a00c:	07db      	lsls	r3, r3, #31
 802a00e:	f818 1001 	ldrb.w	r1, [r8, r1]
 802a012:	bf54      	ite	pl
 802a014:	f001 010f 	andpl.w	r1, r1, #15
 802a018:	1109      	asrmi	r1, r1, #4
 802a01a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a01e:	b2c9      	uxtb	r1, r1
 802a020:	910b      	str	r1, [sp, #44]	; 0x2c
 802a022:	e797      	b.n	8029f54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802a024:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802a028:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802a02c:	f80c ac01 	strb.w	sl, [ip, #-1]
 802a030:	e7df      	b.n	8029ff2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802a032:	b013      	add	sp, #76	; 0x4c
 802a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a038:	24027f7c 	.word	0x24027f7c

0802a03c <CRC_Lock>:
 802a03c:	4a20      	ldr	r2, [pc, #128]	; (802a0c0 <CRC_Lock+0x84>)
 802a03e:	b530      	push	{r4, r5, lr}
 802a040:	6813      	ldr	r3, [r2, #0]
 802a042:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802a046:	f24c 2540 	movw	r5, #49728	; 0xc240
 802a04a:	f023 0301 	bic.w	r3, r3, #1
 802a04e:	6013      	str	r3, [r2, #0]
 802a050:	4b1c      	ldr	r3, [pc, #112]	; (802a0c4 <CRC_Lock+0x88>)
 802a052:	681a      	ldr	r2, [r3, #0]
 802a054:	4022      	ands	r2, r4
 802a056:	42aa      	cmp	r2, r5
 802a058:	d005      	beq.n	802a066 <CRC_Lock+0x2a>
 802a05a:	681b      	ldr	r3, [r3, #0]
 802a05c:	f24c 2270 	movw	r2, #49776	; 0xc270
 802a060:	4023      	ands	r3, r4
 802a062:	4293      	cmp	r3, r2
 802a064:	d124      	bne.n	802a0b0 <CRC_Lock+0x74>
 802a066:	4b18      	ldr	r3, [pc, #96]	; (802a0c8 <CRC_Lock+0x8c>)
 802a068:	681b      	ldr	r3, [r3, #0]
 802a06a:	bb0b      	cbnz	r3, 802a0b0 <CRC_Lock+0x74>
 802a06c:	4b17      	ldr	r3, [pc, #92]	; (802a0cc <CRC_Lock+0x90>)
 802a06e:	681a      	ldr	r2, [r3, #0]
 802a070:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a074:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802a078:	d00d      	beq.n	802a096 <CRC_Lock+0x5a>
 802a07a:	681a      	ldr	r2, [r3, #0]
 802a07c:	f240 4483 	movw	r4, #1155	; 0x483
 802a080:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a084:	42a2      	cmp	r2, r4
 802a086:	d006      	beq.n	802a096 <CRC_Lock+0x5a>
 802a088:	681b      	ldr	r3, [r3, #0]
 802a08a:	f240 4285 	movw	r2, #1157	; 0x485
 802a08e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a092:	4293      	cmp	r3, r2
 802a094:	d10c      	bne.n	802a0b0 <CRC_Lock+0x74>
 802a096:	4b0e      	ldr	r3, [pc, #56]	; (802a0d0 <CRC_Lock+0x94>)
 802a098:	2201      	movs	r2, #1
 802a09a:	601a      	str	r2, [r3, #0]
 802a09c:	681a      	ldr	r2, [r3, #0]
 802a09e:	2a00      	cmp	r2, #0
 802a0a0:	d1fc      	bne.n	802a09c <CRC_Lock+0x60>
 802a0a2:	4b0c      	ldr	r3, [pc, #48]	; (802a0d4 <CRC_Lock+0x98>)
 802a0a4:	6018      	str	r0, [r3, #0]
 802a0a6:	6818      	ldr	r0, [r3, #0]
 802a0a8:	1a43      	subs	r3, r0, r1
 802a0aa:	4258      	negs	r0, r3
 802a0ac:	4158      	adcs	r0, r3
 802a0ae:	bd30      	pop	{r4, r5, pc}
 802a0b0:	4b09      	ldr	r3, [pc, #36]	; (802a0d8 <CRC_Lock+0x9c>)
 802a0b2:	2201      	movs	r2, #1
 802a0b4:	601a      	str	r2, [r3, #0]
 802a0b6:	681a      	ldr	r2, [r3, #0]
 802a0b8:	2a00      	cmp	r2, #0
 802a0ba:	d1fc      	bne.n	802a0b6 <CRC_Lock+0x7a>
 802a0bc:	4b07      	ldr	r3, [pc, #28]	; (802a0dc <CRC_Lock+0xa0>)
 802a0be:	e7f1      	b.n	802a0a4 <CRC_Lock+0x68>
 802a0c0:	e0002000 	.word	0xe0002000
 802a0c4:	e000ed00 	.word	0xe000ed00
 802a0c8:	e0042000 	.word	0xe0042000
 802a0cc:	5c001000 	.word	0x5c001000
 802a0d0:	58024c08 	.word	0x58024c08
 802a0d4:	58024c00 	.word	0x58024c00
 802a0d8:	40023008 	.word	0x40023008
 802a0dc:	40023000 	.word	0x40023000

0802a0e0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802a0e0:	6101      	str	r1, [r0, #16]
 802a0e2:	4770      	bx	lr

0802a0e4 <_ZN8touchgfx8Gestures4tickEv>:
 802a0e4:	7b83      	ldrb	r3, [r0, #14]
 802a0e6:	b14b      	cbz	r3, 802a0fc <_ZN8touchgfx8Gestures4tickEv+0x18>
 802a0e8:	8903      	ldrh	r3, [r0, #8]
 802a0ea:	3301      	adds	r3, #1
 802a0ec:	b29b      	uxth	r3, r3
 802a0ee:	2b07      	cmp	r3, #7
 802a0f0:	8103      	strh	r3, [r0, #8]
 802a0f2:	bf81      	itttt	hi
 802a0f4:	2300      	movhi	r3, #0
 802a0f6:	8143      	strhhi	r3, [r0, #10]
 802a0f8:	8183      	strhhi	r3, [r0, #12]
 802a0fa:	7383      	strbhi	r3, [r0, #14]
 802a0fc:	4770      	bx	lr
	...

0802a100 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802a100:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802a104:	4698      	mov	r8, r3
 802a106:	8883      	ldrh	r3, [r0, #4]
 802a108:	4604      	mov	r4, r0
 802a10a:	4617      	mov	r7, r2
 802a10c:	f8ad 3006 	strh.w	r3, [sp, #6]
 802a110:	eba8 0303 	sub.w	r3, r8, r3
 802a114:	4a19      	ldr	r2, [pc, #100]	; (802a17c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802a116:	460e      	mov	r6, r1
 802a118:	b21b      	sxth	r3, r3
 802a11a:	88c1      	ldrh	r1, [r0, #6]
 802a11c:	9200      	str	r2, [sp, #0]
 802a11e:	2000      	movs	r0, #0
 802a120:	2b00      	cmp	r3, #0
 802a122:	8aa2      	ldrh	r2, [r4, #20]
 802a124:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802a128:	bfb8      	it	lt
 802a12a:	425b      	neglt	r3, r3
 802a12c:	f88d 0004 	strb.w	r0, [sp, #4]
 802a130:	f8ad 1008 	strh.w	r1, [sp, #8]
 802a134:	b21b      	sxth	r3, r3
 802a136:	f8ad 800a 	strh.w	r8, [sp, #10]
 802a13a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802a13e:	4293      	cmp	r3, r2
 802a140:	dc07      	bgt.n	802a152 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802a142:	1a69      	subs	r1, r5, r1
 802a144:	b209      	sxth	r1, r1
 802a146:	2900      	cmp	r1, #0
 802a148:	bfb8      	it	lt
 802a14a:	4249      	neglt	r1, r1
 802a14c:	b209      	sxth	r1, r1
 802a14e:	428a      	cmp	r2, r1
 802a150:	da10      	bge.n	802a174 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802a152:	6920      	ldr	r0, [r4, #16]
 802a154:	4669      	mov	r1, sp
 802a156:	eba8 0606 	sub.w	r6, r8, r6
 802a15a:	1bef      	subs	r7, r5, r7
 802a15c:	6803      	ldr	r3, [r0, #0]
 802a15e:	685b      	ldr	r3, [r3, #4]
 802a160:	4798      	blx	r3
 802a162:	2300      	movs	r3, #0
 802a164:	2001      	movs	r0, #1
 802a166:	8166      	strh	r6, [r4, #10]
 802a168:	8123      	strh	r3, [r4, #8]
 802a16a:	81a7      	strh	r7, [r4, #12]
 802a16c:	f8a4 8004 	strh.w	r8, [r4, #4]
 802a170:	80e5      	strh	r5, [r4, #6]
 802a172:	73a0      	strb	r0, [r4, #14]
 802a174:	b004      	add	sp, #16
 802a176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a17a:	bf00      	nop
 802a17c:	0802fe14 	.word	0x0802fe14

0802a180 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802a180:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a182:	461e      	mov	r6, r3
 802a184:	1e4b      	subs	r3, r1, #1
 802a186:	b085      	sub	sp, #20
 802a188:	4604      	mov	r4, r0
 802a18a:	2b01      	cmp	r3, #1
 802a18c:	460d      	mov	r5, r1
 802a18e:	4617      	mov	r7, r2
 802a190:	d84b      	bhi.n	802a22a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802a192:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802a196:	1cd3      	adds	r3, r2, #3
 802a198:	b29b      	uxth	r3, r3
 802a19a:	2b06      	cmp	r3, #6
 802a19c:	d916      	bls.n	802a1cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802a19e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802a240 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a1a2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a1a6:	f8cd c004 	str.w	ip, [sp, #4]
 802a1aa:	f04f 0c00 	mov.w	ip, #0
 802a1ae:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a1b2:	6900      	ldr	r0, [r0, #16]
 802a1b4:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a1b8:	a901      	add	r1, sp, #4
 802a1ba:	f88d c008 	strb.w	ip, [sp, #8]
 802a1be:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a1c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a1c6:	6803      	ldr	r3, [r0, #0]
 802a1c8:	689b      	ldr	r3, [r3, #8]
 802a1ca:	4798      	blx	r3
 802a1cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a1d0:	1cd3      	adds	r3, r2, #3
 802a1d2:	b29b      	uxth	r3, r3
 802a1d4:	2b06      	cmp	r3, #6
 802a1d6:	d916      	bls.n	802a206 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a1d8:	f8df c064 	ldr.w	ip, [pc, #100]	; 802a240 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a1dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a1e0:	f8cd c004 	str.w	ip, [sp, #4]
 802a1e4:	f04f 0c01 	mov.w	ip, #1
 802a1e8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a1ec:	6920      	ldr	r0, [r4, #16]
 802a1ee:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a1f2:	a901      	add	r1, sp, #4
 802a1f4:	f88d c008 	strb.w	ip, [sp, #8]
 802a1f8:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a1fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a200:	6803      	ldr	r3, [r0, #0]
 802a202:	689b      	ldr	r3, [r3, #8]
 802a204:	4798      	blx	r3
 802a206:	4b0d      	ldr	r3, [pc, #52]	; (802a23c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802a208:	a901      	add	r1, sp, #4
 802a20a:	6920      	ldr	r0, [r4, #16]
 802a20c:	9301      	str	r3, [sp, #4]
 802a20e:	2300      	movs	r3, #0
 802a210:	f88d 5008 	strb.w	r5, [sp, #8]
 802a214:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a218:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a21c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a220:	6803      	ldr	r3, [r0, #0]
 802a222:	681b      	ldr	r3, [r3, #0]
 802a224:	4798      	blx	r3
 802a226:	b005      	add	sp, #20
 802a228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a22a:	2900      	cmp	r1, #0
 802a22c:	d1eb      	bne.n	802a206 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a22e:	80a2      	strh	r2, [r4, #4]
 802a230:	80c6      	strh	r6, [r0, #6]
 802a232:	60a1      	str	r1, [r4, #8]
 802a234:	81a1      	strh	r1, [r4, #12]
 802a236:	73a1      	strb	r1, [r4, #14]
 802a238:	e7e5      	b.n	802a206 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a23a:	bf00      	nop
 802a23c:	0802fe00 	.word	0x0802fe00
 802a240:	0802fe28 	.word	0x0802fe28

0802a244 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 802a244:	10c9      	asrs	r1, r1, #3
 802a246:	2900      	cmp	r1, #0
 802a248:	bfb8      	it	lt
 802a24a:	4249      	neglt	r1, r1
 802a24c:	2801      	cmp	r0, #1
 802a24e:	d108      	bne.n	802a262 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802a250:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802a254:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802a258:	4601      	mov	r1, r0
 802a25a:	dd02      	ble.n	802a262 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802a25c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802a260:	4770      	bx	lr
 802a262:	29ff      	cmp	r1, #255	; 0xff
 802a264:	bfa8      	it	ge
 802a266:	21ff      	movge	r1, #255	; 0xff
 802a268:	4608      	mov	r0, r1
 802a26a:	4770      	bx	lr

0802a26c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802a26c:	b410      	push	{r4}
 802a26e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802a272:	429c      	cmp	r4, r3
 802a274:	d803      	bhi.n	802a27e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802a276:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a27a:	f7f3 bd89 	b.w	801dd90 <_ZN8touchgfx7Outline6lineToEii>
 802a27e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a282:	4770      	bx	lr

0802a284 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802a284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a288:	b08b      	sub	sp, #44	; 0x2c
 802a28a:	4606      	mov	r6, r0
 802a28c:	468a      	mov	sl, r1
 802a28e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802a292:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 802a296:	9308      	str	r3, [sp, #32]
 802a298:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802a29c:	9309      	str	r3, [sp, #36]	; 0x24
 802a29e:	f7f3 fee2 	bl	801e066 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802a2a2:	68b5      	ldr	r5, [r6, #8]
 802a2a4:	4604      	mov	r4, r0
 802a2a6:	2d00      	cmp	r5, #0
 802a2a8:	d044      	beq.n	802a334 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802a2aa:	6873      	ldr	r3, [r6, #4]
 802a2ac:	42ab      	cmp	r3, r5
 802a2ae:	d33d      	bcc.n	802a32c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802a2b0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802a2b4:	f04f 0800 	mov.w	r8, #0
 802a2b8:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 802a2bc:	eb02 0b03 	add.w	fp, r2, r3
 802a2c0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802a2c4:	fb02 1203 	mla	r2, r2, r3, r1
 802a2c8:	9205      	str	r2, [sp, #20]
 802a2ca:	1e6a      	subs	r2, r5, #1
 802a2cc:	9204      	str	r2, [sp, #16]
 802a2ce:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802a2d2:	f9b4 7000 	ldrsh.w	r7, [r4]
 802a2d6:	454b      	cmp	r3, r9
 802a2d8:	463a      	mov	r2, r7
 802a2da:	d008      	beq.n	802a2ee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802a2dc:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 802a2e0:	eb03 0b09 	add.w	fp, r3, r9
 802a2e4:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802a2e8:	fb03 1309 	mla	r3, r3, r9, r1
 802a2ec:	9305      	str	r3, [sp, #20]
 802a2ee:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802a2f2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802a2f6:	4498      	add	r8, r3
 802a2f8:	9b04      	ldr	r3, [sp, #16]
 802a2fa:	3b01      	subs	r3, #1
 802a2fc:	9304      	str	r3, [sp, #16]
 802a2fe:	9b04      	ldr	r3, [sp, #16]
 802a300:	3301      	adds	r3, #1
 802a302:	d015      	beq.n	802a330 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802a304:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802a308:	42bb      	cmp	r3, r7
 802a30a:	d117      	bne.n	802a33c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802a30c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802a310:	9b04      	ldr	r3, [sp, #16]
 802a312:	4548      	cmp	r0, r9
 802a314:	f103 33ff 	add.w	r3, r3, #4294967295
 802a318:	d17d      	bne.n	802a416 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802a31a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802a31e:	4401      	add	r1, r0
 802a320:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802a324:	4480      	add	r8, r0
 802a326:	e7e9      	b.n	802a2fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802a328:	461f      	mov	r7, r3
 802a32a:	e042      	b.n	802a3b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802a32c:	2000      	movs	r0, #0
 802a32e:	e002      	b.n	802a336 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802a330:	2900      	cmp	r1, #0
 802a332:	d16d      	bne.n	802a410 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802a334:	2001      	movs	r0, #1
 802a336:	b00b      	add	sp, #44	; 0x2c
 802a338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a33c:	b379      	cbz	r1, 802a39e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802a33e:	2f00      	cmp	r7, #0
 802a340:	db29      	blt.n	802a396 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802a342:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802a346:	42bb      	cmp	r3, r7
 802a348:	dd25      	ble.n	802a396 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802a34a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802a34e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802a352:	f7ff ff77 	bl	802a244 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802a356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a358:	fb10 f003 	smulbb	r0, r0, r3
 802a35c:	b280      	uxth	r0, r0
 802a35e:	1c41      	adds	r1, r0, #1
 802a360:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802a364:	1209      	asrs	r1, r1, #8
 802a366:	f011 0fff 	tst.w	r1, #255	; 0xff
 802a36a:	d014      	beq.n	802a396 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802a36c:	b2c9      	uxtb	r1, r1
 802a36e:	9808      	ldr	r0, [sp, #32]
 802a370:	b2ba      	uxth	r2, r7
 802a372:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802a374:	9102      	str	r1, [sp, #8]
 802a376:	2101      	movs	r1, #1
 802a378:	4413      	add	r3, r2
 802a37a:	4402      	add	r2, r0
 802a37c:	9101      	str	r1, [sp, #4]
 802a37e:	fa0f f18b 	sxth.w	r1, fp
 802a382:	f8da 0000 	ldr.w	r0, [sl]
 802a386:	b21b      	sxth	r3, r3
 802a388:	9100      	str	r1, [sp, #0]
 802a38a:	b212      	sxth	r2, r2
 802a38c:	6941      	ldr	r1, [r0, #20]
 802a38e:	4650      	mov	r0, sl
 802a390:	460d      	mov	r5, r1
 802a392:	9905      	ldr	r1, [sp, #20]
 802a394:	47a8      	blx	r5
 802a396:	9b04      	ldr	r3, [sp, #16]
 802a398:	1c7a      	adds	r2, r7, #1
 802a39a:	3301      	adds	r3, #1
 802a39c:	d0ca      	beq.n	802a334 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802a39e:	f9b4 7000 	ldrsh.w	r7, [r4]
 802a3a2:	1abb      	subs	r3, r7, r2
 802a3a4:	2b00      	cmp	r3, #0
 802a3a6:	dd31      	ble.n	802a40c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802a3a8:	2a00      	cmp	r2, #0
 802a3aa:	dabd      	bge.n	802a328 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802a3ac:	2f00      	cmp	r7, #0
 802a3ae:	dd2d      	ble.n	802a40c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802a3b0:	2200      	movs	r2, #0
 802a3b2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802a3b6:	19d1      	adds	r1, r2, r7
 802a3b8:	4299      	cmp	r1, r3
 802a3ba:	db02      	blt.n	802a3c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802a3bc:	1a9f      	subs	r7, r3, r2
 802a3be:	2f00      	cmp	r7, #0
 802a3c0:	dd24      	ble.n	802a40c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802a3c2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802a3c6:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802a3ca:	f7ff ff3b 	bl	802a244 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802a3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a3d0:	fb10 f003 	smulbb	r0, r0, r3
 802a3d4:	b280      	uxth	r0, r0
 802a3d6:	1c41      	adds	r1, r0, #1
 802a3d8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802a3dc:	1209      	asrs	r1, r1, #8
 802a3de:	f011 0fff 	tst.w	r1, #255	; 0xff
 802a3e2:	d013      	beq.n	802a40c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802a3e4:	b292      	uxth	r2, r2
 802a3e6:	9808      	ldr	r0, [sp, #32]
 802a3e8:	b2c9      	uxtb	r1, r1
 802a3ea:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802a3ec:	b23f      	sxth	r7, r7
 802a3ee:	4413      	add	r3, r2
 802a3f0:	9102      	str	r1, [sp, #8]
 802a3f2:	4402      	add	r2, r0
 802a3f4:	fa0f f18b 	sxth.w	r1, fp
 802a3f8:	f8da 0000 	ldr.w	r0, [sl]
 802a3fc:	b21b      	sxth	r3, r3
 802a3fe:	9100      	str	r1, [sp, #0]
 802a400:	b212      	sxth	r2, r2
 802a402:	9701      	str	r7, [sp, #4]
 802a404:	9905      	ldr	r1, [sp, #20]
 802a406:	6947      	ldr	r7, [r0, #20]
 802a408:	4650      	mov	r0, sl
 802a40a:	47b8      	blx	r7
 802a40c:	464b      	mov	r3, r9
 802a40e:	e75e      	b.n	802a2ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802a410:	2f00      	cmp	r7, #0
 802a412:	da96      	bge.n	802a342 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802a414:	e78e      	b.n	802a334 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802a416:	2900      	cmp	r1, #0
 802a418:	d0f8      	beq.n	802a40c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802a41a:	e790      	b.n	802a33e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802a41c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802a41c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802a420:	4b4a      	ldr	r3, [pc, #296]	; (802a54c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 802a422:	2500      	movs	r5, #0
 802a424:	f100 0620 	add.w	r6, r0, #32
 802a428:	4604      	mov	r4, r0
 802a42a:	4690      	mov	r8, r2
 802a42c:	f100 0718 	add.w	r7, r0, #24
 802a430:	e9c0 3100 	strd	r3, r1, [r0]
 802a434:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802a438:	e9c0 5504 	strd	r5, r5, [r0, #16]
 802a43c:	e9c0 5506 	strd	r5, r5, [r0, #24]
 802a440:	4630      	mov	r0, r6
 802a442:	f7f2 ffeb 	bl	801d41c <_ZN8touchgfx7OutlineC1Ev>
 802a446:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 802a44a:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 802a44e:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 802a452:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 802a456:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 802a45a:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 802a45e:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 802a462:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802a466:	9500      	str	r5, [sp, #0]
 802a468:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 802a46c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 802a470:	f9b8 2000 	ldrsh.w	r2, [r8]
 802a474:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802a478:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802a47c:	4410      	add	r0, r2
 802a47e:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802a482:	b280      	uxth	r0, r0
 802a484:	fa0f fa80 	sxth.w	sl, r0
 802a488:	45aa      	cmp	sl, r5
 802a48a:	dd5c      	ble.n	802a546 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802a48c:	4591      	cmp	r9, r2
 802a48e:	dd5a      	ble.n	802a546 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802a490:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802a494:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802a498:	440b      	add	r3, r1
 802a49a:	b29b      	uxth	r3, r3
 802a49c:	b21d      	sxth	r5, r3
 802a49e:	2d00      	cmp	r5, #0
 802a4a0:	dd51      	ble.n	802a546 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802a4a2:	458e      	cmp	lr, r1
 802a4a4:	dd4f      	ble.n	802a546 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802a4a6:	45d1      	cmp	r9, sl
 802a4a8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802a4ac:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802a4b0:	bfb8      	it	lt
 802a4b2:	fa1f f089 	uxthlt.w	r0, r9
 802a4b6:	45ae      	cmp	lr, r5
 802a4b8:	f8ad 2000 	strh.w	r2, [sp]
 802a4bc:	bfb8      	it	lt
 802a4be:	fa1f f38e 	uxthlt.w	r3, lr
 802a4c2:	1a80      	subs	r0, r0, r2
 802a4c4:	f8ad 1002 	strh.w	r1, [sp, #2]
 802a4c8:	1a5b      	subs	r3, r3, r1
 802a4ca:	f8ad 0004 	strh.w	r0, [sp, #4]
 802a4ce:	f8ad 3006 	strh.w	r3, [sp, #6]
 802a4d2:	466d      	mov	r5, sp
 802a4d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 802a4d8:	e887 0003 	stmia.w	r7, {r0, r1}
 802a4dc:	f8dc 3000 	ldr.w	r3, [ip]
 802a4e0:	4660      	mov	r0, ip
 802a4e2:	4639      	mov	r1, r7
 802a4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a4e6:	4798      	blx	r3
 802a4e8:	6861      	ldr	r1, [r4, #4]
 802a4ea:	4628      	mov	r0, r5
 802a4ec:	3104      	adds	r1, #4
 802a4ee:	f7f4 fcef 	bl	801eed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802a4f2:	4638      	mov	r0, r7
 802a4f4:	f7f4 fca8 	bl	801ee48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802a4f8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802a4fc:	f8bd 2000 	ldrh.w	r2, [sp]
 802a500:	4630      	mov	r0, r6
 802a502:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 802a506:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802a50a:	f7f2 ff6b 	bl	801d3e4 <_ZN8touchgfx7Outline5resetEv>
 802a50e:	f9bd 3000 	ldrsh.w	r3, [sp]
 802a512:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 802a516:	4620      	mov	r0, r4
 802a518:	015b      	lsls	r3, r3, #5
 802a51a:	60a3      	str	r3, [r4, #8]
 802a51c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802a520:	015b      	lsls	r3, r3, #5
 802a522:	60e3      	str	r3, [r4, #12]
 802a524:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802a528:	015b      	lsls	r3, r3, #5
 802a52a:	6123      	str	r3, [r4, #16]
 802a52c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802a530:	015b      	lsls	r3, r3, #5
 802a532:	6163      	str	r3, [r4, #20]
 802a534:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 802a538:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 802a53c:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 802a540:	b002      	add	sp, #8
 802a542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a546:	2300      	movs	r3, #0
 802a548:	9301      	str	r3, [sp, #4]
 802a54a:	e7c2      	b.n	802a4d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 802a54c:	08030058 	.word	0x08030058

0802a550 <_ZN8touchgfx6Canvas5closeEv>:
 802a550:	b538      	push	{r3, r4, r5, lr}
 802a552:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802a556:	4604      	mov	r4, r0
 802a558:	b193      	cbz	r3, 802a580 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a55a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 802a55e:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 802a562:	4213      	tst	r3, r2
 802a564:	d10c      	bne.n	802a580 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a566:	f100 0520 	add.w	r5, r0, #32
 802a56a:	b123      	cbz	r3, 802a576 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802a56c:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 802a570:	4628      	mov	r0, r5
 802a572:	f7ff fe7b 	bl	802a26c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a576:	4628      	mov	r0, r5
 802a578:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 802a57c:	f7ff fe76 	bl	802a26c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a580:	2300      	movs	r3, #0
 802a582:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802a586:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 802a58a:	4298      	cmp	r0, r3
 802a58c:	bf34      	ite	cc
 802a58e:	2000      	movcc	r0, #0
 802a590:	2001      	movcs	r0, #1
 802a592:	bd38      	pop	{r3, r4, r5, pc}

0802a594 <_ZN8touchgfx6Canvas6renderEh>:
 802a594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802a598:	4604      	mov	r4, r0
 802a59a:	6840      	ldr	r0, [r0, #4]
 802a59c:	460d      	mov	r5, r1
 802a59e:	6803      	ldr	r3, [r0, #0]
 802a5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802a5a2:	4798      	blx	r3
 802a5a4:	fb10 f105 	smulbb	r1, r0, r5
 802a5a8:	b289      	uxth	r1, r1
 802a5aa:	1c4d      	adds	r5, r1, #1
 802a5ac:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802a5b0:	122d      	asrs	r5, r5, #8
 802a5b2:	f000 8097 	beq.w	802a6e4 <_ZN8touchgfx6Canvas6renderEh+0x150>
 802a5b6:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 802a5ba:	2b00      	cmp	r3, #0
 802a5bc:	f000 8092 	beq.w	802a6e4 <_ZN8touchgfx6Canvas6renderEh+0x150>
 802a5c0:	4620      	mov	r0, r4
 802a5c2:	f7ff ffc5 	bl	802a550 <_ZN8touchgfx6Canvas5closeEv>
 802a5c6:	4607      	mov	r7, r0
 802a5c8:	2800      	cmp	r0, #0
 802a5ca:	d043      	beq.n	802a654 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802a5cc:	6863      	ldr	r3, [r4, #4]
 802a5ce:	4e46      	ldr	r6, [pc, #280]	; (802a6e8 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 802a5d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802a5d2:	6837      	ldr	r7, [r6, #0]
 802a5d4:	6803      	ldr	r3, [r0, #0]
 802a5d6:	689b      	ldr	r3, [r3, #8]
 802a5d8:	4798      	blx	r3
 802a5da:	4601      	mov	r1, r0
 802a5dc:	4638      	mov	r0, r7
 802a5de:	f7f0 fd4b 	bl	801b078 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802a5e2:	4607      	mov	r7, r0
 802a5e4:	f7d9 feee 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 802a5e8:	6803      	ldr	r3, [r0, #0]
 802a5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a5ec:	4798      	blx	r3
 802a5ee:	4680      	mov	r8, r0
 802a5f0:	f7d9 fee8 	bl	80043c4 <_ZN8touchgfx3HAL3lcdEv>
 802a5f4:	6803      	ldr	r3, [r0, #0]
 802a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a5f8:	4798      	blx	r3
 802a5fa:	280b      	cmp	r0, #11
 802a5fc:	d857      	bhi.n	802a6ae <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802a5fe:	e8df f000 	tbb	[pc, r0]
 802a602:	584d      	.short	0x584d
 802a604:	2d560668 	.word	0x2d560668
 802a608:	6161613d 	.word	0x6161613d
 802a60c:	6161      	.short	0x6161
 802a60e:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802a612:	2208      	movs	r2, #8
 802a614:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a618:	fb91 f2f2 	sdiv	r2, r1, r2
 802a61c:	fb08 2303 	mla	r3, r8, r3, r2
 802a620:	441f      	add	r7, r3
 802a622:	424b      	negs	r3, r1
 802a624:	f001 0107 	and.w	r1, r1, #7
 802a628:	f003 0307 	and.w	r3, r3, #7
 802a62c:	bf58      	it	pl
 802a62e:	4259      	negpl	r1, r3
 802a630:	b2c9      	uxtb	r1, r1
 802a632:	6860      	ldr	r0, [r4, #4]
 802a634:	b2ed      	uxtb	r5, r5
 802a636:	fa0f f388 	sxth.w	r3, r8
 802a63a:	463a      	mov	r2, r7
 802a63c:	e9cd 1500 	strd	r1, r5, [sp]
 802a640:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802a642:	f104 0020 	add.w	r0, r4, #32
 802a646:	f7ff fe1d 	bl	802a284 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802a64a:	4607      	mov	r7, r0
 802a64c:	6830      	ldr	r0, [r6, #0]
 802a64e:	6803      	ldr	r3, [r0, #0]
 802a650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a652:	4798      	blx	r3
 802a654:	4638      	mov	r0, r7
 802a656:	b002      	add	sp, #8
 802a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a65c:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802a660:	2204      	movs	r2, #4
 802a662:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a666:	fb91 f2f2 	sdiv	r2, r1, r2
 802a66a:	fb08 2303 	mla	r3, r8, r3, r2
 802a66e:	441f      	add	r7, r3
 802a670:	424b      	negs	r3, r1
 802a672:	f001 0103 	and.w	r1, r1, #3
 802a676:	f003 0303 	and.w	r3, r3, #3
 802a67a:	e7d7      	b.n	802a62c <_ZN8touchgfx6Canvas6renderEh+0x98>
 802a67c:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802a680:	2202      	movs	r2, #2
 802a682:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a686:	2900      	cmp	r1, #0
 802a688:	fb91 f2f2 	sdiv	r2, r1, r2
 802a68c:	f001 0101 	and.w	r1, r1, #1
 802a690:	fb08 2303 	mla	r3, r8, r3, r2
 802a694:	bfb8      	it	lt
 802a696:	4249      	neglt	r1, r1
 802a698:	441f      	add	r7, r3
 802a69a:	e7c9      	b.n	802a630 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 802a69c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a6a0:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802a6a4:	fb08 f303 	mul.w	r3, r8, r3
 802a6a8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802a6ac:	441f      	add	r7, r3
 802a6ae:	2100      	movs	r1, #0
 802a6b0:	e7bf      	b.n	802a632 <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802a6b2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a6b6:	2103      	movs	r1, #3
 802a6b8:	fb08 f203 	mul.w	r2, r8, r3
 802a6bc:	8b23      	ldrh	r3, [r4, #24]
 802a6be:	fb13 2301 	smlabb	r3, r3, r1, r2
 802a6c2:	e7f3      	b.n	802a6ac <_ZN8touchgfx6Canvas6renderEh+0x118>
 802a6c4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a6c8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802a6cc:	fb08 2303 	mla	r3, r8, r3, r2
 802a6d0:	e7ec      	b.n	802a6ac <_ZN8touchgfx6Canvas6renderEh+0x118>
 802a6d2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a6d6:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802a6da:	fb08 f303 	mul.w	r3, r8, r3
 802a6de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802a6e2:	e7e3      	b.n	802a6ac <_ZN8touchgfx6Canvas6renderEh+0x118>
 802a6e4:	2701      	movs	r7, #1
 802a6e6:	e7b5      	b.n	802a654 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802a6e8:	24027f6c 	.word	0x24027f6c

0802a6ec <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802a6ec:	4b07      	ldr	r3, [pc, #28]	; (802a70c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802a6ee:	b510      	push	{r4, lr}
 802a6f0:	781b      	ldrb	r3, [r3, #0]
 802a6f2:	2b01      	cmp	r3, #1
 802a6f4:	d108      	bne.n	802a708 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802a6f6:	6843      	ldr	r3, [r0, #4]
 802a6f8:	6814      	ldr	r4, [r2, #0]
 802a6fa:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802a6fe:	680b      	ldr	r3, [r1, #0]
 802a700:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802a704:	6013      	str	r3, [r2, #0]
 802a706:	600c      	str	r4, [r1, #0]
 802a708:	bd10      	pop	{r4, pc}
 802a70a:	bf00      	nop
 802a70c:	24027f64 	.word	0x24027f64

0802a710 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802a710:	b513      	push	{r0, r1, r4, lr}
 802a712:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802a716:	4604      	mov	r4, r0
 802a718:	e9cd 2100 	strd	r2, r1, [sp]
 802a71c:	b9a3      	cbnz	r3, 802a748 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802a71e:	466a      	mov	r2, sp
 802a720:	a901      	add	r1, sp, #4
 802a722:	4620      	mov	r0, r4
 802a724:	f7ff ffe2 	bl	802a6ec <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a728:	68a3      	ldr	r3, [r4, #8]
 802a72a:	9901      	ldr	r1, [sp, #4]
 802a72c:	9a00      	ldr	r2, [sp, #0]
 802a72e:	1ac9      	subs	r1, r1, r3
 802a730:	68e3      	ldr	r3, [r4, #12]
 802a732:	1ad2      	subs	r2, r2, r3
 802a734:	9101      	str	r1, [sp, #4]
 802a736:	2a00      	cmp	r2, #0
 802a738:	9200      	str	r2, [sp, #0]
 802a73a:	da0b      	bge.n	802a754 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802a73c:	2301      	movs	r3, #1
 802a73e:	2900      	cmp	r1, #0
 802a740:	da0e      	bge.n	802a760 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802a742:	f043 0304 	orr.w	r3, r3, #4
 802a746:	e013      	b.n	802a770 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802a748:	f7ff ff02 	bl	802a550 <_ZN8touchgfx6Canvas5closeEv>
 802a74c:	2800      	cmp	r0, #0
 802a74e:	d1e6      	bne.n	802a71e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802a750:	b002      	add	sp, #8
 802a752:	bd10      	pop	{r4, pc}
 802a754:	6963      	ldr	r3, [r4, #20]
 802a756:	429a      	cmp	r2, r3
 802a758:	bfac      	ite	ge
 802a75a:	2302      	movge	r3, #2
 802a75c:	2300      	movlt	r3, #0
 802a75e:	e7ee      	b.n	802a73e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802a760:	6920      	ldr	r0, [r4, #16]
 802a762:	4281      	cmp	r1, r0
 802a764:	bfac      	ite	ge
 802a766:	2008      	movge	r0, #8
 802a768:	2000      	movlt	r0, #0
 802a76a:	4318      	orrs	r0, r3
 802a76c:	b2c3      	uxtb	r3, r0
 802a76e:	b158      	cbz	r0, 802a788 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802a770:	2200      	movs	r2, #0
 802a772:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 802a776:	9901      	ldr	r1, [sp, #4]
 802a778:	9a00      	ldr	r2, [sp, #0]
 802a77a:	66a1      	str	r1, [r4, #104]	; 0x68
 802a77c:	66e2      	str	r2, [r4, #108]	; 0x6c
 802a77e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802a782:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 802a786:	e7e3      	b.n	802a750 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802a788:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802a78c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802a790:	4298      	cmp	r0, r3
 802a792:	d803      	bhi.n	802a79c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802a794:	f104 0020 	add.w	r0, r4, #32
 802a798:	f7f3 fb14 	bl	801ddc4 <_ZN8touchgfx7Outline6moveToEii>
 802a79c:	2301      	movs	r3, #1
 802a79e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802a7a2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802a7a6:	2300      	movs	r3, #0
 802a7a8:	e7e5      	b.n	802a776 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802a7aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802a7aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a7ac:	ab02      	add	r3, sp, #8
 802a7ae:	4604      	mov	r4, r0
 802a7b0:	9101      	str	r1, [sp, #4]
 802a7b2:	a901      	add	r1, sp, #4
 802a7b4:	f843 2d08 	str.w	r2, [r3, #-8]!
 802a7b8:	461a      	mov	r2, r3
 802a7ba:	f7ff ff97 	bl	802a6ec <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a7be:	68a3      	ldr	r3, [r4, #8]
 802a7c0:	9901      	ldr	r1, [sp, #4]
 802a7c2:	9a00      	ldr	r2, [sp, #0]
 802a7c4:	1ac9      	subs	r1, r1, r3
 802a7c6:	68e3      	ldr	r3, [r4, #12]
 802a7c8:	1ad2      	subs	r2, r2, r3
 802a7ca:	9101      	str	r1, [sp, #4]
 802a7cc:	2a00      	cmp	r2, #0
 802a7ce:	9200      	str	r2, [sp, #0]
 802a7d0:	db1c      	blt.n	802a80c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802a7d2:	6963      	ldr	r3, [r4, #20]
 802a7d4:	429a      	cmp	r2, r3
 802a7d6:	bfac      	ite	ge
 802a7d8:	2002      	movge	r0, #2
 802a7da:	2000      	movlt	r0, #0
 802a7dc:	2900      	cmp	r1, #0
 802a7de:	db17      	blt.n	802a810 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802a7e0:	6923      	ldr	r3, [r4, #16]
 802a7e2:	4299      	cmp	r1, r3
 802a7e4:	bfac      	ite	ge
 802a7e6:	2308      	movge	r3, #8
 802a7e8:	2300      	movlt	r3, #0
 802a7ea:	4303      	orrs	r3, r0
 802a7ec:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 802a7f0:	b2dd      	uxtb	r5, r3
 802a7f2:	b978      	cbnz	r0, 802a814 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802a7f4:	f104 0020 	add.w	r0, r4, #32
 802a7f8:	f7ff fd38 	bl	802a26c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a7fc:	9b01      	ldr	r3, [sp, #4]
 802a7fe:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 802a802:	65e3      	str	r3, [r4, #92]	; 0x5c
 802a804:	9b00      	ldr	r3, [sp, #0]
 802a806:	6623      	str	r3, [r4, #96]	; 0x60
 802a808:	b002      	add	sp, #8
 802a80a:	bd70      	pop	{r4, r5, r6, pc}
 802a80c:	2001      	movs	r0, #1
 802a80e:	e7e5      	b.n	802a7dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802a810:	2304      	movs	r3, #4
 802a812:	e7ea      	b.n	802a7ea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802a814:	b113      	cbz	r3, 802a81c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802a816:	ea10 0305 	ands.w	r3, r0, r5
 802a81a:	d11c      	bne.n	802a856 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802a81c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802a820:	f104 0620 	add.w	r6, r4, #32
 802a824:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 802a828:	b98b      	cbnz	r3, 802a84e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802a82a:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802a82e:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802a832:	4298      	cmp	r0, r3
 802a834:	d802      	bhi.n	802a83c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802a836:	4630      	mov	r0, r6
 802a838:	f7f3 fac4 	bl	801ddc4 <_ZN8touchgfx7Outline6moveToEii>
 802a83c:	2301      	movs	r3, #1
 802a83e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802a842:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802a846:	4630      	mov	r0, r6
 802a848:	e9dd 2100 	ldrd	r2, r1, [sp]
 802a84c:	e7d4      	b.n	802a7f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802a84e:	4630      	mov	r0, r6
 802a850:	f7ff fd0c 	bl	802a26c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a854:	e7f7      	b.n	802a846 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802a856:	461d      	mov	r5, r3
 802a858:	e7d0      	b.n	802a7fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802a85c <_ZN8touchgfx6CanvasD1Ev>:
 802a85c:	4b04      	ldr	r3, [pc, #16]	; (802a870 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802a85e:	b510      	push	{r4, lr}
 802a860:	4604      	mov	r4, r0
 802a862:	f840 3b20 	str.w	r3, [r0], #32
 802a866:	f7f2 fdb5 	bl	801d3d4 <_ZN8touchgfx7OutlineD1Ev>
 802a86a:	4620      	mov	r0, r4
 802a86c:	bd10      	pop	{r4, pc}
 802a86e:	bf00      	nop
 802a870:	08030058 	.word	0x08030058

0802a874 <_ZN8touchgfx6CanvasD0Ev>:
 802a874:	b510      	push	{r4, lr}
 802a876:	4604      	mov	r4, r0
 802a878:	f7ff fff0 	bl	802a85c <_ZN8touchgfx6CanvasD1Ev>
 802a87c:	2170      	movs	r1, #112	; 0x70
 802a87e:	4620      	mov	r0, r4
 802a880:	f000 f807 	bl	802a892 <_ZdlPvj>
 802a884:	4620      	mov	r0, r4
 802a886:	bd10      	pop	{r4, pc}

0802a888 <__aeabi_atexit>:
 802a888:	460b      	mov	r3, r1
 802a88a:	4601      	mov	r1, r0
 802a88c:	4618      	mov	r0, r3
 802a88e:	f000 b9ff 	b.w	802ac90 <__cxa_atexit>

0802a892 <_ZdlPvj>:
 802a892:	f000 b812 	b.w	802a8ba <_ZdlPv>

0802a896 <__cxa_guard_acquire>:
 802a896:	6803      	ldr	r3, [r0, #0]
 802a898:	07db      	lsls	r3, r3, #31
 802a89a:	d406      	bmi.n	802a8aa <__cxa_guard_acquire+0x14>
 802a89c:	7843      	ldrb	r3, [r0, #1]
 802a89e:	b103      	cbz	r3, 802a8a2 <__cxa_guard_acquire+0xc>
 802a8a0:	deff      	udf	#255	; 0xff
 802a8a2:	2301      	movs	r3, #1
 802a8a4:	7043      	strb	r3, [r0, #1]
 802a8a6:	4618      	mov	r0, r3
 802a8a8:	4770      	bx	lr
 802a8aa:	2000      	movs	r0, #0
 802a8ac:	4770      	bx	lr

0802a8ae <__cxa_guard_release>:
 802a8ae:	2301      	movs	r3, #1
 802a8b0:	6003      	str	r3, [r0, #0]
 802a8b2:	4770      	bx	lr

0802a8b4 <__cxa_pure_virtual>:
 802a8b4:	b508      	push	{r3, lr}
 802a8b6:	f000 f80f 	bl	802a8d8 <_ZSt9terminatev>

0802a8ba <_ZdlPv>:
 802a8ba:	f000 ba3f 	b.w	802ad3c <free>

0802a8be <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a8be:	b508      	push	{r3, lr}
 802a8c0:	4780      	blx	r0
 802a8c2:	f000 f9b9 	bl	802ac38 <abort>
	...

0802a8c8 <_ZSt13get_terminatev>:
 802a8c8:	4b02      	ldr	r3, [pc, #8]	; (802a8d4 <_ZSt13get_terminatev+0xc>)
 802a8ca:	6818      	ldr	r0, [r3, #0]
 802a8cc:	f3bf 8f5b 	dmb	ish
 802a8d0:	4770      	bx	lr
 802a8d2:	bf00      	nop
 802a8d4:	240000bc 	.word	0x240000bc

0802a8d8 <_ZSt9terminatev>:
 802a8d8:	b508      	push	{r3, lr}
 802a8da:	f7ff fff5 	bl	802a8c8 <_ZSt13get_terminatev>
 802a8de:	f7ff ffee 	bl	802a8be <_ZN10__cxxabiv111__terminateEPFvvE>

0802a8e2 <sinf_poly>:
 802a8e2:	07cb      	lsls	r3, r1, #31
 802a8e4:	d412      	bmi.n	802a90c <sinf_poly+0x2a>
 802a8e6:	ee21 5b00 	vmul.f64	d5, d1, d0
 802a8ea:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 802a8ee:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 802a8f2:	eea6 7b01 	vfma.f64	d7, d6, d1
 802a8f6:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 802a8fa:	ee21 1b05 	vmul.f64	d1, d1, d5
 802a8fe:	eea6 0b05 	vfma.f64	d0, d6, d5
 802a902:	eea7 0b01 	vfma.f64	d0, d7, d1
 802a906:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802a90a:	4770      	bx	lr
 802a90c:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 802a910:	ee21 5b01 	vmul.f64	d5, d1, d1
 802a914:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802a918:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802a91c:	eea1 7b06 	vfma.f64	d7, d1, d6
 802a920:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 802a924:	eea1 0b06 	vfma.f64	d0, d1, d6
 802a928:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 802a92c:	ee21 1b05 	vmul.f64	d1, d1, d5
 802a930:	eea5 0b06 	vfma.f64	d0, d5, d6
 802a934:	e7e5      	b.n	802a902 <sinf_poly+0x20>
	...

0802a938 <cosf>:
 802a938:	b538      	push	{r3, r4, r5, lr}
 802a93a:	ee10 4a10 	vmov	r4, s0
 802a93e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802a942:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 802a946:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802a94a:	d21f      	bcs.n	802a98c <cosf+0x54>
 802a94c:	ee27 0b07 	vmul.f64	d0, d7, d7
 802a950:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802a954:	f0c0 8088 	bcc.w	802aa68 <cosf+0x130>
 802a958:	ee20 4b00 	vmul.f64	d4, d0, d0
 802a95c:	4b46      	ldr	r3, [pc, #280]	; (802aa78 <cosf+0x140>)
 802a95e:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 802a962:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 802a966:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 802a96a:	eea0 6b05 	vfma.f64	d6, d0, d5
 802a96e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 802a972:	eea0 7b05 	vfma.f64	d7, d0, d5
 802a976:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 802a97a:	ee20 0b04 	vmul.f64	d0, d0, d4
 802a97e:	eea4 7b05 	vfma.f64	d7, d4, d5
 802a982:	eea6 7b00 	vfma.f64	d7, d6, d0
 802a986:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 802a98a:	bd38      	pop	{r3, r4, r5, pc}
 802a98c:	f240 422e 	movw	r2, #1070	; 0x42e
 802a990:	4293      	cmp	r3, r2
 802a992:	d82b      	bhi.n	802a9ec <cosf+0xb4>
 802a994:	4b38      	ldr	r3, [pc, #224]	; (802aa78 <cosf+0x140>)
 802a996:	ed93 6b08 	vldr	d6, [r3, #32]
 802a99a:	ee27 6b06 	vmul.f64	d6, d7, d6
 802a99e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 802a9a2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802a9a6:	ee16 1a90 	vmov	r1, s13
 802a9aa:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 802a9ae:	1609      	asrs	r1, r1, #24
 802a9b0:	ee06 1a90 	vmov	s13, r1
 802a9b4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802a9b8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 802a9bc:	f001 0203 	and.w	r2, r1, #3
 802a9c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802a9c4:	eea5 7b46 	vfms.f64	d7, d5, d6
 802a9c8:	eeb0 0b47 	vmov.f64	d0, d7
 802a9cc:	ed92 7b00 	vldr	d7, [r2]
 802a9d0:	ee20 1b00 	vmul.f64	d1, d0, d0
 802a9d4:	f011 0f02 	tst.w	r1, #2
 802a9d8:	bf08      	it	eq
 802a9da:	4618      	moveq	r0, r3
 802a9dc:	f081 0101 	eor.w	r1, r1, #1
 802a9e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a9e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 802a9e8:	f7ff bf7b 	b.w	802a8e2 <sinf_poly>
 802a9ec:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802a9f0:	d236      	bcs.n	802aa60 <cosf+0x128>
 802a9f2:	4a22      	ldr	r2, [pc, #136]	; (802aa7c <cosf+0x144>)
 802a9f4:	f3c4 6183 	ubfx	r1, r4, #26, #4
 802a9f8:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 802a9fc:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802aa00:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 802aa04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802aa08:	4083      	lsls	r3, r0
 802aa0a:	6a28      	ldr	r0, [r5, #32]
 802aa0c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802aa10:	fba3 1000 	umull	r1, r0, r3, r0
 802aa14:	6929      	ldr	r1, [r5, #16]
 802aa16:	435a      	muls	r2, r3
 802aa18:	fbe3 0201 	umlal	r0, r2, r3, r1
 802aa1c:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 802aa20:	0f8d      	lsrs	r5, r1, #30
 802aa22:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 802aa26:	1a51      	subs	r1, r2, r1
 802aa28:	f7d5 fe40 	bl	80006ac <__aeabi_l2d>
 802aa2c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802aa30:	4b11      	ldr	r3, [pc, #68]	; (802aa78 <cosf+0x140>)
 802aa32:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 802aa70 <cosf+0x138>
 802aa36:	ec41 0b16 	vmov	d6, r0, r1
 802aa3a:	f004 0203 	and.w	r2, r4, #3
 802aa3e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802aa42:	f014 0f02 	tst.w	r4, #2
 802aa46:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802aa4a:	ee26 7b07 	vmul.f64	d7, d6, d7
 802aa4e:	ed92 0b00 	vldr	d0, [r2]
 802aa52:	ee27 1b07 	vmul.f64	d1, d7, d7
 802aa56:	f085 0101 	eor.w	r1, r5, #1
 802aa5a:	bf08      	it	eq
 802aa5c:	4618      	moveq	r0, r3
 802aa5e:	e7bf      	b.n	802a9e0 <cosf+0xa8>
 802aa60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802aa64:	f000 b817 	b.w	802aa96 <__math_invalidf>
 802aa68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802aa6c:	e78d      	b.n	802a98a <cosf+0x52>
 802aa6e:	bf00      	nop
 802aa70:	54442d18 	.word	0x54442d18
 802aa74:	3c1921fb 	.word	0x3c1921fb
 802aa78:	080300c8 	.word	0x080300c8
 802aa7c:	08030064 	.word	0x08030064

0802aa80 <with_errnof>:
 802aa80:	b513      	push	{r0, r1, r4, lr}
 802aa82:	4604      	mov	r4, r0
 802aa84:	ed8d 0a01 	vstr	s0, [sp, #4]
 802aa88:	f000 f910 	bl	802acac <__errno>
 802aa8c:	ed9d 0a01 	vldr	s0, [sp, #4]
 802aa90:	6004      	str	r4, [r0, #0]
 802aa92:	b002      	add	sp, #8
 802aa94:	bd10      	pop	{r4, pc}

0802aa96 <__math_invalidf>:
 802aa96:	eef0 7a40 	vmov.f32	s15, s0
 802aa9a:	ee30 7a40 	vsub.f32	s14, s0, s0
 802aa9e:	eef4 7a67 	vcmp.f32	s15, s15
 802aaa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aaa6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 802aaaa:	d602      	bvs.n	802aab2 <__math_invalidf+0x1c>
 802aaac:	2021      	movs	r0, #33	; 0x21
 802aaae:	f7ff bfe7 	b.w	802aa80 <with_errnof>
 802aab2:	4770      	bx	lr

0802aab4 <sinf_poly>:
 802aab4:	07cb      	lsls	r3, r1, #31
 802aab6:	d412      	bmi.n	802aade <sinf_poly+0x2a>
 802aab8:	ee21 5b00 	vmul.f64	d5, d1, d0
 802aabc:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 802aac0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 802aac4:	eea6 7b01 	vfma.f64	d7, d6, d1
 802aac8:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 802aacc:	ee21 1b05 	vmul.f64	d1, d1, d5
 802aad0:	eea6 0b05 	vfma.f64	d0, d6, d5
 802aad4:	eea7 0b01 	vfma.f64	d0, d7, d1
 802aad8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802aadc:	4770      	bx	lr
 802aade:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 802aae2:	ee21 5b01 	vmul.f64	d5, d1, d1
 802aae6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802aaea:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802aaee:	eea1 7b06 	vfma.f64	d7, d1, d6
 802aaf2:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 802aaf6:	eea1 0b06 	vfma.f64	d0, d1, d6
 802aafa:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 802aafe:	ee21 1b05 	vmul.f64	d1, d1, d5
 802ab02:	eea5 0b06 	vfma.f64	d0, d5, d6
 802ab06:	e7e5      	b.n	802aad4 <sinf_poly+0x20>

0802ab08 <sinf>:
 802ab08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ab0a:	ee10 4a10 	vmov	r4, s0
 802ab0e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802ab12:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 802ab16:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802ab1a:	eef0 7a40 	vmov.f32	s15, s0
 802ab1e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802ab22:	d218      	bcs.n	802ab56 <sinf+0x4e>
 802ab24:	ee26 1b06 	vmul.f64	d1, d6, d6
 802ab28:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802ab2c:	d20a      	bcs.n	802ab44 <sinf+0x3c>
 802ab2e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 802ab32:	d103      	bne.n	802ab3c <sinf+0x34>
 802ab34:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 802ab38:	ed8d 1a01 	vstr	s2, [sp, #4]
 802ab3c:	eeb0 0a67 	vmov.f32	s0, s15
 802ab40:	b003      	add	sp, #12
 802ab42:	bd30      	pop	{r4, r5, pc}
 802ab44:	483a      	ldr	r0, [pc, #232]	; (802ac30 <sinf+0x128>)
 802ab46:	eeb0 0b46 	vmov.f64	d0, d6
 802ab4a:	2100      	movs	r1, #0
 802ab4c:	b003      	add	sp, #12
 802ab4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ab52:	f7ff bfaf 	b.w	802aab4 <sinf_poly>
 802ab56:	f240 422e 	movw	r2, #1070	; 0x42e
 802ab5a:	4293      	cmp	r3, r2
 802ab5c:	d824      	bhi.n	802aba8 <sinf+0xa0>
 802ab5e:	4b34      	ldr	r3, [pc, #208]	; (802ac30 <sinf+0x128>)
 802ab60:	ed93 7b08 	vldr	d7, [r3, #32]
 802ab64:	ee26 7b07 	vmul.f64	d7, d6, d7
 802ab68:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802ab6c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802ab70:	ee17 1a90 	vmov	r1, s15
 802ab74:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 802ab78:	1609      	asrs	r1, r1, #24
 802ab7a:	ee07 1a90 	vmov	s15, r1
 802ab7e:	f001 0203 	and.w	r2, r1, #3
 802ab82:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802ab86:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802ab8a:	ed92 0b00 	vldr	d0, [r2]
 802ab8e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 802ab92:	f011 0f02 	tst.w	r1, #2
 802ab96:	eea5 6b47 	vfms.f64	d6, d5, d7
 802ab9a:	bf08      	it	eq
 802ab9c:	4618      	moveq	r0, r3
 802ab9e:	ee26 1b06 	vmul.f64	d1, d6, d6
 802aba2:	ee20 0b06 	vmul.f64	d0, d0, d6
 802aba6:	e7d1      	b.n	802ab4c <sinf+0x44>
 802aba8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802abac:	d237      	bcs.n	802ac1e <sinf+0x116>
 802abae:	4a21      	ldr	r2, [pc, #132]	; (802ac34 <sinf+0x12c>)
 802abb0:	f3c4 6183 	ubfx	r1, r4, #26, #4
 802abb4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 802abb8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802abbc:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 802abc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802abc4:	4083      	lsls	r3, r0
 802abc6:	6a28      	ldr	r0, [r5, #32]
 802abc8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802abcc:	fba3 1000 	umull	r1, r0, r3, r0
 802abd0:	6929      	ldr	r1, [r5, #16]
 802abd2:	435a      	muls	r2, r3
 802abd4:	fbe3 0201 	umlal	r0, r2, r3, r1
 802abd8:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 802abdc:	0f8d      	lsrs	r5, r1, #30
 802abde:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 802abe2:	1a51      	subs	r1, r2, r1
 802abe4:	f7d5 fd62 	bl	80006ac <__aeabi_l2d>
 802abe8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802abec:	4b10      	ldr	r3, [pc, #64]	; (802ac30 <sinf+0x128>)
 802abee:	f004 0203 	and.w	r2, r4, #3
 802abf2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802abf6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 802ac28 <sinf+0x120>
 802abfa:	ed92 0b00 	vldr	d0, [r2]
 802abfe:	ec41 0b16 	vmov	d6, r0, r1
 802ac02:	f014 0f02 	tst.w	r4, #2
 802ac06:	ee26 7b07 	vmul.f64	d7, d6, d7
 802ac0a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802ac0e:	4629      	mov	r1, r5
 802ac10:	bf08      	it	eq
 802ac12:	4618      	moveq	r0, r3
 802ac14:	ee27 1b07 	vmul.f64	d1, d7, d7
 802ac18:	ee20 0b07 	vmul.f64	d0, d0, d7
 802ac1c:	e796      	b.n	802ab4c <sinf+0x44>
 802ac1e:	b003      	add	sp, #12
 802ac20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ac24:	f7ff bf37 	b.w	802aa96 <__math_invalidf>
 802ac28:	54442d18 	.word	0x54442d18
 802ac2c:	3c1921fb 	.word	0x3c1921fb
 802ac30:	080300c8 	.word	0x080300c8
 802ac34:	08030064 	.word	0x08030064

0802ac38 <abort>:
 802ac38:	b508      	push	{r3, lr}
 802ac3a:	2006      	movs	r0, #6
 802ac3c:	f000 fca2 	bl	802b584 <raise>
 802ac40:	2001      	movs	r0, #1
 802ac42:	f7dc ff2b 	bl	8007a9c <_exit>
	...

0802ac48 <__assert_func>:
 802ac48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802ac4a:	4614      	mov	r4, r2
 802ac4c:	461a      	mov	r2, r3
 802ac4e:	4b09      	ldr	r3, [pc, #36]	; (802ac74 <__assert_func+0x2c>)
 802ac50:	681b      	ldr	r3, [r3, #0]
 802ac52:	4605      	mov	r5, r0
 802ac54:	68d8      	ldr	r0, [r3, #12]
 802ac56:	b14c      	cbz	r4, 802ac6c <__assert_func+0x24>
 802ac58:	4b07      	ldr	r3, [pc, #28]	; (802ac78 <__assert_func+0x30>)
 802ac5a:	9100      	str	r1, [sp, #0]
 802ac5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802ac60:	4906      	ldr	r1, [pc, #24]	; (802ac7c <__assert_func+0x34>)
 802ac62:	462b      	mov	r3, r5
 802ac64:	f000 f828 	bl	802acb8 <fiprintf>
 802ac68:	f7ff ffe6 	bl	802ac38 <abort>
 802ac6c:	4b04      	ldr	r3, [pc, #16]	; (802ac80 <__assert_func+0x38>)
 802ac6e:	461c      	mov	r4, r3
 802ac70:	e7f3      	b.n	802ac5a <__assert_func+0x12>
 802ac72:	bf00      	nop
 802ac74:	240000c0 	.word	0x240000c0
 802ac78:	080301a8 	.word	0x080301a8
 802ac7c:	080301b5 	.word	0x080301b5
 802ac80:	080301e3 	.word	0x080301e3

0802ac84 <atexit>:
 802ac84:	2300      	movs	r3, #0
 802ac86:	4601      	mov	r1, r0
 802ac88:	461a      	mov	r2, r3
 802ac8a:	4618      	mov	r0, r3
 802ac8c:	f000 bd6a 	b.w	802b764 <__register_exitproc>

0802ac90 <__cxa_atexit>:
 802ac90:	b510      	push	{r4, lr}
 802ac92:	4c05      	ldr	r4, [pc, #20]	; (802aca8 <__cxa_atexit+0x18>)
 802ac94:	4613      	mov	r3, r2
 802ac96:	b12c      	cbz	r4, 802aca4 <__cxa_atexit+0x14>
 802ac98:	460a      	mov	r2, r1
 802ac9a:	4601      	mov	r1, r0
 802ac9c:	2002      	movs	r0, #2
 802ac9e:	f000 fd61 	bl	802b764 <__register_exitproc>
 802aca2:	bd10      	pop	{r4, pc}
 802aca4:	4620      	mov	r0, r4
 802aca6:	e7fc      	b.n	802aca2 <__cxa_atexit+0x12>
 802aca8:	0802b765 	.word	0x0802b765

0802acac <__errno>:
 802acac:	4b01      	ldr	r3, [pc, #4]	; (802acb4 <__errno+0x8>)
 802acae:	6818      	ldr	r0, [r3, #0]
 802acb0:	4770      	bx	lr
 802acb2:	bf00      	nop
 802acb4:	240000c0 	.word	0x240000c0

0802acb8 <fiprintf>:
 802acb8:	b40e      	push	{r1, r2, r3}
 802acba:	b503      	push	{r0, r1, lr}
 802acbc:	4601      	mov	r1, r0
 802acbe:	ab03      	add	r3, sp, #12
 802acc0:	4805      	ldr	r0, [pc, #20]	; (802acd8 <fiprintf+0x20>)
 802acc2:	f853 2b04 	ldr.w	r2, [r3], #4
 802acc6:	6800      	ldr	r0, [r0, #0]
 802acc8:	9301      	str	r3, [sp, #4]
 802acca:	f000 f95f 	bl	802af8c <_vfiprintf_r>
 802acce:	b002      	add	sp, #8
 802acd0:	f85d eb04 	ldr.w	lr, [sp], #4
 802acd4:	b003      	add	sp, #12
 802acd6:	4770      	bx	lr
 802acd8:	240000c0 	.word	0x240000c0

0802acdc <__libc_init_array>:
 802acdc:	b570      	push	{r4, r5, r6, lr}
 802acde:	4d0d      	ldr	r5, [pc, #52]	; (802ad14 <__libc_init_array+0x38>)
 802ace0:	4c0d      	ldr	r4, [pc, #52]	; (802ad18 <__libc_init_array+0x3c>)
 802ace2:	1b64      	subs	r4, r4, r5
 802ace4:	10a4      	asrs	r4, r4, #2
 802ace6:	2600      	movs	r6, #0
 802ace8:	42a6      	cmp	r6, r4
 802acea:	d109      	bne.n	802ad00 <__libc_init_array+0x24>
 802acec:	4d0b      	ldr	r5, [pc, #44]	; (802ad1c <__libc_init_array+0x40>)
 802acee:	4c0c      	ldr	r4, [pc, #48]	; (802ad20 <__libc_init_array+0x44>)
 802acf0:	f001 f86e 	bl	802bdd0 <_init>
 802acf4:	1b64      	subs	r4, r4, r5
 802acf6:	10a4      	asrs	r4, r4, #2
 802acf8:	2600      	movs	r6, #0
 802acfa:	42a6      	cmp	r6, r4
 802acfc:	d105      	bne.n	802ad0a <__libc_init_array+0x2e>
 802acfe:	bd70      	pop	{r4, r5, r6, pc}
 802ad00:	f855 3b04 	ldr.w	r3, [r5], #4
 802ad04:	4798      	blx	r3
 802ad06:	3601      	adds	r6, #1
 802ad08:	e7ee      	b.n	802ace8 <__libc_init_array+0xc>
 802ad0a:	f855 3b04 	ldr.w	r3, [r5], #4
 802ad0e:	4798      	blx	r3
 802ad10:	3601      	adds	r6, #1
 802ad12:	e7f2      	b.n	802acfa <__libc_init_array+0x1e>
 802ad14:	08030298 	.word	0x08030298
 802ad18:	08030298 	.word	0x08030298
 802ad1c:	08030298 	.word	0x08030298
 802ad20:	080302b4 	.word	0x080302b4

0802ad24 <__retarget_lock_init_recursive>:
 802ad24:	4770      	bx	lr

0802ad26 <__retarget_lock_acquire_recursive>:
 802ad26:	4770      	bx	lr

0802ad28 <__retarget_lock_release>:
 802ad28:	4770      	bx	lr

0802ad2a <__retarget_lock_release_recursive>:
 802ad2a:	4770      	bx	lr

0802ad2c <malloc>:
 802ad2c:	4b02      	ldr	r3, [pc, #8]	; (802ad38 <malloc+0xc>)
 802ad2e:	4601      	mov	r1, r0
 802ad30:	6818      	ldr	r0, [r3, #0]
 802ad32:	f000 b88d 	b.w	802ae50 <_malloc_r>
 802ad36:	bf00      	nop
 802ad38:	240000c0 	.word	0x240000c0

0802ad3c <free>:
 802ad3c:	4b02      	ldr	r3, [pc, #8]	; (802ad48 <free+0xc>)
 802ad3e:	4601      	mov	r1, r0
 802ad40:	6818      	ldr	r0, [r3, #0]
 802ad42:	f000 b819 	b.w	802ad78 <_free_r>
 802ad46:	bf00      	nop
 802ad48:	240000c0 	.word	0x240000c0

0802ad4c <memcpy>:
 802ad4c:	440a      	add	r2, r1
 802ad4e:	4291      	cmp	r1, r2
 802ad50:	f100 33ff 	add.w	r3, r0, #4294967295
 802ad54:	d100      	bne.n	802ad58 <memcpy+0xc>
 802ad56:	4770      	bx	lr
 802ad58:	b510      	push	{r4, lr}
 802ad5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ad5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 802ad62:	4291      	cmp	r1, r2
 802ad64:	d1f9      	bne.n	802ad5a <memcpy+0xe>
 802ad66:	bd10      	pop	{r4, pc}

0802ad68 <memset>:
 802ad68:	4402      	add	r2, r0
 802ad6a:	4603      	mov	r3, r0
 802ad6c:	4293      	cmp	r3, r2
 802ad6e:	d100      	bne.n	802ad72 <memset+0xa>
 802ad70:	4770      	bx	lr
 802ad72:	f803 1b01 	strb.w	r1, [r3], #1
 802ad76:	e7f9      	b.n	802ad6c <memset+0x4>

0802ad78 <_free_r>:
 802ad78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ad7a:	2900      	cmp	r1, #0
 802ad7c:	d044      	beq.n	802ae08 <_free_r+0x90>
 802ad7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ad82:	9001      	str	r0, [sp, #4]
 802ad84:	2b00      	cmp	r3, #0
 802ad86:	f1a1 0404 	sub.w	r4, r1, #4
 802ad8a:	bfb8      	it	lt
 802ad8c:	18e4      	addlt	r4, r4, r3
 802ad8e:	f000 ff67 	bl	802bc60 <__malloc_lock>
 802ad92:	4a1e      	ldr	r2, [pc, #120]	; (802ae0c <_free_r+0x94>)
 802ad94:	9801      	ldr	r0, [sp, #4]
 802ad96:	6813      	ldr	r3, [r2, #0]
 802ad98:	b933      	cbnz	r3, 802ada8 <_free_r+0x30>
 802ad9a:	6063      	str	r3, [r4, #4]
 802ad9c:	6014      	str	r4, [r2, #0]
 802ad9e:	b003      	add	sp, #12
 802ada0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ada4:	f000 bf62 	b.w	802bc6c <__malloc_unlock>
 802ada8:	42a3      	cmp	r3, r4
 802adaa:	d908      	bls.n	802adbe <_free_r+0x46>
 802adac:	6825      	ldr	r5, [r4, #0]
 802adae:	1961      	adds	r1, r4, r5
 802adb0:	428b      	cmp	r3, r1
 802adb2:	bf01      	itttt	eq
 802adb4:	6819      	ldreq	r1, [r3, #0]
 802adb6:	685b      	ldreq	r3, [r3, #4]
 802adb8:	1949      	addeq	r1, r1, r5
 802adba:	6021      	streq	r1, [r4, #0]
 802adbc:	e7ed      	b.n	802ad9a <_free_r+0x22>
 802adbe:	461a      	mov	r2, r3
 802adc0:	685b      	ldr	r3, [r3, #4]
 802adc2:	b10b      	cbz	r3, 802adc8 <_free_r+0x50>
 802adc4:	42a3      	cmp	r3, r4
 802adc6:	d9fa      	bls.n	802adbe <_free_r+0x46>
 802adc8:	6811      	ldr	r1, [r2, #0]
 802adca:	1855      	adds	r5, r2, r1
 802adcc:	42a5      	cmp	r5, r4
 802adce:	d10b      	bne.n	802ade8 <_free_r+0x70>
 802add0:	6824      	ldr	r4, [r4, #0]
 802add2:	4421      	add	r1, r4
 802add4:	1854      	adds	r4, r2, r1
 802add6:	42a3      	cmp	r3, r4
 802add8:	6011      	str	r1, [r2, #0]
 802adda:	d1e0      	bne.n	802ad9e <_free_r+0x26>
 802addc:	681c      	ldr	r4, [r3, #0]
 802adde:	685b      	ldr	r3, [r3, #4]
 802ade0:	6053      	str	r3, [r2, #4]
 802ade2:	4421      	add	r1, r4
 802ade4:	6011      	str	r1, [r2, #0]
 802ade6:	e7da      	b.n	802ad9e <_free_r+0x26>
 802ade8:	d902      	bls.n	802adf0 <_free_r+0x78>
 802adea:	230c      	movs	r3, #12
 802adec:	6003      	str	r3, [r0, #0]
 802adee:	e7d6      	b.n	802ad9e <_free_r+0x26>
 802adf0:	6825      	ldr	r5, [r4, #0]
 802adf2:	1961      	adds	r1, r4, r5
 802adf4:	428b      	cmp	r3, r1
 802adf6:	bf04      	itt	eq
 802adf8:	6819      	ldreq	r1, [r3, #0]
 802adfa:	685b      	ldreq	r3, [r3, #4]
 802adfc:	6063      	str	r3, [r4, #4]
 802adfe:	bf04      	itt	eq
 802ae00:	1949      	addeq	r1, r1, r5
 802ae02:	6021      	streq	r1, [r4, #0]
 802ae04:	6054      	str	r4, [r2, #4]
 802ae06:	e7ca      	b.n	802ad9e <_free_r+0x26>
 802ae08:	b003      	add	sp, #12
 802ae0a:	bd30      	pop	{r4, r5, pc}
 802ae0c:	24028054 	.word	0x24028054

0802ae10 <sbrk_aligned>:
 802ae10:	b570      	push	{r4, r5, r6, lr}
 802ae12:	4e0e      	ldr	r6, [pc, #56]	; (802ae4c <sbrk_aligned+0x3c>)
 802ae14:	460c      	mov	r4, r1
 802ae16:	6831      	ldr	r1, [r6, #0]
 802ae18:	4605      	mov	r5, r0
 802ae1a:	b911      	cbnz	r1, 802ae22 <sbrk_aligned+0x12>
 802ae1c:	f000 fb7a 	bl	802b514 <_sbrk_r>
 802ae20:	6030      	str	r0, [r6, #0]
 802ae22:	4621      	mov	r1, r4
 802ae24:	4628      	mov	r0, r5
 802ae26:	f000 fb75 	bl	802b514 <_sbrk_r>
 802ae2a:	1c43      	adds	r3, r0, #1
 802ae2c:	d00a      	beq.n	802ae44 <sbrk_aligned+0x34>
 802ae2e:	1cc4      	adds	r4, r0, #3
 802ae30:	f024 0403 	bic.w	r4, r4, #3
 802ae34:	42a0      	cmp	r0, r4
 802ae36:	d007      	beq.n	802ae48 <sbrk_aligned+0x38>
 802ae38:	1a21      	subs	r1, r4, r0
 802ae3a:	4628      	mov	r0, r5
 802ae3c:	f000 fb6a 	bl	802b514 <_sbrk_r>
 802ae40:	3001      	adds	r0, #1
 802ae42:	d101      	bne.n	802ae48 <sbrk_aligned+0x38>
 802ae44:	f04f 34ff 	mov.w	r4, #4294967295
 802ae48:	4620      	mov	r0, r4
 802ae4a:	bd70      	pop	{r4, r5, r6, pc}
 802ae4c:	24028058 	.word	0x24028058

0802ae50 <_malloc_r>:
 802ae50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ae54:	1ccd      	adds	r5, r1, #3
 802ae56:	f025 0503 	bic.w	r5, r5, #3
 802ae5a:	3508      	adds	r5, #8
 802ae5c:	2d0c      	cmp	r5, #12
 802ae5e:	bf38      	it	cc
 802ae60:	250c      	movcc	r5, #12
 802ae62:	2d00      	cmp	r5, #0
 802ae64:	4607      	mov	r7, r0
 802ae66:	db01      	blt.n	802ae6c <_malloc_r+0x1c>
 802ae68:	42a9      	cmp	r1, r5
 802ae6a:	d905      	bls.n	802ae78 <_malloc_r+0x28>
 802ae6c:	230c      	movs	r3, #12
 802ae6e:	603b      	str	r3, [r7, #0]
 802ae70:	2600      	movs	r6, #0
 802ae72:	4630      	mov	r0, r6
 802ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ae78:	4e2e      	ldr	r6, [pc, #184]	; (802af34 <_malloc_r+0xe4>)
 802ae7a:	f000 fef1 	bl	802bc60 <__malloc_lock>
 802ae7e:	6833      	ldr	r3, [r6, #0]
 802ae80:	461c      	mov	r4, r3
 802ae82:	bb34      	cbnz	r4, 802aed2 <_malloc_r+0x82>
 802ae84:	4629      	mov	r1, r5
 802ae86:	4638      	mov	r0, r7
 802ae88:	f7ff ffc2 	bl	802ae10 <sbrk_aligned>
 802ae8c:	1c43      	adds	r3, r0, #1
 802ae8e:	4604      	mov	r4, r0
 802ae90:	d14d      	bne.n	802af2e <_malloc_r+0xde>
 802ae92:	6834      	ldr	r4, [r6, #0]
 802ae94:	4626      	mov	r6, r4
 802ae96:	2e00      	cmp	r6, #0
 802ae98:	d140      	bne.n	802af1c <_malloc_r+0xcc>
 802ae9a:	6823      	ldr	r3, [r4, #0]
 802ae9c:	4631      	mov	r1, r6
 802ae9e:	4638      	mov	r0, r7
 802aea0:	eb04 0803 	add.w	r8, r4, r3
 802aea4:	f000 fb36 	bl	802b514 <_sbrk_r>
 802aea8:	4580      	cmp	r8, r0
 802aeaa:	d13a      	bne.n	802af22 <_malloc_r+0xd2>
 802aeac:	6821      	ldr	r1, [r4, #0]
 802aeae:	3503      	adds	r5, #3
 802aeb0:	1a6d      	subs	r5, r5, r1
 802aeb2:	f025 0503 	bic.w	r5, r5, #3
 802aeb6:	3508      	adds	r5, #8
 802aeb8:	2d0c      	cmp	r5, #12
 802aeba:	bf38      	it	cc
 802aebc:	250c      	movcc	r5, #12
 802aebe:	4629      	mov	r1, r5
 802aec0:	4638      	mov	r0, r7
 802aec2:	f7ff ffa5 	bl	802ae10 <sbrk_aligned>
 802aec6:	3001      	adds	r0, #1
 802aec8:	d02b      	beq.n	802af22 <_malloc_r+0xd2>
 802aeca:	6823      	ldr	r3, [r4, #0]
 802aecc:	442b      	add	r3, r5
 802aece:	6023      	str	r3, [r4, #0]
 802aed0:	e00e      	b.n	802aef0 <_malloc_r+0xa0>
 802aed2:	6822      	ldr	r2, [r4, #0]
 802aed4:	1b52      	subs	r2, r2, r5
 802aed6:	d41e      	bmi.n	802af16 <_malloc_r+0xc6>
 802aed8:	2a0b      	cmp	r2, #11
 802aeda:	d916      	bls.n	802af0a <_malloc_r+0xba>
 802aedc:	1961      	adds	r1, r4, r5
 802aede:	42a3      	cmp	r3, r4
 802aee0:	6025      	str	r5, [r4, #0]
 802aee2:	bf18      	it	ne
 802aee4:	6059      	strne	r1, [r3, #4]
 802aee6:	6863      	ldr	r3, [r4, #4]
 802aee8:	bf08      	it	eq
 802aeea:	6031      	streq	r1, [r6, #0]
 802aeec:	5162      	str	r2, [r4, r5]
 802aeee:	604b      	str	r3, [r1, #4]
 802aef0:	4638      	mov	r0, r7
 802aef2:	f104 060b 	add.w	r6, r4, #11
 802aef6:	f000 feb9 	bl	802bc6c <__malloc_unlock>
 802aefa:	f026 0607 	bic.w	r6, r6, #7
 802aefe:	1d23      	adds	r3, r4, #4
 802af00:	1af2      	subs	r2, r6, r3
 802af02:	d0b6      	beq.n	802ae72 <_malloc_r+0x22>
 802af04:	1b9b      	subs	r3, r3, r6
 802af06:	50a3      	str	r3, [r4, r2]
 802af08:	e7b3      	b.n	802ae72 <_malloc_r+0x22>
 802af0a:	6862      	ldr	r2, [r4, #4]
 802af0c:	42a3      	cmp	r3, r4
 802af0e:	bf0c      	ite	eq
 802af10:	6032      	streq	r2, [r6, #0]
 802af12:	605a      	strne	r2, [r3, #4]
 802af14:	e7ec      	b.n	802aef0 <_malloc_r+0xa0>
 802af16:	4623      	mov	r3, r4
 802af18:	6864      	ldr	r4, [r4, #4]
 802af1a:	e7b2      	b.n	802ae82 <_malloc_r+0x32>
 802af1c:	4634      	mov	r4, r6
 802af1e:	6876      	ldr	r6, [r6, #4]
 802af20:	e7b9      	b.n	802ae96 <_malloc_r+0x46>
 802af22:	230c      	movs	r3, #12
 802af24:	603b      	str	r3, [r7, #0]
 802af26:	4638      	mov	r0, r7
 802af28:	f000 fea0 	bl	802bc6c <__malloc_unlock>
 802af2c:	e7a1      	b.n	802ae72 <_malloc_r+0x22>
 802af2e:	6025      	str	r5, [r4, #0]
 802af30:	e7de      	b.n	802aef0 <_malloc_r+0xa0>
 802af32:	bf00      	nop
 802af34:	24028054 	.word	0x24028054

0802af38 <__sfputc_r>:
 802af38:	6893      	ldr	r3, [r2, #8]
 802af3a:	3b01      	subs	r3, #1
 802af3c:	2b00      	cmp	r3, #0
 802af3e:	b410      	push	{r4}
 802af40:	6093      	str	r3, [r2, #8]
 802af42:	da08      	bge.n	802af56 <__sfputc_r+0x1e>
 802af44:	6994      	ldr	r4, [r2, #24]
 802af46:	42a3      	cmp	r3, r4
 802af48:	db01      	blt.n	802af4e <__sfputc_r+0x16>
 802af4a:	290a      	cmp	r1, #10
 802af4c:	d103      	bne.n	802af56 <__sfputc_r+0x1e>
 802af4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802af52:	f000 bb47 	b.w	802b5e4 <__swbuf_r>
 802af56:	6813      	ldr	r3, [r2, #0]
 802af58:	1c58      	adds	r0, r3, #1
 802af5a:	6010      	str	r0, [r2, #0]
 802af5c:	7019      	strb	r1, [r3, #0]
 802af5e:	4608      	mov	r0, r1
 802af60:	f85d 4b04 	ldr.w	r4, [sp], #4
 802af64:	4770      	bx	lr

0802af66 <__sfputs_r>:
 802af66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802af68:	4606      	mov	r6, r0
 802af6a:	460f      	mov	r7, r1
 802af6c:	4614      	mov	r4, r2
 802af6e:	18d5      	adds	r5, r2, r3
 802af70:	42ac      	cmp	r4, r5
 802af72:	d101      	bne.n	802af78 <__sfputs_r+0x12>
 802af74:	2000      	movs	r0, #0
 802af76:	e007      	b.n	802af88 <__sfputs_r+0x22>
 802af78:	f814 1b01 	ldrb.w	r1, [r4], #1
 802af7c:	463a      	mov	r2, r7
 802af7e:	4630      	mov	r0, r6
 802af80:	f7ff ffda 	bl	802af38 <__sfputc_r>
 802af84:	1c43      	adds	r3, r0, #1
 802af86:	d1f3      	bne.n	802af70 <__sfputs_r+0xa>
 802af88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802af8c <_vfiprintf_r>:
 802af8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af90:	460d      	mov	r5, r1
 802af92:	b09d      	sub	sp, #116	; 0x74
 802af94:	4614      	mov	r4, r2
 802af96:	4698      	mov	r8, r3
 802af98:	4606      	mov	r6, r0
 802af9a:	b118      	cbz	r0, 802afa4 <_vfiprintf_r+0x18>
 802af9c:	6983      	ldr	r3, [r0, #24]
 802af9e:	b90b      	cbnz	r3, 802afa4 <_vfiprintf_r+0x18>
 802afa0:	f000 fd5c 	bl	802ba5c <__sinit>
 802afa4:	4b89      	ldr	r3, [pc, #548]	; (802b1cc <_vfiprintf_r+0x240>)
 802afa6:	429d      	cmp	r5, r3
 802afa8:	d11b      	bne.n	802afe2 <_vfiprintf_r+0x56>
 802afaa:	6875      	ldr	r5, [r6, #4]
 802afac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802afae:	07d9      	lsls	r1, r3, #31
 802afb0:	d405      	bmi.n	802afbe <_vfiprintf_r+0x32>
 802afb2:	89ab      	ldrh	r3, [r5, #12]
 802afb4:	059a      	lsls	r2, r3, #22
 802afb6:	d402      	bmi.n	802afbe <_vfiprintf_r+0x32>
 802afb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802afba:	f7ff feb4 	bl	802ad26 <__retarget_lock_acquire_recursive>
 802afbe:	89ab      	ldrh	r3, [r5, #12]
 802afc0:	071b      	lsls	r3, r3, #28
 802afc2:	d501      	bpl.n	802afc8 <_vfiprintf_r+0x3c>
 802afc4:	692b      	ldr	r3, [r5, #16]
 802afc6:	b9eb      	cbnz	r3, 802b004 <_vfiprintf_r+0x78>
 802afc8:	4629      	mov	r1, r5
 802afca:	4630      	mov	r0, r6
 802afcc:	f000 fb5c 	bl	802b688 <__swsetup_r>
 802afd0:	b1c0      	cbz	r0, 802b004 <_vfiprintf_r+0x78>
 802afd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802afd4:	07dc      	lsls	r4, r3, #31
 802afd6:	d50e      	bpl.n	802aff6 <_vfiprintf_r+0x6a>
 802afd8:	f04f 30ff 	mov.w	r0, #4294967295
 802afdc:	b01d      	add	sp, #116	; 0x74
 802afde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802afe2:	4b7b      	ldr	r3, [pc, #492]	; (802b1d0 <_vfiprintf_r+0x244>)
 802afe4:	429d      	cmp	r5, r3
 802afe6:	d101      	bne.n	802afec <_vfiprintf_r+0x60>
 802afe8:	68b5      	ldr	r5, [r6, #8]
 802afea:	e7df      	b.n	802afac <_vfiprintf_r+0x20>
 802afec:	4b79      	ldr	r3, [pc, #484]	; (802b1d4 <_vfiprintf_r+0x248>)
 802afee:	429d      	cmp	r5, r3
 802aff0:	bf08      	it	eq
 802aff2:	68f5      	ldreq	r5, [r6, #12]
 802aff4:	e7da      	b.n	802afac <_vfiprintf_r+0x20>
 802aff6:	89ab      	ldrh	r3, [r5, #12]
 802aff8:	0598      	lsls	r0, r3, #22
 802affa:	d4ed      	bmi.n	802afd8 <_vfiprintf_r+0x4c>
 802affc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802affe:	f7ff fe94 	bl	802ad2a <__retarget_lock_release_recursive>
 802b002:	e7e9      	b.n	802afd8 <_vfiprintf_r+0x4c>
 802b004:	2300      	movs	r3, #0
 802b006:	9309      	str	r3, [sp, #36]	; 0x24
 802b008:	2320      	movs	r3, #32
 802b00a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b00e:	f8cd 800c 	str.w	r8, [sp, #12]
 802b012:	2330      	movs	r3, #48	; 0x30
 802b014:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802b1d8 <_vfiprintf_r+0x24c>
 802b018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b01c:	f04f 0901 	mov.w	r9, #1
 802b020:	4623      	mov	r3, r4
 802b022:	469a      	mov	sl, r3
 802b024:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b028:	b10a      	cbz	r2, 802b02e <_vfiprintf_r+0xa2>
 802b02a:	2a25      	cmp	r2, #37	; 0x25
 802b02c:	d1f9      	bne.n	802b022 <_vfiprintf_r+0x96>
 802b02e:	ebba 0b04 	subs.w	fp, sl, r4
 802b032:	d00b      	beq.n	802b04c <_vfiprintf_r+0xc0>
 802b034:	465b      	mov	r3, fp
 802b036:	4622      	mov	r2, r4
 802b038:	4629      	mov	r1, r5
 802b03a:	4630      	mov	r0, r6
 802b03c:	f7ff ff93 	bl	802af66 <__sfputs_r>
 802b040:	3001      	adds	r0, #1
 802b042:	f000 80aa 	beq.w	802b19a <_vfiprintf_r+0x20e>
 802b046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b048:	445a      	add	r2, fp
 802b04a:	9209      	str	r2, [sp, #36]	; 0x24
 802b04c:	f89a 3000 	ldrb.w	r3, [sl]
 802b050:	2b00      	cmp	r3, #0
 802b052:	f000 80a2 	beq.w	802b19a <_vfiprintf_r+0x20e>
 802b056:	2300      	movs	r3, #0
 802b058:	f04f 32ff 	mov.w	r2, #4294967295
 802b05c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b060:	f10a 0a01 	add.w	sl, sl, #1
 802b064:	9304      	str	r3, [sp, #16]
 802b066:	9307      	str	r3, [sp, #28]
 802b068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b06c:	931a      	str	r3, [sp, #104]	; 0x68
 802b06e:	4654      	mov	r4, sl
 802b070:	2205      	movs	r2, #5
 802b072:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b076:	4858      	ldr	r0, [pc, #352]	; (802b1d8 <_vfiprintf_r+0x24c>)
 802b078:	f7d5 f93a 	bl	80002f0 <memchr>
 802b07c:	9a04      	ldr	r2, [sp, #16]
 802b07e:	b9d8      	cbnz	r0, 802b0b8 <_vfiprintf_r+0x12c>
 802b080:	06d1      	lsls	r1, r2, #27
 802b082:	bf44      	itt	mi
 802b084:	2320      	movmi	r3, #32
 802b086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b08a:	0713      	lsls	r3, r2, #28
 802b08c:	bf44      	itt	mi
 802b08e:	232b      	movmi	r3, #43	; 0x2b
 802b090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b094:	f89a 3000 	ldrb.w	r3, [sl]
 802b098:	2b2a      	cmp	r3, #42	; 0x2a
 802b09a:	d015      	beq.n	802b0c8 <_vfiprintf_r+0x13c>
 802b09c:	9a07      	ldr	r2, [sp, #28]
 802b09e:	4654      	mov	r4, sl
 802b0a0:	2000      	movs	r0, #0
 802b0a2:	f04f 0c0a 	mov.w	ip, #10
 802b0a6:	4621      	mov	r1, r4
 802b0a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b0ac:	3b30      	subs	r3, #48	; 0x30
 802b0ae:	2b09      	cmp	r3, #9
 802b0b0:	d94e      	bls.n	802b150 <_vfiprintf_r+0x1c4>
 802b0b2:	b1b0      	cbz	r0, 802b0e2 <_vfiprintf_r+0x156>
 802b0b4:	9207      	str	r2, [sp, #28]
 802b0b6:	e014      	b.n	802b0e2 <_vfiprintf_r+0x156>
 802b0b8:	eba0 0308 	sub.w	r3, r0, r8
 802b0bc:	fa09 f303 	lsl.w	r3, r9, r3
 802b0c0:	4313      	orrs	r3, r2
 802b0c2:	9304      	str	r3, [sp, #16]
 802b0c4:	46a2      	mov	sl, r4
 802b0c6:	e7d2      	b.n	802b06e <_vfiprintf_r+0xe2>
 802b0c8:	9b03      	ldr	r3, [sp, #12]
 802b0ca:	1d19      	adds	r1, r3, #4
 802b0cc:	681b      	ldr	r3, [r3, #0]
 802b0ce:	9103      	str	r1, [sp, #12]
 802b0d0:	2b00      	cmp	r3, #0
 802b0d2:	bfbb      	ittet	lt
 802b0d4:	425b      	neglt	r3, r3
 802b0d6:	f042 0202 	orrlt.w	r2, r2, #2
 802b0da:	9307      	strge	r3, [sp, #28]
 802b0dc:	9307      	strlt	r3, [sp, #28]
 802b0de:	bfb8      	it	lt
 802b0e0:	9204      	strlt	r2, [sp, #16]
 802b0e2:	7823      	ldrb	r3, [r4, #0]
 802b0e4:	2b2e      	cmp	r3, #46	; 0x2e
 802b0e6:	d10c      	bne.n	802b102 <_vfiprintf_r+0x176>
 802b0e8:	7863      	ldrb	r3, [r4, #1]
 802b0ea:	2b2a      	cmp	r3, #42	; 0x2a
 802b0ec:	d135      	bne.n	802b15a <_vfiprintf_r+0x1ce>
 802b0ee:	9b03      	ldr	r3, [sp, #12]
 802b0f0:	1d1a      	adds	r2, r3, #4
 802b0f2:	681b      	ldr	r3, [r3, #0]
 802b0f4:	9203      	str	r2, [sp, #12]
 802b0f6:	2b00      	cmp	r3, #0
 802b0f8:	bfb8      	it	lt
 802b0fa:	f04f 33ff 	movlt.w	r3, #4294967295
 802b0fe:	3402      	adds	r4, #2
 802b100:	9305      	str	r3, [sp, #20]
 802b102:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802b1e8 <_vfiprintf_r+0x25c>
 802b106:	7821      	ldrb	r1, [r4, #0]
 802b108:	2203      	movs	r2, #3
 802b10a:	4650      	mov	r0, sl
 802b10c:	f7d5 f8f0 	bl	80002f0 <memchr>
 802b110:	b140      	cbz	r0, 802b124 <_vfiprintf_r+0x198>
 802b112:	2340      	movs	r3, #64	; 0x40
 802b114:	eba0 000a 	sub.w	r0, r0, sl
 802b118:	fa03 f000 	lsl.w	r0, r3, r0
 802b11c:	9b04      	ldr	r3, [sp, #16]
 802b11e:	4303      	orrs	r3, r0
 802b120:	3401      	adds	r4, #1
 802b122:	9304      	str	r3, [sp, #16]
 802b124:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b128:	482c      	ldr	r0, [pc, #176]	; (802b1dc <_vfiprintf_r+0x250>)
 802b12a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b12e:	2206      	movs	r2, #6
 802b130:	f7d5 f8de 	bl	80002f0 <memchr>
 802b134:	2800      	cmp	r0, #0
 802b136:	d03f      	beq.n	802b1b8 <_vfiprintf_r+0x22c>
 802b138:	4b29      	ldr	r3, [pc, #164]	; (802b1e0 <_vfiprintf_r+0x254>)
 802b13a:	bb1b      	cbnz	r3, 802b184 <_vfiprintf_r+0x1f8>
 802b13c:	9b03      	ldr	r3, [sp, #12]
 802b13e:	3307      	adds	r3, #7
 802b140:	f023 0307 	bic.w	r3, r3, #7
 802b144:	3308      	adds	r3, #8
 802b146:	9303      	str	r3, [sp, #12]
 802b148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b14a:	443b      	add	r3, r7
 802b14c:	9309      	str	r3, [sp, #36]	; 0x24
 802b14e:	e767      	b.n	802b020 <_vfiprintf_r+0x94>
 802b150:	fb0c 3202 	mla	r2, ip, r2, r3
 802b154:	460c      	mov	r4, r1
 802b156:	2001      	movs	r0, #1
 802b158:	e7a5      	b.n	802b0a6 <_vfiprintf_r+0x11a>
 802b15a:	2300      	movs	r3, #0
 802b15c:	3401      	adds	r4, #1
 802b15e:	9305      	str	r3, [sp, #20]
 802b160:	4619      	mov	r1, r3
 802b162:	f04f 0c0a 	mov.w	ip, #10
 802b166:	4620      	mov	r0, r4
 802b168:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b16c:	3a30      	subs	r2, #48	; 0x30
 802b16e:	2a09      	cmp	r2, #9
 802b170:	d903      	bls.n	802b17a <_vfiprintf_r+0x1ee>
 802b172:	2b00      	cmp	r3, #0
 802b174:	d0c5      	beq.n	802b102 <_vfiprintf_r+0x176>
 802b176:	9105      	str	r1, [sp, #20]
 802b178:	e7c3      	b.n	802b102 <_vfiprintf_r+0x176>
 802b17a:	fb0c 2101 	mla	r1, ip, r1, r2
 802b17e:	4604      	mov	r4, r0
 802b180:	2301      	movs	r3, #1
 802b182:	e7f0      	b.n	802b166 <_vfiprintf_r+0x1da>
 802b184:	ab03      	add	r3, sp, #12
 802b186:	9300      	str	r3, [sp, #0]
 802b188:	462a      	mov	r2, r5
 802b18a:	4b16      	ldr	r3, [pc, #88]	; (802b1e4 <_vfiprintf_r+0x258>)
 802b18c:	a904      	add	r1, sp, #16
 802b18e:	4630      	mov	r0, r6
 802b190:	f3af 8000 	nop.w
 802b194:	4607      	mov	r7, r0
 802b196:	1c78      	adds	r0, r7, #1
 802b198:	d1d6      	bne.n	802b148 <_vfiprintf_r+0x1bc>
 802b19a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b19c:	07d9      	lsls	r1, r3, #31
 802b19e:	d405      	bmi.n	802b1ac <_vfiprintf_r+0x220>
 802b1a0:	89ab      	ldrh	r3, [r5, #12]
 802b1a2:	059a      	lsls	r2, r3, #22
 802b1a4:	d402      	bmi.n	802b1ac <_vfiprintf_r+0x220>
 802b1a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b1a8:	f7ff fdbf 	bl	802ad2a <__retarget_lock_release_recursive>
 802b1ac:	89ab      	ldrh	r3, [r5, #12]
 802b1ae:	065b      	lsls	r3, r3, #25
 802b1b0:	f53f af12 	bmi.w	802afd8 <_vfiprintf_r+0x4c>
 802b1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b1b6:	e711      	b.n	802afdc <_vfiprintf_r+0x50>
 802b1b8:	ab03      	add	r3, sp, #12
 802b1ba:	9300      	str	r3, [sp, #0]
 802b1bc:	462a      	mov	r2, r5
 802b1be:	4b09      	ldr	r3, [pc, #36]	; (802b1e4 <_vfiprintf_r+0x258>)
 802b1c0:	a904      	add	r1, sp, #16
 802b1c2:	4630      	mov	r0, r6
 802b1c4:	f000 f880 	bl	802b2c8 <_printf_i>
 802b1c8:	e7e4      	b.n	802b194 <_vfiprintf_r+0x208>
 802b1ca:	bf00      	nop
 802b1cc:	08030240 	.word	0x08030240
 802b1d0:	08030260 	.word	0x08030260
 802b1d4:	08030220 	.word	0x08030220
 802b1d8:	080301e8 	.word	0x080301e8
 802b1dc:	080301f2 	.word	0x080301f2
 802b1e0:	00000000 	.word	0x00000000
 802b1e4:	0802af67 	.word	0x0802af67
 802b1e8:	080301ee 	.word	0x080301ee

0802b1ec <_printf_common>:
 802b1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b1f0:	4616      	mov	r6, r2
 802b1f2:	4699      	mov	r9, r3
 802b1f4:	688a      	ldr	r2, [r1, #8]
 802b1f6:	690b      	ldr	r3, [r1, #16]
 802b1f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b1fc:	4293      	cmp	r3, r2
 802b1fe:	bfb8      	it	lt
 802b200:	4613      	movlt	r3, r2
 802b202:	6033      	str	r3, [r6, #0]
 802b204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b208:	4607      	mov	r7, r0
 802b20a:	460c      	mov	r4, r1
 802b20c:	b10a      	cbz	r2, 802b212 <_printf_common+0x26>
 802b20e:	3301      	adds	r3, #1
 802b210:	6033      	str	r3, [r6, #0]
 802b212:	6823      	ldr	r3, [r4, #0]
 802b214:	0699      	lsls	r1, r3, #26
 802b216:	bf42      	ittt	mi
 802b218:	6833      	ldrmi	r3, [r6, #0]
 802b21a:	3302      	addmi	r3, #2
 802b21c:	6033      	strmi	r3, [r6, #0]
 802b21e:	6825      	ldr	r5, [r4, #0]
 802b220:	f015 0506 	ands.w	r5, r5, #6
 802b224:	d106      	bne.n	802b234 <_printf_common+0x48>
 802b226:	f104 0a19 	add.w	sl, r4, #25
 802b22a:	68e3      	ldr	r3, [r4, #12]
 802b22c:	6832      	ldr	r2, [r6, #0]
 802b22e:	1a9b      	subs	r3, r3, r2
 802b230:	42ab      	cmp	r3, r5
 802b232:	dc26      	bgt.n	802b282 <_printf_common+0x96>
 802b234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802b238:	1e13      	subs	r3, r2, #0
 802b23a:	6822      	ldr	r2, [r4, #0]
 802b23c:	bf18      	it	ne
 802b23e:	2301      	movne	r3, #1
 802b240:	0692      	lsls	r2, r2, #26
 802b242:	d42b      	bmi.n	802b29c <_printf_common+0xb0>
 802b244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b248:	4649      	mov	r1, r9
 802b24a:	4638      	mov	r0, r7
 802b24c:	47c0      	blx	r8
 802b24e:	3001      	adds	r0, #1
 802b250:	d01e      	beq.n	802b290 <_printf_common+0xa4>
 802b252:	6823      	ldr	r3, [r4, #0]
 802b254:	68e5      	ldr	r5, [r4, #12]
 802b256:	6832      	ldr	r2, [r6, #0]
 802b258:	f003 0306 	and.w	r3, r3, #6
 802b25c:	2b04      	cmp	r3, #4
 802b25e:	bf08      	it	eq
 802b260:	1aad      	subeq	r5, r5, r2
 802b262:	68a3      	ldr	r3, [r4, #8]
 802b264:	6922      	ldr	r2, [r4, #16]
 802b266:	bf0c      	ite	eq
 802b268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b26c:	2500      	movne	r5, #0
 802b26e:	4293      	cmp	r3, r2
 802b270:	bfc4      	itt	gt
 802b272:	1a9b      	subgt	r3, r3, r2
 802b274:	18ed      	addgt	r5, r5, r3
 802b276:	2600      	movs	r6, #0
 802b278:	341a      	adds	r4, #26
 802b27a:	42b5      	cmp	r5, r6
 802b27c:	d11a      	bne.n	802b2b4 <_printf_common+0xc8>
 802b27e:	2000      	movs	r0, #0
 802b280:	e008      	b.n	802b294 <_printf_common+0xa8>
 802b282:	2301      	movs	r3, #1
 802b284:	4652      	mov	r2, sl
 802b286:	4649      	mov	r1, r9
 802b288:	4638      	mov	r0, r7
 802b28a:	47c0      	blx	r8
 802b28c:	3001      	adds	r0, #1
 802b28e:	d103      	bne.n	802b298 <_printf_common+0xac>
 802b290:	f04f 30ff 	mov.w	r0, #4294967295
 802b294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b298:	3501      	adds	r5, #1
 802b29a:	e7c6      	b.n	802b22a <_printf_common+0x3e>
 802b29c:	18e1      	adds	r1, r4, r3
 802b29e:	1c5a      	adds	r2, r3, #1
 802b2a0:	2030      	movs	r0, #48	; 0x30
 802b2a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b2a6:	4422      	add	r2, r4
 802b2a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b2ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b2b0:	3302      	adds	r3, #2
 802b2b2:	e7c7      	b.n	802b244 <_printf_common+0x58>
 802b2b4:	2301      	movs	r3, #1
 802b2b6:	4622      	mov	r2, r4
 802b2b8:	4649      	mov	r1, r9
 802b2ba:	4638      	mov	r0, r7
 802b2bc:	47c0      	blx	r8
 802b2be:	3001      	adds	r0, #1
 802b2c0:	d0e6      	beq.n	802b290 <_printf_common+0xa4>
 802b2c2:	3601      	adds	r6, #1
 802b2c4:	e7d9      	b.n	802b27a <_printf_common+0x8e>
	...

0802b2c8 <_printf_i>:
 802b2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b2cc:	7e0f      	ldrb	r7, [r1, #24]
 802b2ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b2d0:	2f78      	cmp	r7, #120	; 0x78
 802b2d2:	4691      	mov	r9, r2
 802b2d4:	4680      	mov	r8, r0
 802b2d6:	460c      	mov	r4, r1
 802b2d8:	469a      	mov	sl, r3
 802b2da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802b2de:	d807      	bhi.n	802b2f0 <_printf_i+0x28>
 802b2e0:	2f62      	cmp	r7, #98	; 0x62
 802b2e2:	d80a      	bhi.n	802b2fa <_printf_i+0x32>
 802b2e4:	2f00      	cmp	r7, #0
 802b2e6:	f000 80d8 	beq.w	802b49a <_printf_i+0x1d2>
 802b2ea:	2f58      	cmp	r7, #88	; 0x58
 802b2ec:	f000 80a3 	beq.w	802b436 <_printf_i+0x16e>
 802b2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b2f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802b2f8:	e03a      	b.n	802b370 <_printf_i+0xa8>
 802b2fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802b2fe:	2b15      	cmp	r3, #21
 802b300:	d8f6      	bhi.n	802b2f0 <_printf_i+0x28>
 802b302:	a101      	add	r1, pc, #4	; (adr r1, 802b308 <_printf_i+0x40>)
 802b304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b308:	0802b361 	.word	0x0802b361
 802b30c:	0802b375 	.word	0x0802b375
 802b310:	0802b2f1 	.word	0x0802b2f1
 802b314:	0802b2f1 	.word	0x0802b2f1
 802b318:	0802b2f1 	.word	0x0802b2f1
 802b31c:	0802b2f1 	.word	0x0802b2f1
 802b320:	0802b375 	.word	0x0802b375
 802b324:	0802b2f1 	.word	0x0802b2f1
 802b328:	0802b2f1 	.word	0x0802b2f1
 802b32c:	0802b2f1 	.word	0x0802b2f1
 802b330:	0802b2f1 	.word	0x0802b2f1
 802b334:	0802b481 	.word	0x0802b481
 802b338:	0802b3a5 	.word	0x0802b3a5
 802b33c:	0802b463 	.word	0x0802b463
 802b340:	0802b2f1 	.word	0x0802b2f1
 802b344:	0802b2f1 	.word	0x0802b2f1
 802b348:	0802b4a3 	.word	0x0802b4a3
 802b34c:	0802b2f1 	.word	0x0802b2f1
 802b350:	0802b3a5 	.word	0x0802b3a5
 802b354:	0802b2f1 	.word	0x0802b2f1
 802b358:	0802b2f1 	.word	0x0802b2f1
 802b35c:	0802b46b 	.word	0x0802b46b
 802b360:	682b      	ldr	r3, [r5, #0]
 802b362:	1d1a      	adds	r2, r3, #4
 802b364:	681b      	ldr	r3, [r3, #0]
 802b366:	602a      	str	r2, [r5, #0]
 802b368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b36c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b370:	2301      	movs	r3, #1
 802b372:	e0a3      	b.n	802b4bc <_printf_i+0x1f4>
 802b374:	6820      	ldr	r0, [r4, #0]
 802b376:	6829      	ldr	r1, [r5, #0]
 802b378:	0606      	lsls	r6, r0, #24
 802b37a:	f101 0304 	add.w	r3, r1, #4
 802b37e:	d50a      	bpl.n	802b396 <_printf_i+0xce>
 802b380:	680e      	ldr	r6, [r1, #0]
 802b382:	602b      	str	r3, [r5, #0]
 802b384:	2e00      	cmp	r6, #0
 802b386:	da03      	bge.n	802b390 <_printf_i+0xc8>
 802b388:	232d      	movs	r3, #45	; 0x2d
 802b38a:	4276      	negs	r6, r6
 802b38c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b390:	485e      	ldr	r0, [pc, #376]	; (802b50c <_printf_i+0x244>)
 802b392:	230a      	movs	r3, #10
 802b394:	e019      	b.n	802b3ca <_printf_i+0x102>
 802b396:	680e      	ldr	r6, [r1, #0]
 802b398:	602b      	str	r3, [r5, #0]
 802b39a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802b39e:	bf18      	it	ne
 802b3a0:	b236      	sxthne	r6, r6
 802b3a2:	e7ef      	b.n	802b384 <_printf_i+0xbc>
 802b3a4:	682b      	ldr	r3, [r5, #0]
 802b3a6:	6820      	ldr	r0, [r4, #0]
 802b3a8:	1d19      	adds	r1, r3, #4
 802b3aa:	6029      	str	r1, [r5, #0]
 802b3ac:	0601      	lsls	r1, r0, #24
 802b3ae:	d501      	bpl.n	802b3b4 <_printf_i+0xec>
 802b3b0:	681e      	ldr	r6, [r3, #0]
 802b3b2:	e002      	b.n	802b3ba <_printf_i+0xf2>
 802b3b4:	0646      	lsls	r6, r0, #25
 802b3b6:	d5fb      	bpl.n	802b3b0 <_printf_i+0xe8>
 802b3b8:	881e      	ldrh	r6, [r3, #0]
 802b3ba:	4854      	ldr	r0, [pc, #336]	; (802b50c <_printf_i+0x244>)
 802b3bc:	2f6f      	cmp	r7, #111	; 0x6f
 802b3be:	bf0c      	ite	eq
 802b3c0:	2308      	moveq	r3, #8
 802b3c2:	230a      	movne	r3, #10
 802b3c4:	2100      	movs	r1, #0
 802b3c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b3ca:	6865      	ldr	r5, [r4, #4]
 802b3cc:	60a5      	str	r5, [r4, #8]
 802b3ce:	2d00      	cmp	r5, #0
 802b3d0:	bfa2      	ittt	ge
 802b3d2:	6821      	ldrge	r1, [r4, #0]
 802b3d4:	f021 0104 	bicge.w	r1, r1, #4
 802b3d8:	6021      	strge	r1, [r4, #0]
 802b3da:	b90e      	cbnz	r6, 802b3e0 <_printf_i+0x118>
 802b3dc:	2d00      	cmp	r5, #0
 802b3de:	d04d      	beq.n	802b47c <_printf_i+0x1b4>
 802b3e0:	4615      	mov	r5, r2
 802b3e2:	fbb6 f1f3 	udiv	r1, r6, r3
 802b3e6:	fb03 6711 	mls	r7, r3, r1, r6
 802b3ea:	5dc7      	ldrb	r7, [r0, r7]
 802b3ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802b3f0:	4637      	mov	r7, r6
 802b3f2:	42bb      	cmp	r3, r7
 802b3f4:	460e      	mov	r6, r1
 802b3f6:	d9f4      	bls.n	802b3e2 <_printf_i+0x11a>
 802b3f8:	2b08      	cmp	r3, #8
 802b3fa:	d10b      	bne.n	802b414 <_printf_i+0x14c>
 802b3fc:	6823      	ldr	r3, [r4, #0]
 802b3fe:	07de      	lsls	r6, r3, #31
 802b400:	d508      	bpl.n	802b414 <_printf_i+0x14c>
 802b402:	6923      	ldr	r3, [r4, #16]
 802b404:	6861      	ldr	r1, [r4, #4]
 802b406:	4299      	cmp	r1, r3
 802b408:	bfde      	ittt	le
 802b40a:	2330      	movle	r3, #48	; 0x30
 802b40c:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b410:	f105 35ff 	addle.w	r5, r5, #4294967295
 802b414:	1b52      	subs	r2, r2, r5
 802b416:	6122      	str	r2, [r4, #16]
 802b418:	f8cd a000 	str.w	sl, [sp]
 802b41c:	464b      	mov	r3, r9
 802b41e:	aa03      	add	r2, sp, #12
 802b420:	4621      	mov	r1, r4
 802b422:	4640      	mov	r0, r8
 802b424:	f7ff fee2 	bl	802b1ec <_printf_common>
 802b428:	3001      	adds	r0, #1
 802b42a:	d14c      	bne.n	802b4c6 <_printf_i+0x1fe>
 802b42c:	f04f 30ff 	mov.w	r0, #4294967295
 802b430:	b004      	add	sp, #16
 802b432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b436:	4835      	ldr	r0, [pc, #212]	; (802b50c <_printf_i+0x244>)
 802b438:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802b43c:	6829      	ldr	r1, [r5, #0]
 802b43e:	6823      	ldr	r3, [r4, #0]
 802b440:	f851 6b04 	ldr.w	r6, [r1], #4
 802b444:	6029      	str	r1, [r5, #0]
 802b446:	061d      	lsls	r5, r3, #24
 802b448:	d514      	bpl.n	802b474 <_printf_i+0x1ac>
 802b44a:	07df      	lsls	r7, r3, #31
 802b44c:	bf44      	itt	mi
 802b44e:	f043 0320 	orrmi.w	r3, r3, #32
 802b452:	6023      	strmi	r3, [r4, #0]
 802b454:	b91e      	cbnz	r6, 802b45e <_printf_i+0x196>
 802b456:	6823      	ldr	r3, [r4, #0]
 802b458:	f023 0320 	bic.w	r3, r3, #32
 802b45c:	6023      	str	r3, [r4, #0]
 802b45e:	2310      	movs	r3, #16
 802b460:	e7b0      	b.n	802b3c4 <_printf_i+0xfc>
 802b462:	6823      	ldr	r3, [r4, #0]
 802b464:	f043 0320 	orr.w	r3, r3, #32
 802b468:	6023      	str	r3, [r4, #0]
 802b46a:	2378      	movs	r3, #120	; 0x78
 802b46c:	4828      	ldr	r0, [pc, #160]	; (802b510 <_printf_i+0x248>)
 802b46e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802b472:	e7e3      	b.n	802b43c <_printf_i+0x174>
 802b474:	0659      	lsls	r1, r3, #25
 802b476:	bf48      	it	mi
 802b478:	b2b6      	uxthmi	r6, r6
 802b47a:	e7e6      	b.n	802b44a <_printf_i+0x182>
 802b47c:	4615      	mov	r5, r2
 802b47e:	e7bb      	b.n	802b3f8 <_printf_i+0x130>
 802b480:	682b      	ldr	r3, [r5, #0]
 802b482:	6826      	ldr	r6, [r4, #0]
 802b484:	6961      	ldr	r1, [r4, #20]
 802b486:	1d18      	adds	r0, r3, #4
 802b488:	6028      	str	r0, [r5, #0]
 802b48a:	0635      	lsls	r5, r6, #24
 802b48c:	681b      	ldr	r3, [r3, #0]
 802b48e:	d501      	bpl.n	802b494 <_printf_i+0x1cc>
 802b490:	6019      	str	r1, [r3, #0]
 802b492:	e002      	b.n	802b49a <_printf_i+0x1d2>
 802b494:	0670      	lsls	r0, r6, #25
 802b496:	d5fb      	bpl.n	802b490 <_printf_i+0x1c8>
 802b498:	8019      	strh	r1, [r3, #0]
 802b49a:	2300      	movs	r3, #0
 802b49c:	6123      	str	r3, [r4, #16]
 802b49e:	4615      	mov	r5, r2
 802b4a0:	e7ba      	b.n	802b418 <_printf_i+0x150>
 802b4a2:	682b      	ldr	r3, [r5, #0]
 802b4a4:	1d1a      	adds	r2, r3, #4
 802b4a6:	602a      	str	r2, [r5, #0]
 802b4a8:	681d      	ldr	r5, [r3, #0]
 802b4aa:	6862      	ldr	r2, [r4, #4]
 802b4ac:	2100      	movs	r1, #0
 802b4ae:	4628      	mov	r0, r5
 802b4b0:	f7d4 ff1e 	bl	80002f0 <memchr>
 802b4b4:	b108      	cbz	r0, 802b4ba <_printf_i+0x1f2>
 802b4b6:	1b40      	subs	r0, r0, r5
 802b4b8:	6060      	str	r0, [r4, #4]
 802b4ba:	6863      	ldr	r3, [r4, #4]
 802b4bc:	6123      	str	r3, [r4, #16]
 802b4be:	2300      	movs	r3, #0
 802b4c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b4c4:	e7a8      	b.n	802b418 <_printf_i+0x150>
 802b4c6:	6923      	ldr	r3, [r4, #16]
 802b4c8:	462a      	mov	r2, r5
 802b4ca:	4649      	mov	r1, r9
 802b4cc:	4640      	mov	r0, r8
 802b4ce:	47d0      	blx	sl
 802b4d0:	3001      	adds	r0, #1
 802b4d2:	d0ab      	beq.n	802b42c <_printf_i+0x164>
 802b4d4:	6823      	ldr	r3, [r4, #0]
 802b4d6:	079b      	lsls	r3, r3, #30
 802b4d8:	d413      	bmi.n	802b502 <_printf_i+0x23a>
 802b4da:	68e0      	ldr	r0, [r4, #12]
 802b4dc:	9b03      	ldr	r3, [sp, #12]
 802b4de:	4298      	cmp	r0, r3
 802b4e0:	bfb8      	it	lt
 802b4e2:	4618      	movlt	r0, r3
 802b4e4:	e7a4      	b.n	802b430 <_printf_i+0x168>
 802b4e6:	2301      	movs	r3, #1
 802b4e8:	4632      	mov	r2, r6
 802b4ea:	4649      	mov	r1, r9
 802b4ec:	4640      	mov	r0, r8
 802b4ee:	47d0      	blx	sl
 802b4f0:	3001      	adds	r0, #1
 802b4f2:	d09b      	beq.n	802b42c <_printf_i+0x164>
 802b4f4:	3501      	adds	r5, #1
 802b4f6:	68e3      	ldr	r3, [r4, #12]
 802b4f8:	9903      	ldr	r1, [sp, #12]
 802b4fa:	1a5b      	subs	r3, r3, r1
 802b4fc:	42ab      	cmp	r3, r5
 802b4fe:	dcf2      	bgt.n	802b4e6 <_printf_i+0x21e>
 802b500:	e7eb      	b.n	802b4da <_printf_i+0x212>
 802b502:	2500      	movs	r5, #0
 802b504:	f104 0619 	add.w	r6, r4, #25
 802b508:	e7f5      	b.n	802b4f6 <_printf_i+0x22e>
 802b50a:	bf00      	nop
 802b50c:	080301f9 	.word	0x080301f9
 802b510:	0803020a 	.word	0x0803020a

0802b514 <_sbrk_r>:
 802b514:	b538      	push	{r3, r4, r5, lr}
 802b516:	4d06      	ldr	r5, [pc, #24]	; (802b530 <_sbrk_r+0x1c>)
 802b518:	2300      	movs	r3, #0
 802b51a:	4604      	mov	r4, r0
 802b51c:	4608      	mov	r0, r1
 802b51e:	602b      	str	r3, [r5, #0]
 802b520:	f7dc fb34 	bl	8007b8c <_sbrk>
 802b524:	1c43      	adds	r3, r0, #1
 802b526:	d102      	bne.n	802b52e <_sbrk_r+0x1a>
 802b528:	682b      	ldr	r3, [r5, #0]
 802b52a:	b103      	cbz	r3, 802b52e <_sbrk_r+0x1a>
 802b52c:	6023      	str	r3, [r4, #0]
 802b52e:	bd38      	pop	{r3, r4, r5, pc}
 802b530:	240281f4 	.word	0x240281f4

0802b534 <_raise_r>:
 802b534:	291f      	cmp	r1, #31
 802b536:	b538      	push	{r3, r4, r5, lr}
 802b538:	4604      	mov	r4, r0
 802b53a:	460d      	mov	r5, r1
 802b53c:	d904      	bls.n	802b548 <_raise_r+0x14>
 802b53e:	2316      	movs	r3, #22
 802b540:	6003      	str	r3, [r0, #0]
 802b542:	f04f 30ff 	mov.w	r0, #4294967295
 802b546:	bd38      	pop	{r3, r4, r5, pc}
 802b548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802b54a:	b112      	cbz	r2, 802b552 <_raise_r+0x1e>
 802b54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b550:	b94b      	cbnz	r3, 802b566 <_raise_r+0x32>
 802b552:	4620      	mov	r0, r4
 802b554:	f000 f830 	bl	802b5b8 <_getpid_r>
 802b558:	462a      	mov	r2, r5
 802b55a:	4601      	mov	r1, r0
 802b55c:	4620      	mov	r0, r4
 802b55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b562:	f000 b817 	b.w	802b594 <_kill_r>
 802b566:	2b01      	cmp	r3, #1
 802b568:	d00a      	beq.n	802b580 <_raise_r+0x4c>
 802b56a:	1c59      	adds	r1, r3, #1
 802b56c:	d103      	bne.n	802b576 <_raise_r+0x42>
 802b56e:	2316      	movs	r3, #22
 802b570:	6003      	str	r3, [r0, #0]
 802b572:	2001      	movs	r0, #1
 802b574:	e7e7      	b.n	802b546 <_raise_r+0x12>
 802b576:	2400      	movs	r4, #0
 802b578:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b57c:	4628      	mov	r0, r5
 802b57e:	4798      	blx	r3
 802b580:	2000      	movs	r0, #0
 802b582:	e7e0      	b.n	802b546 <_raise_r+0x12>

0802b584 <raise>:
 802b584:	4b02      	ldr	r3, [pc, #8]	; (802b590 <raise+0xc>)
 802b586:	4601      	mov	r1, r0
 802b588:	6818      	ldr	r0, [r3, #0]
 802b58a:	f7ff bfd3 	b.w	802b534 <_raise_r>
 802b58e:	bf00      	nop
 802b590:	240000c0 	.word	0x240000c0

0802b594 <_kill_r>:
 802b594:	b538      	push	{r3, r4, r5, lr}
 802b596:	4d07      	ldr	r5, [pc, #28]	; (802b5b4 <_kill_r+0x20>)
 802b598:	2300      	movs	r3, #0
 802b59a:	4604      	mov	r4, r0
 802b59c:	4608      	mov	r0, r1
 802b59e:	4611      	mov	r1, r2
 802b5a0:	602b      	str	r3, [r5, #0]
 802b5a2:	f7dc fa6b 	bl	8007a7c <_kill>
 802b5a6:	1c43      	adds	r3, r0, #1
 802b5a8:	d102      	bne.n	802b5b0 <_kill_r+0x1c>
 802b5aa:	682b      	ldr	r3, [r5, #0]
 802b5ac:	b103      	cbz	r3, 802b5b0 <_kill_r+0x1c>
 802b5ae:	6023      	str	r3, [r4, #0]
 802b5b0:	bd38      	pop	{r3, r4, r5, pc}
 802b5b2:	bf00      	nop
 802b5b4:	240281f4 	.word	0x240281f4

0802b5b8 <_getpid_r>:
 802b5b8:	f7dc ba58 	b.w	8007a6c <_getpid>

0802b5bc <strncmp>:
 802b5bc:	b510      	push	{r4, lr}
 802b5be:	b17a      	cbz	r2, 802b5e0 <strncmp+0x24>
 802b5c0:	4603      	mov	r3, r0
 802b5c2:	3901      	subs	r1, #1
 802b5c4:	1884      	adds	r4, r0, r2
 802b5c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 802b5ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802b5ce:	4290      	cmp	r0, r2
 802b5d0:	d101      	bne.n	802b5d6 <strncmp+0x1a>
 802b5d2:	42a3      	cmp	r3, r4
 802b5d4:	d101      	bne.n	802b5da <strncmp+0x1e>
 802b5d6:	1a80      	subs	r0, r0, r2
 802b5d8:	bd10      	pop	{r4, pc}
 802b5da:	2800      	cmp	r0, #0
 802b5dc:	d1f3      	bne.n	802b5c6 <strncmp+0xa>
 802b5de:	e7fa      	b.n	802b5d6 <strncmp+0x1a>
 802b5e0:	4610      	mov	r0, r2
 802b5e2:	e7f9      	b.n	802b5d8 <strncmp+0x1c>

0802b5e4 <__swbuf_r>:
 802b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b5e6:	460e      	mov	r6, r1
 802b5e8:	4614      	mov	r4, r2
 802b5ea:	4605      	mov	r5, r0
 802b5ec:	b118      	cbz	r0, 802b5f6 <__swbuf_r+0x12>
 802b5ee:	6983      	ldr	r3, [r0, #24]
 802b5f0:	b90b      	cbnz	r3, 802b5f6 <__swbuf_r+0x12>
 802b5f2:	f000 fa33 	bl	802ba5c <__sinit>
 802b5f6:	4b21      	ldr	r3, [pc, #132]	; (802b67c <__swbuf_r+0x98>)
 802b5f8:	429c      	cmp	r4, r3
 802b5fa:	d12b      	bne.n	802b654 <__swbuf_r+0x70>
 802b5fc:	686c      	ldr	r4, [r5, #4]
 802b5fe:	69a3      	ldr	r3, [r4, #24]
 802b600:	60a3      	str	r3, [r4, #8]
 802b602:	89a3      	ldrh	r3, [r4, #12]
 802b604:	071a      	lsls	r2, r3, #28
 802b606:	d52f      	bpl.n	802b668 <__swbuf_r+0x84>
 802b608:	6923      	ldr	r3, [r4, #16]
 802b60a:	b36b      	cbz	r3, 802b668 <__swbuf_r+0x84>
 802b60c:	6923      	ldr	r3, [r4, #16]
 802b60e:	6820      	ldr	r0, [r4, #0]
 802b610:	1ac0      	subs	r0, r0, r3
 802b612:	6963      	ldr	r3, [r4, #20]
 802b614:	b2f6      	uxtb	r6, r6
 802b616:	4283      	cmp	r3, r0
 802b618:	4637      	mov	r7, r6
 802b61a:	dc04      	bgt.n	802b626 <__swbuf_r+0x42>
 802b61c:	4621      	mov	r1, r4
 802b61e:	4628      	mov	r0, r5
 802b620:	f000 f988 	bl	802b934 <_fflush_r>
 802b624:	bb30      	cbnz	r0, 802b674 <__swbuf_r+0x90>
 802b626:	68a3      	ldr	r3, [r4, #8]
 802b628:	3b01      	subs	r3, #1
 802b62a:	60a3      	str	r3, [r4, #8]
 802b62c:	6823      	ldr	r3, [r4, #0]
 802b62e:	1c5a      	adds	r2, r3, #1
 802b630:	6022      	str	r2, [r4, #0]
 802b632:	701e      	strb	r6, [r3, #0]
 802b634:	6963      	ldr	r3, [r4, #20]
 802b636:	3001      	adds	r0, #1
 802b638:	4283      	cmp	r3, r0
 802b63a:	d004      	beq.n	802b646 <__swbuf_r+0x62>
 802b63c:	89a3      	ldrh	r3, [r4, #12]
 802b63e:	07db      	lsls	r3, r3, #31
 802b640:	d506      	bpl.n	802b650 <__swbuf_r+0x6c>
 802b642:	2e0a      	cmp	r6, #10
 802b644:	d104      	bne.n	802b650 <__swbuf_r+0x6c>
 802b646:	4621      	mov	r1, r4
 802b648:	4628      	mov	r0, r5
 802b64a:	f000 f973 	bl	802b934 <_fflush_r>
 802b64e:	b988      	cbnz	r0, 802b674 <__swbuf_r+0x90>
 802b650:	4638      	mov	r0, r7
 802b652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b654:	4b0a      	ldr	r3, [pc, #40]	; (802b680 <__swbuf_r+0x9c>)
 802b656:	429c      	cmp	r4, r3
 802b658:	d101      	bne.n	802b65e <__swbuf_r+0x7a>
 802b65a:	68ac      	ldr	r4, [r5, #8]
 802b65c:	e7cf      	b.n	802b5fe <__swbuf_r+0x1a>
 802b65e:	4b09      	ldr	r3, [pc, #36]	; (802b684 <__swbuf_r+0xa0>)
 802b660:	429c      	cmp	r4, r3
 802b662:	bf08      	it	eq
 802b664:	68ec      	ldreq	r4, [r5, #12]
 802b666:	e7ca      	b.n	802b5fe <__swbuf_r+0x1a>
 802b668:	4621      	mov	r1, r4
 802b66a:	4628      	mov	r0, r5
 802b66c:	f000 f80c 	bl	802b688 <__swsetup_r>
 802b670:	2800      	cmp	r0, #0
 802b672:	d0cb      	beq.n	802b60c <__swbuf_r+0x28>
 802b674:	f04f 37ff 	mov.w	r7, #4294967295
 802b678:	e7ea      	b.n	802b650 <__swbuf_r+0x6c>
 802b67a:	bf00      	nop
 802b67c:	08030240 	.word	0x08030240
 802b680:	08030260 	.word	0x08030260
 802b684:	08030220 	.word	0x08030220

0802b688 <__swsetup_r>:
 802b688:	4b32      	ldr	r3, [pc, #200]	; (802b754 <__swsetup_r+0xcc>)
 802b68a:	b570      	push	{r4, r5, r6, lr}
 802b68c:	681d      	ldr	r5, [r3, #0]
 802b68e:	4606      	mov	r6, r0
 802b690:	460c      	mov	r4, r1
 802b692:	b125      	cbz	r5, 802b69e <__swsetup_r+0x16>
 802b694:	69ab      	ldr	r3, [r5, #24]
 802b696:	b913      	cbnz	r3, 802b69e <__swsetup_r+0x16>
 802b698:	4628      	mov	r0, r5
 802b69a:	f000 f9df 	bl	802ba5c <__sinit>
 802b69e:	4b2e      	ldr	r3, [pc, #184]	; (802b758 <__swsetup_r+0xd0>)
 802b6a0:	429c      	cmp	r4, r3
 802b6a2:	d10f      	bne.n	802b6c4 <__swsetup_r+0x3c>
 802b6a4:	686c      	ldr	r4, [r5, #4]
 802b6a6:	89a3      	ldrh	r3, [r4, #12]
 802b6a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b6ac:	0719      	lsls	r1, r3, #28
 802b6ae:	d42c      	bmi.n	802b70a <__swsetup_r+0x82>
 802b6b0:	06dd      	lsls	r5, r3, #27
 802b6b2:	d411      	bmi.n	802b6d8 <__swsetup_r+0x50>
 802b6b4:	2309      	movs	r3, #9
 802b6b6:	6033      	str	r3, [r6, #0]
 802b6b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b6bc:	81a3      	strh	r3, [r4, #12]
 802b6be:	f04f 30ff 	mov.w	r0, #4294967295
 802b6c2:	e03e      	b.n	802b742 <__swsetup_r+0xba>
 802b6c4:	4b25      	ldr	r3, [pc, #148]	; (802b75c <__swsetup_r+0xd4>)
 802b6c6:	429c      	cmp	r4, r3
 802b6c8:	d101      	bne.n	802b6ce <__swsetup_r+0x46>
 802b6ca:	68ac      	ldr	r4, [r5, #8]
 802b6cc:	e7eb      	b.n	802b6a6 <__swsetup_r+0x1e>
 802b6ce:	4b24      	ldr	r3, [pc, #144]	; (802b760 <__swsetup_r+0xd8>)
 802b6d0:	429c      	cmp	r4, r3
 802b6d2:	bf08      	it	eq
 802b6d4:	68ec      	ldreq	r4, [r5, #12]
 802b6d6:	e7e6      	b.n	802b6a6 <__swsetup_r+0x1e>
 802b6d8:	0758      	lsls	r0, r3, #29
 802b6da:	d512      	bpl.n	802b702 <__swsetup_r+0x7a>
 802b6dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b6de:	b141      	cbz	r1, 802b6f2 <__swsetup_r+0x6a>
 802b6e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b6e4:	4299      	cmp	r1, r3
 802b6e6:	d002      	beq.n	802b6ee <__swsetup_r+0x66>
 802b6e8:	4630      	mov	r0, r6
 802b6ea:	f7ff fb45 	bl	802ad78 <_free_r>
 802b6ee:	2300      	movs	r3, #0
 802b6f0:	6363      	str	r3, [r4, #52]	; 0x34
 802b6f2:	89a3      	ldrh	r3, [r4, #12]
 802b6f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b6f8:	81a3      	strh	r3, [r4, #12]
 802b6fa:	2300      	movs	r3, #0
 802b6fc:	6063      	str	r3, [r4, #4]
 802b6fe:	6923      	ldr	r3, [r4, #16]
 802b700:	6023      	str	r3, [r4, #0]
 802b702:	89a3      	ldrh	r3, [r4, #12]
 802b704:	f043 0308 	orr.w	r3, r3, #8
 802b708:	81a3      	strh	r3, [r4, #12]
 802b70a:	6923      	ldr	r3, [r4, #16]
 802b70c:	b94b      	cbnz	r3, 802b722 <__swsetup_r+0x9a>
 802b70e:	89a3      	ldrh	r3, [r4, #12]
 802b710:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b718:	d003      	beq.n	802b722 <__swsetup_r+0x9a>
 802b71a:	4621      	mov	r1, r4
 802b71c:	4630      	mov	r0, r6
 802b71e:	f000 fa5f 	bl	802bbe0 <__smakebuf_r>
 802b722:	89a0      	ldrh	r0, [r4, #12]
 802b724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b728:	f010 0301 	ands.w	r3, r0, #1
 802b72c:	d00a      	beq.n	802b744 <__swsetup_r+0xbc>
 802b72e:	2300      	movs	r3, #0
 802b730:	60a3      	str	r3, [r4, #8]
 802b732:	6963      	ldr	r3, [r4, #20]
 802b734:	425b      	negs	r3, r3
 802b736:	61a3      	str	r3, [r4, #24]
 802b738:	6923      	ldr	r3, [r4, #16]
 802b73a:	b943      	cbnz	r3, 802b74e <__swsetup_r+0xc6>
 802b73c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b740:	d1ba      	bne.n	802b6b8 <__swsetup_r+0x30>
 802b742:	bd70      	pop	{r4, r5, r6, pc}
 802b744:	0781      	lsls	r1, r0, #30
 802b746:	bf58      	it	pl
 802b748:	6963      	ldrpl	r3, [r4, #20]
 802b74a:	60a3      	str	r3, [r4, #8]
 802b74c:	e7f4      	b.n	802b738 <__swsetup_r+0xb0>
 802b74e:	2000      	movs	r0, #0
 802b750:	e7f7      	b.n	802b742 <__swsetup_r+0xba>
 802b752:	bf00      	nop
 802b754:	240000c0 	.word	0x240000c0
 802b758:	08030240 	.word	0x08030240
 802b75c:	08030260 	.word	0x08030260
 802b760:	08030220 	.word	0x08030220

0802b764 <__register_exitproc>:
 802b764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b768:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802b824 <__register_exitproc+0xc0>
 802b76c:	4606      	mov	r6, r0
 802b76e:	f8d8 0000 	ldr.w	r0, [r8]
 802b772:	461f      	mov	r7, r3
 802b774:	460d      	mov	r5, r1
 802b776:	4691      	mov	r9, r2
 802b778:	f7ff fad5 	bl	802ad26 <__retarget_lock_acquire_recursive>
 802b77c:	4b25      	ldr	r3, [pc, #148]	; (802b814 <__register_exitproc+0xb0>)
 802b77e:	681c      	ldr	r4, [r3, #0]
 802b780:	b934      	cbnz	r4, 802b790 <__register_exitproc+0x2c>
 802b782:	4c25      	ldr	r4, [pc, #148]	; (802b818 <__register_exitproc+0xb4>)
 802b784:	601c      	str	r4, [r3, #0]
 802b786:	4b25      	ldr	r3, [pc, #148]	; (802b81c <__register_exitproc+0xb8>)
 802b788:	b113      	cbz	r3, 802b790 <__register_exitproc+0x2c>
 802b78a:	681b      	ldr	r3, [r3, #0]
 802b78c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802b790:	6863      	ldr	r3, [r4, #4]
 802b792:	2b1f      	cmp	r3, #31
 802b794:	dd07      	ble.n	802b7a6 <__register_exitproc+0x42>
 802b796:	f8d8 0000 	ldr.w	r0, [r8]
 802b79a:	f7ff fac6 	bl	802ad2a <__retarget_lock_release_recursive>
 802b79e:	f04f 30ff 	mov.w	r0, #4294967295
 802b7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b7a6:	b34e      	cbz	r6, 802b7fc <__register_exitproc+0x98>
 802b7a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802b7ac:	b988      	cbnz	r0, 802b7d2 <__register_exitproc+0x6e>
 802b7ae:	4b1c      	ldr	r3, [pc, #112]	; (802b820 <__register_exitproc+0xbc>)
 802b7b0:	b923      	cbnz	r3, 802b7bc <__register_exitproc+0x58>
 802b7b2:	f8d8 0000 	ldr.w	r0, [r8]
 802b7b6:	f7ff fab7 	bl	802ad28 <__retarget_lock_release>
 802b7ba:	e7f0      	b.n	802b79e <__register_exitproc+0x3a>
 802b7bc:	f44f 7084 	mov.w	r0, #264	; 0x108
 802b7c0:	f7ff fab4 	bl	802ad2c <malloc>
 802b7c4:	2800      	cmp	r0, #0
 802b7c6:	d0f4      	beq.n	802b7b2 <__register_exitproc+0x4e>
 802b7c8:	2300      	movs	r3, #0
 802b7ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802b7ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802b7d2:	6863      	ldr	r3, [r4, #4]
 802b7d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b7d8:	2201      	movs	r2, #1
 802b7da:	409a      	lsls	r2, r3
 802b7dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b7e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802b7e4:	4313      	orrs	r3, r2
 802b7e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802b7ea:	2e02      	cmp	r6, #2
 802b7ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802b7f0:	bf02      	ittt	eq
 802b7f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802b7f6:	4313      	orreq	r3, r2
 802b7f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802b7fc:	6863      	ldr	r3, [r4, #4]
 802b7fe:	f8d8 0000 	ldr.w	r0, [r8]
 802b802:	1c5a      	adds	r2, r3, #1
 802b804:	3302      	adds	r3, #2
 802b806:	6062      	str	r2, [r4, #4]
 802b808:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802b80c:	f7ff fa8d 	bl	802ad2a <__retarget_lock_release_recursive>
 802b810:	2000      	movs	r0, #0
 802b812:	e7c6      	b.n	802b7a2 <__register_exitproc+0x3e>
 802b814:	240281f0 	.word	0x240281f0
 802b818:	24028164 	.word	0x24028164
 802b81c:	0803021c 	.word	0x0803021c
 802b820:	0802ad2d 	.word	0x0802ad2d
 802b824:	24000124 	.word	0x24000124

0802b828 <__sflush_r>:
 802b828:	898a      	ldrh	r2, [r1, #12]
 802b82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b82e:	4605      	mov	r5, r0
 802b830:	0710      	lsls	r0, r2, #28
 802b832:	460c      	mov	r4, r1
 802b834:	d458      	bmi.n	802b8e8 <__sflush_r+0xc0>
 802b836:	684b      	ldr	r3, [r1, #4]
 802b838:	2b00      	cmp	r3, #0
 802b83a:	dc05      	bgt.n	802b848 <__sflush_r+0x20>
 802b83c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b83e:	2b00      	cmp	r3, #0
 802b840:	dc02      	bgt.n	802b848 <__sflush_r+0x20>
 802b842:	2000      	movs	r0, #0
 802b844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b84a:	2e00      	cmp	r6, #0
 802b84c:	d0f9      	beq.n	802b842 <__sflush_r+0x1a>
 802b84e:	2300      	movs	r3, #0
 802b850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b854:	682f      	ldr	r7, [r5, #0]
 802b856:	602b      	str	r3, [r5, #0]
 802b858:	d032      	beq.n	802b8c0 <__sflush_r+0x98>
 802b85a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b85c:	89a3      	ldrh	r3, [r4, #12]
 802b85e:	075a      	lsls	r2, r3, #29
 802b860:	d505      	bpl.n	802b86e <__sflush_r+0x46>
 802b862:	6863      	ldr	r3, [r4, #4]
 802b864:	1ac0      	subs	r0, r0, r3
 802b866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b868:	b10b      	cbz	r3, 802b86e <__sflush_r+0x46>
 802b86a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b86c:	1ac0      	subs	r0, r0, r3
 802b86e:	2300      	movs	r3, #0
 802b870:	4602      	mov	r2, r0
 802b872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b874:	6a21      	ldr	r1, [r4, #32]
 802b876:	4628      	mov	r0, r5
 802b878:	47b0      	blx	r6
 802b87a:	1c43      	adds	r3, r0, #1
 802b87c:	89a3      	ldrh	r3, [r4, #12]
 802b87e:	d106      	bne.n	802b88e <__sflush_r+0x66>
 802b880:	6829      	ldr	r1, [r5, #0]
 802b882:	291d      	cmp	r1, #29
 802b884:	d82c      	bhi.n	802b8e0 <__sflush_r+0xb8>
 802b886:	4a2a      	ldr	r2, [pc, #168]	; (802b930 <__sflush_r+0x108>)
 802b888:	40ca      	lsrs	r2, r1
 802b88a:	07d6      	lsls	r6, r2, #31
 802b88c:	d528      	bpl.n	802b8e0 <__sflush_r+0xb8>
 802b88e:	2200      	movs	r2, #0
 802b890:	6062      	str	r2, [r4, #4]
 802b892:	04d9      	lsls	r1, r3, #19
 802b894:	6922      	ldr	r2, [r4, #16]
 802b896:	6022      	str	r2, [r4, #0]
 802b898:	d504      	bpl.n	802b8a4 <__sflush_r+0x7c>
 802b89a:	1c42      	adds	r2, r0, #1
 802b89c:	d101      	bne.n	802b8a2 <__sflush_r+0x7a>
 802b89e:	682b      	ldr	r3, [r5, #0]
 802b8a0:	b903      	cbnz	r3, 802b8a4 <__sflush_r+0x7c>
 802b8a2:	6560      	str	r0, [r4, #84]	; 0x54
 802b8a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b8a6:	602f      	str	r7, [r5, #0]
 802b8a8:	2900      	cmp	r1, #0
 802b8aa:	d0ca      	beq.n	802b842 <__sflush_r+0x1a>
 802b8ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b8b0:	4299      	cmp	r1, r3
 802b8b2:	d002      	beq.n	802b8ba <__sflush_r+0x92>
 802b8b4:	4628      	mov	r0, r5
 802b8b6:	f7ff fa5f 	bl	802ad78 <_free_r>
 802b8ba:	2000      	movs	r0, #0
 802b8bc:	6360      	str	r0, [r4, #52]	; 0x34
 802b8be:	e7c1      	b.n	802b844 <__sflush_r+0x1c>
 802b8c0:	6a21      	ldr	r1, [r4, #32]
 802b8c2:	2301      	movs	r3, #1
 802b8c4:	4628      	mov	r0, r5
 802b8c6:	47b0      	blx	r6
 802b8c8:	1c41      	adds	r1, r0, #1
 802b8ca:	d1c7      	bne.n	802b85c <__sflush_r+0x34>
 802b8cc:	682b      	ldr	r3, [r5, #0]
 802b8ce:	2b00      	cmp	r3, #0
 802b8d0:	d0c4      	beq.n	802b85c <__sflush_r+0x34>
 802b8d2:	2b1d      	cmp	r3, #29
 802b8d4:	d001      	beq.n	802b8da <__sflush_r+0xb2>
 802b8d6:	2b16      	cmp	r3, #22
 802b8d8:	d101      	bne.n	802b8de <__sflush_r+0xb6>
 802b8da:	602f      	str	r7, [r5, #0]
 802b8dc:	e7b1      	b.n	802b842 <__sflush_r+0x1a>
 802b8de:	89a3      	ldrh	r3, [r4, #12]
 802b8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b8e4:	81a3      	strh	r3, [r4, #12]
 802b8e6:	e7ad      	b.n	802b844 <__sflush_r+0x1c>
 802b8e8:	690f      	ldr	r7, [r1, #16]
 802b8ea:	2f00      	cmp	r7, #0
 802b8ec:	d0a9      	beq.n	802b842 <__sflush_r+0x1a>
 802b8ee:	0793      	lsls	r3, r2, #30
 802b8f0:	680e      	ldr	r6, [r1, #0]
 802b8f2:	bf08      	it	eq
 802b8f4:	694b      	ldreq	r3, [r1, #20]
 802b8f6:	600f      	str	r7, [r1, #0]
 802b8f8:	bf18      	it	ne
 802b8fa:	2300      	movne	r3, #0
 802b8fc:	eba6 0807 	sub.w	r8, r6, r7
 802b900:	608b      	str	r3, [r1, #8]
 802b902:	f1b8 0f00 	cmp.w	r8, #0
 802b906:	dd9c      	ble.n	802b842 <__sflush_r+0x1a>
 802b908:	6a21      	ldr	r1, [r4, #32]
 802b90a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b90c:	4643      	mov	r3, r8
 802b90e:	463a      	mov	r2, r7
 802b910:	4628      	mov	r0, r5
 802b912:	47b0      	blx	r6
 802b914:	2800      	cmp	r0, #0
 802b916:	dc06      	bgt.n	802b926 <__sflush_r+0xfe>
 802b918:	89a3      	ldrh	r3, [r4, #12]
 802b91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b91e:	81a3      	strh	r3, [r4, #12]
 802b920:	f04f 30ff 	mov.w	r0, #4294967295
 802b924:	e78e      	b.n	802b844 <__sflush_r+0x1c>
 802b926:	4407      	add	r7, r0
 802b928:	eba8 0800 	sub.w	r8, r8, r0
 802b92c:	e7e9      	b.n	802b902 <__sflush_r+0xda>
 802b92e:	bf00      	nop
 802b930:	20400001 	.word	0x20400001

0802b934 <_fflush_r>:
 802b934:	b538      	push	{r3, r4, r5, lr}
 802b936:	690b      	ldr	r3, [r1, #16]
 802b938:	4605      	mov	r5, r0
 802b93a:	460c      	mov	r4, r1
 802b93c:	b913      	cbnz	r3, 802b944 <_fflush_r+0x10>
 802b93e:	2500      	movs	r5, #0
 802b940:	4628      	mov	r0, r5
 802b942:	bd38      	pop	{r3, r4, r5, pc}
 802b944:	b118      	cbz	r0, 802b94e <_fflush_r+0x1a>
 802b946:	6983      	ldr	r3, [r0, #24]
 802b948:	b90b      	cbnz	r3, 802b94e <_fflush_r+0x1a>
 802b94a:	f000 f887 	bl	802ba5c <__sinit>
 802b94e:	4b14      	ldr	r3, [pc, #80]	; (802b9a0 <_fflush_r+0x6c>)
 802b950:	429c      	cmp	r4, r3
 802b952:	d11b      	bne.n	802b98c <_fflush_r+0x58>
 802b954:	686c      	ldr	r4, [r5, #4]
 802b956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b95a:	2b00      	cmp	r3, #0
 802b95c:	d0ef      	beq.n	802b93e <_fflush_r+0xa>
 802b95e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b960:	07d0      	lsls	r0, r2, #31
 802b962:	d404      	bmi.n	802b96e <_fflush_r+0x3a>
 802b964:	0599      	lsls	r1, r3, #22
 802b966:	d402      	bmi.n	802b96e <_fflush_r+0x3a>
 802b968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b96a:	f7ff f9dc 	bl	802ad26 <__retarget_lock_acquire_recursive>
 802b96e:	4628      	mov	r0, r5
 802b970:	4621      	mov	r1, r4
 802b972:	f7ff ff59 	bl	802b828 <__sflush_r>
 802b976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b978:	07da      	lsls	r2, r3, #31
 802b97a:	4605      	mov	r5, r0
 802b97c:	d4e0      	bmi.n	802b940 <_fflush_r+0xc>
 802b97e:	89a3      	ldrh	r3, [r4, #12]
 802b980:	059b      	lsls	r3, r3, #22
 802b982:	d4dd      	bmi.n	802b940 <_fflush_r+0xc>
 802b984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b986:	f7ff f9d0 	bl	802ad2a <__retarget_lock_release_recursive>
 802b98a:	e7d9      	b.n	802b940 <_fflush_r+0xc>
 802b98c:	4b05      	ldr	r3, [pc, #20]	; (802b9a4 <_fflush_r+0x70>)
 802b98e:	429c      	cmp	r4, r3
 802b990:	d101      	bne.n	802b996 <_fflush_r+0x62>
 802b992:	68ac      	ldr	r4, [r5, #8]
 802b994:	e7df      	b.n	802b956 <_fflush_r+0x22>
 802b996:	4b04      	ldr	r3, [pc, #16]	; (802b9a8 <_fflush_r+0x74>)
 802b998:	429c      	cmp	r4, r3
 802b99a:	bf08      	it	eq
 802b99c:	68ec      	ldreq	r4, [r5, #12]
 802b99e:	e7da      	b.n	802b956 <_fflush_r+0x22>
 802b9a0:	08030240 	.word	0x08030240
 802b9a4:	08030260 	.word	0x08030260
 802b9a8:	08030220 	.word	0x08030220

0802b9ac <std>:
 802b9ac:	2300      	movs	r3, #0
 802b9ae:	b510      	push	{r4, lr}
 802b9b0:	4604      	mov	r4, r0
 802b9b2:	e9c0 3300 	strd	r3, r3, [r0]
 802b9b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b9ba:	6083      	str	r3, [r0, #8]
 802b9bc:	8181      	strh	r1, [r0, #12]
 802b9be:	6643      	str	r3, [r0, #100]	; 0x64
 802b9c0:	81c2      	strh	r2, [r0, #14]
 802b9c2:	6183      	str	r3, [r0, #24]
 802b9c4:	4619      	mov	r1, r3
 802b9c6:	2208      	movs	r2, #8
 802b9c8:	305c      	adds	r0, #92	; 0x5c
 802b9ca:	f7ff f9cd 	bl	802ad68 <memset>
 802b9ce:	4b05      	ldr	r3, [pc, #20]	; (802b9e4 <std+0x38>)
 802b9d0:	6263      	str	r3, [r4, #36]	; 0x24
 802b9d2:	4b05      	ldr	r3, [pc, #20]	; (802b9e8 <std+0x3c>)
 802b9d4:	62a3      	str	r3, [r4, #40]	; 0x28
 802b9d6:	4b05      	ldr	r3, [pc, #20]	; (802b9ec <std+0x40>)
 802b9d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b9da:	4b05      	ldr	r3, [pc, #20]	; (802b9f0 <std+0x44>)
 802b9dc:	6224      	str	r4, [r4, #32]
 802b9de:	6323      	str	r3, [r4, #48]	; 0x30
 802b9e0:	bd10      	pop	{r4, pc}
 802b9e2:	bf00      	nop
 802b9e4:	0802bc79 	.word	0x0802bc79
 802b9e8:	0802bc9b 	.word	0x0802bc9b
 802b9ec:	0802bcd3 	.word	0x0802bcd3
 802b9f0:	0802bcf7 	.word	0x0802bcf7

0802b9f4 <_cleanup_r>:
 802b9f4:	4901      	ldr	r1, [pc, #4]	; (802b9fc <_cleanup_r+0x8>)
 802b9f6:	f000 b8af 	b.w	802bb58 <_fwalk_reent>
 802b9fa:	bf00      	nop
 802b9fc:	0802b935 	.word	0x0802b935

0802ba00 <__sfmoreglue>:
 802ba00:	b570      	push	{r4, r5, r6, lr}
 802ba02:	2268      	movs	r2, #104	; 0x68
 802ba04:	1e4d      	subs	r5, r1, #1
 802ba06:	4355      	muls	r5, r2
 802ba08:	460e      	mov	r6, r1
 802ba0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802ba0e:	f7ff fa1f 	bl	802ae50 <_malloc_r>
 802ba12:	4604      	mov	r4, r0
 802ba14:	b140      	cbz	r0, 802ba28 <__sfmoreglue+0x28>
 802ba16:	2100      	movs	r1, #0
 802ba18:	e9c0 1600 	strd	r1, r6, [r0]
 802ba1c:	300c      	adds	r0, #12
 802ba1e:	60a0      	str	r0, [r4, #8]
 802ba20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802ba24:	f7ff f9a0 	bl	802ad68 <memset>
 802ba28:	4620      	mov	r0, r4
 802ba2a:	bd70      	pop	{r4, r5, r6, pc}

0802ba2c <__sfp_lock_acquire>:
 802ba2c:	4801      	ldr	r0, [pc, #4]	; (802ba34 <__sfp_lock_acquire+0x8>)
 802ba2e:	f7ff b97a 	b.w	802ad26 <__retarget_lock_acquire_recursive>
 802ba32:	bf00      	nop
 802ba34:	24028052 	.word	0x24028052

0802ba38 <__sfp_lock_release>:
 802ba38:	4801      	ldr	r0, [pc, #4]	; (802ba40 <__sfp_lock_release+0x8>)
 802ba3a:	f7ff b976 	b.w	802ad2a <__retarget_lock_release_recursive>
 802ba3e:	bf00      	nop
 802ba40:	24028052 	.word	0x24028052

0802ba44 <__sinit_lock_acquire>:
 802ba44:	4801      	ldr	r0, [pc, #4]	; (802ba4c <__sinit_lock_acquire+0x8>)
 802ba46:	f7ff b96e 	b.w	802ad26 <__retarget_lock_acquire_recursive>
 802ba4a:	bf00      	nop
 802ba4c:	24028053 	.word	0x24028053

0802ba50 <__sinit_lock_release>:
 802ba50:	4801      	ldr	r0, [pc, #4]	; (802ba58 <__sinit_lock_release+0x8>)
 802ba52:	f7ff b96a 	b.w	802ad2a <__retarget_lock_release_recursive>
 802ba56:	bf00      	nop
 802ba58:	24028053 	.word	0x24028053

0802ba5c <__sinit>:
 802ba5c:	b510      	push	{r4, lr}
 802ba5e:	4604      	mov	r4, r0
 802ba60:	f7ff fff0 	bl	802ba44 <__sinit_lock_acquire>
 802ba64:	69a3      	ldr	r3, [r4, #24]
 802ba66:	b11b      	cbz	r3, 802ba70 <__sinit+0x14>
 802ba68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ba6c:	f7ff bff0 	b.w	802ba50 <__sinit_lock_release>
 802ba70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802ba74:	6523      	str	r3, [r4, #80]	; 0x50
 802ba76:	4b13      	ldr	r3, [pc, #76]	; (802bac4 <__sinit+0x68>)
 802ba78:	4a13      	ldr	r2, [pc, #76]	; (802bac8 <__sinit+0x6c>)
 802ba7a:	681b      	ldr	r3, [r3, #0]
 802ba7c:	62a2      	str	r2, [r4, #40]	; 0x28
 802ba7e:	42a3      	cmp	r3, r4
 802ba80:	bf04      	itt	eq
 802ba82:	2301      	moveq	r3, #1
 802ba84:	61a3      	streq	r3, [r4, #24]
 802ba86:	4620      	mov	r0, r4
 802ba88:	f000 f820 	bl	802bacc <__sfp>
 802ba8c:	6060      	str	r0, [r4, #4]
 802ba8e:	4620      	mov	r0, r4
 802ba90:	f000 f81c 	bl	802bacc <__sfp>
 802ba94:	60a0      	str	r0, [r4, #8]
 802ba96:	4620      	mov	r0, r4
 802ba98:	f000 f818 	bl	802bacc <__sfp>
 802ba9c:	2200      	movs	r2, #0
 802ba9e:	60e0      	str	r0, [r4, #12]
 802baa0:	2104      	movs	r1, #4
 802baa2:	6860      	ldr	r0, [r4, #4]
 802baa4:	f7ff ff82 	bl	802b9ac <std>
 802baa8:	68a0      	ldr	r0, [r4, #8]
 802baaa:	2201      	movs	r2, #1
 802baac:	2109      	movs	r1, #9
 802baae:	f7ff ff7d 	bl	802b9ac <std>
 802bab2:	68e0      	ldr	r0, [r4, #12]
 802bab4:	2202      	movs	r2, #2
 802bab6:	2112      	movs	r1, #18
 802bab8:	f7ff ff78 	bl	802b9ac <std>
 802babc:	2301      	movs	r3, #1
 802babe:	61a3      	str	r3, [r4, #24]
 802bac0:	e7d2      	b.n	802ba68 <__sinit+0xc>
 802bac2:	bf00      	nop
 802bac4:	080301e4 	.word	0x080301e4
 802bac8:	0802b9f5 	.word	0x0802b9f5

0802bacc <__sfp>:
 802bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bace:	4607      	mov	r7, r0
 802bad0:	f7ff ffac 	bl	802ba2c <__sfp_lock_acquire>
 802bad4:	4b1e      	ldr	r3, [pc, #120]	; (802bb50 <__sfp+0x84>)
 802bad6:	681e      	ldr	r6, [r3, #0]
 802bad8:	69b3      	ldr	r3, [r6, #24]
 802bada:	b913      	cbnz	r3, 802bae2 <__sfp+0x16>
 802badc:	4630      	mov	r0, r6
 802bade:	f7ff ffbd 	bl	802ba5c <__sinit>
 802bae2:	3648      	adds	r6, #72	; 0x48
 802bae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802bae8:	3b01      	subs	r3, #1
 802baea:	d503      	bpl.n	802baf4 <__sfp+0x28>
 802baec:	6833      	ldr	r3, [r6, #0]
 802baee:	b30b      	cbz	r3, 802bb34 <__sfp+0x68>
 802baf0:	6836      	ldr	r6, [r6, #0]
 802baf2:	e7f7      	b.n	802bae4 <__sfp+0x18>
 802baf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802baf8:	b9d5      	cbnz	r5, 802bb30 <__sfp+0x64>
 802bafa:	4b16      	ldr	r3, [pc, #88]	; (802bb54 <__sfp+0x88>)
 802bafc:	60e3      	str	r3, [r4, #12]
 802bafe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802bb02:	6665      	str	r5, [r4, #100]	; 0x64
 802bb04:	f7ff f90e 	bl	802ad24 <__retarget_lock_init_recursive>
 802bb08:	f7ff ff96 	bl	802ba38 <__sfp_lock_release>
 802bb0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802bb10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802bb14:	6025      	str	r5, [r4, #0]
 802bb16:	61a5      	str	r5, [r4, #24]
 802bb18:	2208      	movs	r2, #8
 802bb1a:	4629      	mov	r1, r5
 802bb1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802bb20:	f7ff f922 	bl	802ad68 <memset>
 802bb24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802bb28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802bb2c:	4620      	mov	r0, r4
 802bb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bb30:	3468      	adds	r4, #104	; 0x68
 802bb32:	e7d9      	b.n	802bae8 <__sfp+0x1c>
 802bb34:	2104      	movs	r1, #4
 802bb36:	4638      	mov	r0, r7
 802bb38:	f7ff ff62 	bl	802ba00 <__sfmoreglue>
 802bb3c:	4604      	mov	r4, r0
 802bb3e:	6030      	str	r0, [r6, #0]
 802bb40:	2800      	cmp	r0, #0
 802bb42:	d1d5      	bne.n	802baf0 <__sfp+0x24>
 802bb44:	f7ff ff78 	bl	802ba38 <__sfp_lock_release>
 802bb48:	230c      	movs	r3, #12
 802bb4a:	603b      	str	r3, [r7, #0]
 802bb4c:	e7ee      	b.n	802bb2c <__sfp+0x60>
 802bb4e:	bf00      	nop
 802bb50:	080301e4 	.word	0x080301e4
 802bb54:	ffff0001 	.word	0xffff0001

0802bb58 <_fwalk_reent>:
 802bb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bb5c:	4606      	mov	r6, r0
 802bb5e:	4688      	mov	r8, r1
 802bb60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802bb64:	2700      	movs	r7, #0
 802bb66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802bb6a:	f1b9 0901 	subs.w	r9, r9, #1
 802bb6e:	d505      	bpl.n	802bb7c <_fwalk_reent+0x24>
 802bb70:	6824      	ldr	r4, [r4, #0]
 802bb72:	2c00      	cmp	r4, #0
 802bb74:	d1f7      	bne.n	802bb66 <_fwalk_reent+0xe>
 802bb76:	4638      	mov	r0, r7
 802bb78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bb7c:	89ab      	ldrh	r3, [r5, #12]
 802bb7e:	2b01      	cmp	r3, #1
 802bb80:	d907      	bls.n	802bb92 <_fwalk_reent+0x3a>
 802bb82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802bb86:	3301      	adds	r3, #1
 802bb88:	d003      	beq.n	802bb92 <_fwalk_reent+0x3a>
 802bb8a:	4629      	mov	r1, r5
 802bb8c:	4630      	mov	r0, r6
 802bb8e:	47c0      	blx	r8
 802bb90:	4307      	orrs	r7, r0
 802bb92:	3568      	adds	r5, #104	; 0x68
 802bb94:	e7e9      	b.n	802bb6a <_fwalk_reent+0x12>

0802bb96 <__swhatbuf_r>:
 802bb96:	b570      	push	{r4, r5, r6, lr}
 802bb98:	460e      	mov	r6, r1
 802bb9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bb9e:	2900      	cmp	r1, #0
 802bba0:	b096      	sub	sp, #88	; 0x58
 802bba2:	4614      	mov	r4, r2
 802bba4:	461d      	mov	r5, r3
 802bba6:	da08      	bge.n	802bbba <__swhatbuf_r+0x24>
 802bba8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802bbac:	2200      	movs	r2, #0
 802bbae:	602a      	str	r2, [r5, #0]
 802bbb0:	061a      	lsls	r2, r3, #24
 802bbb2:	d410      	bmi.n	802bbd6 <__swhatbuf_r+0x40>
 802bbb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bbb8:	e00e      	b.n	802bbd8 <__swhatbuf_r+0x42>
 802bbba:	466a      	mov	r2, sp
 802bbbc:	f000 f8c2 	bl	802bd44 <_fstat_r>
 802bbc0:	2800      	cmp	r0, #0
 802bbc2:	dbf1      	blt.n	802bba8 <__swhatbuf_r+0x12>
 802bbc4:	9a01      	ldr	r2, [sp, #4]
 802bbc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802bbca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802bbce:	425a      	negs	r2, r3
 802bbd0:	415a      	adcs	r2, r3
 802bbd2:	602a      	str	r2, [r5, #0]
 802bbd4:	e7ee      	b.n	802bbb4 <__swhatbuf_r+0x1e>
 802bbd6:	2340      	movs	r3, #64	; 0x40
 802bbd8:	2000      	movs	r0, #0
 802bbda:	6023      	str	r3, [r4, #0]
 802bbdc:	b016      	add	sp, #88	; 0x58
 802bbde:	bd70      	pop	{r4, r5, r6, pc}

0802bbe0 <__smakebuf_r>:
 802bbe0:	898b      	ldrh	r3, [r1, #12]
 802bbe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802bbe4:	079d      	lsls	r5, r3, #30
 802bbe6:	4606      	mov	r6, r0
 802bbe8:	460c      	mov	r4, r1
 802bbea:	d507      	bpl.n	802bbfc <__smakebuf_r+0x1c>
 802bbec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802bbf0:	6023      	str	r3, [r4, #0]
 802bbf2:	6123      	str	r3, [r4, #16]
 802bbf4:	2301      	movs	r3, #1
 802bbf6:	6163      	str	r3, [r4, #20]
 802bbf8:	b002      	add	sp, #8
 802bbfa:	bd70      	pop	{r4, r5, r6, pc}
 802bbfc:	ab01      	add	r3, sp, #4
 802bbfe:	466a      	mov	r2, sp
 802bc00:	f7ff ffc9 	bl	802bb96 <__swhatbuf_r>
 802bc04:	9900      	ldr	r1, [sp, #0]
 802bc06:	4605      	mov	r5, r0
 802bc08:	4630      	mov	r0, r6
 802bc0a:	f7ff f921 	bl	802ae50 <_malloc_r>
 802bc0e:	b948      	cbnz	r0, 802bc24 <__smakebuf_r+0x44>
 802bc10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bc14:	059a      	lsls	r2, r3, #22
 802bc16:	d4ef      	bmi.n	802bbf8 <__smakebuf_r+0x18>
 802bc18:	f023 0303 	bic.w	r3, r3, #3
 802bc1c:	f043 0302 	orr.w	r3, r3, #2
 802bc20:	81a3      	strh	r3, [r4, #12]
 802bc22:	e7e3      	b.n	802bbec <__smakebuf_r+0xc>
 802bc24:	4b0d      	ldr	r3, [pc, #52]	; (802bc5c <__smakebuf_r+0x7c>)
 802bc26:	62b3      	str	r3, [r6, #40]	; 0x28
 802bc28:	89a3      	ldrh	r3, [r4, #12]
 802bc2a:	6020      	str	r0, [r4, #0]
 802bc2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bc30:	81a3      	strh	r3, [r4, #12]
 802bc32:	9b00      	ldr	r3, [sp, #0]
 802bc34:	6163      	str	r3, [r4, #20]
 802bc36:	9b01      	ldr	r3, [sp, #4]
 802bc38:	6120      	str	r0, [r4, #16]
 802bc3a:	b15b      	cbz	r3, 802bc54 <__smakebuf_r+0x74>
 802bc3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bc40:	4630      	mov	r0, r6
 802bc42:	f000 f891 	bl	802bd68 <_isatty_r>
 802bc46:	b128      	cbz	r0, 802bc54 <__smakebuf_r+0x74>
 802bc48:	89a3      	ldrh	r3, [r4, #12]
 802bc4a:	f023 0303 	bic.w	r3, r3, #3
 802bc4e:	f043 0301 	orr.w	r3, r3, #1
 802bc52:	81a3      	strh	r3, [r4, #12]
 802bc54:	89a0      	ldrh	r0, [r4, #12]
 802bc56:	4305      	orrs	r5, r0
 802bc58:	81a5      	strh	r5, [r4, #12]
 802bc5a:	e7cd      	b.n	802bbf8 <__smakebuf_r+0x18>
 802bc5c:	0802b9f5 	.word	0x0802b9f5

0802bc60 <__malloc_lock>:
 802bc60:	4801      	ldr	r0, [pc, #4]	; (802bc68 <__malloc_lock+0x8>)
 802bc62:	f7ff b860 	b.w	802ad26 <__retarget_lock_acquire_recursive>
 802bc66:	bf00      	nop
 802bc68:	24028051 	.word	0x24028051

0802bc6c <__malloc_unlock>:
 802bc6c:	4801      	ldr	r0, [pc, #4]	; (802bc74 <__malloc_unlock+0x8>)
 802bc6e:	f7ff b85c 	b.w	802ad2a <__retarget_lock_release_recursive>
 802bc72:	bf00      	nop
 802bc74:	24028051 	.word	0x24028051

0802bc78 <__sread>:
 802bc78:	b510      	push	{r4, lr}
 802bc7a:	460c      	mov	r4, r1
 802bc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bc80:	f000 f894 	bl	802bdac <_read_r>
 802bc84:	2800      	cmp	r0, #0
 802bc86:	bfab      	itete	ge
 802bc88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802bc8a:	89a3      	ldrhlt	r3, [r4, #12]
 802bc8c:	181b      	addge	r3, r3, r0
 802bc8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802bc92:	bfac      	ite	ge
 802bc94:	6563      	strge	r3, [r4, #84]	; 0x54
 802bc96:	81a3      	strhlt	r3, [r4, #12]
 802bc98:	bd10      	pop	{r4, pc}

0802bc9a <__swrite>:
 802bc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bc9e:	461f      	mov	r7, r3
 802bca0:	898b      	ldrh	r3, [r1, #12]
 802bca2:	05db      	lsls	r3, r3, #23
 802bca4:	4605      	mov	r5, r0
 802bca6:	460c      	mov	r4, r1
 802bca8:	4616      	mov	r6, r2
 802bcaa:	d505      	bpl.n	802bcb8 <__swrite+0x1e>
 802bcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bcb0:	2302      	movs	r3, #2
 802bcb2:	2200      	movs	r2, #0
 802bcb4:	f000 f868 	bl	802bd88 <_lseek_r>
 802bcb8:	89a3      	ldrh	r3, [r4, #12]
 802bcba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bcbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802bcc2:	81a3      	strh	r3, [r4, #12]
 802bcc4:	4632      	mov	r2, r6
 802bcc6:	463b      	mov	r3, r7
 802bcc8:	4628      	mov	r0, r5
 802bcca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bcce:	f000 b817 	b.w	802bd00 <_write_r>

0802bcd2 <__sseek>:
 802bcd2:	b510      	push	{r4, lr}
 802bcd4:	460c      	mov	r4, r1
 802bcd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bcda:	f000 f855 	bl	802bd88 <_lseek_r>
 802bcde:	1c43      	adds	r3, r0, #1
 802bce0:	89a3      	ldrh	r3, [r4, #12]
 802bce2:	bf15      	itete	ne
 802bce4:	6560      	strne	r0, [r4, #84]	; 0x54
 802bce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802bcea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802bcee:	81a3      	strheq	r3, [r4, #12]
 802bcf0:	bf18      	it	ne
 802bcf2:	81a3      	strhne	r3, [r4, #12]
 802bcf4:	bd10      	pop	{r4, pc}

0802bcf6 <__sclose>:
 802bcf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bcfa:	f000 b813 	b.w	802bd24 <_close_r>
	...

0802bd00 <_write_r>:
 802bd00:	b538      	push	{r3, r4, r5, lr}
 802bd02:	4d07      	ldr	r5, [pc, #28]	; (802bd20 <_write_r+0x20>)
 802bd04:	4604      	mov	r4, r0
 802bd06:	4608      	mov	r0, r1
 802bd08:	4611      	mov	r1, r2
 802bd0a:	2200      	movs	r2, #0
 802bd0c:	602a      	str	r2, [r5, #0]
 802bd0e:	461a      	mov	r2, r3
 802bd10:	f7db feeb 	bl	8007aea <_write>
 802bd14:	1c43      	adds	r3, r0, #1
 802bd16:	d102      	bne.n	802bd1e <_write_r+0x1e>
 802bd18:	682b      	ldr	r3, [r5, #0]
 802bd1a:	b103      	cbz	r3, 802bd1e <_write_r+0x1e>
 802bd1c:	6023      	str	r3, [r4, #0]
 802bd1e:	bd38      	pop	{r3, r4, r5, pc}
 802bd20:	240281f4 	.word	0x240281f4

0802bd24 <_close_r>:
 802bd24:	b538      	push	{r3, r4, r5, lr}
 802bd26:	4d06      	ldr	r5, [pc, #24]	; (802bd40 <_close_r+0x1c>)
 802bd28:	2300      	movs	r3, #0
 802bd2a:	4604      	mov	r4, r0
 802bd2c:	4608      	mov	r0, r1
 802bd2e:	602b      	str	r3, [r5, #0]
 802bd30:	f7db fef7 	bl	8007b22 <_close>
 802bd34:	1c43      	adds	r3, r0, #1
 802bd36:	d102      	bne.n	802bd3e <_close_r+0x1a>
 802bd38:	682b      	ldr	r3, [r5, #0]
 802bd3a:	b103      	cbz	r3, 802bd3e <_close_r+0x1a>
 802bd3c:	6023      	str	r3, [r4, #0]
 802bd3e:	bd38      	pop	{r3, r4, r5, pc}
 802bd40:	240281f4 	.word	0x240281f4

0802bd44 <_fstat_r>:
 802bd44:	b538      	push	{r3, r4, r5, lr}
 802bd46:	4d07      	ldr	r5, [pc, #28]	; (802bd64 <_fstat_r+0x20>)
 802bd48:	2300      	movs	r3, #0
 802bd4a:	4604      	mov	r4, r0
 802bd4c:	4608      	mov	r0, r1
 802bd4e:	4611      	mov	r1, r2
 802bd50:	602b      	str	r3, [r5, #0]
 802bd52:	f7db fef2 	bl	8007b3a <_fstat>
 802bd56:	1c43      	adds	r3, r0, #1
 802bd58:	d102      	bne.n	802bd60 <_fstat_r+0x1c>
 802bd5a:	682b      	ldr	r3, [r5, #0]
 802bd5c:	b103      	cbz	r3, 802bd60 <_fstat_r+0x1c>
 802bd5e:	6023      	str	r3, [r4, #0]
 802bd60:	bd38      	pop	{r3, r4, r5, pc}
 802bd62:	bf00      	nop
 802bd64:	240281f4 	.word	0x240281f4

0802bd68 <_isatty_r>:
 802bd68:	b538      	push	{r3, r4, r5, lr}
 802bd6a:	4d06      	ldr	r5, [pc, #24]	; (802bd84 <_isatty_r+0x1c>)
 802bd6c:	2300      	movs	r3, #0
 802bd6e:	4604      	mov	r4, r0
 802bd70:	4608      	mov	r0, r1
 802bd72:	602b      	str	r3, [r5, #0]
 802bd74:	f7db fef1 	bl	8007b5a <_isatty>
 802bd78:	1c43      	adds	r3, r0, #1
 802bd7a:	d102      	bne.n	802bd82 <_isatty_r+0x1a>
 802bd7c:	682b      	ldr	r3, [r5, #0]
 802bd7e:	b103      	cbz	r3, 802bd82 <_isatty_r+0x1a>
 802bd80:	6023      	str	r3, [r4, #0]
 802bd82:	bd38      	pop	{r3, r4, r5, pc}
 802bd84:	240281f4 	.word	0x240281f4

0802bd88 <_lseek_r>:
 802bd88:	b538      	push	{r3, r4, r5, lr}
 802bd8a:	4d07      	ldr	r5, [pc, #28]	; (802bda8 <_lseek_r+0x20>)
 802bd8c:	4604      	mov	r4, r0
 802bd8e:	4608      	mov	r0, r1
 802bd90:	4611      	mov	r1, r2
 802bd92:	2200      	movs	r2, #0
 802bd94:	602a      	str	r2, [r5, #0]
 802bd96:	461a      	mov	r2, r3
 802bd98:	f7db feea 	bl	8007b70 <_lseek>
 802bd9c:	1c43      	adds	r3, r0, #1
 802bd9e:	d102      	bne.n	802bda6 <_lseek_r+0x1e>
 802bda0:	682b      	ldr	r3, [r5, #0]
 802bda2:	b103      	cbz	r3, 802bda6 <_lseek_r+0x1e>
 802bda4:	6023      	str	r3, [r4, #0]
 802bda6:	bd38      	pop	{r3, r4, r5, pc}
 802bda8:	240281f4 	.word	0x240281f4

0802bdac <_read_r>:
 802bdac:	b538      	push	{r3, r4, r5, lr}
 802bdae:	4d07      	ldr	r5, [pc, #28]	; (802bdcc <_read_r+0x20>)
 802bdb0:	4604      	mov	r4, r0
 802bdb2:	4608      	mov	r0, r1
 802bdb4:	4611      	mov	r1, r2
 802bdb6:	2200      	movs	r2, #0
 802bdb8:	602a      	str	r2, [r5, #0]
 802bdba:	461a      	mov	r2, r3
 802bdbc:	f7db fe78 	bl	8007ab0 <_read>
 802bdc0:	1c43      	adds	r3, r0, #1
 802bdc2:	d102      	bne.n	802bdca <_read_r+0x1e>
 802bdc4:	682b      	ldr	r3, [r5, #0]
 802bdc6:	b103      	cbz	r3, 802bdca <_read_r+0x1e>
 802bdc8:	6023      	str	r3, [r4, #0]
 802bdca:	bd38      	pop	{r3, r4, r5, pc}
 802bdcc:	240281f4 	.word	0x240281f4

0802bdd0 <_init>:
 802bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bdd2:	bf00      	nop
 802bdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bdd6:	bc08      	pop	{r3}
 802bdd8:	469e      	mov	lr, r3
 802bdda:	4770      	bx	lr

0802bddc <_fini>:
 802bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bdde:	bf00      	nop
 802bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bde2:	bc08      	pop	{r3}
 802bde4:	469e      	mov	lr, r3
 802bde6:	4770      	bx	lr
